<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.security.Key"/>
        <import package="java.security.AlgorithmParameters"/>
        <import package="java.security.InvalidKeyException"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <class name="ExemptionMechanismSpi" line="7">
            <javadoc line="7">
                This class defines the &lt;i&gt;Service Provider Interface&lt;/i&gt; (&lt;b&gt;SPI&lt;/b&gt;)
                  for the &lt;code&gt;ExemptionMechanism&lt;/code&gt; class.
                  All the abstract methods in this class must be implemented by each
                  cryptographic service provider who wishes to supply the implementation
                  of a particular exemption mechanism.                
                <author>
                    Sharon Liu                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineGetOutputSize" type="int" line="17"/>
            <javadoc line="17">
                Returns the length in bytes that an output buffer would need to be in
                  order to hold the result of the next{@link #engineGenExemptionBlob(byte[],int) engineGenExemptionBlob}operation, given the input length &lt;code&gt;inputLen&lt;/code&gt; (in bytes).
                  &lt;p&gt;The actual output length of the next{@link #engineGenExemptionBlob(byte[],int) engineGenExemptionBlob}call may be smaller than the length returned by this method.                
                <param>
                    inputLen the input length (in bytes)                    
                </param>
                <return>
                    the required output buffer size (in bytes)                    
                </return>
            </javadoc>
            <method name="engineInit" type="void" line="25"/>
            <javadoc line="25">
                Initializes this exemption mechanism with a key.
                  &lt;p&gt;If this exemption mechanism requires any algorithm parameters
                  that cannot be derived from the given &lt;code&gt;key&lt;/code&gt;, the underlying
                  exemption mechanism implementation is supposed to generate the required
                  parameters itself (using provider-specific default values); in the case
                  that algorithm parameters must be specified by the caller, an
                  &lt;code&gt;InvalidKeyException&lt;/code&gt; is raised.                
                <param>
                    key the key for this exemption mechanism                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this exemption mechanism.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of initializing.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="40"/>
            <javadoc line="40">
                Initializes this exemption mechanism with a key and a set of algorithm
                  parameters.
                  &lt;p&gt;If this exemption mechanism requires any algorithm parameters and
                  &lt;code&gt;params&lt;/code&gt; is null, the underlying exemption mechanism
                  implementation is supposed to generate the required parameters
                  itself (using provider-specific default values); in the case that
                  algorithm parameters must be specified by the caller, an
                  &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; is raised.                
                <param>
                    key the key for this exemption mechanism                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this exemption mechanism.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this exemption mechanism.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of initializing.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="59"/>
            <javadoc line="59">
                Initializes this exemption mechanism with a key and a set of algorithm
                  parameters.
                  &lt;p&gt;If this exemption mechanism requires any algorithm parameters
                  and &lt;code&gt;params&lt;/code&gt; is null, the underlying exemption mechanism
                  implementation is supposed to generate the required parameters
                  itself (using provider-specific default values); in the case that
                  algorithm parameters must be specified by the caller, an
                  &lt;code&gt;InvalidAlgorithmParameterException&lt;/code&gt; is raised.                
                <param>
                    key the key for this exemption mechanism                    
                </param>
                <param>
                    params the algorithm parameters                    
                </param>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this exemption mechanism.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given algorithm
                      parameters are inappropriate for this exemption mechanism.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of initializing.                    
                </exception>
            </javadoc>
            <method name="engineGenExemptionBlob" type="byte[]" line="78"/>
            <javadoc line="78">
                Generates the exemption mechanism key blob.                
                <return>
                    the new buffer with the result key blob.                    
                </return>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of generating.                    
                </exception>
            </javadoc>
            <method name="engineGenExemptionBlob" type="int" line="85"/>
            <javadoc line="85">
                Generates the exemption mechanism key blob, and stores the result in
                  the &lt;code&gt;output&lt;/code&gt; buffer, starting at &lt;code&gt;outputOffset&lt;/code&gt;
                  inclusive.
                  &lt;p&gt;If the &lt;code&gt;output&lt;/code&gt; buffer is too small to hold the result,
                  a &lt;code&gt;ShortBufferException&lt;/code&gt; is thrown. In this case, repeat this
                  call with a larger output buffer. Use{@link #engineGetOutputSize(int) engineGetOutputSize} to determine
                  how big the output buffer should be.                
                <param>
                    output the buffer for the result                    
                </param>
                <param>
                    outputOffset the offset in &lt;code&gt;output&lt;/code&gt; where the result
                      is stored                    
                </param>
                <return>
                    the number of bytes stored in &lt;code&gt;output&lt;/code&gt;                    
                </return>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the result.                    
                </exception>
                <exception>
                    ExemptionMechanismException if problem(s) encountered in the
                      process of generating.                    
                </exception>
            </javadoc>
        </class>
    </source>