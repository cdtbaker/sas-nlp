<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.security"/>
        <import package="java.security.spec"/>
        <class name="KeyAgreementSpi" line="4">
            <javadoc line="4">
                This class defines the &lt;i&gt;Service Provider Interface&lt;/i&gt; (&lt;b&gt;SPI&lt;/b&gt;)
                  for the &lt;code&gt;KeyAgreement&lt;/code&gt; class.
                  All the abstract methods in this class must be implemented by each
                  cryptographic service provider who wishes to supply the implementation
                  of a particular key agreement algorithm.
                  &lt;p&gt; The keys involved in establishing a shared secret are created by one
                  of the
                  key generators (&lt;code&gt;KeyPairGenerator&lt;/code&gt; or
                  &lt;code&gt;KeyGenerator&lt;/code&gt;), a &lt;code&gt;KeyFactory&lt;/code&gt;, or as a result from
                  an intermediate phase of the key agreement protocol
                  ({@link #engineDoPhase(java.security.Key,boolean) engineDoPhase}).
                  &lt;p&gt; For each of the correspondents in the key exchange,
                  &lt;code&gt;engineDoPhase&lt;/code&gt;
                  needs to be called. For example, if the key exchange is with one other
                  party, &lt;code&gt;engineDoPhase&lt;/code&gt; needs to be called once, with the
                  &lt;code&gt;lastPhase&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;.
                  If the key exchange is
                  with two other parties, &lt;code&gt;engineDoPhase&lt;/code&gt; needs to be called twice,
                  the first time setting the &lt;code&gt;lastPhase&lt;/code&gt; flag to
                  &lt;code&gt;false&lt;/code&gt;, and the second time setting it to &lt;code&gt;true&lt;/code&gt;.
                  There may be any number of parties involved in a key exchange.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    KeyGenerator                    
                </see>
                <see>
                    SecretKey                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="engineInit" type="void" line="32"/>
            <javadoc line="32">
                Initializes this key agreement with the given key and source of
                  randomness. The given key is required to contain all the algorithm
                  parameters required for this key agreement.
                  &lt;p&gt; If the key agreement algorithm requires random bytes, it gets them
                  from the given source of randomness, &lt;code&gt;random&lt;/code&gt;.
                  However, if the underlying
                  algorithm implementation does not require any random bytes,
                  &lt;code&gt;random&lt;/code&gt; is ignored.                
                <param>
                    key the party&apos;s private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party&apos;s own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
            </javadoc>
            <method name="engineInit" type="void" line="50"/>
            <javadoc line="50">
                Initializes this key agreement with the given key, set of
                  algorithm parameters, and source of randomness.                
                <param>
                    key the party&apos;s private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party&apos;s own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    params the key agreement parameters                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key agreement.                    
                </exception>
            </javadoc>
            <method name="engineDoPhase" type="Key" line="65"/>
            <javadoc line="65">
                Executes the next phase of this key agreement with the given
                  key that was received from one of the other parties involved in this key
                  agreement.                
                <param>
                    key the key for this phase. For example, in the case of
                      Diffie-Hellman between 2 parties, this would be the other party&apos;s
                      Diffie-Hellman public key.                    
                </param>
                <param>
                    lastPhase flag which indicates whether or not this is the last
                      phase of this key agreement.                    
                </param>
                <return>
                    the (intermediate) key resulting from this phase, or null if
                      this phase does not yield a key                    
                </return>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this phase.                    
                </exception>
                <exception>
                    IllegalStateException if this key agreement has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="byte[]" line="82"/>
            <javadoc line="82">
                Generates the shared secret and returns it in a new buffer.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreementSpi&lt;/code&gt; object,
                  so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;engineInit&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <return>
                    the new buffer with the shared secret                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="int" line="95"/>
            <javadoc line="95">
                Generates the shared secret, and places it into the buffer
                  &lt;code&gt;sharedSecret&lt;/code&gt;, beginning at &lt;code&gt;offset&lt;/code&gt; inclusive.
                  &lt;p&gt;If the &lt;code&gt;sharedSecret&lt;/code&gt; buffer is too small to hold the
                  result, a &lt;code&gt;ShortBufferException&lt;/code&gt; is thrown.
                  In this case, this call should be repeated with a larger output buffer.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreementSpi&lt;/code&gt; object,
                  so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;engineInit&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <param>
                    sharedSecret the buffer for the shared secret                    
                </param>
                <param>
                    offset the offset in &lt;code&gt;sharedSecret&lt;/code&gt; where the
                      shared secret will be stored                    
                </param>
                <return>
                    the number of bytes placed into &lt;code&gt;sharedSecret&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the secret                    
                </exception>
            </javadoc>
            <method name="engineGenerateSecret" type="SecretKey" line="117"/>
            <javadoc line="117">
                Creates the shared secret and returns it as a secret key object
                  of the requested algorithm type.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreementSpi&lt;/code&gt; object,
                  so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;engineInit&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <param>
                    algorithm the requested secret key algorithm                    
                </param>
                <return>
                    the shared secret key                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the requested secret key
                      algorithm is not available                    
                </exception>
                <exception>
                    InvalidKeyException if the shared secret key material cannot
                      be used to generate a secret key of the requested algorithm type (e.g.,
                      the key material is too short)                    
                </exception>
            </javadoc>
        </class>
    </source>