<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.security.spec"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="SecretKeyFactory" line="8">
            <javadoc line="8">
                This class represents a factory for secret keys.
                  &lt;P&gt; Key factories are used to convert &lt;I&gt;keys&lt;/I&gt; (opaque
                  cryptographic keys of type &lt;code&gt;Key&lt;/code&gt;) into &lt;I&gt;key specifications&lt;/I&gt;
                  (transparent representations of the underlying key material), and vice
                  versa.
                  Secret key factories operate only on secret (symmetric) keys.
                  &lt;P&gt; Key factories are bi-directional, i.e., they allow to build an opaque
                  key object from a given key specification (key material), or to retrieve
                  the underlying key material of a key object in a suitable format.
                  &lt;P&gt; Application developers should refer to their provider&apos;s documentation
                  to find out which key specifications are supported by the{@link #generateSecret(java.security.spec.KeySpec) generateSecret} and{@link #getKeySpec(javax.crypto.SecretKey,java.lang.Class) getKeySpec}methods.
                  For example, the DES secret-key factory supplied by the &quot;SunJCE&quot; provider
                  supports &lt;code&gt;DESKeySpec&lt;/code&gt; as a transparent representation of DES
                  keys, and that provider&apos;s secret-key factory for Triple DES keys supports
                  &lt;code&gt;DESedeKeySpec&lt;/code&gt; as a transparent representation of Triple DES
                  keys.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;SecretKeyFactory&lt;/code&gt; algorithms:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;DES&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;DESede&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory&quot;&gt;
                  SecretKeyFactory section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    SecretKey                    
                </see>
                <see>
                    javax.crypto.spec.DESKeySpec                    
                </see>
                <see>
                    javax.crypto.spec.DESedeKeySpec                    
                </see>
                <see>
                    javax.crypto.spec.PBEKeySpec                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="provider" type="Provider" line="45"/>
            <declaration name="algorithm" type="String" line="46"/>
            <declaration name="spi" type="SecretKeyFactorySpi" line="47"/>
            <declaration name="lock" type="Object" line="48"/>
            <declaration name="serviceIterator" type="Iterator" line="49"/>
            <javadoc line="50">
                Creates a SecretKeyFactory object.                
                <param>
                    keyFacSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the secret-key algorithm                    
                </param>
            </javadoc>
            <method name="SecretKeyFactory" type="constructor" line="56">
                <params>
                    <param name="keyFacSpi" type="SecretKeyFactorySpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <method name="SecretKeyFactory" type="constructor" line="61">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="list" type="List" line="63"/>
                <scope line="65"/>
            </method>
            <javadoc line="69">
                Returns a &lt;code&gt;SecretKeyFactory&lt;/code&gt; object that converts
                  secret keys of the specified algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new SecretKeyFactory object encapsulating the
                  SecretKeyFactorySpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested secret-key
                      algorithm.
                      See the SecretKeyFactory section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new &lt;code&gt;SecretKeyFactory&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      SecretKeyFactorySpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="SecretKeyFactory" line="93">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="96">
                Returns a &lt;code&gt;SecretKeyFactory&lt;/code&gt; object that converts
                  secret keys of the specified algorithm.
                  &lt;p&gt; A new SecretKeyFactory object encapsulating the
                  SecretKeyFactorySpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested secret-key
                      algorithm.
                      See the SecretKeyFactory section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;SecretKeyFactory&lt;/code&gt; object.                    
                </return>
                <exception>
                    NoSuchAlgorithmException if a SecretKeyFactorySpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NullPointerException if the specified algorithm
                      is null.                    
                </exception>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </throws>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null or empty.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="SecretKeyFactory" line="124">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="125"/>
            </method>
            <javadoc line="128">
                Returns a &lt;code&gt;SecretKeyFactory&lt;/code&gt; object that converts
                  secret keys of the specified algorithm.
                  &lt;p&gt; A new SecretKeyFactory object encapsulating the
                  SecretKeyFactorySpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested secret-key
                      algorithm.
                      See the SecretKeyFactory section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#SecretKeyFactory&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;SecretKeyFactory&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if a SecretKeyFactorySpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="SecretKeyFactory" line="152">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="153"/>
            </method>
            <javadoc line="156">
                Returns the provider of this &lt;code&gt;SecretKeyFactory&lt;/code&gt; object.                
                <return>
                    the provider of this &lt;code&gt;SecretKeyFactory&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="160">
                <scope line="161"/>
            </method>
            <javadoc line="166">
                Returns the algorithm name of this &lt;code&gt;SecretKeyFactory&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;SecretKeyFactory&lt;/code&gt; object.                
                <return>
                    the algorithm name of this &lt;code&gt;SecretKeyFactory&lt;/code&gt;
                      object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="174"/>
            <javadoc line="177">
                Update the active spi of this class and return the next
                  implementation for failover. If no more implemenations are
                  available, this method returns null. However, the active spi of
                  this class is never set to null.                
            </javadoc>
            <method name="nextSpi" type="SecretKeyFactorySpi" line="183">
                <params>
                    <param name="oldSpi" type="SecretKeyFactorySpi"/>
                </params>
                <scope line="184">
                    <scope line="185"/>
                    <scope line="188"/>
                    <scope line="191">
                        <declaration name="s" type="Service" line="192"/>
                        <scope line="193"/>
                        <scope line="196">
                            <declaration name="obj" type="Object" line="197"/>
                            <scope line="198"/>
                            <declaration name="spi" type="SecretKeyFactorySpi" line="201"/>
                        </scope>
                        <scope line="206"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="213">
                Generates a &lt;code&gt;SecretKey&lt;/code&gt; object from the provided key
                  specification (key material).                
                <param>
                    keySpec the specification (key material) of the secret key                    
                </param>
                <return>
                    the secret key                    
                </return>
                <exception>
                    InvalidKeySpecException if the given key specification
                      is inappropriate for this secret-key factory to produce a secret key.                    
                </exception>
            </javadoc>
            <method name="generateSecret" type="SecretKey" line="221">
                <params>
                    <param name="keySpec" type="KeySpec"/>
                </params>
                <scope line="222"/>
                <declaration name="failure" type="Exception" line="225"/>
                <declaration name="mySpi" type="SecretKeyFactorySpi" line="226"/>
                <scope line="227">
                    <scope line="228"/>
                    <scope line="231">
                        <scope line="232"/>
                    </scope>
                </scope>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Returns a specification (key material) of the given key object
                  in the requested format.                
                <param>
                    key the key                    
                </param>
                <param>
                    keySpec the requested format in which the key material shall be
                      returned                    
                </param>
                <return>
                    the underlying key specification (key material) in the
                      requested format                    
                </return>
                <exception>
                    InvalidKeySpecException if the requested key specification is
                      inappropriate for the given key (e.g., the algorithms associated with
                      &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;keySpec&lt;/code&gt; do not match, or
                      &lt;code&gt;key&lt;/code&gt; references a key on a cryptographic hardware device
                      whereas &lt;code&gt;keySpec&lt;/code&gt; is the specification of a software-based
                      key), or the given key cannot be dealt with
                      (e.g., the given key has an algorithm or format not supported by this
                      secret-key factory).                    
                </exception>
            </javadoc>
            <method name="getKeySpec" type="KeySpec" line="261">
                <params>
                    <param name="key" type="SecretKey"/>
                    <param name="keySpec" type="Class"/>
                </params>
                <scope line="262"/>
                <declaration name="failure" type="Exception" line="265"/>
                <declaration name="mySpi" type="SecretKeyFactorySpi" line="266"/>
                <scope line="267">
                    <scope line="268"/>
                    <scope line="271">
                        <scope line="272"/>
                    </scope>
                </scope>
                <scope line="279"/>
            </method>
            <javadoc line="284">
                Translates a key object, whose provider may be unknown or potentially
                  untrusted, into a corresponding key object of this secret-key factory.                
                <param>
                    key the key whose provider is unknown or untrusted                    
                </param>
                <return>
                    the translated key                    
                </return>
                <exception>
                    InvalidKeyException if the given key cannot be processed
                      by this secret-key factory.                    
                </exception>
            </javadoc>
            <method name="translateKey" type="SecretKey" line="292">
                <params>
                    <param name="key" type="SecretKey"/>
                </params>
                <scope line="293"/>
                <declaration name="failure" type="Exception" line="296"/>
                <declaration name="mySpi" type="SecretKeyFactorySpi" line="297"/>
                <scope line="298">
                    <scope line="299"/>
                    <scope line="302">
                        <scope line="303"/>
                    </scope>
                </scope>
                <scope line="310"/>
            </method>
        </class>
    </source>