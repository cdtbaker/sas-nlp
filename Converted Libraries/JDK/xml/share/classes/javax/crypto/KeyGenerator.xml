<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.security.spec"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="KeyGenerator" line="37">
            <comment line="113">
                see java.security.KeyPairGenerator for failover notes                
            </comment>
            <comment line="120">
                The provider                
            </comment>
            <comment line="123">
                The provider implementation (delegate)                
            </comment>
            <comment line="126">
                The algorithm                
            </comment>
            <javadoc line="37">
                This class provides the functionality of a secret (symmetric) key generator.
                  &lt;p&gt;Key generators are constructed using one of the &lt;code&gt;getInstance&lt;/code&gt;
                  class methods of this class.
                  &lt;p&gt;KeyGenerator objects are reusable, i.e., after a key has been
                  generated, the same KeyGenerator object can be re-used to generate further
                  keys.
                  &lt;p&gt;There are two ways to generate a key: in an algorithm-independent
                  manner, and in an algorithm-specific manner.
                  The only difference between the two is the initialization of the object:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;Algorithm-Independent Initialization&lt;/b&gt;
                  &lt;p&gt;All key generators share the concepts of a &lt;i&gt;keysize&lt;/i&gt; and a
                  &lt;i&gt;source of randomness&lt;/i&gt;.
                  There is an{@link #init(int,java.security.SecureRandom) init}method in this KeyGenerator class that takes these two universally
                  shared types of arguments. There is also one that takes just a
                  &lt;code&gt;keysize&lt;/code&gt; argument, and uses the SecureRandom implementation
                  of the highest-priority installed provider as the source of randomness
                  (or a system-provided source of randomness if none of the installed
                  providers supply a SecureRandom implementation), and one that takes just a
                  source of randomness.
                  &lt;p&gt;Since no other parameters are specified when you call the above
                  algorithm-independent &lt;code&gt;init&lt;/code&gt; methods, it is up to the
                  provider what to do about the algorithm-specific parameters (if any) to be
                  associated with each of the keys.
                  &lt;p&gt;
                  &lt;li&gt;&lt;b&gt;Algorithm-Specific Initialization&lt;/b&gt;
                  &lt;p&gt;For situations where a set of algorithm-specific parameters already
                  exists, there are two{@link #init(java.security.spec.AlgorithmParameterSpec) init}methods that have an &lt;code&gt;AlgorithmParameterSpec&lt;/code&gt;
                  argument. One also has a &lt;code&gt;SecureRandom&lt;/code&gt; argument, while the
                  other uses the SecureRandom implementation
                  of the highest-priority installed provider as the source of randomness
                  (or a system-provided source of randomness if none of the installed
                  providers supply a SecureRandom implementation).
                  &lt;/ul&gt;
                  &lt;p&gt;In case the client does not explicitly initialize the KeyGenerator
                  (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must
                  supply (and document) a default initialization.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;KeyGenerator&lt;/code&gt; algorithms with the keysizes in
                  parentheses:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;AES&lt;/tt&gt; (128)&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;DES&lt;/tt&gt; (56)&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;DESede&lt;/tt&gt; (168)&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;HmacSHA1&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;tt&gt;HmacSHA256&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  These algorithms are described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator&quot;&gt;
                  KeyGenerator section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    SecretKey                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="I_NONE" type="int" line="114"/>
            <declaration name="I_RANDOM" type="int" line="115"/>
            <declaration name="I_PARAMS" type="int" line="116"/>
            <declaration name="I_SIZE" type="int" line="117"/>
            <declaration name="provider" type="Provider" line="120"/>
            <declaration name="spi" type="KeyGeneratorSpi" line="123"/>
            <declaration name="algorithm" type="String" line="126"/>
            <declaration name="lock" type="Object" line="128"/>
            <declaration name="serviceIterator" type="Iterator" line="130"/>
            <declaration name="initType" type="int" line="132"/>
            <declaration name="initKeySize" type="int" line="133"/>
            <declaration name="initParams" type="AlgorithmParameterSpec" line="134"/>
            <declaration name="initRandom" type="SecureRandom" line="135"/>
            <javadoc line="137">
                Creates a KeyGenerator object.                
                <param>
                    keyGenSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the algorithm                    
                </param>
            </javadoc>
            <method name="KeyGenerator" type="constructor" line="145">
                <params>
                    <param name="keyGenSpi" type="KeyGeneratorSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <method name="KeyGenerator" type="constructor" line="151">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <comment line="157">
                    fetch and instantiate initial spi                    
                </comment>
                <declaration name="list" type="List" line="153"/>
                <scope line="157"/>
            </method>
            <javadoc line="163">
                Returns the algorithm name of this &lt;code&gt;KeyGenerator&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;KeyGenerator&lt;/code&gt; object.                
                <return>
                    the algorithm name of this <code>KeyGenerator</code> object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="172"/>
            <javadoc line="176">
                Returns a &lt;code&gt;KeyGenerator&lt;/code&gt; object that generates secret keys
                  for the specified algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new KeyGenerator object encapsulating the
                  KeyGeneratorSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested key algorithm.
                      See the KeyGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new <code>KeyGenerator</code> object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      KeyGeneratorSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyGenerator" line="206">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="210">
                Returns a &lt;code&gt;KeyGenerator&lt;/code&gt; object that generates secret keys
                  for the specified algorithm.
                  &lt;p&gt; A new KeyGenerator object encapsulating the
                  KeyGeneratorSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested key algorithm.
                      See the KeyGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new <code>KeyGenerator</code> object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if a KeyGeneratorSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>provider</code>
                      is null or empty.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyGenerator" line="248">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="249"/>
            </method>
            <javadoc line="255">
                Returns a &lt;code&gt;KeyGenerator&lt;/code&gt; object that generates secret keys
                  for the specified algorithm.
                  &lt;p&gt; A new KeyGenerator object encapsulating the
                  KeyGeneratorSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested key algorithm.
                      See the KeyGenerator section in the <a href=
                      "{@docRoot}/../technotes/guides/security/StandardNames.html#KeyGenerator">
                      Java Cryptography Architecture Standard Algorithm Name Documentation</a>
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new <code>KeyGenerator</code> object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if a KeyGeneratorSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the <code>provider</code>
                      is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyGenerator" line="286">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="287"/>
            </method>
            <javadoc line="293">
                Returns the provider of this &lt;code&gt;KeyGenerator&lt;/code&gt; object.                
                <return>
                    the provider of this <code>KeyGenerator</code> object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="298">
                <scope line="299"/>
            </method>
            <javadoc line="305">
                Update the active spi of this class and return the next
                  implementation for failover. If no more implemenations are
                  available, this method returns null. However, the active spi of
                  this class is never set to null.                
            </javadoc>
            <method name="nextSpi" type="KeyGeneratorSpi" line="312">
                <params>
                    <param name="oldSpi" type="KeyGeneratorSpi"/>
                    <param name="reinit" type="boolean"/>
                </params>
                <comment line="315">
                    somebody else did a failover concurrently
                     try that spi now                    
                </comment>
                <comment line="330">
                    ignore non-spis                    
                </comment>
                <comment line="351">
                    ignore                    
                </comment>
                <scope line="313">
                    <scope line="316"/>
                    <scope line="319"/>
                    <scope line="322">
                        <declaration name="s" type="Service" line="323"/>
                        <scope line="324"/>
                        <scope line="327">
                            <declaration name="inst" type="Object" line="328"/>
                            <scope line="330"/>
                            <declaration name="spi" type="KeyGeneratorSpi" line="333"/>
                            <scope line="334">
                                <scope line="335"/>
                                <scope line="337"/>
                                <scope line="339"/>
                                <scope line="341"/>
                            </scope>
                        </scope>
                        <scope line="349"/>
                    </scope>
                </scope>
            </method>
            <method name="disableFailover" type="void" line="358"/>
            <javadoc line="365">
                Initializes this key generator.                
                <param>
                    random the source of randomness for this generator                    
                </param>
            </javadoc>
            <method name="init" type="void" line="370">
                <params>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="371"/>
                <declaration name="failure" type="RuntimeException" line="375"/>
                <declaration name="mySpi" type="KeyGeneratorSpi" line="376"/>
                <scope line="377">
                    <scope line="378"/>
                    <scope line="385">
                        <scope line="386"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="395">
                Initializes this key generator with the specified parameter set.
                  &lt;p&gt; If this key generator requires any random bytes, it will get them
                  using the{@link SecureRandom &lt;code&gt;SecureRandom&lt;/code&gt;}implementation of the highest-priority installed
                  provider as the source of randomness.
                  (If none of the installed providers supply an implementation of
                  SecureRandom, a system-provided source of randomness will be used.)                
                <param>
                    params the key generation parameters                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key generator                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="413">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="417">
                Initializes this key generator with the specified parameter
                  set and a user-provided source of randomness.                
                <param>
                    params the key generation parameters                    
                </param>
                <param>
                    random the source of randomness for this key generator                    
                </param>
                <exception>
                    InvalidAlgorithmParameterException if <code>params</code> is
                      inappropriate for this key generator                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="429">
                <params>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="430"/>
                <declaration name="failure" type="Exception" line="434"/>
                <declaration name="mySpi" type="KeyGeneratorSpi" line="435"/>
                <scope line="436">
                    <scope line="437"/>
                    <scope line="444">
                        <scope line="445"/>
                    </scope>
                </scope>
                <scope line="451"/>
                <scope line="454"/>
            </method>
            <javadoc line="460">
                Initializes this key generator for a certain keysize.
                  &lt;p&gt; If this key generator requires any random bytes, it will get them
                  using the{@link SecureRandom &lt;code&gt;SecureRandom&lt;/code&gt;}implementation of the highest-priority installed
                  provider as the source of randomness.
                  (If none of the installed providers supply an implementation of
                  SecureRandom, a system-provided source of randomness will be used.)                
                <param>
                    keysize the keysize. This is an algorithm-specific metric,
                      specified in number of bits.                    
                </param>
                <exception>
                    InvalidParameterException if the keysize is wrong or not
                      supported.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="477">
                <params>
                    <param name="keysize" type="int"/>
                </params>
            </method>
            <javadoc line="481">
                Initializes this key generator for a certain keysize, using a
                  user-provided source of randomness.                
                <param>
                    keysize the keysize. This is an algorithm-specific metric,
                      specified in number of bits.                    
                </param>
                <param>
                    random the source of randomness for this key generator                    
                </param>
                <exception>
                    InvalidParameterException if the keysize is wrong or not
                      supported.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="492">
                <params>
                    <param name="keysize" type="int"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="493"/>
                <declaration name="failure" type="RuntimeException" line="497"/>
                <declaration name="mySpi" type="KeyGeneratorSpi" line="498"/>
                <scope line="499">
                    <scope line="500"/>
                    <scope line="507">
                        <scope line="508"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="517">
                Generates a secret key.                
                <return>
                    the new key                    
                </return>
            </javadoc>
            <method name="generateKey" type="SecretKey" line="522">
                <scope line="523"/>
                <declaration name="failure" type="RuntimeException" line="526"/>
                <declaration name="mySpi" type="KeyGeneratorSpi" line="527"/>
                <scope line="528">
                    <scope line="529"/>
                    <scope line="531">
                        <scope line="532"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>