<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.util"/>
        <import package="java.util.jar"/>
        <import package="java.io"/>
        <import package="java.net.URL"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="JceSecurity" line="10">
            <javadoc line="10">
                This class instantiates implementations of JCE engine classes from
                  providers registered with the java.security.Security object.                
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    Sharon Liu                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="RANDOM" type="SecureRandom" line="18"/>
            <declaration name="defaultPolicy" type="CryptoPermissions" line="19"/>
            <declaration name="exemptPolicy" type="CryptoPermissions" line="20"/>
            <declaration name="verificationResults" type="Map" line="21"/>
            <declaration name="verifyingProviders" type="Map" line="22"/>
            <declaration name="isRestricted" type="boolean" line="23"/>
            <method name="JceSecurity" type="constructor" line="24"/>
            <scope line="26">
                <scope line="27">
                    <anonymous_class line="28">
                        <method name="run" type="Object" line="29"/>
                    </anonymous_class>
                </scope>
                <scope line="37">
                    <declaration name="se" type="SecurityException" line="38"/>
                </scope>
            </scope>
            <method name="getInstance" type="Instance" line="43">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="s" type="Service" line="44"/>
                <declaration name="ve" type="Exception" line="45"/>
                <scope line="46">
                    <declaration name="msg" type="String" line="47"/>
                </scope>
            </method>
            <method name="getInstance" type="Instance" line="52">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="s" type="Service" line="53"/>
                <declaration name="ve" type="Exception" line="54"/>
                <scope line="55">
                    <declaration name="msg" type="String" line="56"/>
                </scope>
            </method>
            <method name="getInstance" type="Instance" line="61">
                <params>
                    <param name="type" type="String"/>
                    <param name="clazz" type="Class"/>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="services" type="List" line="62"/>
                <declaration name="failure" type="NoSuchAlgorithmException" line="63"/>
                <scope line="64">
                    <declaration name="s" type="Service" line="65"/>
                    <scope line="66"/>
                    <scope line="69">
                        <declaration name="instance" type="Instance" line="70"/>
                    </scope>
                    <scope line="73"/>
                </scope>
            </method>
            <javadoc line="79">
                Verify if the JAR at URL codeBase is a signed exempt application
                  JAR file and returns the permissions bundled with the JAR.                
                <throws>
                    Exception on error                    
                </throws>
            </javadoc>
            <method name="verifyExemptJar" type="CryptoPermissions" line="84">
                <params>
                    <param name="codeBase" type="URL"/>
                </params>
                <declaration name="jv" type="JarVerifier" line="85"/>
            </method>
            <javadoc line="89">
                Verify if the JAR at URL codeBase is a signed provider JAR file.                
                <throws>
                    Exception on error                    
                </throws>
            </javadoc>
            <method name="verifyProviderJar" type="void" line="93">
                <params>
                    <param name="codeBase" type="URL"/>
                </params>
                <declaration name="jv" type="JarVerifier" line="94"/>
            </method>
            <declaration name="PROVIDER_VERIFIED" type="Object" line="97"/>
            <method name="getVerificationResult" type="Exception" line="98">
                <params>
                    <param name="p" type="Provider"/>
                </params>
                <declaration name="o" type="Object" line="99"/>
                <scope line="100"/>
                <scope line="103"/>
                <scope line="106"/>
                <scope line="109">
                    <declaration name="providerURL" type="URL" line="111"/>
                </scope>
                <scope line="116"/>
                <scope line="120"/>
            </method>
            <method name="canUseProvider" type="boolean" line="124">
                <params>
                    <param name="p" type="Provider"/>
                </params>
            </method>
            <declaration name="NULL_URL" type="URL" line="127"/>
            <scope line="128">
                <scope line="129"/>
                <scope line="132"/>
            </scope>
            <declaration name="codeBaseCacheRef" type="Map" line="136"/>
            <method name="getCodeBase" type="URL" line="137">
                <params>
                    <param name="clazz" type="Class"/>
                </params>
                <declaration name="url" type="URL" line="138"/>
                <scope line="139">
                    <anonymous_class line="140">
                        <method name="run" type="Object" line="141">
                            <declaration name="pd" type="ProtectionDomain" line="142"/>
                            <scope line="143">
                                <declaration name="cs" type="CodeSource" line="144"/>
                                <scope line="145"/>
                            </scope>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="setupJurisdictionPolicies" type="void" line="157">
                <declaration name="javaHomeDir" type="String" line="158"/>
                <declaration name="sep" type="String" line="159"/>
                <declaration name="pathToPolicyJar" type="String" line="160"/>
                <declaration name="exportJar" type="File" line="161"/>
                <declaration name="importJar" type="File" line="162"/>
                <declaration name="jceCipherURL" type="URL" line="163"/>
                <scope line="164"/>
                <declaration name="defaultExport" type="CryptoPermissions" line="167"/>
                <declaration name="exemptExport" type="CryptoPermissions" line="168"/>
                <declaration name="defaultImport" type="CryptoPermissions" line="170"/>
                <declaration name="exemptImport" type="CryptoPermissions" line="171"/>
                <scope line="173"/>
                <scope line="177"/>
                <scope line="180"/>
            </method>
            <javadoc line="184">
                Load the policies from the specified file. Also checks that the
                  policies are correctly signed.                
            </javadoc>
            <method name="loadPolicies" type="void" line="188">
                <params>
                    <param name="jarPathName" type="File"/>
                    <param name="defaultPolicy" type="CryptoPermissions"/>
                    <param name="exemptPolicy" type="CryptoPermissions"/>
                </params>
                <declaration name="jf" type="JarFile" line="189"/>
                <declaration name="entries" type="Enumeration" line="190"/>
                <scope line="191">
                    <declaration name="je" type="JarEntry" line="192"/>
                    <declaration name="is" type="InputStream" line="193"/>
                    <scope line="194">
                        <scope line="195"/>
                        <scope line="199"/>
                        <scope line="203"/>
                    </scope>
                    <scope line="207">
                        <scope line="208"/>
                    </scope>
                </scope>
            </method>
            <method name="getDefaultPolicy" type="CryptoPermissions" line="217"/>
            <method name="getExemptPolicy" type="CryptoPermissions" line="220"/>
            <method name="isRestricted" type="boolean" line="223"/>
        </class>
    </source>