<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.util"/>
        <import package="java.security"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.security.spec"/>
        <import package="sun.security.util.Debug"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="KeyAgreement" line="9">
            <javadoc line="9">
                This class provides the functionality of a key agreement (or key
                  exchange) protocol.
                  &lt;p&gt;
                  The keys involved in establishing a shared secret are created by one of the
                  key generators (&lt;code&gt;KeyPairGenerator&lt;/code&gt; or
                  &lt;code&gt;KeyGenerator&lt;/code&gt;), a &lt;code&gt;KeyFactory&lt;/code&gt;, or as a result from
                  an intermediate phase of the key agreement protocol.
                  &lt;p&gt; For each of the correspondents in the key exchange, &lt;code&gt;doPhase&lt;/code&gt;
                  needs to be called. For example, if this key exchange is with one other
                  party, &lt;code&gt;doPhase&lt;/code&gt; needs to be called once, with the
                  &lt;code&gt;lastPhase&lt;/code&gt; flag set to &lt;code&gt;true&lt;/code&gt;.
                  If this key exchange is
                  with two other parties, &lt;code&gt;doPhase&lt;/code&gt; needs to be called twice,
                  the first time setting the &lt;code&gt;lastPhase&lt;/code&gt; flag to
                  &lt;code&gt;false&lt;/code&gt;, and the second time setting it to &lt;code&gt;true&lt;/code&gt;.
                  There may be any number of parties involved in a key exchange.
                  &lt;p&gt; Every implementation of the Java platform is required to support the
                  following standard &lt;code&gt;KeyAgreement&lt;/code&gt; algorithm:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;tt&gt;DiffieHellman&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  This algorithm is described in the &lt;a href=
                  &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement&quot;&gt;
                  KeyAgreement section&lt;/a&gt; of the
                  Java Cryptography Architecture Standard Algorithm Name Documentation.
                  Consult the release documentation for your implementation to see if any
                  other algorithms are supported.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    KeyGenerator                    
                </see>
                <see>
                    SecretKey                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="debug" type="Debug" line="43"/>
            <declaration name="provider" type="Provider" line="44"/>
            <declaration name="spi" type="KeyAgreementSpi" line="45"/>
            <declaration name="algorithm" type="String" line="46"/>
            <declaration name="firstService" type="Service" line="47"/>
            <declaration name="serviceIterator" type="Iterator" line="48"/>
            <declaration name="lock" type="Object" line="49"/>
            <javadoc line="50">
                Creates a KeyAgreement object.                
                <param>
                    keyAgreeSpi the delegate                    
                </param>
                <param>
                    provider the provider                    
                </param>
                <param>
                    algorithm the algorithm                    
                </param>
            </javadoc>
            <method name="KeyAgreement" type="constructor" line="56">
                <params>
                    <param name="keyAgreeSpi" type="KeyAgreementSpi"/>
                    <param name="provider" type="Provider"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <method name="KeyAgreement" type="constructor" line="62">
                <params>
                    <param name="s" type="Service"/>
                    <param name="t" type="Iterator"/>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
            <javadoc line="68">
                Returns the algorithm name of this &lt;code&gt;KeyAgreement&lt;/code&gt; object.
                  &lt;p&gt;This is the same name that was specified in one of the
                  &lt;code&gt;getInstance&lt;/code&gt; calls that created this
                  &lt;code&gt;KeyAgreement&lt;/code&gt; object.                
                <return>
                    the algorithm name of this &lt;code&gt;KeyAgreement&lt;/code&gt; object.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="75"/>
            <javadoc line="78">
                Returns a &lt;code&gt;KeyAgreement&lt;/code&gt; object that implements the
                  specified key agreement algorithm.
                  &lt;p&gt; This method traverses the list of registered security Providers,
                  starting with the most preferred Provider.
                  A new KeyAgreement object encapsulating the
                  KeyAgreementSpi implementation from the first
                  Provider that supports the specified algorithm is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested key agreement
                      algorithm.
                      See the KeyAgreement section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation
                      for information about standard algorithm names.                    
                </param>
                <return>
                    the new &lt;code&gt;KeyAgreement&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if no Provider supports a
                      KeyAgreementSpi implementation for the
                      specified algorithm.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyAgreement" line="102">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
                <declaration name="services" type="List" line="103"/>
                <declaration name="t" type="Iterator" line="104"/>
                <scope line="105">
                    <declaration name="s" type="Service" line="106"/>
                    <scope line="107"/>
                </scope>
            </method>
            <javadoc line="114">
                Returns a &lt;code&gt;KeyAgreement&lt;/code&gt; object that implements the
                  specified key agreement algorithm.
                  &lt;p&gt; A new KeyAgreement object encapsulating the
                  KeyAgreementSpi implementation from the specified provider
                  is returned.  The specified provider must be registered
                  in the security provider list.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the standard name of the requested key agreement
                      algorithm.
                      See the KeyAgreement section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the name of the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;KeyAgreement&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if a KeyAgreementSpi
                      implementation for the specified algorithm is not
                      available from the specified provider.                    
                </exception>
                <exception>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null or empty.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyAgreement" line="142">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <declaration name="instance" type="Instance" line="143"/>
            </method>
            <javadoc line="146">
                Returns a &lt;code&gt;KeyAgreement&lt;/code&gt; object that implements the
                  specified key agreement algorithm.
                  &lt;p&gt; A new KeyAgreement object encapsulating the
                  KeyAgreementSpi implementation from the specified Provider
                  object is returned.  Note that the specified Provider object
                  does not have to be registered in the provider list.                
                <param>
                    algorithm the standard name of the requested key agreement
                      algorithm.
                      See the KeyAgreement section in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/StandardNames.html#KeyAgreement&quot;&gt;
                      Java Cryptography Architecture Standard Algorithm Name Documentation
                      for information about standard algorithm names.                    
                </param>
                <param>
                    provider the provider.                    
                </param>
                <return>
                    the new &lt;code&gt;KeyAgreement&lt;/code&gt; object.                    
                </return>
                <exception>
                    NullPointerException if the specified algorithm
                      is null.                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if a KeyAgreementSpi
                      implementation for the specified algorithm is not available
                      from the specified Provider object.                    
                </exception>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;provider&lt;/code&gt;
                      is null.                    
                </exception>
                <see>
                    java.security.Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyAgreement" line="170">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <declaration name="instance" type="Instance" line="171"/>
            </method>
            <declaration name="warnCount" type="int" line="174"/>
            <javadoc line="175">
                Choose the Spi from the first provider available. Used if
                  delayed provider selection is not possible because init()
                  is not the first method called.                
            </javadoc>
            <method name="chooseFirstProvider" type="void" line="180">
                <scope line="181"/>
                <scope line="184">
                    <scope line="185"/>
                    <scope line="188">
                        <declaration name="w" type="int" line="189"/>
                        <scope line="190">
                            <scope line="192"/>
                        </scope>
                    </scope>
                    <declaration name="lastException" type="Exception" line="198"/>
                    <scope line="199">
                        <declaration name="s" type="Service" line="200"/>
                        <scope line="201"/>
                        <scope line="205"/>
                        <scope line="208"/>
                        <scope line="211">
                            <declaration name="obj" type="Object" line="212"/>
                            <scope line="213"/>
                        </scope>
                        <scope line="222"/>
                    </scope>
                    <declaration name="e" type="ProviderException" line="226"/>
                    <scope line="227"/>
                </scope>
            </method>
            <declaration name="I_NO_PARAMS" type="int" line="233"/>
            <declaration name="I_PARAMS" type="int" line="234"/>
            <method name="implInit" type="void" line="235">
                <params>
                    <param name="spi" type="KeyAgreementSpi"/>
                    <param name="type" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="236"/>
                <scope line="239"/>
            </method>
            <method name="chooseProvider" type="void" line="243">
                <params>
                    <param name="initType" type="int"/>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="244">
                    <scope line="245"/>
                    <declaration name="lastException" type="Exception" line="249"/>
                    <scope line="250">
                        <declaration name="s" type="Service" line="251"/>
                        <scope line="252"/>
                        <scope line="256"/>
                        <scope line="259"/>
                        <scope line="262"/>
                        <scope line="265">
                            <declaration name="spi" type="KeyAgreementSpi" line="266"/>
                        </scope>
                        <scope line="274">
                            <scope line="275"/>
                        </scope>
                    </scope>
                    <scope line="280"/>
                    <scope line="283"/>
                    <scope line="286"/>
                    <declaration name="kName" type="String" line="289"/>
                </scope>
            </method>
            <javadoc line="293">
                Returns the provider of this &lt;code&gt;KeyAgreement&lt;/code&gt; object.                
                <return>
                    the provider of this &lt;code&gt;KeyAgreement&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="297"/>
            <javadoc line="301">
                Initializes this key agreement with the given key, which is required to
                  contain all the algorithm parameters required for this key agreement.
                  &lt;p&gt; If this key agreement requires any random bytes, it will get
                  them using the{@link SecureRandom &lt;code&gt;SecureRandom&lt;/code&gt;}implementation of the highest-priority
                  installed provider as the source of randomness.
                  (If none of the installed providers supply an implementation of
                  SecureRandom, a system-provided source of randomness will be used.)                
                <param>
                    key the party&apos;s private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party&apos;s own
                      Diffie-Hellman private key.                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="316">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <javadoc line="319">
                Initializes this key agreement with the given key and source of
                  randomness. The given key is required to contain all the algorithm
                  parameters required for this key agreement.
                  &lt;p&gt; If the key agreement algorithm requires random bytes, it gets them
                  from the given source of randomness, &lt;code&gt;random&lt;/code&gt;.
                  However, if the underlying
                  algorithm implementation does not require any random bytes,
                  &lt;code&gt;random&lt;/code&gt; is ignored.                
                <param>
                    key the party&apos;s private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party&apos;s own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="336">
                <params>
                    <param name="key" type="Key"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="337"/>
                <scope line="340">
                    <scope line="341"/>
                    <scope line="344"/>
                </scope>
            </method>
            <javadoc line="349">
                Initializes this key agreement with the given key and set of
                  algorithm parameters.
                  &lt;p&gt; If this key agreement requires any random bytes, it will get
                  them using the{@link SecureRandom &lt;code&gt;SecureRandom&lt;/code&gt;}implementation of the highest-priority
                  installed provider as the source of randomness.
                  (If none of the installed providers supply an implementation of
                  SecureRandom, a system-provided source of randomness will be used.)                
                <param>
                    key the party&apos;s private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party&apos;s own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    params the key agreement parameters                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key agreement.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="367">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="370">
                Initializes this key agreement with the given key, set of
                  algorithm parameters, and source of randomness.                
                <param>
                    key the party&apos;s private information. For example, in the case
                      of the Diffie-Hellman key agreement, this would be the party&apos;s own
                      Diffie-Hellman private key.                    
                </param>
                <param>
                    params the key agreement parameters                    
                </param>
                <param>
                    random the source of randomness                    
                </param>
                <exception>
                    InvalidKeyException if the given key is
                      inappropriate for this key agreement, e.g., is of the wrong type or
                      has an incompatible algorithm type.                    
                </exception>
                <exception>
                    InvalidAlgorithmParameterException if the given parameters
                      are inappropriate for this key agreement.                    
                </exception>
            </javadoc>
            <method name="init" type="void" line="384">
                <params>
                    <param name="key" type="Key"/>
                    <param name="params" type="AlgorithmParameterSpec"/>
                    <param name="random" type="SecureRandom"/>
                </params>
                <scope line="385"/>
                <scope line="388"/>
            </method>
            <javadoc line="392">
                Executes the next phase of this key agreement with the given
                  key that was received from one of the other parties involved in this key
                  agreement.                
                <param>
                    key the key for this phase. For example, in the case of
                      Diffie-Hellman between 2 parties, this would be the other party&apos;s
                      Diffie-Hellman public key.                    
                </param>
                <param>
                    lastPhase flag which indicates whether or not this is the last
                      phase of this key agreement.                    
                </param>
                <return>
                    the (intermediate) key resulting from this phase, or null
                      if this phase does not yield a key                    
                </return>
                <exception>
                    InvalidKeyException if the given key is inappropriate for
                      this phase.                    
                </exception>
                <exception>
                    IllegalStateException if this key agreement has not been
                      initialized.                    
                </exception>
            </javadoc>
            <method name="doPhase" type="Key" line="408">
                <params>
                    <param name="key" type="Key"/>
                    <param name="lastPhase" type="boolean"/>
                </params>
            </method>
            <javadoc line="412">
                Generates the shared secret and returns it in a new buffer.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreement&lt;/code&gt; object, so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;init&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <return>
                    the new buffer with the shared secret                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
            </javadoc>
            <method name="generateSecret" type="byte[]" line="423"/>
            <javadoc line="427">
                Generates the shared secret, and places it into the buffer
                  &lt;code&gt;sharedSecret&lt;/code&gt;, beginning at &lt;code&gt;offset&lt;/code&gt; inclusive.
                  &lt;p&gt;If the &lt;code&gt;sharedSecret&lt;/code&gt; buffer is too small to hold the
                  result, a &lt;code&gt;ShortBufferException&lt;/code&gt; is thrown.
                  In this case, this call should be repeated with a larger output buffer.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreement&lt;/code&gt; object, so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;init&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <param>
                    sharedSecret the buffer for the shared secret                    
                </param>
                <param>
                    offset the offset in &lt;code&gt;sharedSecret&lt;/code&gt; where the
                      shared secret will be stored                    
                </param>
                <return>
                    the number of bytes placed into &lt;code&gt;sharedSecret&lt;/code&gt;                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
                <exception>
                    ShortBufferException if the given output buffer is too small
                      to hold the secret                    
                </exception>
            </javadoc>
            <method name="generateSecret" type="int" line="447">
                <params>
                    <param name="sharedSecret" type="byte[]"/>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="451">
                Creates the shared secret and returns it as a &lt;code&gt;SecretKey&lt;/code&gt;
                  object of the specified algorithm.
                  &lt;p&gt;This method resets this &lt;code&gt;KeyAgreement&lt;/code&gt; object, so that it
                  can be reused for further key agreements. Unless this key agreement is
                  reinitialized with one of the &lt;code&gt;init&lt;/code&gt; methods, the same
                  private information and algorithm parameters will be used for
                  subsequent key agreements.                
                <param>
                    algorithm the requested secret-key algorithm                    
                </param>
                <return>
                    the shared secret key                    
                </return>
                <exception>
                    IllegalStateException if this key agreement has not been
                      completed yet                    
                </exception>
                <exception>
                    NoSuchAlgorithmException if the specified secret-key
                      algorithm is not available                    
                </exception>
                <exception>
                    InvalidKeyException if the shared secret-key material cannot
                      be used to generate a secret key of the specified algorithm (e.g.,
                      the key material is too short)                    
                </exception>
            </javadoc>
            <method name="generateSecret" type="SecretKey" line="469">
                <params>
                    <param name="algorithm" type="String"/>
                </params>
            </method>
        </class>
    </source>