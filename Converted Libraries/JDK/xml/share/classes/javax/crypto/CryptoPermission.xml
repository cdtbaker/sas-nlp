<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto">
        <import package="java.security"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="javax.crypto.spec"/>
        <class name="CryptoPermission" line="36">
            <extends class="java.security.Permission"/>
            <comment line="56">
                no restriction on maxKeySize                
            </comment>
            <comment line="59">
                no restriction on param                
            </comment>
            <javadoc line="36">
                The CryptoPermission class extends the
                  java.security.Permission class. A
                  CryptoPermission object is used to represent
                  the ability of an application/applet to use certain
                  algorithms with certain key sizes and other
                  restrictions in certain environments. &lt;p&gt;                
                <see>
                    java.security.Permission                    
                </see>
                <author>
                    Jan Luehe                    
                </author>
                <author>
                    Sharon Liu                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <declaration name="alg" type="String" line="54"/>
            <declaration name="maxKeySize" type="int" line="55"/>
            <declaration name="exemptionMechanism" type="String" line="56"/>
            <declaration name="algParamSpec" type="AlgorithmParameterSpec" line="57"/>
            <declaration name="checkParam" type="boolean" line="58"/>
            <declaration name="ALG_NAME_WILDCARD" type="String" line="60"/>
            <javadoc line="62">
                Constructor that takes an algorithm name.
                  This constructor implies that the given algorithm can be
                  used without any restrictions.                
                <param>
                    alg the algorithm name.                    
                </param>
            </javadoc>
            <method name="CryptoPermission" type="constructor" line="70">
                <params>
                    <param name="alg" type="String"/>
                </params>
            </method>
            <javadoc line="75">
                Constructor that takes an algorithm name and a maximum
                  key size.
                  This constructor implies that the given algorithm can be
                  used with a key size up to &lt;code&gt;maxKeySize&lt;/code&gt;.                
                <param>
                    alg the algorithm name.                    
                </param>
                <param>
                    maxKeySize the maximum allowable key size,
                      specified in number of bits.                    
                </param>
            </javadoc>
            <method name="CryptoPermission" type="constructor" line="87">
                <params>
                    <param name="alg" type="String"/>
                    <param name="maxKeySize" type="int"/>
                </params>
            </method>
            <javadoc line="93">
                Constructor that takes an algorithm name, a maximum
                  key size, and an AlgorithmParameterSpec object.
                  This constructor implies that the given algorithm can be
                  used with a key size up to &lt;code&gt;maxKeySize&lt;/code&gt;, and
                  algorithm
                  parameters up to the limits set in &lt;code&gt;algParamSpec&lt;/code&gt;.                
                <param>
                    alg the algorithm name.                    
                </param>
                <param>
                    maxKeySize the maximum allowable key size,
                      specified in number of bits.                    
                </param>
                <param>
                    algParamSpec the limits for allowable algorithm
                      parameters.                    
                </param>
            </javadoc>
            <method name="CryptoPermission" type="constructor" line="112">
                <params>
                    <param name="alg" type="String"/>
                    <param name="maxKeySize" type="int"/>
                    <param name="algParamSpec" type="AlgorithmParameterSpec"/>
                </params>
            </method>
            <javadoc line="120">
                Constructor that takes an algorithm name and the name of
                  an exemption mechanism.
                  This constructor implies that the given algorithm can be
                  used without any key size or algorithm parameter restrictions
                  provided that the specified exemption mechanism is enforced.                
                <param>
                    alg the algorithm name.                    
                </param>
                <param>
                    exemptionMechanism the name of the exemption mechanism.                    
                </param>
            </javadoc>
            <method name="CryptoPermission" type="constructor" line="133">
                <params>
                    <param name="alg" type="String"/>
                    <param name="exemptionMechanism" type="String"/>
                </params>
            </method>
            <javadoc line="139">
                Constructor that takes an algorithm name, a maximum key
                  size, and the name of an exemption mechanism.
                  This constructor implies that the given algorithm can be
                  used with a key size up to &lt;code&gt;maxKeySize&lt;/code&gt;
                  provided that the
                  specified exemption mechanism is enforced.                
                <param>
                    alg the algorithm name.                    
                </param>
                <param>
                    maxKeySize the maximum allowable key size,
                      specified in number of bits.                    
                </param>
                <param>
                    exemptionMechanism the name of the exemption
                      mechanism.                    
                </param>
            </javadoc>
            <method name="CryptoPermission" type="constructor" line="156">
                <params>
                    <param name="alg" type="String"/>
                    <param name="maxKeySize" type="int"/>
                    <param name="exemptionMechanism" type="String"/>
                </params>
            </method>
            <javadoc line="163">
                Constructor that takes an algorithm name, a maximum key
                  size, the name of an exemption mechanism, and an
                  AlgorithmParameterSpec object.
                  This constructor implies that the given algorithm can be
                  used with a key size up to &lt;code&gt;maxKeySize&lt;/code&gt;
                  and algorithm
                  parameters up to the limits set in &lt;code&gt;algParamSpec&lt;/code&gt;
                  provided that
                  the specified exemption mechanism is enforced.                
                <param>
                    alg the algorithm name.                    
                </param>
                <param>
                    maxKeySize the maximum allowable key size,
                      specified in number of bits.                    
                </param>
                <param>
                    algParamSpec the limit for allowable algorithm
                      parameter spec.                    
                </param>
                <param>
                    exemptionMechanism the name of the exemption
                      mechanism.                    
                </param>
            </javadoc>
            <method name="CryptoPermission" type="constructor" line="186">
                <params>
                    <param name="alg" type="String"/>
                    <param name="maxKeySize" type="int"/>
                    <param name="algParamSpec" type="AlgorithmParameterSpec"/>
                    <param name="exemptionMechanism" type="String"/>
                </params>
            </method>
            <javadoc line="195">
                Checks if the specified permission is &quot;implied&quot; by
                  this object.
                  &lt;p&gt;
                  More specifically, this method returns true if:&lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instance of CryptoPermission, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s algorithm name equals or (in the case of wildcards)
                  is implied by this permission&apos;s algorithm name, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s maximum allowable key size is less or
                  equal to this permission&apos;s maximum allowable key size, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s algorithm parameter spec equals or is
                  implied by this permission&apos;s algorithm parameter spec, and&lt;p&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s exemptionMechanism equals or
                  is implied by this permission&apos;s
                  exemptionMechanism (a &lt;code&gt;null&lt;/code&gt; exemption mechanism
                  implies any other exemption mechanism).
                  &lt;/ul&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is equal to or
                      implied by this permission, false otherwise.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="219">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <comment line="230">
                    alg is the same as cp&apos;s alg or                    
                </comment>
                <comment line="231">
                    alg is a wildcard.                    
                </comment>
                <comment line="233">
                    check algParamSpec.                    
                </comment>
                <comment line="238">
                    check exemptionMechanism.                    
                </comment>
                <declaration name="cp" type="CryptoPermission" line="223"/>
                <scope line="226"/>
                <scope line="232">
                    <scope line="234"/>
                    <scope line="239"/>
                </scope>
            </method>
            <javadoc line="247">
                Checks two CryptoPermission objects for equality. Checks that
                  &lt;code&gt;obj&lt;/code&gt; is a CryptoPermission, and has the same
                  algorithm name,
                  exemption mechanism name, maximum allowable key size and
                  algorithm parameter spec
                  as this object.
                  &lt;P&gt;                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if <code>obj</code> is equal to this object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="258">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="CryptoPermission" line="265"/>
                <scope line="268"/>
                <scope line="271"/>
            </method>
            <javadoc line="280">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="286">
                <declaration name="retval" type="int" line="287"/>
                <scope line="289"/>
                <scope line="293"/>
            </method>
            <javadoc line="299">
                There is no action defined for a CryptoPermission
                  onject.                
            </javadoc>
            <method name="getActions" type="String" line="304"/>
            <javadoc line="308">
                Returns a new PermissionCollection object for storing
                  CryptoPermission objects.                
                <return>
                    a new PermissionCollection object suitable for storing
                      CryptoPermissions.                    
                </return>
            </javadoc>
            <method name="newPermissionCollection" type="PermissionCollection" line="316"/>
            <javadoc line="320">
                Returns the algorithm name associated with
                  this CryptoPermission object.                
            </javadoc>
            <method name="getAlgorithm" type="String" line="324"/>
            <javadoc line="328">
                Returns the exemption mechanism name
                  associated with this CryptoPermission
                  object.                
            </javadoc>
            <method name="getExemptionMechanism" type="String" line="333"/>
            <javadoc line="337">
                Returns the maximum allowable key size associated
                  with this CryptoPermission object.                
            </javadoc>
            <method name="getMaxKeySize" type="int" line="341"/>
            <javadoc line="345">
                Returns true if there is a limitation on the
                  AlgorithmParameterSpec associated with this
                  CryptoPermission object and false if otherwise.                
            </javadoc>
            <method name="getCheckParam" type="boolean" line="350"/>
            <javadoc line="354">
                Returns the AlgorithmParameterSpec
                  associated with this CryptoPermission
                  object.                
            </javadoc>
            <method name="getAlgorithmParameterSpec" type="AlgorithmParameterSpec" line="359"/>
            <javadoc line="363">
                Returns a string describing this CryptoPermission.  The convention is to
                  specify the class name, the algorithm name, the maximum allowable
                  key size, and the name of the exemption mechanism, in the following
                  format: &apos;(&quot;ClassName&quot; &quot;algorithm&quot; &quot;keysize&quot; &quot;exemption_mechanism&quot;)&apos;.                
                <return>
                    information about this CryptoPermission.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="371">
                <comment line="383">
                    OPTIONAL                    
                </comment>
                <declaration name="buf" type="StringBuilder" line="372"/>
                <scope line="374">
                    <scope line="375"/>
                    <scope line="378"/>
                </scope>
                <scope line="383"/>
            </method>
            <method name="impliesExemptionMechanism" type="boolean" line="390">
                <params>
                    <param name="exemptionMechanism" type="String"/>
                </params>
                <scope line="391"/>
                <scope line="395"/>
                <scope line="399"/>
            </method>
            <method name="impliesParameterSpec" type="boolean" line="407">
                <params>
                    <param name="checkParam" type="boolean"/>
                    <param name="algParamSpec" type="AlgorithmParameterSpec"/>
                </params>
                <comment line="441">
                    For classes we don&apos;t know, the following                    
                </comment>
                <comment line="442">
                    may be the best try.                    
                </comment>
                <scope line="408">
                    <scope line="409"/>
                    <scope line="411"/>
                    <scope line="415"/>
                    <scope line="419">
                        <scope line="422"/>
                    </scope>
                    <scope line="427">
                        <scope line="429"/>
                    </scope>
                    <scope line="434">
                        <scope line="436"/>
                    </scope>
                    <scope line="443"/>
                </scope>
                <scope line="447"/>
                <scope line="449"/>
            </method>
            <method name="equalObjects" type="boolean" line="454">
                <params>
                    <param name="obj1" type="Object"/>
                    <param name="obj2" type="Object"/>
                </params>
                <scope line="455"/>
            </method>
        </class>
        <class name="CryptoPermissionCollection" line="463">
            <extends class="PermissionCollection"/>
            <comment line="56">
                no restriction on maxKeySize                
            </comment>
            <comment line="59">
                no restriction on param                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="463">
                A CryptoPermissionCollection stores a set of CryptoPermission
                  permissions.                
                <see>
                    java.security.Permission                    
                </see>
                <see>
                    java.security.Permissions                    
                </see>
                <see>
                    java.security.PermissionCollection                    
                </see>
                <author>
                    Sharon Liu                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="476"/>
            <declaration name="permissions" type="Vector" line="478"/>
            <javadoc line="480">
                Creates an empty CryptoPermissionCollection
                  object.                
            </javadoc>
            <method name="CryptoPermissionCollection" type="constructor" line="484"/>
            <javadoc line="488">
                Adds a permission to the CryptoPermissionCollection.                
                <param>
                    permission the Permission object to add.                    
                </param>
                <exception>
                    SecurityException - if this CryptoPermissionCollection
                      object has been marked <i>readOnly</i>.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="497">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
            </method>
            <javadoc line="508">
                Check and see if this CryptoPermission object implies
                  the given Permission object.                
                <param>
                    p the Permission object to compare                    
                </param>
                <return>
                    true if the given permission  is implied by this
                      CryptoPermissionCollection, false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="517">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <declaration name="cp" type="CryptoPermission" line="521"/>
                <declaration name="e" type="Enumeration" line="523"/>
                <scope line="525">
                    <declaration name="x" type="CryptoPermission" line="526"/>
                    <scope line="527"/>
                </scope>
            </method>
            <javadoc line="534">
                Returns an enumeration of all the CryptoPermission objects
                  in the container.                
                <return>
                    an enumeration of all the CryptoPermission objects.                    
                </return>
            </javadoc>
            <method name="elements" type="Enumeration" line="542"/>
        </class>
    </source>