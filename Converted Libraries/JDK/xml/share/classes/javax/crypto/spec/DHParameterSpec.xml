<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto.spec">
        <import package="java.math.BigInteger"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <class name="DHParameterSpec" line="4">
            <implements interface="AlgorithmParameterSpec"/>
            <javadoc line="4">
                This class specifies the set of parameters used with the Diffie-Hellman
                  algorithm, as specified in PKCS #3: &lt;i&gt;Diffie-Hellman Key-Agreement
                  Standard&lt;/i&gt;.
                  &lt;p&gt;A central authority generates parameters and gives them to the two
                  entities seeking to generate a secret key. The parameters are a prime
                  &lt;code&gt;p&lt;/code&gt;, a base &lt;code&gt;g&lt;/code&gt;, and optionally the length
                  in bits of the private value, &lt;code&gt;l&lt;/code&gt;.
                  &lt;p&gt;It is possible that more than one instance of parameters may be
                  generated by a given central authority, and that there may be more than
                  one central authority. Indeed, each individual may be its own central
                  authority, with different entities having different parameters.
                  &lt;p&gt;Note that this class does not perform any validation on specified
                  parameters. Thus, the specified values are returned directly even
                  if they are null.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    javax.crypto.KeyAgreement                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="p" type="BigInteger" line="24"/>
            <declaration name="g" type="BigInteger" line="25"/>
            <declaration name="l" type="int" line="26"/>
            <javadoc line="27">
                Constructs a parameter set for Diffie-Hellman, using a prime modulus
                  &lt;code&gt;p&lt;/code&gt; and a base generator &lt;code&gt;g&lt;/code&gt;.                
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
            </javadoc>
            <method name="DHParameterSpec" type="constructor" line="33">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                </params>
            </method>
            <javadoc line="38">
                Constructs a parameter set for Diffie-Hellman, using a prime modulus
                  &lt;code&gt;p&lt;/code&gt;, a base generator &lt;code&gt;g&lt;/code&gt;,
                  and the size in bits, &lt;code&gt;l&lt;/code&gt;, of the random exponent
                  (private value).                
                <param>
                    p the prime modulus                    
                </param>
                <param>
                    g the base generator                    
                </param>
                <param>
                    l the size in bits of the random exponent (private value)                    
                </param>
            </javadoc>
            <method name="DHParameterSpec" type="constructor" line="47">
                <params>
                    <param name="p" type="BigInteger"/>
                    <param name="g" type="BigInteger"/>
                    <param name="l" type="int"/>
                </params>
            </method>
            <javadoc line="52">
                Returns the prime modulus &lt;code&gt;p&lt;/code&gt;.                
                <return>
                    the prime modulus &lt;code&gt;p&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getP" type="BigInteger" line="56"/>
            <javadoc line="59">
                Returns the base generator &lt;code&gt;g&lt;/code&gt;.                
                <return>
                    the base generator &lt;code&gt;g&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getG" type="BigInteger" line="63"/>
            <javadoc line="66">
                Returns the size in bits, &lt;code&gt;l&lt;/code&gt;, of the random exponent
                  (private value).                
                <return>
                    the size in bits, &lt;code&gt;l&lt;/code&gt;, of the random exponent
                      (private value), or 0 if this size has not been set                    
                </return>
            </javadoc>
            <method name="getL" type="int" line="72"/>
        </class>
    </source>