<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto.spec">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <class name="GCMParameterSpec" line="3">
            <implements interface="AlgorithmParameterSpec"/>
            <javadoc line="3">
                Specifies the set of parameters required by a {@link javax.crypto.Cipher} using the Galois/Counter Mode (GCM) mode.
                  &lt;p&gt;
                  Simple block cipher modes (such as CBC) generally require only an
                  initialization vector (such as {@code IvParameterSpec}),
                  but GCM needs these parameters:
                  &lt;ul&gt;
                  &lt;li&gt;{@code IV}: Initialization Vector (IV) &lt;/li&gt;
                  &lt;li&gt;{@code tLen}: length (in bits) of authentication tag T&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  In addition to the parameters described here, other GCM inputs/output
                  (Additional Authenticated Data (AAD), Keys, block ciphers,
                  plain/ciphertext and authentication tags) are handled in the {@codeCipher} class.
                  &lt;p&gt;
                  Please see &lt;a href=&quot;http://www.ietf.org/rfc/rfc5116.txt&quot;&gt; RFC 5116
                  &lt;/a&gt; for more information on the Authenticated Encryption with
                  Associated Data (AEAD) algorithm, and &lt;a href=
                  &quot;http://csrc.nist.gov/publications/nistpubs/800-38D/SP-800-38D.pdf&quot;&gt;
                  NIST Special Publication 800-38D&lt;/a&gt;, &quot;NIST Recommendation for Block
                  Cipher Modes of Operation:  Galois/Counter Mode (GCM) and GMAC.&quot;
                  &lt;p&gt;
                  The GCM specification states that {@code tLen} may only have the
                  values {128, 120, 112, 104, 96}, or {64, 32} for certain
                  applications.  Other values can be specified for this class, but not
                  all CSP implementations will support them.                
                <see>
                    javax.crypto.Cipher                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="iv" type="byte[]" line="33"/>
            <declaration name="tLen" type="int" line="34"/>
            <javadoc line="35">
                Constructs a GCMParameterSpec using the specified authentication
                  tag bit-length and IV buffer.                
                <param>
                    tLen the authentication tag length (in bits)                    
                </param>
                <param>
                    src the IV source buffer.  The contents of the buffer are
                      copied to protect against subsequent modification.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code tLen} is negative,
                      or {@code src} is null.                    
                </throws>
            </javadoc>
            <method name="GCMParameterSpec" type="constructor" line="44">
                <params>
                    <param name="tLen" type="int"/>
                    <param name="src" type="byte[]"/>
                </params>
                <scope line="45"/>
            </method>
            <javadoc line="50">
                Constructs a GCMParameterSpec object using the specified
                  authentication tag bit-length and a subset of the specified
                  buffer as the IV.                
                <param>
                    tLen the authentication tag length (in bits)                    
                </param>
                <param>
                    src the IV source buffer.  The contents of the
                      buffer are copied to protect against subsequent modification.                    
                </param>
                <param>
                    offset the offset in {@code src} where the IV starts                    
                </param>
                <param>
                    len the number of IV bytes                    
                </param>
                <throws>
                    IllegalArgumentException if {@code tLen} is negative,{@code src} is null, {@code len} or {@code offset} is negative,
                      or the sum of {@code offset} and {@code len} is greater than the
                      length of the {@code src} byte array.                    
                </throws>
            </javadoc>
            <method name="GCMParameterSpec" type="constructor" line="63">
                <params>
                    <param name="tLen" type="int"/>
                    <param name="src" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <method name="init" type="void" line="66">
                <params>
                    <param name="tLen" type="int"/>
                    <param name="src" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="67"/>
                <scope line="71"/>
            </method>
            <javadoc line="77">
                Returns the authentication tag length.                
                <return>
                    the authentication tag length (in bits)                    
                </return>
            </javadoc>
            <method name="getTLen" type="int" line="81"/>
            <javadoc line="84">
                Returns the Initialization Vector (IV).                
                <return>
                    the IV.  Creates a new array each time this method
                      is called.                    
                </return>
            </javadoc>
            <method name="getIV" type="byte[]" line="89"/>
        </class>
    </source>