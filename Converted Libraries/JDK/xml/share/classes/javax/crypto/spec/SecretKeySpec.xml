<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto.spec">
        <import package="java.io.UnsupportedEncodingException"/>
        <import package="java.security.Key"/>
        <import package="java.security.spec.KeySpec"/>
        <import package="javax.crypto.SecretKey"/>
        <class name="SecretKeySpec" line="33">
            <implements interface="KeySpec"/>
            <implements interface="SecretKey"/>
            <javadoc line="33">
                This class specifies a secret key in a provider-independent fashion.
                  &lt;p&gt;It can be used to construct a &lt;code&gt;SecretKey&lt;/code&gt; from a byte array,
                  without having to go through a (provider-based)
                  &lt;code&gt;SecretKeyFactory&lt;/code&gt;.
                  &lt;p&gt;This class is only useful for raw secret keys that can be represented as
                  a byte array and have no key parameters associated with them, e.g., DES or
                  Triple DES keys.                
                <author>
                    Jan Luehe                    
                </author>
                <see>
                    javax.crypto.SecretKey                    
                </see>
                <see>
                    javax.crypto.SecretKeyFactory                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <declaration name="key" type="byte[]" line="54"/>
            <javadoc line="54">
                The secret key.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="algorithm" type="String" line="61"/>
            <javadoc line="61">
                The name of the algorithm associated with this key.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="68">
                Constructs a secret key from the given byte array.
                  &lt;p&gt;This constructor does not check if the given bytes indeed specify a
                  secret key of the specified algorithm. For example, if the algorithm is
                  DES, this constructor does not check if &lt;code&gt;key&lt;/code&gt; is 8 bytes
                  long, and also does not check for weak or semi-weak keys.
                  In order for those checks to be performed, an algorithm-specific
                  &lt;i&gt;key specification&lt;/i&gt; class (in this case:{@link DESKeySpec DESKeySpec})
                  should be used.                
                <param>
                    key the key material of the secret key. The contents of
                      the array are copied to protect against subsequent modification.                    
                </param>
                <param>
                    algorithm the name of the secret-key algorithm to be associated
                      with the given key material.
                      See Appendix A in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA&quot;&gt;
                      Java Cryptography Architecture Reference Guide&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;algorithm&lt;/code&gt;
                      is null or &lt;code&gt;key&lt;/code&gt; is null or empty.                    
                </exception>
            </javadoc>
            <method name="SecretKeySpec" type="constructor" line="91">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="92"/>
                <scope line="95"/>
            </method>
            <javadoc line="102">
                Constructs a secret key from the given byte array, using the first
                  &lt;code&gt;len&lt;/code&gt; bytes of &lt;code&gt;key&lt;/code&gt;, starting at
                  &lt;code&gt;offset&lt;/code&gt; inclusive.
                  &lt;p&gt; The bytes that constitute the secret key are
                  those between &lt;code&gt;key[offset]&lt;/code&gt; and
                  &lt;code&gt;key[offset+len-1]&lt;/code&gt; inclusive.
                  &lt;p&gt;This constructor does not check if the given bytes indeed specify a
                  secret key of the specified algorithm. For example, if the algorithm is
                  DES, this constructor does not check if &lt;code&gt;key&lt;/code&gt; is 8 bytes
                  long, and also does not check for weak or semi-weak keys.
                  In order for those checks to be performed, an algorithm-specific key
                  specification class (in this case:{@link DESKeySpec DESKeySpec})
                  must be used.                
                <param>
                    key the key material of the secret key. The first
                      &lt;code&gt;len&lt;/code&gt; bytes of the array beginning at
                      &lt;code&gt;offset&lt;/code&gt; inclusive are copied to protect
                      against subsequent modification.                    
                </param>
                <param>
                    offset the offset in &lt;code&gt;key&lt;/code&gt; where the key material
                      starts.                    
                </param>
                <param>
                    len the length of the key material.                    
                </param>
                <param>
                    algorithm the name of the secret-key algorithm to be associated
                      with the given key material.
                      See Appendix A in the &lt;a href=
                      &quot;{@docRoot}/../technotes/guides/security/crypto/CryptoSpec.html#AppA&quot;&gt;
                      Java Cryptography Architecture Reference Guide&lt;/a&gt;
                      for information about standard algorithm names.                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;algorithm&lt;/code&gt;
                      is null or &lt;code&gt;key&lt;/code&gt; is null, empty, or too short,
                      i.e. &lt;code&gt;key.length-offset&lt;len&lt;/code&gt;.                    
                </exception>
                <exception>
                    ArrayIndexOutOfBoundsException is thrown if
                      &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;len&lt;/code&gt; index bytes outside the
                      &lt;code&gt;key&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="SecretKeySpec" type="constructor" line="140">
                <params>
                    <param name="key" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                    <param name="algorithm" type="String"/>
                </params>
                <scope line="141"/>
                <scope line="144"/>
                <scope line="147"/>
                <scope line="151"/>
            </method>
            <javadoc line="159">
                Returns the name of the algorithm associated with this secret key.                
                <return>
                    the secret key algorithm.                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="164"/>
            <javadoc line="168">
                Returns the name of the encoding format for this secret key.                
                <return>
                    the string &quot;RAW&quot;.                    
                </return>
            </javadoc>
            <method name="getFormat" type="String" line="173"/>
            <javadoc line="177">
                Returns the key material of this secret key.                
                <return>
                    the key material. Returns a new array
                      each time this method is called.                    
                </return>
            </javadoc>
            <method name="getEncoded" type="byte[]" line="183"/>
            <javadoc line="187">
                Calculates a hash code value for the object.
                  Objects that are equal will also have the same hashcode.                
            </javadoc>
            <method name="hashCode" type="int" line="191">
                <declaration name="retval" type="int" line="192"/>
                <scope line="193"/>
            </method>
            <javadoc line="202">
                Tests for equality between the specified object and this
                  object. Two SecretKeySpec objects are considered equal if
                  they are both SecretKey instances which have the
                  same case-insensitive algorithm name and key encoding.                
                <param>
                    obj the object to test for equality with this object.                    
                </param>
                <return>
                    true if the objects are considered equal, false if
                      &lt;code&gt;obj&lt;/code&gt; is null or otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="213">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="thatAlg" type="String" line="220"/>
                <scope line="221"/>
                <declaration name="thatKey" type="byte[]" line="229"/>
            </method>
        </class>
    </source>