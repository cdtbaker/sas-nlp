<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.crypto.spec">
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <class name="IvParameterSpec" line="30">
            <implements interface="AlgorithmParameterSpec"/>
            <javadoc line="30">
                This class specifies an &lt;i&gt;initialization vector&lt;/i&gt; (IV).
                  Examples which use IVs are ciphers in feedback mode,
                  e.g., DES in CBC mode and RSA ciphers with OAEP encoding
                  operation.                
                <author>
                    Jan Luehe                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="iv" type="byte[]" line="42"/>
            <javadoc line="44">
                Creates an IvParameterSpec object using the bytes in &lt;code&gt;iv&lt;/code&gt;
                  as the IV.                
                <param>
                    iv the buffer with the IV. The contents of the
                      buffer are copied to protect against subsequent modification.                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;iv&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="IvParameterSpec" type="constructor" line="52">
                <params>
                    <param name="iv" type="byte[]"/>
                </params>
            </method>
            <javadoc line="56">
                Creates an IvParameterSpec object using the first &lt;code&gt;len&lt;/code&gt;
                  bytes in &lt;code&gt;iv&lt;/code&gt;, beginning at &lt;code&gt;offset&lt;/code&gt;
                  inclusive, as the IV.
                  &lt;p&gt; The bytes that constitute the IV are those between
                  &lt;code&gt;iv[offset]&lt;/code&gt; and &lt;code&gt;iv[offset+len-1]&lt;/code&gt; inclusive.                
                <param>
                    iv the buffer with the IV. The first &lt;code&gt;len&lt;/code&gt;
                      bytes of the buffer beginning at &lt;code&gt;offset&lt;/code&gt; inclusive
                      are copied to protect against subsequent modification.                    
                </param>
                <param>
                    offset the offset in &lt;code&gt;iv&lt;/code&gt; where the IV
                      starts.                    
                </param>
                <param>
                    len the number of IV bytes.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;iv&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                      or &lt;code&gt;(iv.length - offset &lt; len)&lt;/code&gt;                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException is thrown if &lt;code&gt;offset&lt;/code&gt;
                      or &lt;code&gt;len&lt;/code&gt; index bytes outside the &lt;code&gt;iv&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="IvParameterSpec" type="constructor" line="75">
                <params>
                    <param name="iv" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="76"/>
                <scope line="79"/>
                <scope line="83"/>
            </method>
            <javadoc line="90">
                Returns the initialization vector (IV).                
                <return>
                    the initialization vector (IV). Returns a new array
                      each time this method is called.                    
                </return>
            </javadoc>
            <method name="getIV" type="byte[]" line="96"/>
        </class>
    </source>