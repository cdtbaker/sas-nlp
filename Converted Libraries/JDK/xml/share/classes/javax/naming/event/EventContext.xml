<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.event">
        <import package="javax.naming.Name"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.NamingException"/>
        <interface name="EventContext">
            <implements interface="Context"/>
            <javadoc line="33">
                Contains methods for registering/deregistering listeners to be notified of
                  events fired when objects named in a context changes.
                  &lt;p&gt;
                  &lt;h4&gt;Target&lt;/h4&gt;
                  The name parameter in the &lt;tt&gt;addNamingListener()&lt;/tt&gt; methods is referred
                  to as the &lt;em&gt;target&lt;/em&gt;. The target, along with the scope, identify
                  the object(s) that the listener is interested in.
                  It is possible to register interest in a target that does not exist, but
                  there might be limitations in the extent to which this can be
                  supported by the service provider and underlying protocol/service.
                  &lt;p&gt;
                  If a service only supports registration for existing
                  targets, an attempt to register for a nonexistent target
                  results in a &lt;tt&gt;NameNotFoundException&lt;/tt&gt; being thrown as early as possible,
                  preferably at the time &lt;tt&gt;addNamingListener()&lt;/tt&gt; is called, or if that is
                  not possible, the listener will receive the exception through the
                  &lt;tt&gt;NamingExceptionEvent&lt;/tt&gt;.
                  &lt;p&gt;
                  Also, for service providers that only support registration for existing
                  targets, when the target that a listener has registered for is
                  subsequently removed from the namespace, the listener is notified
                  via a &lt;tt&gt;NamingExceptionEvent&lt;/tt&gt; (containing a
                  &lt;tt&gt;NameNotFoundException&lt;/tt&gt;).
                  &lt;p&gt;
                  An application can use the method &lt;tt&gt;targetMustExist()&lt;/tt&gt; to check
                  whether a &lt;tt&gt;EventContext&lt;/tt&gt; supports registration
                  of nonexistent targets.
                  &lt;p&gt;
                  &lt;h4&gt;Event Source&lt;/h4&gt;
                  The &lt;tt&gt;EventContext&lt;/tt&gt; instance on which you invoke the
                  registration methods is the &lt;em&gt;event source&lt;/em&gt; of the events that are
                  (potentially) generated.
                  The source is &lt;em&gt;not necessarily&lt;/em&gt; the object named by the target.
                  Only when the target is the empty name is the object named by the target
                  the source.
                  In other words, the target,
                  along with the scope parameter, are used to identify
                  the object(s) that the listener is interested in, but the event source
                  is the &lt;tt&gt;EventContext&lt;/tt&gt; instance with which the listener
                  has registered.
                  &lt;p&gt;
                  For example, suppose a listener makes the following registration:
                  &lt;blockquote&gt;&lt;pre&gt;
                  NamespaceChangeListener listener = ...;
                  src.addNamingListener(&quot;x&quot;, SUBTREE_SCOPE, listener);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  When an object named &quot;x/y&quot; is subsequently deleted, the corresponding
                  &lt;tt&gt;NamingEvent&lt;/tt&gt; (&lt;tt&gt;evt&lt;/tt&gt;)  must contain:
                  &lt;blockquote&gt;&lt;pre&gt;
                  evt.getEventContext() == src
                  evt.getOldBinding().getName().equals(&quot;x/y&quot;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  Furthermore, listener registration/deregistration is with
                  the &lt;tt&gt;EventContext&lt;/tt&gt;
                  &lt;em&gt;instance&lt;/em&gt;, and not with the corresponding object in the namespace.
                  If the program intends at some point to remove a listener, then it needs to
                  keep a reference to the &lt;tt&gt;EventContext&lt;/tt&gt; instance on
                  which it invoked &lt;tt&gt;addNamingListener()&lt;/tt&gt; (just as
                  it needs to keep a reference to the listener in order to remove it
                  later). It cannot expect to do a &lt;tt&gt;lookup()&lt;/tt&gt; and get another instance of
                  a &lt;tt&gt;EventContext&lt;/tt&gt; on which to perform the deregistration.
                  &lt;h4&gt;Lifetime of Registration&lt;/h4&gt;
                  A registered listener becomes deregistered when:
                  &lt;ul&gt;
                  &lt;li&gt;It is removed using &lt;tt&gt;removeNamingListener()&lt;/tt&gt;.
                  &lt;li&gt;An exception is thrown while collecting information about the events.
                  That is, when the listener receives a &lt;tt&gt;NamingExceptionEvent&lt;/tt&gt;.
                  &lt;li&gt;&lt;tt&gt;Context.close()&lt;/tt&gt; is invoked on the &lt;tt&gt;EventContext&lt;/tt&gt;
                  instance with which it has registered.
                  &lt;/ul&gt;
                  Until that point, a &lt;tt&gt;EventContext&lt;/tt&gt; instance that has outstanding
                  listeners will continue to exist and be maintained by the service provider.
                  &lt;h4&gt;Listener Implementations&lt;/h4&gt;
                  The registration/deregistration methods accept an instance of
                  &lt;tt&gt;NamingListener&lt;/tt&gt;. There are subinterfaces of &lt;tt&gt;NamingListener&lt;/tt&gt;
                  for different of event types of &lt;tt&gt;NamingEvent&lt;/tt&gt;.
                  For example, the &lt;tt&gt;ObjectChangeListener&lt;/tt&gt;
                  interface is for the &lt;tt&gt;NamingEvent.OBJECT_CHANGED&lt;/tt&gt; event type.
                  To register interest in multiple event types, the listener implementation
                  should implement multiple &lt;tt&gt;NamingListener&lt;/tt&gt; subinterfaces and use a
                  single invocation of &lt;tt&gt;addNamingListener()&lt;/tt&gt;.
                  In addition to reducing the number of method calls and possibly the code size
                  of the listeners, this allows some service providers to optimize the
                  registration.
                  &lt;h4&gt;Threading Issues&lt;/h4&gt;
                  Like &lt;tt&gt;Context&lt;/tt&gt; instances in general, instances of
                  &lt;tt&gt;EventContext&lt;/tt&gt; are not guaranteed to be thread-safe.
                  Care must be taken when multiple threads are accessing the same
                  &lt;tt&gt;EventContext&lt;/tt&gt; concurrently.
                  See the
                  &lt;a href=package-summary.html#THREADING&gt;package description&lt;/a&gt;
                  for more information on threading issues.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="OBJECT_SCOPE" type="int" line="137"/>
            <javadoc line="137">
                Constant for expressing interest in events concerning the object named
                  by the target.
                  &lt;p&gt;
                  The value of this constant is &lt;tt&gt;0&lt;/tt&gt;.                
            </javadoc>
            <declaration name="ONELEVEL_SCOPE" type="int" line="145"/>
            <javadoc line="145">
                Constant for expressing interest in events concerning objects
                  in the context named by the target,
                  excluding the context named by the target.
                  &lt;p&gt;
                  The value of this constant is &lt;tt&gt;1&lt;/tt&gt;.                
            </javadoc>
            <declaration name="SUBTREE_SCOPE" type="int" line="154"/>
            <javadoc line="154">
                Constant for expressing interest in events concerning objects
                  in the subtree of the object named by the target, including the object
                  named by the target.
                  &lt;p&gt;
                  The value of this constant is &lt;tt&gt;2&lt;/tt&gt;.                
            </javadoc>
            <method name="addNamingListener" type="void" line="164"/>
            <javadoc line="164">
                Adds a listener for receiving naming events fired
                  when the object(s) identified by a target and scope changes.
                  The event source of those events is this context. See the
                  class description for a discussion on event source and target.
                  See the descriptions of the constants &lt;tt&gt;OBJECT_SCOPE&lt;/tt&gt;,
                  &lt;tt&gt;ONELEVEL_SCOPE&lt;/tt&gt;, and &lt;tt&gt;SUBTREE_SCOPE&lt;/tt&gt; to see how
                  &lt;tt&gt;scope&lt;/tt&gt; affects the registration.
                  &lt;p&gt;
                  &lt;tt&gt;target&lt;/tt&gt; needs to name a context only when &lt;tt&gt;scope&lt;/tt&gt; is
                  &lt;tt&gt;ONELEVEL_SCOPE&lt;/tt&gt;.
                  &lt;tt&gt;target&lt;/tt&gt; may name a non-context if &lt;tt&gt;scope&lt;/tt&gt; is either
                  &lt;tt&gt;OBJECT_SCOPE&lt;/tt&gt; or &lt;tt&gt;SUBTREE_SCOPE&lt;/tt&gt;.  Using
                  &lt;tt&gt;SUBTREE_SCOPE&lt;/tt&gt; for a non-context might be useful,
                  for example, if the caller does not know in advance whether &lt;tt&gt;target&lt;/tt&gt;
                  is a context and just wants to register interest in the (possibly
                  degenerate subtree) rooted at &lt;tt&gt;target&lt;/tt&gt;.
                  &lt;p&gt;
                  When the listener is notified of an event, the listener may
                  in invoked in a thread other than the one in which
                  &lt;tt&gt;addNamingListener()&lt;/tt&gt; is executed.
                  Care must be taken when multiple threads are accessing the same
                  &lt;tt&gt;EventContext&lt;/tt&gt; concurrently.
                  See the
                  &lt;a href=package-summary.html#THREADING&gt;package description&lt;/a&gt;
                  for more information on threading issues.                
                <param>
                    target A nonnull name to be resolved relative to this context.                    
                </param>
                <param>
                    scope One of <tt>OBJECT_SCOPE</tt>, <tt>ONELEVEL_SCOPE</tt>, or
                      <tt>SUBTREE_SCOPE</tt>.                    
                </param>
                <param>
                    l  The nonnull listener.                    
                </param>
                <exception>
                    NamingException If a problem was encountered while
                      adding the listener.                    
                </exception>
                <see>
                    #removeNamingListener                    
                </see>
            </javadoc>
            <method name="addNamingListener" type="void" line="203"/>
            <javadoc line="203">
                Adds a listener for receiving naming events fired
                  when the object named by the string target name and scope changes.
                  See the overload that accepts a &lt;tt&gt;Name&lt;/tt&gt; for details.                
                <param>
                    target The nonnull string name of the object resolved relative
                      to this context.                    
                </param>
                <param>
                    scope One of <tt>OBJECT_SCOPE</tt>, <tt>ONELEVEL_SCOPE</tt>, or
                      <tt>SUBTREE_SCOPE</tt>.                    
                </param>
                <param>
                    l  The nonnull listener.                    
                </param>
                <exception>
                    NamingException If a problem was encountered while
                      adding the listener.                    
                </exception>
                <see>
                    #removeNamingListener                    
                </see>
            </javadoc>
            <method name="removeNamingListener" type="void" line="221"/>
            <javadoc line="221">
                Removes a listener from receiving naming events fired
                  by this &lt;tt&gt;EventContext&lt;/tt&gt;.
                  The listener may have registered more than once with this
                  &lt;tt&gt;EventContext&lt;/tt&gt;, perhaps with different target/scope arguments.
                  After this method is invoked, the listener will no longer
                  receive events with this &lt;tt&gt;EventContext&lt;/tt&gt; instance
                  as the event source (except for those events already in the process of
                  being dispatched).
                  If the listener was not, or is no longer, registered with
                  this &lt;tt&gt;EventContext&lt;/tt&gt; instance, this method does not do anything.                
                <param>
                    l  The nonnull listener.                    
                </param>
                <exception>
                    NamingException If a problem was encountered while
                      removing the listener.                    
                </exception>
                <see>
                    #addNamingListener                    
                </see>
            </javadoc>
            <method name="targetMustExist" type="boolean" line="240"/>
            <javadoc line="240">
                Determines whether a listener can register interest in a target
                  that does not exist.                
                <return>
                    true if the target must exist; false if the target need not exist.                    
                </return>
                <exception>
                    NamingException If the context's behavior in this regard cannot
                      be determined.                    
                </exception>
            </javadoc>
        </interface>
    </source>