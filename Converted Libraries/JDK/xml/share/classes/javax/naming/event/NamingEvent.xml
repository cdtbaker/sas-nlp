<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.event">
        <import package="javax.naming.Binding"/>
        <class name="NamingEvent" line="30">
            <extends class="java.util.EventObject"/>
            <javadoc line="30">
                This class represents an event fired by a naming/directory service.
                  &lt;p&gt;
                  The &lt;tt&gt;NamingEvent&lt;/tt&gt;&apos;s state consists of
                  &lt;ul&gt;
                  &lt;li&gt;The event source: the &lt;tt&gt;EventContext&lt;/tt&gt; which fired this event.
                  &lt;li&gt;The event type.
                  &lt;li&gt;The new binding: information about the object after the change.
                  &lt;li&gt;The old binding: information about the object before the change.
                  &lt;li&gt;Change information: information about the change
                  that triggered this event; usually service provider-specific or server-specific
                  information.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  Note that the event source is always the same &lt;tt&gt;EventContext&lt;/tt&gt;
                  &lt;em&gt;instance&lt;/em&gt;  that the listener has registered with.
                  Furthermore, the names of the bindings in
                  the &lt;tt&gt;NamingEvent&lt;/tt&gt; are always relative to that instance.
                  For example, suppose a listener makes the following registration:
                  &lt;blockquote&gt;&lt;pre&gt;
                  NamespaceChangeListener listener = ...;
                  src.addNamingListener(&quot;x&quot;, SUBTREE_SCOPE, listener);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  When an object named &quot;x/y&quot; is subsequently deleted, the corresponding
                  &lt;tt&gt;NamingEvent&lt;/tt&gt; (&lt;tt&gt;evt&lt;/tt&gt;) must contain:
                  &lt;blockquote&gt;&lt;pre&gt;
                  evt.getEventContext() == src
                  evt.getOldBinding().getName().equals(&quot;x/y&quot;)
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  Care must be taken when multiple threads are accessing the same
                  &lt;tt&gt;EventContext&lt;/tt&gt; concurrently.
                  See the
                  &lt;a href=package-summary.html#THREADING&gt;package description&lt;/a&gt;
                  for more information on threading issues.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    NamingListener                    
                </see>
                <see>
                    EventContext                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="OBJECT_ADDED" type="int" line="74"/>
            <javadoc line="74">
                Naming event type for indicating that a new object has been added.
                  The value of this constant is &lt;tt&gt;0&lt;/tt&gt;.                
            </javadoc>
            <declaration name="OBJECT_REMOVED" type="int" line="80"/>
            <javadoc line="80">
                Naming event type for indicating that an object has been removed.
                  The value of this constant is &lt;tt&gt;1&lt;/tt&gt;.                
            </javadoc>
            <declaration name="OBJECT_RENAMED" type="int" line="86"/>
            <javadoc line="86">
                Naming event type for indicating that an object has been renamed.
                  Note that some services might fire multiple events for a single
                  logical rename operation. For example, the rename operation might
                  be implemented by adding a binding with the new name and removing
                  the old binding.
                  &lt;p&gt;
                  The old/new binding in &lt;tt&gt;NamingEvent&lt;/tt&gt; may be null if the old
                  name or new name is outside of the scope for which the listener
                  has registered.
                  &lt;p&gt;
                  When an interior node in the namespace tree has been renamed, the
                  topmost node which is part of the listener&apos;s scope should used to generate
                  a rename event. The extent to which this can be supported is
                  provider-specific. For example, a service might generate rename
                  notifications for all descendants of the changed interior node and the
                  corresponding provider might not be able to prevent those
                  notifications from being propagated to the listeners.
                  &lt;p&gt;
                  The value of this constant is &lt;tt&gt;2&lt;/tt&gt;.                
            </javadoc>
            <declaration name="OBJECT_CHANGED" type="int" line="109"/>
            <javadoc line="109">
                Naming event type for indicating that an object has been changed.
                  The changes might include the object&apos;s attributes, or the object itself.
                  Note that some services might fire multiple events for a single
                  modification. For example, the modification might
                  be implemented by first removing the old binding and adding
                  a new binding containing the same name but a different object.
                  &lt;p&gt;
                  The value of this constant is &lt;tt&gt;3&lt;/tt&gt;.                
            </javadoc>
            <declaration name="changeInfo" type="Object" line="121"/>
            <javadoc line="121">
                Contains information about the change that generated this event.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="type" type="int" line="127"/>
            <javadoc line="127">
                Contains the type of this event.                
                <see>
                    #OBJECT_ADDED                    
                </see>
                <see>
                    #OBJECT_REMOVED                    
                </see>
                <see>
                    #OBJECT_RENAMED                    
                </see>
                <see>
                    #OBJECT_CHANGED                    
                </see>
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="oldBinding" type="Binding" line="137"/>
            <javadoc line="137">
                Contains information about the object before the change.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="newBinding" type="Binding" line="143"/>
            <javadoc line="143">
                Contains information about the object after the change.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="149">
                Constructs an instance of &lt;tt&gt;NamingEvent&lt;/tt&gt;.
                  &lt;p&gt;
                  The names in &lt;tt&gt;newBd&lt;/tt&gt; and &lt;tt&gt;oldBd&lt;/tt&gt; are to be resolved relative
                  to the event source &lt;tt&gt;source&lt;/tt&gt;.
                  For an &lt;tt&gt;OBJECT_ADDED&lt;/tt&gt; event type, &lt;tt&gt;newBd&lt;/tt&gt; must not be null.
                  For an &lt;tt&gt;OBJECT_REMOVED&lt;/tt&gt; event type, &lt;tt&gt;oldBd&lt;/tt&gt; must not be null.
                  For an &lt;tt&gt;OBJECT_CHANGED&lt;/tt&gt; event type,  &lt;tt&gt;newBd&lt;/tt&gt; and
                  &lt;tt&gt;oldBd&lt;/tt&gt; must not be null. For  an &lt;tt&gt;OBJECT_RENAMED&lt;/tt&gt; event type,
                  one of &lt;tt&gt;newBd&lt;/tt&gt; or &lt;tt&gt;oldBd&lt;/tt&gt; may be null if the new or old
                  binding is outside of the scope for which the listener has registered.                
                <param>
                    source The non-null context that fired this event.                    
                </param>
                <param>
                    type The type of the event.                    
                </param>
                <param>
                    newBd A possibly null binding before the change. See method description.                    
                </param>
                <param>
                    oldBd A possibly null binding after the change. See method description.                    
                </param>
                <param>
                    changeInfo A possibly null object containing information about the change.                    
                </param>
                <see>
                    #OBJECT_ADDED                    
                </see>
                <see>
                    #OBJECT_REMOVED                    
                </see>
                <see>
                    #OBJECT_RENAMED                    
                </see>
                <see>
                    #OBJECT_CHANGED                    
                </see>
            </javadoc>
            <method name="NamingEvent" type="constructor" line="173">
                <params>
                    <param name="source" type="EventContext"/>
                    <param name="type" type="int"/>
                    <param name="newBd" type="Binding"/>
                    <param name="oldBd" type="Binding"/>
                    <param name="changeInfo" type="Object"/>
                </params>
            </method>
            <javadoc line="181">
                Returns the type of this event.                
                <return>
                    The type of this event.                    
                </return>
                <see>
                    #OBJECT_ADDED                    
                </see>
                <see>
                    #OBJECT_REMOVED                    
                </see>
                <see>
                    #OBJECT_RENAMED                    
                </see>
                <see>
                    #OBJECT_CHANGED                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="189"/>
            <javadoc line="193">
                Retrieves the event source that fired this event.
                  This returns the same object as &lt;tt&gt;EventObject.getSource()&lt;/tt&gt;.
                  &lt;p&gt;
                  If the result of this method is used to access the
                  event source, for example, to look up the object or get its attributes,
                  then it needs to be locked  because implementations of &lt;tt&gt;Context&lt;/tt&gt;
                  are not guaranteed to be thread-safe
                  (and &lt;tt&gt;EventContext&lt;/tt&gt; is a subinterface of &lt;tt&gt;Context&lt;/tt&gt;).
                  See the
                  &lt;a href=package-summary.html#THREADING&gt;package description&lt;/a&gt;
                  for more information on threading issues.                
                <return>
                    The non-null context that fired this event.                    
                </return>
            </javadoc>
            <method name="getEventContext" type="EventContext" line="208"/>
            <javadoc line="212">
                Retrieves the binding of the object before the change.
                  &lt;p&gt;
                  The binding must be nonnull if the object existed before the change
                  relative to the source context (&lt;tt&gt;getEventContext()&lt;/tt&gt;).
                  That is, it must be nonnull for &lt;tt&gt;OBJECT_REMOVED&lt;/tt&gt; and
                  &lt;tt&gt;OBJECT_CHANGED&lt;/tt&gt;.
                  For &lt;tt&gt;OBJECT_RENAMED&lt;/tt&gt;, it is null if the object before the rename
                  is outside of the scope for which the listener has registered interest;
                  it is nonnull if the object is inside the scope before the rename.
                  &lt;p&gt;
                  The name in the binding is to be resolved relative
                  to the event source &lt;tt&gt;getEventContext()&lt;/tt&gt;.
                  The object returned by &lt;tt&gt;Binding.getObject()&lt;/tt&gt; may be null if
                  such information is unavailable.                
                <return>
                    The possibly null binding of the object before the change.                    
                </return>
            </javadoc>
            <method name="getOldBinding" type="Binding" line="230"/>
            <javadoc line="234">
                Retrieves the binding of the object after the change.
                  &lt;p&gt;
                  The binding must be nonnull if the object existed after the change
                  relative to the source context (&lt;tt&gt;getEventContext()&lt;/tt&gt;).
                  That is, it must be nonnull for &lt;tt&gt;OBJECT_ADDED&lt;/tt&gt; and
                  &lt;tt&gt;OBJECT_CHANGED&lt;/tt&gt;. For &lt;tt&gt;OBJECT_RENAMED&lt;/tt&gt;,
                  it is null if the object after the rename is outside the scope for
                  which the listener registered interest; it is nonnull if the object
                  is inside the scope after the rename.
                  &lt;p&gt;
                  The name in the binding is to be resolved relative
                  to the event source &lt;tt&gt;getEventContext()&lt;/tt&gt;.
                  The object returned by &lt;tt&gt;Binding.getObject()&lt;/tt&gt; may be null if
                  such information is unavailable.                
                <return>
                    The possibly null binding of the object after the change.                    
                </return>
            </javadoc>
            <method name="getNewBinding" type="Binding" line="252"/>
            <javadoc line="256">
                Retrieves the change information for this event.
                  The value of the change information is service-specific. For example,
                  it could be an ID that identifies the change in a change log on the server.                
                <return>
                    The possibly null change information of this event.                    
                </return>
            </javadoc>
            <method name="getChangeInfo" type="Object" line="263"/>
            <javadoc line="267">
                Invokes the appropriate listener method on this event.
                  The default implementation of
                  this method handles the following event types:
                  &lt;tt&gt;OBJECT_ADDED&lt;/TT&gt;, &lt;TT&gt;OBJECT_REMOVED&lt;/TT&gt;,
                  &lt;TT&gt;OBJECT_RENAMED&lt;/TT&gt;, &lt;TT&gt;OBJECT_CHANGED&lt;/TT&gt;.
                  &lt;p&gt;
                  The listener method is executed in the same thread
                  as this method.  See the
                  &lt;a href=package-summary.html#THREADING&gt;package description&lt;/a&gt;
                  for more information on threading issues.                
                <param>
                    listener The nonnull listener.                    
                </param>
            </javadoc>
            <method name="dispatch" type="void" line="280">
                <params>
                    <param name="listener" type="NamingListener"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="299"/>
        </class>
    </source>