<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.event">
        <interface name="NamespaceChangeListener">
            <implements interface="NamingListener"/>
            <javadoc line="28">
                Specifies the methods that a listener interested in namespace changes
                  must implement.
                  Specifically, the listener is interested in &lt;tt&gt;NamingEvent&lt;/tt&gt;s
                  with event types of &lt;tt&gt;OBJECT_ADDED&lt;/TT&gt;, &lt;TT&gt;OBJECT_RENAMED&lt;/TT&gt;, or
                  &lt;TT&gt;OBJECT_REMOVED&lt;/TT&gt;.
                  &lt;p&gt;
                  Such a listener must:
                  &lt;ol&gt;
                  &lt;li&gt;Implement this interface and its methods.
                  &lt;li&gt;Implement &lt;tt&gt;NamingListener.namingExceptionThrown()&lt;/tt&gt; so that
                  it will be notified of exceptions thrown while attempting to
                  collect information about the events.
                  &lt;li&gt;Register with the source using the source&apos;s &lt;tt&gt;addNamingListener()&lt;/tt&gt;
                  method.
                  &lt;/ol&gt;
                  A listener that wants to be notified of &lt;tt&gt;OBJECT_CHANGED&lt;/tt&gt; event types
                  should also implement the &lt;tt&gt;ObjectChangeListener&lt;/tt&gt;
                  interface.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    NamingEvent                    
                </see>
                <see>
                    ObjectChangeListener                    
                </see>
                <see>
                    EventContext                    
                </see>
                <see>
                    EventDirContext                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="objectAdded" type="void" line="59"/>
            <javadoc line="59">
                Called when an object has been added.
                  &lt;p&gt;
                  The binding of the newly added object can be obtained using
                  &lt;tt&gt;evt.getNewBinding()&lt;/tt&gt;.                
                <param>
                    evt The nonnull event.                    
                </param>
                <see>
                    NamingEvent#OBJECT_ADDED                    
                </see>
            </javadoc>
            <method name="objectRemoved" type="void" line="69"/>
            <javadoc line="69">
                Called when an object has been removed.
                  &lt;p&gt;
                  The binding of the newly removed object can be obtained using
                  &lt;tt&gt;evt.getOldBinding()&lt;/tt&gt;.                
                <param>
                    evt The nonnull event.                    
                </param>
                <see>
                    NamingEvent#OBJECT_REMOVED                    
                </see>
            </javadoc>
            <method name="objectRenamed" type="void" line="79"/>
            <javadoc line="79">
                Called when an object has been renamed.
                  &lt;p&gt;
                  The binding of the renamed object can be obtained using
                  &lt;tt&gt;evt.getNewBinding()&lt;/tt&gt;. Its old binding (before the rename)
                  can be obtained using &lt;tt&gt;evt.getOldBinding()&lt;/tt&gt;.
                  One of these may be null if the old/new binding was outside the
                  scope in which the listener has registered interest.                
                <param>
                    evt The nonnull event.                    
                </param>
                <see>
                    NamingEvent#OBJECT_RENAMED                    
                </see>
            </javadoc>
        </interface>
    </source>