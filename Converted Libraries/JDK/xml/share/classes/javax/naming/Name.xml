<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Enumeration"/>
        <interface name="Name">
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <javadoc line="3">
                The &lt;tt&gt;Name&lt;/tt&gt; interface represents a generic name -- an ordered
                  sequence of components.  It can be a composite name (names that
                  span multiple namespaces), or a compound name (names that are
                  used within individual hierarchical naming systems).
                  &lt;p&gt; There can be different implementations of &lt;tt&gt;Name&lt;/tt&gt;; for example,
                  composite names, URLs, or namespace-specific compound names.
                  &lt;p&gt; The components of a name are numbered.  The indexes of a name
                  with N components range from 0 up to, but not including, N.  This
                  range may be written as [0,N).
                  The most significant component is at index 0.
                  An empty name has no components.
                  &lt;p&gt; None of the methods in this interface accept null as a valid
                  value for a parameter that is a name or a name component.
                  Likewise, methods that return a name or name component never return null.
                  &lt;p&gt; An instance of a &lt;tt&gt;Name&lt;/tt&gt; may not be synchronized against
                  concurrent multithreaded access if that access is not read-only.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <author>
                    R. Vasudevan                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="26"/>
            <javadoc line="26">
                The class fingerprint that is set to indicate
                  serialization compatibility with a previous
                  version of the class.                
            </javadoc>
            <method name="clone" type="Object" line="32"/>
            <javadoc line="32">
                Generates a new copy of this name.
                  Subsequent changes to the components of this name will not
                  affect the new copy, and vice versa.                
                <return>
                    a copy of this name                    
                </return>
                <see>
                    Object#clone()                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="40"/>
            <javadoc line="40">
                Compares this name with another name for order.
                  Returns a negative integer, zero, or a positive integer as this
                  name is less than, equal to, or greater than the given name.
                  &lt;p&gt; As with &lt;tt&gt;Object.equals()&lt;/tt&gt;, the notion of ordering for names
                  depends on the class that implements this interface.
                  For example, the ordering may be
                  based on lexicographical ordering of the name components.
                  Specific attributes of the name, such as how it treats case,
                  may affect the ordering.  In general, two names of different
                  classes may not be compared.                
                <param>
                    obj the non-null object to compare against.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this name
                      is less than, equal to, or greater than the given name                    
                </return>
                <throws>
                    ClassCastException if obj is not a &lt;tt&gt;Name&lt;/tt&gt; of a
                      type that may be compared with this name                    
                </throws>
                <see>
                    Comparable#compareTo(Object)                    
                </see>
            </javadoc>
            <method name="size" type="int" line="59"/>
            <javadoc line="59">
                Returns the number of components in this name.                
                <return>
                    the number of components in this name                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="64"/>
            <javadoc line="64">
                Determines whether this name is empty.
                  An empty name is one with zero components.                
                <return>
                    true if this name is empty, false otherwise                    
                </return>
            </javadoc>
            <method name="getAll" type="Enumeration&lt;String&gt;" line="70"/>
            <javadoc line="70">
                Retrieves the components of this name as an enumeration
                  of strings.  The effect on the enumeration of updates to
                  this name is undefined.  If the name has zero components,
                  an empty (non-null) enumeration is returned.                
                <return>
                    an enumeration of the components of this name, each a string                    
                </return>
            </javadoc>
            <method name="get" type="String" line="78"/>
            <javadoc line="78">
                Retrieves a component of this name.                
                <param>
                    posnthe 0-based index of the component to retrieve.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    the component at index posn                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif posn is outside the specified range                    
                </throws>
            </javadoc>
            <method name="getPrefix" type="Name" line="86"/>
            <javadoc line="86">
                Creates a name whose components consist of a prefix of the
                  components of this name.  Subsequent changes to
                  this name will not affect the name that is returned and vice versa.                
                <param>
                    posnthe 0-based index of the component at which to stop.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    a name consisting of the components at indexes in
                      the range [0,posn).                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif posn is outside the specified range                    
                </throws>
            </javadoc>
            <method name="getSuffix" type="Name" line="97"/>
            <javadoc line="97">
                Creates a name whose components consist of a suffix of the
                  components in this name.  Subsequent changes to
                  this name do not affect the name that is returned and vice versa.                
                <param>
                    posnthe 0-based index of the component at which to start.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    a name consisting of the components at indexes in
                      the range [posn,size()).  If posn is equal to
                      size(), an empty name is returned.                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif posn is outside the specified range                    
                </throws>
            </javadoc>
            <method name="startsWith" type="boolean" line="109"/>
            <javadoc line="109">
                Determines whether this name starts with a specified prefix.
                  A name &lt;tt&gt;n&lt;/tt&gt; is a prefix if it is equal to
                  &lt;tt&gt;getPrefix(n.size())&lt;/tt&gt;.                
                <param>
                    nthe name to check                    
                </param>
                <return>
                    true if &lt;tt&gt;n&lt;/tt&gt; is a prefix of this name, false otherwise                    
                </return>
            </javadoc>
            <method name="endsWith" type="boolean" line="117"/>
            <javadoc line="117">
                Determines whether this name ends with a specified suffix.
                  A name &lt;tt&gt;n&lt;/tt&gt; is a suffix if it is equal to
                  &lt;tt&gt;getSuffix(size()-n.size())&lt;/tt&gt;.                
                <param>
                    nthe name to check                    
                </param>
                <return>
                    true if &lt;tt&gt;n&lt;/tt&gt; is a suffix of this name, false otherwise                    
                </return>
            </javadoc>
            <method name="addAll" type="Name" line="125"/>
            <javadoc line="125">
                Adds the components of a name -- in order -- to the end of this name.                
                <param>
                    suffixthe components to add                    
                </param>
                <return>
                    the updated name (not a new one)                    
                </return>
                <throws>
                    InvalidNameException if &lt;tt&gt;suffix&lt;/tt&gt; is not a valid name,
                      or if the addition of the components would violate the syntax
                      rules of this name                    
                </throws>
            </javadoc>
            <method name="addAll" type="Name" line="134"/>
            <javadoc line="134">
                Adds the components of a name -- in order -- at a specified position
                  within this name.
                  Components of this name at or after the index of the first new
                  component are shifted up (away from 0) to accommodate the new
                  components.                
                <param>
                    nthe components to add                    
                </param>
                <param>
                    posnthe index in this name at which to add the new
                      components.  Must be in the range [0,size()].                    
                </param>
                <return>
                    the updated name (not a new one)                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif posn is outside the specified range                    
                </throws>
                <throws>
                    InvalidNameException if &lt;tt&gt;n&lt;/tt&gt; is not a valid name,
                      or if the addition of the components would violate the syntax
                      rules of this name                    
                </throws>
            </javadoc>
            <method name="add" type="Name" line="150"/>
            <javadoc line="150">
                Adds a single component to the end of this name.                
                <param>
                    compthe component to add                    
                </param>
                <return>
                    the updated name (not a new one)                    
                </return>
                <throws>
                    InvalidNameException if adding &lt;tt&gt;comp&lt;/tt&gt; would violate
                      the syntax rules of this name                    
                </throws>
            </javadoc>
            <method name="add" type="Name" line="158"/>
            <javadoc line="158">
                Adds a single component at a specified position within this name.
                  Components of this name at or after the index of the new component
                  are shifted up by one (away from index 0) to accommodate the new
                  component.                
                <param>
                    compthe component to add                    
                </param>
                <param>
                    posnthe index at which to add the new component.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    the updated name (not a new one)                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif posn is outside the specified range                    
                </throws>
                <throws>
                    InvalidNameException if adding &lt;tt&gt;comp&lt;/tt&gt; would violate
                      the syntax rules of this name                    
                </throws>
            </javadoc>
            <method name="remove" type="Object" line="172"/>
            <javadoc line="172">
                Removes a component from this name.
                  The component of this name at the specified position is removed.
                  Components with indexes greater than this position
                  are shifted down (toward index 0) by one.                
                <param>
                    posnthe index of the component to remove.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    the component removed (a String)                    
                </return>
                <throws>
                    ArrayIndexOutOfBoundsExceptionif posn is outside the specified range                    
                </throws>
                <throws>
                    InvalidNameException if deleting the component
                      would violate the syntax rules of the name                    
                </throws>
            </javadoc>
        </interface>
    </source>