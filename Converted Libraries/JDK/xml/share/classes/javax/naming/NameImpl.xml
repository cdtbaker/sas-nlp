<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Properties"/>
        <import package="java.util.NoSuchElementException"/>
        <class name="NameImpl" line="33">
            <comment line="64">
                escapingStyle gives the method used at creation time for
                 quoting or escaping characters in the name.  It is set to the
                 first style of quote or escape encountered if and when the name
                 is parsed.                
            </comment>
            <comment line="74">
                Returns true if &quot;match&quot; is not null, and n contains &quot;match&quot; at
                 position i.                
            </comment>
            <comment line="315">
                Determines whether this component needs any escaping.
                private final boolean escapingNeeded(String comp) {
                int len = comp.length();
                for (int i = 0; i &lt; len; i++) {
                if (i == 0) {
                if (isA(comp, 0, syntaxBeginQuote1) ||
                isA(comp, 0, syntaxBeginQuote2)) {
                return (true);
                }
                }
                if (isSeparator(comp, i)) {
                return (true);
                }
                if (isA(comp, i, syntaxEscape)) {
                i += syntaxEscape.length();
                if (i &gt;= len || isMeta(comp, i)) {
                return (true);
                }
                }
                }
                return (false);
                }                
            </comment>
            <javadoc line="33">
                The implementation class for CompoundName and CompositeName.
                  This class is package private.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <author>
                    Aravindan Ranganathan                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="LEFT_TO_RIGHT" type="byte" line="44"/>
            <declaration name="RIGHT_TO_LEFT" type="byte" line="45"/>
            <declaration name="FLAT" type="byte" line="46"/>
            <declaration name="components" type="Vector" line="48"/>
            <declaration name="syntaxDirection" type="byte" line="50"/>
            <declaration name="syntaxSeparator" type="String" line="51"/>
            <declaration name="syntaxSeparator2" type="String" line="52"/>
            <declaration name="syntaxCaseInsensitive" type="boolean" line="53"/>
            <declaration name="syntaxTrimBlanks" type="boolean" line="54"/>
            <declaration name="syntaxEscape" type="String" line="55"/>
            <declaration name="syntaxBeginQuote1" type="String" line="56"/>
            <declaration name="syntaxEndQuote1" type="String" line="57"/>
            <declaration name="syntaxBeginQuote2" type="String" line="58"/>
            <declaration name="syntaxEndQuote2" type="String" line="59"/>
            <declaration name="syntaxAvaSeparator" type="String" line="60"/>
            <declaration name="syntaxTypevalSeparator" type="String" line="61"/>
            <declaration name="STYLE_NONE" type="int" line="67"/>
            <declaration name="STYLE_QUOTE1" type="int" line="68"/>
            <declaration name="STYLE_QUOTE2" type="int" line="69"/>
            <declaration name="STYLE_ESCAPE" type="int" line="70"/>
            <declaration name="escapingStyle" type="int" line="71"/>
            <method name="isA" type="boolean" line="75">
                <params>
                    <param name="n" type="String"/>
                    <param name="i" type="int"/>
                    <param name="match" type="String"/>
                </params>
            </method>
            <method name="isMeta" type="boolean" line="79">
                <params>
                    <param name="n" type="String"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="isSeparator" type="boolean" line="86">
                <params>
                    <param name="n" type="String"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="skipSeparator" type="int" line="91">
                <params>
                    <param name="name" type="String"/>
                    <param name="i" type="int"/>
                </params>
                <scope line="92"/>
                <scope line="94"/>
            </method>
            <method name="extractComp" type="int" line="101">
                <params>
                    <param name="name" type="String"/>
                    <param name="i" type="int"/>
                    <param name="len" type="int"/>
                    <param name="comps" type="Vector"/>
                </params>
                <comment line="110">
                    handle quoted strings                    
                </comment>
                <comment line="114">
                    record choice of quote chars being used                    
                </comment>
                <comment line="121">
                    consume string until matching quote                    
                </comment>
                <comment line="125">
                    skip escape character if it is escaping ending quote
                     otherwise leave as is.                    
                </comment>
                <comment line="131">
                    copy char                    
                </comment>
                <comment line="134">
                    no ending quote found                    
                </comment>
                <comment line="138">
                    new Exception(&quot;no close quote&quot;);                    
                </comment>
                <comment line="142">
                    verify that end-quote occurs at separator or end of string                    
                </comment>
                <comment line="146">
                    throw (new Exception(                    
                </comment>
                <comment line="155">
                    if escape precedes meta, consume escape and let
                     meta through                    
                </comment>
                <comment line="168">
                    Handle quote occurring after typeval separator                    
                </comment>
                <comment line="173">
                    add back                    
                </comment>
                <comment line="175">
                    consume string until matching quote                    
                </comment>
                <comment line="179">
                    skip escape character if it is escaping ending quote
                     otherwise leave as is.                    
                </comment>
                <comment line="185">
                    copy char                    
                </comment>
                <comment line="188">
                    no ending quote found                    
                </comment>
                <comment line="194">
                    add back                    
                </comment>
                <comment line="196">
                    verify that end-quote occurs at separator or end of string                    
                </comment>
                <declaration name="beginQuote" type="String" line="102"/>
                <declaration name="endQuote" type="String" line="103"/>
                <declaration name="start" type="boolean" line="104"/>
                <declaration name="one" type="boolean" line="105"/>
                <declaration name="answer" type="StringBuffer" line="106"/>
                <scope line="108">
                    <scope line="111">
                        <scope line="116"/>
                        <scope line="123">
                            <scope line="127"/>
                        </scope>
                        <scope line="142"/>
                    </scope>
                    <scope line="149"/>
                    <scope line="152">
                        <scope line="153">
                            <scope line="157"/>
                        </scope>
                        <scope line="160"/>
                    </scope>
                    <scope line="166">
                        <scope line="177">
                            <scope line="181"/>
                        </scope>
                        <scope line="196"/>
                    </scope>
                </scope>
            </method>
            <method name="getBoolean" type="boolean" line="214">
                <params>
                    <param name="p" type="Properties"/>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="toBoolean" type="boolean" line="218">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="recordNamingConvention" type="void" line="222">
                <params>
                    <param name="p" type="Properties"/>
                </params>
                <declaration name="syntaxDirectionStr" type="String" line="223"/>
                <scope line="225"/>
                <scope line="227"/>
                <scope line="229"/>
                <scope line="231"/>
                <scope line="236">
                    <scope line="239"/>
                </scope>
                <scope line="243"/>
            </method>
            <method name="NameImpl" type="constructor" line="269">
                <params>
                    <param name="syntax" type="Properties"/>
                </params>
                <scope line="270"/>
            </method>
            <method name="NameImpl" type="constructor" line="276">
                <params>
                    <param name="syntax" type="Properties"/>
                    <param name="n" type="String"/>
                </params>
                <comment line="297">
                    Trailing separator found.  Add an empty component.                    
                </comment>
                <declaration name="rToL" type="boolean" line="279"/>
                <declaration name="compsAllEmpty" type="boolean" line="280"/>
                <declaration name="len" type="int" line="281"/>
                <scope line="283">
                    <declaration name="comp" type="String" line="286"/>
                    <scope line="289"/>
                    <scope line="293">
                        <scope line="295">
                            <scope line="297"/>
                            <scope line="299"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="NameImpl" type="constructor" line="307">
                <params>
                    <param name="syntax" type="Properties"/>
                    <param name="comps" type="Enumeration"/>
                </params>
                <comment line="311">
                    %% comps could shrink in the middle.                    
                </comment>
            </method>
            <method name="stringifyComp" type="String" line="338">
                <params>
                    <param name="comp" type="String"/>
                </params>
                <comment line="345">
                    determine whether there are any separators; if so escape
                     or quote them                    
                </comment>
                <comment line="374">
                    if quoting component,                    
                </comment>
                <comment line="377">
                    start string off with opening quote                    
                </comment>
                <comment line="380">
                    component is being quoted, so we only need to worry about
                     escaping end quotes that occur in component                    
                </comment>
                <comment line="384">
                    end-quotes must be escaped when inside a quoted string                    
                </comment>
                <comment line="388">
                    no special treatment required                    
                </comment>
                <comment line="393">
                    end with closing quote                    
                </comment>
                <comment line="398">
                    When component is not quoted, add escape for:
                     1. leading quote
                     2. an escape preceding any meta char
                     3. an escape at the end of a component
                     4. separator                    
                </comment>
                <comment line="404">
                    go through characters in component and escape where necessary                    
                </comment>
                <comment line="407">
                    leading quote must be escaped                    
                </comment>
                <comment line="416">
                    Escape an escape preceding meta characters, or at end.
                     Other escapes pass through.                    
                </comment>
                <comment line="420">
                    escape an ending escape                    
                </comment>
                <comment line="423">
                    escape meta strings                    
                </comment>
                <comment line="430">
                    escape unescaped separator                    
                </comment>
                <comment line="432">
                    escape separator                    
                </comment>
                <comment line="437">
                    escape separator2                    
                </comment>
                <comment line="441">
                    no special treatment required                    
                </comment>
                <declaration name="len" type="int" line="339"/>
                <declaration name="escapeSeparator" type="boolean" line="340"/>
                <declaration name="beginQuote" type="String" line="341"/>
                <declaration name="strbuf" type="StringBuffer" line="342"/>
                <scope line="347">
                    <scope line="348"/>
                    <scope line="351"/>
                </scope>
                <scope line="358">
                    <scope line="359">
                        <scope line="360"/>
                    </scope>
                    <scope line="364">
                        <scope line="365"/>
                    </scope>
                </scope>
                <scope line="374">
                    <scope line="381">
                        <scope line="382"/>
                        <scope line="386"/>
                    </scope>
                </scope>
                <scope line="395">
                    <declaration name="start" type="boolean" line="404"/>
                    <scope line="405">
                        <scope line="407"/>
                        <scope line="410"/>
                        <scope line="417">
                            <scope line="418"/>
                            <scope line="421"/>
                        </scope>
                        <scope line="430"/>
                        <scope line="435"/>
                        <scope line="439"/>
                    </scope>
                </scope>
            </method>
            <method name="toString" type="String" line="449">
                <declaration name="answer" type="StringBuffer" line="450"/>
                <declaration name="comp" type="String" line="451"/>
                <declaration name="compsAllEmpty" type="boolean" line="452"/>
                <declaration name="size" type="int" line="453"/>
                <scope line="455">
                    <scope line="456"/>
                    <scope line="459"/>
                </scope>
            </method>
            <method name="equals" type="boolean" line="473">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="481">
                    %% comps could shrink in the middle.                    
                </comment>
                <scope line="474">
                    <declaration name="target" type="NameImpl" line="475"/>
                    <scope line="476">
                        <declaration name="mycomps" type="Enumeration" line="477"/>
                        <declaration name="comps" type="Enumeration" line="478"/>
                        <scope line="479">
                            <declaration name="my" type="String" line="481"/>
                            <declaration name="his" type="String" line="482"/>
                            <scope line="483"/>
                            <scope line="487"/>
                            <scope line="490"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="501">
                Compares obj to this NameImpl to determine ordering.
                  Takes into account syntactic properties such as
                  elimination of blanks, case-ignore, etc, if relevant.
                  Note: using syntax of this NameImpl and ignoring
                  that of comparison target.                
            </javadoc>
            <method name="compareTo" type="int" line="509">
                <params>
                    <param name="obj" type="NameImpl"/>
                </params>
                <comment line="525">
                    normalize according to syntax                    
                </comment>
                <scope line="510"/>
                <declaration name="len1" type="int" line="514"/>
                <declaration name="len2" type="int" line="515"/>
                <declaration name="n" type="int" line="516"/>
                <declaration name="index1" type="int" line="518"/>
                <scope line="520">
                    <declaration name="comp1" type="String" line="521"/>
                    <declaration name="comp2" type="String" line="522"/>
                    <scope line="525"/>
                    <scope line="529"/>
                    <declaration name="local" type="int" line="533"/>
                    <scope line="534"/>
                </scope>
            </method>
            <method name="size" type="int" line="542"/>
            <method name="getAll" type="Enumeration" line="546"/>
            <method name="get" type="String" line="550">
                <params>
                    <param name="posn" type="int"/>
                </params>
            </method>
            <method name="getPrefix" type="Enumeration" line="554">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <scope line="555"/>
            </method>
            <method name="getSuffix" type="Enumeration" line="561">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="cnt" type="int" line="562"/>
                <scope line="563"/>
            </method>
            <method name="isEmpty" type="boolean" line="569"/>
            <method name="startsWith" type="boolean" line="573">
                <params>
                    <param name="posn" type="int"/>
                    <param name="prefix" type="Enumeration"/>
                </params>
                <scope line="574"/>
                <scope line="577">
                    <declaration name="mycomps" type="Enumeration" line="578"/>
                    <scope line="579">
                        <declaration name="my" type="String" line="580"/>
                        <declaration name="his" type="String" line="581"/>
                        <scope line="582"/>
                        <scope line="586"/>
                        <scope line="589"/>
                    </scope>
                </scope>
                <scope line="594"/>
            </method>
            <method name="endsWith" type="boolean" line="600">
                <params>
                    <param name="posn" type="int"/>
                    <param name="suffix" type="Enumeration"/>
                </params>
                <comment line="602">
                    posn is number of elements in suffix
                     startIndex is the starting position in this name
                     at which to start the comparison. It is calculated by
                     subtracting &apos;posn&apos; from size()                    
                </comment>
                <declaration name="startIndex" type="int" line="605"/>
                <scope line="606"/>
                <scope line="609">
                    <declaration name="mycomps" type="Enumeration" line="610"/>
                    <scope line="611">
                        <declaration name="my" type="String" line="612"/>
                        <declaration name="his" type="String" line="613"/>
                        <scope line="614"/>
                        <scope line="618"/>
                        <scope line="621"/>
                    </scope>
                </scope>
                <scope line="626"/>
            </method>
            <method name="addAll" type="boolean" line="632">
                <params>
                    <param name="comps" type="Enumeration"/>
                </params>
                <comment line="645">
                    &quot;comps&quot; has shrunk.                    
                </comment>
                <declaration name="added" type="boolean" line="633"/>
                <scope line="634">
                    <scope line="635">
                        <declaration name="comp" type="Object" line="636"/>
                        <scope line="637"/>
                    </scope>
                    <scope line="643"/>
                </scope>
            </method>
            <method name="addAll" type="boolean" line="651">
                <params>
                    <param name="posn" type="int"/>
                    <param name="comps" type="Enumeration"/>
                </params>
                <comment line="664">
                    &quot;comps&quot; has shrunk.                    
                </comment>
                <declaration name="added" type="boolean" line="652"/>
                <scope line="653">
                    <scope line="654">
                        <declaration name="comp" type="Object" line="655"/>
                        <scope line="656"/>
                    </scope>
                    <scope line="662"/>
                </scope>
            </method>
            <method name="add" type="void" line="669">
                <params>
                    <param name="comp" type="String"/>
                </params>
                <scope line="670"/>
            </method>
            <method name="add" type="void" line="677">
                <params>
                    <param name="posn" type="int"/>
                    <param name="comp" type="String"/>
                </params>
                <scope line="678"/>
            </method>
            <method name="remove" type="Object" line="685">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="r" type="Object" line="686"/>
            </method>
            <method name="hashCode" type="int" line="691">
                <declaration name="hash" type="int" line="692"/>
                <scope line="693">
                    <declaration name="comp" type="String" line="694"/>
                    <scope line="695"/>
                    <scope line="698"/>
                </scope>
            </method>
        </class>
        <class name="NameImplEnumerator" line="708">
            <comment line="64">
                escapingStyle gives the method used at creation time for
                 quoting or escaping characters in the name.  It is set to the
                 first style of quote or escape encountered if and when the name
                 is parsed.                
            </comment>
            <comment line="74">
                Returns true if &quot;match&quot; is not null, and n contains &quot;match&quot; at
                 position i.                
            </comment>
            <comment line="315">
                Determines whether this component needs any escaping.
                private final boolean escapingNeeded(String comp) {
                int len = comp.length();
                for (int i = 0; i &lt; len; i++) {
                if (i == 0) {
                if (isA(comp, 0, syntaxBeginQuote1) ||
                isA(comp, 0, syntaxBeginQuote2)) {
                return (true);
                }
                }
                if (isSeparator(comp, i)) {
                return (true);
                }
                if (isA(comp, i, syntaxEscape)) {
                i += syntaxEscape.length();
                if (i &gt;= len || isMeta(comp, i)) {
                return (true);
                }
                }
                }
                return (false);
                }                
            </comment>
            <implements interface="Enumeration"/>
            <declaration name="vector" type="Vector" line="710"/>
            <declaration name="count" type="int" line="711"/>
            <declaration name="limit" type="int" line="712"/>
            <method name="NameImplEnumerator" type="constructor" line="714">
                <params>
                    <param name="v" type="Vector"/>
                    <param name="start" type="int"/>
                    <param name="lim" type="int"/>
                </params>
            </method>
            <method name="hasMoreElements" type="boolean" line="720"/>
            <method name="nextElement" type="Object" line="724">
                <scope line="725"/>
            </method>
        </class>
    </source>