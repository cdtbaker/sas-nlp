<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <class name="NamingException" line="28">
            <extends class="Exception"/>
            <javadoc line="28">
                This is the superclass of all exceptions thrown by
                  operations in the Context and DirContext interfaces.
                  The nature of the failure is described by the name of the subclass.
                  This exception captures the information pinpointing where the operation
                  failed, such as where resolution last proceeded to.
                  &lt;ul&gt;
                  &lt;li&gt; Resolved Name. Portion of name that has been resolved.
                  &lt;li&gt; Resolved Object. Object to which resolution of name proceeded.
                  &lt;li&gt; Remaining Name. Portion of name that has not been resolved.
                  &lt;li&gt; Explanation. Detail explaining why name resolution failed.
                  &lt;li&gt; Root Exception. The exception that caused this naming exception
                  to be thrown.
                  &lt;/ul&gt;
                  null is an acceptable value for any of these fields. When null,
                  it means that no such information has been recorded for that field.
                  &lt;p&gt;
                  A NamingException instance is not synchronized against concurrent
                  multithreaded access. Multiple threads trying to access and modify
                  a single NamingException instance should lock the object.
                  &lt;p&gt;
                  This exception has been retrofitted to conform to
                  the general purpose exception-chaining mechanism.  The
                  &lt;i&gt;root exception&lt;/i&gt; (or &lt;i&gt;root cause&lt;/i&gt;) is the same object as the
                  &lt;i&gt;cause&lt;/i&gt; returned by the {@link Throwable#getCause()} method.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="resolvedName" type="Name" line="61"/>
            <javadoc line="61">
                Contains the part of the name that has been successfully resolved.
                  It is a composite name and can be null.
                  This field is initialized by the constructors.
                  You should access and manipulate this field
                  through its get and set methods.                
                <serial>
                                        
                </serial>
                <see>
                    #getResolvedName                    
                </see>
                <see>
                    #setResolvedName                    
                </see>
            </javadoc>
            <declaration name="resolvedObj" type="Object" line="72"/>
            <javadoc line="72">
                Contains the object to which resolution of the part of the name was
                  successful. Can be null.
                  This field is initialized by the constructors.
                  You should access and manipulate this field
                  through its get and set methods.                
                <serial>
                                        
                </serial>
                <see>
                    #getResolvedObj                    
                </see>
                <see>
                    #setResolvedObj                    
                </see>
            </javadoc>
            <declaration name="remainingName" type="Name" line="83"/>
            <javadoc line="83">
                Contains the remaining name that has not been resolved yet.
                  It is a composite name and can be null.
                  This field is initialized by the constructors.
                  You should access and manipulate this field
                  through its get, set, &quot;append&quot; methods.                
                <serial>
                                        
                </serial>
                <see>
                    #getRemainingName                    
                </see>
                <see>
                    #setRemainingName                    
                </see>
                <see>
                    #appendRemainingName                    
                </see>
                <see>
                    #appendRemainingComponent                    
                </see>
            </javadoc>
            <declaration name="rootException" type="Throwable" line="97"/>
            <javadoc line="97">
                Contains the original exception that caused this NamingException to
                  be thrown. This field is set if there is additional
                  information that could be obtained from the original
                  exception, or if the original exception could not be
                  mapped to a subclass of NamingException.
                  Can be null.
                  &lt;p&gt;
                  This field predates the general-purpose exception chaining facility.
                  The {@link #initCause(Throwable)} and {@link #getCause()} methods
                  are now the preferred means of accessing this information.                
                <serial>
                                        
                </serial>
                <see>
                    #getRootCause                    
                </see>
                <see>
                    #setRootCause(Throwable)                    
                </see>
                <see>
                    #initCause(Throwable)                    
                </see>
                <see>
                    #getCause                    
                </see>
            </javadoc>
            <javadoc line="117">
                Constructs a new NamingException with an explanation.
                  All unspecified fields are set to null.                
                <param>
                    explanation     A possibly null string containing
                      additional detail about this exception.                    
                </param>
                <see>
                    java.lang.Throwable#getMessage                    
                </see>
            </javadoc>
            <method name="NamingException" type="constructor" line="125">
                <params>
                    <param name="explanation" type="String"/>
                </params>
            </method>
            <javadoc line="131">
                Constructs a new NamingException.
                  All fields are set to null.                
            </javadoc>
            <method name="NamingException" type="constructor" line="135"/>
            <javadoc line="141">
                Retrieves the leading portion of the name that was resolved
                  successfully.                
                <return>
                    The part of the name that was resolved successfully.
                      It is a composite name. It can be null, which means
                      the resolved name field has not been set.                    
                </return>
                <see>
                    #getResolvedObj                    
                </see>
                <see>
                    #setResolvedName                    
                </see>
            </javadoc>
            <method name="getResolvedName" type="Name" line="151"/>
            <javadoc line="155">
                Retrieves the remaining unresolved portion of the name.                
                <return>
                    The part of the name that has not been resolved.
                      It is a composite name. It can be null, which means
                      the remaining name field has not been set.                    
                </return>
                <see>
                    #setRemainingName                    
                </see>
                <see>
                    #appendRemainingName                    
                </see>
                <see>
                    #appendRemainingComponent                    
                </see>
            </javadoc>
            <method name="getRemainingName" type="Name" line="164"/>
            <javadoc line="168">
                Retrieves the object to which resolution was successful.
                  This is the object to which the resolved name is bound.                
                <return>
                    The possibly null object that was resolved so far.
                      null means that the resolved object field has not been set.                    
                </return>
                <see>
                    #getResolvedName                    
                </see>
                <see>
                    #setResolvedObj                    
                </see>
            </javadoc>
            <method name="getResolvedObj" type="Object" line="177"/>
            <javadoc line="181">
                Retrieves the explanation associated with this exception.                
                <return>
                    The possibly null detail string explaining more
                      about this exception. If null, it means there is no
                      detail message for this exception.                    
                </return>
                <see>
                    java.lang.Throwable#getMessage                    
                </see>
            </javadoc>
            <method name="getExplanation" type="String" line="190"/>
            <javadoc line="194">
                Sets the resolved name field of this exception.
                  &lt;p&gt;
                  &lt;tt&gt;name&lt;/tt&gt; is a composite name. If the intent is to set
                  this field using a compound name or string, you must
                  &quot;stringify&quot; the compound name, and create a composite
                  name with a single component using the string. You can then
                  invoke this method using the resulting composite name.
                  &lt;p&gt;
                  A copy of &lt;code&gt;name&lt;/code&gt; is made and stored.
                  Subsequent changes to &lt;code&gt;name&lt;/code&gt; does not
                  affect the copy in this NamingException and vice versa.                
                <param>
                    name The possibly null name to set resolved name to.
                      If null, it sets the resolved name field to null.                    
                </param>
                <see>
                    #getResolvedName                    
                </see>
            </javadoc>
            <method name="setResolvedName" type="void" line="211">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="218">
                Sets the remaining name field of this exception.
                  &lt;p&gt;
                  &lt;tt&gt;name&lt;/tt&gt; is a composite name. If the intent is to set
                  this field using a compound name or string, you must
                  &quot;stringify&quot; the compound name, and create a composite
                  name with a single component using the string. You can then
                  invoke this method using the resulting composite name.
                  &lt;p&gt;
                  A copy of &lt;code&gt;name&lt;/code&gt; is made and stored.
                  Subsequent changes to &lt;code&gt;name&lt;/code&gt; does not
                  affect the copy in this NamingException and vice versa.                
                <param>
                    name The possibly null name to set remaining name to.
                      If null, it sets the remaining name field to null.                    
                </param>
                <see>
                    #getRemainingName                    
                </see>
                <see>
                    #appendRemainingName                    
                </see>
                <see>
                    #appendRemainingComponent                    
                </see>
            </javadoc>
            <method name="setRemainingName" type="void" line="236">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="243">
                Sets the resolved object field of this exception.                
                <param>
                    obj The possibly null object to set resolved object to.
                      If null, the resolved object field is set to null.                    
                </param>
                <see>
                    #getResolvedObj                    
                </see>
            </javadoc>
            <method name="setResolvedObj" type="void" line="249">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="253">
                Add name as the last component in remaining name.                
                <param>
                    name The component to add.
                      If name is null, this method does not do anything.                    
                </param>
                <see>
                    #setRemainingName                    
                </see>
                <see>
                    #getRemainingName                    
                </see>
                <see>
                    #appendRemainingName                    
                </see>
            </javadoc>
            <method name="appendRemainingComponent" type="void" line="261">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="262">
                    <scope line="263">
                        <scope line="264"/>
                    </scope>
                    <scope line="268"/>
                </scope>
            </method>
            <javadoc line="274">
                Add components from &apos;name&apos; as the last components in
                  remaining name.
                  &lt;p&gt;
                  &lt;tt&gt;name&lt;/tt&gt; is a composite name. If the intent is to append
                  a compound name, you should &quot;stringify&quot; the compound name
                  then invoke the overloaded form that accepts a String parameter.
                  &lt;p&gt;
                  Subsequent changes to &lt;code&gt;name&lt;/code&gt; does not
                  affect the remaining name field in this NamingException and vice versa.                
                <param>
                    name The possibly null name containing ordered components to add.
                      If name is null, this method does not do anything.                    
                </param>
                <see>
                    #setRemainingName                    
                </see>
                <see>
                    #getRemainingName                    
                </see>
                <see>
                    #appendRemainingComponent                    
                </see>
            </javadoc>
            <method name="appendRemainingName" type="void" line="290">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="291"/>
                <scope line="294">
                    <scope line="295"/>
                    <scope line="297"/>
                </scope>
                <scope line="300"/>
            </method>
            <javadoc line="305">
                Retrieves the root cause of this NamingException, if any.
                  The root cause of a naming exception is used when the service provider
                  wants to indicate to the caller a non-naming related exception
                  but at the same time wants to use the NamingException structure
                  to indicate how far the naming operation proceeded.
                  &lt;p&gt;
                  This method predates the general-purpose exception chaining facility.
                  The {@link #getCause()} method is now the preferred means of obtaining
                  this information.                
                <return>
                    The possibly null exception that caused this naming
                      exception. If null, it means no root cause has been
                      set for this naming exception.                    
                </return>
                <see>
                    #setRootCause                    
                </see>
                <see>
                    #rootException                    
                </see>
                <see>
                    #getCause                    
                </see>
            </javadoc>
            <method name="getRootCause" type="Throwable" line="323"/>
            <javadoc line="327">
                Records the root cause of this NamingException.
                  If &lt;tt&gt;e&lt;/tt&gt; is &lt;tt&gt;this&lt;/tt&gt;, this method does not do anything.
                  &lt;p&gt;
                  This method predates the general-purpose exception chaining facility.
                  The {@link #initCause(Throwable)} method is now the preferred means
                  of recording this information.                
                <param>
                    e The possibly null exception that caused the naming
                      operation to fail. If null, it means this naming
                      exception has no root cause.                    
                </param>
                <see>
                    #getRootCause                    
                </see>
                <see>
                    #rootException                    
                </see>
                <see>
                    #initCause                    
                </see>
            </javadoc>
            <method name="setRootCause" type="void" line="342">
                <params>
                    <param name="e" type="Throwable"/>
                </params>
                <scope line="343"/>
            </method>
            <javadoc line="348">
                Returns the cause of this exception.  The cause is the
                  throwable that caused this naming exception to be thrown.
                  Returns &lt;code&gt;null&lt;/code&gt; if the cause is nonexistent or
                  unknown.                
                <return>
                    the cause of this exception, or <code>null</code> if the
                      cause is nonexistent or unknown.                    
                </return>
                <see>
                    #initCause(Throwable)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCause" type="Throwable" line="359"/>
            <javadoc line="363">
                Initializes the cause of this exception to the specified value.
                  The cause is the throwable that caused this naming exception to be
                  thrown.
                  &lt;p&gt;
                  This method may be called at most once.                
                <param>
                    cause   the cause, which is saved for later retrieval by
                      the {@link #getCause()} method.  A <tt>null</tt> value
                      indicates that the cause is nonexistent or unknown.                    
                </param>
                <return>
                    a reference to this <code>NamingException</code> instance.                    
                </return>
                <throws>
                    IllegalArgumentException if <code>cause</code> is this
                      exception.  (A throwable cannot be its own cause.)                    
                </throws>
                <throws>
                    IllegalStateException if this method has already
                      been called on this exception.                    
                </throws>
                <see>
                    #getCause                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="initCause" type="Throwable" line="381">
                <params>
                    <param name="cause" type="Throwable"/>
                </params>
            </method>
            <javadoc line="387">
                Generates the string representation of this exception.
                  The string representation consists of this exception&apos;s class name,
                  its detailed message, and if it has a root cause, the string
                  representation of the root cause exception, followed by
                  the remaining name (if it is not null).
                  This string is used for debugging and not meant to be interpreted
                  programmatically.                
                <return>
                    The non-null string containing the string representation
                      of this exception.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="399">
                <declaration name="answer" type="String" line="400"/>
                <scope line="402"/>
                <scope line="405"/>
            </method>
            <javadoc line="411">
                Generates the string representation in more detail.
                  This string representation consists of the information returned
                  by the toString() that takes no parameters, plus the string
                  representation of the resolved object (if it is not null).
                  This string is used for debugging and not meant to be interpreted
                  programmatically.                
                <param>
                    detail If true, include details about the resolved object
                      in addition to the other information.                    
                </param>
                <return>
                    The non-null string containing the string representation.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="423">
                <params>
                    <param name="detail" type="boolean"/>
                </params>
                <scope line="424"/>
                <scope line="426"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="431"/>
            <javadoc line="431">
                Use serialVersionUID from JNDI 1.1.1 for interoperability                
            </javadoc>
        </class>
    </source>