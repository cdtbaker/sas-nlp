<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="java.util.Iterator"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="javax.naming.InvalidNameException"/>
        <import package="javax.naming.directory.BasicAttributes"/>
        <import package="javax.naming.directory.Attributes"/>
        <import package="javax.naming.directory.Attribute"/>
        <import package="javax.naming.NamingEnumeration"/>
        <import package="javax.naming.NamingException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="Rdn" line="45">
            <comment line="108">
                private transient ArrayList&lt;RdnEntry&gt; entries;                
            </comment>
            <comment line="111">
                The common case.                
            </comment>
            <comment line="212">
                An empty constructor used by the parser                
            </comment>
            <comment line="217">
                Adds the given attribute type and value to this Rdn.
                 The string attribute values are not interpretted as
                 &lt;a href=&quot;http:www.ietf.orgrfcrfc2253.txt&quot;&gt;RFC 2253&lt;a&gt;
                 formatted RDN strings. That is the values are used
                 literally (not parsed) and assumed to be unescaped.
                
                 @param type The non-null and non-empty string attribute type.
                 @param value The non-null and non-empty attribute value.
                 @return The updated Rdn, not a new one. Cannot be null.
                 @see #toString()                
            </comment>
            <comment line="525">
                Given the value of a string-valued attribute, returns a
                 string suitable for inclusion in a DN.  This is accomplished by
                 using backslash (\) to escape the following characters:
                  leading and trailing whitespace
                  , = + &lt; &gt; # ; &quot; \                
            </comment>
            <comment line="563">
                Given the value of a binary attribute, returns a string
                 suitable for inclusion in a DN (such as &quot;#CEB1DF80&quot;).
                 TBD: This method should actually generate the ber encoding
                 of the binary value                
            </comment>
            <comment line="684">
                Given an array of chars (with starting and ending indexes into it)
                 representing bytes encoded as hex-pairs (such as &quot;CEB1DF80&quot;),
                 returns a byte array containing the decoded bytes.                
            </comment>
            <comment line="707">
                Given an array of chars (with starting and ending indexes into it),
                 finds the largest prefix consisting of hex-encoded UTF-8 octets,
                 and returns a byte array containing the corresponding UTF-8 octets.
                
                 Hex-encoded UTF-8 octets look like this:
                      \03\B1\DF\80                
            </comment>
            <comment line="737">
                Best guess as to what RFC 2253 means by &quot;whitespace&quot;.                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <javadoc line="45">
                This class represents a relative distinguished name, or RDN, which is a
                  component of a distinguished name as specified by
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;.
                  An example of an RDN is &quot;OU=Sales+CN=J.Smith&quot;. In this example,
                  the RDN consist of multiple attribute type/value pairs. The
                  RDN is parsed as described in the class description for{@link javax.naming.ldap.LdapName &lt;tt&gt;LdapName&lt;/tt&gt;}.
                  &lt;p&gt;
                  The Rdn class represents an RDN as attribute type/value mappings,
                  which can be viewed using{@link javax.naming.directory.Attributes Attributes}.
                  In addition, it contains convenience methods that allow easy retrieval
                  of type and value when the Rdn consist of a single type/value pair,
                  which is how it appears in a typical usage.
                  It also contains helper methods that allow escaping of the unformatted
                  attribute value and unescaping of the value formatted according to the
                  escaping syntax defined in RFC2253. For methods that take or return
                  attribute value as an Object, the value is either a String
                  (in unescaped form) or a byte array.
                  &lt;p&gt;
                  &lt;code&gt;Rdn&lt;/code&gt; will properly parse all valid RDNs, but
                  does not attempt to detect all possible violations when parsing
                  invalid RDNs. It is &quot;generous&quot; in accepting invalid RDNs.
                  The &quot;validity&quot; of a name is determined ultimately when it
                  is supplied to an LDAP server, which may accept or
                  reject the name based on factors such as its schema information
                  and interoperability considerations.
                  &lt;p&gt;
                  The following code example shows how to construct an Rdn using the
                  constructor that takes type and value as arguments:
                  &lt;pre&gt;
                  Rdn rdn = new Rdn(&quot;cn&quot;, &quot;Juicy, Fruit&quot;);
                  System.out.println(rdn.toString());
                  &lt;/pre&gt;
                  The last line will print &lt;tt&gt;cn=Juicy\, Fruit&lt;/tt&gt;. The{@link #unescapeValue(String) &lt;tt&gt;unescapeValue()&lt;/tt&gt;} method can be
                  used to unescape the escaped comma resulting in the original
                  value &lt;tt&gt;&quot;Juicy, Fruit&quot;&lt;/tt&gt;. The {@link #escapeValue(Object)&lt;tt&gt;escapeValue()&lt;/tt&gt;} method adds the escape back preceding the comma.
                  &lt;p&gt;
                  This class can be instantiated by a string representation
                  of the RDN defined in RFC 2253 as shown in the following code example:
                  &lt;pre&gt;
                  Rdn rdn = new Rdn(&quot;cn=Juicy\\, Fruit&quot;);
                  System.out.println(rdn.toString());
                  &lt;/pre&gt;
                  The last line will print &lt;tt&gt;cn=Juicy\, Fruit&lt;/tt&gt;.
                  &lt;p&gt;
                  Concurrent multithreaded read-only access of an instance of
                  &lt;tt&gt;Rdn&lt;/tt&gt; need not be synchronized.
                  &lt;p&gt;
                  Unless otherwise noted, the behavior of passing a null argument
                  to a constructor or method in this class will cause NullPointerException
                  to be thrown.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="entries" type="ArrayList" line="108"/>
            <declaration name="DEFAULT_SIZE" type="int" line="111"/>
            <declaration name="serialVersionUID" type="long" line="113"/>
            <javadoc line="115">
                Constructs an Rdn from the given attribute set. See{@link javax.naming.directory.Attributes Attributes}.
                  &lt;p&gt;
                  The string attribute values are not interpretted as
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;
                  formatted RDN strings. That is, the values are used
                  literally (not parsed) and assumed to be unescaped.                
                <param>
                    attrSet The non-null and non-empty attributes containing
                      type/value mappings.                    
                </param>
                <throws>
                    InvalidNameException If contents of <tt>attrSet</tt> cannot
                      be used to construct a valid RDN.                    
                </throws>
            </javadoc>
            <method name="Rdn" type="constructor" line="129">
                <params>
                    <param name="attrSet" type="Attributes"/>
                </params>
                <comment line="150">
                    arrange entries for comparison                    
                </comment>
                <scope line="130"/>
                <declaration name="attrs" type="NamingEnumeration" line="134"/>
                <scope line="135">
                    <scope line="136">
                        <declaration name="entry" type="RdnEntry" line="137"/>
                        <declaration name="attr" type="Attribute" line="138"/>
                    </scope>
                </scope>
                <scope line="143">
                    <declaration name="e2" type="InvalidNameException" line="144"/>
                </scope>
            </method>
            <javadoc line="152">
                Constructs an Rdn from the given string.
                  This constructor takes a string formatted according to the rules
                  defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;
                  and described in the class description for{@link javax.naming.ldap.LdapName}.                
                <param>
                    rdnString The non-null and non-empty RFC2253 formatted string.                    
                </param>
                <throws>
                    InvalidNameException If a syntax error occurs during
                      parsing of the rdnString.                    
                </throws>
            </javadoc>
            <method name="Rdn" type="constructor" line="163">
                <params>
                    <param name="rdnString" type="String"/>
                </params>
            </method>
            <javadoc line="168">
                Constructs an Rdn from the given &lt;tt&gt;rdn&lt;/tt&gt;.
                  The contents of the &lt;tt&gt;rdn&lt;/tt&gt; are simply copied into the newly
                  created Rdn.                
                <param>
                    rdn The non-null Rdn to be copied.                    
                </param>
            </javadoc>
            <method name="Rdn" type="constructor" line="174">
                <params>
                    <param name="rdn" type="Rdn"/>
                </params>
            </method>
            <javadoc line="179">
                Constructs an Rdn from the given attribute type and
                  value.
                  The string attribute values are not interpretted as
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;
                  formatted RDN strings. That is, the values are used
                  literally (not parsed) and assumed to be unescaped.                
                <param>
                    type The non-null and non-empty string attribute type.                    
                </param>
                <param>
                    value The non-null and non-empty attribute value.                    
                </param>
                <throws>
                    InvalidNameException If type/value cannot be used to
                      construct a valid RDN.                    
                </throws>
                <see>
                    #toString()                    
                </see>
            </javadoc>
            <method name="Rdn" type="constructor" line="193">
                <params>
                    <param name="type" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="194"/>
                <scope line="197"/>
            </method>
            <method name="isEmptyValue" type="boolean" line="206">
                <params>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <method name="Rdn" type="constructor" line="212"/>
            <method name="put" type="Rdn" line="228">
                <params>
                    <param name="type" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <comment line="231">
                    create new Entry                    
                </comment>
                <comment line="234">
                    clone the byte array                    
                </comment>
                <declaration name="newEntry" type="RdnEntry" line="231"/>
                <scope line="233"/>
                <scope line="235"/>
            </method>
            <method name="sort" type="void" line="242">
                <scope line="243"/>
            </method>
            <javadoc line="248">
                Retrieves one of this Rdn&apos;s value.
                  This is a convenience method for obtaining the value,
                  when the RDN contains a single type and value mapping,
                  which is the common RDN usage.
                  &lt;p&gt;
                  For a multi-valued RDN, this method returns value corresponding
                  to the type returned by {@link #getType() getType()} method.                
                <return>
                    The non-null attribute value.                    
                </return>
            </javadoc>
            <method name="getValue" type="Object" line="259"/>
            <javadoc line="263">
                Retrieves one of this Rdn&apos;s type.
                  This is a convenience method for obtaining the type,
                  when the RDN contains a single type and value mapping,
                  which is the common RDN usage.
                  &lt;p&gt;
                  For a multi-valued RDN, the type/value pairs have
                  no specific order defined on them. In that case, this method
                  returns type of one of the type/value pairs.
                  The {@link #getValue() getValue()} method returns the
                  value corresponding to the type returned by this method.                
                <return>
                    The non-null attribute type.                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="277"/>
            <javadoc line="281">
                Returns this Rdn as a string represented in a format defined by
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; and described
                  in the class description for {@link javax.naming.ldap.LdapName LdapName}.                
                <return>
                    The string representation of the Rdn.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="288">
                <declaration name="builder" type="StringBuilder" line="289"/>
                <declaration name="size" type="int" line="290"/>
                <scope line="291"/>
                <scope line="294"/>
            </method>
            <javadoc line="301">
                Compares this Rdn with the specified Object for order.
                  Returns a negative integer, zero, or a positive integer as this
                  Rdn is less than, equal to, or greater than the given Object.
                  &lt;p&gt;
                  If obj is null or not an instance of Rdn, ClassCastException
                  is thrown.
                  &lt;p&gt;
                  The attribute type and value pairs of the RDNs are lined up
                  against each other and compared lexicographically. The order of
                  components in multi-valued Rdns (such as &quot;ou=Sales+cn=Bob&quot;) is not
                  significant.                
                <param>
                    obj The non-null object to compare against.                    
                </param>
                <return>
                    A negative integer, zero, or a positive integer as this Rdn
                      is less than, equal to, or greater than the given Object.                    
                </return>
                <exception>
                    ClassCastException if obj is null or not a Rdn.
                      <p>                    
                </exception>
            </javadoc>
            <method name="compareTo" type="int" line="320">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="332">
                    Compare a single pair of type/value pairs.                    
                </comment>
                <comment line="339">
                    longer RDN wins                    
                </comment>
                <scope line="321"/>
                <scope line="324"/>
                <declaration name="that" type="Rdn" line="327"/>
                <declaration name="minSize" type="int" line="328"/>
                <scope line="329">
                    <declaration name="diff" type="int" line="332"/>
                    <scope line="334"/>
                </scope>
            </method>
            <javadoc line="341">
                Compares the specified Object with this Rdn for equality.
                  Returns true if the given object is also a Rdn and the two Rdns
                  represent the same attribute type and value mappings. The order of
                  components in multi-valued Rdns (such as &quot;ou=Sales+cn=Bob&quot;) is not
                  significant.
                  &lt;p&gt;
                  Type and value equalilty matching is done as below:
                  &lt;ul&gt;
                  &lt;li&gt; The types are compared for equality with their case ignored.
                  &lt;li&gt; String values with different but equivalent usage of quoting,
                  escaping, or UTF8-hex-encoding are considered equal.
                  The case of the values is ignored during the comparison.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If obj is null or not an instance of Rdn, false is returned.
                  &lt;p&gt;                
                <param>
                    obj object to be compared for equality with this Rdn.                    
                </param>
                <return>
                    true if the specified object is equal to this Rdn.                    
                </return>
                <see>
                    #hashCode()                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="362">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="363"/>
                <scope line="366"/>
                <declaration name="that" type="Rdn" line="369"/>
                <scope line="370"/>
                <scope line="373">
                    <scope line="374"/>
                </scope>
            </method>
            <javadoc line="381">
                Returns the hash code of this RDN. Two RDNs that are
                  equal (according to the equals method) will have the same
                  hash code.                
                <return>
                    An int representing the hash code of this Rdn.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="389">
                <comment line="392">
                    Sum up the hash codes of the components.                    
                </comment>
                <comment line="395">
                    For each type/value pair...                    
                </comment>
                <declaration name="hash" type="int" line="392"/>
                <scope line="395"/>
            </method>
            <javadoc line="401">
                Retrieves the {@link javax.naming.directory.Attributes Attributes}view of the type/value mappings contained in this Rdn.                
                <return>
                    The non-null attributes containing the type/value
                      mappings of this Rdn.                    
                </return>
            </javadoc>
            <method name="toAttributes" type="Attributes" line="408">
                <declaration name="attrs" type="Attributes" line="409"/>
                <scope line="410">
                    <declaration name="entry" type="RdnEntry" line="411"/>
                    <declaration name="attr" type="Attribute" line="412"/>
                    <scope line="413"/>
                </scope>
            </method>
            <class name="RdnEntry" line="422">
                <comment line="427">
                    If non-null, a cannonical representation of the value suitable
                     for comparison using String.compareTo()                    
                </comment>
                <implements interface="Comparable"/>
                <declaration name="type" type="String" line="423"/>
                <declaration name="value" type="Object" line="424"/>
                <declaration name="comparable" type="String" line="428"/>
                <method name="getType" type="String" line="430"/>
                <method name="getValue" type="Object" line="434"/>
                <method name="compareTo" type="int" line="438">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <comment line="441">
                        Any change here affecting equality must be
                         reflected in hashCode().                        
                    </comment>
                    <comment line="450">
                        try shortcut                        
                    </comment>
                    <declaration name="that" type="RdnEntry" line="442"/>
                    <declaration name="diff" type="int" line="444"/>
                    <scope line="446"/>
                    <scope line="449"/>
                </method>
                <method name="equals" type="boolean" line="456">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <comment line="465">
                        Any change here must be reflected in hashCode()                        
                    </comment>
                    <scope line="457"/>
                    <scope line="460"/>
                    <declaration name="that" type="RdnEntry" line="465"/>
                </method>
                <method name="hashCode" type="int" line="471"/>
                <method name="toString" type="String" line="476"/>
                <method name="getValueComparable" type="String" line="480">
                    <comment line="483">
                        return cached result                        
                    </comment>
                    <comment line="486">
                        cache result                        
                    </comment>
                    <scope line="481"/>
                    <scope line="486"/>
                    <scope line="488"/>
                </method>
            </class>
            <javadoc line="495">
                Retrieves the number of attribute type/value pairs in this Rdn.                
                <return>
                    The non-negative number of type/value pairs in this Rdn.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="499"/>
            <javadoc line="503">
                Given the value of an attribute, returns a string escaped according
                  to the rules specified in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;.
                  &lt;p&gt;
                  For example, if the val is &quot;Sue, Grabbit and Runn&quot;, the escaped
                  value returned by this method is &quot;Sue\, Grabbit and Runn&quot;.
                  &lt;p&gt;
                  A string value is represented as a String and binary value
                  as a byte array.                
                <param>
                    val The non-null object to be escaped.                    
                </param>
                <return>
                    Escaped string value.                    
                </return>
                <throws>
                    ClassCastException if val is is not a String or byte array.                    
                </throws>
            </javadoc>
            <method name="escapeValue" type="String" line="518">
                <params>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <declaration name="escapees" type="String" line="531"/>
            <method name="escapeStringValue" type="String" line="533">
                <params>
                    <param name="val" type="String"/>
                </params>
                <comment line="539">
                    Find leading and trailing whitespace.                    
                </comment>
                <comment line="540">
                    index of first char that is not leading whitespace                    
                </comment>
                <comment line="546">
                    index of last char that is not trailing whitespace                    
                </comment>
                <declaration name="chars" type="char[]" line="535"/>
                <declaration name="builder" type="StringBuilder" line="536"/>
                <declaration name="lead" type="int" line="539"/>
                <scope line="540">
                    <scope line="541"/>
                </scope>
                <declaration name="trail" type="int" line="545"/>
                <scope line="546">
                    <scope line="547"/>
                </scope>
                <scope line="552">
                    <declaration name="c" type="char" line="553"/>
                    <scope line="554"/>
                </scope>
            </method>
            <method name="escapeBinaryValue" type="String" line="568">
                <params>
                    <param name="val" type="byte[]"/>
                </params>
                <comment line="580">
                    return builder.toString().toUpperCase();                    
                </comment>
                <declaration name="builder" type="StringBuilder" line="570"/>
                <scope line="573">
                    <declaration name="b" type="byte" line="574"/>
                </scope>
            </method>
            <javadoc line="582">
                Given an attribute value string formated according to the rules
                  specified in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;,
                  returns the unformated value.  Escapes and quotes are
                  stripped away, and hex-encoded UTF-8 is converted to equivalent
                  UTF-16 characters. Returns a string value as a String, and a
                  binary value as a byte array.
                  &lt;p&gt;
                  Legal and illegal values are defined in RFC 2253.
                  This method is generous in accepting the values and does not
                  catch all illegal values.
                  Therefore, passing in an illegal value might not necessarily
                  trigger an &lt;tt&gt;IllegalArgumentException&lt;/tt&gt;.                
                <param>
                    val     The non-null string to be unescaped.                    
                </param>
                <return>
                    Unescaped value.                    
                </return>
                <throws>
                    IllegalArgumentException When an Illegal value
                      is provided.                    
                </throws>
            </javadoc>
            <method name="unescapeValue" type="Object" line="602">
                <params>
                    <param name="val" type="String"/>
                </params>
                <comment line="609">
                    Trim off leading and trailing whitespace.                    
                </comment>
                <comment line="618">
                    Add back the trailing whitespace with a preceeding &apos;\&apos;
                     (escaped or unescaped) that was taken off in the above
                     loop. Whether or not to retain this whitespace is decided below.                    
                </comment>
                <comment line="631">
                    Value is binary (eg: &quot;#CEB1DF80&quot;).                    
                </comment>
                <comment line="635">
                    Trim off quotes.                    
                </comment>
                <comment line="642">
                    index of the last escaped character                    
                </comment>
                <comment line="647">
                    skip backslash                    
                </comment>
                <comment line="648">
                    snarf escaped char                    
                </comment>
                <comment line="652">
                    Convert hex-encoded UTF-8 to 16-bit chars.                    
                </comment>
                <comment line="658">
                    shouldn&apos;t happen                    
                </comment>
                <comment line="661">
                    no utf8 bytes available, invalid DN                    
                </comment>
                <comment line="663">
                    &apos;/&apos; has no meaning, throw exception                    
                </comment>
                <comment line="670">
                    snarf unescaped char                    
                </comment>
                <comment line="674">
                    Get rid of the unescaped trailing whitespace with the
                     preceeding &apos;\&apos; character that was previously added back.                    
                </comment>
                <declaration name="chars" type="char[]" line="604"/>
                <declaration name="beg" type="int" line="605"/>
                <declaration name="end" type="int" line="606"/>
                <scope line="609"/>
                <scope line="613"/>
                <scope line="622"/>
                <scope line="625"/>
                <scope line="629"/>
                <scope line="635"/>
                <declaration name="builder" type="StringBuilder" line="640"/>
                <declaration name="esc" type="int" line="641"/>
                <scope line="643">
                    <scope line="644">
                        <scope line="645"/>
                        <scope line="649">
                            <declaration name="utf8" type="byte[]" line="652"/>
                            <scope line="653">
                                <scope line="654"/>
                                <scope line="656"/>
                            </scope>
                            <scope line="660"/>
                        </scope>
                    </scope>
                    <scope line="668"/>
                </scope>
                <declaration name="len" type="int" line="675"/>
                <scope line="676"/>
            </method>
            <method name="decodeHexPairs" type="byte[]" line="688">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <declaration name="bytes" type="byte[]" line="689"/>
                <scope line="690">
                    <declaration name="hi" type="int" line="691"/>
                    <declaration name="lo" type="int" line="692"/>
                    <scope line="693"/>
                </scope>
                <scope line="699"/>
            </method>
            <method name="getUtf8Octets" type="byte[]" line="714">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="716">
                    allow enough room                    
                </comment>
                <comment line="717">
                    index of first unused byte in utf8                    
                </comment>
                <declaration name="utf8" type="byte[]" line="715"/>
                <declaration name="len" type="int" line="716"/>
                <scope line="719">
                    <declaration name="hi" type="int" line="720"/>
                    <declaration name="lo" type="int" line="721"/>
                    <scope line="722"/>
                </scope>
                <scope line="727"/>
                <scope line="729">
                    <declaration name="res" type="byte[]" line="730"/>
                </scope>
            </method>
            <method name="isWhitespace" type="boolean" line="739">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="743">
                Serializes only the unparsed RDN, for compactness and to avoid
                  any implementation dependency.                
                <serialData>
                    The RDN string                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="750">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="756">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="764">
                    shouldn&apos;t happen                    
                </comment>
                <declaration name="unparsed" type="String" line="759"/>
                <scope line="760"/>
                <scope line="762"/>
            </method>
        </class>
    </source>