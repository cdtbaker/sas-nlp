<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="java.util.Iterator"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="javax.naming.ConfigurationException"/>
        <import package="javax.naming.NamingException"/>
        <import package="com.sun.naming.internal.VersionHelper"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.util.ServiceConfigurationError"/>
        <class name="StartTlsRequest" line="10">
            <implements interface="ExtendedRequest"/>
            <javadoc line="10">
                This class implements the LDAPv3 Extended Request for StartTLS as
                  defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2830.txt&quot;&gt;Lightweight Directory
                  Access Protocol (v3): Extension for Transport Layer Security&lt;/a&gt;
                  The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
                  and no extended request value is defined.
                  &lt;p&gt;
                  &lt;tt&gt;StartTlsRequest&lt;/tt&gt;/&lt;tt&gt;StartTlsResponse&lt;/tt&gt; are used to establish
                  a TLS connection over the existing LDAP connection associated with
                  the JNDI context on which &lt;tt&gt;extendedOperation()&lt;/tt&gt; is invoked.
                  Typically, a JNDI program uses these classes as follows.
                  &lt;blockquote&gt;&lt;pre&gt;
                  import javax.naming.ldap.;
                  // Open an LDAP association
                  LdapContext ctx = new InitialLdapContext();
                  // Perform a StartTLS extended operation
                  StartTlsResponse tls =
                  (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());
                  // Open a TLS connection (over the existing LDAP association) and get details
                  // of the negotiated TLS session: cipher suite, peer certificate, etc.
                  SSLSession session = tls.negotiate();
                  // ... use ctx to perform protected LDAP operations
                  // Close the TLS connection (revert back to the underlying LDAP association)
                  tls.close();
                  // ... use ctx to perform unprotected LDAP operations
                  // Close the LDAP association
                  ctx.close;
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <since>
                    1.4                    
                </since>
                <see>
                    StartTlsResponse                    
                </see>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="OID" type="String" line="44"/>
            <javadoc line="44">
                The StartTLS extended request&apos;s assigned object identifier
                  is 1.3.6.1.4.1.1466.20037.                
            </javadoc>
            <javadoc line="49">
                Constructs a StartTLS extended request.                
            </javadoc>
            <method name="StartTlsRequest" type="constructor" line="52"/>
            <javadoc line="54">
                Retrieves the StartTLS request&apos;s object identifier string.                
                <return>
                    The object identifier string, &quot;1.3.6.1.4.1.1466.20037&quot;.                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="58"/>
            <javadoc line="61">
                Retrieves the StartTLS request&apos;s ASN.1 BER encoded value.
                  Since the request has no defined value, null is always
                  returned.                
                <return>
                    The null value.                    
                </return>
            </javadoc>
            <method name="getEncodedValue" type="byte[]" line="67"/>
            <javadoc line="70">
                Creates an extended response object that corresponds to the
                  LDAP StartTLS extended request.
                  &lt;p&gt;
                  The result must be a concrete subclass of StartTlsResponse
                  and must have a public zero-argument constructor.
                  &lt;p&gt;
                  This method locates the implementation class by locating
                  configuration files that have the name:
                  &lt;blockquote&gt;&lt;tt&gt;
                  META-INF/services/javax.naming.ldap.StartTlsResponse
                  &lt;/tt&gt;&lt;/blockquote&gt;
                  The configuration files and their corresponding implementation classes must
                  be accessible to the calling thread&apos;s context class loader.
                  &lt;p&gt;
                  Each configuration file should contain a list of fully-qualified class
                  names, one per line.  Space and tab characters surrounding each name, as
                  well as blank lines, are ignored.  The comment character is &lt;tt&gt;&apos;#&apos;&lt;/tt&gt;
                  (&lt;tt&gt;0x23&lt;/tt&gt;); on each line all characters following the first comment
                  character are ignored.  The file must be encoded in UTF-8.
                  &lt;p&gt;
                  This method will return an instance of the first implementation
                  class that it is able to load and instantiate successfully from
                  the list of class names collected from the configuration files.
                  This method uses the calling thread&apos;s context classloader to find the
                  configuration files and to load the implementation class.
                  &lt;p&gt;
                  If no class can be found in this way, this method will use
                  an implementation-specific way to locate an implementation.
                  If none is found, a NamingException is thrown.                
                <param>
                    id         The object identifier of the extended response.
                      Its value must be &quot;1.3.6.1.4.1.1466.20037&quot; or null.
                      Both values are equivalent.                    
                </param>
                <param>
                    berValue   The possibly null ASN.1 BER encoded value of the
                      extended response. This is the raw BER bytes
                      including the tag and length of the response value.
                      It does not include the response OID.
                      Its value is ignored because a Start TLS response
                      is not expected to contain any response value.                    
                </param>
                <param>
                    offset     The starting position in berValue of the bytes to use.
                      Its value is ignored because a Start TLS response
                      is not expected to contain any response value.                    
                </param>
                <param>
                    length     The number of bytes in berValue to use.
                      Its value is ignored because a Start TLS response
                      is not expected to contain any response value.                    
                </param>
                <return>
                    The StartTLS extended response object.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered
                      while creating the StartTLS extended response object.                    
                </exception>
            </javadoc>
            <method name="createExtendedResponse" type="ExtendedResponse" line="119">
                <params>
                    <param name="id" type="String"/>
                    <param name="berValue" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="120"/>
                <declaration name="resp" type="StartTlsResponse" line="123"/>
                <declaration name="sl" type="ServiceLoader&amp;lt;StartTlsResponse&amp;gt;" line="124"/>
                <declaration name="iter" type="Iterator&amp;lt;StartTlsResponse&amp;gt;" line="125"/>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132">
                    <declaration name="helper" type="VersionHelper" line="133"/>
                    <declaration name="clas" type="Class" line="134"/>
                </scope>
                <scope line="137"/>
                <scope line="140"/>
                <scope line="143"/>
            </method>
            <method name="wrapException" type="ConfigurationException" line="148">
                <params>
                    <param name="e" type="Exception"/>
                </params>
                <declaration name="ce" type="ConfigurationException" line="149"/>
            </method>
            <method name="getContextClassLoader" type="ClassLoader" line="153">
                <anonymous_class line="154">
                    <method name="run" type="Object" line="155"/>
                </anonymous_class>
            </method>
            <method name="privilegedHasNext" type="boolean" line="161">
                <params>
                    <param name="iter" type="Iterator"/>
                </params>
                <anonymous_class line="162">
                    <method name="run" type="Object" line="163"/>
                </anonymous_class>
                <declaration name="answer" type="Boolean" line="162"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="170"/>
        </class>
    </source>