<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="java.io.IOException"/>
        <import package="com.sun.jndi.ldap.Ber"/>
        <import package="com.sun.jndi.ldap.BerEncoder"/>
        <class name="SortControl" line="5">
            <extends class="BasicControl"/>
            <javadoc line="5">
                Requests that the results of a search operation be sorted by the LDAP server
                  before being returned.
                  The sort criteria are specified using an ordered list of one or more sort
                  keys, with associated sort parameters.
                  Search results are sorted at the LDAP server according to the parameters
                  supplied in the sort control and then returned to the requestor. If sorting
                  is not supported at the server (and the sort control is marked as critical)
                  then the search operation is not performed and an error is returned.
                  &lt;p&gt;
                  The following code sample shows how the class may be used:
                  &lt;pre&gt;
                  // Open an LDAP association
                  LdapContext ctx = new InitialLdapContext();
                  // Activate sorting
                  String sortKey = &quot;cn&quot;;
                  ctx.setRequestControls(new Control[]{
                  new SortControl(sortKey, Control.CRITICAL) });
                  // Perform a search
                  NamingEnumeration results =
                  ctx.search(&quot;&quot;, &quot;(objectclass=)&quot;, new SearchControls());
                  // Iterate over search results
                  while (results != null &amp;&amp; results.hasMore()) {
                  // Display an entry
                  SearchResult entry = (SearchResult)results.next();
                  System.out.println(entry.getName());
                  System.out.println(entry.getAttributes());
                  // Handle the entry&apos;s response controls (if any)
                  if (entry instanceof HasControls) {
                  // ((HasControls)entry).getControls();
                  }
                  }
                  // Examine the sort control response
                  Control[] controls = ctx.getResponseControls();
                  if (controls != null) {
                  for (int i = 0; i &lt; controls.length; i++) {
                  if (controls[i] instanceof SortResponseControl) {
                  SortResponseControl src = (SortResponseControl)controls[i];
                  if (! src.isSorted()) {
                  throw src.getException();
                  }
                  } else {
                  // Handle other response controls (if any)
                  }
                  }
                  }
                  // Close the LDAP association
                  ctx.close();
                  ...
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This class implements the LDAPv3 Request Control for server-side sorting
                  as defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2891.txt&quot;&gt;RFC 2891&lt;/a&gt;.
                  The control&apos;s value has the following ASN.1 definition:
                  &lt;pre&gt;
                  SortKeyList ::= SEQUENCE OF SEQUENCE {
                  attributeType     AttributeDescription,
                  orderingRule  [0] MatchingRuleId OPTIONAL,
                  reverseOrder  [1] BOOLEAN DEFAULT FALSE }
                  &lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
                <see>
                    SortKey                    
                </see>
                <see>
                    SortResponseControl                    
                </see>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="OID" type="String" line="72"/>
            <javadoc line="72">
                The server-side sort control&apos;s assigned object identifier
                  is 1.2.840.113556.1.4.473.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="77"/>
            <javadoc line="78">
                Constructs a control to sort on a single attribute in ascending order.
                  Sorting will be performed using the ordering matching rule defined
                  for use with the specified attribute.                
                <param>
                    sortBy  An attribute ID to sort by.                    
                </param>
                <param>
                    criticality     If true then the server must honor the control
                      and return the search results sorted as
                      requested or refuse to perform the search.
                      If false, then the server need not honor the
                      control.                    
                </param>
                <exception>
                    IOException If an error was encountered while encoding the
                      supplied arguments into a control.                    
                </exception>
            </javadoc>
            <method name="SortControl" type="constructor" line="91">
                <params>
                    <param name="sortBy" type="String"/>
                    <param name="criticality" type="boolean"/>
                </params>
            </method>
            <javadoc line="95">
                Constructs a control to sort on a list of attributes in ascending order.
                  Sorting will be performed using the ordering matching rule defined
                  for use with each of the specified attributes.                
                <param>
                    sortBy  A non-null list of attribute IDs to sort by.
                      The list is in order of highest to lowest sort key
                      precedence.                    
                </param>
                <param>
                    criticality     If true then the server must honor the control
                      and return the search results sorted as
                      requested or refuse to perform the search.
                      If false, then the server need not honor the
                      control.                    
                </param>
                <exception>
                    IOException If an error was encountered while encoding the
                      supplied arguments into a control.                    
                </exception>
            </javadoc>
            <method name="SortControl" type="constructor" line="110">
                <params>
                    <param name="sortBy" type="String[]"/>
                    <param name="criticality" type="boolean"/>
                </params>
                <declaration name="sortKeys" type="SortKey[]" line="112"/>
                <scope line="113"/>
            </method>
            <javadoc line="118">
                Constructs a control to sort on a list of sort keys.
                  Each sort key specifies the sort order and ordering matching rule to use.                
                <param>
                    sortBy      A non-null list of keys to sort by.
                      The list is in order of highest to lowest sort key
                      precedence.                    
                </param>
                <param>
                    criticality     If true then the server must honor the control
                      and return the search results sorted as
                      requested or refuse to perform the search.
                      If false, then the server need not honor the
                      control.                    
                </param>
                <exception>
                    IOException If an error was encountered while encoding the
                      supplied arguments into a control.                    
                </exception>
            </javadoc>
            <method name="SortControl" type="constructor" line="132">
                <params>
                    <param name="sortBy" type="SortKey[]"/>
                    <param name="criticality" type="boolean"/>
                </params>
            </method>
            <method name="setEncodedValue" type="byte[]" line="136">
                <params>
                    <param name="sortKeys" type="SortKey[]"/>
                </params>
                <declaration name="ber" type="BerEncoder" line="137"/>
                <declaration name="matchingRule" type="String" line="138"/>
                <scope line="140">
                    <scope line="143"/>
                    <scope line="146"/>
                </scope>
            </method>
        </class>
    </source>