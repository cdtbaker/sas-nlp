<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="java.io.IOException"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory"/>
        <import package="com.sun.jndi.ldap.Ber"/>
        <import package="com.sun.jndi.ldap.BerDecoder"/>
        <import package="com.sun.jndi.ldap.LdapCtx"/>
        <class name="SortResponseControl" line="8">
            <extends class="BasicControl"/>
            <javadoc line="8">
                Indicates whether the requested sort of search results was successful or not.
                  When the result code indicates success then the results have been sorted as
                  requested. Otherwise the sort was unsuccessful and additional details
                  regarding the cause of the error may have been provided by the server.
                  &lt;p&gt;
                  The code sample in {@link SortControl} shows how this class may be used.
                  &lt;p&gt;
                  This class implements the LDAPv3 Response Control for server-side sorting
                  as defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2891.txt&quot;&gt;RFC 2891&lt;/a&gt;.
                  The control&apos;s value has the following ASN.1 definition:
                  &lt;pre&gt;
                  SortResult ::= SEQUENCE {
                  sortResult  ENUMERATED {
                  success                   (0), -- results are sorted
                  operationsError           (1), -- server internal failure
                  timeLimitExceeded         (3), -- timelimit reached before
                  -- sorting was completed
                  strongAuthRequired        (8), -- refused to return sorted
                  -- results via insecure
                  -- protocol
                  adminLimitExceeded       (11), -- too many matching entries
                  -- for the server to sort
                  noSuchAttribute          (16), -- unrecognized attribute
                  -- type in sort key
                  inappropriateMatching    (18), -- unrecognized or inappro-
                  -- priate matching rule in
                  -- sort key
                  insufficientAccessRights (50), -- refused to return sorted
                  -- results to this client
                  busy                     (51), -- too busy to process
                  unwillingToPerform       (53), -- unable to sort
                  other                    (80)
                  },
                  attributeType [0] AttributeType OPTIONAL }
                  &lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
                <see>
                    SortControl                    
                </see>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="OID" type="String" line="50"/>
            <javadoc line="50">
                The server-side sort response control&apos;s assigned object identifier
                  is 1.2.840.113556.1.4.474.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="resultCode" type="int" line="56"/>
            <javadoc line="56">
                The sort result code.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="badAttrId" type="String" line="61"/>
            <javadoc line="61">
                The ID of the attribute that caused the sort to fail.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="66">
                Constructs a control to indicate the outcome of a sort request.                
                <param>
                    id              The control&apos;s object identifier string.                    
                </param>
                <param>
                    criticality     The control&apos;s criticality.                    
                </param>
                <param>
                    value           The control&apos;s ASN.1 BER encoded value.
                      It is not cloned - any changes to value
                      will affect the contents of the control.                    
                </param>
                <exception>
                    IOException if an error is encountered
                      while decoding the control&apos;s value.                    
                </exception>
            </javadoc>
            <method name="SortResponseControl" type="constructor" line="76">
                <params>
                    <param name="id" type="String"/>
                    <param name="criticality" type="boolean"/>
                    <param name="value" type="byte[]"/>
                </params>
                <declaration name="ber" type="BerDecoder" line="78"/>
                <scope line="81"/>
            </method>
            <javadoc line="85">
                Determines if the search results have been successfully sorted.
                  If an error occurred during sorting a NamingException is thrown.                
                <return>
                    true if the search results have been sorted.                    
                </return>
            </javadoc>
            <method name="isSorted" type="boolean" line="90"/>
            <javadoc line="93">
                Retrieves the LDAP result code of the sort operation.                
                <return>
                    The result code. A zero value indicates success.                    
                </return>
            </javadoc>
            <method name="getResultCode" type="int" line="97"/>
            <javadoc line="100">
                Retrieves the ID of the attribute that caused the sort to fail.
                  Returns null if no ID was returned by the server.                
                <return>
                    The possibly null ID of the bad attribute.                    
                </return>
            </javadoc>
            <method name="getAttributeID" type="String" line="105"/>
            <javadoc line="108">
                Retrieves the NamingException appropriate for the result code.                
                <return>
                    A NamingException or null if the result code indicates
                      success.                    
                </return>
            </javadoc>
            <method name="getException" type="NamingException" line="113"/>
        </class>
    </source>