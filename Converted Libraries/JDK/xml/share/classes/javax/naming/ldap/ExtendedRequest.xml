<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="javax.naming.NamingException"/>
        <interface name="ExtendedRequest">
            <implements interface="java.io.Serializable"/>
            <comment line="148">
                static final long serialVersionUID = -7560110759229059814L;                
            </comment>
            <javadoc line="30">
                This interface represents an LDAPv3 extended operation request as defined in
                  &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2251.txt&quot;&gt;RFC 2251&lt;/A&gt;.
                  &lt;pre&gt;
                  ExtendedRequest ::= [APPLICATION 23] SEQUENCE {
                  requestName      [0] LDAPOID,
                  requestValue     [1] OCTET STRING OPTIONAL }
                  &lt;/pre&gt;
                  It comprises an object identifier string and an optional ASN.1 BER
                  encoded value.
                  &lt;p&gt;
                  The methods in this class are used by the service provider to construct
                  the bits to send to the LDAP server. Applications typically only deal with
                  the classes that implement this interface, supplying them with
                  any information required for a particular extended operation request.
                  It would then pass such a class as an argument to the
                  &lt;tt&gt;LdapContext.extendedOperation()&lt;/tt&gt; method for performing the
                  LDAPv3 extended operation.
                  &lt;p&gt;
                  For example, suppose the LDAP server supported a &apos;get time&apos; extended operation.
                  It would supply GetTimeRequest and GetTimeResponse classes:
                  &lt;blockquote&gt;&lt;pre&gt;
                  public class GetTimeRequest implements ExtendedRequest {
                  public GetTimeRequest() {... };
                  public ExtendedResponse createExtendedResponse(String id,
                  byte[] berValue, int offset, int length)
                  throws NamingException {
                  return new GetTimeResponse(id, berValue, offset, length);
                  }
                  ...
                  }
                  public class GetTimeResponse implements ExtendedResponse {
                  long time;
                  public GetTimeResponse(String id, byte[] berValue, int offset,
                  int length) throws NamingException {
                  time =      ... // decode berValue to get time
                  }
                  public java.util.Date getDate() { return new java.util.Date(time) };
                  public long getTime() { return time };
                  ...
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  A program would use then these classes as follows:
                  &lt;blockquote&gt;&lt;pre&gt;
                  GetTimeResponse resp =
                  (GetTimeResponse) ectx.extendedOperation(new GetTimeRequest());
                  long time = resp.getTime();
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
                <see>
                    ExtendedResponse                    
                </see>
                <see>
                    LdapContext#extendedOperation                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getID" type="String" line="89"/>
            <javadoc line="89">
                Retrieves the object identifier of the request.                
                <return>
                    The non-null object identifier string representing the LDAP
                      &lt;tt&gt;ExtendedRequest.requestName&lt;/tt&gt; component.                    
                </return>
            </javadoc>
            <method name="getEncodedValue" type="byte[]" line="97"/>
            <javadoc line="97">
                Retrieves the ASN.1 BER encoded value of the LDAP extended operation
                  request. Null is returned if the value is absent.
                  The result is the raw BER bytes including the tag and length of
                  the request value. It does not include the request OID.
                  This method is called by the service provider to get the bits to
                  put into the extended operation to be sent to the LDAP server.                
                <return>
                    A possibly null byte array representing the ASN.1 BER encoded
                      contents of the LDAP &lt;tt&gt;ExtendedRequest.requestValue&lt;/tt&gt;
                      component.                    
                </return>
                <exception>
                    IllegalStateException If the encoded value cannot be retrieved
                      because the request contains insufficient or invalid data/state.                    
                </exception>
            </javadoc>
            <method name="createExtendedResponse" type="ExtendedResponse" line="114"/>
            <javadoc line="114">
                Creates the response object that corresponds to this request.
                  &lt;p&gt;
                  After the service provider has sent the extended operation request
                  to the LDAP server, it will receive a response from the server.
                  If the operation failed, the provider will throw a NamingException.
                  If the operation succeeded, the provider will invoke this method
                  using the data that it got back in the response.
                  It is the job of this method to return a class that implements
                  the ExtendedResponse interface that is appropriate for the
                  extended operation request.
                  &lt;p&gt;
                  For example, a Start TLS extended request class would need to know
                  how to process a Start TLS extended response. It does this by creating
                  a class that implements ExtendedResponse.                
                <param>
                    id       The possibly null object identifier of the response
                      control.                    
                </param>
                <param>
                    berValue The possibly null ASN.1 BER encoded value of the
                      response control.
                      This is the raw BER bytes including the tag and length of
                      the response value. It does not include the response OID.                    
                </param>
                <param>
                    offset   The starting position in berValue of the bytes to use.                    
                </param>
                <param>
                    length   The number of bytes in berValue to use.                    
                </param>
                <return>
                    A non-null object.                    
                </return>
                <exception>
                    NamingException if cannot create extended response
                      due to an error.                    
                </exception>
                <see>
                    ExtendedResponse                    
                </see>
            </javadoc>
        </interface>
    </source>