<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="java.io.IOException"/>
        <import package="javax.net.ssl.SSLSession"/>
        <import package="javax.net.ssl.SSLSocketFactory"/>
        <import package="javax.net.ssl.HostnameVerifier"/>
        <class name="StartTlsResponse" line="33">
            <comment line="80">
                Constant                
            </comment>
            <comment line="89">
                Called by subclass                
            </comment>
            <comment line="99">
                ExtendedResponse methods                
            </comment>
            <comment line="121">
                StartTls-specific methods                
            </comment>
            <implements interface="ExtendedResponse"/>
            <javadoc line="33">
                This class implements the LDAPv3 Extended Response for StartTLS as
                  defined in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2830.txt&quot;&gt;Lightweight Directory
                  Access Protocol (v3): Extension for Transport Layer Security&lt;/a&gt;
                  The object identifier for StartTLS is 1.3.6.1.4.1.1466.20037
                  and no extended response value is defined.
                  &lt;p&gt;
                  The Start TLS extended request and response are used to establish
                  a TLS connection over the existing LDAP connection associated with
                  the JNDI context on which &lt;tt&gt;extendedOperation()&lt;/tt&gt; is invoked.
                  Typically, a JNDI program uses the StartTLS extended request and response
                  classes as follows.
                  &lt;blockquote&gt;&lt;pre&gt;
                  import javax.naming.ldap.;
                  // Open an LDAP association
                  LdapContext ctx = new InitialLdapContext();
                  // Perform a StartTLS extended operation
                  StartTlsResponse tls =
                  (StartTlsResponse) ctx.extendedOperation(new StartTlsRequest());
                  // Open a TLS connection (over the existing LDAP association) and get details
                  // of the negotiated TLS session: cipher suite, peer certificate, ...
                  SSLSession session = tls.negotiate();
                  // ... use ctx to perform protected LDAP operations
                  // Close the TLS connection (revert back to the underlying LDAP association)
                  tls.close();
                  // ... use ctx to perform unprotected LDAP operations
                  // Close the LDAP association
                  ctx.close;
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <since>
                    1.4                    
                </since>
                <see>
                    StartTlsRequest                    
                </see>
                <author>
                    Vincent Ryan                    
                </author>
            </javadoc>
            <declaration name="OID" type="String" line="81"/>
            <javadoc line="81">
                The StartTLS extended response&apos;s assigned object identifier
                  is 1.3.6.1.4.1.1466.20037.                
            </javadoc>
            <javadoc line="90">
                Constructs a StartTLS extended response.
                  A concrete subclass must have a public no-arg constructor.                
            </javadoc>
            <method name="StartTlsResponse" type="constructor" line="94"/>
            <javadoc line="100">
                Retrieves the StartTLS response&apos;s object identifier string.                
                <return>
                    The object identifier string, "1.3.6.1.4.1.1466.20037".                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="105"/>
            <javadoc line="109">
                Retrieves the StartTLS response&apos;s ASN.1 BER encoded value.
                  Since the response has no defined value, null is always
                  returned.                
                <return>
                    The null value.                    
                </return>
            </javadoc>
            <method name="getEncodedValue" type="byte[]" line="116"/>
            <method name="setEnabledCipherSuites" type="void" line="122"/>
            <javadoc line="122">
                Overrides the default list of cipher suites enabled for use on the
                  TLS connection. The cipher suites must have already been listed by
                  &lt;tt&gt;SSLSocketFactory.getSupportedCipherSuites()&lt;/tt&gt; as being supported.
                  Even if a suite has been enabled, it still might not be used because
                  the peer does not support it, or because the requisite certificates
                  (and private keys) are not available.                
                <param>
                    suites The non-null list of names of all the cipher suites to
                      enable.                    
                </param>
                <see>
                    #negotiate                    
                </see>
            </javadoc>
            <method name="setHostnameVerifier" type="void" line="136"/>
            <javadoc line="136">
                Sets the hostname verifier used by &lt;tt&gt;negotiate()&lt;/tt&gt;
                  after the TLS handshake has completed and the default hostname
                  verification has failed.
                  &lt;tt&gt;setHostnameVerifier()&lt;/tt&gt; must be called before
                  &lt;tt&gt;negotiate()&lt;/tt&gt; is invoked for it to have effect.
                  If called after
                  &lt;tt&gt;negotiate()&lt;/tt&gt;, this method does not do anything.                
                <param>
                    verifier The non-null hostname verifier callback.                    
                </param>
                <see>
                    #negotiate                    
                </see>
            </javadoc>
            <method name="negotiate" type="SSLSession" line="150"/>
            <javadoc line="150">
                Negotiates a TLS session using the default SSL socket factory.
                  &lt;p&gt;
                  This method is equivalent to &lt;tt&gt;negotiate(null)&lt;/tt&gt;.                
                <return>
                    The negotiated SSL session                    
                </return>
                <throws>
                    IOException If an IO error was encountered while establishing
                      the TLS session.                    
                </throws>
                <see>
                    #setEnabledCipherSuites                    
                </see>
                <see>
                    #setHostnameVerifier                    
                </see>
            </javadoc>
            <method name="negotiate" type="SSLSession" line="163"/>
            <javadoc line="163">
                Negotiates a TLS session using an SSL socket factory.
                  &lt;p&gt;
                  Creates an SSL socket using the supplied SSL socket factory and
                  attaches it to the existing connection. Performs the TLS handshake
                  and returns the negotiated session information.
                  &lt;p&gt;
                  If cipher suites have been set via &lt;tt&gt;setEnabledCipherSuites&lt;/tt&gt;
                  then they are enabled before the TLS handshake begins.
                  &lt;p&gt;
                  Hostname verification is performed after the TLS handshake completes.
                  The default hostname verification performs a match of the server&apos;s
                  hostname against the hostname information found in the server&apos;s certificate.
                  If this verification fails and no callback has been set via
                  &lt;tt&gt;setHostnameVerifier&lt;/tt&gt; then the negotiation fails.
                  If this verification fails and a callback has been set via
                  &lt;tt&gt;setHostnameVerifier&lt;/tt&gt;, then the callback is used to determine whether
                  the negotiation succeeds.
                  &lt;p&gt;
                  If an error occurs then the SSL socket is closed and an IOException
                  is thrown. The underlying connection remains intact.                
                <param>
                    factory The possibly null SSL socket factory to use.
                      If null, the default SSL socket factory is used.                    
                </param>
                <return>
                    The negotiated SSL session                    
                </return>
                <throws>
                    IOException If an IO error was encountered while establishing
                      the TLS session.                    
                </throws>
                <see>
                    #setEnabledCipherSuites                    
                </see>
                <see>
                    #setHostnameVerifier                    
                </see>
            </javadoc>
            <method name="close" type="void" line="196"/>
            <javadoc line="196">
                Closes the TLS connection gracefully and reverts back to the underlying
                  connection.                
                <throws>
                    IOException If an IO error was encountered while closing the
                      TLS connection                    
                </throws>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="205"/>
        </class>
    </source>