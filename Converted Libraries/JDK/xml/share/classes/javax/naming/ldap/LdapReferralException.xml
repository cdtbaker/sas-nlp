<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="javax.naming.ReferralException"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.NamingException"/>
        <import package="java.util.Hashtable"/>
        <class name="LdapReferralException" line="33">
            <extends class="ReferralException"/>
            <javadoc line="33">
                This abstract class is used to represent an LDAP referral exception.
                  It extends the base &lt;tt&gt;ReferralException&lt;/tt&gt; by providing a
                  &lt;tt&gt;getReferralContext()&lt;/tt&gt; method that accepts request controls.
                  LdapReferralException is an abstract class. Concrete implementations of it
                  determine its synchronization and serialization properties.
                  &lt;p&gt;
                  A &lt;tt&gt;Control[]&lt;/tt&gt; array passed as a parameter to
                  the &lt;tt&gt;getReferralContext()&lt;/tt&gt; method is owned by the caller.
                  The service provider will not modify the array or keep a reference to it,
                  although it may keep references to the individual &lt;tt&gt;Control&lt;/tt&gt; objects
                  in the array.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <author>
                    Vincent Ryan                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="53">
                Constructs a new instance of LdapReferralException using the
                  explanation supplied. All other fields are set to null.                
                <param>
                    explanation     Additional detail about this exception. Can be null.                    
                </param>
                <see>
                    java.lang.Throwable#getMessage                    
                </see>
            </javadoc>
            <method name="LdapReferralException" type="constructor" line="60">
                <params>
                    <param name="explanation" type="String"/>
                </params>
            </method>
            <javadoc line="64">
                Constructs a new instance of LdapReferralException.
                  All fields are set to null.                
            </javadoc>
            <method name="LdapReferralException" type="constructor" line="68"/>
            <method name="getReferralContext" type="Context" line="72"/>
            <javadoc line="72">
                Retrieves the context at which to continue the method using the
                  context&apos;s environment and no controls.
                  The referral context is created using the environment properties of
                  the context that threw the &lt;tt&gt;ReferralException&lt;/tt&gt; and no controls.
                  &lt;p&gt;
                  This method is equivalent to
                  &lt;blockquote&gt;&lt;pre&gt;
                  getReferralContext(ctx.getEnvironment(), null);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  where &lt;tt&gt;ctx&lt;/tt&gt; is the context that threw the &lt;tt&gt;ReferralException.&lt;/tt&gt;
                  &lt;p&gt;
                  It is overridden in this class for documentation purposes only.
                  See &lt;tt&gt;ReferralException&lt;/tt&gt; for how to use this method.                
                <return>
                    The non-null context at which to continue the method.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered.
                      Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
                      to continue processing referrals.                    
                </exception>
            </javadoc>
            <method name="getReferralContext" type="Context" line="94"/>
            <javadoc line="94">
                Retrieves the context at which to continue the method using
                  environment properties and no controls.
                  The referral context is created using &lt;tt&gt;env&lt;/tt&gt; as its environment
                  properties and no controls.
                  &lt;p&gt;
                  This method is equivalent to
                  &lt;blockquote&gt;&lt;pre&gt;
                  getReferralContext(env, null);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  &lt;p&gt;
                  It is overridden in this class for documentation purposes only.
                  See &lt;tt&gt;ReferralException&lt;/tt&gt; for how to use this method.                
                <param>
                    env The possibly null environment to use when retrieving the
                      referral context. If null, no environment properties will be used.                    
                </param>
                <return>
                    The non-null context at which to continue the method.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered.
                      Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
                      to continue processing referrals.                    
                </exception>
            </javadoc>
            <method name="getReferralContext" type="Context" line="120"/>
            <javadoc line="120">
                Retrieves the context at which to continue the method using
                  request controls and environment properties.
                  Regardless of whether a referral is encountered directly during a
                  context operation, or indirectly, for example, during a search
                  enumeration, the referral exception should provide a context
                  at which to continue the operation.
                  To continue the operation, the client program should re-invoke
                  the method using the same arguments as the original invocation.
                  &lt;p&gt;
                  &lt;tt&gt;reqCtls&lt;/tt&gt; is used when creating the connection to the referred
                  server. These controls will be used as the connection request controls for
                  the context and context instances
                  derived from the context.
                  &lt;tt&gt;reqCtls&lt;/tt&gt; will also be the context&apos;s request controls for
                  subsequent context operations. See the &lt;tt&gt;LdapContext&lt;/tt&gt; class
                  description for details.
                  &lt;p&gt;
                  This method should be used instead of the other two overloaded forms
                  when the caller needs to supply request controls for creating
                  the referral context. It might need to do this, for example, when
                  it needs to supply special controls relating to authentication.
                  &lt;p&gt;
                  Service provider implementors should read the &quot;Service Provider&quot; section
                  in the &lt;tt&gt;LdapContext&lt;/tt&gt; class description for implementation details.                
                <param>
                    reqCtls The possibly null request controls to use for the new context.
                      If null or the empty array means use no request controls.                    
                </param>
                <param>
                    env The possibly null environment properties to use when
                      for the new context. If null, the context is initialized with no environment
                      properties.                    
                </param>
                <return>
                    The non-null context at which to continue the method.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered.
                      Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
                      to continue processing referrals.                    
                </exception>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="161"/>
        </class>
    </source>