<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="javax.naming.InvalidNameException"/>
        <class name="Rfc2253Parser" line="36">
            <comment line="39">
                DN being parsed                
            </comment>
            <comment line="40">
                characters in LDAP name being parsed                
            </comment>
            <comment line="41">
                length of &quot;chars&quot;                
            </comment>
            <comment line="42">
                index of first unconsumed char in &quot;chars&quot;                
            </comment>
            <comment line="44">
                Given an LDAP DN in string form, returns a parser for it.                
            </comment>
            <comment line="53">
                Parses the DN, returning a List of its RDNs.                
            </comment>
            <comment line="56">
                public List&lt;Rdn&gt; getDN() throws InvalidNameException {                
            </comment>
            <comment line="83">
                Parses the DN, if it is known to contain a single RDN.                
            </comment>
            <comment line="90">
                Parses the DN, if it is known to contain a single RDN.                
            </comment>
            <comment line="101">
                Parses the next RDN and returns it.  Throws an exception if
                 none is found.  Leading and trailing whitespace is consumed.                
            </comment>
            <comment line="129">
                Returns the attribute type that begins at the next unconsumed
                 char.  No leading whitespace is expected.
                 This routine is more generous than RFC 2253.  It accepts
                 attribute types composed of any nonempty combination of Unicode
                 letters, Unicode digits, &apos;.&apos;, &apos;-&apos;, and internal space characters.                
            </comment>
            <comment line="161">
                Returns the attribute value that begins at the next unconsumed
                 char.  No leading whitespace is expected.                
            </comment>
            <comment line="237">
                Returns true if next unconsumed character is one that terminates
                 a string attribute value.                
            </comment>
            <comment line="248">
                Best guess as to what RFC 2253 means by &quot;whitespace&quot;.                
            </comment>
            <declaration name="name" type="String" line="38"/>
            <declaration name="chars" type="char[]" line="39"/>
            <declaration name="len" type="int" line="40"/>
            <declaration name="cur" type="int" line="41"/>
            <method name="Rfc2253Parser" type="constructor" line="46">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="parseDn" type="List" line="57">
                <comment line="61">
                    ArrayList&lt;Rdn&gt; rdns =
                      new ArrayList&lt;Rdn&gt;(len / 3 + 10);   leave room for growth                    
                </comment>
                <comment line="65">
                    leave room for growth                    
                </comment>
                <declaration name="rdns" type="ArrayList" line="63"/>
                <scope line="66"/>
                <scope line="71">
                    <scope line="72"/>
                    <scope line="75"/>
                </scope>
            </method>
            <method name="parseRdn" type="Rdn" line="85"/>
            <method name="parseRdn" type="Rdn" line="92">
                <params>
                    <param name="rdn" type="Rdn"/>
                </params>
                <scope line="94"/>
            </method>
            <method name="doParse" type="Rdn" line="104">
                <params>
                    <param name="rdn" type="Rdn"/>
                </params>
                <comment line="114">
                    consume &apos;=&apos;                    
                </comment>
                <comment line="123">
                    consume &apos;+&apos;                    
                </comment>
                <scope line="106">
                    <declaration name="attrType" type="String" line="108"/>
                    <scope line="110"/>
                    <declaration name="value" type="String" line="115"/>
                    <scope line="119"/>
                </scope>
            </method>
            <method name="parseAttrType" type="String" line="135">
                <comment line="150">
                    Back out any trailing spaces.                    
                </comment>
                <declaration name="beg" type="int" line="137"/>
                <scope line="138">
                    <declaration name="c" type="char" line="139"/>
                    <scope line="143"/>
                    <scope line="145"/>
                </scope>
                <scope line="150"/>
                <scope line="154"/>
            </method>
            <method name="parseAttrValue" type="String" line="164">
                <scope line="166"/>
                <scope line="168"/>
                <scope line="170"/>
            </method>
            <method name="parseBinaryAttrValue" type="String" line="175">
                <comment line="178">
                    consume &apos;#&apos;                    
                </comment>
                <declaration name="beg" type="int" line="176"/>
                <scope line="179"/>
            </method>
            <method name="parseQuotedAttrValue" type="String" line="185">
                <comment line="189">
                    consume &apos;&quot;&apos;                    
                </comment>
                <comment line="193">
                    consume backslash, then what follows                    
                </comment>
                <comment line="197">
                    no closing quote                    
                </comment>
                <comment line="200">
                    consume closing quote                    
                </comment>
                <declaration name="beg" type="int" line="187"/>
                <scope line="190">
                    <scope line="191"/>
                </scope>
                <scope line="196"/>
            </method>
            <method name="parseStringAttrValue" type="String" line="204">
                <comment line="208">
                    index of the most recently escaped character                    
                </comment>
                <comment line="212">
                    consume backslash, then what follows                    
                </comment>
                <comment line="217">
                    &apos;twas backslash followed by nothing                    
                </comment>
                <comment line="221">
                    Trim off (unescaped) trailing whitespace.                    
                </comment>
                <declaration name="beg" type="int" line="206"/>
                <declaration name="esc" type="int" line="207"/>
                <scope line="209">
                    <scope line="210"/>
                </scope>
                <scope line="216"/>
                <declaration name="end" type="int" line="221"/>
                <scope line="222">
                    <scope line="223"/>
                </scope>
            </method>
            <method name="consumeWhitespace" type="void" line="230">
                <scope line="231"/>
            </method>
            <method name="atTerminator" type="boolean" line="240"/>
            <method name="isWhitespace" type="boolean" line="250">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
        </class>
    </source>