<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.ldap">
        <import package="javax.naming.Name"/>
        <import package="javax.naming.InvalidNameException"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Collection"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ListIterator"/>
        <import package="java.util.Collections"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="LdapName" line="43">
            <comment line="108">
                private transient ArrayList&lt;Rdn&gt; rdns;   // parsed name components                
            </comment>
            <comment line="110">
                parsed name components                
            </comment>
            <comment line="111">
                if non-null, the DN in unparsed form                
            </comment>
            <comment line="159">
                Constructs an LDAP name given its parsed components (the elements
                 of &quot;rdns&quot; in the range [beg,end)) and, optionally
                 (if &quot;name&quot; is not null), the unparsed DN.                
            </comment>
            <comment line="165">
                private LdapName(String name, List&lt;Rdn&gt; rdns, int beg, int end) {                
            </comment>
            <comment line="383">
                Helper method for startsWith() and endsWith().
                 Returns true if components [beg,end) match the components of &quot;n&quot;.
                 If &quot;n&quot; is not an LdapName, each of its components is parsed as
                 the string form of an RDN.
                 The following must hold:  end - beg == n.size().                
            </comment>
            <implements interface="Name"/>
            <javadoc line="43">
                This class represents a distinguished name as specified by
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;.
                  A distinguished name, or DN, is composed of an ordered list of
                  components called &lt;em&gt;relative distinguished name&lt;/em&gt;s, or RDNs.
                  Details of a DN&apos;s syntax are described in RFC 2253.
                  &lt;p&gt;
                  This class resolves a few ambiguities found in RFC 2253
                  as follows:
                  &lt;ul&gt;
                  &lt;li&gt; RFC 2253 leaves the term &quot;whitespace&quot; undefined. The
                  ASCII space character 0x20 (&quot; &quot;) is used in its place.
                  &lt;li&gt; Whitespace is allowed on either side of &apos;,&apos;, &apos;;&apos;, &apos;=&apos;, and &apos;+&apos;.
                  Such whitespace is accepted but not generated by this code,
                  and is ignored when comparing names.
                  &lt;li&gt; AttributeValue strings containing &apos;=&apos; or non-leading &apos;#&apos;
                  characters (unescaped) are accepted.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  String names passed to &lt;code&gt;LdapName&lt;/code&gt; or returned by it
                  use the full Unicode character set. They may also contain
                  characters encoded into UTF-8 with each octet represented by a
                  three-character substring such as &quot;\\B4&quot;.
                  They may not, however, contain characters encoded into UTF-8 with
                  each octet represented by a single character in the string:  the
                  meaning would be ambiguous.
                  &lt;p&gt;
                  &lt;code&gt;LdapName&lt;/code&gt; will properly parse all valid names, but
                  does not attempt to detect all possible violations when parsing
                  invalid names.  It is &quot;generous&quot; in accepting invalid names.
                  The &quot;validity&quot; of a name is determined ultimately when it
                  is supplied to an LDAP server, which may accept or
                  reject the name based on factors such as its schema information
                  and interoperability considerations.
                  &lt;p&gt;
                  When names are tested for equality, attribute types, both binary
                  and string values, are case-insensitive.
                  String values with different but equivalent usage of quoting,
                  escaping, or UTF8-hex-encoding are considered equal.  The order of
                  components in multi-valued RDNs (such as &quot;ou=Sales+cn=Bob&quot;) is not
                  significant.
                  &lt;p&gt;
                  The components of a LDAP name, that is, RDNs, are numbered. The
                  indexes of a LDAP name with n RDNs range from 0 to n-1.
                  This range may be written as [0,n).
                  The right most RDN is at index 0, and the left most RDN is at
                  index n-1. For example, the distinguished name:
                  &quot;CN=Steve Kille, O=Isode Limited, C=GB&quot; is numbered in the following
                  sequence ranging from 0 to 2: {C=GB, O=Isode Limited, CN=Steve Kille}. An
                  empty LDAP name is represented by an empty RDN list.
                  &lt;p&gt;
                  Concurrent multithreaded read-only access of an instance of
                  &lt;tt&gt;LdapName&lt;/tt&gt; need not be synchronized.
                  &lt;p&gt;
                  Unless otherwise noted, the behavior of passing a null argument
                  to a constructor or method in this class will cause a
                  NullPointerException to be thrown.                
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="rdns" type="ArrayList" line="109"/>
            <declaration name="unparsed" type="String" line="110"/>
            <declaration name="serialVersionUID" type="long" line="111"/>
            <javadoc line="113">
                Constructs an LDAP name from the given distinguished name.                
                <param>
                    name  This is a non-null distinguished name formatted
                      according to the rules defined in
                      <a href="http://www.ietf.org/rfc/rfc2253.txt">RFC 2253</a>.                    
                </param>
                <throws>
                    InvalidNameException if a syntax violation is detected.                    
                </throws>
                <see>
                    Rdn#escapeValue(Object value)                    
                </see>
            </javadoc>
            <method name="LdapName" type="constructor" line="123">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="128">
                Constructs an LDAP name given its parsed RDN components.
                  &lt;p&gt;
                  The indexing of RDNs in the list follows the numbering of
                  RDNs described in the class description.                
                <param>
                    rdns The non-null list of <tt>Rdn</tt>s forming this LDAP name.                    
                </param>
            </javadoc>
            <method name="LdapName" type="constructor" line="136">
                <params>
                    <param name="rdns" type="List<Rdn>"/>
                </params>
                <comment line="139">
                    if (rdns instanceof ArrayList&lt;Rdn&gt;) {
                          this.rdns = rdns.clone();
                     } else if (rdns instanceof List&lt;Rdn&gt;) {
                          this.rdns = new ArrayList&lt;Rdn&gt;(rdns);
                     } else {
                          throw IllegalArgumentException(
                                  &quot;Invalid entries, list entries must be of type Rdn&quot;);
                      }                    
                </comment>
                <scope line="148">
                    <declaration name="obj" type="Object" line="149"/>
                    <scope line="150"/>
                </scope>
            </method>
            <method name="LdapName" type="constructor" line="166">
                <params>
                    <param name="name" type="String"/>
                    <param name="rdns" type="ArrayList"/>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <comment line="169">
                    this.rdns = rdns.subList(beg, end);                    
                </comment>
                <declaration name="sList" type="List" line="170"/>
            </method>
            <javadoc line="174">
                Retrieves the number of components in this LDAP name.                
                <return>
                    The non-negative number of components in this LDAP name.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="178"/>
            <javadoc line="182">
                Determines whether this LDAP name is empty.
                  An empty name is one with zero components.                
                <return>
                    true if this LDAP name is empty, false otherwise.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="187"/>
            <javadoc line="191">
                Retrieves the components of this name as an enumeration
                  of strings. The effect of updates to this name on this enumeration
                  is undefined. If the name has zero components, an empty (non-null)
                  enumeration is returned.
                  The order of the components returned by the enumeration is same as
                  the order in which the components are numbered as described in the
                  class description.                
                <return>
                    A non-null enumeration of the components of this LDAP name.
                      Each element of the enumeration is of class String.                    
                </return>
            </javadoc>
            <method name="getAll" type="Enumeration<String>" line="203">
                <declaration name="iter" type="Iterator" line="204"/>
                <anonymous_class line="206">
                    <method name="hasMoreElements" type="boolean" line="207"/>
                    <method name="nextElement" type="String" line="210"/>
                </anonymous_class>
            </method>
            <javadoc line="216">
                Retrieves a component of this LDAP name as a string.                
                <param>
                    posn The 0-based index of the component to retrieve.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    The non-null component at index posn.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if posn is outside the
                      specified range.                    
                </exception>
            </javadoc>
            <method name="get" type="String" line="224">
                <params>
                    <param name="posn" type="int"/>
                </params>
            </method>
            <javadoc line="228">
                Retrieves an RDN of this LDAP name as an Rdn.                
                <param>
                    posn The 0-based index of the RDN to retrieve.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    The non-null RDN at index posn.                    
                </return>
                <exception>
                    IndexOutOfBoundsException if posn is outside the
                      specified range.                    
                </exception>
            </javadoc>
            <method name="getRdn" type="Rdn" line="236">
                <params>
                    <param name="posn" type="int"/>
                </params>
            </method>
            <javadoc line="240">
                Creates a name whose components consist of a prefix of the
                  components of this LDAP name.
                  Subsequent changes to this name will not affect the name
                  that is returned and vice versa.                
                <param>
                    posn     The 0-based index of the component at which to stop.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    An instance of <tt>LdapName</tt> consisting of the
                      components at indexes in the range [0,posn).
                      If posn is zero, an empty LDAP name is returned.                    
                </return>
                <exception>
                    IndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="getPrefix" type="Name" line="253">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <scope line="254"/>
                <scope line="256"/>
            </method>
            <javadoc line="262">
                Creates a name whose components consist of a suffix of the
                  components in this LDAP name.
                  Subsequent changes to this name do not affect the name that is
                  returned and vice versa.                
                <param>
                    posn     The 0-based index of the component at which to start.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    An instance of <tt>LdapName</tt> consisting of the
                      components at indexes in the range [posn,size()).
                      If posn is equal to size(), an empty LDAP name is
                      returned.                    
                </return>
                <exception>
                    IndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="getSuffix" type="Name" line="277">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <scope line="278"/>
                <scope line="280"/>
            </method>
            <javadoc line="286">
                Determines whether this LDAP name starts with a specified LDAP name
                  prefix.
                  A name &lt;tt&gt;n&lt;/tt&gt; is a prefix if it is equal to
                  &lt;tt&gt;getPrefix(n.size())&lt;/tt&gt;--in other words this LDAP
                  name starts with &apos;n&apos;. If n is null or not a RFC2253 formatted name
                  as described in the class description, false is returned.                
                <param>
                    n The LDAP name to check.                    
                </param>
                <return>
                    true if <tt>n</tt> is a prefix of this LDAP name,
                      false otherwise.                    
                </return>
                <see>
                    #getPrefix(int posn)                    
                </see>
            </javadoc>
            <method name="startsWith" type="boolean" line="299">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <scope line="300"/>
                <declaration name="len1" type="int" line="303"/>
                <declaration name="len2" type="int" line="304"/>
            </method>
            <javadoc line="309">
                Determines whether the specified RDN sequence forms a prefix of this
                  LDAP name.  Returns true if this LdapName is at least as long as rdns,
                  and for every position p in the range [0, rdns.size()) the component
                  getRdn(p) matches rdns.get(p). Returns false otherwise. If rdns is
                  null, false is returned.                
                <param>
                    rdns The sequence of <tt>Rdn</tt>s to check.                    
                </param>
                <return>
                    true if <tt>rdns</tt> form a prefix of this LDAP name,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="startsWith" type="boolean" line="320">
                <params>
                    <param name="rdns" type="List<Rdn>"/>
                </params>
                <scope line="321"/>
                <declaration name="len1" type="int" line="324"/>
                <declaration name="len2" type="int" line="325"/>
            </method>
            <javadoc line="330">
                Determines whether this LDAP name ends with a specified
                  LDAP name suffix.
                  A name &lt;tt&gt;n&lt;/tt&gt; is a suffix if it is equal to
                  &lt;tt&gt;getSuffix(size()-n.size())&lt;/tt&gt;--in other words this LDAP
                  name ends with &apos;n&apos;. If n is null or not a RFC2253 formatted name
                  as described in the class description, false is returned.                
                <param>
                    n The LDAP name to check.                    
                </param>
                <return>
                    true if <tt>n</tt> is a suffix of this name, false otherwise.                    
                </return>
                <see>
                    #getSuffix(int posn)                    
                </see>
            </javadoc>
            <method name="endsWith" type="boolean" line="342">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <scope line="343"/>
                <declaration name="len1" type="int" line="346"/>
                <declaration name="len2" type="int" line="347"/>
            </method>
            <javadoc line="352">
                Determines whether the specified RDN sequence forms a suffix of this
                  LDAP name.  Returns true if this LdapName is at least as long as rdns,
                  and for every position p in the range [size() - rdns.size(), size())
                  the component getRdn(p) matches rdns.get(p). Returns false otherwise.
                  If rdns is null, false is returned.                
                <param>
                    rdns The sequence of <tt>Rdn</tt>s to check.                    
                </param>
                <return>
                    true if <tt>rdns</tt> form a suffix of this LDAP name,
                      false otherwise.                    
                </return>
            </javadoc>
            <method name="endsWith" type="boolean" line="363">
                <params>
                    <param name="rdns" type="List<Rdn>"/>
                </params>
                <scope line="364"/>
                <declaration name="len1" type="int" line="367"/>
                <declaration name="len2" type="int" line="368"/>
            </method>
            <method name="doesListMatch" type="boolean" line="373">
                <params>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                    <param name="rdns" type="List"/>
                </params>
                <scope line="374">
                    <scope line="375"/>
                </scope>
            </method>
            <method name="matches" type="boolean" line="389">
                <params>
                    <param name="beg" type="int"/>
                    <param name="end" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <scope line="390">
                    <declaration name="ln" type="LdapName" line="391"/>
                </scope>
                <scope line="393">
                    <scope line="394">
                        <declaration name="rdn" type="Rdn" line="395"/>
                        <declaration name="rdnString" type="String" line="396"/>
                        <scope line="397"/>
                        <scope line="399"/>
                        <scope line="402"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="410">
                Adds the components of a name -- in order -- to the end of this name.                
                <param>
                    suffix The non-null components to add.                    
                </param>
                <return>
                    The updated name (not a new instance).                    
                </return>
                <throws>
                    InvalidNameException if <tt>suffix</tt> is not a valid LDAP
                      name, or if the addition of the components would violate the
                      syntax rules of this LDAP name.                    
                </throws>
            </javadoc>
            <method name="addAll" type="Name" line="420">
                <params>
                    <param name="suffix" type="Name"/>
                </params>
            </method>
            <javadoc line="425">
                Adds the RDNs of a name -- in order -- to the end of this name.                
                <param>
                    suffixRdns The non-null suffix <tt>Rdn</tt>s to add.                    
                </param>
                <return>
                    The updated name (not a new instance).                    
                </return>
            </javadoc>
            <method name="addAll" type="Name" line="431">
                <params>
                    <param name="suffixRdns" type="List<Rdn>"/>
                </params>
            </method>
            <javadoc line="435">
                Adds the components of a name -- in order -- at a specified position
                  within this name. Components of this LDAP name at or after the
                  index (if any) of the first new component are shifted up
                  (away from index 0) to accomodate the new components.                
                <param>
                    suffix    The non-null components to add.                    
                </param>
                <param>
                    posn      The index at which to add the new component.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    The updated name (not a new instance).                    
                </return>
                <throws>
                    InvalidNameException if <tt>suffix</tt> is not a valid LDAP
                      name, or if the addition of the components would violate the
                      syntax rules of this LDAP name.                    
                </throws>
                <throws>
                    IndexOutOfBoundsException.If posn is outside the specified range.                    
                </throws>
            </javadoc>
            <method name="addAll" type="Name" line="454">
                <params>
                    <param name="posn" type="int"/>
                    <param name="suffix" type="Name"/>
                </params>
                <comment line="456">
                    no longer valid                    
                </comment>
                <scope line="456">
                    <declaration name="s" type="LdapName" line="457"/>
                </scope>
                <scope line="459">
                    <declaration name="comps" type="Enumeration" line="460"/>
                    <scope line="461"/>
                </scope>
            </method>
            <javadoc line="470">
                Adds the RDNs of a name -- in order -- at a specified position
                  within this name. RDNs of this LDAP name at or after the
                  index (if any) of the first new RDN are shifted up (away from index 0) to
                  accomodate the new RDNs.                
                <param>
                    suffixRdns        The non-null suffix <tt>Rdn</tt>s to add.                    
                </param>
                <param>
                    posn              The index at which to add the suffix RDNs.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    The updated name (not a new instance).                    
                </return>
                <throws>
                    IndexOutOfBoundsException.If posn is outside the specified range.                    
                </throws>
            </javadoc>
            <method name="addAll" type="Name" line="484">
                <params>
                    <param name="posn" type="int"/>
                    <param name="suffixRdns" type="List<Rdn>"/>
                </params>
                <scope line="486">
                    <declaration name="obj" type="Object" line="487"/>
                    <scope line="488"/>
                </scope>
            </method>
            <javadoc line="497">
                Adds a single component to the end of this LDAP name.                
                <param>
                    comp      The non-null component to add.                    
                </param>
                <return>
                    The updated LdapName, not a new instance.
                      Cannot be null.                    
                </return>
                <exception>
                    InvalidNameException If adding comp at end of the name
                      would violate the name's syntax.                    
                </exception>
            </javadoc>
            <method name="add" type="Name" line="506">
                <params>
                    <param name="comp" type="String"/>
                </params>
            </method>
            <javadoc line="510">
                Adds a single RDN to the end of this LDAP name.                
                <param>
                    comp      The non-null RDN to add.                    
                </param>
                <return>
                    The updated LdapName, not a new instance.
                      Cannot be null.                    
                </return>
            </javadoc>
            <method name="add" type="Name" line="518">
                <params>
                    <param name="comp" type="Rdn"/>
                </params>
            </method>
            <javadoc line="522">
                Adds a single component at a specified position within this
                  LDAP name.
                  Components of this LDAP name at or after the index (if any) of the new
                  component are shifted up by one (away from index 0) to accommodate
                  the new component.                
                <param>
                    comp     The non-null component to add.                    
                </param>
                <param>
                    posn     The index at which to add the new component.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    The updated LdapName, not a new instance.
                      Cannot be null.                    
                </return>
                <exception>
                    IndexOutOfBoundsException.If posn is outside the specified range.                    
                </exception>
                <exception>
                    InvalidNameException If adding comp at the
                      specified position would violate the name's syntax.                    
                </exception>
            </javadoc>
            <method name="add" type="Name" line="539">
                <params>
                    <param name="posn" type="int"/>
                    <param name="comp" type="String"/>
                </params>
                <comment line="543">
                    no longer valid                    
                </comment>
                <declaration name="rdn" type="Rdn" line="540"/>
            </method>
            <javadoc line="546">
                Adds a single RDN at a specified position within this
                  LDAP name.
                  RDNs of this LDAP name at or after the index (if any) of the new
                  RDN are shifted up by one (away from index 0) to accommodate
                  the new RDN.                
                <param>
                    comp     The non-null RDN to add.                    
                </param>
                <param>
                    posn     The index at which to add the new RDN.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    The updated LdapName, not a new instance.
                      Cannot be null.                    
                </return>
                <exception>
                    IndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="add" type="Name" line="561">
                <params>
                    <param name="posn" type="int"/>
                    <param name="comp" type="Rdn"/>
                </params>
                <comment line="567">
                    no longer valid                    
                </comment>
                <scope line="562"/>
            </method>
            <javadoc line="570">
                Removes a component from this LDAP name.
                  The component of this name at the specified position is removed.
                  Components with indexes greater than this position (if any)
                  are shifted down (toward index 0) by one.                
                <param>
                    posn      The index of the component to remove.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    The component removed (a String).                    
                </return>
                <throws>
                    IndexOutOfBoundsExceptionif posn is outside the specified range.                    
                </throws>
                <throws>
                    InvalidNameException if deleting the component
                      would violate the syntax rules of the name.                    
                </throws>
            </javadoc>
            <method name="remove" type="Object" line="585">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <comment line="587">
                    no longer valid                    
                </comment>
            </method>
            <javadoc line="590">
                Retrieves the list of relative distinguished names.
                  The contents of the list are unmodifiable.
                  The indexing of RDNs in the returned list follows the numbering of
                  RDNs as described in the class description.
                  If the name has zero components, an empty list is returned.                
                <return>
                    The name as a list of RDNs which are instances of
                      the class {@link Rdn Rdn}.                    
                </return>
            </javadoc>
            <method name="getRdns" type="List<Rdn>" line="600"/>
            <javadoc line="604">
                Generates a new copy of this name.
                  Subsequent changes to the components of this name will not
                  affect the new copy, and vice versa.                
                <return>
                    A copy of the this LDAP name.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="611"/>
            <javadoc line="615">
                Returns a string representation of this LDAP name in a format
                  defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;
                  and described in the class description. If the name has zero
                  components an empty string is returned.                
                <return>
                    The string representation of the LdapName.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="623">
                <scope line="624"/>
                <declaration name="builder" type="StringBuilder" line="627"/>
                <declaration name="size" type="int" line="628"/>
                <scope line="629"/>
                <scope line="632"/>
            </method>
            <javadoc line="640">
                Determines whether two LDAP names are equal.
                  If obj is null or not an LDAP name, false is returned.
                  &lt;p&gt;
                  Two LDAP names are equal if each RDN in one is equal
                  to the corresponding RDN in the other. This implies
                  both have the same number of RDNs, and each RDN&apos;s
                  equals() test against the corresponding RDN in the other
                  name returns true. See {@link Rdn#equals(Object obj)}for a definition of RDN equality.                
                <param>
                    obj      The possibly null object to compare against.                    
                </param>
                <return>
                    true if obj is equal to this LDAP name,
                      false otherwise.                    
                </return>
                <see>
                    #hashCode                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="656">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="658">
                    check possible shortcuts                    
                </comment>
                <comment line="673">
                    Compare RDNs one by one for equality                    
                </comment>
                <comment line="675">
                    Compare a single pair of RDNs.                    
                </comment>
                <scope line="658"/>
                <scope line="661"/>
                <declaration name="that" type="LdapName" line="664"/>
                <scope line="665"/>
                <scope line="669"/>
                <scope line="673">
                    <declaration name="rdn1" type="Rdn" line="675"/>
                    <declaration name="rdn2" type="Rdn" line="676"/>
                    <scope line="677"/>
                </scope>
            </method>
            <javadoc line="684">
                Compares this LdapName with the specified Object for order.
                  Returns a negative integer, zero, or a positive integer as this
                  Name is less than, equal to, or greater than the given Object.
                  &lt;p&gt;
                  If obj is null or not an instance of LdapName, ClassCastException
                  is thrown.
                  &lt;p&gt;
                  Ordering of LDAP names follows the lexicographical rules for
                  string comparison, with the extension that this applies to all
                  the RDNs in the LDAP name. All the RDNs are lined up in their
                  specified order and compared lexicographically.
                  See {@link Rdn#compareTo(Object obj) Rdn.compareTo(Object obj)}for RDN comparison rules.
                  &lt;p&gt;
                  If this LDAP name is lexicographically lesser than obj,
                  a negative number is returned.
                  If this LDAP name is lexicographically greater than obj,
                  a positive number is returned.                
                <param>
                    obj The non-null LdapName instance to compare against.                    
                </param>
                <return>
                    A negative integer, zero, or a positive integer as this Name
                      is less than, equal to, or greater than the given obj.                    
                </return>
                <exception>
                    ClassCastException if obj is null or not a LdapName.                    
                </exception>
            </javadoc>
            <method name="compareTo" type="int" line="709">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="716">
                    check possible shortcuts                    
                </comment>
                <comment line="727">
                    Compare RDNs one by one, lexicographically.                    
                </comment>
                <comment line="730">
                    Compare a single pair of RDNs.                    
                </comment>
                <comment line="739">
                    longer DN wins                    
                </comment>
                <scope line="711"/>
                <scope line="716"/>
                <declaration name="that" type="LdapName" line="719"/>
                <scope line="722"/>
                <declaration name="minSize" type="int" line="727"/>
                <scope line="728">
                    <declaration name="rdn1" type="Rdn" line="730"/>
                    <declaration name="rdn2" type="Rdn" line="731"/>
                    <declaration name="diff" type="int" line="733"/>
                    <scope line="734"/>
                </scope>
            </method>
            <javadoc line="741">
                Computes the hash code of this LDAP name.
                  The hash code is the sum of the hash codes of individual RDNs
                  of this  name.                
                <return>
                    An int representing the hash code of this name.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="749">
                <comment line="751">
                    Sum up the hash codes of the components.                    
                </comment>
                <comment line="754">
                    For each RDN...                    
                </comment>
                <declaration name="hash" type="int" line="751"/>
                <scope line="754">
                    <declaration name="rdn" type="Rdn" line="755"/>
                </scope>
            </method>
            <javadoc line="761">
                Serializes only the unparsed DN, for compactness and to avoid
                  any implementation dependency.                
                <serialData>
                    The DN string                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="768">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="774">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="781">
                    shouldn&apos;t happen                    
                </comment>
                <scope line="777"/>
                <scope line="779"/>
            </method>
            <method name="parse" type="void" line="786">
                <comment line="788">
                    rdns = (ArrayList&lt;Rdn&gt;) (new RFC2253Parser(unparsed)).getDN();                    
                </comment>
            </method>
        </class>
    </source>