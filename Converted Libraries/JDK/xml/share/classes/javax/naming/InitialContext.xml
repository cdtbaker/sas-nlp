<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Hashtable"/>
        <import package="javax.naming.spi.NamingManager"/>
        <import package="com.sun.naming.internal.ResourceManager"/>
        <class name="InitialContext" line="32">
            <comment line="408">
                Context methods
                 Most Javadoc is deferred to the Context interface.                
            </comment>
            <implements interface="Context"/>
            <javadoc line="32">
                This class is the starting context for performing naming operations.
                  &lt;p&gt;
                  All naming operations are relative to a context.
                  The initial context implements the Context interface and
                  provides the starting point for resolution of names.
                  &lt;p&gt;
                  &lt;a name=ENVIRONMENT&gt;&lt;/a&gt;
                  When the initial context is constructed, its environment
                  is initialized with properties defined in the environment parameter
                  passed to the constructor, and in any
                  &lt;a href=Context.html#RESOURCEFILES&gt;application resource files&lt;/a&gt;.
                  In addition, a small number of standard JNDI properties may
                  be specified as system properties or as applet parameters
                  (through the use of {@link Context#APPLET}).
                  These special properties are listed in the field detail sections of the
                  &lt;a href=Context.html#field_detail&gt;&lt;tt&gt;Context&lt;/tt&gt;&lt;/a&gt; and
                  &lt;a href=ldap/LdapContext.html#field_detail&gt;&lt;tt&gt;LdapContext&lt;/tt&gt;&lt;/a&gt;
                  interface documentation.
                  &lt;p&gt;
                  JNDI determines each property&apos;s value by merging
                  the values from the following two sources, in order:
                  &lt;ol&gt;
                  &lt;li&gt;
                  The first occurrence of the property from the constructor&apos;s
                  environment parameter and (for appropriate properties) the applet
                  parameters and system properties.
                  &lt;li&gt;
                  The application resource files (&lt;tt&gt;jndi.properties&lt;/tt&gt;).
                  &lt;/ol&gt;
                  For each property found in both of these two sources, or in
                  more than one application resource file, the property&apos;s value
                  is determined as follows.  If the property is
                  one of the standard JNDI properties that specify a list of JNDI
                  factories (see &lt;a href=Context.html#LISTPROPS&gt;&lt;tt&gt;Context&lt;/tt&gt;&lt;/a&gt;),
                  all of the values are
                  concatenated into a single colon-separated list.  For other
                  properties, only the first value found is used.
                  &lt;p&gt;
                  The initial context implementation is determined at runtime.
                  The default policy uses the environment property
                  &quot;{@link Context#INITIAL_CONTEXT_FACTORY java.naming.factory.initial}&quot;,
                  which contains the class name of the initial context factory.
                  An exception to this policy is made when resolving URL strings, as described
                  below.
                  &lt;p&gt;
                  When a URL string (a &lt;tt&gt;String&lt;/tt&gt; of the form
                  &lt;em&gt;scheme_id:rest_of_name&lt;/em&gt;) is passed as a name parameter to
                  any method, a URL context factory for handling that scheme is
                  located and used to resolve the URL.  If no such factory is found,
                  the initial context specified by
                  &lt;tt&gt;&quot;java.naming.factory.initial&quot;&lt;/tt&gt; is used.  Similarly, when a
                  &lt;tt&gt;CompositeName&lt;/tt&gt; object whose first component is a URL string is
                  passed as a name parameter to any method, a URL context factory is
                  located and used to resolve the first name component.
                  See {@link NamingManager#getURLContext&lt;tt&gt;NamingManager.getURLContext()&lt;/tt&gt;} for a description of how URL
                  context factories are located.
                  &lt;p&gt;
                  This default policy of locating the initial context and URL context
                  factories may be overridden
                  by calling
                  &lt;tt&gt;NamingManager.setInitialContextFactoryBuilder()&lt;/tt&gt;.
                  &lt;p&gt;
                  NoInitialContextException is thrown when an initial context cannot
                  be instantiated. This exception can be thrown during any interaction
                  with the InitialContext, not only when the InitialContext is constructed.
                  For example, the implementation of the initial context might lazily
                  retrieve the context only when actual methods are invoked on it.
                  The application should not have any dependency on when the existence
                  of an initial context is determined.
                  &lt;p&gt;
                  When the environment property &quot;java.naming.factory.initial&quot; is
                  non-null, the InitialContext constructor will attempt to create the
                  initial context specified therein. At that time, the initial context factory
                  involved might throw an exception if a problem is encountered. However,
                  it is provider implementation-dependent when it verifies and indicates
                  to the users of the initial context any environment property- or
                  connection- related problems. It can do so lazily--delaying until
                  an operation is performed on the context, or eagerly, at the time
                  the context is constructed.
                  &lt;p&gt;
                  An InitialContext instance is not synchronized against concurrent
                  access by multiple threads. Multiple threads each manipulating a
                  different InitialContext instance need not synchronize.
                  Threads that need to access a single InitialContext instance
                  concurrently should synchronize amongst themselves and provide the
                  necessary locking.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    Context                    
                </see>
                <see>
                    NamingManager#setInitialContextFactoryBuilderNamingManager.setInitialContextFactoryBuilder                    
                </see>
                <since>
                    JNDI 1.1 / Java 2 Platform, Standard Edition, v 1.3                    
                </since>
            </javadoc>
            <declaration name="myProps" type="Hashtable&lt;Object,Object&gt;" line="133"/>
            <javadoc line="133">
                The environment associated with this InitialContext.
                  It is initialized to null and is updated by the constructor
                  that accepts an environment or by the &lt;tt&gt;init()&lt;/tt&gt; method.                
                <see>
                    #addToEnvironment                    
                </see>
                <see>
                    #removeFromEnvironment                    
                </see>
                <see>
                    #getEnvironment                    
                </see>
            </javadoc>
            <declaration name="defaultInitCtx" type="Context" line="143"/>
            <javadoc line="143">
                Field holding the result of calling NamingManager.getInitialContext().
                  It is set by getDefaultInitCtx() the first time getDefaultInitCtx()
                  is called. Subsequent invocations of getDefaultInitCtx() return
                  the value of defaultInitCtx.                
                <see>
                    #getDefaultInitCtx                    
                </see>
            </javadoc>
            <declaration name="gotDefault" type="boolean" line="152"/>
            <javadoc line="152">
                Field indicating whether the initial context has been obtained
                  by calling NamingManager.getInitialContext().
                  If true, its result is in &lt;code&gt;defaultInitCtx&lt;/code&gt;.                
            </javadoc>
            <javadoc line="159">
                Constructs an initial context with the option of not
                  initializing it.  This may be used by a constructor in
                  a subclass when the value of the environment parameter
                  is not yet known at the time the &lt;tt&gt;InitialContext&lt;/tt&gt;
                  constructor is called.  The subclass&apos;s constructor will
                  call this constructor, compute the value of the environment,
                  and then call &lt;tt&gt;init()&lt;/tt&gt; before returning.                
                <param>
                    lazytrue means do not initialize the initial context; false
                      is equivalent to calling &lt;tt&gt;new InitialContext()&lt;/tt&gt;                    
                </param>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #init(Hashtable)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="InitialContext" type="constructor" line="176">
                <params>
                    <param name="lazy" type="boolean"/>
                </params>
                <scope line="177"/>
            </method>
            <javadoc line="182">
                Constructs an initial context.
                  No environment properties are supplied.
                  Equivalent to &lt;tt&gt;new InitialContext(null)&lt;/tt&gt;.                
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #InitialContext(Hashtable)                    
                </see>
            </javadoc>
            <method name="InitialContext" type="constructor" line="191"/>
            <javadoc line="195">
                Constructs an initial context using the supplied environment.
                  Environment properties are discussed in the class description.
                  &lt;p&gt; This constructor will not modify &lt;tt&gt;environment&lt;/tt&gt;
                  or save a reference to it, but may save a clone.
                  Caller should not modify mutable keys and values in
                  &lt;tt&gt;environment&lt;/tt&gt; after it has been passed to the constructor.                
                <param>
                    environmentenvironment used to create the initial context.
                      Null indicates an empty environment.                    
                </param>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="InitialContext" type="constructor" line="212">
                <params>
                    <param name="environment" type="Hashtable<?,?>"/>
                </params>
                <scope line="213"/>
            </method>
            <javadoc line="219">
                Initializes the initial context using the supplied environment.
                  Environment properties are discussed in the class description.
                  &lt;p&gt; This method will modify &lt;tt&gt;environment&lt;/tt&gt; and save
                  a reference to it.  The caller may no longer modify it.                
                <param>
                    environmentenvironment used to create the initial context.
                      Null indicates an empty environment.                    
                </param>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #InitialContext(boolean)                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="init" type="void" line="237">
                <params>
                    <param name="environment" type="Hashtable<?,?>"/>
                </params>
                <comment line="242">
                    user has specified initial context factory; try to get it                    
                </comment>
                <scope line="240"/>
            </method>
            <javadoc line="246">
                A static method to retrieve the named object.
                  This is a shortcut method equivalent to invoking:
                  &lt;p&gt;
                  &lt;code&gt;
                  InitialContext ic = new InitialContext();
                  Object obj = ic.lookup();
                  &lt;/code&gt;
                  &lt;p&gt; If &lt;tt&gt;name&lt;/tt&gt; is empty, returns a new instance of this context
                  (which represents the same naming context as this context, but its
                  environment may be modified independently and it may be accessed
                  concurrently).                
                <param>
                    namethe name of the object to look up                    
                </param>
                <return>
                    the object bound to &lt;tt&gt;name&lt;/tt&gt;                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #doLookup(String)                    
                </see>
                <see>
                    #lookup(Name)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="doLookup" type="T" line="269">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="273">
                A static method to retrieve the named object.
                  See {@link #doLookup(Name)} for details.                
                <param>
                    namethe name of the object to look up                    
                </param>
                <return>
                    the object bound to &lt;tt&gt;name&lt;/tt&gt;                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="doLookup" type="T" line="283">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getURLScheme" type="String" line="287">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="colon_posn" type="int" line="288"/>
                <declaration name="slash_posn" type="int" line="289"/>
            </method>
            <javadoc line="296">
                Retrieves the initial context by calling
                  &lt;code&gt;NamingManager.getInitialContext()&lt;/code&gt;
                  and cache it in defaultInitCtx.
                  Set &lt;code&gt;gotDefault&lt;/code&gt; so that we know we&apos;ve tried this before.                
                <return>
                    The non-null cached initial context.                    
                </return>
                <exception>
                    NoInitialContextException If cannot find an initial context.                    
                </exception>
                <exception>
                    NamingException If a naming exception was encountered.                    
                </exception>
            </javadoc>
            <method name="getDefaultInitCtx" type="Context" line="305">
                <scope line="306"/>
            </method>
            <javadoc line="316">
                Retrieves a context for resolving the string name &lt;code&gt;name&lt;/code&gt;.
                  If &lt;code&gt;name&lt;/code&gt; name is a URL string, then attempt
                  to find a URL context for it. If none is found, or if
                  &lt;code&gt;name&lt;/code&gt; is not a URL string, then return
                  &lt;code&gt;getDefaultInitCtx()&lt;/code&gt;.
                  &lt;p&gt;
                  See getURLOrDefaultInitCtx(Name) for description
                  of how a subclass should use this method.                
                <param>
                    name The non-null name for which to get the context.                    
                </param>
                <return>
                    A URL context for &lt;code&gt;name&lt;/code&gt; or the cached
                      initial context. The result cannot be null.                    
                </return>
                <exception>
                    NoInitialContextException If cannot find an initial context.                    
                </exception>
                <exception>
                    NamingException In a naming exception is encountered.                    
                </exception>
                <see>
                    javax.naming.spi.NamingManager#getURLContext                    
                </see>
            </javadoc>
            <method name="getURLOrDefaultInitCtx" type="Context" line="333">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="334"/>
                <declaration name="scheme" type="String" line="337"/>
                <scope line="338">
                    <declaration name="ctx" type="Context" line="339"/>
                    <scope line="340"/>
                </scope>
            </method>
            <javadoc line="347">
                Retrieves a context for resolving &lt;code&gt;name&lt;/code&gt;.
                  If the first component of &lt;code&gt;name&lt;/code&gt; name is a URL string,
                  then attempt to find a URL context for it. If none is found, or if
                  the first component of &lt;code&gt;name&lt;/code&gt; is not a URL string,
                  then return &lt;code&gt;getDefaultInitCtx()&lt;/code&gt;.
                  &lt;p&gt;
                  When creating a subclass of InitialContext, use this method as
                  follows.
                  Define a new method that uses this method to get an initial
                  context of the desired subclass.
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  protected XXXContext getURLOrDefaultInitXXXCtx(Name name)
                  throws NamingException {
                  Context answer = getURLOrDefaultInitCtx(name);
                  if (!(answer instanceof XXXContext)) {
                  if (answer == null) {
                  throw new NoInitialContextException();
                  } else {
                  throw new NotContextException(&quot;Not an XXXContext&quot;);
                  }
                  }
                  return (XXXContext)answer;
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  When providing implementations for the new methods in the subclass,
                  use this newly defined method to get the initial context.
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  public Object XXXMethod1(Name name, ...) {
                  throws NamingException {
                  return getURLOrDefaultInitXXXCtx(name).XXXMethod1(name, ...);
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <param>
                    name The non-null name for which to get the context.                    
                </param>
                <return>
                    A URL context for &lt;code&gt;name&lt;/code&gt; or the cached
                      initial context. The result cannot be null.                    
                </return>
                <exception>
                    NoInitialContextException If cannot find an initial context.                    
                </exception>
                <exception>
                    NamingException In a naming exception is encountered.                    
                </exception>
                <see>
                    javax.naming.spi.NamingManager#getURLContext                    
                </see>
            </javadoc>
            <method name="getURLOrDefaultInitCtx" type="Context" line="390">
                <params>
                    <param name="name" type="Name"/>
                </params>
                <scope line="391"/>
                <scope line="394">
                    <declaration name="first" type="String" line="395"/>
                    <declaration name="scheme" type="String" line="396"/>
                    <scope line="397">
                        <declaration name="ctx" type="Context" line="398"/>
                        <scope line="399"/>
                    </scope>
                </scope>
            </method>
            <method name="lookup" type="Object" line="410">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="lookup" type="Object" line="414">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="bind" type="void" line="418">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="bind" type="void" line="422">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="rebind" type="void" line="426">
                <params>
                    <param name="name" type="String"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="rebind" type="void" line="430">
                <params>
                    <param name="name" type="Name"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="unbind" type="void" line="434">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="unbind" type="void" line="438">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="rename" type="void" line="442">
                <params>
                    <param name="oldName" type="String"/>
                    <param name="newName" type="String"/>
                </params>
            </method>
            <method name="rename" type="void" line="448">
                <params>
                    <param name="oldName" type="Name"/>
                    <param name="newName" type="Name"/>
                </params>
            </method>
            <method name="list" type="NamingEnumeration<NameClassPair>" line="454">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="list" type="NamingEnumeration<NameClassPair>" line="460">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="listBindings" type="NamingEnumeration<Binding>" line="465">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="listBindings" type="NamingEnumeration<Binding>" line="470">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="destroySubcontext" type="void" line="474">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="destroySubcontext" type="void" line="478">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="createSubcontext" type="Context" line="482">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="createSubcontext" type="Context" line="486">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="lookupLink" type="Object" line="490">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="lookupLink" type="Object" line="494">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <method name="getNameParser" type="NameParser" line="498">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <method name="getNameParser" type="NameParser" line="502">
                <params>
                    <param name="name" type="Name"/>
                </params>
            </method>
            <javadoc line="506">
                Composes the name of this context with a name relative to
                  this context.
                  Since an initial context may never be named relative
                  to any context other than itself, the value of the
                  &lt;tt&gt;prefix&lt;/tt&gt; parameter must be an empty name (&lt;tt&gt;&quot;&quot;&lt;/tt&gt;).                
            </javadoc>
            <method name="composeName" type="String" line="514">
                <params>
                    <param name="name" type="String"/>
                    <param name="prefix" type="String"/>
                </params>
            </method>
            <javadoc line="518">
                Composes the name of this context with a name relative to
                  this context.
                  Since an initial context may never be named relative
                  to any context other than itself, the value of the
                  &lt;tt&gt;prefix&lt;/tt&gt; parameter must be an empty name.                
            </javadoc>
            <method name="composeName" type="Name" line="527">
                <params>
                    <param name="name" type="Name"/>
                    <param name="prefix" type="Name"/>
                </params>
            </method>
            <method name="addToEnvironment" type="Object" line="532">
                <params>
                    <param name="propName" type="String"/>
                    <param name="propVal" type="Object"/>
                </params>
            </method>
            <method name="removeFromEnvironment" type="Object" line="538">
                <params>
                    <param name="propName" type="String"/>
                </params>
            </method>
            <method name="getEnvironment" type="Hashtable<?,?>" line="543"/>
            <method name="close" type="void" line="547">
                <scope line="549"/>
            </method>
            <method name="getNameInNamespace" type="String" line="556"/>
        </class>
    </source>