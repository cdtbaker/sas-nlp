<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.directory">
        <import package="javax.naming.NamingException"/>
        <class name="AttributeModificationException" line="30">
            <extends class="NamingException"/>
            <comment line="53">
                &lt;p&gt;
                 The serialized form of an AttributeModificationException object
                 consists of the serialized fields of its NamingException
                 superclass, followed by an array of ModificationItem objects.                
            </comment>
            <javadoc line="30">
                This exception is thrown when an attempt is
                  made to add, or remove, or modify an attribute, its identifier,
                  or its values that conflicts with the attribute&apos;s (schema) definition
                  or the attribute&apos;s state.
                  It is thrown in response to DirContext.modifyAttributes().
                  It contains a list of modifications that have not been performed, in the
                  order that they were supplied to modifyAttributes().
                  If the list is null, none of the modifications were performed successfully.
                  &lt;p&gt;
                  An AttributeModificationException instance is not synchronized
                  against concurrent multithreaded access. Multiple threads trying
                  to access and modify a single AttributeModification instance
                  should lock the object.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    DirContext#modifyAttributes                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="unexecs" type="ModificationItem[]" line="62"/>
            <javadoc line="62">
                Contains the possibly null list of unexecuted modifications.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="68">
                Constructs a new instance of AttributeModificationException using
                  an explanation. All other fields are set to null.                
                <param>
                    explanation     Possibly null additional detail about this exception.
                      If null, this exception has no detail message.                    
                </param>
                <see>
                    java.lang.Throwable#getMessage                    
                </see>
            </javadoc>
            <method name="AttributeModificationException" type="constructor" line="77">
                <params>
                    <param name="explanation" type="String"/>
                </params>
            </method>
            <javadoc line="81">
                Constructs a new instance of AttributeModificationException.
                  All fields are set to null.                
            </javadoc>
            <method name="AttributeModificationException" type="constructor" line="85"/>
            <javadoc line="89">
                Sets the unexecuted modification list to be e.
                  Items in the list must appear in the same order in which they were
                  originally supplied in DirContext.modifyAttributes().
                  The first item in the list is the first one that was not executed.
                  If this list is null, none of the operations originally submitted
                  to modifyAttributes() were executed.                
                <param>
                    e        The possibly null list of unexecuted modifications.                    
                </param>
                <see>
                    #getUnexecutedModifications                    
                </see>
            </javadoc>
            <method name="setUnexecutedModifications" type="void" line="100">
                <params>
                    <param name="e" type="ModificationItem[]"/>
                </params>
            </method>
            <javadoc line="104">
                Retrieves the unexecuted modification list.
                  Items in the list appear in the same order in which they were
                  originally supplied in DirContext.modifyAttributes().
                  The first item in the list is the first one that was not executed.
                  If this list is null, none of the operations originally submitted
                  to modifyAttributes() were executed.                
                <return>
                    The possibly null unexecuted modification list.                    
                </return>
                <see>
                    #setUnexecutedModifications                    
                </see>
            </javadoc>
            <method name="getUnexecutedModifications" type="ModificationItem[]" line="115"/>
            <javadoc line="119">
                The string representation of this exception consists of
                  information about where the error occurred, and
                  the first unexecuted modification.
                  This string is meant for debugging and not mean to be interpreted
                  programmatically.                
                <return>
                    The non-null string representation of this exception.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="127">
                <declaration name="orig" type="String" line="128"/>
                <scope line="129"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="136"/>
            <javadoc line="136">
                Use serialVersionUID from JNDI 1.1.1 for interoperability                
            </javadoc>
        </class>
    </source>