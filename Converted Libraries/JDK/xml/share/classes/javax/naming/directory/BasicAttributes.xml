<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.directory">
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.NamingEnumeration"/>
        <class name="BasicAttributes" line="35">
            <comment line="78">
                The &apos;key&apos; in attrs is stored in the &apos;right case&apos;.
                 If ignoreCase is true, key is aways lowercase.
                 If ignoreCase is false, key is stored as supplied by put().
                 %%% Not declared &quot;private&quot; due to bug 4064984.                
            </comment>
            <implements interface="Attributes"/>
            <javadoc line="35">
                This class provides a basic implementation
                  of the Attributes interface.
                  &lt;p&gt;
                  BasicAttributes is either case-sensitive or case-insensitive (case-ignore).
                  This property is determined at the time the BasicAttributes constructor
                  is called.
                  In a case-insensitive BasicAttributes, the case of its attribute identifiers
                  is ignored when searching for an attribute, or adding attributes.
                  In a case-sensitive BasicAttributes, the case is significant.
                  &lt;p&gt;
                  When the BasicAttributes class needs to create an Attribute, it
                  uses BasicAttribute. There is no other dependency on BasicAttribute.
                  &lt;p&gt;
                  Note that updates to BasicAttributes (such as adding or removing an attribute)
                  does not affect the corresponding representation in the directory.
                  Updates to the directory can only be effected
                  using operations in the DirContext interface.
                  &lt;p&gt;
                  A BasicAttributes instance is not synchronized against concurrent
                  multithreaded access. Multiple threads trying to access and modify
                  a single BasicAttributes instance should lock the object.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    DirContext#getAttributes                    
                </see>
                <see>
                    DirContext#modifyAttributes                    
                </see>
                <see>
                    DirContext#bind                    
                </see>
                <see>
                    DirContext#rebind                    
                </see>
                <see>
                    DirContext#createSubcontext                    
                </see>
                <see>
                    DirContext#search                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="ignoreCase" type="boolean" line="71"/>
            <javadoc line="71">
                Indicates whether case of attribute ids is ignored.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="attrs" type="Hashtable" line="81"/>
            <javadoc line="83">
                Constructs a new instance of Attributes.
                  The character case of attribute identifiers
                  is significant when subsequently retrieving or adding attributes.                
            </javadoc>
            <method name="BasicAttributes" type="constructor" line="88"/>
            <javadoc line="91">
                Constructs a new instance of Attributes.
                  If &lt;code&gt;ignoreCase&lt;/code&gt; is true, the character case of attribute
                  identifiers is ignored; otherwise the case is significant.                
                <param>
                    ignoreCase true means this attribute set will ignore
                      the case of its attribute identifiers
                      when retrieving or adding attributes;
                      false means case is respected.                    
                </param>
            </javadoc>
            <method name="BasicAttributes" type="constructor" line="100">
                <params>
                    <param name="ignoreCase" type="boolean"/>
                </params>
            </method>
            <javadoc line="104">
                Constructs a new instance of Attributes with one attribute.
                  The attribute specified by attrID and val are added to the newly
                  created attribute.
                  The character case of attribute identifiers
                  is significant when subsequently retrieving or adding attributes.                
                <param>
                    attrID   non-null The id of the attribute to add.                    
                </param>
                <param>
                    val The value of the attribute to add. If null, a null
                      value is added to the attribute.                    
                </param>
            </javadoc>
            <method name="BasicAttributes" type="constructor" line="114">
                <params>
                    <param name="attrID" type="String"/>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <javadoc line="119">
                Constructs a new instance of Attributes with one attribute.
                  The attribute specified by attrID and val are added to the newly
                  created attribute.
                  If &lt;code&gt;ignoreCase&lt;/code&gt; is true, the character case of attribute
                  identifiers is ignored; otherwise the case is significant.                
                <param>
                    attrID   non-null The id of the attribute to add.
                      If this attribute set ignores the character
                      case of its attribute ids, the case of attrID
                      is ignored.                    
                </param>
                <param>
                    val The value of the attribute to add. If null, a null
                      value is added to the attribute.                    
                </param>
                <param>
                    ignoreCase true means this attribute set will ignore
                      the case of its attribute identifiers
                      when retrieving or adding attributes;
                      false means case is respected.                    
                </param>
            </javadoc>
            <method name="BasicAttributes" type="constructor" line="136">
                <params>
                    <param name="attrID" type="String"/>
                    <param name="val" type="Object"/>
                    <param name="ignoreCase" type="boolean"/>
                </params>
            </method>
            <method name="clone" type="Object" line="141">
                <declaration name="attrset" type="BasicAttributes" line="142"/>
                <scope line="143"/>
                <scope line="145"/>
            </method>
            <method name="isCaseIgnored" type="boolean" line="152"/>
            <method name="size" type="int" line="156"/>
            <method name="get" type="Attribute" line="160">
                <params>
                    <param name="attrID" type="String"/>
                </params>
                <declaration name="attr" type="Attribute" line="161"/>
            </method>
            <method name="getAll" type="NamingEnumeration<Attribute>" line="166"/>
            <method name="getIDs" type="NamingEnumeration<String>" line="170"/>
            <method name="put" type="Attribute" line="174">
                <params>
                    <param name="attrID" type="String"/>
                    <param name="val" type="Object"/>
                </params>
            </method>
            <method name="put" type="Attribute" line="178">
                <params>
                    <param name="attr" type="Attribute"/>
                </params>
                <declaration name="id" type="String" line="179"/>
                <scope line="180"/>
            </method>
            <method name="remove" type="Attribute" line="186">
                <params>
                    <param name="attrID" type="String"/>
                </params>
                <declaration name="id" type="String" line="187"/>
            </method>
            <javadoc line="191">
                Generates the string representation of this attribute set.
                  The string consists of each attribute identifier and the contents
                  of each attribute. The contents of this string is useful
                  for debugging and is not meant to be interpreted programmatically.                
                <return>
                    A non-null string listing the contents of this attribute set.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="199">
                <scope line="200"/>
                <scope line="202"/>
            </method>
            <javadoc line="207">
                Determines whether this &lt;tt&gt;BasicAttributes&lt;/tt&gt; is equal to another
                  &lt;tt&gt;Attributes&lt;/tt&gt;
                  Two &lt;tt&gt;Attributes&lt;/tt&gt; are equal if they are both instances of
                  &lt;tt&gt;Attributes&lt;/tt&gt;,
                  treat the case of attribute IDs the same way, and contain the
                  same attributes. Each &lt;tt&gt;Attribute&lt;/tt&gt; in this &lt;tt&gt;BasicAttributes&lt;/tt&gt;
                  is checked for equality using &lt;tt&gt;Object.equals()&lt;/tt&gt;, which may have
                  be overridden by implementations of &lt;tt&gt;Attribute&lt;/tt&gt;).
                  If a subclass overrides &lt;tt&gt;equals()&lt;/tt&gt;,
                  it should override &lt;tt&gt;hashCode()&lt;/tt&gt;
                  as well so that two &lt;tt&gt;Attributes&lt;/tt&gt; instances that are equal
                  have the same hash code.                
                <param>
                    obj the possibly null object to compare against.                    
                </param>
                <return>
                    true If obj is equal to this BasicAttributes.                    
                </return>
                <see>
                    #hashCode                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="225">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="230">
                    Check case first                    
                </comment>
                <scope line="226">
                    <declaration name="target" type="Attributes" line="227"/>
                    <scope line="230"/>
                    <scope line="234">
                        <declaration name="their" type="Attribute" line="235"/>
                        <scope line="236">
                            <declaration name="theirs" type="NamingEnumeration" line="237"/>
                            <scope line="238">
                                <scope line="241"/>
                            </scope>
                        </scope>
                        <scope line="245"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="254">
                Calculates the hash code of this BasicAttributes.
                  &lt;p&gt;
                  The hash code is computed by adding the hash code of
                  the attributes of this object. If this BasicAttributes
                  ignores case of its attribute IDs, one is added to the hash code.
                  If a subclass overrides &lt;tt&gt;hashCode()&lt;/tt&gt;,
                  it should override &lt;tt&gt;equals()&lt;/tt&gt;
                  as well so that two &lt;tt&gt;Attributes&lt;/tt&gt; instances that are equal
                  have the same hash code.                
                <return>
                    an int representing the hash code of this BasicAttributes instance.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="268">
                <declaration name="hash" type="int" line="269"/>
                <scope line="270">
                    <declaration name="all" type="NamingEnumeration" line="271"/>
                    <scope line="272"/>
                </scope>
                <scope line="275"/>
            </method>
            <javadoc line="279">
                Overridden to avoid exposing implementation details.                
                <serialData>
                    Default field (ignoreCase flag -- a boolean), followed by
                      the number of attributes in the set
                      (an int), and then the individual Attribute objects.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="286">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="288">
                    write out the ignoreCase flag                    
                </comment>
                <declaration name="attrEnum" type="Enumeration" line="289"/>
                <scope line="290"/>
            </method>
            <javadoc line="295">
                Overridden to avoid exposing implementation details.                
            </javadoc>
            <method name="readObject" type="void" line="299">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="301">
                    read in the ignoreCase flag                    
                </comment>
                <comment line="302">
                    number of attributes                    
                </comment>
                <comment line="305">
                    can&apos;t have initial size of 0 (grrr...)                    
                </comment>
                <declaration name="n" type="int" line="301"/>
                <scope line="305"/>
            </method>
            <class name="AttrEnumImpl" line="311">
                <implements interface="NamingEnumeration">
                    <type_params>
                        <type_param name="Attribute"/>
                    </type_params>
                </implements>
                <declaration name="elements" type="Enumeration&lt;Attribute&gt;" line="313"/>
                <method name="AttrEnumImpl" type="constructor" line="315"/>
                <method name="hasMoreElements" type="boolean" line="319"/>
                <method name="nextElement" type="Attribute" line="323"/>
                <method name="hasMore" type="boolean" line="327"/>
                <method name="next" type="Attribute" line="331"/>
                <method name="close" type="void" line="335"/>
            </class>
            <class name="IDEnumImpl" line="340">
                <implements interface="NamingEnumeration">
                    <type_params>
                        <type_param name="String"/>
                    </type_params>
                </implements>
                <declaration name="elements" type="Enumeration&lt;Attribute&gt;" line="342"/>
                <method name="IDEnumImpl" type="constructor" line="344">
                    <comment line="346">
                        Walking through the elements, rather than the keys, gives
                         us attribute IDs that have not been converted to lowercase.                        
                    </comment>
                </method>
                <method name="hasMoreElements" type="boolean" line="350"/>
                <method name="nextElement" type="String" line="354">
                    <declaration name="attr" type="Attribute" line="355"/>
                </method>
                <method name="hasMore" type="boolean" line="359"/>
                <method name="next" type="String" line="363"/>
                <method name="close" type="void" line="367"/>
            </class>
            <declaration name="serialVersionUID" type="long" line="372"/>
            <javadoc line="372">
                Use serialVersionUID from JNDI 1.1.1 for interoperability.                
            </javadoc>
        </class>
    </source>