<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.directory">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.NamingEnumeration"/>
        <import package="javax.naming.OperationNotSupportedException"/>
        <interface name="Attribute">
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <comment line="247">
                ----------- Methods to support ordered multivalued attributes                
            </comment>
            <javadoc line="36">
                This interface represents an attribute associated with a named object.
                  &lt;p&gt;
                  In a directory, named objects can have associated with them
                  attributes.  The &lt;tt&gt;Attribute&lt;/tt&gt; interface represents an attribute associated
                  with a named object.  An attribute contains 0 or more, possibly null, values.
                  The attribute values can be ordered or unordered (see &lt;tt&gt;isOrdered()&lt;/tt&gt;).
                  If the values are unordered, no duplicates are allowed.
                  If the values are ordered, duplicates are allowed.
                  &lt;p&gt;
                  The content and representation of an attribute and its values is defined by
                  the attribute&apos;s &lt;em&gt;schema&lt;/em&gt;. The schema contains information
                  about the attribute&apos;s syntax and other properties about the attribute.
                  See &lt;tt&gt;getAttributeDefinition()&lt;/tt&gt; and
                  &lt;tt&gt;getAttributeSyntaxDefinition()&lt;/tt&gt;
                  for details regarding how to get schema information about an attribute
                  if the underlying directory service supports schemas.
                  &lt;p&gt;
                  Equality of two attributes is determined by the implementation class.
                  A simple implementation can use &lt;tt&gt;Object.equals()&lt;/tt&gt; to determine equality
                  of attribute values, while a more sophisticated implementation might
                  make use of schema information to determine equality.
                  Similarly, one implementation might provide a static storage
                  structure which simply returns the values passed to its
                  constructor, while another implementation might define &lt;tt&gt;get()&lt;/tt&gt; and
                  &lt;tt&gt;getAll()&lt;/tt&gt;.
                  to get the values dynamically from the directory.
                  &lt;p&gt;
                  Note that updates to &lt;tt&gt;Attribute&lt;/tt&gt; (such as adding or removing a
                  value) do not affect the corresponding representation of the attribute
                  in the directory.  Updates to the directory can only be effected
                  using operations in the &lt;tt&gt;DirContext&lt;/tt&gt; interface.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    BasicAttribute                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAll" type="NamingEnumeration<?>" line="76"/>
            <javadoc line="76">
                Retrieves an enumeration of the attribute&apos;s values.
                  The behaviour of this enumeration is unspecified
                  if the attribute&apos;s values are added, changed,
                  or removed while the enumeration is in progress.
                  If the attribute values are ordered, the enumeration&apos;s items
                  will be ordered.                
                <return>
                    A non-null enumeration of the attribute&apos;s values.
                      Each element of the enumeration is a possibly null Object. The object&apos;s
                      class is the class of the attribute value. The element is null
                      if the attribute&apos;s value is null.
                      If the attribute has zero values, an empty enumeration
                      is returned.                    
                </return>
                <exception>
                    NamingExceptionIf a naming exception was encountered while retrieving
                      the values.                    
                </exception>
                <see>
                    #isOrdered                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="97"/>
            <javadoc line="97">
                Retrieves one of this attribute&apos;s values.
                  If the attribute has more than one value and is unordered, any one of
                  the values is returned.
                  If the attribute has more than one value and is ordered, the
                  first value is returned.                
                <return>
                    A possibly null object representing one of
                      the attribute&apos;s value. It is null if the attribute&apos;s value
                      is null.                    
                </return>
                <exception>
                    NamingExceptionIf a naming exception was encountered while retrieving
                      the value.                    
                </exception>
                <exception>
                    java.util.NoSuchElementExceptionIf this attribute has no values.                    
                </exception>
            </javadoc>
            <method name="size" type="int" line="115"/>
            <javadoc line="115">
                Retrieves the number of values in this attribute.                
                <return>
                    The nonnegative number of values in this attribute.                    
                </return>
            </javadoc>
            <method name="getID" type="String" line="122"/>
            <javadoc line="122">
                Retrieves the id of this attribute.                
                <return>
                    The id of this attribute. It cannot be null.                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="129"/>
            <javadoc line="129">
                Determines whether a value is in the attribute.
                  Equality is determined by the implementation, which may use
                  &lt;tt&gt;Object.equals()&lt;/tt&gt; or schema information to determine equality.                
                <param>
                    attrVal The possibly null value to check. If null, check
                      whether the attribute has an attribute value whose value is null.                    
                </param>
                <return>
                    true if attrVal is one of this attribute&apos;s values; false otherwise.                    
                </return>
                <see>
                    java.lang.Object#equals                    
                </see>
                <see>
                    BasicAttribute#equals                    
                </see>
            </javadoc>
            <method name="add" type="boolean" line="141"/>
            <javadoc line="141">
                Adds a new value to the attribute.
                  If the attribute values are unordered and
                  &lt;tt&gt;attrVal&lt;/tt&gt; is already in the attribute, this method does nothing.
                  If the attribute values are ordered, &lt;tt&gt;attrVal&lt;/tt&gt; is added to the end of
                  the list of attribute values.
                  &lt;p&gt;
                  Equality is determined by the implementation, which may use
                  &lt;tt&gt;Object.equals()&lt;/tt&gt; or schema information to determine equality.                
                <param>
                    attrVal The new possibly null value to add. If null, null
                      is added as an attribute value.                    
                </param>
                <return>
                    true if a value was added; false otherwise.                    
                </return>
            </javadoc>
            <method name="remove" type="boolean" line="157"/>
            <javadoc line="157">
                Removes a specified value from the attribute.
                  If &lt;tt&gt;attrval&lt;/tt&gt; is not in the attribute, this method does nothing.
                  If the attribute values are ordered, the first occurrence of
                  &lt;tt&gt;attrVal&lt;/tt&gt; is removed and attribute values at indices greater
                  than the removed
                  value are shifted up towards the head of the list (and their indices
                  decremented by one).
                  &lt;p&gt;
                  Equality is determined by the implementation, which may use
                  &lt;tt&gt;Object.equals()&lt;/tt&gt; or schema information to determine equality.                
                <param>
                    attrval The possibly null value to remove from this attribute.
                      If null, remove the attribute value that is null.                    
                </param>
                <return>
                    true if the value was removed; false otherwise.                    
                </return>
            </javadoc>
            <method name="clear" type="void" line="175"/>
            <javadoc line="175">
                Removes all values from this attribute.                
            </javadoc>
            <method name="getAttributeSyntaxDefinition" type="DirContext" line="180"/>
            <javadoc line="180">
                Retrieves the syntax definition associated with the attribute.
                  An attribute&apos;s syntax definition specifies the format
                  of the attribute&apos;s value(s). Note that this is different from
                  the attribute value&apos;s representation as a Java object. Syntax
                  definition refers to the directory&apos;s notion of &lt;em&gt;syntax&lt;/em&gt;.
                  &lt;p&gt;
                  For example, even though a value might be
                  a Java String object, its directory syntax might be &quot;Printable String&quot;
                  or &quot;Telephone Number&quot;. Or a value might be a byte array, and its
                  directory syntax is &quot;JPEG&quot; or &quot;Certificate&quot;.
                  For example, if this attribute&apos;s syntax is &quot;JPEG&quot;,
                  this method would return the syntax definition for &quot;JPEG&quot;.
                  &lt;p&gt;
                  The information that you can retrieve from a syntax definition
                  is directory-dependent.
                  &lt;p&gt;
                  If an implementation does not support schemas, it should throw
                  OperationNotSupportedException. If an implementation does support
                  schemas, it should define this method to return the appropriate
                  information.                
                <return>
                    The attribute&apos;s syntax definition. Null if the implementation
                      supports schemas but this particular attribute does not have
                      any schema information.                    
                </return>
                <exception>
                    OperationNotSupportedException If getting the schema
                      is not supported.                    
                </exception>
                <exception>
                    NamingException If a naming exception occurs while getting
                      the schema.                    
                </exception>
            </javadoc>
            <method name="getAttributeDefinition" type="DirContext" line="212"/>
            <javadoc line="212">
                Retrieves the attribute&apos;s schema definition.
                  An attribute&apos;s schema definition contains information
                  such as whether the attribute is multivalued or single-valued,
                  the matching rules to use when comparing the attribute&apos;s values.
                  The information that you can retrieve from an attribute definition
                  is directory-dependent.
                  &lt;p&gt;
                  If an implementation does not support schemas, it should throw
                  OperationNotSupportedException. If an implementation does support
                  schemas, it should define this method to return the appropriate
                  information.                
                <return>
                    This attribute&apos;s schema definition. Null if the implementation
                      supports schemas but this particular attribute does not have
                      any schema information.                    
                </return>
                <exception>
                    OperationNotSupportedException If getting the schema
                      is not supported.                    
                </exception>
                <exception>
                    NamingException If a naming exception occurs while getting
                      the schema.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="236"/>
            <javadoc line="236">
                Makes a copy of the attribute.
                  The copy contains the same attribute values as the original attribute:
                  the attribute values are not themselves cloned.
                  Changes to the copy will not affect the original and vice versa.                
                <return>
                    A non-null copy of the attribute.                    
                </return>
            </javadoc>
            <method name="isOrdered" type="boolean" line="248"/>
            <javadoc line="248">
                Determines whether this attribute&apos;s values are ordered.
                  If an attribute&apos;s values are ordered, duplicate values are allowed.
                  If an attribute&apos;s values are unordered, they are presented
                  in any order and there are no duplicate values.                
                <return>
                    true if this attribute&apos;s values are ordered; false otherwise.                    
                </return>
                <see>
                    #get(int)                    
                </see>
                <see>
                    #remove(int)                    
                </see>
                <see>
                    #add(int,java.lang.Object)                    
                </see>
                <see>
                    #set(int,java.lang.Object)                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="261"/>
            <javadoc line="261">
                Retrieves the attribute value from the ordered list of attribute values.
                  This method returns the value at the &lt;tt&gt;ix&lt;/tt&gt; index of the list of
                  attribute values.
                  If the attribute values are unordered,
                  this method returns the value that happens to be at that index.                
                <param>
                    ix The index of the value in the ordered list of attribute values.
                      0 &lt;= &lt;tt&gt;ix&lt;/tt&gt; &lt; &lt;tt&gt;size()&lt;/tt&gt;.                    
                </param>
                <return>
                    The possibly null attribute value at index &lt;tt&gt;ix&lt;/tt&gt;;
                      null if the attribute value is null.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered while
                      retrieving the value.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException If &lt;tt&gt;ix&lt;/tt&gt; is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="remove" type="Object" line="277"/>
            <javadoc line="277">
                Removes an attribute value from the ordered list of attribute values.
                  This method removes the value at the &lt;tt&gt;ix&lt;/tt&gt; index of the list of
                  attribute values.
                  If the attribute values are unordered,
                  this method removes the value that happens to be at that index.
                  Values located at indices greater than &lt;tt&gt;ix&lt;/tt&gt; are shifted up towards
                  the front of the list (and their indices decremented by one).                
                <param>
                    ix The index of the value to remove.
                      0 &lt;= &lt;tt&gt;ix&lt;/tt&gt; &lt; &lt;tt&gt;size()&lt;/tt&gt;.                    
                </param>
                <return>
                    The possibly null attribute value at index &lt;tt&gt;ix&lt;/tt&gt; that was removed;
                      null if the attribute value is null.                    
                </return>
                <exception>
                    IndexOutOfBoundsException If &lt;tt&gt;ix&lt;/tt&gt; is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="294"/>
            <javadoc line="294">
                Adds an attribute value to the ordered list of attribute values.
                  This method adds &lt;tt&gt;attrVal&lt;/tt&gt; to the list of attribute values at
                  index &lt;tt&gt;ix&lt;/tt&gt;.
                  Values located at indices at or greater than &lt;tt&gt;ix&lt;/tt&gt; are
                  shifted down towards the end of the list (and their indices incremented
                  by one).
                  If the attribute values are unordered and already have &lt;tt&gt;attrVal&lt;/tt&gt;,
                  &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.                
                <param>
                    ix The index in the ordered list of attribute values to add the new value.
                      0 &lt;= &lt;tt&gt;ix&lt;/tt&gt; &lt;= &lt;tt&gt;size()&lt;/tt&gt;.                    
                </param>
                <param>
                    attrVal The possibly null attribute value to add; if null, null is
                      the value added.                    
                </param>
                <exception>
                    IndexOutOfBoundsException If &lt;tt&gt;ix&lt;/tt&gt; is outside the specified range.                    
                </exception>
                <exception>
                    IllegalStateException If the attribute values are unordered and
                      &lt;tt&gt;attrVal&lt;/tt&gt; is one of those values.                    
                </exception>
            </javadoc>
            <method name="set" type="Object" line="315"/>
            <javadoc line="315">
                Sets an attribute value in the ordered list of attribute values.
                  This method sets the value at the &lt;tt&gt;ix&lt;/tt&gt; index of the list of
                  attribute values to be &lt;tt&gt;attrVal&lt;/tt&gt;. The old value is removed.
                  If the attribute values are unordered,
                  this method sets the value that happens to be at that index
                  to &lt;tt&gt;attrVal&lt;/tt&gt;, unless &lt;tt&gt;attrVal&lt;/tt&gt; is already one of the values.
                  In that case, &lt;tt&gt;IllegalStateException&lt;/tt&gt; is thrown.                
                <param>
                    ix The index of the value in the ordered list of attribute values.
                      0 &lt;= &lt;tt&gt;ix&lt;/tt&gt; &lt; &lt;tt&gt;size()&lt;/tt&gt;.                    
                </param>
                <param>
                    attrVal The possibly null attribute value to use.
                      If null, &apos;null&apos; replaces the old value.                    
                </param>
                <return>
                    The possibly null attribute value at index ix that was replaced.
                      Null if the attribute value was null.                    
                </return>
                <exception>
                    IndexOutOfBoundsException If &lt;tt&gt;ix&lt;/tt&gt; is outside the specified range.                    
                </exception>
                <exception>
                    IllegalStateException If &lt;tt&gt;attrVal&lt;/tt&gt; already exists and the
                      attribute values are unordered.                    
                </exception>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="336"/>
            <javadoc line="336">
                Use serialVersionUID from JNDI 1.1.1 for interoperability.                
            </javadoc>
        </interface>
    </source>