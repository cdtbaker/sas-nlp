<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.directory">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.lang.reflect.Array"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.NamingEnumeration"/>
        <import package="javax.naming.OperationNotSupportedException"/>
        <class name="BasicAttribute" line="37">
            <comment line="328">
                For finding first element that has a null in JDK1.1 Vector.
                 In the Java 2 platform, can just replace this with Vector.indexOf(target);                
            </comment>
            <comment line="436">
                ---- ordering methods                
            </comment>
            <comment line="471">
                ----------------- Schema methods                
            </comment>
            <comment line="494">
                ---- serialization methods                
            </comment>
            <implements interface="Attribute"/>
            <javadoc line="37">
                This class provides a basic implementation of the &lt;tt&gt;Attribute&lt;/tt&gt; interface.
                  &lt;p&gt;
                  This implementation does not support the schema methods
                  &lt;tt&gt;getAttributeDefinition()&lt;/tt&gt; and &lt;tt&gt;getAttributeSyntaxDefinition()&lt;/tt&gt;.
                  They simply throw &lt;tt&gt;OperationNotSupportedException&lt;/tt&gt;.
                  Subclasses of &lt;tt&gt;BasicAttribute&lt;/tt&gt; should override these methods if they
                  support them.
                  &lt;p&gt;
                  The &lt;tt&gt;BasicAttribute&lt;/tt&gt; class by default uses &lt;tt&gt;Object.equals()&lt;/tt&gt; to
                  determine equality of attribute values when testing for equality or
                  when searching for values, &lt;em&gt;except&lt;/em&gt; when the value is an array.
                  For an array, each element of the array is checked using &lt;tt&gt;Object.equals()&lt;/tt&gt;.
                  Subclasses of &lt;tt&gt;BasicAttribute&lt;/tt&gt; can make use of schema information
                  when doing similar equality checks by overriding methods
                  in which such use of schema is meaningful.
                  Similarly, the &lt;tt&gt;BasicAttribute&lt;/tt&gt; class by default returns the values passed to its
                  constructor and/or manipulated using the add/remove methods.
                  Subclasses of &lt;tt&gt;BasicAttribute&lt;/tt&gt; can override &lt;tt&gt;get()&lt;/tt&gt; and &lt;tt&gt;getAll()&lt;/tt&gt;
                  to get the values dynamically from the directory (or implement
                  the &lt;tt&gt;Attribute&lt;/tt&gt; interface directly instead of subclassing &lt;tt&gt;BasicAttribute&lt;/tt&gt;).
                  &lt;p&gt;
                  Note that updates to &lt;tt&gt;BasicAttribute&lt;/tt&gt; (such as adding or removing a value)
                  does not affect the corresponding representation of the attribute
                  in the directory.  Updates to the directory can only be effected
                  using operations in the &lt;tt&gt;DirContext&lt;/tt&gt; interface.
                  &lt;p&gt;
                  A &lt;tt&gt;BasicAttribute&lt;/tt&gt; instance is not synchronized against concurrent
                  multithreaded access. Multiple threads trying to access and modify a
                  &lt;tt&gt;BasicAttribute&lt;/tt&gt; should lock the object.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="attrID" type="String" line="73"/>
            <javadoc line="73">
                Holds the attribute&apos;s id. It is initialized by the public constructor and
                  cannot be null unless methods in BasicAttribute that use attrID
                  have been overridden.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="values" type="Vector&lt;Object&gt;" line="81"/>
            <javadoc line="81">
                Holds the attribute&apos;s values. Initialized by public constructors.
                  Cannot be null unless methods in BasicAttribute that use
                  values have been overridden.                
            </javadoc>
            <declaration name="ordered" type="boolean" line="88"/>
            <javadoc line="88">
                A flag for recording whether this attribute&apos;s values are ordered.                
                <serial>
                                        
                </serial>
            </javadoc>
            <method name="clone" type="Object" line="94">
                <declaration name="attr" type="BasicAttribute" line="95"/>
                <scope line="96"/>
                <scope line="98"/>
            </method>
            <javadoc line="105">
                Determines whether obj is equal to this attribute.
                  Two attributes are equal if their attribute-ids, syntaxes
                  and values are equal.
                  If the attribute values are unordered, the order that the values were added
                  are irrelevant. If the attribute values are ordered, then the
                  order the values must match.
                  If obj is null or not an Attribute, false is returned.
                  &lt;p&gt;
                  By default &lt;tt&gt;Object.equals()&lt;/tt&gt; is used when comparing the attribute
                  id and its values except when a value is an array. For an array,
                  each element of the array is checked using &lt;tt&gt;Object.equals()&lt;/tt&gt;.
                  A subclass may override this to make
                  use of schema syntax information and matching rules,
                  which define what it means for two attributes to be equal.
                  How and whether a subclass makes
                  use of the schema information is determined by the subclass.
                  If a subclass overrides &lt;tt&gt;equals()&lt;/tt&gt;, it should also override
                  &lt;tt&gt;hashCode()&lt;/tt&gt;
                  such that two attributes that are equal have the same hash code.                
                <param>
                    obj      The possibly null object to check.                    
                </param>
                <return>
                    true if obj is equal to this attribute; false otherwise.                    
                </return>
                <see>
                    #hashCode                    
                </see>
                <see>
                    #contains                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="131">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="136">
                    Check order first                    
                </comment>
                <comment line="145">
                    Go through both list of values                    
                </comment>
                <comment line="152">
                    order is not relevant; check for existence                    
                </comment>
                <scope line="132">
                    <declaration name="target" type="Attribute" line="133"/>
                    <scope line="136"/>
                    <declaration name="len" type="int" line="139"/>
                    <scope line="141">
                        <scope line="142">
                            <scope line="143">
                                <scope line="145">
                                    <scope line="146"/>
                                </scope>
                            </scope>
                            <scope line="150">
                                <declaration name="theirs" type="Enumeration" line="152"/>
                                <scope line="153"/>
                            </scope>
                        </scope>
                        <scope line="158"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="167">
                Calculates the hash code of this attribute.
                  &lt;p&gt;
                  The hash code is computed by adding the hash code of
                  the attribute&apos;s id and that of all of its values except for
                  values that are arrays.
                  For an array, the hash code of each element of the array is summed.
                  If a subclass overrides &lt;tt&gt;hashCode()&lt;/tt&gt;, it should override
                  &lt;tt&gt;equals()&lt;/tt&gt;
                  as well so that two attributes that are equal have the same hash code.                
                <return>
                    an int representing the hash code of this attribute.                    
                </return>
                <see>
                    #equals                    
                </see>
            </javadoc>
            <method name="hashCode" type="int" line="181">
                <declaration name="hash" type="int" line="182"/>
                <declaration name="num" type="int" line="183"/>
                <declaration name="val" type="Object" line="184"/>
                <scope line="185">
                    <scope line="187">
                        <scope line="188">
                            <declaration name="it" type="Object" line="189"/>
                            <declaration name="len" type="int" line="190"/>
                            <scope line="191">
                                <scope line="193"/>
                            </scope>
                        </scope>
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="205">
                Generates the string representation of this attribute.
                  The string consists of the attribute&apos;s id and its values.
                  This string is meant for debugging and not meant to be
                  interpreted programmatically.                
                <return>
                    The non-null string representation of this attribute.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="212">
                <declaration name="answer" type="StringBuffer" line="213"/>
                <scope line="214"/>
                <scope line="216">
                    <declaration name="start" type="boolean" line="217"/>
                    <scope line="218"/>
                </scope>
            </method>
            <javadoc line="228">
                Constructs a new instance of an unordered attribute with no value.                
                <param>
                    id The attribute's id. It cannot be null.                    
                </param>
            </javadoc>
            <method name="BasicAttribute" type="constructor" line="233">
                <params>
                    <param name="id" type="String"/>
                </params>
            </method>
            <javadoc line="237">
                Constructs a new instance of an unordered attribute with a single value.                
                <param>
                    id The attribute's id. It cannot be null.                    
                </param>
                <param>
                    value The attribute's value. If null, a null
                      value is added to the attribute.                    
                </param>
            </javadoc>
            <method name="BasicAttribute" type="constructor" line="244">
                <params>
                    <param name="id" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="248">
                Constructs a new instance of a possibly ordered attribute with no value.                
                <param>
                    id The attribute's id. It cannot be null.                    
                </param>
                <param>
                    ordered true means the attribute's values will be ordered;
                      false otherwise.                    
                </param>
            </javadoc>
            <method name="BasicAttribute" type="constructor" line="255">
                <params>
                    <param name="id" type="String"/>
                    <param name="ordered" type="boolean"/>
                </params>
            </method>
            <javadoc line="261">
                Constructs a new instance of a possibly ordered attribute with a
                  single value.                
                <param>
                    id The attribute's id. It cannot be null.                    
                </param>
                <param>
                    value The attribute's value. If null, a null
                      value is added to the attribute.                    
                </param>
                <param>
                    ordered true means the attribute's values will be ordered;
                      false otherwise.                    
                </param>
            </javadoc>
            <method name="BasicAttribute" type="constructor" line="271">
                <params>
                    <param name="id" type="String"/>
                    <param name="value" type="Object"/>
                    <param name="ordered" type="boolean"/>
                </params>
            </method>
            <javadoc line="276">
                Retrieves an enumeration of this attribute&apos;s values.
                  &lt;p&gt;
                  By default, the values returned are those passed to the
                  constructor and/or manipulated using the add/replace/remove methods.
                  A subclass may override this to retrieve the values dynamically
                  from the directory.                
            </javadoc>
            <method name="getAll" type="NamingEnumeration<?>" line="284"/>
            <javadoc line="288">
                Retrieves one of this attribute&apos;s values.
                  &lt;p&gt;
                  By default, the value returned is one of those passed to the
                  constructor and/or manipulated using the add/replace/remove methods.
                  A subclass may override this to retrieve the value dynamically
                  from the directory.                
            </javadoc>
            <method name="get" type="Object" line="296">
                <scope line="297"/>
                <scope line="300"/>
            </method>
            <method name="size" type="int" line="305"/>
            <method name="getID" type="String" line="309"/>
            <javadoc line="313">
                Determines whether a value is in this attribute.
                  &lt;p&gt;
                  By default,
                  &lt;tt&gt;Object.equals()&lt;/tt&gt; is used when comparing &lt;tt&gt;attrVal&lt;/tt&gt;
                  with this attribute&apos;s values except when &lt;tt&gt;attrVal&lt;/tt&gt; is an array.
                  For an array, each element of the array is checked using
                  &lt;tt&gt;Object.equals()&lt;/tt&gt;.
                  A subclass may use schema information to determine equality.                
            </javadoc>
            <method name="contains" type="boolean" line="323">
                <params>
                    <param name="attrVal" type="Object"/>
                </params>
            </method>
            <method name="find" type="int" line="329">
                <params>
                    <param name="target" type="Object"/>
                </params>
                <comment line="350">
                    not found                    
                </comment>
                <declaration name="cl" type="Class" line="330"/>
                <scope line="331">
                    <declaration name="ct" type="int" line="332"/>
                    <scope line="333"/>
                </scope>
                <scope line="337">
                    <declaration name="ct" type="int" line="338"/>
                    <declaration name="it" type="Object" line="339"/>
                    <scope line="340"/>
                </scope>
                <scope line="346"/>
            </method>
            <javadoc line="352">
                Determines whether two attribute values are equal.
                  Use arrayEquals for arrays and &lt;tt&gt;Object.equals()&lt;/tt&gt; otherwise.                
            </javadoc>
            <method name="valueEquals" type="boolean" line="356">
                <params>
                    <param name="obj1" type="Object"/>
                    <param name="obj2" type="Object"/>
                </params>
                <comment line="359">
                    object references are equal                    
                </comment>
                <comment line="362">
                    obj2 was not false                    
                </comment>
                <scope line="357"/>
                <scope line="360"/>
                <scope line="364"/>
            </method>
            <javadoc line="370">
                Determines whether two arrays are equal by comparing each of their
                  elements using &lt;tt&gt;Object.equals()&lt;/tt&gt;.                
            </javadoc>
            <method name="arrayEquals" type="boolean" line="374">
                <params>
                    <param name="a1" type="Object"/>
                    <param name="a2" type="Object"/>
                </params>
                <declaration name="len" type="int" line="375"/>
                <scope line="379">
                    <declaration name="i1" type="Object" line="380"/>
                    <declaration name="i2" type="Object" line="381"/>
                    <scope line="382"/>
                    <scope line="385"/>
                </scope>
            </method>
            <javadoc line="392">
                Adds a new value to this attribute.
                  &lt;p&gt;
                  By default, &lt;tt&gt;Object.equals()&lt;/tt&gt; is used when comparing &lt;tt&gt;attrVal&lt;/tt&gt;
                  with this attribute&apos;s values except when &lt;tt&gt;attrVal&lt;/tt&gt; is an array.
                  For an array, each element of the array is checked using
                  &lt;tt&gt;Object.equals()&lt;/tt&gt;.
                  A subclass may use schema information to determine equality.                
            </javadoc>
            <method name="add" type="boolean" line="401">
                <params>
                    <param name="attrVal" type="Object"/>
                </params>
                <scope line="402"/>
                <scope line="405"/>
            </method>
            <javadoc line="410">
                Removes a specified value from this attribute.
                  &lt;p&gt;
                  By default, &lt;tt&gt;Object.equals()&lt;/tt&gt; is used when comparing &lt;tt&gt;attrVal&lt;/tt&gt;
                  with this attribute&apos;s values except when &lt;tt&gt;attrVal&lt;/tt&gt; is an array.
                  For an array, each element of the array is checked using
                  &lt;tt&gt;Object.equals()&lt;/tt&gt;.
                  A subclass may use schema information to determine equality.                
            </javadoc>
            <method name="remove" type="boolean" line="419">
                <params>
                    <param name="attrval" type="Object"/>
                </params>
                <comment line="421">
                    For the Java 2 platform, can just use &quot;return removeElement(attrval);&quot;
                     Need to do the following to handle null case                    
                </comment>
                <declaration name="i" type="int" line="423"/>
                <scope line="424"/>
            </method>
            <method name="clear" type="void" line="431"/>
            <method name="isOrdered" type="boolean" line="437"/>
            <method name="get" type="Object" line="441">
                <params>
                    <param name="ix" type="int"/>
                </params>
            </method>
            <method name="remove" type="Object" line="445">
                <params>
                    <param name="ix" type="int"/>
                </params>
                <declaration name="answer" type="Object" line="446"/>
            </method>
            <method name="add" type="void" line="451">
                <params>
                    <param name="ix" type="int"/>
                    <param name="attrVal" type="Object"/>
                </params>
                <scope line="452"/>
            </method>
            <method name="set" type="Object" line="459">
                <params>
                    <param name="ix" type="int"/>
                    <param name="attrVal" type="Object"/>
                </params>
                <scope line="460"/>
                <declaration name="answer" type="Object" line="465"/>
            </method>
            <javadoc line="472">
                Retrieves the syntax definition associated with this attribute.
                  &lt;p&gt;
                  This method by default throws OperationNotSupportedException. A subclass
                  should override this method if it supports schema.                
            </javadoc>
            <method name="getAttributeSyntaxDefinition" type="DirContext" line="478"/>
            <javadoc line="482">
                Retrieves this attribute&apos;s schema definition.
                  &lt;p&gt;
                  This method by default throws OperationNotSupportedException. A subclass
                  should override this method if it supports schema.                
            </javadoc>
            <method name="getAttributeDefinition" type="DirContext" line="488"/>
            <javadoc line="495">
                Overridden to avoid exposing implementation details                
                <serialData>
                    Default field (the attribute ID -- a String),
                      followed by the number of values (an int), and the
                      individual values.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="502">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <comment line="504">
                    write out the attrID                    
                </comment>
                <scope line="505"/>
            </method>
            <javadoc line="510">
                Overridden to avoid exposing implementation details.                
            </javadoc>
            <method name="readObject" type="void" line="514">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="516">
                    read in the attrID                    
                </comment>
                <comment line="517">
                    number of values                    
                </comment>
                <declaration name="n" type="int" line="516"/>
                <scope line="518"/>
            </method>
            <class name="ValuesEnumImpl" line="524">
                <implements interface="NamingEnumeration">
                    <type_params>
                        <type_param name="Object"/>
                    </type_params>
                </implements>
                <declaration name="list" type="Enumeration" line="525"/>
                <method name="ValuesEnumImpl" type="constructor" line="527"/>
                <method name="hasMoreElements" type="boolean" line="531"/>
                <method name="nextElement" type="Object" line="535"/>
                <method name="next" type="Object" line="539"/>
                <method name="hasMore" type="boolean" line="543"/>
                <method name="close" type="void" line="547"/>
            </class>
            <declaration name="serialVersionUID" type="long" line="552"/>
            <javadoc line="552">
                Use serialVersionUID from JNDI 1.1.1 for interoperability.                
            </javadoc>
        </class>
    </source>