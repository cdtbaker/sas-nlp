<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Hashtable"/>
        <interface name="Context">
            <javadoc line="3">
                This interface represents a naming context, which
                  consists of a set of name-to-object bindings.
                  It contains methods for examining and updating these bindings.
                  &lt;p&gt;
                  &lt;h4&gt;Names&lt;/h4&gt;
                  Each name passed as an argument to a &lt;tt&gt;Context&lt;/tt&gt; method is relative
                  to that context.  The empty name is used to name the context itself.
                  A name parameter may never be null.
                  &lt;p&gt;
                  Most of the methods have overloaded versions with one taking a
                  &lt;code&gt;Name&lt;/code&gt; parameter and one taking a &lt;code&gt;String&lt;/code&gt;.
                  These overloaded versions are equivalent in that if
                  the &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt; parameters are just
                  different representations of the same name, then the overloaded
                  versions of the same methods behave the same.
                  In the method descriptions below, only one version is fully documented.
                  The second version instead has a link to the first:  the same
                  documentation applies to both.
                  &lt;p&gt;
                  For systems that support federation, &lt;tt&gt;String&lt;/tt&gt; name arguments to
                  &lt;tt&gt;Context&lt;/tt&gt; methods are composite names. Name arguments that are
                  instances of &lt;tt&gt;CompositeName&lt;/tt&gt; are treated as composite names,
                  while &lt;tt&gt;Name&lt;/tt&gt; arguments that are not instances of
                  &lt;tt&gt;CompositeName&lt;/tt&gt; are treated as compound names (which might be
                  instances of &lt;tt&gt;CompoundName&lt;/tt&gt; or other implementations of compound
                  names). This allows the results of &lt;tt&gt;NameParser.parse()&lt;/tt&gt; to be used as
                  arguments to the &lt;tt&gt;Context&lt;/tt&gt; methods.
                  Prior to JNDI 1.2, all name arguments were treated as composite names.
                  &lt;p&gt;
                  Furthermore, for systems that support federation, all names returned
                  in a &lt;tt&gt;NamingEnumeration&lt;/tt&gt;
                  from &lt;tt&gt;list()&lt;/tt&gt; and &lt;tt&gt;listBindings()&lt;/tt&gt; are composite names
                  represented as strings.
                  See &lt;tt&gt;CompositeName&lt;/tt&gt; for the string syntax of names.
                  &lt;p&gt;
                  For systems that do not support federation, the name arguments (in
                  either &lt;tt&gt;Name&lt;/tt&gt; or &lt;tt&gt;String&lt;/tt&gt; forms) and the names returned in
                  &lt;tt&gt;NamingEnumeration&lt;/tt&gt; may be names in their own namespace rather than
                  names in a composite namespace, at the discretion of the service
                  provider.
                  &lt;p&gt;
                  &lt;h4&gt;Exceptions&lt;/h4&gt;
                  All the methods in this interface can throw a &lt;tt&gt;NamingException&lt;/tt&gt; or
                  any of its subclasses. See &lt;tt&gt;NamingException&lt;/tt&gt; and their subclasses
                  for details on each exception.
                  &lt;p&gt;
                  &lt;h4&gt;Concurrent Access&lt;/h4&gt;
                  A Context instance is not guaranteed to be synchronized against
                  concurrent access by multiple threads.  Threads that need to access
                  a single Context instance concurrently should synchronize amongst
                  themselves and provide the necessary locking.  Multiple threads
                  each manipulating a different Context instance need not
                  synchronize.  Note that the {@link #lookup(Name) &lt;tt&gt;lookup&lt;/tt&gt;}method, when passed an empty name, will return a new Context instance
                  representing the same naming context.
                  &lt;p&gt;
                  For purposes of concurrency control,
                  a Context operation that returns a &lt;tt&gt;NamingEnumeration&lt;/tt&gt; is
                  not considered to have completed while the enumeration is still in
                  use, or while any referrals generated by that operation are still
                  being followed.
                  &lt;p&gt;
                  &lt;h4&gt;Parameters&lt;/h4&gt;
                  A &lt;tt&gt;Name&lt;/tt&gt; parameter passed to any method of the
                  &lt;tt&gt;Context&lt;/tt&gt; interface or one of its subinterfaces
                  will not be modified by the service provider.
                  The service provider may keep a reference to it
                  for the duration of the operation, including any enumeration of the
                  method&apos;s results and the processing of any referrals generated.
                  The caller should not modify the object during this time.
                  A &lt;tt&gt;Name&lt;/tt&gt; returned by any such method is owned by the caller.
                  The caller may subsequently modify it; the service provider may not.
                  &lt;p&gt;
                  &lt;h4&gt;Environment Properties&lt;/h4&gt;
                  &lt;p&gt;
                  JNDI applications need a way to communicate various preferences
                  and properties that define the environment in which naming and
                  directory services are accessed. For example, a context might
                  require specification of security credentials in order to access
                  the service. Another context might require that server configuration
                  information be supplied. These are referred to as the &lt;em&gt;environment&lt;/em&gt;
                  of a context. The &lt;tt&gt;Context&lt;/tt&gt; interface provides methods for
                  retrieving and updating this environment.
                  &lt;p&gt;
                  The environment is inherited from the parent context as
                  context methods proceed from one context to the next. Changes to
                  the environment of one context do not directly affect those
                  of other contexts.
                  &lt;p&gt;
                  It is implementation-dependent when environment properties are used
                  and/or verified for validity.  For example, some of the
                  security-related properties are used by service providers to &quot;log in&quot;
                  to the directory.  This login process might occur at the time the
                  context is created, or the first time a method is invoked on the
                  context.  When, and whether this occurs at all, is
                  implementation-dependent.  When environment properties are added or
                  removed from the context, verifying the validity of the changes is again
                  implementation-dependent. For example, verification of some properties
                  might occur at the time the change is made, or at the time the next
                  operation is performed on the context, or not at all.
                  &lt;p&gt;
                  Any object with a reference to a context may examine that context&apos;s
                  environment.  Sensitive information such as clear-text
                  passwords should not be stored there unless the implementation is
                  known to protect it.
                  &lt;p&gt;
                  &lt;a name=RESOURCEFILES&gt;&lt;/a&gt;
                  &lt;h4&gt;Resource Files&lt;/h4&gt;
                  &lt;p&gt;
                  To simplify the task of setting up the environment
                  required by a JNDI application,
                  application components and service providers may be distributed
                  along with &lt;em&gt;resource files.&lt;/em&gt;
                  A JNDI resource file is a file in the properties file format (see{@link java.util.Properties#load &lt;tt&gt;java.util.Properties&lt;/tt&gt;}),
                  containing a list of key/value pairs.
                  The key is the name of the property (e.g. &quot;java.naming.factory.object&quot;)
                  and the value is a string in the format defined
                  for that property.  Here is an example of a JNDI resource file:
                  &lt;blockquote&gt;&lt;tt&gt;&lt;pre&gt;
                  java.naming.factory.object=com.sun.jndi.ldap.AttrsToCorba:com.wiz.from.Person
                  java.naming.factory.state=com.sun.jndi.ldap.CorbaToAttrs:com.wiz.from.Person
                  java.naming.factory.control=com.sun.jndi.ldap.ResponseControlFactory
                  &lt;/pre&gt;&lt;/tt&gt;&lt;/blockquote&gt;
                  The JNDI class library reads the resource files and makes the property
                  values freely available.  Thus JNDI resource files should be considered
                  to be &quot;world readable&quot;, and sensitive information such as clear-text
                  passwords should not be stored there.
                  &lt;p&gt;
                  There are two kinds of JNDI resource files:
                  &lt;em&gt;provider&lt;/em&gt; and &lt;em&gt;application&lt;/em&gt;.
                  &lt;h5&gt;Provider Resource Files&lt;/h5&gt;
                  Each service provider has an optional resource that lists properties
                  specific to that provider.  The name of this resource is:
                  &lt;blockquote&gt;
                  [&lt;em&gt;prefix&lt;/em&gt;/]&lt;tt&gt;jndiprovider.properties&lt;/tt&gt;
                  &lt;/blockquote&gt;
                  where &lt;em&gt;prefix&lt;/em&gt; is
                  the package name of the provider&apos;s context implementation(s),
                  with each period (&quot;.&quot;) converted to a slash (&quot;/&quot;).
                  For example, suppose a service provider defines a context
                  implementation with class name &lt;tt&gt;com.sun.jndi.ldap.LdapCtx&lt;/tt&gt;.
                  The provider resource for this provider is named
                  &lt;tt&gt;com/sun/jndi/ldap/jndiprovider.properties&lt;/tt&gt;.  If the class is
                  not in a package, the resource&apos;s name is simply
                  &lt;tt&gt;jndiprovider.properties&lt;/tt&gt;.
                  &lt;p&gt;
                  &lt;a name=LISTPROPS&gt;&lt;/a&gt;
                  Certain methods in the JNDI class library make use of the standard
                  JNDI properties that specify lists of JNDI factories:
                  &lt;ul&gt;
                  &lt;li&gt;java.naming.factory.object
                  &lt;li&gt;java.naming.factory.state
                  &lt;li&gt;java.naming.factory.control
                  &lt;li&gt;java.naming.factory.url.pkgs
                  &lt;/ul&gt;
                  The JNDI library will consult the provider resource file
                  when determining the values of these properties.
                  Properties other than these may be set in the provider
                  resource file at the discretion of the service provider.
                  The service provider&apos;s documentation should clearly state which
                  properties are allowed; other properties in the file will be ignored.
                  &lt;h5&gt;Application Resource Files&lt;/h5&gt;
                  When an application is deployed, it will generally have several
                  codebase directories and JARs in its classpath.  Similarly, when an
                  applet is deployed, it will have a codebase and archives specifying
                  where to find the applet&apos;s classes.  JNDI locates (using{@link ClassLoader#getResources &lt;tt&gt;ClassLoader.getResources()&lt;/tt&gt;})
                  all &lt;em&gt;application resource files&lt;/em&gt; named &lt;tt&gt;jndi.properties&lt;/tt&gt;
                  in the classpath.
                  In addition, if the file &lt;i&gt;java.home&lt;/i&gt;&lt;tt&gt;/lib/jndi.properties&lt;/tt&gt;
                  exists and is readable,
                  JNDI treats it as an additional application resource file.
                  (&lt;i&gt;java.home&lt;/i&gt; indicates the
                  directory named by the &lt;tt&gt;java.home&lt;/tt&gt; system property.)
                  All of the properties contained in these files are placed
                  into the environment of the initial context.  This environment
                  is then inherited by other contexts.
                  &lt;p&gt;
                  For each property found in more than one application resource file,
                  JNDI uses the first value found or, in a few cases where it makes
                  sense to do so, it concatenates all of the values (details are given
                  below).
                  For example, if the &quot;java.naming.factory.object&quot; property is found in
                  three &lt;tt&gt;jndi.properties&lt;/tt&gt; resource files, the
                  list of object factories is a concatenation of the property
                  values from all three files.
                  Using this scheme, each deployable component is responsible for
                  listing the factories that it exports.  JNDI automatically
                  collects and uses all of these export lists when searching for factory
                  classes.
                  &lt;h5&gt;Search Algorithm for Properties&lt;/h5&gt;
                  When JNDI constructs an initial context, the context&apos;s environment
                  is initialized with properties defined in the environment parameter
                  passed to the constructor, the system properties, the applet parameters,
                  and the application resource files.  See
                  &lt;a href=InitialContext.html#ENVIRONMENT&gt;&lt;tt&gt;InitialContext&lt;/tt&gt;&lt;/a&gt;
                  for details.
                  This initial environment is then inherited by other context instances.
                  &lt;p&gt;
                  When the JNDI class library needs to determine
                  the value of a property, it does so by merging
                  the values from the following two sources, in order:
                  &lt;ol&gt;
                  &lt;li&gt;The environment of the context being operated on.
                  &lt;li&gt;The provider resource file (&lt;tt&gt;jndiprovider.properties&lt;/tt&gt;)
                  for the context being operated on.
                  &lt;/ol&gt;
                  For each property found in both of these two sources,
                  JNDI determines the property&apos;s value as follows.  If the property is
                  one of the standard JNDI properties that specify a list of JNDI
                  factories (listed &lt;a href=#LISTPROPS&gt;above&lt;/a&gt;), the values are
                  concatenated into a single colon-separated list.  For other
                  properties, only the first value found is used.
                  &lt;p&gt;
                  When a service provider needs to determine the value of a property,
                  it will generally take that value directly from the environment.
                  A service provider may define provider-specific properties
                  to be placed in its own provider resource file.  In that
                  case it should merge values as described in the previous paragraph.
                  &lt;p&gt;
                  In this way, each service provider developer can specify a list of
                  factories to use with that service provider. These can be modified by
                  the application resources specified by the deployer of the application
                  or applet, which in turn can be modified by the user.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <author>
                    R. Vasudevan                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="lookup" type="Object" line="232"/>
            <javadoc line="232">
                Retrieves the named object.
                  If &lt;tt&gt;name&lt;/tt&gt; is empty, returns a new instance of this context
                  (which represents the same naming context as this context, but its
                  environment may be modified independently and it may be accessed
                  concurrently).                
                <param>
                    namethe name of the object to look up                    
                </param>
                <return>
                    the object bound to <tt>name</tt>                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #lookup(String)                    
                </see>
                <see>
                    #lookupLink(Name)                    
                </see>
            </javadoc>
            <method name="lookup" type="Object" line="245"/>
            <javadoc line="245">
                Retrieves the named object.
                  See {@link #lookup(Name)} for details.                
                <param>
                    namethe name of the object to look up                    
                </param>
                <return>
                    the object bound to <tt>name</tt>                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="bind" type="void" line="253"/>
            <javadoc line="253">
                Binds a name to an object.
                  All intermediate contexts and the target context (that named by all
                  but terminal atomic component of the name) must already exist.                
                <param>
                    namethe name to bind; may not be empty                    
                </param>
                <param>
                    objthe object to bind; possibly null                    
                </param>
                <throws>
                    NameAlreadyBoundException if name is already bound                    
                </throws>
                <throws>
                    javax.naming.directory.InvalidAttributesExceptionif object did not supply all mandatory attributes                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #bind(String,Object)                    
                </see>
                <see>
                    #rebind(Name,Object)                    
                </see>
                <see>
                    javax.naming.directory.DirContext#bind(Name,Object,javax.naming.directory.Attributes)                    
                </see>
            </javadoc>
            <method name="bind" type="void" line="267"/>
            <javadoc line="267">
                Binds a name to an object.
                  See {@link #bind(Name,Object)} for details.                
                <param>
                    namethe name to bind; may not be empty                    
                </param>
                <param>
                    objthe object to bind; possibly null                    
                </param>
                <throws>
                    NameAlreadyBoundException if name is already bound                    
                </throws>
                <throws>
                    javax.naming.directory.InvalidAttributesExceptionif object did not supply all mandatory attributes                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="rebind" type="void" line="277"/>
            <javadoc line="277">
                Binds a name to an object, overwriting any existing binding.
                  All intermediate contexts and the target context (that named by all
                  but terminal atomic component of the name) must already exist.
                  &lt;p&gt; If the object is a &lt;tt&gt;DirContext&lt;/tt&gt;, any existing attributes
                  associated with the name are replaced with those of the object.
                  Otherwise, any existing attributes associated with the name remain
                  unchanged.                
                <param>
                    namethe name to bind; may not be empty                    
                </param>
                <param>
                    objthe object to bind; possibly null                    
                </param>
                <throws>
                    javax.naming.directory.InvalidAttributesExceptionif object did not supply all mandatory attributes                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #rebind(String,Object)                    
                </see>
                <see>
                    #bind(Name,Object)                    
                </see>
                <see>
                    javax.naming.directory.DirContext#rebind(Name,Object,javax.naming.directory.Attributes)                    
                </see>
                <see>
                    javax.naming.directory.DirContext                    
                </see>
            </javadoc>
            <method name="rebind" type="void" line="295"/>
            <javadoc line="295">
                Binds a name to an object, overwriting any existing binding.
                  See {@link #rebind(Name,Object)} for details.                
                <param>
                    namethe name to bind; may not be empty                    
                </param>
                <param>
                    objthe object to bind; possibly null                    
                </param>
                <throws>
                    javax.naming.directory.InvalidAttributesExceptionif object did not supply all mandatory attributes                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="unbind" type="void" line="304"/>
            <javadoc line="304">
                Unbinds the named object.
                  Removes the terminal atomic name in &lt;code&gt;name&lt;/code&gt;
                  from the target context--that named by all but the terminal
                  atomic part of &lt;code&gt;name&lt;/code&gt;.
                  &lt;p&gt; This method is idempotent.
                  It succeeds even if the terminal atomic name
                  is not bound in the target context, but throws
                  &lt;tt&gt;NameNotFoundException&lt;/tt&gt;
                  if any of the intermediate contexts do not exist.
                  &lt;p&gt; Any attributes associated with the name are removed.
                  Intermediate contexts are not changed.                
                <param>
                    namethe name to unbind; may not be empty                    
                </param>
                <throws>
                    NameNotFoundException if an intermediate context does not exist                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #unbind(String)                    
                </see>
            </javadoc>
            <method name="unbind" type="void" line="322"/>
            <javadoc line="322">
                Unbinds the named object.
                  See {@link #unbind(Name)} for details.                
                <param>
                    namethe name to unbind; may not be empty                    
                </param>
                <throws>
                    NameNotFoundException if an intermediate context does not exist                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="rename" type="void" line="330"/>
            <javadoc line="330">
                Binds a new name to the object bound to an old name, and unbinds
                  the old name.  Both names are relative to this context.
                  Any attributes associated with the old name become associated
                  with the new name.
                  Intermediate contexts of the old name are not changed.                
                <param>
                    oldNamethe name of the existing binding; may not be empty                    
                </param>
                <param>
                    newNamethe name of the new binding; may not be empty                    
                </param>
                <throws>
                    NameAlreadyBoundException if <tt>newName</tt> is already bound                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #rename(String,String)                    
                </see>
                <see>
                    #bind(Name,Object)                    
                </see>
                <see>
                    #rebind(Name,Object)                    
                </see>
            </javadoc>
            <method name="rename" type="void" line="345"/>
            <javadoc line="345">
                Binds a new name to the object bound to an old name, and unbinds
                  the old name.
                  See {@link #rename(Name,Name)} for details.                
                <param>
                    oldNamethe name of the existing binding; may not be empty                    
                </param>
                <param>
                    newNamethe name of the new binding; may not be empty                    
                </param>
                <throws>
                    NameAlreadyBoundException if <tt>newName</tt> is already bound                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="list" type="NamingEnumeration<NameClassPair>" line="355"/>
            <javadoc line="355">
                Enumerates the names bound in the named context, along with the
                  class names of objects bound to them.
                  The contents of any subcontexts are not included.
                  &lt;p&gt; If a binding is added to or removed from this context,
                  its effect on an enumeration previously returned is undefined.                
                <param>
                    namethe name of the context to list                    
                </param>
                <return>
                    an enumeration of the names and class names of the
                      bindings in this context.  Each element of the
                      enumeration is of type <tt>NameClassPair</tt>.                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #list(String)                    
                </see>
                <see>
                    #listBindings(Name)                    
                </see>
                <see>
                    NameClassPair                    
                </see>
            </javadoc>
            <method name="list" type="NamingEnumeration<NameClassPair>" line="371"/>
            <javadoc line="371">
                Enumerates the names bound in the named context, along with the
                  class names of objects bound to them.
                  See {@link #list(Name)} for details.                
                <param>
                    namethe name of the context to list                    
                </param>
                <return>
                    an enumeration of the names and class names of the
                      bindings in this context.  Each element of the
                      enumeration is of type <tt>NameClassPair</tt>.                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="listBindings" type="NamingEnumeration<Binding>" line="382"/>
            <javadoc line="382">
                Enumerates the names bound in the named context, along with the
                  objects bound to them.
                  The contents of any subcontexts are not included.
                  &lt;p&gt; If a binding is added to or removed from this context,
                  its effect on an enumeration previously returned is undefined.                
                <param>
                    namethe name of the context to list                    
                </param>
                <return>
                    an enumeration of the bindings in this context.
                      Each element of the enumeration is of type
                      <tt>Binding</tt>.                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #listBindings(String)                    
                </see>
                <see>
                    #list(Name)                    
                </see>
                <see>
                    Binding                    
                </see>
            </javadoc>
            <method name="listBindings" type="NamingEnumeration<Binding>" line="398"/>
            <javadoc line="398">
                Enumerates the names bound in the named context, along with the
                  objects bound to them.
                  See {@link #listBindings(Name)} for details.                
                <param>
                    namethe name of the context to list                    
                </param>
                <return>
                    an enumeration of the bindings in this context.
                      Each element of the enumeration is of type
                      <tt>Binding</tt>.                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="destroySubcontext" type="void" line="409"/>
            <javadoc line="409">
                Destroys the named context and removes it from the namespace.
                  Any attributes associated with the name are also removed.
                  Intermediate contexts are not destroyed.
                  &lt;p&gt; This method is idempotent.
                  It succeeds even if the terminal atomic name
                  is not bound in the target context, but throws
                  &lt;tt&gt;NameNotFoundException&lt;/tt&gt;
                  if any of the intermediate contexts do not exist.
                  &lt;p&gt; In a federated naming system, a context from one naming system
                  may be bound to a name in another.  One can subsequently
                  look up and perform operations on the foreign context using a
                  composite name.  However, an attempt destroy the context using
                  this composite name will fail with
                  &lt;tt&gt;NotContextException&lt;/tt&gt;, because the foreign context is not
                  a &quot;subcontext&quot; of the context in which it is bound.
                  Instead, use &lt;tt&gt;unbind()&lt;/tt&gt; to remove the
                  binding of the foreign context.  Destroying the foreign context
                  requires that the &lt;tt&gt;destroySubcontext()&lt;/tt&gt; be performed
                  on a context from the foreign context&apos;s &quot;native&quot; naming system.                
                <param>
                    namethe name of the context to be destroyed; may not be empty                    
                </param>
                <throws>
                    NameNotFoundException if an intermediate context does not exist                    
                </throws>
                <throws>
                    NotContextException if the name is bound but does not name a
                      context, or does not name a context of the appropriate type                    
                </throws>
                <throws>
                    ContextNotEmptyException if the named context is not empty                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #destroySubcontext(String)                    
                </see>
            </javadoc>
            <method name="destroySubcontext" type="void" line="438"/>
            <javadoc line="438">
                Destroys the named context and removes it from the namespace.
                  See {@link #destroySubcontext(Name)} for details.                
                <param>
                    namethe name of the context to be destroyed; may not be empty                    
                </param>
                <throws>
                    NameNotFoundException if an intermediate context does not exist                    
                </throws>
                <throws>
                    NotContextException if the name is bound but does not name a
                      context, or does not name a context of the appropriate type                    
                </throws>
                <throws>
                    ContextNotEmptyException if the named context is not empty                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="createSubcontext" type="Context" line="449"/>
            <javadoc line="449">
                Creates and binds a new context.
                  Creates a new context with the given name and binds it in
                  the target context (that named by all but terminal atomic
                  component of the name).  All intermediate contexts and the
                  target context must already exist.                
                <param>
                    namethe name of the context to create; may not be empty                    
                </param>
                <return>
                    the newly created context                    
                </return>
                <throws>
                    NameAlreadyBoundException if name is already bound                    
                </throws>
                <throws>
                    javax.naming.directory.InvalidAttributesExceptionif creation of the subcontext requires specification of
                      mandatory attributes                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #createSubcontext(String)                    
                </see>
                <see>
                    javax.naming.directory.DirContext#createSubcontext                    
                </see>
            </javadoc>
            <method name="createSubcontext" type="Context" line="465"/>
            <javadoc line="465">
                Creates and binds a new context.
                  See {@link #createSubcontext(Name)} for details.                
                <param>
                    namethe name of the context to create; may not be empty                    
                </param>
                <return>
                    the newly created context                    
                </return>
                <throws>
                    NameAlreadyBoundException if name is already bound                    
                </throws>
                <throws>
                    javax.naming.directory.InvalidAttributesExceptionif creation of the subcontext requires specification of
                      mandatory attributes                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="lookupLink" type="Object" line="476"/>
            <javadoc line="476">
                Retrieves the named object, following links except
                  for the terminal atomic component of the name.
                  If the object bound to &lt;tt&gt;name&lt;/tt&gt; is not a link,
                  returns the object itself.                
                <param>
                    namethe name of the object to look up                    
                </param>
                <return>
                    the object bound to <tt>name</tt>, not following the
                      terminal link (if any).                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #lookupLink(String)                    
                </see>
            </javadoc>
            <method name="lookupLink" type="Object" line="488"/>
            <javadoc line="488">
                Retrieves the named object, following links except
                  for the terminal atomic component of the name.
                  See {@link #lookupLink(Name)} for details.                
                <param>
                    namethe name of the object to look up                    
                </param>
                <return>
                    the object bound to <tt>name</tt>, not following the
                      terminal link (if any)                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="getNameParser" type="NameParser" line="498"/>
            <javadoc line="498">
                Retrieves the parser associated with the named context.
                  In a federation of namespaces, different naming systems will
                  parse names differently.  This method allows an application
                  to get a parser for parsing names into their atomic components
                  using the naming convention of a particular naming system.
                  Within any single naming system, &lt;tt&gt;NameParser&lt;/tt&gt; objects
                  returned by this method must be equal (using the &lt;tt&gt;equals()&lt;/tt&gt;
                  test).                
                <param>
                    namethe name of the context from which to get the parser                    
                </param>
                <return>
                    a name parser that can parse compound names into their atomic
                      components                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #getNameParser(String)                    
                </see>
                <see>
                    CompoundName                    
                </see>
            </javadoc>
            <method name="getNameParser" type="NameParser" line="515"/>
            <javadoc line="515">
                Retrieves the parser associated with the named context.
                  See {@link #getNameParser(Name)} for details.                
                <param>
                    namethe name of the context from which to get the parser                    
                </param>
                <return>
                    a name parser that can parse compound names into their atomic
                      components                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="composeName" type="Name" line="524"/>
            <javadoc line="524">
                Composes the name of this context with a name relative to
                  this context.
                  Given a name (&lt;code&gt;name&lt;/code&gt;) relative to this context, and
                  the name (&lt;code&gt;prefix&lt;/code&gt;) of this context relative to one
                  of its ancestors, this method returns the composition of the
                  two names using the syntax appropriate for the naming
                  system(s) involved.  That is, if &lt;code&gt;name&lt;/code&gt; names an
                  object relative to this context, the result is the name of the
                  same object, but relative to the ancestor context.  None of the
                  names may be null.
                  &lt;p&gt;
                  For example, if this context is named &quot;wiz.com&quot; relative
                  to the initial context, then
                  &lt;pre&gt;
                  composeName(&quot;east&quot;, &quot;wiz.com&quot;)  &lt;/pre&gt;
                  might return &lt;code&gt;&quot;east.wiz.com&quot;&lt;/code&gt;.
                  If instead this context is named &quot;org/research&quot;, then
                  &lt;pre&gt;
                  composeName(&quot;user/jane&quot;, &quot;org/research&quot;)        &lt;/pre&gt;
                  might return &lt;code&gt;&quot;org/research/user/jane&quot;&lt;/code&gt; while
                  &lt;pre&gt;
                  composeName(&quot;user/jane&quot;, &quot;research&quot;)    &lt;/pre&gt;
                  returns &lt;code&gt;&quot;research/user/jane&quot;&lt;/code&gt;.                
                <param>
                    namea name relative to this context                    
                </param>
                <param>
                    prefixthe name of this context relative to one of its ancestors                    
                </param>
                <return>
                    the composition of <code>prefix</code> and <code>name</code>                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #composeName(String,String)                    
                </see>
            </javadoc>
            <method name="composeName" type="String" line="555"/>
            <javadoc line="555">
                Composes the name of this context with a name relative to
                  this context.
                  See {@link #composeName(Name,Name)} for details.                
                <param>
                    namea name relative to this context                    
                </param>
                <param>
                    prefixthe name of this context relative to one of its ancestors                    
                </param>
                <return>
                    the composition of <code>prefix</code> and <code>name</code>                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="addToEnvironment" type="Object" line="565"/>
            <javadoc line="565">
                Adds a new environment property to the environment of this
                  context.  If the property already exists, its value is overwritten.
                  See class description for more details on environment properties.                
                <param>
                    propNamethe name of the environment property to add; may not be null                    
                </param>
                <param>
                    propValthe value of the property to add; may not be null                    
                </param>
                <return>
                    the previous value of the property, or null if the property was
                      not in the environment before                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #getEnvironment()                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <method name="removeFromEnvironment" type="Object" line="578"/>
            <javadoc line="578">
                Removes an environment property from the environment of this
                  context.  See class description for more details on environment
                  properties.                
                <param>
                    propNamethe name of the environment property to remove; may not be null                    
                </param>
                <return>
                    the previous value of the property, or null if the property was
                      not in the environment                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #getEnvironment()                    
                </see>
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
            </javadoc>
            <method name="getEnvironment" type="Hashtable<?,?>" line="590"/>
            <javadoc line="590">
                Retrieves the environment in effect for this context.
                  See class description for more details on environment properties.
                  &lt;p&gt; The caller should not make any changes to the object returned:
                  their effect on the context is undefined.
                  The environment of this context may be changed using
                  &lt;tt&gt;addToEnvironment()&lt;/tt&gt; and &lt;tt&gt;removeFromEnvironment()&lt;/tt&gt;.                
                <return>
                    the environment of this context; never null                    
                </return>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <method name="close" type="void" line="603"/>
            <javadoc line="603">
                Closes this context.
                  This method releases this context&apos;s resources immediately, instead of
                  waiting for them to be released automatically by the garbage collector.
                  &lt;p&gt; This method is idempotent:  invoking it on a context that has
                  already been closed has no effect.  Invoking any other method
                  on a closed context is not allowed, and results in undefined behaviour.                
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
            </javadoc>
            <method name="getNameInNamespace" type="String" line="613"/>
            <javadoc line="613">
                Retrieves the full name of this context within its own namespace.
                  &lt;p&gt; Many naming services have a notion of a &quot;full name&quot; for objects
                  in their respective namespaces.  For example, an LDAP entry has
                  a distinguished name, and a DNS record has a fully qualified name.
                  This method allows the client application to retrieve this name.
                  The string returned by this method is not a JNDI composite name
                  and should not be passed directly to context methods.
                  In naming systems for which the notion of full name does not
                  make sense, &lt;tt&gt;OperationNotSupportedException&lt;/tt&gt; is thrown.                
                <return>
                    this context's name in its own namespace; never null                    
                </return>
                <throws>
                    OperationNotSupportedException if the naming system does
                      not have the notion of a full name                    
                </throws>
                <throws>
                    NamingException if a naming exception is encountered                    
                </throws>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="INITIAL_CONTEXT_FACTORY" type="String" line="630"/>
            <javadoc line="630">
                Constant that holds the name of the environment property
                  for specifying the initial context factory to use. The value
                  of the property should be the fully qualified class name
                  of the factory class that will create an initial context.
                  This property may be specified in the environment parameter
                  passed to the initial context constructor, an applet parameter,
                  a system property, or an application resource file.
                  If it is not specified in any of these sources,
                  &lt;tt&gt;NoInitialContextException&lt;/tt&gt; is thrown when an initial
                  context is required to complete an operation.
                  &lt;p&gt; The value of this constant is &quot;java.naming.factory.initial&quot;.                
                <see>
                    InitialContext                    
                </see>
                <see>
                    javax.naming.directory.InitialDirContext                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getInitialContext                    
                </see>
                <see>
                    javax.naming.spi.InitialContextFactory                    
                </see>
                <see>
                    NoInitialContextException                    
                </see>
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
                <see>
                    #APPLET                    
                </see>
            </javadoc>
            <declaration name="OBJECT_FACTORIES" type="String" line="652"/>
            <javadoc line="652">
                Constant that holds the name of the environment property
                  for specifying the list of object factories to use. The value
                  of the property should be a colon-separated list of the fully
                  qualified class names of factory classes that will create an object
                  given information about the object.
                  This property may be specified in the environment, an applet
                  parameter, a system property, or one or more resource files.
                  &lt;p&gt; The value of this constant is &quot;java.naming.factory.object&quot;.                
                <see>
                    javax.naming.spi.NamingManager#getObjectInstance                    
                </see>
                <see>
                    javax.naming.spi.ObjectFactory                    
                </see>
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
                <see>
                    #APPLET                    
                </see>
            </javadoc>
            <declaration name="STATE_FACTORIES" type="String" line="668"/>
            <javadoc line="668">
                Constant that holds the name of the environment property
                  for specifying the list of state factories to use. The value
                  of the property should be a colon-separated list of the fully
                  qualified class names of state factory classes that will be used
                  to get an object&apos;s state given the object itself.
                  This property may be specified in the environment, an applet
                  parameter, a system property, or one or more resource files.
                  &lt;p&gt; The value of this constant is &quot;java.naming.factory.state&quot;.                
                <see>
                    javax.naming.spi.NamingManager#getStateToBind                    
                </see>
                <see>
                    javax.naming.spi.StateFactory                    
                </see>
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
                <see>
                    #APPLET                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="URL_PKG_PREFIXES" type="String" line="685"/>
            <javadoc line="685">
                Constant that holds the name of the environment property
                  for specifying the list of package prefixes to use when
                  loading in URL context factories. The value
                  of the property should be a colon-separated list of package
                  prefixes for the class name of the factory class that will create
                  a URL context factory.
                  This property may be specified in the environment,
                  an applet parameter, a system property, or one or more
                  resource files.
                  The prefix &lt;tt&gt;com.sun.jndi.url&lt;/tt&gt; is always appended to
                  the possibly empty list of package prefixes.
                  &lt;p&gt; The value of this constant is &quot;java.naming.factory.url.pkgs&quot;.                
                <see>
                    javax.naming.spi.NamingManager#getObjectInstance                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getURLContext                    
                </see>
                <see>
                    javax.naming.spi.ObjectFactory                    
                </see>
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
                <see>
                    #APPLET                    
                </see>
            </javadoc>
            <declaration name="PROVIDER_URL" type="String" line="706"/>
            <javadoc line="706">
                Constant that holds the name of the environment property
                  for specifying configuration information for the service provider
                  to use. The value of the property should contain a URL string
                  (e.g. &quot;ldap://somehost:389&quot;).
                  This property may be specified in the environment,
                  an applet parameter, a system property, or a resource file.
                  If it is not specified in any of these sources,
                  the default configuration is determined by the service provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.provider.url&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
                <see>
                    #APPLET                    
                </see>
            </javadoc>
            <declaration name="DNS_URL" type="String" line="721"/>
            <javadoc line="721">
                Constant that holds the name of the environment property
                  for specifying the DNS host and domain names to use for the
                  JNDI URL context (for example, &quot;dns://somehost/wiz.com&quot;).
                  This property may be specified in the environment,
                  an applet parameter, a system property, or a resource file.
                  If it is not specified in any of these sources
                  and the program attempts to use a JNDI URL containing a DNS name,
                  a &lt;tt&gt;ConfigurationException&lt;/tt&gt; will be thrown.
                  &lt;p&gt; The value of this constant is &quot;java.naming.dns.url&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="AUTHORITATIVE" type="String" line="735"/>
            <javadoc line="735">
                Constant that holds the name of the environment property for
                  specifying the authoritativeness of the service requested.
                  If the value of the property is the string &quot;true&quot;, it means
                  that the access is to the most authoritative source (i.e. bypass
                  any cache or replicas). If the value is anything else,
                  the source need not be (but may be) authoritative.
                  If unspecified, the value defaults to &quot;false&quot;.
                  &lt;p&gt; The value of this constant is &quot;java.naming.authoritative&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="BATCHSIZE" type="String" line="748"/>
            <javadoc line="748">
                Constant that holds the name of the environment property for
                  specifying the batch size to use when returning data via the
                  service&apos;s protocol. This is a hint to the provider to return
                  the results of operations in batches of the specified size, so
                  the provider can optimize its performance and usage of resources.
                  The value of the property is the string representation of an
                  integer.
                  If unspecified, the batch size is determined by the service
                  provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.batchsize&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="REFERRAL" type="String" line="763"/>
            <javadoc line="763">
                Constant that holds the name of the environment property for
                  specifying how referrals encountered by the service provider
                  are to be processed. The value of the property is one of the
                  following strings:
                  &lt;dl&gt;
                  &lt;dt&gt;&quot;follow&quot;
                  &lt;dd&gt;follow referrals automatically
                  &lt;dt&gt;&quot;ignore&quot;
                  &lt;dd&gt;ignore referrals
                  &lt;dt&gt;&quot;throw&quot;
                  &lt;dd&gt;throw &lt;tt&gt;ReferralException&lt;/tt&gt; when a referral is encountered.
                  &lt;/dl&gt;
                  If this property is not specified, the default is
                  determined by the provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.referral&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="SECURITY_PROTOCOL" type="String" line="783"/>
            <javadoc line="783">
                Constant that holds the name of the environment property for
                  specifying the security protocol to use.
                  Its value is a string determined by the service provider
                  (e.g. &quot;ssl&quot;).
                  If this property is unspecified,
                  the behaviour is determined by the service provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.security.protocol&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="SECURITY_AUTHENTICATION" type="String" line="795"/>
            <javadoc line="795">
                Constant that holds the name of the environment property for
                  specifying the security level to use.
                  Its value is one of the following strings:
                  &quot;none&quot;, &quot;simple&quot;, &quot;strong&quot;.
                  If this property is unspecified,
                  the behaviour is determined by the service provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.security.authentication&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="SECURITY_PRINCIPAL" type="String" line="807"/>
            <javadoc line="807">
                Constant that holds the name of the environment property for
                  specifying the identity of the principal for authenticating
                  the caller to the service. The format of the principal
                  depends on the authentication scheme.
                  If this property is unspecified,
                  the behaviour is determined by the service provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.security.principal&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="SECURITY_CREDENTIALS" type="String" line="819"/>
            <javadoc line="819">
                Constant that holds the name of the environment property for
                  specifying the credentials of the principal for authenticating
                  the caller to the service. The value of the property depends
                  on the authentication scheme. For example, it could be a hashed
                  password, clear-text password, key, certificate, and so on.
                  If this property is unspecified,
                  the behaviour is determined by the service provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.security.credentials&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="LANGUAGE" type="String" line="832"/>
            <javadoc line="832">
                Constant that holds the name of the environment property for
                  specifying the preferred language to use with the service.
                  The value of the property is a colon-separated list of language
                  tags as defined in RFC 1766.
                  If this property is unspecified,
                  the language preference is determined by the service provider.
                  &lt;p&gt; The value of this constant is &quot;java.naming.language&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
            </javadoc>
            <declaration name="APPLET" type="String" line="844"/>
            <javadoc line="844">
                Constant that holds the name of the environment property for
                  specifying an applet for the initial context constructor to use
                  when searching for other properties.
                  The value of this property is the
                  &lt;tt&gt;java.applet.Applet&lt;/tt&gt; instance that is being executed.
                  This property may be specified in the environment parameter
                  passed to the initial context constructor.
                  When this property is set, each property that the initial context
                  constructor looks for in the system properties is first looked for
                  in the applet&apos;s parameter list.
                  If this property is unspecified, the initial context constructor
                  will search for properties only in the environment parameter
                  passed to it, the system properties, and application resource files.
                  &lt;p&gt; The value of this constant is &quot;java.naming.applet&quot;.                
                <see>
                    #addToEnvironment(String,Object)                    
                </see>
                <see>
                    #removeFromEnvironment(String)                    
                </see>
                <see>
                    InitialContext                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
        </interface>
    </source>