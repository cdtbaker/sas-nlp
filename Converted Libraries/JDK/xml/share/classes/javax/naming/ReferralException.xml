<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Hashtable"/>
        <class name="ReferralException" line="3">
            <extends class="NamingException"/>
            <javadoc line="3">
                This abstract class is used to represent a referral exception,
                  which is generated in response to a &lt;em&gt;referral&lt;/em&gt;
                  such as that returned by LDAP v3 servers.
                  &lt;p&gt;
                  A service provider provides
                  a subclass of &lt;tt&gt;ReferralException&lt;/tt&gt; by providing implementations
                  for &lt;tt&gt;getReferralInfo()&lt;/tt&gt; and &lt;tt&gt;getReferralContext()&lt;/tt&gt; (and appropriate
                  constructors and/or corresponding &quot;set&quot; methods).
                  &lt;p&gt;
                  The following code sample shows how &lt;tt&gt;ReferralException&lt;/tt&gt; can be used.
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  while (true) {
                  try {
                  bindings = ctx.listBindings(name);
                  while (bindings.hasMore()) {
                  b = bindings.next();
                  ...
                  }
                  break;
                  } catch (ReferralException e) {
                  ctx = e.getReferralContext();
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;&lt;/p&gt;
                  &lt;p&gt;
                  &lt;tt&gt;ReferralException&lt;/tt&gt; is an abstract class. Concrete implementations
                  determine its synchronization and serialization properties.
                  &lt;p&gt;
                  An environment parameter passed to the &lt;tt&gt;getReferralContext()&lt;/tt&gt;
                  method is owned by the caller.
                  The service provider will not modify the object or keep a reference to it,
                  but may keep a reference to a clone of it.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="41">
                Constructs a new instance of ReferralException using the
                  explanation supplied. All other fields are set to null.                
                <param>
                    explanation     Additional detail about this exception. Can be null.                    
                </param>
                <see>
                    java.lang.Throwable#getMessage                    
                </see>
            </javadoc>
            <method name="ReferralException" type="constructor" line="47">
                <params>
                    <param name="explanation" type="String"/>
                </params>
            </method>
            <javadoc line="50">
                Constructs a new instance of ReferralException.
                  All fields are set to null.                
            </javadoc>
            <method name="ReferralException" type="constructor" line="54"/>
            <method name="getReferralInfo" type="Object" line="57"/>
            <javadoc line="57">
                Retrieves information (such as URLs) related to this referral.
                  The program may examine or display this information
                  to the user to determine whether to continue with the referral,
                  or to determine additional information needs to be supplied in order
                  to continue with the referral.                
                <return>
                    Non-null referral information related to this referral.                    
                </return>
            </javadoc>
            <method name="getReferralContext" type="Context" line="66"/>
            <javadoc line="66">
                Retrieves the context at which to continue the method.
                  Regardless of whether a referral is encountered directly during a
                  context operation, or indirectly, for example, during a search
                  enumeration, the referral exception should provide a context
                  at which to continue the operation. The referral context is
                  created using the environment properties of the context
                  that threw the ReferralException.
                  &lt;p&gt;
                  To continue the operation, the client program should re-invoke
                  the method using the same arguments as the original invocation.                
                <return>
                    The non-null context at which to continue the method.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered.
                      Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
                      to continue processing referrals.                    
                </exception>
            </javadoc>
            <method name="getReferralContext" type="Context" line="83"/>
            <javadoc line="83">
                Retrieves the context at which to continue the method using
                  environment properties.
                  Regardless of whether a referral is encountered directly during a
                  context operation, or indirectly, for example, during a search
                  enumeration, the referral exception should provide a context
                  at which to continue the operation.
                  &lt;p&gt;
                  The referral context is created using &lt;tt&gt;env&lt;/tt&gt; as its environment
                  properties.
                  This method should be used instead of the no-arg overloaded form
                  when the caller needs to use different environment properties for
                  the referral context. It might need to do this, for example, when
                  it needs to supply different authentication information to the referred
                  server in order to create the referral context.
                  &lt;p&gt;
                  To continue the operation, the client program should re-invoke
                  the method using the same arguments as the original invocation.                
                <param>
                    env The possibly null environment to use when retrieving the
                      referral context. If null, no environment properties will be used.                    
                </param>
                <return>
                    The non-null context at which to continue the method.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered.
                      Call either <tt>retryReferral()</tt> or <tt>skipReferral()</tt>
                      to continue processing referrals.                    
                </exception>
            </javadoc>
            <method name="skipReferral" type="boolean" line="109"/>
            <javadoc line="109">
                Discards the referral about to be processed.
                  A call to this method should be followed by a call to
                  &lt;code&gt;getReferralContext&lt;/code&gt; to allow the processing of
                  other referrals to continue.
                  The following code fragment shows a typical usage pattern.
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  } catch (ReferralException e) {
                  if (!shallIFollow(e.getReferralInfo())) {
                  if (!e.skipReferral()) {
                  return;
                  }
                  }
                  ctx = e.getReferralContext();
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
                <return>
                    true If more referral processing is pending; false otherwise.                    
                </return>
            </javadoc>
            <method name="retryReferral" type="void" line="128"/>
            <javadoc line="128">
                Retries the referral currently being processed.
                  A call to this method should be followed by a call to
                  &lt;code&gt;getReferralContext&lt;/code&gt; to allow the current
                  referral to be retried.
                  The following code fragment shows a typical usage pattern.
                  &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
                  } catch (ReferralException e) {
                  while (true) {
                  try {
                  ctx = e.getReferralContext(env);
                  break;
                  } catch (NamingException ne) {
                  if (! shallIRetry()) {
                  return;
                  }
                  // modify environment properties (env), if necessary
                  e.retryReferral();
                  }
                  }
                  }
                  &lt;/pre&gt;&lt;/blockquote&gt;                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="152"/>
            <javadoc line="152">
                Use serialVersionUID from JNDI 1.1.1 for interoperability                
            </javadoc>
        </class>
    </source>