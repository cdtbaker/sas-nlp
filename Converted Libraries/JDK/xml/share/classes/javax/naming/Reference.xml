<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <class name="Reference" line="31">
            <comment line="76">
                &lt;p&gt;
                 The serialized form of a Reference object consists of the class
                 name of the object being referenced (a String), a Vector of the
                 addresses (each a RefAddr), the name of the class factory (a
                 String), and the location of the class factory (a String).                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="31">
                This class represents a reference to an object that is found outside of
                  the naming/directory system.
                  &lt;p&gt;
                  Reference provides a way of recording address information about
                  objects which themselves are not directly bound to the naming/directory system.
                  &lt;p&gt;
                  A Reference consists of an ordered list of addresses and class information
                  about the object being referenced.
                  Each address in the list identifies a communications endpoint
                  for the same conceptual object.  The &quot;communications endpoint&quot;
                  is information that indicates how to contact the object. It could
                  be, for example, a network address, a location in memory on the
                  local machine, another process on the same machine, etc.
                  The order of the addresses in the list may be of significance
                  to object factories that interpret the reference.
                  &lt;p&gt;
                  Multiple addresses may arise for
                  various reasons, such as replication or the object offering interfaces
                  over more than one communication mechanism.  The addresses are indexed
                  starting with zero.
                  &lt;p&gt;
                  A Reference also contains information to assist in creating an instance
                  of the object to which this Reference refers.  It contains the class name
                  of that object, and the class name and location of the factory to be used
                  to create the object.
                  The class factory location is a space-separated list of URLs representing
                  the class path used to load the factory.  When the factory class (or
                  any class or resource upon which it depends) needs to be loaded,
                  each URL is used (in order) to attempt to load the class.
                  &lt;p&gt;
                  A Reference instance is not synchronized against concurrent access by multiple
                  threads. Threads that need to access a single Reference concurrently should
                  synchronize amongst themselves and provide the necessary locking.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    RefAddr                    
                </see>
                <see>
                    StringRefAddr                    
                </see>
                <see>
                    BinaryRefAddr                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="className" type="String" line="84"/>
            <javadoc line="84">
                Contains the fully-qualified name of the class of the object to which
                  this Reference refers.                
                <serial>
                                        
                </serial>
                <see>
                    java.lang.Class#getName                    
                </see>
            </javadoc>
            <declaration name="addrs" type="Vector&lt;RefAddr&gt;" line="91"/>
            <javadoc line="91">
                Contains the addresses contained in this Reference.
                  Initialized by constructor.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="classFactory" type="String" line="98"/>
            <javadoc line="98">
                Contains the name of the factory class for creating
                  an instance of the object to which this Reference refers.
                  Initialized to null.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="classFactoryLocation" type="String" line="106"/>
            <javadoc line="106">
                Contains the location of the factory class.
                  Initialized to null.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="113">
                Constructs a new reference for an object with class name &apos;className&apos;.
                  Class factory and class factory location are set to null.
                  The newly created reference contains zero addresses.                
                <param>
                    className The non-null class name of the object to which
                      this reference refers.                    
                </param>
            </javadoc>
            <method name="Reference" type="constructor" line="121">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="126">
                Constructs a new reference for an object with class name &apos;className&apos; and
                  an address.
                  Class factory and class factory location are set to null.                
                <param>
                    className The non-null class name of the object to
                      which this reference refers.                    
                </param>
                <param>
                    addr The non-null address of the object.                    
                </param>
            </javadoc>
            <method name="Reference" type="constructor" line="135">
                <params>
                    <param name="className" type="String"/>
                    <param name="addr" type="RefAddr"/>
                </params>
            </method>
            <javadoc line="141">
                Constructs a new reference for an object with class name &apos;className&apos;,
                  and the class name and location of the object&apos;s factory.                
                <param>
                    className The non-null class name of the object to which
                      this reference refers.                    
                </param>
                <param>
                    factory  The possibly null class name of the object&apos;s factory.                    
                </param>
                <param>
                    factoryLocationThe possibly null location from which to load
                      the factory (e.g. URL)                    
                </param>
                <see>
                    javax.naming.spi.ObjectFactory                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getObjectInstance                    
                </see>
            </javadoc>
            <method name="Reference" type="constructor" line="154">
                <params>
                    <param name="className" type="String"/>
                    <param name="factory" type="String"/>
                    <param name="factoryLocation" type="String"/>
                </params>
            </method>
            <javadoc line="160">
                Constructs a new reference for an object with class name &apos;className&apos;,
                  the class name and location of the object&apos;s factory, and the address for
                  the object.                
                <param>
                    className The non-null class name of the object to
                      which this reference refers.                    
                </param>
                <param>
                    factory  The possibly null class name of the object&apos;s factory.                    
                </param>
                <param>
                    factoryLocation  The possibly null location from which
                      to load the factory (e.g. URL)                    
                </param>
                <param>
                    addr     The non-null address of the object.                    
                </param>
                <see>
                    javax.naming.spi.ObjectFactory                    
                </see>
                <see>
                    javax.naming.spi.NamingManager#getObjectInstance                    
                </see>
            </javadoc>
            <method name="Reference" type="constructor" line="175">
                <params>
                    <param name="className" type="String"/>
                    <param name="addr" type="RefAddr"/>
                    <param name="factory" type="String"/>
                    <param name="factoryLocation" type="String"/>
                </params>
            </method>
            <javadoc line="181">
                Retrieves the class name of the object to which this reference refers.                
                <return>
                    The non-null fully-qualified class name of the object.
                      (e.g. &quot;java.lang.String&quot;)                    
                </return>
            </javadoc>
            <method name="getClassName" type="String" line="187"/>
            <javadoc line="191">
                Retrieves the class name of the factory of the object
                  to which this reference refers.                
                <return>
                    The possibly null fully-qualified class name of the factory.
                      (e.g. &quot;java.lang.String&quot;)                    
                </return>
            </javadoc>
            <method name="getFactoryClassName" type="String" line="198"/>
            <javadoc line="202">
                Retrieves the location of the factory of the object
                  to which this reference refers.
                  If it is a codebase, then it is an ordered list of URLs,
                  separated by spaces, listing locations from where the factory
                  class definition should be loaded.                
                <return>
                    The possibly null string containing the
                      location for loading in the factory&apos;s class.                    
                </return>
            </javadoc>
            <method name="getFactoryClassLocation" type="String" line="212"/>
            <javadoc line="216">
                Retrieves the first address that has the address type &apos;addrType&apos;.
                  String.compareTo() is used to test the equality of the address types.                
                <param>
                    addrType The non-null address type for which to find the address.                    
                </param>
                <return>
                    The address in this reference with address type &apos;addrType;
                      null if no such address exist.                    
                </return>
            </javadoc>
            <method name="get" type="RefAddr" line="224">
                <params>
                    <param name="addrType" type="String"/>
                </params>
                <declaration name="len" type="int" line="225"/>
                <declaration name="addr" type="RefAddr" line="226"/>
                <scope line="227"/>
            </method>
            <javadoc line="235">
                Retrieves the address at index posn.                
                <param>
                    posn The index of the address to retrieve.                    
                </param>
                <return>
                    The address at the 0-based index posn. It must be in the
                      range [0,getAddressCount()).                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException If posn not in the specified
                      range.                    
                </exception>
            </javadoc>
            <method name="get" type="RefAddr" line="243">
                <params>
                    <param name="posn" type="int"/>
                </params>
            </method>
            <javadoc line="247">
                Retrieves an enumeration of the addresses in this reference.
                  When addresses are added, changed or removed from this reference,
                  its effects on this enumeration are undefined.                
                <return>
                    An non-null enumeration of the addresses
                      (&lt;tt&gt;RefAddr&lt;/tt&gt;) in this reference.
                      If this reference has zero addresses, an enumeration with
                      zero elements is returned.                    
                </return>
            </javadoc>
            <method name="getAll" type="Enumeration<RefAddr>" line="257"/>
            <javadoc line="261">
                Retrieves the number of addresses in this reference.                
                <return>
                    The nonnegative number of addresses in this reference.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="266"/>
            <javadoc line="270">
                Adds an address to the end of the list of addresses.                
                <param>
                    addr The non-null address to add.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="275">
                <params>
                    <param name="addr" type="RefAddr"/>
                </params>
            </method>
            <javadoc line="279">
                Adds an address to the list of addresses at index posn.
                  All addresses at index posn or greater are shifted up
                  the list by one (away from index 0).                
                <param>
                    posn The 0-based index of the list to insert addr.                    
                </param>
                <param>
                    addr The non-null address to add.                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException If posn not in the specified
                      range.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="289">
                <params>
                    <param name="posn" type="int"/>
                    <param name="addr" type="RefAddr"/>
                </params>
            </method>
            <javadoc line="293">
                Deletes the address at index posn from the list of addresses.
                  All addresses at index greater than posn are shifted down
                  the list by one (towards index 0).                
                <param>
                    posn The 0-based index of in address to delete.                    
                </param>
                <return>
                    The address removed.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException If posn not in the specified
                      range.                    
                </exception>
            </javadoc>
            <method name="remove" type="Object" line="303">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="r" type="Object" line="304"/>
            </method>
            <javadoc line="309">
                Deletes all addresses from this reference.                
            </javadoc>
            <method name="clear" type="void" line="312"/>
            <javadoc line="316">
                Determines whether obj is a reference with the same addresses
                  (in same order) as this reference.
                  The addresses are checked using RefAddr.equals().
                  In addition to having the same addresses, the Reference also needs to
                  have the same class name as this reference.
                  The class factory and class factory location are not checked.
                  If obj is null or not an instance of Reference, null is returned.                
                <param>
                    obj The possibly null object to check.                    
                </param>
                <return>
                    true if obj is equal to this reference; false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="328">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="332">
                    ignore factory information                    
                </comment>
                <scope line="329">
                    <declaration name="target" type="Reference" line="330"/>
                    <scope line="333">
                        <declaration name="mycomps" type="Enumeration" line="334"/>
                        <declaration name="comps" type="Enumeration" line="335"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="345">
                Computes the hash code of this reference.
                  The hash code is the sum of the hash code of its addresses.                
                <return>
                    A hash code of this reference as an int.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="351">
                <declaration name="hash" type="int" line="352"/>
            </method>
            <javadoc line="358">
                Generates the string representation of this reference.
                  The string consists of the class name to which this reference refers,
                  and the string representation of each of its addresses.
                  This representation is intended for display only and not to be parsed.                
                <return>
                    The non-null string representation of this reference.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="366">
                <declaration name="buf" type="StringBuffer" line="367"/>
                <declaration name="len" type="int" line="369"/>
            </method>
            <javadoc line="376">
                Makes a copy of this reference using its class name
                  list of addresses, class factory name and class factory location.
                  Changes to the newly created copy does not affect this Reference
                  and vice versa.                
            </javadoc>
            <method name="clone" type="Object" line="382">
                <declaration name="r" type="Reference" line="383"/>
                <declaration name="a" type="Enumeration&lt;RefAddr&gt;" line="384"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="391"/>
            <javadoc line="391">
                Use serialVersionUID from JNDI 1.1.1 for interoperability                
            </javadoc>
        </class>
    </source>