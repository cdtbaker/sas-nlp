<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="javax.naming"/>
        <import package="javax.naming.directory.Attributes"/>
        <import package="java.util.Hashtable"/>
        <interface name="DirStateFactory">
            <implements interface="StateFactory"/>
            <javadoc line="5">
                This interface represents a factory for obtaining the state of an
                  object and corresponding attributes for binding.
                  &lt;p&gt;
                  The JNDI framework allows for object implementations to
                  be loaded in dynamically via &lt;tt&gt;object factories&lt;/tt&gt;.
                  &lt;p&gt;
                  A &lt;tt&gt;DirStateFactory&lt;/tt&gt; extends &lt;tt&gt;StateFactory&lt;/tt&gt;
                  by allowing an &lt;tt&gt;Attributes&lt;/tt&gt; instance
                  to be supplied to and be returned by the &lt;tt&gt;getStateToBind()&lt;/tt&gt; method.
                  &lt;tt&gt;DirStateFactory&lt;/tt&gt; implementations are intended to be used by
                  &lt;tt&gt;DirContext&lt;/tt&gt; service providers.
                  When a caller binds an object using &lt;tt&gt;DirContext.bind()&lt;/tt&gt;,
                  he might also specify a set of attributes to be bound with the object.
                  The object and attributes to be bound are passed to
                  the &lt;tt&gt;getStateToBind()&lt;/tt&gt; method of a factory.
                  If the factory processes the object and attributes, it returns
                  a corresponding pair of object and attributes to be bound.
                  If the factory does not process the object, it must return null.
                  &lt;p&gt;
                  For example, a caller might bind a printer object with some printer-related
                  attributes.
                  &lt;blockquote&gt;&lt;pre&gt;
                  ctx.rebind(&quot;inky&quot;, printer, printerAttrs);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  An LDAP service provider for &lt;tt&gt;ctx&lt;/tt&gt; uses a &lt;tt&gt;DirStateFactory&lt;/tt&gt;
                  (indirectly via &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt;)
                  and gives it &lt;tt&gt;printer&lt;/tt&gt; and &lt;tt&gt;printerAttrs&lt;/tt&gt;. A factory for
                  an LDAP directory might turn &lt;tt&gt;printer&lt;/tt&gt; into a set of attributes
                  and merge that with &lt;tt&gt;printerAttrs&lt;/tt&gt;. The service provider then
                  uses the resulting attributes to create an LDAP entry and updates
                  the directory.
                  &lt;p&gt; Since &lt;tt&gt;DirStateFactory&lt;/tt&gt; extends &lt;tt&gt;StateFactory&lt;/tt&gt;, it
                  has two &lt;tt&gt;getStateToBind()&lt;/tt&gt; methods, where one
                  differs from the other by the attributes
                  argument. &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt; will only use
                  the form that accepts the attributes argument, while
                  &lt;tt&gt;NamingManager.getStateToBind()&lt;/tt&gt; will only use the form that
                  does not accept the attributes argument.
                  &lt;p&gt; Either form of the &lt;tt&gt;getStateToBind()&lt;/tt&gt; method of a
                  DirStateFactory may be invoked multiple times, possibly using different
                  parameters.  The implementation is thread-safe.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    DirectoryManager#getStateToBind                    
                </see>
                <see>
                    DirObjectFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getStateToBind" type="Result" line="54"/>
            <javadoc line="54">
                Retrieves the state of an object for binding given the object and attributes
                  to be transformed.
                  &lt;p&gt;
                  &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt;
                  successively loads in state factories. If a factory implements
                  &lt;tt&gt;DirStateFactory&lt;/tt&gt;, &lt;tt&gt;DirectoryManager&lt;/tt&gt; invokes this method;
                  otherwise, it invokes &lt;tt&gt;StateFactory.getStateToBind()&lt;/tt&gt;.
                  It does this until a factory produces a non-null answer.
                  &lt;p&gt;
                  When an exception is thrown by a factory,
                  the exception is passed on to the caller
                  of &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt;. The search for other factories
                  that may produce a non-null answer is halted.
                  A factory should only throw an exception if it is sure that
                  it is the only intended factory and that no other factories
                  should be tried.
                  If this factory cannot create an object using the arguments supplied,
                  it should return null.
                  &lt;p&gt;
                  The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may
                  optionally be used to specify the name of the object being created.
                  See the description of &quot;Name and Context Parameters&quot; in{@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}for details.
                  If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use
                  against concurrent access, since context implementations are not
                  guaranteed to be thread-safe.
                  &lt;p&gt;
                  The &lt;tt&gt;name&lt;/tt&gt;, &lt;tt&gt;inAttrs&lt;/tt&gt;, and &lt;tt&gt;environment&lt;/tt&gt; parameters
                  are owned by the caller.
                  The implementation will not modify these objects or keep references
                  to them, although it may keep references to clones or copies.
                  The object returned by this method is owned by the caller.
                  The implementation will not subsequently modify it.
                  It will contain either a new &lt;tt&gt;Attributes&lt;/tt&gt; object that is
                  likewise owned by the caller, or a reference to the original
                  &lt;tt&gt;inAttrs&lt;/tt&gt; parameter.                
                <param>
                    obj A possibly null object whose state is to be retrieved.                    
                </param>
                <param>
                    name The name of this object relative to <code>nameCtx</code>,
                      or null if no name is specified.                    
                </param>
                <param>
                    nameCtx The context relative to which the <code>name</code>
                      parameter is specified, or null if <code>name</code> is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment to
                      be used in the creation of the object's state.                    
                </param>
                <param>
                    inAttrs The possibly null attributes to be bound with the object.
                      The factory must not modify <tt>inAttrs</tt>.                    
                </param>
                <return>
                    A <tt>Result</tt> containing the object's state for binding
                      and the corresponding
                      attributes to be bound; null if the object don't use this factory.                    
                </return>
                <exception>
                    NamingException If this factory encountered an exception
                      while attempting to get the object's state, and no other factories are
                      to be tried.                    
                </exception>
                <see>
                    DirectoryManager#getStateToBind                    
                </see>
            </javadoc>
            <class name="Result" line="109">
                <javadoc line="109">
                    An object/attributes pair for returning the result of
                      DirStateFactory.getStateToBind().                    
                </javadoc>
                <declaration name="obj" type="Object" line="114"/>
                <javadoc line="114">
                    The possibly null object to be bound.                    
                </javadoc>
                <declaration name="attrs" type="Attributes" line="118"/>
                <javadoc line="118">
                    The possibly null attributes to be bound.                    
                </javadoc>
                <javadoc line="122">
                    Constructs an instance of Result.                    
                    <param>
                        obj The possibly null object to be bound.                        
                    </param>
                    <param>
                        outAttrs The possibly null attributes to be bound.                        
                    </param>
                </javadoc>
                <method name="Result" type="constructor" line="127">
                    <params>
                        <param name="obj" type="Object"/>
                        <param name="outAttrs" type="Attributes"/>
                    </params>
                </method>
                <javadoc line="131">
                    Retrieves the object to be bound.                    
                    <return>
                        The possibly null object to be bound.                        
                    </return>
                </javadoc>
                <method name="getObject" type="Object" line="135"/>
                <javadoc line="138">
                    Retrieves the attributes to be bound.                    
                    <return>
                        The possibly null attributes to be bound.                        
                    </return>
                </javadoc>
                <method name="getAttributes" type="Attributes" line="142"/>
            </class>
        </interface>
    </source>