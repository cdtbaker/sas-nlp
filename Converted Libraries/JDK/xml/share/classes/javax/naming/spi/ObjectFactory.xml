<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="java.util.Hashtable"/>
        <import package="javax.naming"/>
        <interface name="ObjectFactory">
            <javadoc line="4">
                This interface represents a factory for creating an object.
                  &lt;p&gt;
                  The JNDI framework allows for object implementations to
                  be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;.
                  For example, when looking up a printer bound in the name space,
                  if the print service binds printer names to References, the printer
                  Reference could be used to create a printer object, so that
                  the caller of lookup can directly operate on the printer object
                  after the lookup.
                  &lt;p&gt;An &lt;tt&gt;ObjectFactory&lt;/tt&gt; is responsible
                  for creating objects of a specific type.  In the above example,
                  you may have a PrinterObjectFactory for creating Printer objects.
                  &lt;p&gt;
                  An object factory must implement the &lt;tt&gt;ObjectFactory&lt;/tt&gt; interface.
                  In addition, the factory class must be public and must have a
                  public constructor that accepts no parameters.
                  &lt;p&gt;
                  The &lt;tt&gt;getObjectInstance()&lt;/tt&gt; method of an object factory may
                  be invoked multiple times, possibly using different parameters.
                  The implementation is thread-safe.
                  &lt;p&gt;
                  The mention of URL in the documentation for this class refers to
                  a URL string as defined by RFC 1738 and its related RFCs. It is
                  any string that conforms to the syntax described therein, and
                  may not always have corresponding support in the java.net.URL
                  class or Web browsers.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    NamingManager#getObjectInstance                    
                </see>
                <see>
                    NamingManager#getURLContext                    
                </see>
                <see>
                    ObjectFactoryBuilder                    
                </see>
                <see>
                    StateFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getObjectInstance" type="Object" line="40"/>
            <javadoc line="40">
                Creates an object using the location or reference information
                  specified.
                  &lt;p&gt;
                  Special requirements of this object are supplied
                  using &lt;code&gt;environment&lt;/code&gt;.
                  An example of such an environment property is user identity
                  information.
                  &lt;p&gt;
                  &lt;tt&gt;NamingManager.getObjectInstance()&lt;/tt&gt;
                  successively loads in object factories and invokes this method
                  on them until one produces a non-null answer.  When an exception
                  is thrown by an object factory, the exception is passed on to the caller
                  of &lt;tt&gt;NamingManager.getObjectInstance()&lt;/tt&gt;
                  (and no search is made for other factories
                  that may produce a non-null answer).
                  An object factory should only throw an exception if it is sure that
                  it is the only intended factory and that no other object factories
                  should be tried.
                  If this factory cannot create an object using the arguments supplied,
                  it should return null.
                  &lt;p&gt;
                  A &lt;em&gt;URL context factory&lt;/em&gt; is a special ObjectFactory that
                  creates contexts for resolving URLs or objects whose locations
                  are specified by URLs.  The &lt;tt&gt;getObjectInstance()&lt;/tt&gt; method
                  of a URL context factory will obey the following rules.
                  &lt;ol&gt;
                  &lt;li&gt;If &lt;code&gt;obj&lt;/code&gt; is null, create a context for resolving URLs of the
                  scheme associated with this factory. The resulting context is not tied
                  to a specific URL:  it is able to handle arbitrary URLs with this factory&apos;s
                  scheme id.  For example, invoking &lt;tt&gt;getObjectInstance()&lt;/tt&gt; with
                  &lt;code&gt;obj&lt;/code&gt; set to null on an LDAP URL context factory would return a
                  context that can resolve LDAP URLs
                  such as &quot;ldap://ldap.wiz.com/o=wiz,c=us&quot; and
                  &quot;ldap://ldap.umich.edu/o=umich,c=us&quot;.
                  &lt;li&gt;
                  If &lt;code&gt;obj&lt;/code&gt; is a URL string, create an object (typically a context)
                  identified by the URL.  For example, suppose this is an LDAP URL context
                  factory.  If &lt;code&gt;obj&lt;/code&gt; is &quot;ldap://ldap.wiz.com/o=wiz,c=us&quot;,
                  getObjectInstance() would return the context named by the distinguished
                  name &quot;o=wiz, c=us&quot; at the LDAP server ldap.wiz.com.  This context can
                  then be used to resolve LDAP names (such as &quot;cn=George&quot;)
                  relative to that context.
                  &lt;li&gt;
                  If &lt;code&gt;obj&lt;/code&gt; is an array of URL strings, the assumption is that the
                  URLs are equivalent in terms of the context to which they refer.
                  Verification of whether the URLs are, or need to be, equivalent is up
                  to the context factory. The order of the URLs in the array is
                  not significant.
                  The object returned by getObjectInstance() is like that of the single
                  URL case.  It is the object named by the URLs.
                  &lt;li&gt;
                  If &lt;code&gt;obj&lt;/code&gt; is of any other type, the behavior of
                  &lt;tt&gt;getObjectInstance()&lt;/tt&gt; is determined by the context factory
                  implementation.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The &lt;tt&gt;name&lt;/tt&gt; and &lt;tt&gt;environment&lt;/tt&gt; parameters
                  are owned by the caller.
                  The implementation will not modify these objects or keep references
                  to them, although it may keep references to clones or copies.
                  &lt;p&gt;
                  &lt;b&gt;Name and Context Parameters.&lt;/b&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;
                  &lt;a name=NAMECTX&gt;&lt;/a&gt;
                  The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may
                  optionally be used to specify the name of the object being created.
                  &lt;code&gt;name&lt;/code&gt; is the name of the object, relative to context
                  &lt;code&gt;nameCtx&lt;/code&gt;.
                  If there are several possible contexts from which the object
                  could be named -- as will often be the case -- it is up to
                  the caller to select one.  A good rule of thumb is to select the
                  &quot;deepest&quot; context available.
                  If &lt;code&gt;nameCtx&lt;/code&gt; is null, &lt;code&gt;name&lt;/code&gt; is relative
                  to the default initial context.  If no name is being specified, the
                  &lt;code&gt;name&lt;/code&gt; parameter should be null.
                  If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use
                  against concurrent access, since context implementations are not
                  guaranteed to be thread-safe.
                  &lt;p&gt;                
                <param>
                    obj The possibly null object containing location or reference
                      information that can be used in creating an object.                    
                </param>
                <param>
                    name The name of this object relative to &lt;code&gt;nameCtx&lt;/code&gt;,
                      or null if no name is specified.                    
                </param>
                <param>
                    nameCtx The context relative to which the &lt;code&gt;name&lt;/code&gt;
                      parameter is specified, or null if &lt;code&gt;name&lt;/code&gt; is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment that is used in
                      creating the object.                    
                </param>
                <return>
                    The object created; null if an object cannot be created.                    
                </return>
                <exception>
                    Exception if this object factory encountered an exception
                      while attempting to create an object, and no other object factories are
                      to be tried.                    
                </exception>
                <see>
                    NamingManager#getObjectInstance                    
                </see>
                <see>
                    NamingManager#getURLContext                    
                </see>
            </javadoc>
        </interface>
    </source>