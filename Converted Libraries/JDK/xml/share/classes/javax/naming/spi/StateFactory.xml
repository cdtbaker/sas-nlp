<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="javax.naming"/>
        <import package="java.util.Hashtable"/>
        <interface name="StateFactory">
            <javadoc line="4">
                This interface represents a factory for obtaining the state of an
                  object for binding.
                  &lt;p&gt;
                  The JNDI framework allows for object implementations to
                  be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;.
                  For example, when looking up a printer bound in the name space,
                  if the print service binds printer names to &lt;tt&gt;Reference&lt;/tt&gt;s, the printer
                  &lt;tt&gt;Reference&lt;/tt&gt; could be used to create a printer object, so that
                  the caller of lookup can directly operate on the printer object
                  after the lookup.
                  &lt;p&gt;An &lt;tt&gt;ObjectFactory&lt;/tt&gt; is responsible
                  for creating objects of a specific type.  In the above example,
                  you may have a &lt;tt&gt;PrinterObjectFactory&lt;/tt&gt; for creating
                  &lt;tt&gt;Printer&lt;/tt&gt; objects.
                  &lt;p&gt;
                  For the reverse process, when an object is bound into the namespace,
                  JNDI provides &lt;em&gt;state factories&lt;/em&gt;.
                  Continuing with the printer example, suppose the printer object is
                  updated and rebound:
                  &lt;blockquote&gt;&lt;pre&gt;
                  ctx.rebind(&quot;inky&quot;, printer);
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  The service provider for &lt;tt&gt;ctx&lt;/tt&gt; uses a state factory
                  to obtain the state of &lt;tt&gt;printer&lt;/tt&gt; for binding into its namespace.
                  A state factory for the &lt;tt&gt;Printer&lt;/tt&gt; type object might return
                  a more compact object for storage in the naming system.
                  &lt;p&gt;
                  A state factory must implement the &lt;tt&gt;StateFactory&lt;/tt&gt; interface.
                  In addition, the factory class must be public and must have a
                  public constructor that accepts no parameters.
                  &lt;p&gt;
                  The &lt;tt&gt;getStateToBind()&lt;/tt&gt; method of a state factory may
                  be invoked multiple times, possibly using different parameters.
                  The implementation is thread-safe.
                  &lt;p&gt;
                  &lt;tt&gt;StateFactory&lt;/tt&gt; is intended for use with service providers
                  that implement only the &lt;tt&gt;Context&lt;/tt&gt; interface.
                  &lt;tt&gt;DirStateFactory&lt;/tt&gt; is intended for use with service providers
                  that implement the &lt;tt&gt;DirContext&lt;/tt&gt; interface.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    NamingManager#getStateToBind                    
                </see>
                <see>
                    DirectoryManager#getStateToBind                    
                </see>
                <see>
                    ObjectFactory                    
                </see>
                <see>
                    DirStateFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getStateToBind" type="Object" line="53"/>
            <javadoc line="53">
                Retrieves the state of an object for binding.
                  &lt;p&gt;
                  &lt;tt&gt;NamingManager.getStateToBind()&lt;/tt&gt;
                  successively loads in state factories and invokes this method
                  on them until one produces a non-null answer.
                  &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt;
                  successively loads in state factories.  If a factory implements
                  &lt;tt&gt;DirStateFactory&lt;/tt&gt;, then &lt;tt&gt;DirectoryManager&lt;/tt&gt;
                  invokes &lt;tt&gt;DirStateFactory.getStateToBind()&lt;/tt&gt;; otherwise
                  it invokes &lt;tt&gt;StateFactory.getStateToBind()&lt;/tt&gt;.
                  &lt;p&gt; When an exception
                  is thrown by a factory, the exception is passed on to the caller
                  of &lt;tt&gt;NamingManager.getStateToBind()&lt;/tt&gt; and
                  &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt;.
                  The search for other factories
                  that may produce a non-null answer is halted.
                  A factory should only throw an exception if it is sure that
                  it is the only intended factory and that no other factories
                  should be tried.
                  If this factory cannot create an object using the arguments supplied,
                  it should return null.
                  &lt;p&gt;
                  The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may
                  optionally be used to specify the name of the object being created.
                  See the description of &quot;Name and Context Parameters&quot; in{@link ObjectFactory#getObjectInstance ObjectFactory.getObjectInstance()}for details.
                  If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use
                  against concurrent access, since context implementations are not
                  guaranteed to be thread-safe.
                  &lt;p&gt;
                  The &lt;tt&gt;name&lt;/tt&gt; and &lt;tt&gt;environment&lt;/tt&gt; parameters
                  are owned by the caller.
                  The implementation will not modify these objects or keep references
                  to them, although it may keep references to clones or copies.                
                <param>
                    obj A non-null object whose state is to be retrieved.                    
                </param>
                <param>
                    name The name of this object relative to &lt;code&gt;nameCtx&lt;/code&gt;,
                      or null if no name is specified.                    
                </param>
                <param>
                    nameCtx The context relative to which the &lt;code&gt;name&lt;/code&gt;
                      parameter is specified, or null if &lt;code&gt;name&lt;/code&gt; is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment to
                      be used in the creation of the object&apos;s state.                    
                </param>
                <return>
                    The object&apos;s state for binding;
                      null if the factory is not returning any changes.                    
                </return>
                <exception>
                    NamingException if this factory encountered an exception
                      while attempting to get the object&apos;s state, and no other factories are
                      to be tried.                    
                </exception>
                <see>
                    NamingManager#getStateToBind                    
                </see>
                <see>
                    DirectoryManager#getStateToBind                    
                </see>
            </javadoc>
        </interface>
    </source>