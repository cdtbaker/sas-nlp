<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="java.util.Hashtable"/>
        <import package="javax.naming.Context"/>
        <import package="javax.naming.Name"/>
        <import package="javax.naming.Reference"/>
        <import package="javax.naming.Referenceable"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.naming.CannotProceedException"/>
        <import package="javax.naming.directory.DirContext"/>
        <import package="javax.naming.directory.Attributes"/>
        <import package="com.sun.naming.internal.ResourceManager"/>
        <import package="com.sun.naming.internal.FactoryEnumeration"/>
        <class name="DirectoryManager" line="43">
            <extends class="NamingManager"/>
            <comment line="71">
                Disallow anyone from creating one of these.                
            </comment>
            <javadoc line="43">
                This class contains methods for supporting &lt;tt&gt;DirContext&lt;/tt&gt;
                  implementations.
                  &lt;p&gt;
                  This class is an extension of &lt;tt&gt;NamingManager&lt;/tt&gt;.  It contains methods
                  for use by service providers for accessing object factories and
                  state factories, and for getting continuation contexts for
                  supporting federation.
                  &lt;p&gt;
                  &lt;tt&gt;DirectoryManager&lt;/tt&gt; is safe for concurrent access by multiple threads.
                  &lt;p&gt;
                  Except as otherwise noted,
                  a &lt;tt&gt;Name&lt;/tt&gt;, &lt;tt&gt;Attributes&lt;/tt&gt;, or environment parameter
                  passed to any method is owned by the caller.
                  The implementation will not modify the object or keep a reference
                  to it, although it may keep a reference to a clone or copy.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    DirObjectFactory                    
                </see>
                <see>
                    DirStateFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="DirectoryManager" type="constructor" line="73"/>
            <javadoc line="75">
                Creates a context in which to continue a &lt;tt&gt;DirContext&lt;/tt&gt; operation.
                  Operates just like &lt;tt&gt;NamingManager.getContinuationContext()&lt;/tt&gt;,
                  only the continuation context returned is a &lt;tt&gt;DirContext&lt;/tt&gt;.                
                <param>
                    cpeThe non-null exception that triggered this continuation.                    
                </param>
                <return>
                    A non-null &lt;tt&gt;DirContext&lt;/tt&gt; object for continuing the operation.                    
                </return>
                <exception>
                    NamingException If a naming exception occurred.                    
                </exception>
                <see>
                    NamingManager#getContinuationContext(CannotProceedException)                    
                </see>
            </javadoc>
            <method name="getContinuationDirContext" type="DirContext" line="88">
                <params>
                    <param name="cpe" type="CannotProceedException"/>
                </params>
                <comment line="95">
                    Make a (shallow) copy of the environment.                    
                </comment>
                <declaration name="env" type="Hashtable" line="90"/>
                <scope line="91"/>
                <scope line="93"/>
            </method>
            <javadoc line="102">
                Creates an instance of an object for the specified object,
                  attributes, and environment.
                  &lt;p&gt;
                  This method is the same as &lt;tt&gt;NamingManager.getObjectInstance&lt;/tt&gt;
                  except for the following differences:
                  &lt;ul&gt;
                  &lt;li&gt;
                  It accepts an &lt;tt&gt;Attributes&lt;/tt&gt; parameter that contains attributes
                  associated with the object. The &lt;tt&gt;DirObjectFactory&lt;/tt&gt; might use these
                  attributes to save having to look them up from the directory.
                  &lt;li&gt;
                  The object factories tried must implement either
                  &lt;tt&gt;ObjectFactory&lt;/tt&gt; or &lt;tt&gt;DirObjectFactory&lt;/tt&gt;.
                  If it implements &lt;tt&gt;DirObjectFactory&lt;/tt&gt;,
                  &lt;tt&gt;DirObjectFactory.getObjectInstance()&lt;/tt&gt; is used, otherwise,
                  &lt;tt&gt;ObjectFactory.getObjectInstance()&lt;/tt&gt; is used.
                  &lt;/ul&gt;
                  Service providers that implement the &lt;tt&gt;DirContext&lt;/tt&gt; interface
                  should use this method, not &lt;tt&gt;NamingManager.getObjectInstance()&lt;/tt&gt;.
                  &lt;p&gt;                
                <param>
                    refInfo The possibly null object for which to create an object.                    
                </param>
                <param>
                    name The name of this object relative to &lt;code&gt;nameCtx&lt;/code&gt;.
                      Specifying a name is optional; if it is
                      omitted, &lt;code&gt;name&lt;/code&gt; should be null.                    
                </param>
                <param>
                    nameCtx The context relative to which the &lt;code&gt;name&lt;/code&gt;
                      parameter is specified.  If null, &lt;code&gt;name&lt;/code&gt; is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment to
                      be used in the creation of the object factory and the object.                    
                </param>
                <param>
                    attrs The possibly null attributes associated with refInfo.
                      This might not be the complete set of attributes for refInfo;
                      you might be able to read more attributes from the directory.                    
                </param>
                <return>
                    An object created using &lt;code&gt;refInfo&lt;/code&gt; and &lt;tt&gt;attrs&lt;/tt&gt;; or
                      &lt;code&gt;refInfo&lt;/code&gt; if an object cannot be created by
                      a factory.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered
                      while attempting to get a URL context, or if one of the
                      factories accessed throws a NamingException.                    
                </exception>
                <exception>
                    Exception If one of the factories accessed throws an
                      exception, or if an error was encountered while loading
                      and instantiating the factory and object classes.
                      A factory should only throw an exception if it does not want
                      other factories to be used in an attempt to create an object.
                      See &lt;tt&gt;DirObjectFactory.getObjectInstance()&lt;/tt&gt;.                    
                </exception>
                <see>
                    NamingManager#getURLContext                    
                </see>
                <see>
                    DirObjectFactory                    
                </see>
                <see>
                    DirObjectFactory#getObjectInstance                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getObjectInstance" type="Object" line="156">
                <params>
                    <param name="refInfo" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable<?,?>"/>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="163">
                    builder must return non-null factory                    
                </comment>
                <comment line="174">
                    use reference if possible                    
                </comment>
                <comment line="187">
                    if reference identifies a factory, use exclusively                    
                </comment>
                <comment line="197">
                    No factory found, so return original refInfo.
                     Will reach this point if factory class is not in
                     class path and reference does not contain a URL for it                    
                </comment>
                <comment line="203">
                    if reference has no factory, check for addresses
                     containing URLs
                     ignore name &amp; attrs params; not used in URL factory                    
                </comment>
                <comment line="214">
                    try using any specified factories                    
                </comment>
                <declaration name="factory" type="ObjectFactory" line="158"/>
                <declaration name="builder" type="ObjectFactoryBuilder" line="160"/>
                <scope line="161">
                    <scope line="164"/>
                    <scope line="167"/>
                </scope>
                <declaration name="ref" type="Reference" line="174"/>
                <scope line="175"/>
                <scope line="177"/>
                <declaration name="answer" type="Object" line="181"/>
                <scope line="183">
                    <declaration name="f" type="String" line="184"/>
                    <scope line="185">
                        <scope line="189"/>
                        <scope line="192"/>
                    </scope>
                    <scope line="201">
                        <scope line="207"/>
                    </scope>
                </scope>
            </method>
            <method name="createObjectFromFactories" type="Object" line="221">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="232">
                    Try each factory until one succeeds                    
                </comment>
                <declaration name="factories" type="FactoryEnumeration" line="223"/>
                <declaration name="factory" type="ObjectFactory" line="229"/>
                <declaration name="answer" type="Object" line="230"/>
                <scope line="232">
                    <scope line="234"/>
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="245">
                Retrieves the state of an object for binding when given the original
                  object and its attributes.
                  &lt;p&gt;
                  This method is like &lt;tt&gt;NamingManager.getStateToBind&lt;/tt&gt; except
                  for the following differences:
                  &lt;ul&gt;
                  &lt;li&gt;It accepts an &lt;tt&gt;Attributes&lt;/tt&gt; parameter containing attributes
                  that were passed to the &lt;tt&gt;DirContext.bind()&lt;/tt&gt; method.
                  &lt;li&gt;It returns a non-null &lt;tt&gt;DirStateFactory.Result&lt;/tt&gt; instance
                  containing the object to be bound, and the attributes to
                  accompany the binding. Either the object or the attributes may be null.
                  &lt;li&gt;
                  The state factories tried must each implement either
                  &lt;tt&gt;StateFactory&lt;/tt&gt; or &lt;tt&gt;DirStateFactory&lt;/tt&gt;.
                  If it implements &lt;tt&gt;DirStateFactory&lt;/tt&gt;, then
                  &lt;tt&gt;DirStateFactory.getStateToBind()&lt;/tt&gt; is called; otherwise,
                  &lt;tt&gt;StateFactory.getStateToBind()&lt;/tt&gt; is called.
                  &lt;/ul&gt;
                  Service providers that implement the &lt;tt&gt;DirContext&lt;/tt&gt; interface
                  should use this method, not &lt;tt&gt;NamingManager.getStateToBind()&lt;/tt&gt;.
                  &lt;p&gt;
                  See NamingManager.getStateToBind() for a description of how
                  the list of state factories to be tried is determined.
                  &lt;p&gt;
                  The object returned by this method is owned by the caller.
                  The implementation will not subsequently modify it.
                  It will contain either a new &lt;tt&gt;Attributes&lt;/tt&gt; object that is
                  likewise owned by the caller, or a reference to the original
                  &lt;tt&gt;attrs&lt;/tt&gt; parameter.                
                <param>
                    obj The non-null object for which to get state to bind.                    
                </param>
                <param>
                    name The name of this object relative to &lt;code&gt;nameCtx&lt;/code&gt;,
                      or null if no name is specified.                    
                </param>
                <param>
                    nameCtx The context relative to which the &lt;code&gt;name&lt;/code&gt;
                      parameter is specified, or null if &lt;code&gt;name&lt;/code&gt; is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment to
                      be used in the creation of the state factory and
                      the object&apos;s state.                    
                </param>
                <param>
                    attrs The possibly null Attributes that is to be bound with the
                      object.                    
                </param>
                <return>
                    A non-null DirStateFactory.Result containing
                      the object and attributes to be bound.
                      If no state factory returns a non-null answer, the result will contain
                      the object (&lt;tt&gt;obj&lt;/tt&gt;) itself with the original attributes.                    
                </return>
                <exception>
                    NamingException If a naming exception was encountered
                      while using the factories.
                      A factory should only throw an exception if it does not want
                      other factories to be used in an attempt to create an object.
                      See &lt;tt&gt;DirStateFactory.getStateToBind()&lt;/tt&gt;.                    
                </exception>
                <see>
                    DirStateFactory                    
                </see>
                <see>
                    DirStateFactory#getStateToBind                    
                </see>
                <see>
                    NamingManager#getStateToBind                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getStateToBind" type="DirStateFactory.Result" line="305">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable<?,?>"/>
                    <param name="attrs" type="Attributes"/>
                </params>
                <comment line="308">
                    Get list of state factories                    
                </comment>
                <comment line="313">
                    no factories to try; just return originals                    
                </comment>
                <comment line="317">
                    Try each factory until one succeeds                    
                </comment>
                <comment line="336">
                    nothing new                    
                </comment>
                <declaration name="factories" type="FactoryEnumeration" line="308"/>
                <scope line="311"/>
                <declaration name="factory" type="StateFactory" line="317"/>
                <declaration name="objanswer" type="Object" line="318"/>
                <declaration name="answer" type="DirStateFactory.Result" line="319"/>
                <scope line="320">
                    <scope line="322"/>
                    <scope line="325">
                        <scope line="328"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>