<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="java.util.Hashtable"/>
        <import package="javax.naming.NamingException"/>
        <interface name="ObjectFactoryBuilder">
            <javadoc line="31">
                This interface represents a builder that creates object factories.
                  &lt;p&gt;
                  The JNDI framework allows for object implementations to
                  be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;.
                  For example, when looking up a printer bound in the name space,
                  if the print service binds printer names to References, the printer
                  Reference could be used to create a printer object, so that
                  the caller of lookup can directly operate on the printer object
                  after the lookup.  An ObjectFactory is responsible for creating
                  objects of a specific type.  JNDI uses a default policy for using
                  and loading object factories.  You can override this default policy
                  by calling &lt;tt&gt;NamingManager.setObjectFactoryBuilder()&lt;/tt&gt; with an ObjectFactoryBuilder,
                  which contains the program-defined way of creating/loading
                  object factories.
                  Any &lt;tt&gt;ObjectFactoryBuilder&lt;/tt&gt; implementation must implement this
                  interface that for creating object factories.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    ObjectFactory                    
                </see>
                <see>
                    NamingManager#getObjectInstance                    
                </see>
                <see>
                    NamingManager#setObjectFactoryBuilder                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createObjectFactory" type="ObjectFactory" line="58"/>
            <javadoc line="58">
                Creates a new object factory using the environment supplied.
                  &lt;p&gt;
                  The environment parameter is owned by the caller.
                  The implementation will not modify the object or keep a reference
                  to it, although it may keep a reference to a clone or copy.                
                <param>
                    obj The possibly null object for which to create a factory.                    
                </param>
                <param>
                    environment Environment to use when creating the factory.
                      Can be null.                    
                </param>
                <return>
                    A non-null new instance of an ObjectFactory.                    
                </return>
                <exception>
                    NamingException If an object factory cannot be created.                    
                </exception>
            </javadoc>
        </interface>
    </source>