<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="java.util.Hashtable"/>
        <import package="javax.naming"/>
        <import package="javax.naming.directory.Attributes"/>
        <interface name="DirObjectFactory">
            <implements interface="ObjectFactory"/>
            <javadoc line="32">
                This interface represents a factory for creating an object given
                  an object and attributes about the object.
                  &lt;p&gt;
                  The JNDI framework allows for object implementations to
                  be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;. See
                  &lt;tt&gt;ObjectFactory&lt;/tt&gt; for details.
                  &lt;p&gt;
                  A &lt;tt&gt;DirObjectFactory&lt;/tt&gt; extends &lt;tt&gt;ObjectFactory&lt;/tt&gt; by allowing
                  an &lt;tt&gt;Attributes&lt;/tt&gt; instance
                  to be supplied to the &lt;tt&gt;getObjectInstance()&lt;/tt&gt; method.
                  &lt;tt&gt;DirObjectFactory&lt;/tt&gt; implementations are intended to be used by &lt;tt&gt;DirContext&lt;/tt&gt;
                  service providers. The service provider, in addition reading an
                  object from the directory, might already have attributes that
                  are useful for the object factory to check to see whether the
                  factory is supposed to process the object. For instance, an LDAP-style
                  service provider might have read the &quot;objectclass&quot; of the object.
                  A CORBA object factory might be interested only in LDAP entries
                  with &quot;objectclass=corbaObject&quot;. By using the attributes supplied by
                  the LDAP service provider, the CORBA object factory can quickly
                  eliminate objects that it need not worry about, and non-CORBA object
                  factories can quickly eliminate CORBA-related LDAP entries.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    NamingManager#getObjectInstance                    
                </see>
                <see>
                    DirectoryManager#getObjectInstance                    
                </see>
                <see>
                    ObjectFactory                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getObjectInstance" type="Object" line="65"/>
            <javadoc line="65">
                Creates an object using the location or reference information, and attributes
                  specified.
                  &lt;p&gt;
                  Special requirements of this object are supplied
                  using &lt;code&gt;environment&lt;/code&gt;.
                  An example of such an environment property is user identity
                  information.
                  &lt;p&gt;
                  &lt;tt&gt;DirectoryManager.getObjectInstance()&lt;/tt&gt;
                  successively loads in object factories. If it encounters a &lt;tt&gt;DirObjectFactory&lt;/tt&gt;,
                  it will invoke &lt;tt&gt;DirObjectFactory.getObjectInstance()&lt;/tt&gt;;
                  otherwise, it invokes
                  &lt;tt&gt;ObjectFactory.getObjectInstance()&lt;/tt&gt;. It does this until a factory
                  produces a non-null answer.
                  &lt;p&gt; When an exception
                  is thrown by an object factory, the exception is passed on to the caller
                  of &lt;tt&gt;DirectoryManager.getObjectInstance()&lt;/tt&gt;. The search for other factories
                  that may produce a non-null answer is halted.
                  An object factory should only throw an exception if it is sure that
                  it is the only intended factory and that no other object factories
                  should be tried.
                  If this factory cannot create an object using the arguments supplied,
                  it should return null.
                  &lt;p&gt;Since &lt;tt&gt;DirObjectFactory&lt;/tt&gt; extends &lt;tt&gt;ObjectFactory&lt;/tt&gt;, it
                  effectively
                  has two &lt;tt&gt;getObjectInstance()&lt;/tt&gt; methods, where one differs from the other by
                  the attributes argument. Given a factory that implements &lt;tt&gt;DirObjectFactory&lt;/tt&gt;,
                  &lt;tt&gt;DirectoryManager.getObjectInstance()&lt;/tt&gt; will only
                  use the method that accepts the attributes argument, while
                  &lt;tt&gt;NamingManager.getObjectInstance()&lt;/tt&gt; will only use the one that does not accept
                  the attributes argument.
                  &lt;p&gt;
                  See &lt;tt&gt;ObjectFactory&lt;/tt&gt; for a description URL context factories and other
                  properties of object factories that apply equally to &lt;tt&gt;DirObjectFactory&lt;/tt&gt;.
                  &lt;p&gt;
                  The &lt;tt&gt;name&lt;/tt&gt;, &lt;tt&gt;attrs&lt;/tt&gt;, and &lt;tt&gt;environment&lt;/tt&gt; parameters
                  are owned by the caller.
                  The implementation will not modify these objects or keep references
                  to them, although it may keep references to clones or copies.                
                <param>
                    obj The possibly null object containing location or reference
                      information that can be used in creating an object.                    
                </param>
                <param>
                    name The name of this object relative to <code>nameCtx</code>,
                      or null if no name is specified.                    
                </param>
                <param>
                    nameCtx The context relative to which the <code>name</code>
                      parameter is specified, or null if <code>name</code> is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment that is used in
                      creating the object.                    
                </param>
                <param>
                    attrs The possibly null attributes containing some of <tt>obj</tt>'s
                      attributes. <tt>attrs</tt> might not necessarily have all of <tt>obj</tt>'s
                      attributes. If the object factory requires more attributes, it needs
                      to get it, either using <tt>obj</tt>, or <tt>name</tt> and <tt>nameCtx</tt>.
                      The factory must not modify attrs.                    
                </param>
                <return>
                    The object created; null if an object cannot be created.                    
                </return>
                <exception>
                    Exception If this object factory encountered an exception
                      while attempting to create an object, and no other object factories are
                      to be tried.                    
                </exception>
                <see>
                    DirectoryManager#getObjectInstance                    
                </see>
                <see>
                    NamingManager#getURLContext                    
                </see>
            </javadoc>
        </interface>
    </source>