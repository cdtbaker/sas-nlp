<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming.spi">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.net.MalformedURLException"/>
        <import package="javax.naming"/>
        <import package="com.sun.naming.internal.VersionHelper"/>
        <import package="com.sun.naming.internal.ResourceManager"/>
        <import package="com.sun.naming.internal.FactoryEnumeration"/>
        <class name="NamingManager" line="38">
            <comment line="67">
                Disallow anyone from creating one of these.
                 Made package private so that DirectoryManager can subclass.                
            </comment>
            <comment line="74">
                should be protected and package private                
            </comment>
            <comment line="77">
                --------- object factory stuff                
            </comment>
            <comment line="347">
                Ref has no factory.  For each address of type &quot;URL&quot;, try its URL
                 context factory.  Returns null if unsuccessful in creating and
                 invoking a factory.                
            </comment>
            <comment line="454">
                Used by ContinuationContext                
            </comment>
            <comment line="480">
                                
            </comment>
            <comment line="614">
                ------------ Initial Context Factory Stuff                
            </comment>
            <comment line="731">
                -----  Continuation Context Stuff                
            </comment>
            <comment line="791">
                ------------ State Factory Stuff                
            </comment>
            <javadoc line="38">
                This class contains methods for creating context objects
                  and objects referred to by location information in the naming
                  or directory service.
                  &lt;p&gt;
                  This class cannot be instantiated.  It has only static methods.
                  &lt;p&gt;
                  The mention of URL in the documentation for this class refers to
                  a URL string as defined by RFC 1738 and its related RFCs. It is
                  any string that conforms to the syntax described therein, and
                  may not always have corresponding support in the java.net.URL
                  class or Web browsers.
                  &lt;p&gt;
                  NamingManager is safe for concurrent access by multiple threads.
                  &lt;p&gt;
                  Except as otherwise noted,
                  a &lt;tt&gt;Name&lt;/tt&gt; or environment parameter
                  passed to any method is owned by the caller.
                  The implementation will not modify the object or keep a reference
                  to it, although it may keep a reference to a clone or copy.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="NamingManager" type="constructor" line="71"/>
            <declaration name="helper" type="VersionHelper" line="74"/>
            <declaration name="object_factory_builder" type="ObjectFactoryBuilder" line="78"/>
            <javadoc line="78">
                Package-private; used by DirectoryManager and NamingManager.                
            </javadoc>
            <javadoc line="83">
                The ObjectFactoryBuilder determines the policy used when
                  trying to load object factories.
                  See getObjectInstance() and class ObjectFactory for a description
                  of the default policy.
                  setObjectFactoryBuilder() overrides this default policy by installing
                  an ObjectFactoryBuilder. Subsequent object factories will
                  be loaded and created using the installed builder.
                  &lt;p&gt;
                  The builder can only be installed if the executing thread is allowed
                  (by the security manager&apos;s checkSetFactory() method) to do so.
                  Once installed, the builder cannot be replaced.
                  &lt;p&gt;                
                <param>
                    builder The factory builder to install. If null, no builder
                      is installed.                    
                </param>
                <exception>
                    SecurityException builder cannot be installed
                      for security reasons.                    
                </exception>
                <exception>
                    NamingException builder cannot be installed for
                      a non-security-related reason.                    
                </exception>
                <exception>
                    IllegalStateException If a factory has already been installed.                    
                </exception>
                <see>
                    #getObjectInstance                    
                </see>
                <see>
                    ObjectFactory                    
                </see>
                <see>
                    ObjectFactoryBuilder                    
                </see>
                <see>
                    java.lang.SecurityManager#checkSetFactory                    
                </see>
            </javadoc>
            <method name="setObjectFactoryBuilder" type="void" line="109">
                <params>
                    <param name="builder" type="ObjectFactoryBuilder"/>
                </params>
                <declaration name="security" type="SecurityManager" line="113"/>
                <scope line="114"/>
            </method>
            <javadoc line="120">
                Used for accessing object factory builder.                
            </javadoc>
            <method name="getObjectFactoryBuilder" type="ObjectFactoryBuilder" line="123"/>
            <javadoc line="128">
                Retrieves the ObjectFactory for the object identified by a reference,
                  using the reference&apos;s factory class name and factory codebase
                  to load in the factory&apos;s class.                
                <param>
                    ref The non-null reference to use.                    
                </param>
                <param>
                    factoryName The non-null class name of the factory.                    
                </param>
                <return>
                    The object factory for the object identified by ref; null
                      if unable to load the factory.                    
                </return>
            </javadoc>
            <method name="getObjectFactoryFromReference" type="ObjectFactory" line="141">
                <params>
                    <param name="ref" type="Reference"/>
                    <param name="factoryName" type="String"/>
                </params>
                <comment line="144">
                    Try to use current class loader                    
                </comment>
                <comment line="148">
                    ignore and continue                    
                </comment>
                <comment line="149">
                    e.printStackTrace();                    
                </comment>
                <comment line="151">
                    All other exceptions are passed up.                    
                </comment>
                <comment line="153">
                    Not in class path; try to use codebase                    
                </comment>
                <declaration name="clas" type="Class" line="142"/>
                <scope line="145"/>
                <scope line="147"/>
                <declaration name="codebase" type="String" line="154"/>
                <scope line="156">
                    <scope line="157"/>
                    <scope line="159"/>
                </scope>
            </method>
            <javadoc line="167">
                Creates an object using the factories specified in the
                  &lt;tt&gt;Context.OBJECT_FACTORIES&lt;/tt&gt; property of the environment
                  or of the provider resource file associated with &lt;tt&gt;nameCtx&lt;/tt&gt;.                
                <return>
                    factory created; null if cannot create                    
                </return>
            </javadoc>
            <method name="createObjectFromFactories" type="Object" line="175">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <comment line="183">
                    Try each factory until one succeeds                    
                </comment>
                <declaration name="factories" type="FactoryEnumeration" line="177"/>
                <declaration name="factory" type="ObjectFactory" line="184"/>
                <declaration name="answer" type="Object" line="185"/>
                <scope line="186"/>
            </method>
            <method name="getURLScheme" type="String" line="193">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="colon_posn" type="int" line="194"/>
                <declaration name="slash_posn" type="int" line="195"/>
            </method>
            <javadoc line="202">
                Creates an instance of an object for the specified object
                  and environment.
                  &lt;p&gt;
                  If an object factory builder has been installed, it is used to
                  create a factory for creating the object.
                  Otherwise, the following rules are used to create the object:
                  &lt;ol&gt;
                  &lt;li&gt;If &lt;code&gt;refInfo&lt;/code&gt; is a &lt;code&gt;Reference&lt;/code&gt;
                  or &lt;code&gt;Referenceable&lt;/code&gt; containing a factory class name,
                  use the named factory to create the object.
                  Return &lt;code&gt;refInfo&lt;/code&gt; if the factory cannot be created.
                  Under JDK 1.1, if the factory class must be loaded from a location
                  specified in the reference, a &lt;tt&gt;SecurityManager&lt;/tt&gt; must have
                  been installed or the factory creation will fail.
                  If an exception is encountered while creating the factory,
                  it is passed up to the caller.
                  &lt;li&gt;If &lt;tt&gt;refInfo&lt;/tt&gt; is a &lt;tt&gt;Reference&lt;/tt&gt; or
                  &lt;tt&gt;Referenceable&lt;/tt&gt; with no factory class name,
                  and the address or addresses are &lt;tt&gt;StringRefAddr&lt;/tt&gt;s with
                  address type &quot;URL&quot;,
                  try the URL context factory corresponding to each URL&apos;s scheme id
                  to create the object (see &lt;tt&gt;getURLContext()&lt;/tt&gt;).
                  If that fails, continue to the next step.
                  &lt;li&gt; Use the object factories specified in
                  the &lt;tt&gt;Context.OBJECT_FACTORIES&lt;/tt&gt; property of the environment,
                  and of the provider resource file associated with
                  &lt;tt&gt;nameCtx&lt;/tt&gt;, in that order.
                  The value of this property is a colon-separated list of factory
                  class names that are tried in order, and the first one that succeeds
                  in creating an object is the one used.
                  If none of the factories can be loaded,
                  return &lt;code&gt;refInfo&lt;/code&gt;.
                  If an exception is encountered while creating the object, the
                  exception is passed up to the caller.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  Service providers that implement the &lt;tt&gt;DirContext&lt;/tt&gt;
                  interface should use
                  &lt;tt&gt;DirectoryManager.getObjectInstance()&lt;/tt&gt;, not this method.
                  Service providers that implement only the &lt;tt&gt;Context&lt;/tt&gt;
                  interface should use this method.
                  &lt;p&gt;
                  Note that an object factory (an object that implements the ObjectFactory
                  interface) must be public and must have a public constructor that
                  accepts no arguments.
                  &lt;p&gt;
                  The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may
                  optionally be used to specify the name of the object being created.
                  &lt;code&gt;name&lt;/code&gt; is the name of the object, relative to context
                  &lt;code&gt;nameCtx&lt;/code&gt;.  This information could be useful to the object
                  factory or to the object implementation.
                  If there are several possible contexts from which the object
                  could be named -- as will often be the case -- it is up to
                  the caller to select one.  A good rule of thumb is to select the
                  &quot;deepest&quot; context available.
                  If &lt;code&gt;nameCtx&lt;/code&gt; is null, &lt;code&gt;name&lt;/code&gt; is relative
                  to the default initial context.  If no name is being specified, the
                  &lt;code&gt;name&lt;/code&gt; parameter should be null.                
                <param>
                    refInfo The possibly null object for which to create an object.                    
                </param>
                <param>
                    name The name of this object relative to <code>nameCtx</code>.
                      Specifying a name is optional; if it is
                      omitted, <code>name</code> should be null.                    
                </param>
                <param>
                    nameCtx The context relative to which the <code>name</code>
                      parameter is specified.  If null, <code>name</code> is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment to
                      be used in the creation of the object factory and the object.                    
                </param>
                <return>
                    An object created using <code>refInfo</code>; or
                      <code>refInfo</code> if an object cannot be created using
                      the algorithm described above.                    
                </return>
                <exception>
                    NamingException if a naming exception was encountered
                      while attempting to get a URL context, or if one of the
                      factories accessed throws a NamingException.                    
                </exception>
                <exception>
                    Exception if one of the factories accessed throws an
                      exception, or if an error was encountered while loading
                      and instantiating the factory and object classes.
                      A factory should only throw an exception if it does not want
                      other factories to be used in an attempt to create an object.
                      See ObjectFactory.getObjectInstance().                    
                </exception>
                <see>
                    #getURLContext                    
                </see>
                <see>
                    ObjectFactory                    
                </see>
                <see>
                    ObjectFactory#getObjectInstance                    
                </see>
            </javadoc>
            <method name="getObjectInstance" type="Object" line="291">
                <params>
                    <param name="refInfo" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable<?,?>"/>
                </params>
                <comment line="295">
                    Use builder if installed                    
                </comment>
                <comment line="298">
                    builder must return non-null factory                    
                </comment>
                <comment line="304">
                    Use reference if possible                    
                </comment>
                <comment line="317">
                    if reference identifies a factory, use exclusively                    
                </comment>
                <comment line="324">
                    No factory found, so return original refInfo.                    
                </comment>
                <comment line="325">
                    Will reach this point if factory class is not in                    
                </comment>
                <comment line="326">
                    class path and reference does not contain a URL for it                    
                </comment>
                <comment line="330">
                    if reference has no factory, check for addresses                    
                </comment>
                <comment line="331">
                    containing URLs                    
                </comment>
                <comment line="340">
                    try using any specified factories                    
                </comment>
                <declaration name="factory" type="ObjectFactory" line="293"/>
                <declaration name="builder" type="ObjectFactoryBuilder" line="296"/>
                <scope line="297"/>
                <declaration name="ref" type="Reference" line="305"/>
                <scope line="306"/>
                <scope line="308"/>
                <declaration name="answer" type="Object" line="312"/>
                <scope line="314">
                    <declaration name="f" type="String" line="315"/>
                    <scope line="316">
                        <scope line="320"/>
                    </scope>
                    <scope line="329">
                        <scope line="334"/>
                    </scope>
                </scope>
            </method>
            <method name="processURLAddrs" type="Object" line="353">
                <params>
                    <param name="ref" type="Reference"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <scope line="355">
                    <declaration name="addr" type="RefAddr" line="356"/>
                    <scope line="358">
                        <declaration name="url" type="String" line="360"/>
                        <declaration name="answer" type="Object" line="361"/>
                        <scope line="362"/>
                    </scope>
                </scope>
            </method>
            <method name="processURL" type="Object" line="372">
                <params>
                    <param name="refInfo" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <comment line="375">
                    If refInfo is a URL string, try to use its URL context factory                    
                </comment>
                <comment line="376">
                    If no context found, continue to try object factories.                    
                </comment>
                <comment line="389">
                    If refInfo is an array of URL strings,                    
                </comment>
                <comment line="390">
                    try to find a context factory for any one of its URLs.                    
                </comment>
                <comment line="391">
                    If no context found, continue to try object factories.                    
                </comment>
                <declaration name="answer" type="Object" line="373"/>
                <scope line="377">
                    <declaration name="url" type="String" line="378"/>
                    <declaration name="scheme" type="String" line="379"/>
                    <scope line="380">
                        <scope line="383"/>
                    </scope>
                </scope>
                <scope line="392">
                    <declaration name="urls" type="String[]" line="393"/>
                    <scope line="394">
                        <declaration name="scheme" type="String" line="395"/>
                        <scope line="396"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="408">
                Retrieves a context identified by &lt;code&gt;obj&lt;/code&gt;, using the specified
                  environment.
                  Used by ContinuationContext.                
                <param>
                    obj       The object identifying the context.                    
                </param>
                <param>
                    name      The name of the context being returned, relative to
                      <code>nameCtx</code>, or null if no name is being
                      specified.
                      See the <code>getObjectInstance</code> method for
                      details.                    
                </param>
                <param>
                    ctx       The context relative to which <code>name</code> is
                      specified, or null for the default initial context.
                      See the <code>getObjectInstance</code> method for
                      details.                    
                </param>
                <param>
                    environment Environment specifying characteristics of the
                      resulting context.                    
                </param>
                <return>
                    A context identified by <code>obj</code>.                    
                </return>
                <see>
                    #getObjectInstance                    
                </see>
            </javadoc>
            <method name="getContext" type="Context" line="430">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <comment line="434">
                    %%% Ignore environment for now.  OK since method not public.                    
                </comment>
                <declaration name="answer" type="Object" line="431"/>
                <scope line="433"/>
                <scope line="438"/>
                <scope line="440"/>
                <scope line="442">
                    <declaration name="ne" type="NamingException" line="443"/>
                </scope>
            </method>
            <method name="getResolver" type="Resolver" line="455">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <comment line="459">
                    %%% Ignore environment for now.  OK since method not public.                    
                </comment>
                <declaration name="answer" type="Object" line="456"/>
                <scope line="458"/>
                <scope line="463"/>
                <scope line="465"/>
                <scope line="467">
                    <declaration name="ne" type="NamingException" line="468"/>
                </scope>
            </method>
            <javadoc line="481">
                Creates a context for the given URL scheme id.
                  &lt;p&gt;
                  The resulting context is for resolving URLs of the
                  scheme &lt;code&gt;scheme&lt;/code&gt;. The resulting context is not tied
                  to a specific URL. It is able to handle arbitrary URLs with
                  the specified scheme.
                  &lt;p&gt;
                  The class name of the factory that creates the resulting context
                  has the naming convention &lt;i&gt;scheme-id&lt;/i&gt;URLContextFactory
                  (e.g. &quot;ftpURLContextFactory&quot; for the &quot;ftp&quot; scheme-id),
                  in the package specified as follows.
                  The &lt;tt&gt;Context.URL_PKG_PREFIXES&lt;/tt&gt; environment property (which
                  may contain values taken from applet parameters, system properties,
                  or application resource files)
                  contains a colon-separated list of package prefixes.
                  Each package prefix in
                  the property is tried in the order specified to load the factory class.
                  The default package prefix is &quot;com.sun.jndi.url&quot; (if none of the
                  specified packages work, this default is tried).
                  The complete package name is constructed using the package prefix,
                  concatenated with the scheme id.
                  &lt;p&gt;
                  For example, if the scheme id is &quot;ldap&quot;, and the
                  &lt;tt&gt;Context.URL_PKG_PREFIXES&lt;/tt&gt; property
                  contains &quot;com.widget:com.wiz.jndi&quot;,
                  the naming manager would attempt to load the following classes
                  until one is successfully instantiated:
                  &lt;ul&gt;
                  &lt;li&gt;com.widget.ldap.ldapURLContextFactory
                  &lt;li&gt;com.wiz.jndi.ldap.ldapURLContextFactory
                  &lt;li&gt;com.sun.jndi.url.ldap.ldapURLContextFactory
                  &lt;/ul&gt;
                  If none of the package prefixes work, null is returned.
                  &lt;p&gt;
                  If a factory is instantiated, it is invoked with the following
                  parameters to produce the resulting context.
                  &lt;p&gt;
                  &lt;code&gt;factory.getObjectInstance(null, environment);&lt;/code&gt;
                  &lt;p&gt;
                  For example, invoking getObjectInstance() as shown above
                  on a LDAP URL context factory would return a
                  context that can resolve LDAP urls
                  (e.g. &quot;ldap://ldap.wiz.com/o=wiz,c=us&quot;,
                  &quot;ldap://ldap.umich.edu/o=umich,c=us&quot;, ...).
                  &lt;p&gt;
                  Note that an object factory (an object that implements the ObjectFactory
                  interface) must be public and must have a public constructor that
                  accepts no arguments.                
                <param>
                    scheme    The non-null scheme-id of the URLs supported by the context.                    
                </param>
                <param>
                    environment The possibly null environment properties to be
                      used in the creation of the object factory and the context.                    
                </param>
                <return>
                    A context for resolving URLs with the
                      scheme id <code>scheme</code>;
                      <code>null</code> if the factory for creating the
                      context is not found.                    
                </return>
                <exception>
                    NamingException If a naming exception occurs while creating
                      the context.                    
                </exception>
                <see>
                    #getObjectInstance                    
                </see>
                <see>
                    ObjectFactory#getObjectInstance                    
                </see>
            </javadoc>
            <method name="getURLContext" type="Context" line="546">
                <params>
                    <param name="scheme" type="String"/>
                    <param name="environment" type="Hashtable<?,?>"/>
                </params>
                <comment line="547">
                    pass in &apos;null&apos; to indicate creation of generic context for scheme                    
                </comment>
                <comment line="548">
                    (i.e. not specific to a URL).                    
                </comment>
                <declaration name="answer" type="Object" line="550"/>
                <scope line="551"/>
                <scope line="553"/>
            </method>
            <declaration name="defaultPkgPrefix" type="String" line="558"/>
            <javadoc line="560">
                Creates an object for the given URL scheme id using
                  the supplied urlInfo.
                  &lt;p&gt;
                  If urlInfo is null, the result is a context for resolving URLs
                  with the scheme id &apos;scheme&apos;.
                  If urlInfo is a URL, the result is a context named by the URL.
                  Names passed to this context is assumed to be relative to this
                  context (i.e. not a URL). For example, if urlInfo is
                  &quot;ldap://ldap.wiz.com/o=Wiz,c=us&quot;, the resulting context will
                  be that pointed to by &quot;o=Wiz,c=us&quot; on the server &apos;ldap.wiz.com&apos;.
                  Subsequent names that can be passed to this context will be
                  LDAP names relative to this context (e.g. cn=&quot;Barbs Jensen&quot;).
                  If urlInfo is an array of URLs, the URLs are assumed
                  to be equivalent in terms of the context to which they refer.
                  The resulting context is like that of the single URL case.
                  If urlInfo is of any other type, that is handled by the
                  context factory for the URL scheme.                
                <param>
                    scheme the URL scheme id for the context                    
                </param>
                <param>
                    urlInfo information used to create the context                    
                </param>
                <param>
                    name name of this object relative to <code>nameCtx</code>                    
                </param>
                <param>
                    nameCtx Context whose provider resource file will be searched
                      for package prefix values (or null if none)                    
                </param>
                <param>
                    environment Environment properties for creating the context                    
                </param>
                <see>
                    javax.naming.InitialContext                    
                </see>
            </javadoc>
            <method name="getURLObject" type="Object" line="589">
                <params>
                    <param name="scheme" type="String"/>
                    <param name="urlInfo" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable"/>
                </params>
                <comment line="591">
                    e.g. &quot;ftpURLContextFactory&quot;                    
                </comment>
                <comment line="599">
                    Found object factory                    
                </comment>
                <declaration name="factory" type="ObjectFactory" line="592"/>
                <scope line="600"/>
                <scope line="602"/>
                <scope line="604">
                    <declaration name="ne" type="NamingException" line="605"/>
                </scope>
            </method>
            <declaration name="initctx_factory_builder" type="InitialContextFactoryBuilder" line="614"/>
            <javadoc line="616">
                Use this method for accessing initctx_factory_builder while
                  inside an unsynchronized method.                
            </javadoc>
            <method name="getInitialContextFactoryBuilder" type="InitialContextFactoryBuilder" line="621"/>
            <javadoc line="625">
                Creates an initial context using the specified environment
                  properties.
                  &lt;p&gt;
                  If an InitialContextFactoryBuilder has been installed,
                  it is used to create the factory for creating the initial context.
                  Otherwise, the class specified in the
                  &lt;tt&gt;Context.INITIAL_CONTEXT_FACTORY&lt;/tt&gt; environment property is used.
                  Note that an initial context factory (an object that implements the
                  InitialContextFactory interface) must be public and must have a
                  public constructor that accepts no arguments.                
                <param>
                    env The possibly null environment properties used when
                      creating the context.                    
                </param>
                <return>
                    A non-null initial context.                    
                </return>
                <exception>
                    NoInitialContextException If the
                      <tt>Context.INITIAL_CONTEXT_FACTORY</tt> property
                      is not found or names a nonexistent
                      class or a class that cannot be instantiated,
                      or if the initial context could not be created for some other
                      reason.                    
                </exception>
                <exception>
                    NamingException If some other naming exception was encountered.                    
                </exception>
                <see>
                    javax.naming.InitialContext                    
                </see>
                <see>
                    javax.naming.directory.InitialDirContext                    
                </see>
            </javadoc>
            <method name="getInitialContext" type="Context" line="651">
                <params>
                    <param name="env" type="Hashtable<?,?>"/>
                </params>
                <comment line="656">
                    No factory installed, use property                    
                </comment>
                <comment line="657">
                    Get initial context factory class name                    
                </comment>
                <declaration name="factory" type="InitialContextFactory" line="652"/>
                <declaration name="builder" type="InitialContextFactoryBuilder" line="654"/>
                <scope line="655">
                    <declaration name="className" type="String" line="659"/>
                    <scope line="661">
                        <declaration name="ne" type="NoInitialContextException" line="662"/>
                    </scope>
                    <scope line="670"/>
                    <scope line="673">
                        <declaration name="ne" type="NoInitialContextException" line="674"/>
                    </scope>
                </scope>
                <scope line="680"/>
            </method>
            <javadoc line="688">
                Sets the InitialContextFactory builder to be builder.
                  &lt;p&gt;
                  The builder can only be installed if the executing thread is allowed by
                  the security manager to do so. Once installed, the builder cannot
                  be replaced.                
                <param>
                    builder The initial context factory builder to install. If null,
                      no builder is set.                    
                </param>
                <exception>
                    SecurityException builder cannot be installed for security
                      reasons.                    
                </exception>
                <exception>
                    NamingException builder cannot be installed for
                      a non-security-related reason.                    
                </exception>
                <exception>
                    IllegalStateException If a builder was previous installed.                    
                </exception>
                <see>
                    #hasInitialContextFactoryBuilder                    
                </see>
                <see>
                    java.lang.SecurityManager#checkSetFactory                    
                </see>
            </javadoc>
            <method name="setInitialContextFactoryBuilder" type="void" line="707">
                <params>
                    <param name="builder" type="InitialContextFactoryBuilder"/>
                </params>
                <declaration name="security" type="SecurityManager" line="712"/>
                <scope line="713"/>
            </method>
            <javadoc line="719">
                Determines whether an initial context factory builder has
                  been set.                
                <return>
                    true if an initial context factory builder has
                      been set; false otherwise.                    
                </return>
                <see>
                    #setInitialContextFactoryBuilder                    
                </see>
            </javadoc>
            <method name="hasInitialContextFactoryBuilder" type="boolean" line="726"/>
            <declaration name="CPE" type="String" line="732"/>
            <javadoc line="732">
                Constant that holds the name of the environment property into
                  which &lt;tt&gt;getContinuationContext()&lt;/tt&gt; stores the value of its
                  &lt;tt&gt;CannotProceedException&lt;/tt&gt; parameter.
                  This property is inherited by the continuation context, and may
                  be used by that context&apos;s service provider to inspect the
                  fields of the exception.
                  &lt;p&gt;
                  The value of this constant is &quot;java.naming.spi.CannotProceedException&quot;.                
                <see>
                    #getContinuationContext                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="747">
                Creates a context in which to continue a context operation.
                  &lt;p&gt;
                  In performing an operation on a name that spans multiple
                  namespaces, a context from one naming system may need to pass
                  the operation on to the next naming system.  The context
                  implementation does this by first constructing a
                  &lt;code&gt;CannotProceedException&lt;/code&gt; containing information
                  pinpointing how far it has proceeded.  It then obtains a
                  continuation context from JNDI by calling
                  &lt;code&gt;getContinuationContext&lt;/code&gt;.  The context
                  implementation should then resume the context operation by
                  invoking the same operation on the continuation context, using
                  the remainder of the name that has not yet been resolved.
                  &lt;p&gt;
                  Before making use of the &lt;tt&gt;cpe&lt;/tt&gt; parameter, this method
                  updates the environment associated with that object by setting
                  the value of the property &lt;a href=&quot;#CPE&quot;&gt;&lt;tt&gt;CPE&lt;/tt&gt;&lt;/a&gt;
                  to &lt;tt&gt;cpe&lt;/tt&gt;.  This property will be inherited by the
                  continuation context, and may be used by that context&apos;s
                  service provider to inspect the fields of this exception.                
                <param>
                    cpeThe non-null exception that triggered this continuation.                    
                </param>
                <return>
                    A non-null Context object for continuing the operation.                    
                </return>
                <exception>
                    NamingException If a naming exception occurred.                    
                </exception>
            </javadoc>
            <method name="getContinuationContext" type="Context" line="775">
                <params>
                    <param name="cpe" type="CannotProceedException"/>
                </params>
                <comment line="781">
                    Make a (shallow) copy of the environment.                    
                </comment>
                <declaration name="env" type="Hashtable" line="777"/>
                <scope line="778"/>
                <scope line="780"/>
                <declaration name="cctx" type="ContinuationContext" line="786"/>
            </method>
            <javadoc line="792">
                Retrieves the state of an object for binding.
                  &lt;p&gt;
                  Service providers that implement the &lt;tt&gt;DirContext&lt;/tt&gt; interface
                  should use &lt;tt&gt;DirectoryManager.getStateToBind()&lt;/tt&gt;, not this method.
                  Service providers that implement only the &lt;tt&gt;Context&lt;/tt&gt; interface
                  should use this method.
                  &lt;p&gt;
                  This method uses the specified state factories in
                  the &lt;tt&gt;Context.STATE_FACTORIES&lt;/tt&gt; property from the environment
                  properties, and from the provider resource file associated with
                  &lt;tt&gt;nameCtx&lt;/tt&gt;, in that order.
                  The value of this property is a colon-separated list of factory
                  class names that are tried in order, and the first one that succeeds
                  in returning the object&apos;s state is the one used.
                  If no object&apos;s state can be retrieved in this way, return the
                  object itself.
                  If an exception is encountered while retrieving the state, the
                  exception is passed up to the caller.
                  &lt;p&gt;
                  Note that a state factory
                  (an object that implements the StateFactory
                  interface) must be public and must have a public constructor that
                  accepts no arguments.
                  &lt;p&gt;
                  The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may
                  optionally be used to specify the name of the object being created.
                  See the description of &quot;Name and Context Parameters&quot; in{@link ObjectFactory#getObjectInstanceObjectFactory.getObjectInstance()}for details.
                  &lt;p&gt;
                  This method may return a &lt;tt&gt;Referenceable&lt;/tt&gt; object.  The
                  service provider obtaining this object may choose to store it
                  directly, or to extract its reference (using
                  &lt;tt&gt;Referenceable.getReference()&lt;/tt&gt;) and store that instead.                
                <param>
                    obj The non-null object for which to get state to bind.                    
                </param>
                <param>
                    name The name of this object relative to <code>nameCtx</code>,
                      or null if no name is specified.                    
                </param>
                <param>
                    nameCtx The context relative to which the <code>name</code>
                      parameter is specified, or null if <code>name</code> is
                      relative to the default initial context.                    
                </param>
                <param>
                    environment The possibly null environment to
                      be used in the creation of the state factory and
                      the object's state.                    
                </param>
                <return>
                    The non-null object representing <tt>obj</tt>'s state for
                      binding.  It could be the object (<tt>obj</tt>) itself.                    
                </return>
                <exception>
                    NamingException If one of the factories accessed throws an
                      exception, or if an error was encountered while loading
                      and instantiating the factory and object classes.
                      A factory should only throw an exception if it does not want
                      other factories to be used in an attempt to create an object.
                      See <tt>StateFactory.getStateToBind()</tt>.                    
                </exception>
                <see>
                    StateFactory                    
                </see>
                <see>
                    StateFactory#getStateToBind                    
                </see>
                <see>
                    DirectoryManager#getStateToBind                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getStateToBind" type="Object" line="855">
                <params>
                    <param name="obj" type="Object"/>
                    <param name="name" type="Name"/>
                    <param name="nameCtx" type="Context"/>
                    <param name="environment" type="Hashtable<?,?>"/>
                </params>
                <comment line="864">
                    Try each factory until one succeeds                    
                </comment>
                <declaration name="factories" type="FactoryEnumeration" line="857"/>
                <scope line="860"/>
                <declaration name="factory" type="StateFactory" line="865"/>
                <declaration name="answer" type="Object" line="866"/>
                <scope line="867"/>
            </method>
        </class>
    </source>