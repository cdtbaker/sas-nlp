<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Enumeration"/>
        <import package="java.util.Properties"/>
        <class name="CompoundName" line="31">
            <comment line="589">
                For testing
                
                public static void main(String[] args) {
                Properties dotSyntax = new Properties();
                dotSyntax.put(&quot;jndi.syntax.direction&quot;, &quot;right_to_left&quot;);
                dotSyntax.put(&quot;jndi.syntax.separator&quot;, &quot;.&quot;);
                dotSyntax.put(&quot;jndi.syntax.ignorecase&quot;, &quot;true&quot;);
                dotSyntax.put(&quot;jndi.syntax.escape&quot;, &quot;\\&quot;);
                      dotSyntax.put(&quot;jndi.syntax.beginquote&quot;, &quot;\&quot;&quot;);
                      dotSyntax.put(&quot;jndi.syntax.beginquote2&quot;, &quot;&apos;&quot;);
                
                Name first = null;
                try {
                for (int i = 0; i &lt; args.length; i++) {
                Name name;
                Enumeration e;
                System.out.println(&quot;Given name: &quot; + args[i]);
                name = new CompoundName(args[i], dotSyntax);
                if (first == null) {
                first = name;
                }
                e = name.getComponents();
                while (e.hasMoreElements()) {
                System.out.println(&quot;Element: &quot; + e.nextElement());
                }
                System.out.println(&quot;Constructed name: &quot; + name.toString());
                
                System.out.println(&quot;Compare &quot; + first.toString() + &quot; with &quot;
                + name.toString() + &quot; = &quot; + first.compareTo(name));
                }
                } catch (Exception ne) {
                ne.printStackTrace();
                }
                }                
            </comment>
            <implements interface="Name"/>
            <javadoc line="31">
                This class represents a compound name -- a name from
                  a hierarchical name space.
                  Each component in a compound name is an atomic name.
                  &lt;p&gt;
                  The components of a compound name are numbered.  The indexes of a
                  compound name with N components range from 0 up to, but not including, N.
                  This range may be written as [0,N).
                  The most significant component is at index 0.
                  An empty compound name has no components.
                  &lt;p&gt;
                  &lt;h4&gt;Compound Name Syntax&lt;/h4&gt;
                  The syntax of a compound name is specified using a set of properties:
                  &lt;dl&gt;
                  &lt;dt&gt;jndi.syntax.direction
                  &lt;dd&gt;Direction for parsing (&quot;right_to_left&quot;, &quot;left_to_right&quot;, &quot;flat&quot;).
                  If unspecified, defaults to &quot;flat&quot;, which means the namespace is flat
                  with no hierarchical structure.
                  &lt;dt&gt;jndi.syntax.separator
                  &lt;dd&gt;Separator between atomic name components.
                  Required unless direction is &quot;flat&quot;.
                  &lt;dt&gt;jndi.syntax.ignorecase
                  &lt;dd&gt;If present, &quot;true&quot; means ignore the case when comparing name
                  components. If its value is not &quot;true&quot;, or if the property is not
                  present, case is considered when comparing name components.
                  &lt;dt&gt;jndi.syntax.escape
                  &lt;dd&gt;If present, specifies the escape string for overriding separator,
                  escapes and quotes.
                  &lt;dt&gt;jndi.syntax.beginquote
                  &lt;dd&gt;If present, specifies the string delimiting start of a quoted string.
                  &lt;dt&gt;jndi.syntax.endquote
                  &lt;dd&gt;String delimiting end of quoted string.
                  If present, specifies the string delimiting the end of a quoted string.
                  If not present, use syntax.beginquote as end quote.
                  &lt;dt&gt;jndi.syntax.beginquote2
                  &lt;dd&gt;Alternative set of begin/end quotes.
                  &lt;dt&gt;jndi.syntax.endquote2
                  &lt;dd&gt;Alternative set of begin/end quotes.
                  &lt;dt&gt;jndi.syntax.trimblanks
                  &lt;dd&gt;If present, &quot;true&quot; means trim any leading and trailing whitespaces
                  in a name component for comparison purposes. If its value is not
                  &quot;true&quot;, or if the property is not present, blanks are significant.
                  &lt;dt&gt;jndi.syntax.separator.ava
                  &lt;dd&gt;If present, specifies the string that separates
                  attribute-value-assertions when specifying multiple attribute/value
                  pairs. (e.g. &quot;,&quot;  in age=65,gender=male).
                  &lt;dt&gt;jndi.syntax.separator.typeval
                  &lt;dd&gt;If present, specifies the string that separators attribute
                  from value (e.g. &quot;=&quot; in &quot;age=65&quot;)
                  &lt;/dl&gt;
                  These properties are interpreted according to the following rules:
                  &lt;ol&gt;
                  &lt;li&gt;
                  In a string without quotes or escapes, any instance of the
                  separator delimits two atomic names. Each atomic name is referred
                  to as a &lt;em&gt;component&lt;/em&gt;.
                  &lt;li&gt;
                  A separator, quote or escape is escaped if preceded immediately
                  (on the left) by the escape.
                  &lt;li&gt;
                  If there are two sets of quotes, a specific begin-quote must be matched
                  by its corresponding end-quote.
                  &lt;li&gt;
                  A non-escaped begin-quote which precedes a component must be
                  matched by a non-escaped end-quote at the end of the component.
                  A component thus quoted is referred to as a
                  &lt;em&gt;quoted component&lt;/em&gt;. It is parsed by
                  removing the being- and end- quotes, and by treating the intervening
                  characters as ordinary characters unless one of the rules involving
                  quoted components listed below applies.
                  &lt;li&gt;
                  Quotes embedded in non-quoted components are treated as ordinary strings
                  and need not be matched.
                  &lt;li&gt;
                  A separator that is escaped or appears between non-escaped
                  quotes is treated as an ordinary string and not a separator.
                  &lt;li&gt;
                  An escape string within a quoted component acts as an escape only when
                  followed by the corresponding end-quote string.
                  This can be used to embed an escaped quote within a quoted component.
                  &lt;li&gt;
                  An escaped escape string is not treated as an escape string.
                  &lt;li&gt;
                  An escape string that does not precede a meta string (quotes or separator)
                  and is not at the end of a component is treated as an ordinary string.
                  &lt;li&gt;
                  A leading separator (the compound name string begins with
                  a separator) denotes a leading empty atomic component (consisting
                  of an empty string).
                  A trailing separator (the compound name string ends with
                  a separator) denotes a trailing empty atomic component.
                  Adjacent separators denote an empty atomic component.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  The string form of the compound name follows the syntax described above.
                  When the components of the compound name are turned into their
                  string representation, the reserved syntax rules described above are
                  applied (e.g. embedded separators are escaped or quoted)
                  so that when the same string is parsed, it will yield the same components
                  of the original compound name.
                  &lt;p&gt;
                  &lt;h4&gt;Multithreaded Access&lt;/h4&gt;
                  A &lt;tt&gt;CompoundName&lt;/tt&gt; instance is not synchronized against concurrent
                  multithreaded access. Multiple threads trying to access and modify a
                  &lt;tt&gt;CompoundName&lt;/tt&gt; should lock the object.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="impl" type="NameImpl" line="151"/>
            <javadoc line="151">
                Implementation of this compound name.
                  This field is initialized by the constructors and cannot be null.
                  It should be treated as a read-only variable by subclasses.                
            </javadoc>
            <declaration name="mySyntax" type="Properties" line="157"/>
            <javadoc line="157">
                Syntax properties for this compound name.
                  This field is initialized by the constructors and cannot be null.
                  It should be treated as a read-only variable by subclasses.
                  Any necessary changes to mySyntax should be made within constructors
                  and not after the compound name has been instantiated.                
            </javadoc>
            <javadoc line="166">
                Constructs a new compound name instance using the components
                  specified in comps and syntax. This protected method is intended to be
                  to be used by subclasses of CompoundName when they override
                  methods such as clone(), getPrefix(), getSuffix().                
                <param>
                    comps  A non-null enumeration of the components to add.
                      Each element of the enumeration is of class String.
                      The enumeration will be consumed to extract its
                      elements.                    
                </param>
                <param>
                    syntax   A non-null properties that specify the syntax of
                      this compound name. See class description for
                      contents of properties.                    
                </param>
            </javadoc>
            <method name="CompoundName" type="constructor" line="180">
                <params>
                    <param name="comps" type="Enumeration<String>"/>
                    <param name="syntax" type="Properties"/>
                </params>
                <scope line="181"/>
            </method>
            <javadoc line="188">
                Constructs a new compound name instance by parsing the string n
                  using the syntax specified by the syntax properties supplied.                
                <param>
                    n       The non-null string to parse.                    
                </param>
                <param>
                    syntax   A non-null list of properties that specify the syntax of
                      this compound name.  See class description for
                      contents of properties.                    
                </param>
                <exception>
                    InvalidNameException If 'n' violates the syntax specified
                      by <code>syntax</code>.                    
                </exception>
            </javadoc>
            <method name="CompoundName" type="constructor" line="199">
                <params>
                    <param name="n" type="String"/>
                    <param name="syntax" type="Properties"/>
                </params>
                <scope line="200"/>
            </method>
            <javadoc line="207">
                Generates the string representation of this compound name, using
                  the syntax rules of the compound name. The syntax rules
                  are described in the class description.
                  An empty component is represented by an empty string.
                  The string representation thus generated can be passed to
                  the CompoundName constructor with the same syntax properties
                  to create a new equivalent compound name.                
                <return>
                    A non-null string representation of this compound name.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="219"/>
            <javadoc line="223">
                Determines whether obj is syntactically equal to this compound name.
                  If obj is null or not a CompoundName, false is returned.
                  Two compound names are equal if each component in one is &quot;equal&quot;
                  to the corresponding component in the other.
                  &lt;p&gt;
                  Equality is also defined in terms of the syntax of this compound name.
                  The default implementation of CompoundName uses the syntax properties
                  jndi.syntax.ignorecase and jndi.syntax.trimblanks when comparing
                  two components for equality.  If case is ignored, two strings
                  with the same sequence of characters but with different cases
                  are considered equal. If blanks are being trimmed, leading and trailing
                  blanks are ignored for the purpose of the comparison.
                  &lt;p&gt;
                  Both compound names must have the same number of components.
                  &lt;p&gt;
                  Implementation note: Currently the syntax properties of the two compound
                  names are not compared for equality. They might be in the future.                
                <param>
                    obj     The possibly null object to compare against.                    
                </param>
                <return>
                    true if obj is equal to this compound name, false otherwise.                    
                </return>
                <see>
                    #compareTo(java.lang.Object obj)                    
                </see>
            </javadoc>
            <method name="equals" type="boolean" line="246">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="247">
                    %%% check syntax too?                    
                </comment>
            </method>
            <javadoc line="253">
                Computes the hash code of this compound name.
                  The hash code is the sum of the hash codes of the &quot;canonicalized&quot;
                  forms of individual components of this compound name.
                  Each component is &quot;canonicalized&quot; according to the
                  compound name&apos;s syntax before its hash code is computed.
                  For a case-insensitive name, for example, the uppercased form of
                  a name has the same hash code as its lowercased equivalent.                
                <return>
                    An int representing the hash code of this name.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="264"/>
            <javadoc line="268">
                Creates a copy of this compound name.
                  Changes to the components of this compound name won&apos;t
                  affect the new copy and vice versa.
                  The clone and this compound name share the same syntax.                
                <return>
                    A non-null copy of this compound name.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="276"/>
            <javadoc line="280">
                Compares this CompoundName with the specified Object for order.
                  Returns a
                  negative integer, zero, or a positive integer as this Name is less
                  than, equal to, or greater than the given Object.
                  &lt;p&gt;
                  If obj is null or not an instance of CompoundName, ClassCastException
                  is thrown.
                  &lt;p&gt;
                  See equals() for what it means for two compound names to be equal.
                  If two compound names are equal, 0 is returned.
                  &lt;p&gt;
                  Ordering of compound names depend on the syntax of the compound name.
                  By default, they follow lexicographical rules for string comparison
                  with the extension that this applies to all the components in the
                  compound name and that comparison of individual components is
                  affected by the jndi.syntax.ignorecase and jndi.syntax.trimblanks
                  properties, identical to how they affect equals().
                  If this compound name is &quot;lexicographically&quot; lesser than obj,
                  a negative number is returned.
                  If this compound name is &quot;lexicographically&quot; greater than obj,
                  a positive number is returned.
                  &lt;p&gt;
                  Implementation note: Currently the syntax properties of the two compound
                  names are not compared when checking order. They might be in the future.                
                <param>
                    obj     The non-null object to compare against.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this Name
                      is less than, equal to, or greater than the given Object.                    
                </return>
                <exception>
                    ClassCastException if obj is not a CompoundName.                    
                </exception>
                <see>
                    #equals(java.lang.Object)                    
                </see>
            </javadoc>
            <method name="compareTo" type="int" line="311">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="312"/>
            </method>
            <javadoc line="318">
                Retrieves the number of components in this compound name.                
                <return>
                    The nonnegative number of components in this compound name.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="323"/>
            <javadoc line="327">
                Determines whether this compound name is empty.
                  A compound name is empty if it has zero components.                
                <return>
                    true if this compound name is empty, false otherwise.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="333"/>
            <javadoc line="337">
                Retrieves the components of this compound name as an enumeration
                  of strings.
                  The effects of updates to this compound name on this enumeration
                  is undefined.                
                <return>
                    A non-null enumeration of the components of this
                      compound name. Each element of the enumeration is of class String.                    
                </return>
            </javadoc>
            <method name="getAll" type="Enumeration<String>" line="346"/>
            <javadoc line="350">
                Retrieves a component of this compound name.                
                <param>
                    posn    The 0-based index of the component to retrieve.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    The component at index posn.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException if posn is outside the
                      specified range.                    
                </exception>
            </javadoc>
            <method name="get" type="String" line="359">
                <params>
                    <param name="posn" type="int"/>
                </params>
            </method>
            <javadoc line="363">
                Creates a compound name whose components consist of a prefix of the
                  components in this compound name.
                  The result and this compound name share the same syntax.
                  Subsequent changes to
                  this compound name does not affect the name that is returned and
                  vice versa.                
                <param>
                    posn    The 0-based index of the component at which to stop.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    A compound name consisting of the components at indexes in
                      the range [0,posn).                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="getPrefix" type="Name" line="378">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="comps" type="Enumeration" line="379"/>
            </method>
            <javadoc line="383">
                Creates a compound name whose components consist of a suffix of the
                  components in this compound name.
                  The result and this compound name share the same syntax.
                  Subsequent changes to
                  this compound name does not affect the name that is returned.                
                <param>
                    posn    The 0-based index of the component at which to start.
                      Must be in the range [0,size()].                    
                </param>
                <return>
                    A compound name consisting of the components at indexes in
                      the range [posn,size()).  If posn is equal to
                      size(), an empty compound name is returned.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
            </javadoc>
            <method name="getSuffix" type="Name" line="398">
                <params>
                    <param name="posn" type="int"/>
                </params>
                <declaration name="comps" type="Enumeration" line="399"/>
            </method>
            <javadoc line="403">
                Determines whether a compound name is a prefix of this compound name.
                  A compound name &apos;n&apos; is a prefix if it is equal to
                  getPrefix(n.size())--in other words, this compound name
                  starts with &apos;n&apos;.
                  If n is null or not a compound name, false is returned.
                  &lt;p&gt;
                  Implementation note: Currently the syntax properties of n
                  are not used when doing the comparison. They might be in the future.                
                <param>
                    n       The possibly null compound name to check.                    
                </param>
                <return>
                    true if n is a CompoundName and
                      is a prefix of this compound name, false otherwise.                    
                </return>
            </javadoc>
            <method name="startsWith" type="boolean" line="416">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <scope line="417"/>
                <scope line="419"/>
            </method>
            <javadoc line="424">
                Determines whether a compound name is a suffix of this compound name.
                  A compound name &apos;n&apos; is a suffix if it it is equal to
                  getSuffix(size()-n.size())--in other words, this
                  compound name ends with &apos;n&apos;.
                  If n is null or not a compound name, false is returned.
                  &lt;p&gt;
                  Implementation note: Currently the syntax properties of n
                  are not used when doing the comparison. They might be in the future.                
                <param>
                    n       The possibly null compound name to check.                    
                </param>
                <return>
                    true if n is a CompoundName and
                      is a suffix of this compound name, false otherwise.                    
                </return>
            </javadoc>
            <method name="endsWith" type="boolean" line="437">
                <params>
                    <param name="n" type="Name"/>
                </params>
                <scope line="438"/>
                <scope line="440"/>
            </method>
            <javadoc line="445">
                Adds the components of a compound name -- in order -- to the end of
                  this compound name.
                  &lt;p&gt;
                  Implementation note: Currently the syntax properties of suffix
                  is not used or checked. They might be in the future.                
                <param>
                    suffix   The non-null components to add.                    
                </param>
                <return>
                    The updated CompoundName, not a new one. Cannot be null.                    
                </return>
                <exception>
                    InvalidNameException If suffix is not a compound name,
                      or if the addition of the components violates the syntax
                      of this compound name (e.g. exceeding number of components).                    
                </exception>
            </javadoc>
            <method name="addAll" type="Name" line="457">
                <params>
                    <param name="suffix" type="Name"/>
                </params>
                <scope line="458"/>
                <scope line="461"/>
            </method>
            <javadoc line="467">
                Adds the components of a compound name -- in order -- at a specified
                  position within this compound name.
                  Components of this compound name at or after the index of the first
                  new component are shifted up (away from index 0)
                  to accommodate the new components.
                  &lt;p&gt;
                  Implementation note: Currently the syntax properties of suffix
                  is not used or checked. They might be in the future.                
                <param>
                    n        The non-null components to add.                    
                </param>
                <param>
                    posn     The index in this name at which to add the new
                      components.  Must be in the range [0,size()].                    
                </param>
                <return>
                    The updated CompoundName, not a new one. Cannot be null.                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
                <exception>
                    InvalidNameException If n is not a compound name,
                      or if the addition of the components violates the syntax
                      of this compound name (e.g. exceeding number of components).                    
                </exception>
            </javadoc>
            <method name="addAll" type="Name" line="487">
                <params>
                    <param name="posn" type="int"/>
                    <param name="n" type="Name"/>
                </params>
                <scope line="488"/>
                <scope line="491"/>
            </method>
            <javadoc line="497">
                Adds a single component to the end of this compound name.                
                <param>
                    comp     The non-null component to add.                    
                </param>
                <return>
                    The updated CompoundName, not a new one. Cannot be null.                    
                </return>
                <exception>
                    InvalidNameException If adding comp at end of the name
                      would violate the compound name's syntax.                    
                </exception>
            </javadoc>
            <method name="add" type="Name" line="505">
                <params>
                    <param name="comp" type="String"/>
                </params>
            </method>
            <javadoc line="510">
                Adds a single component at a specified position within this
                  compound name.
                  Components of this compound name at or after the index of the new
                  component are shifted up by one (away from index 0)
                  to accommodate the new component.                
                <param>
                    comp    The non-null component to add.                    
                </param>
                <param>
                    posn    The index at which to add the new component.
                      Must be in the range [0,size()].                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsExceptionIf posn is outside the specified range.                    
                </exception>
                <return>
                    The updated CompoundName, not a new one. Cannot be null.                    
                </return>
                <exception>
                    InvalidNameException If adding comp at the specified position
                      would violate the compound name's syntax.                    
                </exception>
            </javadoc>
            <method name="add" type="Name" line="526">
                <params>
                    <param name="posn" type="int"/>
                    <param name="comp" type="String"/>
                </params>
            </method>
            <javadoc line="531">
                Deletes a component from this compound name.
                  The component of this compound name at position &apos;posn&apos; is removed,
                  and components at indices greater than &apos;posn&apos;
                  are shifted down (towards index 0) by one.                
                <param>
                    posn    The index of the component to delete.
                      Must be in the range [0,size()).                    
                </param>
                <return>
                    The component removed (a String).                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsExceptionIf posn is outside the specified range (includes case where
                      compound name is empty).                    
                </exception>
                <exception>
                    InvalidNameException If deleting the component
                      would violate the compound name's syntax.                    
                </exception>
            </javadoc>
            <method name="remove" type="Object" line="546">
                <params>
                    <param name="posn" type="int"/>
                </params>
            </method>
            <javadoc line="550">
                Overridden to avoid implementation dependency.                
                <serialData>
                    The syntax <tt>Properties</tt>, followed by
                      the number of components (an <tt>int</tt>), and the individual
                      components (each a <tt>String</tt>).                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="557">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
                <declaration name="comps" type="Enumeration" line="560"/>
                <scope line="561"/>
            </method>
            <javadoc line="566">
                Overridden to avoid implementation dependency.                
            </javadoc>
            <method name="readObject" type="void" line="570">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
                <comment line="573">
                    number of components                    
                </comment>
                <declaration name="n" type="int" line="573"/>
                <scope line="574">
                    <scope line="575"/>
                </scope>
                <scope line="578"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="583"/>
            <javadoc line="583">
                Use serialVersionUID from JNDI 1.1.1 for interoperability                
            </javadoc>
        </class>
    </source>