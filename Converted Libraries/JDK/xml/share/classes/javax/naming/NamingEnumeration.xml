<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.naming">
        <import package="java.util.Enumeration"/>
        <interface name="NamingEnumeration">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Enumeration">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </implements>
            <javadoc line="30">
                This interface is for enumerating lists returned by
                  methods in the javax.naming and javax.naming.directory packages.
                  It extends Enumeration to allow as exceptions to be thrown during
                  the enumeration.
                  &lt;p&gt;
                  When a method such as list(), listBindings(), or search() returns
                  a NamingEnumeration, any exceptions encountered are reserved until
                  all results have been returned. At the end of the enumeration, the
                  exception is thrown (by hasMore());
                  &lt;p&gt;
                  For example, if the list() is
                  returning only a partial answer, the corresponding exception would
                  be PartialResultException. list() would first return a NamingEnumeration.
                  When the last of the results has been returned by the NamingEnumeration&apos;s
                  next(), invoking hasMore() would result in PartialResultException being thrown.
                  &lt;p&gt;
                  In another example, if a search() method was invoked with a specified
                  size limit of &apos;n&apos;. If the answer consists of more than &apos;n&apos; results,
                  search() would first return a NamingEnumeration.
                  When the n&apos;th result has been returned by invoking next() on the
                  NamingEnumeration, a SizeLimitExceedException would then thrown when
                  hasMore() is invoked.
                  &lt;p&gt;
                  Note that if the program uses hasMoreElements() and nextElement() instead
                  to iterate through the NamingEnumeration, because these methods
                  cannot throw exceptions, no exception will be thrown. Instead,
                  in the previous example, after the n&apos;th result has been returned by
                  nextElement(), invoking hasMoreElements() would return false.
                  &lt;p&gt;
                  Note also that NoSuchElementException is thrown if the program invokes
                  next() or nextElement() when there are no elements left in the enumeration.
                  The program can always avoid this exception by using hasMore() and
                  hasMoreElements() to check whether the end of the enumeration has been reached.
                  &lt;p&gt;
                  If an exception is thrown during an enumeration,
                  the enumeration becomes invalid.
                  Subsequent invocation of any method on that enumeration
                  will yield undefined results.                
                <author>
                    Rosanna Lee                    
                </author>
                <author>
                    Scott Seligman                    
                </author>
                <see>
                    Context#list                    
                </see>
                <see>
                    Context#listBindings                    
                </see>
                <see>
                    javax.naming.directory.DirContext#search                    
                </see>
                <see>
                    javax.naming.directory.Attributes#getAll                    
                </see>
                <see>
                    javax.naming.directory.Attributes#getIDs                    
                </see>
                <see>
                    javax.naming.directory.Attribute#getAll                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="next" type="T" line="82"/>
            <javadoc line="82">
                Retrieves the next element in the enumeration.
                  This method allows naming exceptions encountered while
                  retrieving the next element to be caught and handled
                  by the application.
                  &lt;p&gt;
                  Note that &lt;tt&gt;next()&lt;/tt&gt; can also throw the runtime exception
                  NoSuchElementException to indicate that the caller is
                  attempting to enumerate beyond the end of the enumeration.
                  This is different from a NamingException, which indicates
                  that there was a problem in obtaining the next element,
                  for example, due to a referral or server unavailability, etc.                
                <return>
                    The possibly null element in the enumeration.
                      null is only valid for enumerations that can return
                      null (e.g. Attribute.getAll() returns an enumeration of
                      attribute values, and an attribute value can be null).                    
                </return>
                <exception>
                    NamingException If a naming exception is encountered while attempting
                      to retrieve the next element. See NamingException
                      and its subclasses for the possible naming exceptions.                    
                </exception>
                <exception>
                    java.util.NoSuchElementException If attempting to get the next element when none is available.                    
                </exception>
                <see>
                    java.util.Enumeration#nextElement                    
                </see>
            </javadoc>
            <method name="hasMore" type="boolean" line="107"/>
            <javadoc line="107">
                Determines whether there are any more elements in the enumeration.
                  This method allows naming exceptions encountered while
                  determining whether there are more elements to be caught and handled
                  by the application.                
                <return>
                    true if there is more in the enumeration ; false otherwise.                    
                </return>
                <exception>
                    NamingExceptionIf a naming exception is encountered while attempting
                      to determine whether there is another element
                      in the enumeration. See NamingException
                      and its subclasses for the possible naming exceptions.                    
                </exception>
                <see>
                    java.util.Enumeration#hasMoreElements                    
                </see>
            </javadoc>
            <method name="close" type="void" line="123"/>
            <javadoc line="123">
                Closes this enumeration.
                  After this method has been invoked on this enumeration, the
                  enumeration becomes invalid and subsequent invocation of any of
                  its methods will yield undefined results.
                  This method is intended for aborting an enumeration to free up resources.
                  If an enumeration proceeds to the end--that is, until
                  &lt;tt&gt;hasMoreElements()&lt;/tt&gt; or &lt;tt&gt;hasMore()&lt;/tt&gt; returns &lt;tt&gt;false&lt;/tt&gt;--
                  resources will be freed up automatically and there is no need to
                  explicitly call &lt;tt&gt;close()&lt;/tt&gt;.
                  &lt;p&gt;
                  This method indicates to the service provider that it is free
                  to release resources associated with the enumeration, and can
                  notify servers to cancel any outstanding requests. The &lt;tt&gt;close()&lt;/tt&gt;
                  method is a hint to implementations for managing their resources.
                  Implementations are encouraged to use appropriate algorithms to
                  manage their resources when client omits the &lt;tt&gt;close()&lt;/tt&gt; calls.                
                <exception>
                    NamingException If a naming exception is encountered
                      while closing the enumeration.                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
        </interface>
    </source>