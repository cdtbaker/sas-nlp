<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig.keyinfo">
        <import package="java.util.List"/>
        <import package="javax.xml.crypto.MarshalException"/>
        <import package="javax.xml.crypto.XMLCryptoContext"/>
        <import package="javax.xml.crypto.XMLStructure"/>
        <interface name="KeyInfo">
            <implements interface="XMLStructure"/>
            <javadoc line="6">
                A representation of the XML &lt;code&gt;KeyInfo&lt;/code&gt; element as defined in
                  the &lt;a href=&quot;http://www.w3.org/TR/xmldsig-core/&quot;&gt;
                  W3C Recommendation for XML-Signature Syntax and Processing&lt;/a&gt;.
                  A &lt;code&gt;KeyInfo&lt;/code&gt; contains a list of {@link XMLStructure}s, each of
                  which contain information that enables the recipient(s) to obtain the key
                  needed to validate an XML signature. The XML Schema Definition is defined as:
                  &lt;pre&gt;
                  &amp;lt;element name=&quot;KeyInfo&quot; type=&quot;ds:KeyInfoType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;KeyInfoType&quot; mixed=&quot;true&quot;&amp;gt;
                  &amp;lt;choice maxOccurs=&quot;unbounded&quot;&amp;gt;
                  &amp;lt;element ref=&quot;ds:KeyName&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:KeyValue&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:RetrievalMethod&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:X509Data&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:PGPData&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:SPKIData&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:MgmtData&quot;/&amp;gt;
                  &amp;lt;any processContents=&quot;lax&quot; namespace=&quot;##other&quot;/&amp;gt;
                  &amp;lt;!-- (1,1) elements from (0,unbounded) namespaces --&amp;gt;
                  &amp;lt;/choice&amp;gt;
                  &amp;lt;attribute name=&quot;Id&quot; type=&quot;ID&quot; use=&quot;optional&quot;/&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &lt;/pre&gt;
                  A &lt;code&gt;KeyInfo&lt;/code&gt; instance may be created by invoking one of the{@link KeyInfoFactory#newKeyInfo newKeyInfo} methods of the{@link KeyInfoFactory} class, and passing it a list of one or more
                  &lt;code&gt;XMLStructure&lt;/code&gt;s and an optional id parameter;
                  for example:
                  &lt;pre&gt;
                  KeyInfoFactory factory = KeyInfoFactory.getInstance(&quot;DOM&quot;);
                  KeyInfo keyInfo = factory.newKeyInfo
                  (Collections.singletonList(factory.newKeyName(&quot;Alice&quot;), &quot;keyinfo-1&quot;));
                  &lt;/pre&gt;
                  &lt;p&gt;&lt;code&gt;KeyInfo&lt;/code&gt; objects can also be marshalled to XML by invoking
                  the {@link #marshal marshal} method.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
                <see>
                    KeyInfoFactory#newKeyInfo(List)                    
                </see>
                <see>
                    KeyInfoFactory#newKeyInfo(List,String)                    
                </see>
            </javadoc>
            <method name="getContent" type="List" line="47"/>
            <javadoc line="47">
                Returns an {@link java.util.Collections#unmodifiableList unmodifiable
                  list} containing the key information. Each entry of the list is
                  an {@link XMLStructure}.
                  &lt;p&gt;If there is a public subclass representing the type of
                  &lt;code&gt;XMLStructure&lt;/code&gt;, it is returned as an instance of that
                  class (ex: an &lt;code&gt;X509Data&lt;/code&gt; element would be returned as an
                  instance of {@link javax.xml.crypto.dsig.keyinfo.X509Data}).                
                <return>
                    an unmodifiable list of one or more <code>XMLStructure</code>s
                      in this <code>KeyInfo</code>. Never returns <code>null</code> or an
                      empty list.                    
                </return>
            </javadoc>
            <method name="getId" type="String" line="60"/>
            <javadoc line="60">
                Return the optional Id attribute of this &lt;code&gt;KeyInfo&lt;/code&gt;, which
                  may be useful for referencing this &lt;code&gt;KeyInfo&lt;/code&gt; from other
                  XML structures.                
                <return>
                    the Id attribute of this <code>KeyInfo</code> (may be
                      <code>null</code> if not specified)                    
                </return>
            </javadoc>
            <method name="marshal" type="void" line="68"/>
            <javadoc line="68">
                Marshals the key info to XML.                
                <param>
                    parent a mechanism-specific structure containing the parent node
                      that the marshalled key info will be appended to                    
                </param>
                <param>
                    context the <code>XMLCryptoContext</code> containing additional
                      context (may be null if not applicable)                    
                </param>
                <throws>
                    ClassCastException if the type of <code>parent</code> or
                      <code>context</code> is not compatible with this key info                    
                </throws>
                <throws>
                    MarshalException if the key info cannot be marshalled                    
                </throws>
                <throws>
                    NullPointerException if <code>parent</code> is <code>null</code>                    
                </throws>
            </javadoc>
        </interface>
    </source>