<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto">
        <interface name="XMLCryptoContext">
            <javadoc line="30">
                Contains common context information for XML cryptographic operations.
                  &lt;p&gt;This interface contains methods for setting and retrieving properties
                  that affect the processing of XML signatures or XML encrypted structures.
                  &lt;p&gt;Note that &lt;code&gt;XMLCryptoContext&lt;/code&gt; instances can contain information
                  and state specific to the XML cryptographic structure it is used with.
                  The results are unpredictable if an &lt;code&gt;XMLCryptoContext&lt;/code&gt; is
                  used with multiple structures (for example, you should not use the same{@link javax.xml.crypto.dsig.XMLValidateContext} instance to validate two
                  different {@link javax.xml.crypto.dsig.XMLSignature} objects).                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseURI" type="String" line="49"/>
            <javadoc line="49">
                Returns the base URI.                
                <return>
                    the base URI, or &lt;code&gt;null&lt;/code&gt; if not specified                    
                </return>
                <see>
                    #setBaseURI(String)                    
                </see>
            </javadoc>
            <method name="setBaseURI" type="void" line="57"/>
            <javadoc line="57">
                Sets the base URI.                
                <param>
                    baseURI the base URI, or &lt;code&gt;null&lt;/code&gt; to remove current
                      value                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;baseURI&lt;/code&gt; is not RFC
                      2396 compliant                    
                </throws>
                <see>
                    #getBaseURI                    
                </see>
            </javadoc>
            <method name="getKeySelector" type="KeySelector" line="68"/>
            <javadoc line="68">
                Returns the key selector for finding a key.                
                <return>
                    the key selector, or &lt;code&gt;null&lt;/code&gt; if not specified                    
                </return>
                <see>
                    #setKeySelector(KeySelector)                    
                </see>
            </javadoc>
            <method name="setKeySelector" type="void" line="76"/>
            <javadoc line="76">
                Sets the key selector for finding a key.                
                <param>
                    ks the key selector, or &lt;code&gt;null&lt;/code&gt; to remove the current
                      setting                    
                </param>
                <see>
                    #getKeySelector                    
                </see>
            </javadoc>
            <method name="getURIDereferencer" type="URIDereferencer" line="85"/>
            <javadoc line="85">
                Returns a &lt;code&gt;URIDereferencer&lt;/code&gt; that is used to dereference{@link URIReference}s.                
                <return>
                    the &lt;code&gt;URIDereferencer&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if not
                      specified                    
                </return>
                <see>
                    #setURIDereferencer(URIDereferencer)                    
                </see>
            </javadoc>
            <method name="setURIDereferencer" type="void" line="95"/>
            <javadoc line="95">
                Sets a &lt;code&gt;URIDereferencer&lt;/code&gt; that is used to dereference{@link URIReference}s. The specified &lt;code&gt;URIDereferencer&lt;/code&gt;
                  is used in place of an implementation&apos;s default
                  &lt;code&gt;URIDereferencer&lt;/code&gt;.                
                <param>
                    dereferencer the &lt;code&gt;URIDereferencer&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; to remove any current setting                    
                </param>
                <see>
                    #getURIDereferencer                    
                </see>
            </javadoc>
            <method name="getNamespacePrefix" type="String" line="107"/>
            <javadoc line="107">
                Returns the namespace prefix that the specified namespace URI is
                  associated with. Returns the specified default prefix if the specified
                  namespace URI has not been bound to a prefix. To bind a namespace URI
                  to a prefix, call the {@link #putNamespacePrefix putNamespacePrefix}method.                
                <param>
                    namespaceURI a namespace URI                    
                </param>
                <param>
                    defaultPrefix the prefix to be returned in the event that the
                      the specified namespace URI has not been bound to a prefix.                    
                </param>
                <return>
                    the prefix that is associated with the specified namespace URI,
                      or &lt;code&gt;defaultPrefix&lt;/code&gt; if the URI is not registered. If
                      the namespace URI is registered but has no prefix, an empty string
                      (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is returned.                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;namespaceURI&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #putNamespacePrefix(String,String)                    
                </see>
            </javadoc>
            <method name="putNamespacePrefix" type="String" line="127"/>
            <javadoc line="127">
                Maps the specified namespace URI to the specified prefix. If there is
                  already a prefix associated with the specified namespace URI, the old
                  prefix is replaced by the specified prefix.                
                <param>
                    namespaceURI a namespace URI                    
                </param>
                <param>
                    prefix a namespace prefix (or &lt;code&gt;null&lt;/code&gt; to remove any
                      existing mapping). Specifying the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;)
                      binds no prefix to the namespace URI.                    
                </param>
                <return>
                    the previous prefix associated with the specified namespace
                      URI, or &lt;code&gt;null&lt;/code&gt; if there was none                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;namespaceURI&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #getNamespacePrefix(String,String)                    
                </see>
            </javadoc>
            <method name="getDefaultNamespacePrefix" type="String" line="144"/>
            <javadoc line="144">
                Returns the default namespace prefix. The default namespace prefix
                  is the prefix for all namespace URIs not explicitly set by the{@link #putNamespacePrefix putNamespacePrefix} method.                
                <return>
                    the default namespace prefix, or &lt;code&gt;null&lt;/code&gt; if none has
                      been set.                    
                </return>
                <see>
                    #setDefaultNamespacePrefix(String)                    
                </see>
            </javadoc>
            <method name="setDefaultNamespacePrefix" type="void" line="155"/>
            <javadoc line="155">
                Sets the default namespace prefix. This sets the namespace prefix for
                  all namespace URIs not explicitly set by the {@link #putNamespacePrefixputNamespacePrefix} method.                
                <param>
                    defaultPrefix the default namespace prefix, or &lt;code&gt;null&lt;/code&gt;
                      to remove the current setting. Specify the empty string
                      (&lt;code&gt;&quot;&quot;&lt;/code&gt;) to bind no prefix.                    
                </param>
                <see>
                    #getDefaultNamespacePrefix                    
                </see>
            </javadoc>
            <method name="setProperty" type="Object" line="167"/>
            <javadoc line="167">
                Sets the specified property.                
                <param>
                    name the name of the property                    
                </param>
                <param>
                    value the value of the property to be set                    
                </param>
                <return>
                    the previous value of the specified property, or
                      &lt;code&gt;null&lt;/code&gt; if it did not have a value                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #getProperty(String)                    
                </see>
            </javadoc>
            <method name="getProperty" type="Object" line="179"/>
            <javadoc line="179">
                Returns the value of the specified property.                
                <param>
                    name the name of the property                    
                </param>
                <return>
                    the current value of the specified property, or
                      &lt;code&gt;null&lt;/code&gt; if it does not have a value                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #setProperty(String,Object)                    
                </see>
            </javadoc>
            <method name="get" type="Object" line="190"/>
            <javadoc line="190">
                Returns the value to which this context maps the specified key.
                  &lt;p&gt;More formally, if this context contains a mapping from a key
                  &lt;code&gt;k&lt;/code&gt; to a value &lt;code&gt;v&lt;/code&gt; such that
                  &lt;code&gt;(key==null ? k==null : key.equals(k))&lt;/code&gt;, then this method
                  returns &lt;code&gt;v&lt;/code&gt;; otherwise it returns &lt;code&gt;null&lt;/code&gt;. (There
                  can be at most one such mapping.)
                  &lt;p&gt;This method is useful for retrieving arbitrary information that is
                  specific to the cryptographic operation that this context is used for.                
                <param>
                    key the key whose associated value is to be returned                    
                </param>
                <return>
                    the value to which this context maps the specified key, or
                      &lt;code&gt;null&lt;/code&gt; if there is no mapping for the key                    
                </return>
                <see>
                    #put(Object,Object)                    
                </see>
            </javadoc>
            <method name="put" type="Object" line="209"/>
            <javadoc line="209">
                Associates the specified value with the specified key in this context.
                  If the context previously contained a mapping for this key, the old
                  value is replaced by the specified value.
                  &lt;p&gt;This method is useful for storing arbitrary information that is
                  specific to the cryptographic operation that this context is used for.                
                <param>
                    key key with which the specified value is to be associated with                    
                </param>
                <param>
                    value value to be associated with the specified key                    
                </param>
                <return>
                    the previous value associated with the key, or &lt;code&gt;null&lt;/code&gt;
                      if there was no mapping for the key                    
                </return>
                <throws>
                    IllegalArgumentException if some aspect of this key or value
                      prevents it from being stored in this context                    
                </throws>
                <see>
                    #get(Object)                    
                </see>
            </javadoc>
        </interface>
    </source>