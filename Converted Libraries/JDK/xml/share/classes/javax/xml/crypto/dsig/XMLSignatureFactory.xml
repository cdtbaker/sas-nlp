<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig">
        <import package="javax.xml.crypto.Data"/>
        <import package="javax.xml.crypto.MarshalException"/>
        <import package="javax.xml.crypto.NoSuchMechanismException"/>
        <import package="javax.xml.crypto.URIDereferencer"/>
        <import package="javax.xml.crypto.XMLStructure"/>
        <import package="javax.xml.crypto.dom.DOMStructure"/>
        <import package="javax.xml.crypto.dsig.keyinfo.KeyInfo"/>
        <import package="javax.xml.crypto.dsig.keyinfo.KeyInfoFactory"/>
        <import package="javax.xml.crypto.dsig.spec"/>
        <import package="javax.xml.crypto.dsig.dom.DOMValidateContext"/>
        <import package="javax.xml.crypto.dsig.dom.DOMSignContext"/>
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Security"/>
        <import package="java.util.List"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="XMLSignatureFactory" line="52">
            <comment line="514">
                Object factory methods                
            </comment>
            <comment line="599">
                Algorithm factory methods                
            </comment>
            <javadoc line="52">
                A factory for creating {@link XMLSignature} objects from scratch or
                  for unmarshalling an &lt;code&gt;XMLSignature&lt;/code&gt; object from a corresponding
                  XML representation.
                  &lt;h2&gt;XMLSignatureFactory Type&lt;/h2&gt;
                  &lt;p&gt;Each instance of &lt;code&gt;XMLSignatureFactory&lt;/code&gt; supports a specific
                  XML mechanism type. To create an &lt;code&gt;XMLSignatureFactory&lt;/code&gt;, call one
                  of the static {@link #getInstance getInstance} methods, passing in the XML
                  mechanism type desired, for example:
                  &lt;blockquote&gt;&lt;code&gt;
                  XMLSignatureFactory factory = XMLSignatureFactory.getInstance(&quot;DOM&quot;);
                  &lt;/code&gt;&lt;/blockquote&gt;
                  &lt;p&gt;The objects that this factory produces will be based
                  on DOM and abide by the DOM interoperability requirements as defined in the
                  &lt;a href=&quot;../../../../../technotes/guides/security/xmldsig/overview.html#DOM Mechanism Requirements&quot;&gt;
                  DOM Mechanism Requirements&lt;/a&gt; section of the API overview. See the
                  &lt;a href=&quot;../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider&quot;&gt;
                  Service Providers&lt;/a&gt; section of the API overview for a list of standard
                  mechanism types.
                  &lt;p&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt; implementations are registered and loaded
                  using the {@link java.security.Provider} mechanism.
                  For example, a service provider that supports the
                  DOM mechanism would be specified in the &lt;code&gt;Provider&lt;/code&gt; subclass as:
                  &lt;pre&gt;
                  put(&quot;XMLSignatureFactory.DOM&quot;, &quot;org.example.DOMXMLSignatureFactory&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;An implementation MUST minimally support the default mechanism type: DOM.
                  &lt;p&gt;Note that a caller must use the same &lt;code&gt;XMLSignatureFactory&lt;/code&gt;
                  instance to create the &lt;code&gt;XMLStructure&lt;/code&gt;s of a particular
                  &lt;code&gt;XMLSignature&lt;/code&gt; that is to be generated. The behavior is
                  undefined if &lt;code&gt;XMLStructure&lt;/code&gt;s from different providers or
                  different mechanism types are used together.
                  &lt;p&gt;Also, the &lt;code&gt;XMLStructure&lt;/code&gt;s that are created by this factory
                  may contain state specific to the &lt;code&gt;XMLSignature&lt;/code&gt; and are not
                  intended to be reusable.
                  &lt;h2&gt;Creating XMLSignatures from scratch&lt;/h2&gt;
                  &lt;p&gt;Once the &lt;code&gt;XMLSignatureFactory&lt;/code&gt; has been created, objects
                  can be instantiated by calling the appropriate method. For example, a{@link Reference} instance may be created by invoking one of the{@link #newReference newReference} methods.
                  &lt;h2&gt;Unmarshalling XMLSignatures from XML&lt;/h2&gt;
                  &lt;p&gt;Alternatively, an &lt;code&gt;XMLSignature&lt;/code&gt; may be created from an
                  existing XML representation by invoking the {@link #unmarshalXMLSignatureunmarshalXMLSignature} method and passing it a mechanism-specific{@link XMLValidateContext} instance containing the XML content:
                  &lt;pre&gt;
                  DOMValidateContext context = new DOMValidateContext(key, signatureElement);
                  XMLSignature signature = factory.unmarshalXMLSignature(context);
                  &lt;/pre&gt;
                  Each &lt;code&gt;XMLSignatureFactory&lt;/code&gt; must support the required
                  &lt;code&gt;XMLValidateContext&lt;/code&gt; types for that factory type, but may support
                  others. A DOM &lt;code&gt;XMLSignatureFactory&lt;/code&gt; must support {@link DOMValidateContext} objects.
                  &lt;h2&gt;Signing and marshalling XMLSignatures to XML&lt;/h2&gt;
                  Each &lt;code&gt;XMLSignature&lt;/code&gt; created by the factory can also be
                  marshalled to an XML representation and signed, by invoking the{@link XMLSignature#sign sign} method of the{@link XMLSignature} object and passing it a mechanism-specific{@link XMLSignContext} object containing the signing key and
                  marshalling parameters (see {@link DOMSignContext}).
                  For example:
                  &lt;pre&gt;
                  DOMSignContext context = new DOMSignContext(privateKey, document);
                  signature.sign(context);
                  &lt;/pre&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;The static methods of this class are guaranteed to be thread-safe.
                  Multiple threads may concurrently invoke the static methods defined in this
                  class with no ill effects.
                  &lt;p&gt;However, this is not true for the non-static methods defined by this
                  class. Unless otherwise documented by a specific provider, threads that
                  need to access a single &lt;code&gt;XMLSignatureFactory&lt;/code&gt; instance
                  concurrently should synchronize amongst themselves and provide the
                  necessary locking. Multiple threads each manipulating a different
                  &lt;code&gt;XMLSignatureFactory&lt;/code&gt; instance need not synchronize.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="mechanismType" type="String" line="153"/>
            <declaration name="provider" type="Provider" line="154"/>
            <javadoc line="156">
                Default constructor, for invocation by subclasses.                
            </javadoc>
            <method name="XMLSignatureFactory" type="constructor" line="159"/>
            <javadoc line="161">
                Returns an &lt;code&gt;XMLSignatureFactory&lt;/code&gt; that supports the
                  specified XML processing mechanism and representation type (ex: &quot;DOM&quot;).
                  &lt;p&gt;This method uses the standard JCA provider lookup mechanism to
                  locate and instantiate an &lt;code&gt;XMLSignatureFactory&lt;/code&gt;
                  implementation of the desired mechanism type. It traverses the list of
                  registered security &lt;code&gt;Provider&lt;/code&gt;s, starting with the most
                  preferred &lt;code&gt;Provider&lt;/code&gt;.  A new &lt;code&gt;XMLSignatureFactory&lt;/code&gt;
                  object from the first &lt;code&gt;Provider&lt;/code&gt; that supports the specified
                  mechanism is returned.
                  &lt;p&gt;Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation. See the <a
                      href="../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">
                      Service Providers</a> section of the API overview for a list of
                      standard mechanism types.                    
                </param>
                <return>
                    a new <code>XMLSignatureFactory</code>                    
                </return>
                <throws>
                    NullPointerException if <code>mechanismType</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    NoSuchMechanismException if no <code>Provider</code> supports an
                      <code>XMLSignatureFactory</code> implementation for the specified
                      mechanism                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="XMLSignatureFactory" line="189">
                <params>
                    <param name="mechanismType" type="String"/>
                </params>
                <scope line="190"/>
                <declaration name="instance" type="Instance" line="193"/>
                <scope line="194"/>
                <scope line="197"/>
                <declaration name="factory" type="XMLSignatureFactory" line="200"/>
            </method>
            <javadoc line="206">
                Returns an &lt;code&gt;XMLSignatureFactory&lt;/code&gt; that supports the
                  requested XML processing mechanism and representation type (ex: &quot;DOM&quot;),
                  as supplied by the specified provider. Note that the specified
                  &lt;code&gt;Provider&lt;/code&gt; object does not have to be registered in the
                  provider list.                
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation. See the <a
                      href="../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">
                      Service Providers</a> section of the API overview for a list of
                      standard mechanism types.                    
                </param>
                <param>
                    provider the <code>Provider</code> object                    
                </param>
                <return>
                    a new <code>XMLSignatureFactory</code>                    
                </return>
                <throws>
                    NullPointerException if <code>provider</code> or
                      <code>mechanismType</code> is <code>null</code>                    
                </throws>
                <throws>
                    NoSuchMechanismException if an <code>XMLSignatureFactory</code>
                      implementation for the specified mechanism is not available
                      from the specified <code>Provider</code> object                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="XMLSignatureFactory" line="228">
                <params>
                    <param name="mechanismType" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="229"/>
                <scope line="231"/>
                <declaration name="instance" type="Instance" line="235"/>
                <scope line="236"/>
                <scope line="239"/>
                <declaration name="factory" type="XMLSignatureFactory" line="242"/>
            </method>
            <javadoc line="248">
                Returns an &lt;code&gt;XMLSignatureFactory&lt;/code&gt; that supports the
                  requested XML processing mechanism and representation type (ex: &quot;DOM&quot;),
                  as supplied by the specified provider. The specified provider must be
                  registered in the security provider list.
                  &lt;p&gt;Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation. See the <a
                      href="../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">
                      Service Providers</a> section of the API overview for a list of
                      standard mechanism types.                    
                </param>
                <param>
                    provider the string name of the provider                    
                </param>
                <return>
                    a new <code>XMLSignatureFactory</code>                    
                </return>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list                    
                </throws>
                <throws>
                    NullPointerException if <code>provider</code> or
                      <code>mechanismType</code> is <code>null</code>                    
                </throws>
                <throws>
                    NoSuchMechanismException if an <code>XMLSignatureFactory</code>
                      implementation for the specified mechanism is not
                      available from the specified provider                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="XMLSignatureFactory" line="274">
                <params>
                    <param name="mechanismType" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="275"/>
                <scope line="277"/>
                <scope line="279"/>
                <declaration name="instance" type="Instance" line="283"/>
                <scope line="284"/>
                <scope line="287"/>
                <declaration name="factory" type="XMLSignatureFactory" line="290"/>
            </method>
            <javadoc line="296">
                Returns an &lt;code&gt;XMLSignatureFactory&lt;/code&gt; that supports the
                  default XML processing mechanism and representation type (&quot;DOM&quot;).
                  &lt;p&gt;This method uses the standard JCA provider lookup mechanism to
                  locate and instantiate an &lt;code&gt;XMLSignatureFactory&lt;/code&gt;
                  implementation of the default mechanism type. It traverses the list of
                  registered security &lt;code&gt;Provider&lt;/code&gt;s, starting with the most
                  preferred &lt;code&gt;Provider&lt;/code&gt;.  A new &lt;code&gt;XMLSignatureFactory&lt;/code&gt;
                  object from the first &lt;code&gt;Provider&lt;/code&gt; that supports the DOM
                  mechanism is returned.
                  &lt;p&gt;Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <return>
                    a new <code>XMLSignatureFactory</code>                    
                </return>
                <throws>
                    NoSuchMechanismException if no <code>Provider</code> supports an
                      <code>XMLSignatureFactory</code> implementation for the DOM
                      mechanism                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="XMLSignatureFactory" line="317"/>
            <javadoc line="321">
                Returns the type of the XML processing mechanism and representation
                  supported by this &lt;code&gt;XMLSignatureFactory&lt;/code&gt; (ex: &quot;DOM&quot;).                
                <return>
                    the XML processing mechanism type supported by this
                      <code>XMLSignatureFactory</code>                    
                </return>
            </javadoc>
            <method name="getMechanismType" type="String" line="328"/>
            <javadoc line="332">
                Returns the provider of this &lt;code&gt;XMLSignatureFactory&lt;/code&gt;.                
                <return>
                    the provider of this <code>XMLSignatureFactory</code>                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="337"/>
            <method name="newXMLSignature" type="XMLSignature" line="341"/>
            <javadoc line="341">
                Creates an &lt;code&gt;XMLSignature&lt;/code&gt; and initializes it with the contents
                  of the specified &lt;code&gt;SignedInfo&lt;/code&gt; and &lt;code&gt;KeyInfo&lt;/code&gt;
                  objects.                
                <param>
                    si the signed info                    
                </param>
                <param>
                    ki the key info (may be <code>null</code>)                    
                </param>
                <return>
                    an <code>XMLSignature</code>                    
                </return>
                <throws>
                    NullPointerException if <code>si</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newXMLSignature" type="XMLSignature" line="353"/>
            <javadoc line="353">
                Creates an &lt;code&gt;XMLSignature&lt;/code&gt; and initializes it with the
                  specified parameters.                
                <param>
                    si the signed info                    
                </param>
                <param>
                    ki the key info (may be <code>null</code>)                    
                </param>
                <param>
                    objects a list of {@link XMLObject}s (may be empty or
                      <code>null</code>)                    
                </param>
                <param>
                    id the Id (may be <code>null</code>)                    
                </param>
                <param>
                    signatureValueId the SignatureValue Id (may be <code>null</code>)                    
                </param>
                <return>
                    an <code>XMLSignature</code>                    
                </return>
                <throws>
                    NullPointerException if <code>si</code> is <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if any of the <code>objects</code> are not of
                      type <code>XMLObject</code>                    
                </throws>
            </javadoc>
            <method name="newReference" type="Reference" line="371"/>
            <javadoc line="371">
                Creates a &lt;code&gt;Reference&lt;/code&gt; with the specified URI and digest
                  method.                
                <param>
                    uri the reference URI (may be <code>null</code>)                    
                </param>
                <param>
                    dm the digest method                    
                </param>
                <return>
                    a <code>Reference</code>                    
                </return>
                <throws>
                    IllegalArgumentException if <code>uri</code> is not RFC 2396
                      compliant                    
                </throws>
                <throws>
                    NullPointerException if <code>dm</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newReference" type="Reference" line="384"/>
            <javadoc line="384">
                Creates a &lt;code&gt;Reference&lt;/code&gt; with the specified parameters.                
                <param>
                    uri the reference URI (may be <code>null</code>)                    
                </param>
                <param>
                    dm the digest method                    
                </param>
                <param>
                    transforms a list of {@link Transform}s. The list is defensively
                      copied to protect against subsequent modification. May be
                      <code>null</code> or empty.                    
                </param>
                <param>
                    type the reference type, as a URI (may be <code>null</code>)                    
                </param>
                <param>
                    id the reference ID (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>Reference</code>                    
                </return>
                <throws>
                    ClassCastException if any of the <code>transforms</code> are
                      not of type <code>Transform</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>uri</code> is not RFC 2396
                      compliant                    
                </throws>
                <throws>
                    NullPointerException if <code>dm</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newReference" type="Reference" line="404"/>
            <javadoc line="404">
                Creates a &lt;code&gt;Reference&lt;/code&gt; with the specified parameters and
                  pre-calculated digest value.
                  &lt;p&gt;This method is useful when the digest value of a
                  &lt;code&gt;Reference&lt;/code&gt; has been previously computed. See for example,
                  the
                  &lt;a href=&quot;http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=dss&quot;&gt;
                  OASIS-DSS (Digital Signature Services)&lt;/a&gt; specification.                
                <param>
                    uri the reference URI (may be <code>null</code>)                    
                </param>
                <param>
                    dm the digest method                    
                </param>
                <param>
                    transforms a list of {@link Transform}s. The list is defensively
                      copied to protect against subsequent modification. May be
                      <code>null</code> or empty.                    
                </param>
                <param>
                    type the reference type, as a URI (may be <code>null</code>)                    
                </param>
                <param>
                    id the reference ID (may be <code>null</code>)                    
                </param>
                <param>
                    digestValue the digest value. The array is cloned to protect
                      against subsequent modification.                    
                </param>
                <return>
                    a <code>Reference</code>                    
                </return>
                <throws>
                    ClassCastException if any of the <code>transforms</code> are
                      not of type <code>Transform</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>uri</code> is not RFC 2396
                      compliant                    
                </throws>
                <throws>
                    NullPointerException if <code>dm</code> or
                      <code>digestValue</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newReference" type="Reference" line="434"/>
            <javadoc line="434">
                Creates a &lt;code&gt;Reference&lt;/code&gt; with the specified parameters.
                  &lt;p&gt;This method is useful when a list of transforms have already been
                  applied to the &lt;code&gt;Reference&lt;/code&gt;. See for example,
                  the
                  &lt;a href=&quot;http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=dss&quot;&gt;
                  OASIS-DSS (Digital Signature Services)&lt;/a&gt; specification.
                  &lt;p&gt;When an &lt;code&gt;XMLSignature&lt;/code&gt; containing this reference is
                  generated, the specified &lt;code&gt;transforms&lt;/code&gt; (if non-null) are
                  applied to the specified &lt;code&gt;result&lt;/code&gt;. The
                  &lt;code&gt;Transforms&lt;/code&gt; element of the resulting &lt;code&gt;Reference&lt;/code&gt;
                  element is set to the concatenation of the
                  &lt;code&gt;appliedTransforms&lt;/code&gt; and &lt;code&gt;transforms&lt;/code&gt;.                
                <param>
                    uri the reference URI (may be <code>null</code>)                    
                </param>
                <param>
                    dm the digest method                    
                </param>
                <param>
                    appliedTransforms a list of {@link Transform}s that have
                      already been applied. The list is defensively
                      copied to protect against subsequent modification. The list must
                      contain at least one entry.                    
                </param>
                <param>
                    result the result of processing the sequence of
                      <code>appliedTransforms</code>                    
                </param>
                <param>
                    transforms a list of {@link Transform}s that are to be applied
                      when generating the signature. The list is defensively copied to
                      protect against subsequent modification. May be <code>null</code>
                      or empty.                    
                </param>
                <param>
                    type the reference type, as a URI (may be <code>null</code>)                    
                </param>
                <param>
                    id the reference ID (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>Reference</code>                    
                </return>
                <throws>
                    ClassCastException if any of the transforms (in either list)
                      are not of type <code>Transform</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>uri</code> is not RFC 2396
                      compliant or <code>appliedTransforms</code> is empty                    
                </throws>
                <throws>
                    NullPointerException if <code>dm</code>,
                      <code>appliedTransforms</code> or <code>result</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newSignedInfo" type="SignedInfo" line="477"/>
            <javadoc line="477">
                Creates a &lt;code&gt;SignedInfo&lt;/code&gt; with the specified canonicalization
                  and signature methods, and list of one or more references.                
                <param>
                    cm the canonicalization method                    
                </param>
                <param>
                    sm the signature method                    
                </param>
                <param>
                    references a list of one or more {@link Reference}s. The list is
                      defensively copied to protect against subsequent modification.                    
                </param>
                <return>
                    a <code>SignedInfo</code>                    
                </return>
                <throws>
                    ClassCastException if any of the references are not of
                      type <code>Reference</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>references</code> is empty                    
                </throws>
                <throws>
                    NullPointerException if any of the parameters
                      are <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newSignedInfo" type="SignedInfo" line="495"/>
            <javadoc line="495">
                Creates a &lt;code&gt;SignedInfo&lt;/code&gt; with the specified parameters.                
                <param>
                    cm the canonicalization method                    
                </param>
                <param>
                    sm the signature method                    
                </param>
                <param>
                    references a list of one or more {@link Reference}s. The list is
                      defensively copied to protect against subsequent modification.                    
                </param>
                <param>
                    id the id (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>SignedInfo</code>                    
                </return>
                <throws>
                    ClassCastException if any of the references are not of
                      type <code>Reference</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>references</code> is empty                    
                </throws>
                <throws>
                    NullPointerException if <code>cm</code>, <code>sm</code>, or
                      <code>references</code> are <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newXMLObject" type="XMLObject" line="514"/>
            <javadoc line="514">
                Creates an &lt;code&gt;XMLObject&lt;/code&gt; from the specified parameters.                
                <param>
                    content a list of {@link XMLStructure}s. The list
                      is defensively copied to protect against subsequent modification.
                      May be <code>null</code> or empty.                    
                </param>
                <param>
                    id the Id (may be <code>null</code>)                    
                </param>
                <param>
                    mimeType the mime type (may be <code>null</code>)                    
                </param>
                <param>
                    encoding the encoding (may be <code>null</code>)                    
                </param>
                <return>
                    an <code>XMLObject</code>                    
                </return>
                <throws>
                    ClassCastException if <code>content</code> contains any
                      entries that are not of type {@link XMLStructure}                    
                </throws>
            </javadoc>
            <method name="newManifest" type="Manifest" line="530"/>
            <javadoc line="530">
                Creates a &lt;code&gt;Manifest&lt;/code&gt; containing the specified
                  list of {@link Reference}s.                
                <param>
                    references a list of one or more <code>Reference</code>s. The list
                      is defensively copied to protect against subsequent modification.                    
                </param>
                <return>
                    a <code>Manifest</code>                    
                </return>
                <throws>
                    NullPointerException if <code>references</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>references</code> is empty                    
                </throws>
                <throws>
                    ClassCastException if <code>references</code> contains any
                      entries that are not of type {@link Reference}                    
                </throws>
            </javadoc>
            <method name="newManifest" type="Manifest" line="545"/>
            <javadoc line="545">
                Creates a &lt;code&gt;Manifest&lt;/code&gt; containing the specified
                  list of {@link Reference}s and optional id.                
                <param>
                    references a list of one or more <code>Reference</code>s. The list
                      is defensively copied to protect against subsequent modification.                    
                </param>
                <param>
                    id the id (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>Manifest</code>                    
                </return>
                <throws>
                    NullPointerException if <code>references</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>references</code> is empty                    
                </throws>
                <throws>
                    ClassCastException if <code>references</code> contains any
                      entries that are not of type {@link Reference}                    
                </throws>
            </javadoc>
            <method name="newSignatureProperty" type="SignatureProperty" line="561"/>
            <javadoc line="561">
                Creates a &lt;code&gt;SignatureProperty&lt;/code&gt; containing the specified
                  list of {@link XMLStructure}s, target URI and optional id.                
                <param>
                    content a list of one or more <code>XMLStructure</code>s. The list
                      is defensively copied to protect against subsequent modification.                    
                </param>
                <param>
                    target the target URI of the Signature that this property applies
                      to                    
                </param>
                <param>
                    id the id (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>SignatureProperty</code>                    
                </return>
                <throws>
                    NullPointerException if <code>content</code> or
                      <code>target</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>content</code> is empty                    
                </throws>
                <throws>
                    ClassCastException if <code>content</code> contains any
                      entries that are not of type {@link XMLStructure}                    
                </throws>
            </javadoc>
            <method name="newSignatureProperties" type="SignatureProperties" line="580"/>
            <javadoc line="580">
                Creates a &lt;code&gt;SignatureProperties&lt;/code&gt; containing the specified
                  list of {@link SignatureProperty}s and optional id.                
                <param>
                    properties a list of one or more <code>SignatureProperty</code>s.
                      The list is defensively copied to protect against subsequent
                      modification.                    
                </param>
                <param>
                    id the id (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>SignatureProperties</code>                    
                </return>
                <throws>
                    NullPointerException if <code>properties</code>
                      is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>properties</code> is empty                    
                </throws>
                <throws>
                    ClassCastException if <code>properties</code> contains any
                      entries that are not of type {@link SignatureProperty}                    
                </throws>
            </javadoc>
            <method name="newDigestMethod" type="DigestMethod" line="599"/>
            <javadoc line="599">
                Creates a &lt;code&gt;DigestMethod&lt;/code&gt; for the specified algorithm URI
                  and parameters.                
                <param>
                    algorithm the URI identifying the digest algorithm                    
                </param>
                <param>
                    params algorithm-specific digest parameters (may be
                      <code>null</code>)                    
                </param>
                <return>
                    the <code>DigestMethod</code>                    
                </return>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are inappropriate for the requested algorithm                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if an implementation of the
                      specified algorithm cannot be found                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newSignatureMethod" type="SignatureMethod" line="618"/>
            <javadoc line="618">
                Creates a &lt;code&gt;SignatureMethod&lt;/code&gt; for the specified algorithm URI
                  and parameters.                
                <param>
                    algorithm the URI identifying the signature algorithm                    
                </param>
                <param>
                    params algorithm-specific signature parameters (may be
                      <code>null</code>)                    
                </param>
                <return>
                    the <code>SignatureMethod</code>                    
                </return>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are inappropriate for the requested algorithm                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if an implementation of the
                      specified algorithm cannot be found                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newTransform" type="Transform" line="637"/>
            <javadoc line="637">
                Creates a &lt;code&gt;Transform&lt;/code&gt; for the specified algorithm URI
                  and parameters.                
                <param>
                    algorithm the URI identifying the transform algorithm                    
                </param>
                <param>
                    params algorithm-specific transform parameters (may be
                      <code>null</code>)                    
                </param>
                <return>
                    the <code>Transform</code>                    
                </return>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are inappropriate for the requested algorithm                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if an implementation of the
                      specified algorithm cannot be found                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newTransform" type="Transform" line="656"/>
            <javadoc line="656">
                Creates a &lt;code&gt;Transform&lt;/code&gt; for the specified algorithm URI
                  and parameters. The parameters are specified as a mechanism-specific
                  &lt;code&gt;XMLStructure&lt;/code&gt; (ex: {@link DOMStructure}). This method is
                  useful when the parameters are in XML form or there is no standard
                  class for specifying the parameters.                
                <param>
                    algorithm the URI identifying the transform algorithm                    
                </param>
                <param>
                    params a mechanism-specific XML structure from which to
                      unmarshal the parameters from (may be <code>null</code> if
                      not required or optional)                    
                </param>
                <return>
                    the <code>Transform</code>                    
                </return>
                <throws>
                    ClassCastException if the type of <code>params</code> is
                      inappropriate for this <code>XMLSignatureFactory</code>                    
                </throws>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are inappropriate for the requested algorithm                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if an implementation of the
                      specified algorithm cannot be found                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newCanonicalizationMethod" type="CanonicalizationMethod" line="681"/>
            <javadoc line="681">
                Creates a &lt;code&gt;CanonicalizationMethod&lt;/code&gt; for the specified
                  algorithm URI and parameters.                
                <param>
                    algorithm the URI identifying the canonicalization algorithm                    
                </param>
                <param>
                    params algorithm-specific canonicalization parameters (may be
                      <code>null</code>)                    
                </param>
                <return>
                    the <code>CanonicalizationMethod</code>                    
                </return>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are inappropriate for the requested algorithm                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if an implementation of the
                      specified algorithm cannot be found                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newCanonicalizationMethod" type="CanonicalizationMethod" line="700"/>
            <javadoc line="700">
                Creates a &lt;code&gt;CanonicalizationMethod&lt;/code&gt; for the specified
                  algorithm URI and parameters. The parameters are specified as a
                  mechanism-specific &lt;code&gt;XMLStructure&lt;/code&gt; (ex: {@link DOMStructure}).
                  This method is useful when the parameters are in XML form or there is
                  no standard class for specifying the parameters.                
                <param>
                    algorithm the URI identifying the canonicalization algorithm                    
                </param>
                <param>
                    params a mechanism-specific XML structure from which to
                      unmarshal the parameters from (may be <code>null</code> if
                      not required or optional)                    
                </param>
                <return>
                    the <code>CanonicalizationMethod</code>                    
                </return>
                <throws>
                    ClassCastException if the type of <code>params</code> is
                      inappropriate for this <code>XMLSignatureFactory</code>                    
                </throws>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are inappropriate for the requested algorithm                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if an implementation of the
                      specified algorithm cannot be found                    
                </throws>
                <throws>
                    NullPointerException if <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
            </javadoc>
            <javadoc line="725">
                Returns a &lt;code&gt;KeyInfoFactory&lt;/code&gt; that creates &lt;code&gt;KeyInfo&lt;/code&gt;
                  objects. The returned &lt;code&gt;KeyInfoFactory&lt;/code&gt; has the same
                  mechanism type and provider as this &lt;code&gt;XMLSignatureFactory&lt;/code&gt;.                
                <return>
                    a <code>KeyInfoFactory</code>                    
                </return>
                <throws>
                    NoSuchMechanismException if a <code>KeyFactory</code>
                      implementation with the same mechanism type and provider
                      is not available                    
                </throws>
            </javadoc>
            <method name="getKeyInfoFactory" type="KeyInfoFactory" line="735"/>
            <method name="unmarshalXMLSignature" type="XMLSignature" line="739"/>
            <javadoc line="739">
                Unmarshals a new &lt;code&gt;XMLSignature&lt;/code&gt; instance from a
                  mechanism-specific &lt;code&gt;XMLValidateContext&lt;/code&gt; instance.                
                <param>
                    context a mechanism-specific context from which to unmarshal the
                      signature from                    
                </param>
                <return>
                    the <code>XMLSignature</code>                    
                </return>
                <throws>
                    NullPointerException if <code>context</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if the type of <code>context</code> is
                      inappropriate for this factory                    
                </throws>
                <throws>
                    MarshalException if an unrecoverable exception occurs
                      during unmarshalling                    
                </throws>
            </javadoc>
            <method name="unmarshalXMLSignature" type="XMLSignature" line="756"/>
            <javadoc line="756">
                Unmarshals a new &lt;code&gt;XMLSignature&lt;/code&gt; instance from a
                  mechanism-specific &lt;code&gt;XMLStructure&lt;/code&gt; instance.
                  This method is useful if you only want to unmarshal (and not
                  validate) an &lt;code&gt;XMLSignature&lt;/code&gt;.                
                <param>
                    xmlStructure a mechanism-specific XML structure from which to
                      unmarshal the signature from                    
                </param>
                <return>
                    the <code>XMLSignature</code>                    
                </return>
                <throws>
                    NullPointerException if <code>xmlStructure</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if the type of <code>xmlStructure</code> is
                      inappropriate for this factory                    
                </throws>
                <throws>
                    MarshalException if an unrecoverable exception occurs
                      during unmarshalling                    
                </throws>
            </javadoc>
            <method name="isFeatureSupported" type="boolean" line="775"/>
            <javadoc line="775">
                Indicates whether a specified feature is supported.                
                <param>
                    feature the feature name (as an absolute URI)                    
                </param>
                <return>
                    <code>true</code> if the specified feature is supported,
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    NullPointerException if <code>feature</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="getURIDereferencer" type="URIDereferencer" line="785"/>
            <javadoc line="785">
                Returns a reference to the &lt;code&gt;URIDereferencer&lt;/code&gt; that is used by
                  default to dereference URIs in {@link Reference} objects.                
                <return>
                    a reference to the default <code>URIDereferencer</code> (never
                      <code>null</code>)                    
                </return>
            </javadoc>
        </class>
    </source>