<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig.keyinfo">
        <import package="java.security.KeyException"/>
        <import package="java.security.KeyStore"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.interfaces.DSAPublicKey"/>
        <import package="java.security.interfaces.RSAPublicKey"/>
        <import package="javax.xml.crypto.XMLStructure"/>
        <interface name="KeyValue">
            <implements interface="XMLStructure"/>
            <javadoc line="8">
                A representation of the XML &lt;code&gt;KeyValue&lt;/code&gt; element as defined
                  in the &lt;a href=&quot;http://www.w3.org/TR/xmldsig-core/&quot;&gt;
                  W3C Recommendation for XML-Signature Syntax and Processing&lt;/a&gt;. A
                  &lt;code&gt;KeyValue&lt;/code&gt; object contains a single public key that may be
                  useful in validating the signature. The XML schema definition is defined as:
                  &lt;pre&gt;
                  &amp;lt;element name=&quot;KeyValue&quot; type=&quot;ds:KeyValueType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;KeyValueType&quot; mixed=&quot;true&quot;&amp;gt;
                  &amp;lt;choice&amp;gt;
                  &amp;lt;element ref=&quot;ds:DSAKeyValue&quot;/&amp;gt;
                  &amp;lt;element ref=&quot;ds:RSAKeyValue&quot;/&amp;gt;
                  &amp;lt;any namespace=&quot;##other&quot; processContents=&quot;lax&quot;/&amp;gt;
                  &amp;lt;/choice&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &amp;lt;element name=&quot;DSAKeyValue&quot; type=&quot;ds:DSAKeyValueType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;DSAKeyValueType&quot;&amp;gt;
                  &amp;lt;sequence&amp;gt;
                  &amp;lt;sequence minOccurs=&quot;0&quot;&amp;gt;
                  &amp;lt;element name=&quot;P&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;element name=&quot;Q&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;/sequence&amp;gt;
                  &amp;lt;element name=&quot;G&quot; type=&quot;ds:CryptoBinary&quot; minOccurs=&quot;0&quot;/&amp;gt;
                  &amp;lt;element name=&quot;Y&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;element name=&quot;J&quot; type=&quot;ds:CryptoBinary&quot; minOccurs=&quot;0&quot;/&amp;gt;
                  &amp;lt;sequence minOccurs=&quot;0&quot;&amp;gt;
                  &amp;lt;element name=&quot;Seed&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;element name=&quot;PgenCounter&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;/sequence&amp;gt;
                  &amp;lt;/sequence&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &amp;lt;element name=&quot;RSAKeyValue&quot; type=&quot;ds:RSAKeyValueType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;RSAKeyValueType&quot;&amp;gt;
                  &amp;lt;sequence&amp;gt;
                  &amp;lt;element name=&quot;Modulus&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;element name=&quot;Exponent&quot; type=&quot;ds:CryptoBinary&quot;/&amp;gt;
                  &amp;lt;/sequence&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &lt;/pre&gt;
                  A &lt;code&gt;KeyValue&lt;/code&gt; instance may be created by invoking the{@link KeyInfoFactory#newKeyValue newKeyValue} method of the{@link KeyInfoFactory} class, and passing it a {@link java.security.PublicKey} representing the value of the public key. Here is
                  an example of creating a &lt;code&gt;KeyValue&lt;/code&gt; from a {@link DSAPublicKey}of a {@link java.security.cert.Certificate} stored in a{@link java.security.KeyStore}:
                  &lt;pre&gt;
                  KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
                  PublicKey dsaPublicKey = keyStore.getCertificate(&quot;myDSASigningCert&quot;).getPublicKey();
                  KeyInfoFactory factory = KeyInfoFactory.getInstance(&quot;DOM&quot;);
                  KeyValue keyValue = factory.newKeyValue(dsaPublicKey);
                  &lt;/pre&gt;
                  This class returns the &lt;code&gt;DSAKeyValue&lt;/code&gt; and
                  &lt;code&gt;RSAKeyValue&lt;/code&gt; elements as objects of type{@link DSAPublicKey} and {@link RSAPublicKey}, respectively. Note that not
                  all of the fields in the schema are accessible as parameters of these
                  types.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
                <see>
                    KeyInfoFactory#newKeyValue(PublicKey)                    
                </see>
            </javadoc>
            <declaration name="DSA_TYPE" type="String" line="65"/>
            <javadoc line="65">
                URI identifying the DSA KeyValue KeyInfo type:
                  http://www.w3.org/2000/09/xmldsig#DSAKeyValue. This can be specified as
                  the value of the &lt;code&gt;type&lt;/code&gt; parameter of the{@link RetrievalMethod} class to describe a remote
                  &lt;code&gt;DSAKeyValue&lt;/code&gt; structure.                
            </javadoc>
            <declaration name="RSA_TYPE" type="String" line="72"/>
            <javadoc line="72">
                URI identifying the RSA KeyValue KeyInfo type:
                  http://www.w3.org/2000/09/xmldsig#RSAKeyValue. This can be specified as
                  the value of the &lt;code&gt;type&lt;/code&gt; parameter of the{@link RetrievalMethod} class to describe a remote
                  &lt;code&gt;RSAKeyValue&lt;/code&gt; structure.                
            </javadoc>
            <method name="getPublicKey" type="PublicKey" line="79"/>
            <javadoc line="79">
                Returns the public key of this &lt;code&gt;KeyValue&lt;/code&gt;.                
                <return>
                    the public key of this <code>KeyValue</code>                    
                </return>
                <throws>
                    KeyException if this <code>KeyValue</code> cannot be converted
                      to a <code>PublicKey</code>                    
                </throws>
            </javadoc>
        </interface>
    </source>