<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig">
        <import package="java.security.InvalidAlgorithmParameterException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.Provider"/>
        <import package="java.security.Provider.Service"/>
        <import package="java.security.Security"/>
        <import package="java.util"/>
        <import package="javax.xml.crypto.MarshalException"/>
        <import package="javax.xml.crypto.XMLStructure"/>
        <import package="javax.xml.crypto.XMLCryptoContext"/>
        <import package="javax.xml.crypto.dsig.spec.TransformParameterSpec"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="TransformService" line="15">
            <implements interface="Transform"/>
            <javadoc line="15">
                A Service Provider Interface for transform and canonicalization algorithms.
                  &lt;p&gt;Each instance of &lt;code&gt;TransformService&lt;/code&gt; supports a specific
                  transform or canonicalization algorithm and XML mechanism type. To create a
                  &lt;code&gt;TransformService&lt;/code&gt;, call one of the static{@link #getInstance getInstance} methods, passing in the algorithm URI and
                  XML mechanism type desired, for example:
                  &lt;blockquote&gt;&lt;code&gt;
                  TransformService ts = TransformService.getInstance(Transform.XPATH2, &quot;DOM&quot;);
                  &lt;/code&gt;&lt;/blockquote&gt;
                  &lt;p&gt;&lt;code&gt;TransformService&lt;/code&gt; implementations are registered and loaded
                  using the {@link java.security.Provider} mechanism.  Each
                  &lt;code&gt;TransformService&lt;/code&gt; service provider implementation should include
                  a &lt;code&gt;MechanismType&lt;/code&gt; service attribute that identifies the XML
                  mechanism type that it supports. If the attribute is not specified,
                  &quot;DOM&quot; is assumed. For example, a service provider that supports the
                  XPath Filter 2 Transform and DOM mechanism would be specified in the
                  &lt;code&gt;Provider&lt;/code&gt; subclass as:
                  &lt;pre&gt;
                  put(&quot;TransformService.&quot; + Transform.XPATH2,
                  &quot;org.example.XPath2TransformService&quot;);
                  put(&quot;TransformService.&quot; + Transform.XPATH2 + &quot; MechanismType&quot;, &quot;DOM&quot;);
                  &lt;/pre&gt;
                  &lt;code&gt;TransformService&lt;/code&gt; implementations that support the DOM
                  mechanism type must abide by the DOM interoperability requirements defined
                  in the
                  &lt;a href=&quot;../../../../../technotes/guides/security/xmldsig/overview.html#DOM Mechanism Requirements&quot;&gt;
                  DOM Mechanism Requirements&lt;/a&gt; section of the API overview. See the
                  &lt;a href=&quot;../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider&quot;&gt;
                  Service Providers&lt;/a&gt; section of the API overview for a list of standard
                  mechanism types.
                  &lt;p&gt;
                  Once a &lt;code&gt;TransformService&lt;/code&gt; has been created, it can be used
                  to process &lt;code&gt;Transform&lt;/code&gt; or &lt;code&gt;CanonicalizationMethod&lt;/code&gt;
                  objects. If the &lt;code&gt;Transform&lt;/code&gt; or &lt;code&gt;CanonicalizationMethod&lt;/code&gt;
                  exists in XML form (for example, when validating an existing
                  &lt;code&gt;XMLSignature&lt;/code&gt;), the {@link #init(XMLStructure,XMLCryptoContext)}method must be first called to initialize the transform and provide document
                  context (even if there are no parameters). Alternatively, if the
                  &lt;code&gt;Transform&lt;/code&gt; or &lt;code&gt;CanonicalizationMethod&lt;/code&gt; is being
                  created from scratch, the {@link #init(TransformParameterSpec)} method
                  is called to initialize the transform with parameters and the{@link #marshalParams marshalParams} method is called to marshal the
                  parameters to XML and provide the transform with document context. Finally,
                  the {@link #transform transform} method is called to perform the
                  transformation.
                  &lt;p&gt;
                  &lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;The static methods of this class are guaranteed to be thread-safe.
                  Multiple threads may concurrently invoke the static methods defined in this
                  class with no ill effects.
                  &lt;p&gt;However, this is not true for the non-static methods defined by this
                  class. Unless otherwise documented by a specific provider, threads that
                  need to access a single &lt;code&gt;TransformService&lt;/code&gt; instance
                  concurrently should synchronize amongst themselves and provide the
                  necessary locking. Multiple threads each manipulating a different
                  &lt;code&gt;TransformService&lt;/code&gt; instance need not synchronize.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="algorithm" type="String" line="74"/>
            <declaration name="mechanism" type="String" line="75"/>
            <declaration name="provider" type="Provider" line="76"/>
            <javadoc line="77">
                Default constructor, for invocation by subclasses.                
            </javadoc>
            <method name="TransformService" type="constructor" line="80"/>
            <javadoc line="82">
                Returns a &lt;code&gt;TransformService&lt;/code&gt; that supports the specified
                  algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type
                  (ex: DOM).
                  &lt;p&gt;This method uses the standard JCA provider lookup mechanism to
                  locate and instantiate a &lt;code&gt;TransformService&lt;/code&gt; implementation
                  of the desired algorithm and &lt;code&gt;MechanismType&lt;/code&gt; service
                  attribute. It traverses the list of registered security
                  &lt;code&gt;Provider&lt;/code&gt;s, starting with the most preferred
                  &lt;code&gt;Provider&lt;/code&gt;. A new &lt;code&gt;TransformService&lt;/code&gt; object
                  from the first &lt;code&gt;Provider&lt;/code&gt; that supports the specified
                  algorithm and mechanism type is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the URI of the algorithm                    
                </param>
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation                    
                </param>
                <return>
                    a new <code>TransformService</code>                    
                </return>
                <throws>
                    NullPointerException if <code>algorithm</code> or
                      <code>mechanismType</code> is  <code>null</code>                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if no <code>Provider</code> supports a
                      <code>TransformService</code> implementation for the specified
                      algorithm and mechanism type                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="TransformService" line="107">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="mechanismType" type="String"/>
                </params>
                <scope line="108"/>
                <declaration name="dom" type="boolean" line="111"/>
                <scope line="112"/>
                <declaration name="services" type="List" line="115"/>
                <scope line="116">
                    <declaration name="s" type="Service" line="117"/>
                    <declaration name="value" type="String" line="118"/>
                    <scope line="119">
                        <declaration name="instance" type="Instance" line="120"/>
                        <declaration name="ts" type="TransformService" line="121"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="130">
                Returns a &lt;code&gt;TransformService&lt;/code&gt; that supports the specified
                  algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type
                  (ex: DOM) as supplied by the specified provider. Note that the specified
                  &lt;code&gt;Provider&lt;/code&gt; object does not have to be registered in the
                  provider list.                
                <param>
                    algorithm the URI of the algorithm                    
                </param>
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation                    
                </param>
                <param>
                    provider the <code>Provider</code> object                    
                </param>
                <return>
                    a new <code>TransformService</code>                    
                </return>
                <throws>
                    NullPointerException if <code>provider</code>,
                      <code>algorithm</code>, or <code>mechanismType</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if a <code>TransformService</code>
                      implementation for the specified algorithm and mechanism type is not
                      available from the specified <code>Provider</code> object                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="TransformService" line="149">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="mechanismType" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="150"/>
                <declaration name="dom" type="boolean" line="153"/>
                <scope line="154"/>
                <declaration name="s" type="Service" line="157"/>
                <declaration name="value" type="String" line="158"/>
                <scope line="159">
                    <declaration name="instance" type="Instance" line="160"/>
                    <declaration name="ts" type="TransformService" line="161"/>
                </scope>
            </method>
            <javadoc line="169">
                Returns a &lt;code&gt;TransformService&lt;/code&gt; that supports the specified
                  algorithm URI (ex: {@link Transform#XPATH2}) and mechanism type
                  (ex: DOM) as supplied by the specified provider. The specified provider
                  must be registered in the security provider list.
                  &lt;p&gt;Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    algorithm the URI of the algorithm                    
                </param>
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation                    
                </param>
                <param>
                    provider the string name of the provider                    
                </param>
                <return>
                    a new <code>TransformService</code>                    
                </return>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list                    
                </throws>
                <throws>
                    NullPointerException if <code>provider</code>,
                      <code>mechanismType</code>, or <code>algorithm</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    NoSuchAlgorithmException if a <code>TransformService</code>
                      implementation for the specified algorithm and mechanism type is not
                      available from the specified provider                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="TransformService" line="191">
                <params>
                    <param name="algorithm" type="String"/>
                    <param name="mechanismType" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="192"/>
                <scope line="195"/>
                <declaration name="dom" type="boolean" line="198"/>
                <scope line="199"/>
                <declaration name="s" type="Service" line="202"/>
                <declaration name="value" type="String" line="203"/>
                <scope line="204">
                    <declaration name="instance" type="Instance" line="205"/>
                    <declaration name="ts" type="TransformService" line="206"/>
                </scope>
            </method>
            <class name="MechanismMapEntry" line="214">
                <implements interface="Map.Entry"/>
                <declaration name="mechanism" type="String" line="215"/>
                <declaration name="algorithm" type="String" line="216"/>
                <declaration name="key" type="String" line="217"/>
                <method name="MechanismMapEntry" type="constructor" line="218">
                    <params>
                        <param name="algorithm" type="String"/>
                        <param name="mechanism" type="String"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="223">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="224"/>
                    <declaration name="e" type="Map.Entry" line="227"/>
                </method>
                <method name="getKey" type="Object" line="230"/>
                <method name="getValue" type="Object" line="233"/>
                <method name="setValue" type="Object" line="236">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="239"/>
            </class>
            <javadoc line="243">
                Returns the mechanism type supported by this &lt;code&gt;TransformService&lt;/code&gt;.                
                <return>
                    the mechanism type                    
                </return>
            </javadoc>
            <method name="getMechanismType" type="String" line="247"/>
            <javadoc line="250">
                Returns the URI of the algorithm supported by this
                  &lt;code&gt;TransformService&lt;/code&gt;.                
                <return>
                    the algorithm URI                    
                </return>
            </javadoc>
            <method name="getAlgorithm" type="String" line="255"/>
            <javadoc line="258">
                Returns the provider of this &lt;code&gt;TransformService&lt;/code&gt;.                
                <return>
                    the provider                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="262"/>
            <method name="init" type="void" line="265"/>
            <javadoc line="265">
                Initializes this &lt;code&gt;TransformService&lt;/code&gt; with the specified
                  parameters.
                  &lt;p&gt;If the parameters exist in XML form, the{@link #init(XMLStructure,XMLCryptoContext)} method should be used to
                  initialize the &lt;code&gt;TransformService&lt;/code&gt;.                
                <param>
                    params the algorithm parameters (may be <code>null</code> if
                      not required or optional)                    
                </param>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are invalid for this algorithm                    
                </throws>
            </javadoc>
            <method name="marshalParams" type="void" line="276"/>
            <javadoc line="276">
                Marshals the algorithm-specific parameters. If there are no parameters
                  to be marshalled, this method returns without throwing an exception.                
                <param>
                    parent a mechanism-specific structure containing the parent
                      node that the marshalled parameters should be appended to                    
                </param>
                <param>
                    context the <code>XMLCryptoContext</code> containing
                      additional context (may be <code>null</code> if not applicable)                    
                </param>
                <throws>
                    ClassCastException if the type of <code>parent</code> or
                      <code>context</code> is not compatible with this
                      <code>TransformService</code>                    
                </throws>
                <throws>
                    NullPointerException if <code>parent</code> is <code>null</code>                    
                </throws>
                <throws>
                    MarshalException if the parameters cannot be marshalled                    
                </throws>
            </javadoc>
            <method name="init" type="void" line="290"/>
            <javadoc line="290">
                Initializes this &lt;code&gt;TransformService&lt;/code&gt; with the specified
                  parameters and document context.                
                <param>
                    parent a mechanism-specific structure containing the parent
                      structure                    
                </param>
                <param>
                    context the <code>XMLCryptoContext</code> containing
                      additional context (may be <code>null</code> if not applicable)                    
                </param>
                <throws>
                    ClassCastException if the type of <code>parent</code> or
                      <code>context</code> is not compatible with this
                      <code>TransformService</code>                    
                </throws>
                <throws>
                    NullPointerException if <code>parent</code> is <code>null</code>                    
                </throws>
                <throws>
                    InvalidAlgorithmParameterException if the specified parameters
                      are invalid for this algorithm                    
                </throws>
            </javadoc>
        </class>
    </source>