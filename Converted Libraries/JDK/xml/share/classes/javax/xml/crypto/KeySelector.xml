<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto">
        <import package="java.security.Key"/>
        <import package="javax.xml.crypto.dsig.keyinfo.KeyInfo"/>
        <import package="javax.xml.crypto.dsig.keyinfo.RetrievalMethod"/>
        <class name="KeySelector" line="5">
            <javadoc line="5">
                A selector that finds and returns a key using the data contained in a{@link KeyInfo} object. An example of an implementation of
                  this class is one that searchs a {@link java.security.KeyStore} for
                  trusted keys that match information contained in a &lt;code&gt;KeyInfo&lt;/code&gt;.
                  &lt;p&gt;Whether or not the returned key is trusted and the mechanisms
                  used to determine that is implementation-specific.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <class name="Purpose" line="16">
                <javadoc line="16">
                    The purpose of the key that is to be selected.                    
                </javadoc>
                <declaration name="name" type="String" line="20"/>
                <method name="Purpose" type="constructor" line="21">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="24">
                    Returns a string representation of this purpose (&quot;sign&quot;,
                      &quot;verify&quot;, &quot;encrypt&quot;, or &quot;decrypt&quot;).                    
                    <return>
                        a string representation of this purpose                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="29"/>
                <declaration name="SIGN" type="Purpose" line="32"/>
                <javadoc line="32">
                    A key for signing.                    
                </javadoc>
                <declaration name="VERIFY" type="Purpose" line="36"/>
                <javadoc line="36">
                    A key for verifying.                    
                </javadoc>
                <declaration name="ENCRYPT" type="Purpose" line="40"/>
                <javadoc line="40">
                    A key for encrypting.                    
                </javadoc>
                <declaration name="DECRYPT" type="Purpose" line="44"/>
                <javadoc line="44">
                    A key for decrypting.                    
                </javadoc>
            </class>
            <javadoc line="49">
                Default no-args constructor; intended for invocation by subclasses only.                
            </javadoc>
            <method name="KeySelector" type="constructor" line="52"/>
            <method name="select" type="KeySelectorResult" line="54"/>
            <javadoc line="54">
                Attempts to find a key that satisfies the specified constraints.                
                <param>
                    keyInfo a &lt;code&gt;KeyInfo&lt;/code&gt; (may be &lt;code&gt;null&lt;/code&gt;)                    
                </param>
                <param>
                    purpose the key&apos;s purpose ({@link Purpose#SIGN},{@link Purpose#VERIFY}, {@link Purpose#ENCRYPT}, or{@link Purpose#DECRYPT})                    
                </param>
                <param>
                    method the algorithm method that this key is to be used for.
                      Only keys that are compatible with the algorithm and meet the
                      constraints of the specified algorithm should be returned.                    
                </param>
                <param>
                    context an &lt;code&gt;XMLCryptoContext&lt;/code&gt; that may contain
                      useful information for finding an appropriate key. If this key
                      selector supports resolving {@link RetrievalMethod} types, the
                      context&apos;s &lt;code&gt;baseURI&lt;/code&gt; and &lt;code&gt;dereferencer&lt;/code&gt;
                      parameters (if specified) should be used by the selector to
                      resolve and dereference the URI.                    
                </param>
                <return>
                    the result of the key selector                    
                </return>
                <throws>
                    KeySelectorException if an exceptional condition occurs while
                      attempting to find a key. Note that an inability to find a key is not
                      considered an exception (&lt;code&gt;null&lt;/code&gt; should be
                      returned in that case). However, an error condition (ex: network
                      communications failure) that prevented the &lt;code&gt;KeySelector&lt;/code&gt;
                      from finding a potential key should be considered an exception.                    
                </throws>
                <throws>
                    ClassCastException if the data type of &lt;code&gt;method&lt;/code&gt;
                      is not supported by this key selector                    
                </throws>
            </javadoc>
            <javadoc line="78">
                Returns a &lt;code&gt;KeySelector&lt;/code&gt; that always selects the specified
                  key, regardless of the &lt;code&gt;KeyInfo&lt;/code&gt; passed to it.                
                <param>
                    key the sole key to be stored in the key selector                    
                </param>
                <return>
                    a key selector that always selects the specified key                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="singletonKeySelector" type="KeySelector" line="85">
                <params>
                    <param name="key" type="Key"/>
                </params>
            </method>
            <class name="SingletonKeySelector" line="88">
                <extends class="KeySelector"/>
                <declaration name="key" type="Key" line="89"/>
                <method name="SingletonKeySelector" type="constructor" line="90">
                    <params>
                        <param name="key" type="Key"/>
                    </params>
                    <scope line="91"/>
                </method>
                <method name="select" type="KeySelectorResult" line="96">
                    <params>
                        <param name="keyInfo" type="KeyInfo"/>
                        <param name="purpose" type="Purpose"/>
                        <param name="method" type="AlgorithmMethod"/>
                        <param name="context" type="XMLCryptoContext"/>
                    </params>
                    <anonymous_class line="97">
                        <method name="getKey" type="Key" line="98"/>
                    </anonymous_class>
                </method>
            </class>
        </class>
    </source>