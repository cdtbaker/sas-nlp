<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig.keyinfo">
        <import package="java.math.BigInteger"/>
        <import package="java.security.KeyException"/>
        <import package="java.security.NoSuchAlgorithmException"/>
        <import package="java.security.NoSuchProviderException"/>
        <import package="java.security.Provider"/>
        <import package="java.security.PublicKey"/>
        <import package="java.security.Security"/>
        <import package="java.security.cert.X509CRL"/>
        <import package="java.util.List"/>
        <import package="javax.xml.crypto.MarshalException"/>
        <import package="javax.xml.crypto.NoSuchMechanismException"/>
        <import package="javax.xml.crypto.URIDereferencer"/>
        <import package="javax.xml.crypto.XMLStructure"/>
        <import package="javax.xml.crypto.dom.DOMStructure"/>
        <import package="javax.xml.crypto.dsig"/>
        <import package="sun.security.jca"/>
        <import package="sun.security.jca.GetInstance.Instance"/>
        <class name="KeyInfoFactory" line="49">
            <javadoc line="49">
                A factory for creating {@link KeyInfo} objects from scratch or for
                  unmarshalling a &lt;code&gt;KeyInfo&lt;/code&gt; object from a corresponding XML
                  representation.
                  &lt;p&gt;Each instance of &lt;code&gt;KeyInfoFactory&lt;/code&gt; supports a specific
                  XML mechanism type. To create a &lt;code&gt;KeyInfoFactory&lt;/code&gt;, call one of the
                  static {@link #getInstance getInstance} methods, passing in the XML
                  mechanism type desired, for example:
                  &lt;blockquote&gt;&lt;code&gt;
                  KeyInfoFactory factory = KeyInfoFactory.getInstance(&quot;DOM&quot;);
                  &lt;/code&gt;&lt;/blockquote&gt;
                  &lt;p&gt;The objects that this factory produces will be based
                  on DOM and abide by the DOM interoperability requirements as defined in the
                  &lt;a href=&quot;../../../../../../technotes/guides/security/xmldsig/overview.html#DOM Mechanism Requirements&quot;&gt;
                  DOM Mechanism Requirements&lt;/a&gt; section of the API overview. See the
                  &lt;a href=&quot;../../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider&quot;&gt;
                  Service Providers&lt;/a&gt; section of the API overview for a list of standard
                  mechanism types.
                  &lt;p&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt; implementations are registered and loaded
                  using the {@link java.security.Provider} mechanism.
                  For example, a service provider that supports the
                  DOM mechanism would be specified in the &lt;code&gt;Provider&lt;/code&gt; subclass as:
                  &lt;pre&gt;
                  put(&quot;KeyInfoFactory.DOM&quot;, &quot;org.example.DOMKeyInfoFactory&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;Also, the &lt;code&gt;XMLStructure&lt;/code&gt;s that are created by this factory
                  may contain state specific to the &lt;code&gt;KeyInfo&lt;/code&gt; and are not
                  intended to be reusable.
                  &lt;p&gt;An implementation MUST minimally support the default mechanism type: DOM.
                  &lt;p&gt;Note that a caller must use the same &lt;code&gt;KeyInfoFactory&lt;/code&gt;
                  instance to create the &lt;code&gt;XMLStructure&lt;/code&gt;s of a particular
                  &lt;code&gt;KeyInfo&lt;/code&gt; object. The behavior is undefined if
                  &lt;code&gt;XMLStructure&lt;/code&gt;s from different providers or different mechanism
                  types are used together.
                  &lt;p&gt;&lt;b&gt;Concurrent Access&lt;/b&gt;
                  &lt;p&gt;The static methods of this class are guaranteed to be thread-safe.
                  Multiple threads may concurrently invoke the static methods defined in this
                  class with no ill effects.
                  &lt;p&gt;However, this is not true for the non-static methods defined by this
                  class. Unless otherwise documented by a specific provider, threads that
                  need to access a single &lt;code&gt;KeyInfoFactory&lt;/code&gt; instance concurrently
                  should synchronize amongst themselves and provide the necessary locking.
                  Multiple threads each manipulating a different &lt;code&gt;KeyInfoFactory&lt;/code&gt;
                  instance need not synchronize.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="mechanismType" type="String" line="109"/>
            <declaration name="provider" type="Provider" line="110"/>
            <javadoc line="112">
                Default constructor, for invocation by subclasses.                
            </javadoc>
            <method name="KeyInfoFactory" type="constructor" line="115"/>
            <javadoc line="117">
                Returns a &lt;code&gt;KeyInfoFactory&lt;/code&gt; that supports the
                  specified XML processing mechanism and representation type (ex: &quot;DOM&quot;).
                  &lt;p&gt;This method uses the standard JCA provider lookup mechanism to
                  locate and instantiate a &lt;code&gt;KeyInfoFactory&lt;/code&gt; implementation of
                  the desired mechanism type. It traverses the list of registered security
                  &lt;code&gt;Provider&lt;/code&gt;s, starting with the most preferred
                  &lt;code&gt;Provider&lt;/code&gt;. A new &lt;code&gt;KeyInfoFactory&lt;/code&gt; object
                  from the first &lt;code&gt;Provider&lt;/code&gt; that supports the specified
                  mechanism is returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation. See the <a
                      href="../../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">
                      Service Providers</a> section of the API overview for a list of
                      standard mechanism types.                    
                </param>
                <return>
                    a new <code>KeyInfoFactory</code>                    
                </return>
                <throws>
                    NullPointerException if <code>mechanismType</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    NoSuchMechanismException if no <code>Provider</code> supports a
                      <code>KeyInfoFactory</code> implementation for the specified mechanism                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyInfoFactory" line="144">
                <params>
                    <param name="mechanismType" type="String"/>
                </params>
                <scope line="145"/>
                <declaration name="instance" type="Instance" line="148"/>
                <scope line="149"/>
                <scope line="152"/>
                <declaration name="factory" type="KeyInfoFactory" line="155"/>
            </method>
            <javadoc line="161">
                Returns a &lt;code&gt;KeyInfoFactory&lt;/code&gt; that supports the
                  requested XML processing mechanism and representation type (ex: &quot;DOM&quot;),
                  as supplied by the specified provider. Note that the specified
                  &lt;code&gt;Provider&lt;/code&gt; object does not have to be registered in the
                  provider list.                
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation. See the <a
                      href="../../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">
                      Service Providers</a> section of the API overview for a list of
                      standard mechanism types.                    
                </param>
                <param>
                    provider the <code>Provider</code> object                    
                </param>
                <return>
                    a new <code>KeyInfoFactory</code>                    
                </return>
                <throws>
                    NullPointerException if <code>mechanismType</code> or
                      <code>provider</code> are <code>null</code>                    
                </throws>
                <throws>
                    NoSuchMechanismException if a <code>KeyInfoFactory</code>
                      implementation for the specified mechanism is not available from the
                      specified <code>Provider</code> object                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyInfoFactory" line="183">
                <params>
                    <param name="mechanismType" type="String"/>
                    <param name="provider" type="Provider"/>
                </params>
                <scope line="184"/>
                <scope line="186"/>
                <declaration name="instance" type="Instance" line="190"/>
                <scope line="191"/>
                <scope line="194"/>
                <declaration name="factory" type="KeyInfoFactory" line="197"/>
            </method>
            <javadoc line="203">
                Returns a &lt;code&gt;KeyInfoFactory&lt;/code&gt; that supports the
                  requested XML processing mechanism and representation type (ex: &quot;DOM&quot;),
                  as supplied by the specified provider. The specified provider must be
                  registered in the security provider list.
                  &lt;p&gt;Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <param>
                    mechanismType the type of the XML processing mechanism and
                      representation. See the <a
                      href="../../../../../../technotes/guides/security/xmldsig/overview.html#Service Provider">
                      Service Providers</a> section of the API overview for a list of
                      standard mechanism types.                    
                </param>
                <param>
                    provider the string name of the provider                    
                </param>
                <return>
                    a new <code>KeyInfoFactory</code>                    
                </return>
                <throws>
                    NoSuchProviderException if the specified provider is not
                      registered in the security provider list                    
                </throws>
                <throws>
                    NullPointerException if <code>mechanismType</code> or
                      <code>provider</code> are <code>null</code>                    
                </throws>
                <throws>
                    NoSuchMechanismException if a <code>KeyInfoFactory</code>
                      implementation for the specified mechanism is not available from the
                      specified provider                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyInfoFactory" line="229">
                <params>
                    <param name="mechanismType" type="String"/>
                    <param name="provider" type="String"/>
                </params>
                <scope line="230"/>
                <scope line="232"/>
                <scope line="234"/>
                <declaration name="instance" type="Instance" line="238"/>
                <scope line="239"/>
                <scope line="242"/>
                <declaration name="factory" type="KeyInfoFactory" line="245"/>
            </method>
            <javadoc line="251">
                Returns a &lt;code&gt;KeyInfoFactory&lt;/code&gt; that supports the
                  default XML processing mechanism and representation type (&quot;DOM&quot;).
                  &lt;p&gt;This method uses the standard JCA provider lookup mechanism to
                  locate and instantiate a &lt;code&gt;KeyInfoFactory&lt;/code&gt; implementation of
                  the default mechanism type. It traverses the list of registered security
                  &lt;code&gt;Provider&lt;/code&gt;s, starting with the most preferred
                  &lt;code&gt;Provider&lt;/code&gt;.  A new &lt;code&gt;KeyInfoFactory&lt;/code&gt; object
                  from the first &lt;code&gt;Provider&lt;/code&gt; that supports the DOM mechanism is
                  returned.
                  &lt;p&gt; Note that the list of registered providers may be retrieved via
                  the {@link Security#getProviders() Security.getProviders()} method.                
                <return>
                    a new <code>KeyInfoFactory</code>                    
                </return>
                <throws>
                    NoSuchMechanismException if no <code>Provider</code> supports a
                      <code>KeyInfoFactory</code> implementation for the DOM mechanism                    
                </throws>
                <see>
                    Provider                    
                </see>
            </javadoc>
            <method name="getInstance" type="KeyInfoFactory" line="271"/>
            <javadoc line="275">
                Returns the type of the XML processing mechanism and representation
                  supported by this &lt;code&gt;KeyInfoFactory&lt;/code&gt; (ex: &quot;DOM&quot;)                
                <return>
                    the XML processing mechanism type supported by this
                      <code>KeyInfoFactory</code>                    
                </return>
            </javadoc>
            <method name="getMechanismType" type="String" line="282"/>
            <javadoc line="286">
                Returns the provider of this &lt;code&gt;KeyInfoFactory&lt;/code&gt;.                
                <return>
                    the provider of this <code>KeyInfoFactory</code>                    
                </return>
            </javadoc>
            <method name="getProvider" type="Provider" line="291"/>
            <method name="newKeyInfo" type="KeyInfo" line="295"/>
            <javadoc line="295">
                Creates a &lt;code&gt;KeyInfo&lt;/code&gt; containing the specified list of
                  key information types.                
                <param>
                    content a list of one or more {@link XMLStructure}s representing
                      key information types. The list is defensively copied to protect
                      against subsequent modification.                    
                </param>
                <return>
                    a <code>KeyInfo</code>                    
                </return>
                <throws>
                    NullPointerException if <code>content</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>content</code> is empty                    
                </throws>
                <throws>
                    ClassCastException if <code>content</code> contains any entries
                      that are not of type {@link XMLStructure}                    
                </throws>
            </javadoc>
            <method name="newKeyInfo" type="KeyInfo" line="310"/>
            <javadoc line="310">
                Creates a &lt;code&gt;KeyInfo&lt;/code&gt; containing the specified list of key
                  information types and optional id. The
                  &lt;code&gt;id&lt;/code&gt; parameter represents the value of an XML
                  &lt;code&gt;ID&lt;/code&gt; attribute and is useful for referencing
                  the &lt;code&gt;KeyInfo&lt;/code&gt; from other XML structures.                
                <param>
                    content a list of one or more {@link XMLStructure}s representing
                      key information types. The list is defensively copied to protect
                      against subsequent modification.                    
                </param>
                <param>
                    id the value of an XML <code>ID</code> (may be <code>null</code>)                    
                </param>
                <return>
                    a <code>KeyInfo</code>                    
                </return>
                <throws>
                    NullPointerException if <code>content</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>content</code> is empty                    
                </throws>
                <throws>
                    ClassCastException if <code>content</code> contains any entries
                      that are not of type {@link XMLStructure}                    
                </throws>
            </javadoc>
            <method name="newKeyName" type="KeyName" line="329"/>
            <javadoc line="329">
                Creates a &lt;code&gt;KeyName&lt;/code&gt; from the specified name.                
                <param>
                    name the name that identifies the key                    
                </param>
                <return>
                    a <code>KeyName</code>                    
                </return>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newKeyValue" type="KeyValue" line="338"/>
            <javadoc line="338">
                Creates a &lt;code&gt;KeyValue&lt;/code&gt; from the specified public key.                
                <param>
                    key the public key                    
                </param>
                <return>
                    a <code>KeyValue</code>                    
                </return>
                <throws>
                    KeyException if the <code>key</code>'s algorithm is not
                      recognized or supported by this <code>KeyInfoFactory</code>                    
                </throws>
                <throws>
                    NullPointerException if <code>key</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="newPGPData" type="PGPData" line="349"/>
            <javadoc line="349">
                Creates a &lt;code&gt;PGPData&lt;/code&gt; from the specified PGP public key
                  identifier.                
                <param>
                    keyId a PGP public key identifier as defined in <a href=
                      "http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</a>, section 11.2.
                      The array is cloned to protect against subsequent modification.                    
                </param>
                <return>
                    a <code>PGPData</code>                    
                </return>
                <throws>
                    NullPointerException if <code>keyId</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if the key id is not in the correct
                      format                    
                </throws>
            </javadoc>
            <method name="newPGPData" type="PGPData" line="363"/>
            <javadoc line="363">
                Creates a &lt;code&gt;PGPData&lt;/code&gt; from the specified PGP public key
                  identifier, and optional key material packet and list of external
                  elements.                
                <param>
                    keyId a PGP public key identifier as defined in <a href=
                      "http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</a>, section 11.2.
                      The array is cloned to protect against subsequent modification.                    
                </param>
                <param>
                    keyPacket a PGP key material packet as defined in <a href=
                      "http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</a>, section 5.5.
                      The array is cloned to protect against subsequent modification. May
                      be <code>null</code>.                    
                </param>
                <param>
                    other a list of {@link XMLStructure}s representing elements from
                      an external namespace. The list is defensively copied to protect
                      against subsequent modification. May be <code>null</code> or empty.                    
                </param>
                <return>
                    a <code>PGPData</code>                    
                </return>
                <throws>
                    NullPointerException if <code>keyId</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if the <code>keyId</code> or
                      <code>keyPacket</code> is not in the correct format. For
                      <code>keyPacket</code>, the format of the packet header is
                      checked and the tag is verified that it is of type key material. The
                      contents and format of the packet body are not checked.                    
                </throws>
                <throws>
                    ClassCastException if <code>other</code> contains any
                      entries that are not of type {@link XMLStructure}                    
                </throws>
            </javadoc>
            <method name="newPGPData" type="PGPData" line="391"/>
            <javadoc line="391">
                Creates a &lt;code&gt;PGPData&lt;/code&gt; from the specified PGP key material
                  packet and optional list of external elements.                
                <param>
                    keyPacket a PGP key material packet as defined in <a href=
                      "http://www.ietf.org/rfc/rfc2440.txt">RFC 2440</a>, section 5.5.
                      The array is cloned to protect against subsequent modification.                    
                </param>
                <param>
                    other a list of {@link XMLStructure}s representing elements from
                      an external namespace. The list is defensively copied to protect
                      against subsequent modification. May be <code>null</code> or empty.                    
                </param>
                <return>
                    a <code>PGPData</code>                    
                </return>
                <throws>
                    NullPointerException if <code>keyPacket</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>keyPacket</code> is not in the
                      correct format. For <code>keyPacket</code>, the format of the packet
                      header is checked and the tag is verified that it is of type key
                      material. The contents and format of the packet body are not checked.                    
                </throws>
                <throws>
                    ClassCastException if <code>other</code> contains any
                      entries that are not of type {@link XMLStructure}                    
                </throws>
            </javadoc>
            <method name="newRetrievalMethod" type="RetrievalMethod" line="413"/>
            <javadoc line="413">
                Creates a &lt;code&gt;RetrievalMethod&lt;/code&gt; from the specified URI.                
                <param>
                    uri the URI that identifies the <code>KeyInfo</code> information
                      to be retrieved                    
                </param>
                <return>
                    a <code>RetrievalMethod</code>                    
                </return>
                <throws>
                    NullPointerException if <code>uri</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>uri</code> is not RFC 2396
                      compliant                    
                </throws>
            </javadoc>
            <method name="newRetrievalMethod" type="RetrievalMethod" line="425"/>
            <javadoc line="425">
                Creates a &lt;code&gt;RetrievalMethod&lt;/code&gt; from the specified parameters.                
                <param>
                    uri the URI that identifies the <code>KeyInfo</code> information
                      to be retrieved                    
                </param>
                <param>
                    type a URI that identifies the type of <code>KeyInfo</code>
                      information to be retrieved (may be <code>null</code>)                    
                </param>
                <param>
                    transforms a list of {@link Transform}s. The list is defensively
                      copied to protect against subsequent modification. May be
                      <code>null</code> or empty.                    
                </param>
                <return>
                    a <code>RetrievalMethod</code>                    
                </return>
                <throws>
                    NullPointerException if <code>uri</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>uri</code> is not RFC 2396
                      compliant                    
                </throws>
                <throws>
                    ClassCastException if <code>transforms</code> contains any
                      entries that are not of type {@link Transform}                    
                </throws>
            </javadoc>
            <method name="newX509Data" type="X509Data" line="445"/>
            <javadoc line="445">
                Creates a &lt;code&gt;X509Data&lt;/code&gt; containing the specified list of
                  X.509 content.                
                <param>
                    content a list of one or more X.509 content types. Valid types are{@link String} (subject names), <code>byte[]</code> (subject key ids),{@link java.security.cert.X509Certificate}, {@link X509CRL},
                      or {@link XMLStructure} ({@link X509IssuerSerial}objects or elements from an external namespace). Subject names are
                      distinguished names in RFC 2253 String format. Implementations MUST
                      support the attribute type keywords defined in RFC 2253 (CN, L, ST,
                      O, OU, C, STREET, DC and UID). Implementations MAY support additional
                      keywords. The list is defensively copied to protect against
                      subsequent modification.                    
                </param>
                <return>
                    a <code>X509Data</code>                    
                </return>
                <throws>
                    NullPointerException if <code>content</code> is <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>content</code> is empty, or
                      if a subject name is not RFC 2253 compliant or one of the attribute
                      type keywords is not recognized.                    
                </throws>
                <throws>
                    ClassCastException if <code>content</code> contains any entries
                      that are not of one of the valid types mentioned above                    
                </throws>
            </javadoc>
            <method name="newX509IssuerSerial" type="X509IssuerSerial" line="469"/>
            <javadoc line="469">
                Creates an &lt;code&gt;X509IssuerSerial&lt;/code&gt; from the specified X.500 issuer
                  distinguished name and serial number.                
                <param>
                    issuerName the issuer's distinguished name in RFC 2253 String
                      format. Implementations MUST support the attribute type keywords
                      defined in RFC 2253 (CN, L, ST, O, OU, C, STREET, DC and UID).
                      Implementations MAY support additional keywords.                    
                </param>
                <param>
                    serialNumber the serial number                    
                </param>
                <return>
                    an <code>X509IssuerSerial</code>                    
                </return>
                <throws>
                    NullPointerException if <code>issuerName</code> or
                      <code>serialNumber</code> are <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if the issuer name is not RFC 2253
                      compliant or one of the attribute type keywords is not recognized.                    
                </throws>
            </javadoc>
            <method name="isFeatureSupported" type="boolean" line="487"/>
            <javadoc line="487">
                Indicates whether a specified feature is supported.                
                <param>
                    feature the feature name (as an absolute URI)                    
                </param>
                <return>
                    <code>true</code> if the specified feature is supported,
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    NullPointerException if <code>feature</code> is <code>null</code>                    
                </throws>
            </javadoc>
            <method name="getURIDereferencer" type="URIDereferencer" line="497"/>
            <javadoc line="497">
                Returns a reference to the &lt;code&gt;URIDereferencer&lt;/code&gt; that is used by
                  default to dereference URIs in {@link RetrievalMethod} objects.                
                <return>
                    a reference to the default <code>URIDereferencer</code>                    
                </return>
            </javadoc>
            <method name="unmarshalKeyInfo" type="KeyInfo" line="505"/>
            <javadoc line="505">
                Unmarshals a new &lt;code&gt;KeyInfo&lt;/code&gt; instance from a
                  mechanism-specific &lt;code&gt;XMLStructure&lt;/code&gt; (ex: {@link DOMStructure})
                  instance.                
                <param>
                    xmlStructure a mechanism-specific XML structure from which to
                      unmarshal the keyinfo from                    
                </param>
                <return>
                    the <code>KeyInfo</code>                    
                </return>
                <throws>
                    NullPointerException if <code>xmlStructure</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if the type of <code>xmlStructure</code> is
                      inappropriate for this factory                    
                </throws>
                <throws>
                    MarshalException if an unrecoverable exception occurs during
                      unmarshalling                    
                </throws>
            </javadoc>
        </class>
    </source>