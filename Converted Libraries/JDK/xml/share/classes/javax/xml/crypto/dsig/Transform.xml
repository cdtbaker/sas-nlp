<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig">
        <import package="java.io.OutputStream"/>
        <import package="java.security.spec.AlgorithmParameterSpec"/>
        <import package="javax.xml.crypto.AlgorithmMethod"/>
        <import package="javax.xml.crypto.Data"/>
        <import package="javax.xml.crypto.OctetStreamData"/>
        <import package="javax.xml.crypto.XMLCryptoContext"/>
        <import package="javax.xml.crypto.XMLStructure"/>
        <import package="javax.xml.crypto.dsig.spec.TransformParameterSpec"/>
        <interface name="Transform">
            <implements interface="XMLStructure"/>
            <implements interface="AlgorithmMethod"/>
            <javadoc line="10">
                A representation of the XML &lt;code&gt;Transform&lt;/code&gt; element as
                  defined in the &lt;a href=&quot;http://www.w3.org/TR/xmldsig-core/&quot;&gt;
                  W3C Recommendation for XML-Signature Syntax and Processing&lt;/a&gt;.
                  The XML Schema Definition is defined as:
                  &lt;pre&gt;
                  &amp;lt;element name=&quot;Transform&quot; type=&quot;ds:TransformType&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;TransformType&quot; mixed=&quot;true&quot;&amp;gt;
                  &amp;lt;choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&amp;gt;
                  &amp;lt;any namespace=&quot;##other&quot; processContents=&quot;lax&quot;/&amp;gt;
                  &amp;lt;!-- (1,1) elements from (0,unbounded) namespaces --&amp;gt;
                  &amp;lt;element name=&quot;XPath&quot; type=&quot;string&quot;/&amp;gt;
                  &amp;lt;/choice&amp;gt;
                  &amp;lt;attribute name=&quot;Algorithm&quot; type=&quot;anyURI&quot; use=&quot;required&quot;/&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &lt;/pre&gt;
                  A &lt;code&gt;Transform&lt;/code&gt; instance may be created by invoking the{@link XMLSignatureFactory#newTransform newTransform} method
                  of the {@link XMLSignatureFactory} class.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
                <see>
                    XMLSignatureFactory#newTransform(String,TransformParameterSpec)                    
                </see>
            </javadoc>
            <declaration name="BASE64" type="String" line="34"/>
            <javadoc line="34">
                The &lt;a href=&quot;http://www.w3.org/2000/09/xmldsig#base64&quot;&gt;Base64&lt;/a&gt;
                  transform algorithm URI.                
            </javadoc>
            <declaration name="ENVELOPED" type="String" line="39"/>
            <javadoc line="39">
                The &lt;a href=&quot;http://www.w3.org/2000/09/xmldsig#enveloped-signature&quot;&gt;
                  Enveloped Signature&lt;/a&gt; transform algorithm URI.                
            </javadoc>
            <declaration name="XPATH" type="String" line="44"/>
            <javadoc line="44">
                The &lt;a href=&quot;http://www.w3.org/TR/1999/REC-xpath-19991116&quot;&gt;XPath&lt;/a&gt;
                  transform algorithm URI.                
            </javadoc>
            <declaration name="XPATH2" type="String" line="49"/>
            <javadoc line="49">
                The &lt;a href=&quot;http://www.w3.org/2002/06/xmldsig-filter2&quot;&gt;
                  XPath Filter 2&lt;/a&gt; transform algorithm URI.                
            </javadoc>
            <declaration name="XSLT" type="String" line="54"/>
            <javadoc line="54">
                The &lt;a href=&quot;http://www.w3.org/TR/1999/REC-xslt-19991116&quot;&gt;XSLT&lt;/a&gt;
                  transform algorithm URI.                
            </javadoc>
            <method name="getParameterSpec" type="AlgorithmParameterSpec" line="59"/>
            <javadoc line="59">
                Returns the algorithm-specific input parameters associated with this
                  &lt;code&gt;Transform&lt;/code&gt;.
                  &lt;p&gt;
                  The returned parameters can be typecast to a{@link TransformParameterSpec} object.                
                <return>
                    the algorithm-specific input parameters (may be <code>null</code>
                      if not specified)                    
                </return>
            </javadoc>
            <method name="transform" type="Data" line="68"/>
            <javadoc line="68">
                Transforms the specified data using the underlying transform algorithm.                
                <param>
                    data the data to be transformed                    
                </param>
                <param>
                    context the <code>XMLCryptoContext</code> containing
                      additional context (may be <code>null</code> if not applicable)                    
                </param>
                <return>
                    the transformed data                    
                </return>
                <throws>
                    NullPointerException if <code>data</code> is <code>null</code>                    
                </throws>
                <throws>
                    TransformException if an error occurs while executing the
                      transform                    
                </throws>
            </javadoc>
            <method name="transform" type="Data" line="79"/>
            <javadoc line="79">
                Transforms the specified data using the underlying transform algorithm.
                  If the output of this transform is an &lt;code&gt;OctetStreamData&lt;/code&gt;, then
                  this method returns &lt;code&gt;null&lt;/code&gt; and the bytes are written to the
                  specified &lt;code&gt;OutputStream&lt;/code&gt;. Otherwise, the
                  &lt;code&gt;OutputStream&lt;/code&gt; is ignored and the method behaves as if{@link #transform(Data,XMLCryptoContext)} were invoked.                
                <param>
                    data the data to be transformed                    
                </param>
                <param>
                    context the <code>XMLCryptoContext</code> containing
                      additional context (may be <code>null</code> if not applicable)                    
                </param>
                <param>
                    os the <code>OutputStream</code> that should be used to write
                      the transformed data to                    
                </param>
                <return>
                    the transformed data (or <code>null</code> if the data was
                      written to the <code>OutputStream</code> parameter)                    
                </return>
                <throws>
                    NullPointerException if <code>data</code> or <code>os</code>
                      is <code>null</code>                    
                </throws>
                <throws>
                    TransformException if an error occurs while executing the
                      transform                    
                </throws>
            </javadoc>
        </interface>
    </source>