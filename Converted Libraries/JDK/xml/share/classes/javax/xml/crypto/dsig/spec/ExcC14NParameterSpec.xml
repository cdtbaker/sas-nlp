<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dsig.spec">
        <import package="javax.xml.crypto.dsig.CanonicalizationMethod"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <class name="ExcC14NParameterSpec" line="35">
            <implements interface="C14NMethodParameterSpec"/>
            <javadoc line="35">
                Parameters for the W3C Recommendation:
                  &lt;a href=&quot;http://www.w3.org/TR/xml-exc-c14n/&quot;&gt;
                  Exclusive XML Canonicalization (C14N) algorithm&lt;/a&gt;. The
                  parameters include an optional inclusive namespace prefix list. The XML
                  Schema Definition of the Exclusive XML Canonicalization parameters is
                  defined as:
                  &lt;pre&gt;&lt;code&gt;
                  &amp;lt;schema xmlns=&quot;http://www.w3.org/2001/XMLSchema&quot;
                  xmlns:ec=&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;
                  targetNamespace=&quot;http://www.w3.org/2001/10/xml-exc-c14n#&quot;
                  version=&quot;0.1&quot; elementFormDefault=&quot;qualified&quot;&amp;gt;
                  &amp;lt;element name=&quot;InclusiveNamespaces&quot; type=&quot;ec:InclusiveNamespaces&quot;/&amp;gt;
                  &amp;lt;complexType name=&quot;InclusiveNamespaces&quot;&amp;gt;
                  &amp;lt;attribute name=&quot;PrefixList&quot; type=&quot;xsd:string&quot;/&amp;gt;
                  &amp;lt;/complexType&amp;gt;
                  &amp;lt;/schema&amp;gt;
                  &lt;/code&gt;&lt;/pre&gt;                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
                <see>
                    CanonicalizationMethod                    
                </see>
            </javadoc>
            <declaration name="preList" type="List" line="62"/>
            <declaration name="DEFAULT" type="String" line="64"/>
            <javadoc line="64">
                Indicates the default namespace (&quot;#default&quot;).                
            </javadoc>
            <javadoc line="69">
                Creates a &lt;code&gt;ExcC14NParameterSpec&lt;/code&gt; with an empty prefix
                  list.                
            </javadoc>
            <method name="ExcC14NParameterSpec" type="constructor" line="73"/>
            <javadoc line="77">
                Creates a &lt;code&gt;ExcC14NParameterSpec&lt;/code&gt; with the specified list
                  of prefixes. The list is copied to protect against subsequent
                  modification.                
                <param>
                    prefixList the inclusive namespace prefix list. Each entry in
                      the list is a <code>String</code> that represents a namespace prefix.                    
                </param>
                <throws>
                    NullPointerException if <code>prefixList</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    ClassCastException if any of the entries in the list are not
                      of type <code>String</code>                    
                </throws>
            </javadoc>
            <method name="ExcC14NParameterSpec" type="constructor" line="89">
                <params>
                    <param name="prefixList" type="List"/>
                </params>
                <scope line="90"/>
                <scope line="94">
                    <scope line="95"/>
                </scope>
            </method>
            <javadoc line="102">
                Returns the inclusive namespace prefix list. Each entry in the list
                  is a &lt;code&gt;String&lt;/code&gt; that represents a namespace prefix.
                  &lt;p&gt;This implementation returns an {@link java.util.Collections#unmodifiableList unmodifiable list}.                
                <return>
                    the inclusive namespace prefix list (may be empty but never
                      <code>null</code>)                    
                </return>
            </javadoc>
            <method name="getPrefixList" type="List" line="112"/>
        </class>
    </source>