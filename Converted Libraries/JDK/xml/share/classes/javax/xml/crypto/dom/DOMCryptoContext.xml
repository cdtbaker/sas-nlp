<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.xml.crypto.dom">
        <import package="javax.xml.crypto.KeySelector"/>
        <import package="javax.xml.crypto.URIDereferencer"/>
        <import package="javax.xml.crypto.XMLCryptoContext"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="org.w3c.dom.Element"/>
        <class name="DOMCryptoContext" line="38">
            <implements interface="XMLCryptoContext"/>
            <javadoc line="38">
                This class provides a DOM-specific implementation of the{@link XMLCryptoContext} interface. It also includes additional
                  methods that are specific to a DOM-based implementation for registering
                  and retrieving elements that contain attributes of type ID.                
                <author>
                    Sean Mullan                    
                </author>
                <author>
                    JSR 105 Expert Group                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="nsMap" type="HashMap" line="50"/>
            <declaration name="idMap" type="HashMap" line="51"/>
            <declaration name="objMap" type="HashMap" line="52"/>
            <declaration name="baseURI" type="String" line="53"/>
            <declaration name="ks" type="KeySelector" line="54"/>
            <declaration name="dereferencer" type="URIDereferencer" line="55"/>
            <declaration name="propMap" type="HashMap" line="56"/>
            <declaration name="defaultPrefix" type="String" line="57"/>
            <javadoc line="59">
                Default constructor. (For invocation by subclass constructors).                
            </javadoc>
            <method name="DOMCryptoContext" type="constructor" line="62"/>
            <javadoc line="64">
                This implementation uses an internal {@link HashMap} to get the prefix
                  that the specified URI maps to. It returns the &lt;code&gt;defaultPrefix&lt;/code&gt;
                  if it maps to &lt;code&gt;null&lt;/code&gt;.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="getNamespacePrefix" type="String" line="72">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="defaultPrefix" type="String"/>
                </params>
                <scope line="73"/>
                <declaration name="prefix" type="String" line="76"/>
            </method>
            <javadoc line="80">
                This implementation uses an internal {@link HashMap} to map the URI
                  to the specified prefix.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="putNamespacePrefix" type="String" line="86">
                <params>
                    <param name="namespaceURI" type="String"/>
                    <param name="prefix" type="String"/>
                </params>
                <scope line="87"/>
            </method>
            <method name="getDefaultNamespacePrefix" type="String" line="93"/>
            <method name="setDefaultNamespacePrefix" type="void" line="97">
                <params>
                    <param name="defaultPrefix" type="String"/>
                </params>
            </method>
            <method name="getBaseURI" type="String" line="101"/>
            <javadoc line="105">
                @throws IllegalArgumentException {@inheritDoc}                
            </javadoc>
            <method name="setBaseURI" type="void" line="108">
                <params>
                    <param name="baseURI" type="String"/>
                </params>
                <scope line="109"/>
            </method>
            <method name="getURIDereferencer" type="URIDereferencer" line="115"/>
            <method name="setURIDereferencer" type="void" line="119">
                <params>
                    <param name="dereferencer" type="URIDereferencer"/>
                </params>
            </method>
            <javadoc line="123">
                This implementation uses an internal {@link HashMap} to get the object
                  that the specified name maps to.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="getProperty" type="Object" line="129">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="130"/>
            </method>
            <javadoc line="136">
                This implementation uses an internal {@link HashMap} to map the name
                  to the specified object.                
                <throws>
                    NullPointerException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="setProperty" type="Object" line="142">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="143"/>
            </method>
            <method name="getKeySelector" type="KeySelector" line="149"/>
            <method name="setKeySelector" type="void" line="153">
                <params>
                    <param name="ks" type="KeySelector"/>
                </params>
            </method>
            <javadoc line="157">
                Returns the &lt;code&gt;Element&lt;/code&gt; with the specified ID attribute value.
                  &lt;p&gt;This implementation uses an internal {@link HashMap} to get the
                  element that the specified attribute value maps to.                
                <param>
                    idValue the value of the ID                    
                </param>
                <return>
                    the &lt;code&gt;Element&lt;/code&gt; with the specified ID attribute value,
                      or &lt;code&gt;null&lt;/code&gt; if none.                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;idValue&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #setIdAttributeNS                    
                </see>
            </javadoc>
            <method name="getElementById" type="Element" line="169">
                <params>
                    <param name="idValue" type="String"/>
                </params>
                <scope line="170"/>
            </method>
            <javadoc line="176">
                Registers the element&apos;s attribute specified by the namespace URI and
                  local name to be of type ID. The attribute must have a non-empty value.
                  &lt;p&gt;This implementation uses an internal {@link HashMap} to map the
                  attribute&apos;s value to the specified element.                
                <param>
                    element the element                    
                </param>
                <param>
                    namespaceURI the namespace URI of the attribute (specify
                      &lt;code&gt;null&lt;/code&gt; if not applicable)                    
                </param>
                <param>
                    localName the local name of the attribute                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;localName&lt;/code&gt; is not an
                      attribute of the specified element or it does not contain a specific
                      value                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;element&lt;/code&gt; or
                      &lt;code&gt;localName&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    #getElementById                    
                </see>
            </javadoc>
            <method name="setIdAttributeNS" type="void" line="195">
                <params>
                    <param name="element" type="Element"/>
                    <param name="namespaceURI" type="String"/>
                    <param name="localName" type="String"/>
                </params>
                <scope line="196"/>
                <scope line="199"/>
                <declaration name="idValue" type="String" line="202"/>
                <scope line="203"/>
            </method>
            <javadoc line="210">
                Returns a read-only iterator over the set of Id/Element mappings of
                  this &lt;code&gt;DOMCryptoContext&lt;/code&gt;. Attempts to modify the set via the{@link Iterator#remove} method throw an
                  &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. The mappings are returned
                  in no particular order. Each element in the iteration is represented as a{@link java.util.Map.Entry}. If the &lt;code&gt;DOMCryptoContext&lt;/code&gt; is
                  modified while an iteration is in progress, the results of the
                  iteration are undefined.                
                <return>
                    a read-only iterator over the set of mappings                    
                </return>
            </javadoc>
            <method name="iterator" type="Iterator" line="222"/>
            <javadoc line="226">
                This implementation uses an internal {@link HashMap} to get the object
                  that the specified key maps to.                
            </javadoc>
            <method name="get" type="Object" line="230">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="234">
                This implementation uses an internal {@link HashMap} to map the key
                  to the specified object.                
                <throws>
                    IllegalArgumentException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="put" type="Object" line="240">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
        </class>
    </source>