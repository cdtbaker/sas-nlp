<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="com.sun.jmx.defaults.JmxProperties"/>
        <import package="com.sun.jmx.defaults.JmxProperties.JMX_INITIAL_BUILDER"/>
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.Permission"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <class name="MBeanServerFactory" line="11">
            <javadoc line="11">
                &lt;p&gt;Provides MBean server references.  There are no instances of
                  this class.&lt;/p&gt;
                  &lt;p&gt;Since JMX 1.2 this class makes it possible to replace the default
                  MBeanServer implementation. This is done using the{@link javax.management.MBeanServerBuilder} class.
                  The class of the initial MBeanServerBuilder to be
                  instantiated can be specified through the
                  &lt;b&gt;javax.management.builder.initial&lt;/b&gt; system property.
                  The specified class must be a public subclass of{@link javax.management.MBeanServerBuilder}, and must have a public
                  empty constructor.
                  &lt;p&gt;By default, if no value for that property is specified, an instance of{@link javax.management.MBeanServerBuilder javax.management.MBeanServerBuilder}is created. Otherwise, the MBeanServerFactory attempts to load the
                  specified class using{@link java.lang.Thread#getContextClassLoader()Thread.currentThread().getContextClassLoader()}, or if that is null,{@link java.lang.Class#forName(java.lang.String) Class.forName()}. Then
                  it creates an initial instance of that Class using{@link java.lang.Class#newInstance()}. If any checked exception
                  is raised during this process (e.g.{@link java.lang.ClassNotFoundException},{@link java.lang.InstantiationException}) the MBeanServerFactory
                  will propagate this exception from within a RuntimeException.&lt;/p&gt;
                  &lt;p&gt;The &lt;b&gt;javax.management.builder.initial&lt;/b&gt; system property is
                  consulted every time a new MBeanServer needs to be created, and the
                  class pointed to by that property is loaded. If that class is different
                  from that of the current MBeanServerBuilder, then a new MBeanServerBuilder
                  is created. Otherwise, the MBeanServerFactory may create a new
                  MBeanServerBuilder or reuse the current one.&lt;/p&gt;
                  &lt;p&gt;If the class pointed to by the property cannot be
                  loaded, or does not correspond to a valid subclass of MBeanServerBuilder
                  then an exception is propagated, and no MBeanServer can be created until
                  the &lt;b&gt;javax.management.builder.initial&lt;/b&gt; system property is reset to
                  valid value.&lt;/p&gt;
                  &lt;p&gt;The MBeanServerBuilder makes it possible to wrap the MBeanServers
                  returned by the default MBeanServerBuilder implementation, for the purpose
                  of e.g. adding an additional security layer.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="MBeanServerFactory" type="constructor" line="43"/>
            <declaration name="builder" type="MBeanServerBuilder" line="45"/>
            <javadoc line="45">
                The builder that will be used to construct MBeanServers.                
            </javadoc>
            <javadoc line="49">
                Remove internal MBeanServerFactory references to a created
                  MBeanServer. This allows the garbage collector to remove the
                  MBeanServer object.                
                <param>
                    mbeanServer the MBeanServer object to remove.                    
                </param>
                <exception>
                    java.lang.IllegalArgumentException if
                      &lt;code&gt;mbeanServer&lt;/code&gt; was not generated by one of the
                      &lt;code&gt;createMBeanServer&lt;/code&gt; methods, or if
                      &lt;code&gt;releaseMBeanServer&lt;/code&gt; was already called on it.                    
                </exception>
                <exception>
                    SecurityException if there is a SecurityManager and
                      the caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanServerPermission}(&quot;releaseMBeanServer&quot;)&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="releaseMBeanServer" type="void" line="61">
                <params>
                    <param name="mbeanServer" type="MBeanServer"/>
                </params>
            </method>
            <javadoc line="65">
                &lt;p&gt;Return a new object implementing the MBeanServer interface
                  with a standard default domain name.  The default domain name
                  is used as the domain part in the ObjectName of MBeans when the
                  domain is specified by the user is null.&lt;/p&gt;
                  &lt;p&gt;The standard default domain name is
                  &lt;code&gt;DefaultDomain&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The MBeanServer reference is internally kept. This will
                  allow &lt;CODE&gt;findMBeanServer&lt;/CODE&gt; to return a reference to
                  this MBeanServer object.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to &lt;code&gt;createMBeanServer(null)&lt;/code&gt;.                
                <return>
                    the newly created MBeanServer.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and the
                      caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanServerPermission}(&quot;createMBeanServer&quot;)&lt;/code&gt;.                    
                </exception>
                <exception>
                    JMRuntimeException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists but the
                      class it names cannot be instantiated through a public
                      no-argument constructor; or if the instantiated builder returns
                      null from its {@link MBeanServerBuilder#newMBeanServerDelegatenewMBeanServerDelegate} or {@link MBeanServerBuilder#newMBeanServer newMBeanServer} methods.                    
                </exception>
                <exception>
                    ClassCastException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists and can be
                      instantiated but is not assignment compatible with {@link MBeanServerBuilder}.                    
                </exception>
            </javadoc>
            <method name="createMBeanServer" type="MBeanServer" line="88"/>
            <javadoc line="91">
                &lt;p&gt;Return a new object implementing the {@link MBeanServer}interface with the specified default domain name.  The given
                  domain name is used as the domain part in the ObjectName of
                  MBeans when the domain is specified by the user is null.&lt;/p&gt;
                  &lt;p&gt;The MBeanServer reference is internally kept. This will
                  allow &lt;CODE&gt;findMBeanServer&lt;/CODE&gt; to return a reference to
                  this MBeanServer object.&lt;/p&gt;                
                <param>
                    domain the default domain name for the created
                      MBeanServer.  This is the value that will be returned by {@link MBeanServer#getDefaultDomain}.                    
                </param>
                <return>
                    the newly created MBeanServer.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and
                      the caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanServerPermission}(&quot;createMBeanServer&quot;)&lt;/code&gt;.                    
                </exception>
                <exception>
                    JMRuntimeException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists but the
                      class it names cannot be instantiated through a public
                      no-argument constructor; or if the instantiated builder returns
                      null from its {@link MBeanServerBuilder#newMBeanServerDelegatenewMBeanServerDelegate} or {@link MBeanServerBuilder#newMBeanServer newMBeanServer} methods.                    
                </exception>
                <exception>
                    ClassCastException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists and can be
                      instantiated but is not assignment compatible with {@link MBeanServerBuilder}.                    
                </exception>
            </javadoc>
            <method name="createMBeanServer" type="MBeanServer" line="112">
                <params>
                    <param name="domain" type="String"/>
                </params>
                <declaration name="mBeanServer" type="MBeanServer" line="114"/>
            </method>
            <javadoc line="118">
                &lt;p&gt;Return a new object implementing the MBeanServer interface
                  with a standard default domain name, without keeping an
                  internal reference to this new object.  The default domain name
                  is used as the domain part in the ObjectName of MBeans when the
                  domain is specified by the user is null.&lt;/p&gt;
                  &lt;p&gt;The standard default domain name is
                  &lt;code&gt;DefaultDomain&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;No reference is kept. &lt;CODE&gt;findMBeanServer&lt;/CODE&gt; will not
                  be able to return a reference to this MBeanServer object, but
                  the garbage collector will be able to remove the MBeanServer
                  object when it is no longer referenced.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to &lt;code&gt;newMBeanServer(null)&lt;/code&gt;.&lt;/p&gt;                
                <return>
                    the newly created MBeanServer.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and the
                      caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanServerPermission}(&quot;newMBeanServer&quot;)&lt;/code&gt;.                    
                </exception>
                <exception>
                    JMRuntimeException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists but the
                      class it names cannot be instantiated through a public
                      no-argument constructor; or if the instantiated builder returns
                      null from its {@link MBeanServerBuilder#newMBeanServerDelegatenewMBeanServerDelegate} or {@link MBeanServerBuilder#newMBeanServer newMBeanServer} methods.                    
                </exception>
                <exception>
                    ClassCastException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists and can be
                      instantiated but is not assignment compatible with {@link MBeanServerBuilder}.                    
                </exception>
            </javadoc>
            <method name="newMBeanServer" type="MBeanServer" line="143"/>
            <javadoc line="146">
                &lt;p&gt;Return a new object implementing the MBeanServer interface
                  with the specified default domain name, without keeping an
                  internal reference to this new object.  The given domain name
                  is used as the domain part in the ObjectName of MBeans when the
                  domain is specified by the user is null.&lt;/p&gt;
                  &lt;p&gt;No reference is kept. &lt;CODE&gt;findMBeanServer&lt;/CODE&gt; will not
                  be able to return a reference to this MBeanServer object, but
                  the garbage collector will be able to remove the MBeanServer
                  object when it is no longer referenced.&lt;/p&gt;                
                <param>
                    domain the default domain name for the created
                      MBeanServer.  This is the value that will be returned by {@link MBeanServer#getDefaultDomain}.                    
                </param>
                <return>
                    the newly created MBeanServer.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and the
                      caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanServerPermission}(&quot;newMBeanServer&quot;)&lt;/code&gt;.                    
                </exception>
                <exception>
                    JMRuntimeException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists but the
                      class it names cannot be instantiated through a public
                      no-argument constructor; or if the instantiated builder returns
                      null from its {@link MBeanServerBuilder#newMBeanServerDelegatenewMBeanServerDelegate} or {@link MBeanServerBuilder#newMBeanServer newMBeanServer} methods.                    
                </exception>
                <exception>
                    ClassCastException if the property
                      &lt;code&gt;javax.management.builder.initial&lt;/code&gt; exists and can be
                      instantiated but is not assignment compatible with {@link MBeanServerBuilder}.                    
                </exception>
            </javadoc>
            <method name="newMBeanServer" type="MBeanServer" line="170">
                <params>
                    <param name="domain" type="String"/>
                </params>
                <declaration name="mbsBuilder" type="MBeanServerBuilder" line="172"/>
                <scope line="173">
                    <declaration name="delegate" type="MBeanServerDelegate" line="174"/>
                    <scope line="175">
                        <declaration name="msg" type="String" line="176"/>
                    </scope>
                    <declaration name="mbeanServer" type="MBeanServer" line="179"/>
                    <scope line="180">
                        <declaration name="msg" type="String" line="181"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="187">
                &lt;p&gt;Return a list of registered MBeanServer objects.  A
                  registered MBeanServer object is one that was created by one of
                  the &lt;code&gt;createMBeanServer&lt;/code&gt; methods and not subsequently
                  released with &lt;code&gt;releaseMBeanServer&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    agentId The agent identifier of the MBeanServer to
                      retrieve.  If this parameter is null, all registered
                      MBeanServers in this JVM are returned.  Otherwise, only
                      MBeanServers whose id is equal to &lt;code&gt;agentId&lt;/code&gt; are
                      returned.  The id of an MBeanServer is the
                      &lt;code&gt;MBeanServerId&lt;/code&gt; attribute of its delegate MBean.                    
                </param>
                <return>
                    A list of MBeanServer objects.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and the
                      caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanServerPermission}(&quot;findMBeanServer&quot;)&lt;/code&gt;.                    
                </exception>
            </javadoc>
            <method name="findMBeanServer" type="ArrayList&lt;MBeanServer&gt;" line="202">
                <params>
                    <param name="agentId" type="String"/>
                </params>
                <declaration name="result" type="ArrayList&amp;lt;MBeanServer&amp;gt;" line="205"/>
                <scope line="206">
                    <declaration name="name" type="String" line="207"/>
                </scope>
            </method>
            <javadoc line="212">
                Return the ClassLoaderRepository used by the given MBeanServer.
                  This method is equivalent to {@link MBeanServer#getClassLoaderRepository() server.getClassLoaderRepository()}.                
                <param>
                    server The MBeanServer under examination. Since JMX 1.2,
                      if &lt;code&gt;server&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the result is a{@link NullPointerException}.  This behavior differs from what
                      was implemented in JMX 1.1 - where the possibility to use
                      &lt;code&gt;null&lt;/code&gt; was deprecated.                    
                </param>
                <return>
                    The Class Loader Repository used by the given MBeanServer.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and
                      the caller&apos;s permissions do not include or imply &lt;code&gt;{@link MBeanPermission}(&quot;getClassLoaderRepository&quot;)&lt;/code&gt;.                    
                </exception>
                <exception>
                    NullPointerException if &lt;code&gt;server&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="224">
                <params>
                    <param name="server" type="MBeanServer"/>
                </params>
            </method>
            <method name="mBeanServerId" type="String" line="227">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <scope line="228"/>
                <scope line="231"/>
            </method>
            <method name="checkPermission" type="void" line="236">
                <params>
                    <param name="action" type="String"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="237"/>
                <scope line="238">
                    <declaration name="perm" type="Permission" line="239"/>
                </scope>
            </method>
            <method name="addMBeanServer" type="void" line="243">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
            </method>
            <method name="removeMBeanServer" type="void" line="246">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
                <declaration name="removed" type="boolean" line="247"/>
                <scope line="248"/>
            </method>
            <declaration name="mBeanServerList" type="ArrayList&amp;lt;MBeanServer&amp;gt;" line="253"/>
            <javadoc line="254">
                Load the builder class through the context class loader.                
                <param>
                    builderClassName The name of the builder class.                    
                </param>
            </javadoc>
            <method name="loadBuilderClass" type="Class&lt;?&gt;" line="258">
                <params>
                    <param name="builderClassName" type="String"/>
                </params>
                <declaration name="loader" type="ClassLoader" line="259"/>
                <scope line="260"/>
            </method>
            <javadoc line="265">
                Creates the initial builder according to the
                  javax.management.builder.initial System property - if specified.
                  If any checked exception needs to be thrown, it is embedded in
                  a JMRuntimeException.                
            </javadoc>
            <method name="newBuilder" type="MBeanServerBuilder" line="271">
                <params>
                    <param name="builderClass" type="Class&lt;?&gt;"/>
                </params>
                <scope line="272">
                    <declaration name="abuilder" type="Object" line="273"/>
                </scope>
                <scope line="276"/>
                <scope line="279">
                    <declaration name="msg" type="String" line="280"/>
                </scope>
            </method>
            <javadoc line="284">
                Instantiate a new builder according to the
                  javax.management.builder.initial System property - if needed.                
            </javadoc>
            <method name="checkMBeanServerBuilder" type="void" line="288">
                <scope line="289">
                    <declaration name="act" type="GetPropertyAction" line="290"/>
                    <declaration name="builderClassName" type="String" line="291"/>
                    <scope line="292">
                        <declaration name="newBuilderClass" type="Class&amp;lt;?&amp;gt;" line="293"/>
                        <scope line="296">
                            <declaration name="builderClass" type="Class&amp;lt;?&amp;gt;" line="297"/>
                        </scope>
                    </scope>
                    <scope line="302">
                        <declaration name="msg" type="String" line="303"/>
                    </scope>
                </scope>
                <scope line="307">
                    <scope line="308">
                        <declaration name="strb" type="StringBuilder" line="309"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="315">
                Get the current {@link javax.management.MBeanServerBuilder},
                  as specified by the current value of the
                  javax.management.builder.initial property.
                  This method consults the property and instantiates a new builder
                  if needed.                
                <return>
                    the new current {@link javax.management.MBeanServerBuilder}.                    
                </return>
                <exception>
                    SecurityException if there is a SecurityManager and
                      the caller&apos;s permissions do not make it possible to instantiate
                      a new builder.                    
                </exception>
                <exception>
                    JMRuntimeException if the builder instantiation
                      fails with a checked exception -{@link java.lang.ClassNotFoundException} etc...                    
                </exception>
            </javadoc>
            <method name="getNewMBeanServerBuilder" type="MBeanServerBuilder" line="328"/>
        </class>
    </source>