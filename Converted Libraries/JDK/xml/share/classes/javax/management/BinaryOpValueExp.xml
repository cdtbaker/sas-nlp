<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <class name="BinaryOpValueExp" line="2">
            <extends class="QueryEval"/>
            <implements interface="ValueExp"/>
            <javadoc line="2">
                This class is used by the query-building mechanism to represent binary
                  operations.                
                <serial>
                    include                    
                </serial>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="9"/>
            <declaration name="op" type="int" line="10"/>
            <javadoc line="10">
                @serial The operator                
            </javadoc>
            <declaration name="exp1" type="ValueExp" line="14"/>
            <javadoc line="14">
                @serial The first value                
            </javadoc>
            <declaration name="exp2" type="ValueExp" line="18"/>
            <javadoc line="18">
                @serial The second value                
            </javadoc>
            <javadoc line="22">
                Basic Constructor.                
            </javadoc>
            <method name="BinaryOpValueExp" type="constructor" line="25"/>
            <javadoc line="27">
                Creates a new BinaryOpValueExp using operator o applied on v1 and
                  v2 values.                
            </javadoc>
            <method name="BinaryOpValueExp" type="constructor" line="31">
                <params>
                    <param name="o" type="int"/>
                    <param name="v1" type="ValueExp"/>
                    <param name="v2" type="ValueExp"/>
                </params>
            </method>
            <javadoc line="36">
                Returns the operator of the value expression.                
            </javadoc>
            <method name="getOperator" type="int" line="39"/>
            <javadoc line="42">
                Returns the left value of the value expression.                
            </javadoc>
            <method name="getLeftValue" type="ValueExp" line="45"/>
            <javadoc line="48">
                Returns the right value of the value expression.                
            </javadoc>
            <method name="getRightValue" type="ValueExp" line="51"/>
            <javadoc line="54">
                Applies the BinaryOpValueExp on a MBean.                
                <param>
                    name The name of the MBean on which the BinaryOpValueExp will be applied.                    
                </param>
                <return>
                    The ValueExp.                    
                </return>
                <exception>
                    BadStringOperationException                    
                </exception>
                <exception>
                    BadBinaryOpValueExpException                    
                </exception>
                <exception>
                    BadAttributeValueExpException                    
                </exception>
                <exception>
                    InvalidApplicationException                    
                </exception>
            </javadoc>
            <method name="apply" type="ValueExp" line="63">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="val1" type="ValueExp" line="64"/>
                <declaration name="val2" type="ValueExp" line="65"/>
                <declaration name="sval1" type="String" line="66"/>
                <declaration name="sval2" type="String" line="67"/>
                <declaration name="dval1" type="double" line="68"/>
                <declaration name="dval2" type="double" line="69"/>
                <declaration name="lval1" type="long" line="70"/>
                <declaration name="lval2" type="long" line="71"/>
                <declaration name="numeric" type="boolean" line="72"/>
                <scope line="73">
                    <scope line="74"/>
                    <scope line="88"/>
                </scope>
                <scope line="103"/>
            </method>
            <javadoc line="115">
                Returns the string representing the object                
            </javadoc>
            <method name="toString" type="String" line="118">
                <scope line="119"/>
                <scope line="122"/>
            </method>
            <method name="parens" type="String" line="126">
                <params>
                    <param name="subexp" type="ValueExp"/>
                    <param name="left" type="boolean"/>
                </params>
                <declaration name="omit" type="boolean" line="127"/>
                <scope line="128">
                    <declaration name="subop" type="int" line="129"/>
                </scope>
            </method>
            <method name="precedence" type="int" line="137">
                <params>
                    <param name="xop" type="int"/>
                </params>
            </method>
            <method name="opString" type="String" line="149"/>
            <method name="setMBeanServer" type="void" line="162">
                <params>
                    <param name="s" type="MBeanServer"/>
                </params>
            </method>
        </class>
    </source>