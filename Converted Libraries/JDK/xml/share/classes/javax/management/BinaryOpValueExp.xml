<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <class name="BinaryOpValueExp" line="29">
            <extends class="QueryEval"/>
            <comment line="39">
                                
            </comment>
            <comment line="177">
                Add parentheses to the given subexpression if necessary to
                 preserve meaning.  Suppose this BinaryOpValueExp is
                 Query.times(Query.plus(Query.attr(&quot;A&quot;), Query.attr(&quot;B&quot;)), Query.attr(&quot;C&quot;)).
                 Then the original toString() logic would return A + B  C.
                 We check precedences in order to return (A + B)  C, which is the
                 meaning of the ValueExp.
                
                 We need to add parentheses if the unparenthesized expression would
                 be parsed as a different ValueExp from the original.
                 We cannot omit parentheses even when mathematically
                 the result would be equivalent, because we do not know whether the
                 numeric values will be integer or floating-point.  Addition and
                 multiplication are associative for integers but not always for
                 floating-point.
                
                 So the rule is that we omit parentheses if the ValueExp
                 is (A op1 B) op2 C and the precedence of op1 is greater than or
                 equal to that of op2; or if the ValueExp is A op1 (B op2 C) and
                 the precedence of op2 is greater than that of op1.  (There are two
                 precedences: that of  and  is greater than that of + and -.)
                 The case of (A op1 B) op2 (C op3 D) applies each rule in turn.
                
                 The following examples show the rules in action.  On the left,
                 the original ValueExp.  On the right, the string representation.
                
                 (A + B) + C     A + B + C
                 (A  B) + C     A  B + C
                 (A + B)  C     (A + B)  C
                 (A  B)  C     A  B  C
                 A + (B + C)     A + (B + C)
                 A + (B  C)     A + B  C
                 A  (B + C)     A  (B + C)
                 A  (B  C)     A  (B  C)                
            </comment>
            <implements interface="ValueExp"/>
            <javadoc line="29">
                This class is used by the query-building mechanism to represent binary
                  operations.                
                <serial>
                    include                    
                </serial>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="39"/>
            <declaration name="op" type="int" line="41"/>
            <javadoc line="41">
                @serial The operator                
            </javadoc>
            <declaration name="exp1" type="ValueExp" line="46"/>
            <javadoc line="46">
                @serial The first value                
            </javadoc>
            <declaration name="exp2" type="ValueExp" line="51"/>
            <javadoc line="51">
                @serial The second value                
            </javadoc>
            <javadoc line="57">
                Basic Constructor.                
            </javadoc>
            <method name="BinaryOpValueExp" type="constructor" line="60"/>
            <javadoc line="63">
                Creates a new BinaryOpValueExp using operator o applied on v1 and
                  v2 values.                
            </javadoc>
            <method name="BinaryOpValueExp" type="constructor" line="67">
                <params>
                    <param name="o" type="int"/>
                    <param name="v1" type="ValueExp"/>
                    <param name="v2" type="ValueExp"/>
                </params>
            </method>
            <javadoc line="74">
                Returns the operator of the value expression.                
            </javadoc>
            <method name="getOperator" type="int" line="77"/>
            <javadoc line="81">
                Returns the left value of the value expression.                
            </javadoc>
            <method name="getLeftValue" type="ValueExp" line="84"/>
            <javadoc line="88">
                Returns the right value of the value expression.                
            </javadoc>
            <method name="getRightValue" type="ValueExp" line="91"/>
            <javadoc line="95">
                Applies the BinaryOpValueExp on a MBean.                
                <param>
                    name The name of the MBean on which the BinaryOpValueExp will be applied.                    
                </param>
                <return>
                    The ValueExp.                    
                </return>
                <exception>
                    BadStringOperationException                    
                </exception>
                <exception>
                    BadBinaryOpValueExpException                    
                </exception>
                <exception>
                    BadAttributeValueExpException                    
                </exception>
                <exception>
                    InvalidApplicationException                    
                </exception>
            </javadoc>
            <method name="apply" type="ValueExp" line="108">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <declaration name="val1" type="ValueExp" line="109"/>
                <declaration name="val2" type="ValueExp" line="110"/>
                <declaration name="sval1" type="String" line="111"/>
                <declaration name="sval2" type="String" line="112"/>
                <declaration name="dval1" type="double" line="113"/>
                <declaration name="dval2" type="double" line="114"/>
                <declaration name="lval1" type="long" line="115"/>
                <declaration name="lval2" type="long" line="116"/>
                <declaration name="numeric" type="boolean" line="117"/>
                <scope line="119">
                    <scope line="120"/>
                    <scope line="135"/>
                </scope>
                <scope line="150"/>
            </method>
            <javadoc line="165">
                Returns the string representing the object                
            </javadoc>
            <method name="toString" type="String" line="168">
                <scope line="169"/>
                <scope line="171"/>
            </method>
            <method name="parens" type="String" line="212">
                <params>
                    <param name="subexp" type="ValueExp"/>
                    <param name="left" type="boolean"/>
                </params>
                <declaration name="omit" type="boolean" line="213"/>
                <scope line="214">
                    <declaration name="subop" type="int" line="215"/>
                </scope>
            </method>
            <method name="precedence" type="int" line="229">
                <params>
                    <param name="xop" type="int"/>
                </params>
            </method>
            <method name="opString" type="String" line="238"/>
            <method name="setMBeanServer" type="void" line="254">
                <params>
                    <param name="s" type="MBeanServer"/>
                </params>
            </method>
        </class>
    </source>