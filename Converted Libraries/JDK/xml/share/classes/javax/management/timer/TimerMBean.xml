<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.timer">
        <import package="java.util.Date"/>
        <import package="java.util.Vector"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <interface name="TimerMBean">
            <comment line="241">
                GETTERS AND SETTERS
                --------------------                
            </comment>
            <javadoc line="42">
                Exposes the management interface of the timer MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="start" type="void" line="49"/>
            <javadoc line="49">
                Starts the timer.
                  &lt;P&gt;
                  If there is one or more timer notifications before the time in the list of notifications, the notification
                  is sent according to the &lt;CODE&gt;sendPastNotifications&lt;/CODE&gt; flag and then, updated
                  according to its period and remaining number of occurrences.
                  If the timer notification date remains earlier than the current date, this notification is just removed
                  from the list of notifications.                
            </javadoc>
            <method name="stop" type="void" line="60"/>
            <javadoc line="60">
                Stops the timer.                
            </javadoc>
            <method name="addNotification" type="Integer" line="65"/>
            <javadoc line="65">
                Creates a new timer notification with the specified &lt;CODE&gt;type&lt;/CODE&gt;, &lt;CODE&gt;message&lt;/CODE&gt;
                  and &lt;CODE&gt;userData&lt;/CODE&gt; and inserts it into the list of notifications with a given date,
                  period and number of occurrences.
                  &lt;P&gt;
                  If the timer notification to be inserted has a date that is before the current date,
                  the method behaves as if the specified date were the current date. &lt;BR&gt;
                  For once-off notifications, the notification is delivered immediately. &lt;BR&gt;
                  For periodic notifications, the first notification is delivered immediately and the
                  subsequent ones are spaced as specified by the period parameter.
                  &lt;P&gt;
                  Note that once the timer notification has been added into the list of notifications,
                  its associated date, period and number of occurrences cannot be updated.
                  &lt;P&gt;
                  In the case of a periodic notification, the value of parameter &lt;i&gt;fixedRate&lt;/i&gt; is used to
                  specify the execution scheme, as specified in {@link java.util.Timer}.                
                <param>
                    type The timer notification type.                    
                </param>
                <param>
                    message The timer notification detailed message.                    
                </param>
                <param>
                    userData The timer notification user data object.                    
                </param>
                <param>
                    date The date when the notification occurs.                    
                </param>
                <param>
                    period The period of the timer notification (in milliseconds).                    
                </param>
                <param>
                    nbOccurences The total number the timer notification will be emitted.                    
                </param>
                <param>
                    fixedRate If &lt;code&gt;true&lt;/code&gt; and if the notification is periodic, the notification
                      is scheduled with a &lt;i&gt;fixed-rate&lt;/i&gt; execution scheme. If
                      &lt;code&gt;false&lt;/code&gt; and if the notification is periodic, the notification
                      is scheduled with a &lt;i&gt;fixed-delay&lt;/i&gt; execution scheme. Ignored if the
                      notification is not periodic.                    
                </param>
                <return>
                    The identifier of the new created timer notification.                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException The date is {@code null} or
                      the period or the number of occurrences is negative.                    
                </exception>
                <see>
                    #addNotification(String,String,Object,Date,long,long)                    
                </see>
            </javadoc>
            <method name="addNotification" type="Integer" line="110"/>
            <javadoc line="110">
                Creates a new timer notification with the specified &lt;CODE&gt;type&lt;/CODE&gt;, &lt;CODE&gt;message&lt;/CODE&gt;
                  and &lt;CODE&gt;userData&lt;/CODE&gt; and inserts it into the list of notifications with a given date,
                  period and number of occurrences.
                  &lt;P&gt;
                  If the timer notification to be inserted has a date that is before the current date,
                  the method behaves as if the specified date were the current date. &lt;BR&gt;
                  For once-off notifications, the notification is delivered immediately. &lt;BR&gt;
                  For periodic notifications, the first notification is delivered immediately and the
                  subsequent ones are spaced as specified by the period parameter.
                  &lt;P&gt;
                  Note that once the timer notification has been added into the list of notifications,
                  its associated date, period and number of occurrences cannot be updated.
                  &lt;P&gt;
                  In the case of a periodic notification, uses a &lt;i&gt;fixed-delay&lt;/i&gt; execution scheme, as specified in{@link java.util.Timer}. In order to use a &lt;i&gt;fixed-rate&lt;/i&gt; execution scheme, use{@link #addNotification(String,String,Object,Date,long,long,boolean)} instead.                
                <param>
                    type The timer notification type.                    
                </param>
                <param>
                    message The timer notification detailed message.                    
                </param>
                <param>
                    userData The timer notification user data object.                    
                </param>
                <param>
                    date The date when the notification occurs.                    
                </param>
                <param>
                    period The period of the timer notification (in milliseconds).                    
                </param>
                <param>
                    nbOccurences The total number the timer notification will be emitted.                    
                </param>
                <return>
                    The identifier of the new created timer notification.                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException The date is {@code null} or
                      the period or the number of occurrences is negative.                    
                </exception>
                <see>
                    #addNotification(String,String,Object,Date,long,long,boolean)                    
                </see>
            </javadoc>
            <method name="addNotification" type="Integer" line="151"/>
            <javadoc line="151">
                Creates a new timer notification with the specified &lt;CODE&gt;type&lt;/CODE&gt;, &lt;CODE&gt;message&lt;/CODE&gt;
                  and &lt;CODE&gt;userData&lt;/CODE&gt; and inserts it into the list of notifications with a given date
                  and period and a null number of occurrences.
                  &lt;P&gt;
                  The timer notification will repeat continuously using the timer period using a &lt;i&gt;fixed-delay&lt;/i&gt;
                  execution scheme, as specified in {@link java.util.Timer}. In order to use a &lt;i&gt;fixed-rate&lt;/i&gt;
                  execution scheme, use {@link #addNotification(String,String,Object,Date,long,long,boolean)} instead.
                  &lt;P&gt;
                  If the timer notification to be inserted has a date that is before the current date,
                  the method behaves as if the specified date were the current date. The
                  first notification is delivered immediately and the subsequent ones are
                  spaced as specified by the period parameter.                
                <param>
                    type The timer notification type.                    
                </param>
                <param>
                    message The timer notification detailed message.                    
                </param>
                <param>
                    userData The timer notification user data object.                    
                </param>
                <param>
                    date The date when the notification occurs.                    
                </param>
                <param>
                    period The period of the timer notification (in milliseconds).                    
                </param>
                <return>
                    The identifier of the new created timer notification.                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException The date is {@code null} or
                      the period is negative.                    
                </exception>
            </javadoc>
            <method name="addNotification" type="Integer" line="186"/>
            <javadoc line="186">
                Creates a new timer notification with the specified &lt;CODE&gt;type&lt;/CODE&gt;, &lt;CODE&gt;message&lt;/CODE&gt;
                  and &lt;CODE&gt;userData&lt;/CODE&gt; and inserts it into the list of notifications with a given date
                  and a null period and number of occurrences.
                  &lt;P&gt;
                  The timer notification will be handled once at the specified date.
                  &lt;P&gt;
                  If the timer notification to be inserted has a date that is before the current date,
                  the method behaves as if the specified date were the current date and the
                  notification is delivered immediately.                
                <param>
                    type The timer notification type.                    
                </param>
                <param>
                    message The timer notification detailed message.                    
                </param>
                <param>
                    userData The timer notification user data object.                    
                </param>
                <param>
                    date The date when the notification occurs.                    
                </param>
                <return>
                    The identifier of the new created timer notification.                    
                </return>
                <exception>
                    java.lang.IllegalArgumentException The date is {@code null}.                    
                </exception>
            </javadoc>
            <method name="removeNotification" type="void" line="214"/>
            <javadoc line="214">
                Removes the timer notification corresponding to the specified identifier from the list of notifications.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <exception>
                    InstanceNotFoundException The specified identifier does not correspond to any timer notification
                      in the list of notifications of this timer MBean.                    
                </exception>
            </javadoc>
            <method name="removeNotifications" type="void" line="224"/>
            <javadoc line="224">
                Removes all the timer notifications corresponding to the specified type from the list of notifications.                
                <param>
                    type The timer notification type.                    
                </param>
                <exception>
                    InstanceNotFoundException The specified type does not correspond to any timer notification
                      in the list of notifications of this timer MBean.                    
                </exception>
            </javadoc>
            <method name="removeAllNotifications" type="void" line="234"/>
            <javadoc line="234">
                Removes all the timer notifications from the list of notifications
                  and resets the counter used to update the timer notification identifiers.                
            </javadoc>
            <method name="getNbNotifications" type="int" line="243"/>
            <javadoc line="243">
                Gets the number of timer notifications registered into the list of notifications.                
                <return>
                    The number of timer notifications.                    
                </return>
            </javadoc>
            <method name="getAllNotificationIDs" type="Vector<Integer>" line="250"/>
            <javadoc line="250">
                Gets all timer notification identifiers registered into the list of notifications.                
                <return>
                    A vector of &lt;CODE&gt;Integer&lt;/CODE&gt; objects containing all the timer notification identifiers.
                      &lt;BR&gt;The vector is empty if there is no timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getNotificationIDs" type="Vector<Integer>" line="258"/>
            <javadoc line="258">
                Gets all the identifiers of timer notifications corresponding to the specified type.                
                <param>
                    type The timer notification type.                    
                </param>
                <return>
                    A vector of &lt;CODE&gt;Integer&lt;/CODE&gt; objects containing all the identifiers of
                      timer notifications with the specified &lt;CODE&gt;type&lt;/CODE&gt;.
                      &lt;BR&gt;The vector is empty if there is no timer notifications registered for this timer MBean
                      with the specified &lt;CODE&gt;type&lt;/CODE&gt;.                    
                </return>
            </javadoc>
            <method name="getNotificationType" type="String" line="270"/>
            <javadoc line="270">
                Gets the timer notification type corresponding to the specified identifier.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    The timer notification type or null if the identifier is not mapped to any
                      timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getNotificationMessage" type="String" line="280"/>
            <javadoc line="280">
                Gets the timer notification detailed message corresponding to the specified identifier.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    The timer notification detailed message or null if the identifier is not mapped to any
                      timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getNotificationUserData" type="Object" line="290"/>
            <javadoc line="290">
                Gets the timer notification user data object corresponding to the specified identifier.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    The timer notification user data object or null if the identifier is not mapped to any
                      timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getDate" type="Date" line="302"/>
            <javadoc line="302">
                Gets a copy of the date associated to a timer notification.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    A copy of the date or null if the identifier is not mapped to any
                      timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getPeriod" type="Long" line="312"/>
            <javadoc line="312">
                Gets a copy of the period (in milliseconds) associated to a timer notification.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    A copy of the period or null if the identifier is not mapped to any
                      timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getNbOccurences" type="Long" line="322"/>
            <javadoc line="322">
                Gets a copy of the remaining number of occurrences associated to a timer notification.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    A copy of the remaining number of occurrences or null if the identifier is not mapped to any
                      timer notification registered for this timer MBean.                    
                </return>
            </javadoc>
            <method name="getFixedRate" type="Boolean" line="332"/>
            <javadoc line="332">
                Gets a copy of the flag indicating whether a periodic notification is
                  executed at &lt;i&gt;fixed-delay&lt;/i&gt; or at &lt;i&gt;fixed-rate&lt;/i&gt;.                
                <param>
                    id The timer notification identifier.                    
                </param>
                <return>
                    A copy of the flag indicating whether a periodic notification is
                      executed at &lt;i&gt;fixed-delay&lt;/i&gt; or at &lt;i&gt;fixed-rate&lt;/i&gt;.                    
                </return>
            </javadoc>
            <method name="getSendPastNotifications" type="boolean" line="343"/>
            <javadoc line="343">
                Gets the flag indicating whether or not the timer sends past notifications.                
                <return>
                    The past notifications sending on/off flag value.                    
                </return>
                <see>
                    #setSendPastNotifications                    
                </see>
            </javadoc>
            <method name="setSendPastNotifications" type="void" line="352"/>
            <javadoc line="352">
                Sets the flag indicating whether the timer sends past notifications or not.                
                <param>
                    value The past notifications sending on/off flag value.                    
                </param>
                <see>
                    #getSendPastNotifications                    
                </see>
            </javadoc>
            <method name="isActive" type="boolean" line="361"/>
            <javadoc line="361">
                Tests whether the timer MBean is active.
                  A timer MBean is marked active when the {@link #start start} method is called.
                  It becomes inactive when the {@link #stop stop} method is called.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the timer MBean is active, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="370"/>
            <javadoc line="370">
                Tests whether the list of timer notifications is empty.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the list of timer notifications is empty, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
        </interface>
    </source>