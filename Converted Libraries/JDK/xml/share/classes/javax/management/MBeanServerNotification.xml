<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <class name="MBeanServerNotification" line="29">
            <extends class="Notification"/>
            <comment line="102">
                                
            </comment>
            <javadoc line="29">
                Represents a notification emitted by the MBean Server through the MBeanServerDelegate MBean.
                  The MBean Server emits the following types of notifications: MBean registration, MBean
                  unregistration.
                  &lt;P&gt;
                  To receive MBeanServerNotifications, you need to register a listener with
                  the {@link MBeanServerDelegate MBeanServerDelegate} MBean
                  that represents the MBeanServer. The ObjectName of the MBeanServerDelegate is{@link MBeanServerDelegate#DELEGATE_NAME}, which is
                  &lt;CODE&gt;JMImplementation:type=MBeanServerDelegate&lt;/CODE&gt;.
                  &lt;p&gt;The following code prints a message every time an MBean is registered
                  or unregistered in the MBean Server {@code mbeanServer}:&lt;/p&gt;
                  &lt;pre&gt;
                  private static final NotificationListener printListener = new NotificationListener() {
                  public void handleNotification(Notification n, Object handback) {
                  if (!(n instanceof MBeanServerNotification)) {
                  System.out.println(&quot;Ignored notification of class &quot; + n.getClass().getName());
                  return;
                  }
                  MBeanServerNotification mbsn = (MBeanServerNotification) n;
                  String what;
                  if (n.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION))
                  what = &quot;MBean registered&quot;;
                  else if (n.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION))
                  what = &quot;MBean unregistered&quot;;
                  else
                  what = &quot;Unknown type &quot; + n.getType();
                  System.out.println(&quot;Received MBean Server notification: &quot; + what + &quot;: &quot; +
                  mbsn.getMBeanName());
                  }
                  };
                  ...
                  mbeanServer.addNotificationListener(
                  MBeanServerDelegate.DELEGATE_NAME, printListener, null, null);
                  &lt;/pre&gt;
                  &lt;p id=&quot;group&quot;&gt;
                  An MBean which is not an {@link MBeanServerDelegate} may also emit
                  MBeanServerNotifications. In particular, there is a convention for
                  MBeans to emit an MBeanServerNotification for a group of MBeans.&lt;/p&gt;
                  &lt;p&gt;An MBeanServerNotification emitted to denote the registration or
                  unregistration of a group of MBeans has the following characteristics:
                  &lt;ul&gt;&lt;li&gt;Its {@linkplain Notification#getType() notification type} is{@code &quot;JMX.mbean.registered.group&quot;} or{@code &quot;JMX.mbean.unregistered.group&quot;}, which can also be written {@link MBeanServerNotification#REGISTRATION_NOTIFICATION}{@code + &quot;.group&quot;} or{@link MBeanServerNotification#UNREGISTRATION_NOTIFICATION}{@code + &quot;.group&quot;}.
                  &lt;/li&gt;
                  &lt;li&gt;Its {@linkplain #getMBeanName() MBean name} is an ObjectName pattern
                  that selects the set (or a superset) of the MBeans being registered
                  or unregistered&lt;/li&gt;
                  &lt;li&gt;Its {@linkplain Notification#getUserData() user data} can optionally
                  be set to an array of ObjectNames containing the names of all MBeans
                  being registered or unregistered.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/p&gt;
                  &lt;p&gt;
                  MBeans which emit these group registration/unregistration notifications will
                  declare them in their {@link MBeanInfo#getNotifications()MBeanNotificationInfo}.
                  &lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="102"/>
            <declaration name="REGISTRATION_NOTIFICATION" type="String" line="103"/>
            <javadoc line="103">
                Notification type denoting that an MBean has been registered.
                  Value is &quot;JMX.mbean.registered&quot;.                
            </javadoc>
            <declaration name="UNREGISTRATION_NOTIFICATION" type="String" line="109"/>
            <javadoc line="109">
                Notification type denoting that an MBean has been unregistered.
                  Value is &quot;JMX.mbean.unregistered&quot;.                
            </javadoc>
            <declaration name="objectName" type="ObjectName" line="115"/>
            <javadoc line="115">
                @serial The object names of the MBeans concerned by this notification                
            </javadoc>
            <javadoc line="120">
                Creates an MBeanServerNotification object specifying object names of
                  the MBeans that caused the notification and the specified notification
                  type.                
                <param>
                    type A string denoting the type of the
                      notification. Set it to one these values: {@link #REGISTRATION_NOTIFICATION}, {@link #UNREGISTRATION_NOTIFICATION}.                    
                </param>
                <param>
                    source The MBeanServerNotification object responsible
                      for forwarding MBean server notification.                    
                </param>
                <param>
                    sequenceNumber A sequence number that can be used to order
                      received notifications.                    
                </param>
                <param>
                    objectName The object name of the MBean that caused the
                      notification.                    
                </param>
            </javadoc>
            <method name="MBeanServerNotification" type="constructor" line="138">
                <params>
                    <param name="type" type="String"/>
                    <param name="source" type="Object"/>
                    <param name="sequenceNumber" type="long"/>
                    <param name="objectName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="143">
                Returns the  object name of the MBean that caused the notification.                
                <return>
                    the object name of the MBean that caused the notification.                    
                </return>
            </javadoc>
            <method name="getMBeanName" type="ObjectName" line="148"/>
            <method name="toString" type="String" line="153"/>
        </class>
    </source>