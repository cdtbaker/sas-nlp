<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.util.Set"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <interface name="MBeanServer">
            <implements interface="MBeanServerConnection"/>
            <javadoc line="5">
                &lt;p&gt;This is the interface for MBean manipulation on the agent
                  side. It contains the methods necessary for the creation,
                  registration, and deletion of MBeans as well as the access methods
                  for registered MBeans.  This is the core component of the JMX
                  infrastructure.&lt;/p&gt;
                  &lt;p&gt;User code does not usually implement this interface.  Instead,
                  an object that implements this interface is obtained with one of
                  the methods in the {@link javax.management.MBeanServerFactory} class.&lt;/p&gt;
                  &lt;p&gt;Every MBean which is added to the MBean server becomes
                  manageable: its attributes and operations become remotely
                  accessible through the connectors/adaptors connected to that MBean
                  server.  A Java object cannot be registered in the MBean server
                  unless it is a JMX compliant MBean.&lt;/p&gt;
                  &lt;p id=&quot;notif&quot;&gt;When an MBean is registered or unregistered in the
                  MBean server a {@link javax.management.MBeanServerNotificationMBeanServerNotification} Notification is emitted. To register an
                  object as listener to MBeanServerNotifications you should call the
                  MBean server method {@link #addNotificationListeneraddNotificationListener} with &lt;CODE&gt;ObjectName&lt;/CODE&gt; the
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt; of the {@link javax.management.MBeanServerDelegate MBeanServerDelegate}.  This
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt; is: &lt;BR&gt;
                  &lt;CODE&gt;JMImplementation:type=MBeanServerDelegate&lt;/CODE&gt;.&lt;/p&gt;
                  &lt;p&gt;An object obtained from the {@link MBeanServerFactory#createMBeanServer(String) createMBeanServer} or{@link MBeanServerFactory#newMBeanServer(String) newMBeanServer}methods of the {@link MBeanServerFactory} class applies security
                  checks to its methods, as follows.&lt;/p&gt;
                  &lt;p&gt;First, if there is no security manager ({@link System#getSecurityManager()} is null), then an implementation of
                  this interface is free not to make any checks.&lt;/p&gt;
                  &lt;p&gt;Assuming that there is a security manager, or that the
                  implementation chooses to make checks anyway, the checks are made
                  as detailed below.  In what follows, and unless otherwise specified,{@code className} is the
                  string returned by {@link MBeanInfo#getClassName()} for the target
                  MBean.&lt;/p&gt;
                  &lt;p&gt;If a security check fails, the method throws {@link SecurityException}.&lt;/p&gt;
                  &lt;p&gt;For methods that can throw {@link InstanceNotFoundException},
                  this exception is thrown for a non-existent MBean, regardless of
                  permissions.  This is because a non-existent MBean has no
                  &lt;code&gt;className&lt;/code&gt;.&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #invoke invoke} method, the caller&apos;s
                  permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, operationName, name, &quot;invoke&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getAttribute getAttribute} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, attribute, name, &quot;getAttribute&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getAttributes getAttributes} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;getAttribute&quot;)}.
                  Additionally, for each attribute &lt;em&gt;a&lt;/em&gt; in the {@link AttributeList}, if the caller&apos;s permissions do not imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, &lt;em&gt;a&lt;/em&gt;, name, &quot;getAttribute&quot;)}, the
                  MBean server will behave as if that attribute had not been in the
                  supplied list.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #setAttribute setAttribute} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, attrName, name, &quot;setAttribute&quot;)}, where
                  &lt;code&gt;attrName&lt;/code&gt; is {@link Attribute#getName()attribute.getName()}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #setAttributes setAttributes} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;setAttribute&quot;)}.
                  Additionally, for each attribute &lt;em&gt;a&lt;/em&gt; in the {@link AttributeList}, if the caller&apos;s permissions do not imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, &lt;em&gt;a&lt;/em&gt;, name, &quot;setAttribute&quot;)}, the
                  MBean server will behave as if that attribute had not been in the
                  supplied list.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the &lt;code&gt;addNotificationListener&lt;/code&gt; methods,
                  the caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name,
                  &quot;addNotificationListener&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the &lt;code&gt;removeNotificationListener&lt;/code&gt; methods,
                  the caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name,
                  &quot;removeNotificationListener&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getMBeanInfo getMBeanInfo} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;getMBeanInfo&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getObjectInstance getObjectInstance} method,
                  the caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;getObjectInstance&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #isInstanceOf isInstanceOf} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;isInstanceOf&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #queryMBeans queryMBeans} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(null, null, null, &quot;queryMBeans&quot;)}.
                  Additionally, for each MBean &lt;em&gt;n&lt;/em&gt; that matches &lt;code&gt;name&lt;/code&gt;,
                  if the caller&apos;s permissions do not imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, &lt;em&gt;n&lt;/em&gt;, &quot;queryMBeans&quot;)}, the
                  MBean server will behave as if that MBean did not exist.&lt;/p&gt;
                  &lt;p&gt;Certain query elements perform operations on the MBean server.
                  If the caller does not have the required permissions for a given
                  MBean, that MBean will not be included in the result of the query.
                  The standard query elements that are affected are {@link Query#attr(String)}, {@link Query#attr(String,String)}, and {@link Query#classattr()}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #queryNames queryNames} method, the checks
                  are the same as for &lt;code&gt;queryMBeans&lt;/code&gt; except that
                  &lt;code&gt;&quot;queryNames&quot;&lt;/code&gt; is used instead of
                  &lt;code&gt;&quot;queryMBeans&quot;&lt;/code&gt; in the &lt;code&gt;MBeanPermission&lt;/code&gt;
                  objects.  Note that a &lt;code&gt;&quot;queryMBeans&quot;&lt;/code&gt; permission implies
                  the corresponding &lt;code&gt;&quot;queryNames&quot;&lt;/code&gt; permission.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getDomains getDomains} method, the caller&apos;s
                  permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(null, null, null, &quot;getDomains&quot;)}.  Additionally,
                  for each domain &lt;var&gt;d&lt;/var&gt; in the returned array, if the caller&apos;s
                  permissions do not imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(null, null, new ObjectName(&quot;&lt;var&gt;d&lt;/var&gt;:x=x&quot;),
                  &quot;getDomains&quot;)}, the domain is eliminated from the array.  Here,
                  &lt;code&gt;x=x&lt;/code&gt; is any &lt;var&gt;key=value&lt;/var&gt; pair, needed to
                  satisfy ObjectName&apos;s constructor but not otherwise relevant.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getClassLoader getClassLoader} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, loaderName,
                  &quot;getClassLoader&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getClassLoaderFor getClassLoaderFor} method,
                  the caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, mbeanName,
                  &quot;getClassLoaderFor&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #getClassLoaderRepositorygetClassLoaderRepository} method, the caller&apos;s permissions must
                  imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(null, null, null, &quot;getClassLoaderRepository&quot;)}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the deprecated &lt;code&gt;deserialize&lt;/code&gt; methods, the
                  required permissions are the same as for the methods that replace
                  them.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the &lt;code&gt;instantiate&lt;/code&gt; methods, the caller&apos;s
                  permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, null, &quot;instantiate&quot;)},
                  where {@code className} is the name of the class which is to
                  be instantiated.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #registerMBean registerMBean} method, the
                  caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;registerMBean&quot;)}.
                  &lt;p&gt;If the &lt;code&gt;MBeanPermission&lt;/code&gt; check succeeds, the MBean&apos;s
                  class is validated by checking that its {@link java.security.ProtectionDomain ProtectionDomain} implies {@link MBeanTrustPermission#MBeanTrustPermission(String)MBeanTrustPermission(&quot;register&quot;)}.&lt;/p&gt;
                  &lt;p&gt;Finally, if the &lt;code&gt;name&lt;/code&gt; argument is null, another
                  &lt;code&gt;MBeanPermission&lt;/code&gt; check is made using the
                  &lt;code&gt;ObjectName&lt;/code&gt; returned by {@link MBeanRegistration#preRegister MBeanRegistration.preRegister}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the &lt;code&gt;createMBean&lt;/code&gt; methods, the caller&apos;s
                  permissions must imply the permissions needed by the equivalent
                  &lt;code&gt;instantiate&lt;/code&gt; followed by
                  &lt;code&gt;registerMBean&lt;/code&gt;.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;For the {@link #unregisterMBean unregisterMBean} method,
                  the caller&apos;s permissions must imply {@link MBeanPermission#MBeanPermission(String,String,ObjectName,String)MBeanPermission(className, null, name, &quot;unregisterMBean&quot;)}.&lt;/p&gt;
                  &lt;/p&gt;
                  &lt;/ul&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="125"/>
            <javadoc line="125">
                {@inheritDoc}&lt;p&gt;If this method successfully creates an MBean, a notification
                  is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeMBeanException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeErrorException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="133"/>
            <javadoc line="133">
                {@inheritDoc}&lt;p&gt;If this method successfully creates an MBean, a notification
                  is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeMBeanException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeErrorException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="141"/>
            <javadoc line="141">
                {@inheritDoc}&lt;p&gt;If this method successfully creates an MBean, a notification
                  is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeMBeanException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeErrorException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="149"/>
            <javadoc line="149">
                {@inheritDoc}&lt;p&gt;If this method successfully creates an MBean, a notification
                  is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeMBeanException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeErrorException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="registerMBean" type="ObjectInstance" line="157"/>
            <javadoc line="157">
                &lt;p&gt;Registers a pre-existing object as an MBean with the MBean
                  server. If the object name given is null, the MBean must
                  provide its own name by implementing the {@link javax.management.MBeanRegistration MBeanRegistration} interface
                  and returning the name from the {@link MBeanRegistration#preRegister preRegister} method.
                  &lt;p&gt;If this method successfully registers an MBean, a notification
                  is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;                
                <param>
                    object The  MBean to be registered as an MBean.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      registered MBean.  If the contained <code>ObjectName</code>
                      is <code>n</code>, the contained Java class name is
                      <code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.                    
                </return>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The
                      <CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </exception>
                <exception>
                    RuntimeMBeanException If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
                      <CODE>RuntimeException</CODE>, the <CODE>registerMBean</CODE> method will
                      throw a <CODE>RuntimeMBeanException</CODE>, although the MBean
                      registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>registerMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    RuntimeErrorException If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
                      <CODE>Error</CODE>, the <CODE>registerMBean</CODE> method will
                      throw a <CODE>RuntimeErrorException</CODE>, although the MBean
                      registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>registerMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    NotCompliantMBeanException This object is not a JMX
                      compliant MBean                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      passed in parameter is null or no object name is specified.                    
                </exception>
                <see>
                    javax.management.MBeanRegistration                    
                </see>
            </javadoc>
            <method name="unregisterMBean" type="void" line="203"/>
            <javadoc line="203">
                {@inheritDoc}&lt;p&gt;If this method successfully unregisters an MBean, a notification
                  is sent as described &lt;a href=&quot;#notif&quot;&gt;above&lt;/a&gt;.&lt;/p&gt;                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeMBeanException {@inheritDoc}                    
                </throws>
                <throws>
                    RuntimeErrorException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="getObjectInstance" type="ObjectInstance" line="211"/>
            <method name="queryMBeans" type="Set<ObjectInstance>" line="212"/>
            <javadoc line="212">
                {@inheritDoc}                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="queryNames" type="Set<ObjectName>" line="217"/>
            <javadoc line="217">
                {@inheritDoc}                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="isRegistered" type="boolean" line="222"/>
            <javadoc line="222">
                @throws RuntimeOperationsException {@inheritDoc}                
            </javadoc>
            <method name="getMBeanCount" type="Integer" line="226"/>
            <javadoc line="226">
                Returns the number of MBeans registered in the MBean server.                
                <return>
                    the number of registered MBeans, wrapped in an Integer.
                      If the caller's permissions are restricted, this number may
                      be greater than the number of MBeans the caller can access.                    
                </return>
            </javadoc>
            <method name="getAttribute" type="Object" line="233"/>
            <javadoc line="233">
                @throws RuntimeOperationsException {@inheritDoc}                
            </javadoc>
            <method name="getAttributes" type="AttributeList" line="237"/>
            <javadoc line="237">
                @throws RuntimeOperationsException {@inheritDoc}                
            </javadoc>
            <method name="setAttribute" type="void" line="241"/>
            <javadoc line="241">
                @throws RuntimeOperationsException {@inheritDoc}                
            </javadoc>
            <method name="setAttributes" type="AttributeList" line="245"/>
            <javadoc line="245">
                @throws RuntimeOperationsException {@inheritDoc}                
            </javadoc>
            <method name="invoke" type="Object" line="249"/>
            <method name="getDefaultDomain" type="String" line="250"/>
            <method name="getDomains" type="String[]" line="251"/>
            <method name="addNotificationListener" type="void" line="252"/>
            <javadoc line="252">
                {@inheritDoc}If the source of the notification
                  is a reference to an MBean object, the MBean server will replace it
                  by that MBean&apos;s ObjectName.  Otherwise the source is unchanged.                
            </javadoc>
            <method name="addNotificationListener" type="void" line="258"/>
            <javadoc line="258">
                {@inheritDoc}                
                <throws>
                    RuntimeOperationsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="263"/>
            <method name="removeNotificationListener" type="void" line="264"/>
            <method name="removeNotificationListener" type="void" line="265"/>
            <method name="removeNotificationListener" type="void" line="266"/>
            <method name="getMBeanInfo" type="MBeanInfo" line="267"/>
            <method name="isInstanceOf" type="boolean" line="268"/>
            <method name="instantiate" type="Object" line="269"/>
            <javadoc line="269">
                &lt;p&gt;Instantiates an object using the list of all class loaders
                  registered in the MBean server&apos;s {@link javax.management.loading.ClassLoaderRepository Class Loader
                  Repository}.  The object&apos;s class should have a public
                  constructor.  This method returns a reference to the newly
                  created object.  The newly created object is not registered in
                  the MBean server.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to {@link #instantiate(String,Object[],String[])instantiate(className, (Object[]) null, (String[]) null)}.&lt;/p&gt;                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or the
                      <CODE>java.lang.Exception</CODE> that occurred when trying to
                      invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has
                      thrown an exception                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="290"/>
            <javadoc line="290">
                &lt;p&gt;Instantiates an object using the class Loader specified by its
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt;.  If the loader name is null, the
                  ClassLoader that loaded the MBean Server will be used.  The
                  object&apos;s class should have a public constructor.  This method
                  returns a reference to the newly created object.  The newly
                  created object is not registered in the MBean server.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to {@link #instantiate(String,ObjectName,Object[],String[])instantiate(className, loaderName, (Object[]) null, (String[])
                  null)}.&lt;/p&gt;                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or the
                      <CODE>java.lang.Exception</CODE> that occurred when trying to
                      invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has
                      thrown an exception.                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBeanServer.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="315"/>
            <javadoc line="315">
                &lt;p&gt;Instantiates an object using the list of all class loaders
                  registered in the MBean server {@link javax.management.loading.ClassLoaderRepository Class Loader
                  Repository}.  The object&apos;s class should have a public
                  constructor.  The call returns a reference to the newly created
                  object.  The newly created object is not registered in the
                  MBean server.&lt;/p&gt;                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the
                      constructor to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or the
                      <CODE>java.lang.Exception</CODE> that occurred when trying to
                      invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has
                      thrown an exception                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="instantiate" type="Object" line="339"/>
            <javadoc line="339">
                &lt;p&gt;Instantiates an object. The class loader to be used is
                  identified by its object name. If the object name of the loader
                  is null, the ClassLoader that loaded the MBean server will be
                  used.  The object&apos;s class should have a public constructor.
                  The call returns a reference to the newly created object.  The
                  newly created object is not registered in the MBean server.&lt;/p&gt;                
                <param>
                    className The class name of the object to be instantiated.                    
                </param>
                <param>
                    params An array containing the parameters of the
                      constructor to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    The newly instantiated object.                    
                </return>
                <exception>
                    ReflectionException Wraps a <CODE>java.lang.ClassNotFoundException</CODE> or the <CODE>java.lang.Exception</CODE> that
                      occurred when trying to invoke the object's constructor.                    
                </exception>
                <exception>
                    MBeanException The constructor of the object has
                      thrown an exception                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="364"/>
            <javadoc line="364">
                &lt;p&gt;De-serializes a byte array in the context of the class loader
                  of an MBean.&lt;/p&gt;                
                <param>
                    name The name of the MBean whose class loader should be
                      used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      found.                    
                </exception>
                <exception>
                    OperationsException Any of the usual Input/Output
                      related exceptions.                    
                </exception>
                <deprecated>
                    Use {@link #getClassLoaderFor getClassLoaderFor} to
                      obtain the appropriate class loader for deserialization.                    
                </deprecated>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="379"/>
            <javadoc line="379">
                &lt;p&gt;De-serializes a byte array in the context of a given MBean
                  class loader.  The class loader is found by loading the class
                  &lt;code&gt;className&lt;/code&gt; through the {@link javax.management.loading.ClassLoaderRepository Class Loader
                  Repository}.  The resultant class&apos;s class loader is the one to
                  use.                
                <param>
                    className The name of the class whose class loader should be
                      used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    OperationsException Any of the usual Input/Output
                      related exceptions.                    
                </exception>
                <exception>
                    ReflectionException The specified class could not be
                      loaded by the class loader repository                    
                </exception>
                <deprecated>
                    Use {@link #getClassLoaderRepository} to obtain the
                      class loader repository and use it to deserialize.                    
                </deprecated>
            </javadoc>
            <method name="deserialize" type="ObjectInputStream" line="397"/>
            <javadoc line="397">
                &lt;p&gt;De-serializes a byte array in the context of a given MBean
                  class loader.  The class loader is the one that loaded the
                  class with name &quot;className&quot;.  The name of the class loader to
                  be used for loading the specified class is specified.  If null,
                  the MBean Server&apos;s class loader will be used.&lt;/p&gt;                
                <param>
                    className The name of the class whose class loader should be
                      used for the de-serialization.                    
                </param>
                <param>
                    data The byte array to be de-sererialized.                    
                </param>
                <param>
                    loaderName The name of the class loader to be used for
                      loading the specified class.  If null, the MBean Server's class
                      loader will be used.                    
                </param>
                <return>
                    The de-serialized object stream.                    
                </return>
                <exception>
                    InstanceNotFoundException The specified class loader
                      MBean is not found.                    
                </exception>
                <exception>
                    OperationsException Any of the usual Input/Output
                      related exceptions.                    
                </exception>
                <exception>
                    ReflectionException The specified class could not be
                      loaded by the specified class loader.                    
                </exception>
                <deprecated>
                    Use {@link #getClassLoader getClassLoader} to obtain
                      the class loader for deserialization.                    
                </deprecated>
            </javadoc>
            <method name="getClassLoaderFor" type="ClassLoader" line="420"/>
            <javadoc line="420">
                &lt;p&gt;Return the {@link java.lang.ClassLoader} that was used for
                  loading the class of the named MBean.&lt;/p&gt;                
                <param>
                    mbeanName The ObjectName of the MBean.                    
                </param>
                <return>
                    The ClassLoader used for that MBean.  If <var>l</var>
                      is the MBean's actual ClassLoader, and <var>r</var> is the
                      returned value, then either:
                      <ul>
                      <li><var>r</var> is identical to <var>l</var>; or
                      <li>the result of <var>r</var>{@link ClassLoader#loadClass(String) .loadClass(<var>s</var>)} is the
                      same as <var>l</var>{@link ClassLoader#loadClass(String).loadClass(<var>s</var>)} for any string <var>s</var>.
                      </ul>
                      What this means is that the ClassLoader may be wrapped in
                      another ClassLoader for security or other reasons.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named MBean is not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoader" type="ClassLoader" line="437"/>
            <javadoc line="437">
                &lt;p&gt;Return the named {@link java.lang.ClassLoader}.&lt;/p&gt;                
                <param>
                    loaderName The ObjectName of the ClassLoader.  May be
                      null, in which case the MBean server's own ClassLoader is
                      returned.                    
                </param>
                <return>
                    The named ClassLoader.  If <var>l</var> is the actual
                      ClassLoader with that name, and <var>r</var> is the returned
                      value, then either:
                      <ul>
                      <li><var>r</var> is identical to <var>l</var>; or
                      <li>the result of <var>r</var>{@link ClassLoader#loadClass(String) .loadClass(<var>s</var>)} is the
                      same as <var>l</var>{@link ClassLoader#loadClass(String).loadClass(<var>s</var>)} for any string <var>s</var>.
                      </ul>
                      What this means is that the ClassLoader may be wrapped in
                      another ClassLoader for security or other reasons.                    
                </return>
                <exception>
                    InstanceNotFoundException if the named ClassLoader is
                      not found.                    
                </exception>
            </javadoc>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="456"/>
            <javadoc line="456">
                &lt;p&gt;Return the ClassLoaderRepository for this MBeanServer.                
                <return>
                    The ClassLoaderRepository for this MBeanServer.                    
                </return>
            </javadoc>
        </interface>
    </source>