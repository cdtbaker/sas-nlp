<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.loading">
        <import package="com.sun.jmx.defaults.JmxProperties"/>
        <import package="com.sun.jmx.defaults.ServiceName"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.Externalizable"/>
        <import package="java.io.File"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.ObjectInput"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutput"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.URL"/>
        <import package="java.net.URLStreamHandlerFactory"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <import package="com.sun.jmx.defaults.JmxProperties.MLET_LIB_DIR"/>
        <import package="com.sun.jmx.defaults.JmxProperties.MLET_LOGGER"/>
        <import package="com.sun.jmx.defaults.ServiceName"/>
        <import package="javax.management.ServiceNotFoundException"/>
        <class name="MLet" line="42">
            <extends class="java.net.URLClassLoader"/>
            <implements interface="MLetMBean"/>
            <implements interface="MBeanRegistration"/>
            <implements interface="Externalizable"/>
            <javadoc line="42">
                Allows you to instantiate and register one or several MBeans in the MBean server
                  coming from a remote URL. M-let is a shortcut for management applet. The m-let service does this
                  by loading an m-let text file, which specifies information on the MBeans to be obtained.
                  The information on each MBean is specified in a single instance of a tag, called the MLET tag.
                  The location of the m-let text file is specified by a URL.
                  &lt;p&gt;
                  The &lt;CODE&gt;MLET&lt;/CODE&gt; tag has the following syntax:
                  &lt;p&gt;
                  &amp;lt;&lt;CODE&gt;MLET&lt;/CODE&gt;&lt;BR&gt;
                  &lt;CODE&gt;CODE = &lt;/CODE&gt;&lt;VAR&gt;class&lt;/VAR&gt;&lt;CODE&gt; | OBJECT = &lt;/CODE&gt;&lt;VAR&gt;serfile&lt;/VAR&gt;&lt;BR&gt;
                  &lt;CODE&gt;ARCHIVE = &amp;quot;&lt;/CODE&gt;&lt;VAR&gt;archiveList&lt;/VAR&gt;&lt;CODE&gt;&amp;quot;&lt;/CODE&gt;&lt;BR&gt;
                  &lt;CODE&gt;[CODEBASE = &lt;/CODE&gt;&lt;VAR&gt;codebaseURL&lt;/VAR&gt;&lt;CODE&gt;]&lt;/CODE&gt;&lt;BR&gt;
                  &lt;CODE&gt;[NAME = &lt;/CODE&gt;&lt;VAR&gt;mbeanname&lt;/VAR&gt;&lt;CODE&gt;]&lt;/CODE&gt;&lt;BR&gt;
                  &lt;CODE&gt;[VERSION = &lt;/CODE&gt;&lt;VAR&gt;version&lt;/VAR&gt;&lt;CODE&gt;]&lt;/CODE&gt;&lt;BR&gt;
                  &amp;gt;&lt;BR&gt;
                  &lt;CODE&gt;[&lt;/CODE&gt;&lt;VAR&gt;arglist&lt;/VAR&gt;&lt;CODE&gt;]&lt;/CODE&gt;&lt;BR&gt;
                  &amp;lt;&lt;CODE&gt;/MLET&lt;/CODE&gt;&amp;gt;
                  &lt;p&gt;
                  where:
                  &lt;DL&gt;
                  &lt;DT&gt;&lt;CODE&gt;CODE = &lt;/CODE&gt;&lt;VAR&gt;class&lt;/VAR&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This attribute specifies the full Java class name, including package name, of the MBean to be obtained.
                  The compiled &lt;CODE&gt;.class&lt;/CODE&gt; file of the MBean must be contained in one of the &lt;CODE&gt;.jar&lt;/CODE&gt; files specified by the &lt;CODE&gt;ARCHIVE&lt;/CODE&gt;
                  attribute. Either &lt;CODE&gt;CODE&lt;/CODE&gt; or &lt;CODE&gt;OBJECT&lt;/CODE&gt; must be present.
                  &lt;/DD&gt;
                  &lt;DT&gt;&lt;CODE&gt;OBJECT = &lt;/CODE&gt;&lt;VAR&gt;serfile&lt;/VAR&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This attribute specifies the &lt;CODE&gt;.ser&lt;/CODE&gt; file that contains a serialized representation of the MBean to be obtained.
                  This file must be contained in one of the &lt;CODE&gt;.jar&lt;/CODE&gt; files specified by the &lt;CODE&gt;ARCHIVE&lt;/CODE&gt; attribute. If the &lt;CODE&gt;.jar&lt;/CODE&gt; file contains a directory hierarchy, specify the path of the file within this hierarchy. Otherwise  a match will not be found. Either &lt;CODE&gt;CODE&lt;/CODE&gt; or &lt;CODE&gt;OBJECT&lt;/CODE&gt; must be present.
                  &lt;/DD&gt;
                  &lt;DT&gt;&lt;CODE&gt;ARCHIVE = &amp;quot;&lt;/CODE&gt;&lt;VAR&gt;archiveList&lt;/VAR&gt;&lt;CODE&gt;&amp;quot;&lt;/CODE&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This mandatory attribute specifies one or more &lt;CODE&gt;.jar&lt;/CODE&gt; files
                  containing MBeans or other resources used by
                  the MBean to be obtained. One of the &lt;CODE&gt;.jar&lt;/CODE&gt; files must contain the file specified by the &lt;CODE&gt;CODE&lt;/CODE&gt; or &lt;CODE&gt;OBJECT&lt;/CODE&gt; attribute.
                  If archivelist contains more than one file:
                  &lt;UL&gt;
                  &lt;LI&gt;Each file must be separated from the one that follows it by a comma (,).
                  &lt;LI&gt;&lt;VAR&gt;archivelist&lt;/VAR&gt; must be enclosed in double quote marks.
                  &lt;/UL&gt;
                  All &lt;CODE&gt;.jar&lt;/CODE&gt; files in &lt;VAR&gt;archivelist&lt;/VAR&gt; must be stored in the directory specified by the code base URL.
                  &lt;/DD&gt;
                  &lt;DT&gt;&lt;CODE&gt;CODEBASE = &lt;/CODE&gt;&lt;VAR&gt;codebaseURL&lt;/VAR&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This optional attribute specifies the code base URL of the MBean to be obtained. It identifies the directory that contains
                  the &lt;CODE&gt;.jar&lt;/CODE&gt; files specified by the &lt;CODE&gt;ARCHIVE&lt;/CODE&gt; attribute. Specify this attribute only if the &lt;CODE&gt;.jar&lt;/CODE&gt; files are not in the same
                  directory as the m-let text file. If this attribute is not specified, the base URL of the m-let text file is used.
                  &lt;/DD&gt;
                  &lt;DT&gt;&lt;CODE&gt;NAME = &lt;/CODE&gt;&lt;VAR&gt;mbeanname&lt;/VAR&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This optional attribute specifies the object name to be assigned to the
                  MBean instance when the m-let service registers it. If
                  &lt;VAR&gt;mbeanname&lt;/VAR&gt; starts with the colon character (:), the domain
                  part of the object name is the default domain of the MBean server,
                  as returned by {@link javax.management.MBeanServer#getDefaultDomain()}.
                  &lt;/DD&gt;
                  &lt;DT&gt;&lt;CODE&gt;VERSION = &lt;/CODE&gt;&lt;VAR&gt;version&lt;/VAR&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This optional attribute specifies the version number of the MBean and
                  associated &lt;CODE&gt;.jar&lt;/CODE&gt; files to be obtained. This version number can
                  be used to specify that the &lt;CODE&gt;.jar&lt;/CODE&gt; files are loaded from the
                  server to update those stored locally in the cache the next time the m-let
                  text file is loaded. &lt;VAR&gt;version&lt;/VAR&gt; must be a series of non-negative
                  decimal integers each separated by a period from the one that precedes it.
                  &lt;/DD&gt;
                  &lt;DT&gt;&lt;VAR&gt;arglist&lt;/VAR&gt;&lt;/DT&gt;
                  &lt;DD&gt;
                  This optional attribute specifies a list of one or more parameters for the
                  MBean to be instantiated. This list describes the parameters to be passed the MBean&apos;s constructor.
                  Use the following syntax to specify each item in
                  &lt;VAR&gt;arglist&lt;/VAR&gt;:&lt;/DD&gt;
                  &lt;DL&gt;
                  &lt;P&gt;
                  &lt;DT&gt;&amp;lt;&lt;CODE&gt;ARG TYPE=&lt;/CODE&gt;&lt;VAR&gt;argumentType&lt;/VAR&gt; &lt;CODE&gt;VALUE=&lt;/CODE&gt;&lt;VAR&gt;value&lt;/VAR&gt;&amp;gt;&lt;/DT&gt;
                  &lt;P&gt;
                  &lt;DD&gt;where:&lt;/DD&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;VAR&gt;argumentType&lt;/VAR&gt; is the type of the argument that will be passed as parameter to the MBean&apos;s constructor.&lt;/UL&gt;
                  &lt;/DL&gt;
                  &lt;P&gt;The arguments&apos; type in the argument list should be a Java primitive type or a Java basic type
                  (&lt;CODE&gt;java.lang.Boolean, java.lang.Byte, java.lang.Short, java.lang.Long, java.lang.Integer, java.lang.Float, java.lang.Double, java.lang.String&lt;/CODE&gt;).
                  &lt;/DL&gt;
                  When an m-let text file is loaded, an
                  instance of each MBean specified in the file is created and registered.
                  &lt;P&gt;
                  The m-let service extends the &lt;CODE&gt;java.net.URLClassLoader&lt;/CODE&gt; and can be used to load remote classes
                  and jar files in the VM of the agent.
                  &lt;p&gt;&lt;STRONG&gt;Note - &lt;/STRONG&gt; The &lt;CODE&gt;MLet&lt;/CODE&gt; class loader uses the {@link javax.management.MBeanServerFactory#getClassLoaderRepository(javax.management.MBeanServer)}to load classes that could not be found in the loaded jar files.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="135"/>
            <declaration name="server" type="MBeanServer" line="136"/>
            <javadoc line="136">
                The reference to the MBean server.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="mletList" type="List&lt;MLetContent&gt;" line="141"/>
            <javadoc line="141">
                The list of instances of the &lt;CODE&gt;MLetContent&lt;/CODE&gt;
                  class found at the specified URL.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="libraryDirectory" type="String" line="147"/>
            <javadoc line="147">
                The directory used for storing libraries locally before they are loaded.                
            </javadoc>
            <declaration name="mletObjectName" type="ObjectName" line="151"/>
            <javadoc line="151">
                The object name of the MLet Service.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="myUrls" type="URL[]" line="156"/>
            <javadoc line="156">
                The URLs of the MLet Service.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="currentClr" type="ClassLoaderRepository" line="161"/>
            <javadoc line="161">
                What ClassLoaderRepository, if any, to use if this MLet
                  doesn&apos;t find an asked-for class.                
            </javadoc>
            <declaration name="delegateToCLR" type="boolean" line="166"/>
            <javadoc line="166">
                True if we should consult the {@link ClassLoaderRepository}when we do not find a class ourselves.                
            </javadoc>
            <declaration name="primitiveClasses" type="Map&lt;String,Class&lt;?&gt;&gt;" line="170"/>
            <javadoc line="170">
                objects maps from primitive classes to primitive object classes.                
            </javadoc>
            <scope line="174"/>
            <javadoc line="184">
                Constructs a new MLet using the default delegation parent ClassLoader.                
            </javadoc>
            <method name="MLet" type="constructor" line="187"/>
            <javadoc line="190">
                Constructs a new MLet for the specified URLs using the default
                  delegation parent ClassLoader.  The URLs will be searched in
                  the order specified for classes and resources after first
                  searching in the parent class loader.                
                <param>
                    urls  The URLs from which to load classes and resources.                    
                </param>
            </javadoc>
            <method name="MLet" type="constructor" line="197">
                <params>
                    <param name="urls" type="URL[]"/>
                </params>
            </method>
            <javadoc line="200">
                Constructs a new MLet for the given URLs. The URLs will be
                  searched in the order specified for classes and resources
                  after first searching in the specified parent class loader.
                  The parent argument will be used as the parent class loader
                  for delegation.                
                <param>
                    urls  The URLs from which to load classes and resources.                    
                </param>
                <param>
                    parent The parent class loader for delegation.                    
                </param>
            </javadoc>
            <method name="MLet" type="constructor" line="209">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="212">
                Constructs a new MLet for the specified URLs, parent class
                  loader, and URLStreamHandlerFactory. The parent argument will
                  be used as the parent class loader for delegation. The factory
                  argument will be used as the stream handler factory to obtain
                  protocol handlers when creating new URLs.                
                <param>
                    urls  The URLs from which to load classes and resources.                    
                </param>
                <param>
                    parent The parent class loader for delegation.                    
                </param>
                <param>
                    factory  The URLStreamHandlerFactory to use when creating URLs.                    
                </param>
            </javadoc>
            <method name="MLet" type="constructor" line="222">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                    <param name="factory" type="URLStreamHandlerFactory"/>
                </params>
            </method>
            <javadoc line="225">
                Constructs a new MLet for the specified URLs using the default
                  delegation parent ClassLoader.  The URLs will be searched in
                  the order specified for classes and resources after first
                  searching in the parent class loader.                
                <param>
                    urls  The URLs from which to load classes and resources.                    
                </param>
                <param>
                    delegateToCLR  True if, when a class is not found in
                      either the parent ClassLoader or the URLs, the MLet should delegate
                      to its containing MBeanServer's {@link ClassLoaderRepository}.                    
                </param>
            </javadoc>
            <method name="MLet" type="constructor" line="235">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="delegateToCLR" type="boolean"/>
                </params>
            </method>
            <javadoc line="239">
                Constructs a new MLet for the given URLs. The URLs will be
                  searched in the order specified for classes and resources
                  after first searching in the specified parent class loader.
                  The parent argument will be used as the parent class loader
                  for delegation.                
                <param>
                    urls  The URLs from which to load classes and resources.                    
                </param>
                <param>
                    parent The parent class loader for delegation.                    
                </param>
                <param>
                    delegateToCLR  True if, when a class is not found in
                      either the parent ClassLoader or the URLs, the MLet should delegate
                      to its containing MBeanServer's {@link ClassLoaderRepository}.                    
                </param>
            </javadoc>
            <method name="MLet" type="constructor" line="251">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                    <param name="delegateToCLR" type="boolean"/>
                </params>
            </method>
            <javadoc line="255">
                Constructs a new MLet for the specified URLs, parent class
                  loader, and URLStreamHandlerFactory. The parent argument will
                  be used as the parent class loader for delegation. The factory
                  argument will be used as the stream handler factory to obtain
                  protocol handlers when creating new URLs.                
                <param>
                    urls  The URLs from which to load classes and resources.                    
                </param>
                <param>
                    parent The parent class loader for delegation.                    
                </param>
                <param>
                    factory  The URLStreamHandlerFactory to use when creating URLs.                    
                </param>
                <param>
                    delegateToCLR  True if, when a class is not found in
                      either the parent ClassLoader or the URLs, the MLet should delegate
                      to its containing MBeanServer's {@link ClassLoaderRepository}.                    
                </param>
            </javadoc>
            <method name="MLet" type="constructor" line="268">
                <params>
                    <param name="urls" type="URL[]"/>
                    <param name="parent" type="ClassLoader"/>
                    <param name="factory" type="URLStreamHandlerFactory"/>
                    <param name="delegateToCLR" type="boolean"/>
                </params>
            </method>
            <method name="init" type="void" line="272">
                <params>
                    <param name="delegateToCLR" type="boolean"/>
                </params>
                <scope line="274"/>
                <scope line="278"/>
            </method>
            <javadoc line="281">
                Appends the specified URL to the list of URLs to search for classes and
                  resources.                
            </javadoc>
            <method name="addURL" type="void" line="285">
                <params>
                    <param name="url" type="URL"/>
                </params>
            </method>
            <javadoc line="288">
                Appends the specified URL to the list of URLs to search for classes and
                  resources.                
                <exception>
                    ServiceNotFoundException The specified URL is malformed.                    
                </exception>
            </javadoc>
            <method name="addURL" type="void" line="293">
                <params>
                    <param name="url" type="String"/>
                </params>
                <scope line="294">
                    <declaration name="ur" type="URL" line="295"/>
                </scope>
                <scope line="298">
                    <scope line="299"/>
                </scope>
            </method>
            <javadoc line="305">
                Returns the search path of URLs for loading classes and resources.
                  This includes the original list of URLs specified to the constructor,
                  along with any URLs subsequently appended by the addURL() method.                
            </javadoc>
            <method name="getURLs" type="URL[]" line="310"/>
            <javadoc line="313">
                Loads a text file containing MLET tags that define the MBeans to
                  be added to the MBean server. The location of the text file is specified by
                  a URL. The MBeans specified in the MLET file will be instantiated and
                  registered in the MBean server.                
                <param>
                    url The URL of the text file to be loaded as URL object.                    
                </param>
                <return>
                    A set containing one entry per MLET tag in the m-let text file loaded.
                      Each entry specifies either the ObjectInstance for the created MBean, or a throwable object
                      (that is, an error or an exception) if the MBean could not be created.                    
                </return>
                <exception>
                    ServiceNotFoundException One of the following errors has occurred: The m-let text file does
                      not contain an MLET tag, the m-let text file is not found, a mandatory
                      attribute of the MLET tag is not specified, the value of url is
                      null.                    
                </exception>
                <exception>
                    IllegalStateException MLet MBean is not registered with an MBeanServer.                    
                </exception>
            </javadoc>
            <method name="getMBeansFromURL" type="Set<Object>" line="328">
                <params>
                    <param name="url" type="URL"/>
                </params>
                <scope line="329"/>
            </method>
            <javadoc line="334">
                Loads a text file containing MLET tags that define the MBeans to
                  be added to the MBean server. The location of the text file is specified by
                  a URL. The MBeans specified in the MLET file will be instantiated and
                  registered in the MBean server.                
                <param>
                    url The URL of the text file to be loaded as String object.                    
                </param>
                <return>
                    A set containing one entry per MLET tag in the m-let
                      text file loaded.  Each entry specifies either the
                      ObjectInstance for the created MBean, or a throwable object
                      (that is, an error or an exception) if the MBean could not be
                      created.                    
                </return>
                <exception>
                    ServiceNotFoundException One of the following
                      errors has occurred: The m-let text file does not contain an
                      MLET tag, the m-let text file is not found, a mandatory
                      attribute of the MLET tag is not specified, the url is
                      malformed.                    
                </exception>
                <exception>
                    IllegalStateException MLet MBean is not registered
                      with an MBeanServer.                    
                </exception>
            </javadoc>
            <method name="getMBeansFromURL" type="Set<Object>" line="353">
                <params>
                    <param name="url" type="String"/>
                </params>
                <declaration name="mth" type="String" line="354"/>
                <scope line="355"/>
                <scope line="358"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="368">
                    <declaration name="parser" type="MLetParser" line="369"/>
                </scope>
                <scope line="372">
                    <declaration name="msg" type="String" line="373"/>
                </scope>
                <scope line="377">
                    <declaration name="msg" type="String" line="378"/>
                </scope>
                <declaration name="mbeans" type="Set&lt;Object&gt;" line="382"/>
                <scope line="383">
                    <declaration name="code" type="String" line="384"/>
                    <scope line="385">
                        <scope line="386"/>
                    </scope>
                    <declaration name="name" type="String" line="390"/>
                    <declaration name="codebase" type="URL" line="391"/>
                    <declaration name="version" type="String" line="392"/>
                    <declaration name="serName" type="String" line="393"/>
                    <declaration name="jarFiles" type="String" line="394"/>
                    <declaration name="documentBase" type="URL" line="395"/>
                    <scope line="396">
                        <declaration name="strb" type="StringBuilder" line="397"/>
                    </scope>
                    <declaration name="st" type="StringTokenizer" line="400"/>
                    <scope line="401">
                        <declaration name="tok" type="String" line="402"/>
                        <scope line="403"/>
                        <scope line="406"/>
                        <scope line="409"/>
                        <scope line="414">
                            <scope line="415"/>
                        </scope>
                        <scope line="419"/>
                    </scope>
                    <declaration name="o" type="Object" line="422"/>
                    <declaration name="objInst" type="ObjectInstance" line="423"/>
                    <scope line="424">
                        <declaration name="msg" type="String" line="425"/>
                    </scope>
                    <scope line="430">
                        <declaration name="msg" type="String" line="431"/>
                    </scope>
                    <scope line="436">
                        <scope line="437">
                            <declaration name="signat" type="List&lt;String&gt;" line="438"/>
                            <declaration name="stringPars" type="List&lt;String&gt;" line="439"/>
                            <declaration name="objectPars" type="List&lt;Object&gt;" line="440"/>
                            <scope line="441"/>
                            <scope line="444">
                                <scope line="445"/>
                                <scope line="448"/>
                            </scope>
                            <scope line="452">
                                <declaration name="parms" type="Object[]" line="453"/>
                                <declaration name="signature" type="String[]" line="454"/>
                                <scope line="456">
                                    <declaration name="strb" type="StringBuilder" line="457"/>
                                    <scope line="458"/>
                                </scope>
                                <scope line="463"/>
                                <scope line="466"/>
                            </scope>
                        </scope>
                        <scope line="471">
                            <scope line="473"/>
                            <scope line="476"/>
                        </scope>
                    </scope>
                    <scope line="482"/>
                    <scope line="487"/>
                    <scope line="492"/>
                    <scope line="497"/>
                    <scope line="502"/>
                    <scope line="507"/>
                    <scope line="512"/>
                    <scope line="517"/>
                    <scope line="522"/>
                    <scope line="527"/>
                </scope>
            </method>
            <javadoc line="536">
                Gets the current directory used by the library loader for
                  storing native libraries before they are loaded into memory.                
                <return>
                    The current directory used by the library loader.                    
                </return>
                <see>
                    #setLibraryDirectory                    
                </see>
                <throws>
                    UnsupportedOperationException if this implementation
                      does not support storing native libraries in this way.                    
                </throws>
            </javadoc>
            <method name="getLibraryDirectory" type="String" line="544"/>
            <javadoc line="547">
                Sets the directory used by the library loader for storing
                  native libraries before they are loaded into memory.                
                <param>
                    libdir The directory used by the library loader.                    
                </param>
                <see>
                    #getLibraryDirectory                    
                </see>
                <throws>
                    UnsupportedOperationException if this implementation
                      does not support storing native libraries in this way.                    
                </throws>
            </javadoc>
            <method name="setLibraryDirectory" type="void" line="555">
                <params>
                    <param name="libdir" type="String"/>
                </params>
            </method>
            <javadoc line="558">
                Allows the m-let to perform any operations it needs before
                  being registered in the MBean server. If the ObjectName is
                  null, the m-let provides a default name for its registration
                  &amp;lt;defaultDomain&amp;gt;:type=MLet                
                <param>
                    server The MBean server in which the m-let will be registered.                    
                </param>
                <param>
                    name The object name of the m-let.                    
                </param>
                <return>
                    The name of the m-let registered.                    
                </return>
                <exception>
                    java.lang.Exception This exception should be caught by the MBean server and re-thrown
                      as an MBeanRegistrationException.                    
                </exception>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="569">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="571"/>
            </method>
            <javadoc line="577">
                Allows the m-let to perform any operations needed after having been
                  registered in the MBean server or after the registration has failed.                
                <param>
                    registrationDone Indicates whether or not the m-let has
                      been successfully registered in the MBean server. The value
                      false means that either the registration phase has failed.                    
                </param>
            </javadoc>
            <method name="postRegister" type="void" line="584">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <javadoc line="586">
                Allows the m-let to perform any operations it needs before being unregistered
                  by the MBean server.                
                <exception>
                    java.langException This exception should be caught
                      by the MBean server and re-thrown as an
                      MBeanRegistrationException.                    
                </exception>
            </javadoc>
            <method name="preDeregister" type="void" line="593"/>
            <javadoc line="595">
                Allows the m-let to perform any operations needed after having been
                  unregistered in the MBean server.                
            </javadoc>
            <method name="postDeregister" type="void" line="599"/>
            <javadoc line="601">
                &lt;p&gt;Save this MLet&apos;s contents to the given {@link ObjectOutput}.
                  Not all implementations support this method.  Those that do not
                  throw {@link UnsupportedOperationException}.  A subclass may
                  override this method to support it or to change the format of
                  the written data.&lt;/p&gt;
                  &lt;p&gt;The format of the written data is not specified, but if
                  an implementation supports {@link #writeExternal} it must
                  also support {@link #readExternal} in such a way that what is
                  written by the former can be read by the latter.&lt;/p&gt;                
                <param>
                    out The object output stream to write to.                    
                </param>
                <exception>
                    IOException If a problem occurred while writing.                    
                </exception>
                <exception>
                    UnsupportedOperationException If this
                      implementation does not support this operation.                    
                </exception>
            </javadoc>
            <method name="writeExternal" type="void" line="616">
                <params>
                    <param name="out" type="ObjectOutput"/>
                </params>
            </method>
            <javadoc line="619">
                &lt;p&gt;Restore this MLet&apos;s contents from the given {@link ObjectInput}.
                  Not all implementations support this method.  Those that do not
                  throw {@link UnsupportedOperationException}.  A subclass may
                  override this method to support it or to change the format of
                  the read data.&lt;/p&gt;
                  &lt;p&gt;The format of the read data is not specified, but if an
                  implementation supports {@link #readExternal} it must also
                  support {@link #writeExternal} in such a way that what is
                  written by the latter can be read by the former.&lt;/p&gt;                
                <param>
                    in The object input stream to read from.                    
                </param>
                <exception>
                    IOException if a problem occurred while reading.                    
                </exception>
                <exception>
                    ClassNotFoundException if the class for the object
                      being restored cannot be found.                    
                </exception>
                <exception>
                    UnsupportedOperationException if this
                      implementation does not support this operation.                    
                </exception>
            </javadoc>
            <method name="readExternal" type="void" line="636">
                <params>
                    <param name="in" type="ObjectInput"/>
                </params>
            </method>
            <javadoc line="639">
                &lt;p&gt;Load a class, using the given {@link ClassLoaderRepository} if
                  the class is not found in this MLet&apos;s URLs.  The given
                  ClassLoaderRepository can be null, in which case a {@link ClassNotFoundException} occurs immediately if the class is not
                  found in this MLet&apos;s URLs.&lt;/p&gt;                
                <param>
                    name The name of the class we want to load.                    
                </param>
                <param>
                    clr  The ClassLoaderRepository that will be used to search
                      for the given class, if it is not found in this
                      ClassLoader.  May be null.                    
                </param>
                <return>
                    The resulting Class object.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be
                      found in this ClassLoader nor in the given
                      ClassLoaderRepository.                    
                </exception>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="653">
                <params>
                    <param name="name" type="String"/>
                    <param name="clr" type="ClassLoaderRepository"/>
                </params>
                <declaration name="before" type="ClassLoaderRepository" line="654"/>
                <scope line="655"/>
                <scope line="659"/>
            </method>
            <javadoc line="663">
                This is the main method for class loaders that is being redefined.                
                <param>
                    name The name of the class.                    
                </param>
                <return>
                    The resulting Class object.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be
                      found.                    
                </exception>
            </javadoc>
            <method name="findClass" type="Class<?>" line="670">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="673">
                Called by {@link MLet#findClass(java.lang.String)}.                
                <param>
                    name The name of the class that we want to load/find.                    
                </param>
                <param>
                    clr The ClassLoaderRepository that can be used to search
                      for the given class. This parameter is
                      <code>null</code> when called from within the{@link javax.management.MBeanServerFactory#getClassLoaderRepository(javax.management.MBeanServer) Class Loader Repository}.                    
                </param>
                <exception>
                    ClassNotFoundException The specified class could not be
                      found.                    
                </exception>
            </javadoc>
            <method name="findClass" type="Class<?>" line="682">
                <params>
                    <param name="name" type="String"/>
                    <param name="clr" type="ClassLoaderRepository"/>
                </params>
                <declaration name="c" type="Class&lt;?&gt;" line="683"/>
                <scope line="685">
                    <scope line="687"/>
                </scope>
                <scope line="691">
                    <scope line="692"/>
                </scope>
                <scope line="696">
                    <scope line="697">
                        <scope line="698"/>
                        <scope line="702"/>
                    </scope>
                    <scope line="706">
                        <scope line="707"/>
                    </scope>
                </scope>
                <scope line="712"/>
            </method>
            <javadoc line="718">
                Returns the absolute path name of a native library. The VM
                  invokes this method to locate the native libraries that belong
                  to classes loaded with this class loader. Libraries are
                  searched in the JAR files using first just the native library
                  name and if not found the native library name together with
                  the architecture-specific path name
                  (&lt;code&gt;OSName/OSArch/OSVersion/lib/nativelibname&lt;/code&gt;), i.e.
                  &lt;p&gt;
                  the library stat on Solaris SPARC 5.7 will be searched in the JAR file as:
                  &lt;OL&gt;
                  &lt;LI&gt;libstat.so
                  &lt;LI&gt;SunOS/sparc/5.7/lib/libstat.so
                  &lt;/OL&gt;
                  the library stat on Windows NT 4.0 will be searched in the JAR file as:
                  &lt;OL&gt;
                  &lt;LI&gt;stat.dll
                  &lt;LI&gt;WindowsNT/x86/4.0/lib/stat.dll
                  &lt;/OL&gt;
                  &lt;p&gt;More specifically, let &lt;em&gt;{@code nativelibname}&lt;/em&gt; be the result of{@link System#mapLibraryName(java.lang.String)System.mapLibraryName}{@code (libname)}.  Then the following names are
                  searched in the JAR files, in order:&lt;br&gt;
                  &lt;em&gt;{@code nativelibname}&lt;/em&gt;&lt;br&gt;{@code &lt;os.name&gt;/&lt;os.arch&gt;/&lt;os.version&gt;/lib/}&lt;em&gt;{@code nativelibname}&lt;/em&gt;&lt;br&gt;
                  where {@code &lt;X&gt;} means {@code System.getProperty(X)} with any
                  spaces in the result removed, and {@code /} stands for the
                  file separator character ({@link File#separator}).
                  &lt;p&gt;
                  If this method returns &lt;code&gt;null&lt;/code&gt;, i.e. the libraries
                  were not found in any of the JAR files loaded with this class
                  loader, the VM searches the library along the path specified
                  as the &lt;code&gt;java.library.path&lt;/code&gt; property.                
                <param>
                    libname The library name.                    
                </param>
                <return>
                    The absolute path of the native library.                    
                </return>
            </javadoc>
            <method name="findLibrary" type="String" line="751">
                <params>
                    <param name="libname" type="String"/>
                </params>
                <declaration name="abs_path" type="String" line="752"/>
                <declaration name="mth" type="String" line="753"/>
                <declaration name="nativelibname" type="String" line="754"/>
                <scope line="755"/>
                <scope line="758"/>
                <scope line="762">
                    <scope line="763"/>
                </scope>
                <scope line="769"/>
                <scope line="773">
                    <scope line="774"/>
                </scope>
                <scope line="779"/>
            </method>
            <method name="getTmpDir" type="String" line="785">
                <declaration name="tmpDir" type="String" line="786"/>
                <declaration name="tmpFile" type="File" line="788"/>
                <scope line="789">
                    <declaration name="tmpDirFile" type="File" line="792"/>
                </scope>
                <scope line="796"/>
                <scope line="800">
                    <scope line="801">
                        <scope line="802">
                            <declaration name="deleted" type="boolean" line="803"/>
                            <scope line="804"/>
                        </scope>
                        <scope line="808"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="814">
                Search the specified native library in any of the JAR files
                  loaded by this classloader.  If the library is found copy it
                  into the library directory and return the absolute path.  If
                  the library is not found then return null.                
            </javadoc>
            <method name="loadLibraryAsResource" type="String" line="820">
                <params>
                    <param name="libname" type="String"/>
                </params>
                <scope line="821">
                    <declaration name="is" type="InputStream" line="822"/>
                    <scope line="823">
                        <scope line="824">
                            <declaration name="directory" type="File" line="825"/>
                            <declaration name="file" type="File" line="827"/>
                            <declaration name="fileOutput" type="FileOutputStream" line="829"/>
                            <scope line="830">
                                <declaration name="buf" type="byte[]" line="831"/>
                                <declaration name="n" type="int" line="832"/>
                                <scope line="833"/>
                            </scope>
                            <scope line="837"/>
                            <scope line="840"/>
                        </scope>
                        <scope line="844"/>
                    </scope>
                </scope>
                <scope line="849"/>
            </method>
            <javadoc line="855">
                Removes any white space from a string. This is used to
                  convert strings such as &quot;Windows NT&quot; to &quot;WindowsNT&quot;.                
            </javadoc>
            <method name="removeSpace" type="String" line="859">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="862">
                &lt;p&gt;This method is to be overridden when extending this service to
                  support caching and versioning.  It is called from {@link #getMBeansFromURL getMBeansFromURL} when the version,
                  codebase, and jarfile have been extracted from the MLet file,
                  and can be used to verify that it is all right to load the
                  given MBean, or to replace the given URL with a different one.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method returns
                  &lt;code&gt;codebase&lt;/code&gt; unchanged.&lt;/p&gt;                
                <param>
                    version The version number of the <CODE>.jar</CODE>
                      file stored locally.                    
                </param>
                <param>
                    codebase The base URL of the remote <CODE>.jar</CODE> file.                    
                </param>
                <param>
                    jarfile The name of the <CODE>.jar</CODE> file to be loaded.                    
                </param>
                <param>
                    mlet The <CODE>MLetContent</CODE> instance that
                      represents the <CODE>MLET</CODE> tag.                    
                </param>
                <return>
                    the codebase to use for the loaded MBean.  The returned
                      value should not be null.                    
                </return>
                <exception>
                    Exception if the MBean is not to be loaded for some
                      reason.  The exception will be added to the set returned by{@link #getMBeansFromURL getMBeansFromURL}.                    
                </exception>
            </javadoc>
            <method name="check" type="URL" line="881">
                <params>
                    <param name="version" type="String"/>
                    <param name="codebase" type="URL"/>
                    <param name="jarfile" type="String"/>
                    <param name="mlet" type="MLetContent"/>
                </params>
            </method>
            <javadoc line="884">
                Loads the serialized object specified by the &lt;CODE&gt;OBJECT&lt;/CODE&gt;
                  attribute of the &lt;CODE&gt;MLET&lt;/CODE&gt; tag.                
                <param>
                    codebase The <CODE>codebase</CODE>.                    
                </param>
                <param>
                    filename The name of the file containing the serialized object.                    
                </param>
                <return>
                    The serialized object.                    
                </return>
                <exception>
                    ClassNotFoundException The specified serialized
                      object could not be found.                    
                </exception>
                <exception>
                    IOException An I/O error occurred while loading
                      serialized object.                    
                </exception>
            </javadoc>
            <method name="loadSerializedObject" type="Object" line="895">
                <params>
                    <param name="codebase" type="URL"/>
                    <param name="filename" type="String"/>
                </params>
                <scope line="896"/>
                <scope line="899"/>
                <declaration name="is" type="InputStream" line="902"/>
                <scope line="903">
                    <scope line="904">
                        <declaration name="ois" type="ObjectInputStream" line="905"/>
                        <declaration name="serObject" type="Object" line="906"/>
                    </scope>
                    <scope line="910">
                        <scope line="911"/>
                    </scope>
                    <scope line="916">
                        <scope line="917"/>
                    </scope>
                </scope>
                <scope line="923">
                    <scope line="924"/>
                </scope>
            </method>
            <javadoc line="930">
                Converts the String value of the constructor&apos;s parameter to
                  a basic Java object with the type of the parameter.                
            </javadoc>
            <method name="constructParameter" type="Object" line="934">
                <params>
                    <param name="param" type="String"/>
                    <param name="type" type="String"/>
                </params>
                <declaration name="c" type="Class&lt;?&gt;" line="935"/>
                <scope line="936">
                    <scope line="937">
                        <declaration name="cons" type="Constructor&lt;?&gt;" line="938"/>
                        <declaration name="oo" type="Object[]" line="939"/>
                    </scope>
                    <scope line="943"/>
                </scope>
            </method>
            <method name="setMBeanServer" type="void" line="957">
                <params>
                    <param name="server" type="MBeanServer"/>
                </params>
                <anonymous_class line="959">
                    <method name="run" type="ClassLoaderRepository" line="960"/>
                </anonymous_class>
                <declaration name="act" type="PrivilegedAction&lt;ClassLoaderRepository&gt;" line="959"/>
            </method>
        </class>
    </source>