<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.loading">
        <import package="javax.management.MBeanServer"/>
        <interface name="ClassLoaderRepository">
            <javadoc line="3">
                &lt;p&gt;Instances of this interface are used to keep the list of ClassLoaders
                  registered in an MBean Server.
                  They provide the necessary methods to load classes using the registered
                  ClassLoaders.&lt;/p&gt;
                  &lt;p&gt;The first ClassLoader in a &lt;code&gt;ClassLoaderRepository&lt;/code&gt; is
                  always the MBean Server&apos;s own ClassLoader.&lt;/p&gt;
                  &lt;p&gt;When an MBean is registered in an MBean Server, if it is of a
                  subclass of {@link java.lang.ClassLoader} and if it does not
                  implement the interface {@link PrivateClassLoader}, it is added to
                  the end of the MBean Server&apos;s &lt;code&gt;ClassLoaderRepository&lt;/code&gt;.
                  If it is subsequently unregistered from the MBean Server, it is
                  removed from the &lt;code&gt;ClassLoaderRepository&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The order of MBeans in the &lt;code&gt;ClassLoaderRepository&lt;/code&gt; is
                  significant.  For any two MBeans &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; in the
                  &lt;code&gt;ClassLoaderRepository&lt;/code&gt;, &lt;em&gt;X&lt;/em&gt; must appear before
                  &lt;em&gt;Y&lt;/em&gt; if the registration of &lt;em&gt;X&lt;/em&gt; was completed before
                  the registration of &lt;em&gt;Y&lt;/em&gt; started.  If &lt;em&gt;X&lt;/em&gt; and
                  &lt;em&gt;Y&lt;/em&gt; were registered concurrently, their order is
                  indeterminate.  The registration of an MBean corresponds to the
                  call to {@link MBeanServer#registerMBean} or one of the {@link MBeanServer}&lt;code&gt;.createMBean&lt;/code&gt; methods.&lt;/p&gt;                
                <see>
                    javax.management.MBeanServerFactory                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="loadClass" type="Class&lt;?&gt;" line="28"/>
            <javadoc line="28">
                &lt;p&gt;Load the given class name through the list of class loaders.
                  Each ClassLoader in turn from the ClassLoaderRepository is
                  asked to load the class via its {@link ClassLoader#loadClass(String)} method.  If it successfully
                  returns a {@link Class} object, that is the result of this
                  method.  If it throws a {@link ClassNotFoundException}, the
                  search continues with the next ClassLoader.  If it throws
                  another exception, the exception is propagated from this
                  method.  If the end of the list is reached, a {@link ClassNotFoundException} is thrown.&lt;/p&gt;                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be
                      found.                    
                </exception>
            </javadoc>
            <method name="loadClassWithout" type="Class&lt;?&gt;" line="43"/>
            <javadoc line="43">
                &lt;p&gt;Load the given class name through the list of class loaders,
                  excluding the given one.  Each ClassLoader in turn from the
                  ClassLoaderRepository, except &lt;code&gt;exclude&lt;/code&gt;, is asked to
                  load the class via its {@link ClassLoader#loadClass(String)}method.  If it successfully returns a {@link Class} object,
                  that is the result of this method.  If it throws a {@link ClassNotFoundException}, the search continues with the next
                  ClassLoader.  If it throws another exception, the exception is
                  propagated from this method.  If the end of the list is
                  reached, a {@link ClassNotFoundException} is thrown.&lt;/p&gt;
                  &lt;p&gt;Be aware that if a ClassLoader in the ClassLoaderRepository
                  calls this method from its {@link ClassLoader#loadClass(String)loadClass} method, it exposes itself to a deadlock if another
                  ClassLoader in the ClassLoaderRepository does the same thing at
                  the same time.  The {@link #loadClassBefore} method is
                  recommended to avoid the risk of deadlock.&lt;/p&gt;                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <param>
                    exclude The class loader to be excluded.  May be null,
                      in which case this method is equivalent to {@link #loadClassloadClass(className)}.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not
                      be found.                    
                </exception>
            </javadoc>
            <method name="loadClassBefore" type="Class&lt;?&gt;" line="65"/>
            <javadoc line="65">
                &lt;p&gt;Load the given class name through the list of class loaders,
                  stopping at the given one.  Each ClassLoader in turn from the
                  ClassLoaderRepository is asked to load the class via its {@link ClassLoader#loadClass(String)} method.  If it successfully
                  returns a {@link Class} object, that is the result of this
                  method.  If it throws a {@link ClassNotFoundException}, the
                  search continues with the next ClassLoader.  If it throws
                  another exception, the exception is propagated from this
                  method.  If the search reaches &lt;code&gt;stop&lt;/code&gt; or the end of
                  the list, a {@link ClassNotFoundException} is thrown.&lt;/p&gt;
                  &lt;p&gt;Typically this method is called from the {@link ClassLoader#loadClass(String) loadClass} method of
                  &lt;code&gt;stop&lt;/code&gt;, to consult loaders that appear before it
                  in the &lt;code&gt;ClassLoaderRepository&lt;/code&gt;.  By stopping the
                  search as soon as &lt;code&gt;stop&lt;/code&gt; is reached, a potential
                  deadlock with concurrent class loading is avoided.&lt;/p&gt;                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <param>
                    stop The class loader at which to stop.  May be null, in
                      which case this method is equivalent to {@link #loadClass(String)loadClass(className)}.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not
                      be found.                    
                </exception>
            </javadoc>
        </interface>
    </source>