<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.loading">
        <import package="com.sun.jmx.defaults.JmxProperties.MBEANSERVER_LOGGER"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerFactory"/>
        <class name="DefaultLoaderRepository" line="35">
            <javadoc line="35">
                &lt;p&gt;Keeps the list of Class Loaders registered in the MBean Server.
                  It provides the necessary methods to load classes using the registered
                  Class Loaders.&lt;/p&gt;
                  &lt;p&gt;This deprecated class is maintained for compatibility.  In
                  previous versions of JMX, there was one
                  &lt;code&gt;DefaultLoaderRepository&lt;/code&gt; shared by all MBean servers.
                  As of JMX 1.2, that functionality is approximated by using {@link MBeanServerFactory#findMBeanServer} to find all known MBean
                  servers, and consulting the {@link ClassLoaderRepository} of each
                  one.  It is strongly recommended that code referencing
                  &lt;code&gt;DefaultLoaderRepository&lt;/code&gt; be rewritten.&lt;/p&gt;                
                <deprecated>
                    Use{@link javax.management.MBeanServer#getClassLoaderRepository()}}
                      instead.                    
                </deprecated>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="58">
                Go through the list of class loaders and try to load the requested
                  class.
                  The method will stop as soon as the class is found. If the class
                  is not found the method will throw a &lt;CODE&gt;ClassNotFoundException&lt;/CODE&gt;
                  exception.                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be
                      found.                    
                </exception>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="73">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="80">
                Go through the list of class loaders but exclude the given
                  class loader, then try to load
                  the requested class.
                  The method will stop as soon as the class is found. If the class
                  is not found the method will throw a &lt;CODE&gt;ClassNotFoundException&lt;/CODE&gt;
                  exception.                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <param>
                    loader The class loader to be excluded.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be
                      found.                    
                </exception>
            </javadoc>
            <method name="loadClassWithout" type="Class<?>" line="98">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="load" type="Class<?>" line="106">
                <params>
                    <param name="without" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="115">
                    OK : Try with next one...                    
                </comment>
                <declaration name="mbsList" type="List&lt;MBeanServer&gt;" line="107"/>
                <scope line="109">
                    <declaration name="clr" type="ClassLoaderRepository" line="110"/>
                    <scope line="111"/>
                    <scope line="113"/>
                </scope>
            </method>
        </class>
    </source>