<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.loading">
        <import package="java.net.URL"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Set"/>
        <import package="java.util.Enumeration"/>
        <import package="javax.management"/>
        <interface name="MLetMBean">
            <javadoc line="8">
                Exposes the remote management interface of the MLet
                  MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getMBeansFromURL" type="Set<Object>" line="14"/>
            <javadoc line="14">
                Loads a text file containing MLET tags that define the MBeans
                  to be added to the MBean server. The location of the text file is
                  specified by a URL. The text file is read using the UTF-8
                  encoding. The MBeans specified in the MLET file will be
                  instantiated and registered in the MBean server.                
                <param>
                    url The URL of the text file to be loaded as String object.                    
                </param>
                <return>
                    A set containing one entry per MLET tag in the m-let
                      text file loaded.  Each entry specifies either the
                      ObjectInstance for the created MBean, or a throwable object
                      (that is, an error or an exception) if the MBean could not be
                      created.                    
                </return>
                <exception>
                    ServiceNotFoundException One of the following errors
                      has occurred: The m-let text file does not contain an MLET tag,
                      the m-let text file is not found, a mandatory attribute of the
                      MLET tag is not specified, the value of url is malformed.                    
                </exception>
            </javadoc>
            <method name="getMBeansFromURL" type="Set<Object>" line="32"/>
            <javadoc line="32">
                Loads a text file containing MLET tags that define the MBeans
                  to be added to the MBean server. The location of the text file is
                  specified by a URL. The text file is read using the UTF-8
                  encoding. The MBeans specified in the MLET file will be
                  instantiated and registered in the MBean server.                
                <param>
                    url The URL of the text file to be loaded as URL object.                    
                </param>
                <return>
                    A set containing one entry per MLET tag in the m-let
                      text file loaded.  Each entry specifies either the
                      ObjectInstance for the created MBean, or a throwable object
                      (that is, an error or an exception) if the MBean could not be
                      created.                    
                </return>
                <exception>
                    ServiceNotFoundException One of the following errors
                      has occurred: The m-let text file does not contain an MLET tag,
                      the m-let text file is not found, a mandatory attribute of the
                      MLET tag is not specified, the value of url is null.                    
                </exception>
            </javadoc>
            <method name="addURL" type="void" line="50"/>
            <javadoc line="50">
                Appends the specified URL to the list of URLs to search for classes and
                  resources.                
                <param>
                    url the URL to add.                    
                </param>
            </javadoc>
            <method name="addURL" type="void" line="56"/>
            <javadoc line="56">
                Appends the specified URL to the list of URLs to search for classes and
                  resources.                
                <param>
                    url the URL to add.                    
                </param>
                <exception>
                    ServiceNotFoundException The specified URL is malformed.                    
                </exception>
            </javadoc>
            <method name="getURLs" type="URL[]" line="63"/>
            <javadoc line="63">
                Returns the search path of URLs for loading classes and resources.
                  This includes the original list of URLs specified to the constructor,
                  along with any URLs subsequently appended by the addURL() method.                
                <return>
                    the list of URLs.                    
                </return>
            </javadoc>
            <method name="getResource" type="URL" line="70"/>
            <javadoc line="70">
                Finds the resource with the given name.
                  A resource is some data (images, audio, text, etc) that can be accessed by class code in a way that is
                  independent of the location of the code.
                  The name of a resource is a &quot;/&quot;-separated path name that identifies the resource.                
                <param>
                    name The resource name                    
                </param>
                <return>
                    An URL for reading the resource, or null if the resource could not be found or the caller doesn't have adequate privileges to get the
                      resource.                    
                </return>
            </javadoc>
            <method name="getResourceAsStream" type="InputStream" line="80"/>
            <javadoc line="80">
                Returns an input stream for reading the specified resource. The search order is described in the documentation for
                  getResource(String).                
                <param>
                    name  The resource name                    
                </param>
                <return>
                    An input stream for reading the resource, or null if the resource could not be found                    
                </return>
            </javadoc>
            <method name="getResources" type="Enumeration<URL>" line="87"/>
            <javadoc line="87">
                Finds all the resources with the given name. A resource is some
                  data (images, audio, text, etc) that can be accessed by class
                  code in a way that is independent of the location of the code.
                  The name of a resource is a &quot;/&quot;-separated path name that
                  identifies the resource.                
                <param>
                    name The  resource name.                    
                </param>
                <return>
                    An enumeration of URL to the resource. If no resources
                      could be found, the enumeration will be empty. Resources that
                      cannot be accessed will not be in the enumeration.                    
                </return>
                <exception>
                    IOException if an I/O exception occurs when
                      searching for resources.                    
                </exception>
            </javadoc>
            <method name="getLibraryDirectory" type="String" line="101"/>
            <javadoc line="101">
                Gets the current directory used by the library loader for
                  storing native libraries before they are loaded into memory.                
                <return>
                    The current directory used by the library loader.                    
                </return>
                <see>
                    #setLibraryDirectory                    
                </see>
                <throws>
                    UnsupportedOperationException if this implementation
                      does not support storing native libraries in this way.                    
                </throws>
            </javadoc>
            <method name="setLibraryDirectory" type="void" line="110"/>
            <javadoc line="110">
                Sets the directory used by the library loader for storing
                  native libraries before they are loaded into memory.                
                <param>
                    libdir The directory used by the library loader.                    
                </param>
                <see>
                    #getLibraryDirectory                    
                </see>
                <throws>
                    UnsupportedOperationException if this implementation
                      does not support storing native libraries in this way.                    
                </throws>
            </javadoc>
        </interface>
    </source>