<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.mbeanserver.Introspector"/>
        <class name="MBeanAttributeInfo" line="6">
            <extends class="MBeanFeatureInfo"/>
            <implements interface="Cloneable"/>
            <javadoc line="6">
                Describes an MBean attribute exposed for management.  Instances of
                  this class are immutable.  Subclasses may be mutable but this is
                  not recommended.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="13"/>
            <scope line="14">
                <declaration name="uid" type="long" line="15"/>
                <scope line="16">
                    <declaration name="act" type="GetPropertyAction" line="17"/>
                    <declaration name="form" type="String" line="18"/>
                </scope>
                <scope line="21"/>
            </scope>
            <declaration name="NO_ATTRIBUTES" type="MBeanAttributeInfo[]" line="25"/>
            <declaration name="attributeType" type="String" line="26"/>
            <javadoc line="26">
                @serial The actual attribute type.                
            </javadoc>
            <declaration name="isWrite" type="boolean" line="30"/>
            <javadoc line="30">
                @serial The attribute write right.                
            </javadoc>
            <declaration name="isRead" type="boolean" line="34"/>
            <javadoc line="34">
                @serial The attribute read right.                
            </javadoc>
            <declaration name="is" type="boolean" line="38"/>
            <javadoc line="38">
                @serial Indicates if this method is a &quot;is&quot;                
            </javadoc>
            <javadoc line="42">
                Constructs an &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object.                
                <param>
                    name The name of the attribute.                    
                </param>
                <param>
                    type The type or class name of the attribute.                    
                </param>
                <param>
                    description A human readable description of the attribute.                    
                </param>
                <param>
                    isReadable True if the attribute has a getter method, false otherwise.                    
                </param>
                <param>
                    isWritable True if the attribute has a setter method, false otherwise.                    
                </param>
                <param>
                    isIs True if this attribute has an &quot;is&quot; getter, false otherwise.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code isIs} is true but{@code isReadable} is not, or if {@code isIs} is true and{@code type} is not {@code boolean} or {@code java.lang.Boolean}.
                      (New code should always use {@code boolean} rather than{@code java.lang.Boolean}.)                    
                </throws>
            </javadoc>
            <method name="MBeanAttributeInfo" type="constructor" line="53">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="String"/>
                    <param name="description" type="String"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                </params>
            </method>
            <javadoc line="56">
                Constructs an &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object.                
                <param>
                    name The name of the attribute.                    
                </param>
                <param>
                    type The type or class name of the attribute.                    
                </param>
                <param>
                    description A human readable description of the attribute.                    
                </param>
                <param>
                    isReadable True if the attribute has a getter method, false otherwise.                    
                </param>
                <param>
                    isWritable True if the attribute has a setter method, false otherwise.                    
                </param>
                <param>
                    isIs True if this attribute has an &quot;is&quot; getter, false otherwise.                    
                </param>
                <param>
                    descriptor The descriptor for the attribute.  This may be null
                      which is equivalent to an empty descriptor.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code isIs} is true but{@code isReadable} is not, or if {@code isIs} is true and{@code type} is not {@code boolean} or {@code java.lang.Boolean}.
                      (New code should always use {@code boolean} rather than{@code java.lang.Boolean}.)                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MBeanAttributeInfo" type="constructor" line="70">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="String"/>
                    <param name="description" type="String"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
                <scope line="75"/>
                <scope line="78"/>
            </method>
            <javadoc line="83">
                &lt;p&gt;This constructor takes the name of a simple attribute, and Method
                  objects for reading and writing the attribute.  The {@link Descriptor}of the constructed object will include fields contributed by any
                  annotations on the {@code Method} objects that contain the{@link DescriptorKey} meta-annotation.                
                <param>
                    name The programmatic name of the attribute.                    
                </param>
                <param>
                    description A human readable description of the attribute.                    
                </param>
                <param>
                    getter The method used for reading the attribute value.
                      May be null if the property is write-only.                    
                </param>
                <param>
                    setter The method used for writing the attribute value.
                      May be null if the attribute is read-only.                    
                </param>
                <exception>
                    IntrospectionException There is a consistency
                      problem in the definition of this attribute.                    
                </exception>
            </javadoc>
            <method name="MBeanAttributeInfo" type="constructor" line="96">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="getter" type="Method"/>
                    <param name="setter" type="Method"/>
                </params>
            </method>
            <javadoc line="99">
                &lt;p&gt;Returns a shallow clone of this instance.
                  The clone is obtained by simply calling &lt;tt&gt;super.clone()&lt;/tt&gt;,
                  thus calling the default native shallow cloning mechanism
                  implemented by &lt;tt&gt;Object.clone()&lt;/tt&gt;.
                  No deeper cloning of any internal field is made.&lt;/p&gt;
                  &lt;p&gt;Since this class is immutable, cloning is chiefly of
                  interest to subclasses.&lt;/p&gt;                
            </javadoc>
            <method name="clone" type="Object" line="108">
                <scope line="109"/>
                <scope line="112"/>
            </method>
            <javadoc line="116">
                Returns the class name of the attribute.                
                <return>
                    the class name.                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="120"/>
            <javadoc line="123">
                Whether the value of the attribute can be read.                
                <return>
                    True if the attribute can be read, false otherwise.                    
                </return>
            </javadoc>
            <method name="isReadable" type="boolean" line="127"/>
            <javadoc line="130">
                Whether new values can be written to the attribute.                
                <return>
                    True if the attribute can be written to, false otherwise.                    
                </return>
            </javadoc>
            <method name="isWritable" type="boolean" line="134"/>
            <javadoc line="137">
                Indicates if this attribute has an &quot;is&quot; getter.                
                <return>
                    true if this attribute has an &quot;is&quot; getter.                    
                </return>
            </javadoc>
            <method name="isIs" type="boolean" line="141"/>
            <method name="toString" type="String" line="144">
                <declaration name="access" type="String" line="145"/>
                <scope line="146"/>
            </method>
            <javadoc line="154">
                Compare this MBeanAttributeInfo to another.                
                <param>
                    o the object to compare to.                    
                </param>
                <return>
                    true if and only if &lt;code&gt;o&lt;/code&gt; is an MBeanAttributeInfo such
                      that its {@link #getName()}, {@link #getType()}, {@link #getDescription()}, {@link #isReadable()}, {@link #isWritable()}, and {@link #isIs()} values are equal (not
                      necessarily identical) to those of this MBeanAttributeInfo.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="161">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="p" type="MBeanAttributeInfo" line="164"/>
            </method>
            <method name="hashCode" type="int" line="167"/>
            <method name="isIs" type="boolean" line="170">
                <params>
                    <param name="getter" type="Method"/>
                </params>
            </method>
            <javadoc line="173">
                Finds the type of the attribute.                
            </javadoc>
            <method name="attributeType" type="String" line="176">
                <params>
                    <param name="getter" type="Method"/>
                    <param name="setter" type="Method"/>
                </params>
                <declaration name="type" type="Class&amp;lt;?&amp;gt;" line="177"/>
                <scope line="178">
                    <scope line="179"/>
                    <scope line="183"/>
                </scope>
                <scope line="187">
                    <declaration name="params" type="Class&amp;lt;?&amp;gt;" line="188"/>
                    <scope line="189"/>
                    <scope line="193"/>
                </scope>
                <scope line="197"/>
            </method>
        </class>
    </source>