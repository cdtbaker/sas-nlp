<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.lang.reflect.Method"/>
        <import package="java.security.AccessController"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.mbeanserver.Introspector"/>
        <class name="MBeanAttributeInfo" line="35">
            <extends class="MBeanFeatureInfo"/>
            <comment line="43">
                serialVersionUID not constant                
            </comment>
            <comment line="46">
                                
            </comment>
            <comment line="298">
                We do not include everything in the hashcode.  We assume that
                if two operations are different they&apos;ll probably have different
                names or types.  The penalty we pay when this assumption is
                wrong should be less than the penalty we would pay if it were
                right and we needlessly hashed in the description and parameter                
            </comment>
            <implements interface="Cloneable"/>
            <javadoc line="35">
                Describes an MBean attribute exposed for management.  Instances of
                  this class are immutable.  Subclasses may be mutable but this is
                  not recommended.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="46"/>
            <scope line="47">
                <declaration name="uid" type="long" line="57"/>
                <scope line="58">
                    <declaration name="act" type="GetPropertyAction" line="59"/>
                    <declaration name="form" type="String" line="60"/>
                </scope>
                <scope line="63"/>
            </scope>
            <declaration name="NO_ATTRIBUTES" type="MBeanAttributeInfo[]" line="69"/>
            <declaration name="attributeType" type="String" line="72"/>
            <javadoc line="72">
                @serial The actual attribute type.                
            </javadoc>
            <declaration name="isWrite" type="boolean" line="77"/>
            <javadoc line="77">
                @serial The attribute write right.                
            </javadoc>
            <declaration name="isRead" type="boolean" line="82"/>
            <javadoc line="82">
                @serial The attribute read right.                
            </javadoc>
            <declaration name="is" type="boolean" line="87"/>
            <javadoc line="87">
                @serial Indicates if this method is a &quot;is&quot;                
            </javadoc>
            <javadoc line="93">
                Constructs an &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object.                
                <param>
                    name The name of the attribute.                    
                </param>
                <param>
                    type The type or class name of the attribute.                    
                </param>
                <param>
                    description A human readable description of the attribute.                    
                </param>
                <param>
                    isReadable True if the attribute has a getter method, false otherwise.                    
                </param>
                <param>
                    isWritable True if the attribute has a setter method, false otherwise.                    
                </param>
                <param>
                    isIs True if this attribute has an "is" getter, false otherwise.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code isIs} is true but{@code isReadable} is not, or if {@code isIs} is true and{@code type} is not {@code boolean} or {@code java.lang.Boolean}.
                      (New code should always use {@code boolean} rather than{@code java.lang.Boolean}.)                    
                </throws>
            </javadoc>
            <method name="MBeanAttributeInfo" type="constructor" line="114">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="String"/>
                    <param name="description" type="String"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                </params>
            </method>
            <javadoc line="119">
                Constructs an &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object.                
                <param>
                    name The name of the attribute.                    
                </param>
                <param>
                    type The type or class name of the attribute.                    
                </param>
                <param>
                    description A human readable description of the attribute.                    
                </param>
                <param>
                    isReadable True if the attribute has a getter method, false otherwise.                    
                </param>
                <param>
                    isWritable True if the attribute has a setter method, false otherwise.                    
                </param>
                <param>
                    isIs True if this attribute has an "is" getter, false otherwise.                    
                </param>
                <param>
                    descriptor The descriptor for the attribute.  This may be null
                      which is equivalent to an empty descriptor.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code isIs} is true but{@code isReadable} is not, or if {@code isIs} is true and{@code type} is not {@code boolean} or {@code java.lang.Boolean}.
                      (New code should always use {@code boolean} rather than{@code java.lang.Boolean}.)                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MBeanAttributeInfo" type="constructor" line="145">
                <params>
                    <param name="name" type="String"/>
                    <param name="type" type="String"/>
                    <param name="description" type="String"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
                <scope line="151"/>
                <scope line="156"/>
            </method>
            <javadoc line="163">
                &lt;p&gt;This constructor takes the name of a simple attribute, and Method
                  objects for reading and writing the attribute.  The {@link Descriptor}of the constructed object will include fields contributed by any
                  annotations on the {@code Method} objects that contain the{@link DescriptorKey} meta-annotation.                
                <param>
                    name The programmatic name of the attribute.                    
                </param>
                <param>
                    description A human readable description of the attribute.                    
                </param>
                <param>
                    getter The method used for reading the attribute value.
                      May be null if the property is write-only.                    
                </param>
                <param>
                    setter The method used for writing the attribute value.
                      May be null if the attribute is read-only.                    
                </param>
                <exception>
                    IntrospectionException There is a consistency
                      problem in the definition of this attribute.                    
                </exception>
            </javadoc>
            <method name="MBeanAttributeInfo" type="constructor" line="182">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="getter" type="Method"/>
                    <param name="setter" type="Method"/>
                </params>
            </method>
            <javadoc line="193">
                &lt;p&gt;Returns a shallow clone of this instance.
                  The clone is obtained by simply calling &lt;tt&gt;super.clone()&lt;/tt&gt;,
                  thus calling the default native shallow cloning mechanism
                  implemented by &lt;tt&gt;Object.clone()&lt;/tt&gt;.
                  No deeper cloning of any internal field is made.&lt;/p&gt;
                  &lt;p&gt;Since this class is immutable, cloning is chiefly of
                  interest to subclasses.&lt;/p&gt;                
            </javadoc>
            <method name="clone" type="Object" line="203">
                <comment line="208">
                    should not happen as this class is cloneable                    
                </comment>
                <scope line="204"/>
                <scope line="206"/>
            </method>
            <javadoc line="212">
                Returns the class name of the attribute.                
                <return>
                    the class name.                    
                </return>
            </javadoc>
            <method name="getType" type="String" line="217"/>
            <javadoc line="221">
                Whether the value of the attribute can be read.                
                <return>
                    True if the attribute can be read, false otherwise.                    
                </return>
            </javadoc>
            <method name="isReadable" type="boolean" line="226"/>
            <javadoc line="230">
                Whether new values can be written to the attribute.                
                <return>
                    True if the attribute can be written to, false otherwise.                    
                </return>
            </javadoc>
            <method name="isWritable" type="boolean" line="235"/>
            <javadoc line="239">
                Indicates if this attribute has an &quot;is&quot; getter.                
                <return>
                    true if this attribute has an "is" getter.                    
                </return>
            </javadoc>
            <method name="isIs" type="boolean" line="244"/>
            <method name="toString" type="String" line="248">
                <declaration name="access" type="String" line="249"/>
                <scope line="250"/>
            </method>
            <javadoc line="271">
                Compare this MBeanAttributeInfo to another.                
                <param>
                    o the object to compare to.                    
                </param>
                <return>
                    true if and only if <code>o</code> is an MBeanAttributeInfo such
                      that its {@link #getName()}, {@link #getType()}, {@link #getDescription()}, {@link #isReadable()}, {@link #isWritable()}, and {@link #isIs()} values are equal (not
                      necessarily identical) to those of this MBeanAttributeInfo.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="282">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="p" type="MBeanAttributeInfo" line="287"/>
            </method>
            <method name="hashCode" type="int" line="303"/>
            <method name="isIs" type="boolean" line="307">
                <params>
                    <param name="getter" type="Method"/>
                </params>
            </method>
            <javadoc line="314">
                Finds the type of the attribute.                
            </javadoc>
            <method name="attributeType" type="String" line="318">
                <params>
                    <param name="getter" type="Method"/>
                    <param name="setter" type="Method"/>
                </params>
                <declaration name="type" type="Class&lt;?&gt;" line="319"/>
                <scope line="321">
                    <scope line="322"/>
                    <scope line="326"/>
                </scope>
                <scope line="332">
                    <declaration name="params" type="Class&lt;?&gt;" line="333"/>
                    <scope line="334"/>
                    <scope line="339"/>
                </scope>
                <scope line="345"/>
            </method>
        </class>
    </source>