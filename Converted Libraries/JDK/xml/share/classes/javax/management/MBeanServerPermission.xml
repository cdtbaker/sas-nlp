<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.security.BasicPermission"/>
        <import package="java.security.Permission"/>
        <import package="java.security.PermissionCollection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <class name="MBeanServerPermission" line="38">
            <extends class="BasicPermission"/>
            <comment line="94">
                Map from permission masks to canonical names.  This array is
                 filled in on demand.
                
                 This isn&apos;t very scalable.  If we have more than five or six
                 permissions, we should consider doing this differently,
                 e.g. with a Map.                
            </comment>
            <comment line="104">
                The target names mask.  This is not private to avoid having to
                 generate accessor methods for accesses from the collection class.
                
                 This mask includes implied bits.  So if it has CREATE_MASK then
                 it necessarily has NEW_MASK too.                
            </comment>
            <comment line="213">
                Convert the string into a bitmask, including bits that                
            </comment>
            <comment line="316">
                Since every collection of MBSP can be represented by a single MBSP,
                 that is what our PermissionCollection does.  We need to define a
                 PermissionCollection because the one inherited from BasicPermission
                 doesn&apos;t know that createMBeanServer implies newMBeanServer.
                
                 Though the serial form is defined, the TCK does not check it.  We do
                 not require independent implementations to duplicate it.  Even though
                 PermissionCollection is Serializable, instances of this class will
                 hardly ever be serialized, and different implementations do not
                 typically exchange serialized permission collections.
                
                 If we did require that a particular form be respected here, we would
                 logically also have to require it for
                 MBeanPermission.newPermissionCollection, which would preclude an
                 implementation from defining a PermissionCollection there with an
                 optimized &quot;implies&quot; method.                
            </comment>
            <javadoc line="38">
                A Permission to perform actions related to MBeanServers.
                  The &lt;em&gt;name&lt;/em&gt; of the permission specifies the operation requested
                  or granted by the permission.  For a granted permission, it can be
                  &lt;code&gt;&lt;/code&gt; to allow all of the MBeanServer operations specified below.
                  Otherwise, for a granted or requested permission, it must be one of the
                  following:
                  &lt;dl&gt;
                  &lt;dt&gt;createMBeanServer&lt;/dt&gt;
                  &lt;dd&gt;Create a new MBeanServer object using the method{@link MBeanServerFactory#createMBeanServer()} or{@link MBeanServerFactory#createMBeanServer(java.lang.String)}.
                  &lt;dt&gt;findMBeanServer&lt;/dt&gt;
                  &lt;dd&gt;Find an MBeanServer with a given name, or all MBeanServers in this
                  JVM, using the method {@link MBeanServerFactory#findMBeanServer}.
                  &lt;dt&gt;newMBeanServer&lt;/dt&gt;
                  &lt;dd&gt;Create a new MBeanServer object without keeping a reference to it,
                  using the method {@link MBeanServerFactory#newMBeanServer()} or{@link MBeanServerFactory#newMBeanServer(java.lang.String)}.
                  &lt;dt&gt;releaseMBeanServer&lt;/dt&gt;
                  &lt;dd&gt;Remove the MBeanServerFactory&apos;s reference to an MBeanServer,
                  using the method {@link MBeanServerFactory#releaseMBeanServer}.
                  &lt;/dl&gt;
                  The &lt;em&gt;name&lt;/em&gt; of the permission can also denote a list of one or more
                  comma-separated operations.  Spaces are allowed at the beginning and
                  end of the &lt;em&gt;name&lt;/em&gt; and before and after commas.
                  &lt;p&gt;
                  &lt;code&gt;MBeanServerPermission(&quot;createMBeanServer&quot;)&lt;/code&gt; implies
                  &lt;code&gt;MBeanServerPermission(&quot;newMBeanServer&quot;)&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="70"/>
            <declaration name="CREATE" type="int" line="72"/>
            <declaration name="names" type="String[]" line="79"/>
            <declaration name="CREATE_MASK" type="int" line="86"/>
            <declaration name="canonicalNames" type="String[]" line="101"/>
            <declaration name="mask" type="int" line="110"/>
            <javadoc line="112">
                &lt;p&gt;Create a new MBeanServerPermission with the given name.&lt;/p&gt;
                  &lt;p&gt;This constructor is equivalent to
                  &lt;code&gt;MBeanServerPermission(name,null)&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    name the name of the granted permission.  It must
                      respect the constraints spelt out in the description of the{@link MBeanServerPermission} class.                    
                </param>
                <exception>
                    NullPointerException if the name is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the name is not
                      <code></code> or one of the allowed names or a comma-separated
                      list of the allowed names.                    
                </exception>
            </javadoc>
            <method name="MBeanServerPermission" type="constructor" line="123">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="127">
                &lt;p&gt;Create a new MBeanServerPermission with the given name.&lt;/p&gt;                
                <param>
                    name the name of the granted permission.  It must
                      respect the constraints spelt out in the description of the{@link MBeanServerPermission} class.                    
                </param>
                <param>
                    actions the associated actions.  This parameter is not
                      currently used and must be null or the empty string.                    
                </param>
                <exception>
                    NullPointerException if the name is null.                    
                </exception>
                <exception>
                    IllegalArgumentException if the name is not
                      <code></code> or one of the allowed names or a comma-separated
                      list of the allowed names, or if <code>actions</code> is a non-null
                      non-empty string.                    
                </exception>
                <throws>
                    NullPointerException if <code>name</code> is <code>null</code>.                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>name</code> is empty or
                      if arguments are invalid.                    
                </throws>
            </javadoc>
            <method name="MBeanServerPermission" type="constructor" line="143">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
                <comment line="147">
                    It&apos;s annoying to have to parse the name twice, but since
                    Permission.getName() is final and since we can&apos;t access &quot;this&quot;
                    until after the call to the superclass constructor, there
                    isn&apos;t any very clean way to do this.  MBeanServerPermission                    
                </comment>
                <comment line="154">
                                        
                </comment>
            </method>
            <method name="MBeanServerPermission" type="constructor" line="160">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="readObject" type="void" line="166">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
            <method name="simplifyMask" type="int" line="171">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="impliedMask" type="int" line="177">
                <params>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <method name="getCanonicalName" type="String" line="183">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <scope line="189"/>
            </method>
            <method name="makeCanonicalName" type="String" line="197">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <comment line="208">
                    intern() avoids duplication when the mask has only
                    one bit, so is equivalent to the string constants                    
                </comment>
                <declaration name="buf" type="StringBuilder" line="198"/>
                <scope line="199">
                    <scope line="200"/>
                </scope>
            </method>
            <method name="parseMask" type="int" line="214">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="216">
                                        
                </comment>
                <comment line="226">
                                        
                </comment>
                <scope line="216"/>
                <declaration name="mask" type="int" line="229"/>
                <declaration name="tok" type="StringTokenizer" line="231"/>
                <scope line="232">
                    <declaration name="action" type="String" line="233"/>
                    <declaration name="i" type="int" line="234"/>
                </scope>
            </method>
            <method name="nameIndex" type="int" line="242">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="243"/>
                <declaration name="msg" type="String" line="247"/>
            </method>
            <method name="hashCode" type="int" line="252"/>
            <javadoc line="256">
                &lt;p&gt;Checks if this MBeanServerPermission object &quot;implies&quot; the specified
                  permission.&lt;/p&gt;
                  &lt;p&gt;More specifically, this method returns true if:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instance of MBeanServerPermission,&lt;/li&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s target names are a subset of this object&apos;s target
                  names&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;The &lt;code&gt;createMBeanServer&lt;/code&gt; permission implies the
                  &lt;code&gt;newMBeanServer&lt;/code&gt; permission.&lt;/p&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="275">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <declaration name="that" type="MBeanServerPermission" line="279"/>
            </method>
            <javadoc line="284">
                Checks two MBeanServerPermission objects for equality. Checks that
                  &lt;i&gt;obj&lt;/i&gt; is an MBeanServerPermission, and represents the same
                  list of allowable actions as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if the objects are equal.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="292">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="MBeanServerPermission" line="299"/>
            </method>
            <method name="newPermissionCollection" type="PermissionCollection" line="304"/>
        </class>
        <class name="MBeanServerPermissionCollection" line="309">
            <extends class="PermissionCollection"/>
            <comment line="94">
                Map from permission masks to canonical names.  This array is
                 filled in on demand.
                
                 This isn&apos;t very scalable.  If we have more than five or six
                 permissions, we should consider doing this differently,
                 e.g. with a Map.                
            </comment>
            <comment line="104">
                The target names mask.  This is not private to avoid having to
                 generate accessor methods for accesses from the collection class.
                
                 This mask includes implied bits.  So if it has CREATE_MASK then
                 it necessarily has NEW_MASK too.                
            </comment>
            <comment line="213">
                Convert the string into a bitmask, including bits that                
            </comment>
            <comment line="316">
                Since every collection of MBSP can be represented by a single MBSP,
                 that is what our PermissionCollection does.  We need to define a
                 PermissionCollection because the one inherited from BasicPermission
                 doesn&apos;t know that createMBeanServer implies newMBeanServer.
                
                 Though the serial form is defined, the TCK does not check it.  We do
                 not require independent implementations to duplicate it.  Even though
                 PermissionCollection is Serializable, instances of this class will
                 hardly ever be serialized, and different implementations do not
                 typically exchange serialized permission collections.
                
                 If we did require that a particular form be respected here, we would
                 logically also have to require it for
                 MBeanPermission.newPermissionCollection, which would preclude an
                 implementation from defining a PermissionCollection there with an
                 optimized &quot;implies&quot; method.                
            </comment>
            <javadoc line="309">
                Class returned by {@link MBeanServerPermission#newPermissionCollection()}.                
                <serial>
                    include                    
                </serial>
            </javadoc>
            <declaration name="collectionPermission" type="MBeanServerPermission" line="334"/>
            <javadoc line="334">
                @serial Null if no permissions in collection, otherwise a
                  single permission that is the union of all permissions that
                  have been added.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="339"/>
            <method name="add" type="void" line="341">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
                <scope line="342">
                    <declaration name="msg" type="String" line="343"/>
                </scope>
                <declaration name="mbsp" type="MBeanServerPermission" line="349"/>
                <scope line="352">
                    <declaration name="newmask" type="int" line="353"/>
                </scope>
            </method>
            <method name="implies" type="boolean" line="358">
                <params>
                    <param name="permission" type="Permission"/>
                </params>
            </method>
            <method name="elements" type="Enumeration<Permission>" line="363">
                <declaration name="set" type="Set&lt;Permission&gt;" line="364"/>
            </method>
        </class>
    </source>