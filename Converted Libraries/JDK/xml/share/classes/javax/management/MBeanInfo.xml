<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.io.IOException"/>
        <import package="java.io.StreamCorruptedException"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="javax.management.ImmutableDescriptor.nonNullDescriptor"/>
        <class name="MBeanInfo" line="42">
            <comment line="109">
                                
            </comment>
            <comment line="575">
                The PrivilegedAction stuff is probably overkill.  We can be
                 pretty sure the caller does have the required privileges -- a
                 JMX user that can&apos;t do reflection can&apos;t even use Standard
                 MBeans!  But there&apos;s probably a performance gain by not having
                 to check the whole call stack.                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <implements interface="DescriptorRead"/>
            <javadoc line="42">
                &lt;p&gt;Describes the management interface exposed by an MBean; that is,
                  the set of attributes and operations which are available for
                  management operations.  Instances of this class are immutable.
                  Subclasses may be mutable but this is not recommended.&lt;/p&gt;
                  &lt;p id=&quot;info-changed&quot;&gt;Usually the {@code MBeanInfo} for any given MBean does
                  not change over the lifetime of that MBean.  Dynamic MBeans can change their{@code MBeanInfo} and in that case it is recommended that they emit a {@link Notification} with a {@linkplain Notification#getType() type} of {@code&quot;jmx.mbean.info.changed&quot;} and a {@linkplain Notification#getUserData()userData} that is the new {@code MBeanInfo}.  This is not required, but
                  provides a conventional way for clients of the MBean to discover the change.
                  See also the &lt;a href=&quot;Descriptor.html#immutableInfo&quot;&gt;immutableInfo&lt;/a&gt; and
                  &lt;a href=&quot;Descriptor.html#infoTimeout&quot;&gt;infoTimeout&lt;/a&gt; fields in the {@codeMBeanInfo} {@link Descriptor}.&lt;/p&gt;
                  &lt;p&gt;The contents of the &lt;code&gt;MBeanInfo&lt;/code&gt; for a Dynamic MBean
                  are determined by its {@link DynamicMBean#getMBeanInfogetMBeanInfo()} method.  This includes Open MBeans and Model
                  MBeans, which are kinds of Dynamic MBeans.&lt;/p&gt;
                  &lt;p&gt;The contents of the &lt;code&gt;MBeanInfo&lt;/code&gt; for a Standard MBean
                  are determined by the MBean server as follows:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@link #getClassName()} returns the Java class name of the MBean
                  object;
                  &lt;li&gt;{@link #getConstructors()} returns the list of all public
                  constructors in that object;
                  &lt;li&gt;{@link #getAttributes()} returns the list of all attributes
                  whose existence is deduced from the presence in the MBean interface
                  of a &lt;code&gt;get&lt;i&gt;Name&lt;/i&gt;&lt;/code&gt;, &lt;code&gt;is&lt;i&gt;Name&lt;/i&gt;&lt;/code&gt;, or
                  &lt;code&gt;set&lt;i&gt;Name&lt;/i&gt;&lt;/code&gt; method that conforms to the conventions
                  for Standard MBeans;
                  &lt;li&gt;{@link #getOperations()} returns the list of all methods in
                  the MBean interface that do not represent attributes;
                  &lt;li&gt;{@link #getNotifications()} returns an empty array if the MBean
                  does not implement the {@link NotificationBroadcaster} interface,
                  otherwise the result of calling {@link NotificationBroadcaster#getNotificationInfo()} on it;
                  &lt;li&gt;{@link #getDescriptor()} returns a descriptor containing the contents
                  of any descriptor annotations in the MBean interface (see{@link DescriptorKey &amp;#64;DescriptorKey}).
                  &lt;/ul&gt;
                  &lt;p&gt;The description returned by {@link #getDescription()} and the
                  descriptions of the contained attributes and operations are not specified.&lt;/p&gt;
                  &lt;p&gt;The remaining details of the &lt;code&gt;MBeanInfo&lt;/code&gt; for a
                  Standard MBean are not specified.  This includes the description of
                  any contained constructors, and notifications; the names
                  of parameters to constructors and operations; and the descriptions of
                  constructor parameters.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="109"/>
            <declaration name="descriptor" type="Descriptor" line="111"/>
            <javadoc line="111">
                @serial The Descriptor for the MBean.  This field
                  can be null, which is equivalent to an empty Descriptor.                
            </javadoc>
            <declaration name="description" type="String" line="117"/>
            <javadoc line="117">
                @serial The human readable description of the class.                
            </javadoc>
            <declaration name="className" type="String" line="122"/>
            <javadoc line="122">
                @serial The MBean qualified name.                
            </javadoc>
            <declaration name="attributes" type="MBeanAttributeInfo[]" line="127"/>
            <javadoc line="127">
                @serial The MBean attribute descriptors.                
            </javadoc>
            <declaration name="operations" type="MBeanOperationInfo[]" line="132"/>
            <javadoc line="132">
                @serial The MBean operation descriptors.                
            </javadoc>
            <declaration name="constructors" type="MBeanConstructorInfo[]" line="137"/>
            <javadoc line="137">
                @serial The MBean constructor descriptors.                
            </javadoc>
            <declaration name="notifications" type="MBeanNotificationInfo[]" line="142"/>
            <javadoc line="142">
                @serial The MBean notification descriptors.                
            </javadoc>
            <declaration name="hashCode" type="int" line="147"/>
            <declaration name="arrayGettersSafe" type="boolean" line="149"/>
            <javadoc line="149">
                &lt;p&gt;True if this class is known not to override the array-valued
                  getters of MBeanInfo.  Obviously true for MBeanInfo itself, and true
                  for a subclass where we succeed in reflecting on the methods
                  and discover they are not overridden.&lt;/p&gt;
                  &lt;p&gt;The purpose of this variable is to avoid cloning the arrays
                  when doing operations like {@link #equals} where we know they
                  will not be changed.  If a subclass overrides a getter, we
                  cannot access the corresponding array directly.&lt;/p&gt;                
            </javadoc>
            <javadoc line="162">
                Constructs an &lt;CODE&gt;MBeanInfo&lt;/CODE&gt;.                
                <param>
                    className The name of the Java class of the MBean described
                      by this <CODE>MBeanInfo</CODE>.  This value may be any
                      syntactically legal Java class name.  It does not have to be a
                      Java class known to the MBean server or to the MBean's
                      ClassLoader.  If it is a Java class known to the MBean's
                      ClassLoader, it is recommended but not required that the
                      class's public methods include those that would appear in a
                      Standard MBean implementing the attributes and operations in
                      this MBeanInfo.                    
                </param>
                <param>
                    description A human readable description of the MBean (optional).                    
                </param>
                <param>
                    attributes The list of exposed attributes of the MBean.
                      This may be null with the same effect as a zero-length array.                    
                </param>
                <param>
                    constructors The list of public constructors of the
                      MBean.  This may be null with the same effect as a zero-length
                      array.                    
                </param>
                <param>
                    operations The list of operations of the MBean.  This
                      may be null with the same effect as a zero-length array.                    
                </param>
                <param>
                    notifications The list of notifications emitted.  This
                      may be null with the same effect as a zero-length array.                    
                </param>
            </javadoc>
            <method name="MBeanInfo" type="constructor" line="191">
                <params>
                    <param name="className" type="String"/>
                    <param name="description" type="String"/>
                    <param name="attributes" type="MBeanAttributeInfo[]"/>
                    <param name="constructors" type="MBeanConstructorInfo[]"/>
                    <param name="operations" type="MBeanOperationInfo[]"/>
                    <param name="notifications" type="MBeanNotificationInfo[]"/>
                </params>
            </method>
            <javadoc line="196">
                Constructs an &lt;CODE&gt;MBeanInfo&lt;/CODE&gt;.                
                <param>
                    className The name of the Java class of the MBean described
                      by this <CODE>MBeanInfo</CODE>.  This value may be any
                      syntactically legal Java class name.  It does not have to be a
                      Java class known to the MBean server or to the MBean's
                      ClassLoader.  If it is a Java class known to the MBean's
                      ClassLoader, it is recommended but not required that the
                      class's public methods include those that would appear in a
                      Standard MBean implementing the attributes and operations in
                      this MBeanInfo.                    
                </param>
                <param>
                    description A human readable description of the MBean (optional).                    
                </param>
                <param>
                    attributes The list of exposed attributes of the MBean.
                      This may be null with the same effect as a zero-length array.                    
                </param>
                <param>
                    constructors The list of public constructors of the
                      MBean.  This may be null with the same effect as a zero-length
                      array.                    
                </param>
                <param>
                    operations The list of operations of the MBean.  This
                      may be null with the same effect as a zero-length array.                    
                </param>
                <param>
                    notifications The list of notifications emitted.  This
                      may be null with the same effect as a zero-length array.                    
                </param>
                <param>
                    descriptor The descriptor for the MBean.  This may be null
                      which is equivalent to an empty descriptor.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MBeanInfo" type="constructor" line="230">
                <params>
                    <param name="className" type="String"/>
                    <param name="description" type="String"/>
                    <param name="attributes" type="MBeanAttributeInfo[]"/>
                    <param name="constructors" type="MBeanConstructorInfo[]"/>
                    <param name="operations" type="MBeanOperationInfo[]"/>
                    <param name="notifications" type="MBeanNotificationInfo[]"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
            </method>
            <javadoc line="260">
                &lt;p&gt;Returns a shallow clone of this instance.
                  The clone is obtained by simply calling &lt;tt&gt;super.clone()&lt;/tt&gt;,
                  thus calling the default native shallow cloning mechanism
                  implemented by &lt;tt&gt;Object.clone()&lt;/tt&gt;.
                  No deeper cloning of any internal field is made.&lt;/p&gt;
                  &lt;p&gt;Since this class is immutable, the clone method is chiefly of
                  interest to subclasses.&lt;/p&gt;                
            </javadoc>
            <method name="clone" type="Object" line="271">
                <comment line="275">
                    should not happen as this class is cloneable                    
                </comment>
                <scope line="272"/>
                <scope line="274"/>
            </method>
            <javadoc line="281">
                Returns the name of the Java class of the MBean described by
                  this &lt;CODE&gt;MBeanInfo&lt;/CODE&gt;.                
                <return>
                    the class name.                    
                </return>
            </javadoc>
            <method name="getClassName" type="String" line="287"/>
            <javadoc line="291">
                Returns a human readable description of the MBean.                
                <return>
                    the description.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="296"/>
            <javadoc line="300">
                Returns the list of attributes exposed for management.
                  Each attribute is described by an &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object.
                  The returned array is a shallow copy of the internal array,
                  which means that it is a copy of the internal array of
                  references to the &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; objects
                  but that each referenced &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object is not copied.                
                <return>
                    An array of <CODE>MBeanAttributeInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getAttributes" type="MBeanAttributeInfo[]" line="311">
                <declaration name="as" type="MBeanAttributeInfo[]" line="312"/>
            </method>
            <method name="fastGetAttributes" type="MBeanAttributeInfo[]" line="319"/>
            <javadoc line="326">
                Return the value of the attributes field, or an empty array if
                  the field is null.  This can&apos;t happen with a
                  normally-constructed instance of this class, but can if the
                  instance was deserialized from another implementation that
                  allows the field to be null.  It would be simpler if we enforced
                  the class invariant that these fields cannot be null by writing
                  a readObject() method, but that would require us to define the
                  various array fields as non-final, which is annoying because
                  conceptually they are indeed final.                
            </javadoc>
            <method name="nonNullAttributes" type="MBeanAttributeInfo[]" line="337"/>
            <javadoc line="342">
                Returns the list of operations  of the MBean.
                  Each operation is described by an &lt;CODE&gt;MBeanOperationInfo&lt;/CODE&gt; object.
                  The returned array is a shallow copy of the internal array,
                  which means that it is a copy of the internal array of
                  references to the &lt;CODE&gt;MBeanOperationInfo&lt;/CODE&gt; objects
                  but that each referenced &lt;CODE&gt;MBeanOperationInfo&lt;/CODE&gt; object is not copied.                
                <return>
                    An array of <CODE>MBeanOperationInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getOperations" type="MBeanOperationInfo[]" line="353">
                <declaration name="os" type="MBeanOperationInfo[]" line="354"/>
            </method>
            <method name="fastGetOperations" type="MBeanOperationInfo[]" line="361"/>
            <method name="nonNullOperations" type="MBeanOperationInfo[]" line="368"/>
            <javadoc line="373">
                &lt;p&gt;Returns the list of the public constructors of the MBean.
                  Each constructor is described by an
                  &lt;CODE&gt;MBeanConstructorInfo&lt;/CODE&gt; object.&lt;/p&gt;
                  &lt;p&gt;The returned array is a shallow copy of the internal array,
                  which means that it is a copy of the internal array of
                  references to the &lt;CODE&gt;MBeanConstructorInfo&lt;/CODE&gt; objects but
                  that each referenced &lt;CODE&gt;MBeanConstructorInfo&lt;/CODE&gt; object
                  is not copied.&lt;/p&gt;
                  &lt;p&gt;The returned list is not necessarily exhaustive.  That is,
                  the MBean may have a public constructor that is not in the
                  list.  In this case, the MBean server can construct another
                  instance of this MBean&apos;s class using that constructor, even
                  though it is not listed here.&lt;/p&gt;                
                <return>
                    An array of <CODE>MBeanConstructorInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getConstructors" type="MBeanConstructorInfo[]" line="392">
                <declaration name="cs" type="MBeanConstructorInfo[]" line="393"/>
            </method>
            <method name="fastGetConstructors" type="MBeanConstructorInfo[]" line="400"/>
            <method name="nonNullConstructors" type="MBeanConstructorInfo[]" line="407"/>
            <javadoc line="412">
                Returns the list of the notifications emitted by the MBean.
                  Each notification is described by an &lt;CODE&gt;MBeanNotificationInfo&lt;/CODE&gt; object.
                  The returned array is a shallow copy of the internal array,
                  which means that it is a copy of the internal array of
                  references to the &lt;CODE&gt;MBeanNotificationInfo&lt;/CODE&gt; objects
                  but that each referenced &lt;CODE&gt;MBeanNotificationInfo&lt;/CODE&gt; object is not copied.                
                <return>
                    An array of <CODE>MBeanNotificationInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getNotifications" type="MBeanNotificationInfo[]" line="423">
                <declaration name="ns" type="MBeanNotificationInfo[]" line="424"/>
            </method>
            <method name="fastGetNotifications" type="MBeanNotificationInfo[]" line="431"/>
            <method name="nonNullNotifications" type="MBeanNotificationInfo[]" line="438"/>
            <javadoc line="443">
                Get the descriptor of this MBeanInfo.  Changing the returned value
                  will have no affect on the original descriptor.                
                <return>
                    a descriptor that is either immutable or a copy of the original.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="451"/>
            <method name="toString" type="String" line="456"/>
            <javadoc line="468">
                &lt;p&gt;Compare this MBeanInfo to another.  Two MBeanInfo objects
                  are equal if and only if they return equal values for {@link #getClassName()}, for {@link #getDescription()}, and for{@link #getDescriptor()}, and the
                  arrays returned by the two objects for {@link #getAttributes()}, {@link #getOperations()}, {@link #getConstructors()}, and {@link #getNotifications()} are
                  pairwise equal.  Here &quot;equal&quot; means {@link Object#equals(Object)}, not identity.&lt;/p&gt;
                  &lt;p&gt;If two MBeanInfo objects return the same values in one of
                  their arrays but in a different order then they are not equal.&lt;/p&gt;                
                <param>
                    o the object to compare to.                    
                </param>
                <return>
                    true if and only if <code>o</code> is an MBeanInfo that is equal
                      to this one according to the rules above.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="488">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="p" type="MBeanInfo" line="493"/>
                <scope line="496"/>
            </method>
            <method name="hashCode" type="int" line="508">
                <comment line="509">
                    Since computing the hashCode is quite expensive, we cache it.
                    If by some terrible misfortune the computed value is 0, the
                    caching won&apos;t work and we will recompute it every time.
                    
                    We don&apos;t bother synchronizing, because, at worst, n different                    
                </comment>
            </method>
            <method name="arrayHashCode" type="int" line="529">
                <params>
                    <param name="array" type="Object[]"/>
                </params>
                <declaration name="hash" type="int" line="530"/>
            </method>
            <declaration name="arrayGettersSafeMap" type="Map&lt;Class&lt;?&gt;,Boolean&gt;" line="536"/>
            <javadoc line="536">
                Cached results of previous calls to arrayGettersSafe.  This is
                  a WeakHashMap so that we don&apos;t prevent a class from being
                  garbage collected just because we know whether it&apos;s immutable.                
            </javadoc>
            <javadoc line="544">
                Return true if &lt;code&gt;subclass&lt;/code&gt; is known to preserve the
                  immutability of &lt;code&gt;immutableClass&lt;/code&gt;.  The class
                  &lt;code&gt;immutableClass&lt;/code&gt; is a reference class that is known
                  to be immutable.  The subclass &lt;code&gt;subclass&lt;/code&gt; is
                  considered immutable if it does not override any public method
                  of &lt;code&gt;immutableClass&lt;/code&gt; whose name begins with &quot;get&quot;.
                  This is obviously not an infallible test for immutability,
                  but it works for the public interfaces of the MBeanInfo classes.                
            </javadoc>
            <method name="arrayGettersSafe" type="boolean" line="554">
                <params>
                    <param name="subclass" type="Class<?>"/>
                    <param name="immutableClass" type="Class<?>"/>
                </params>
                <comment line="564">
                    e.g. SecurityException                    
                </comment>
                <comment line="565">
                                        
                </comment>
                <scope line="557">
                    <declaration name="safe" type="Boolean" line="558"/>
                    <scope line="559">
                        <scope line="560">
                            <declaration name="action" type="ArrayGettersSafeAction" line="561"/>
                        </scope>
                        <scope line="564"/>
                    </scope>
                </scope>
            </method>
            <class name="ArrayGettersSafeAction" line="581">
                <implements interface="PrivilegedAction">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </implements>
                <declaration name="subclass" type="Class&lt;?&gt;" line="584"/>
                <declaration name="immutableClass" type="Class&lt;?&gt;" line="585"/>
                <method name="ArrayGettersSafeAction" type="constructor" line="587">
                    <params>
                        <param name="subclass" type="Class<?>"/>
                        <param name="immutableClass" type="Class<?>"/>
                    </params>
                </method>
                <method name="run" type="Boolean" line="592">
                    <declaration name="methods" type="Method[]" line="593"/>
                    <scope line="594">
                        <declaration name="method" type="Method" line="595"/>
                        <declaration name="methodName" type="String" line="596"/>
                        <scope line="599">
                            <scope line="600">
                                <declaration name="submethod" type="Method" line="601"/>
                            </scope>
                            <scope line="605"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="isEqual" type="boolean" line="614">
                <params>
                    <param name="s1" type="String"/>
                    <param name="s2" type="String"/>
                </params>
                <declaration name="ret" type="boolean" line="615"/>
                <scope line="617"/>
                <scope line="619"/>
            </method>
            <javadoc line="626">
                Serializes an {@link MBeanInfo} to an {@link ObjectOutputStream}.                
                <serialData>
                    For compatibility reasons, an object of this class is serialized as follows.
                      <ul>
                      The method {@link ObjectOutputStream#defaultWriteObject defaultWriteObject()}is called first to serialize the object except the field {@code descriptor}which is declared as transient. The field {@code descriptor} is serialized
                      as follows:
                      <ul>
                      <li> If {@code descriptor} is an instance of the class{@link ImmutableDescriptor}, the method {@link ObjectOutputStream#writewrite(int val)} is called to write a byte with the value {@code 1},
                      then the method {@link ObjectOutputStream#writeObject writeObject(Object obj)}is called twice to serialize the field names and the field values of the{@code descriptor}, respectively as a {@code String[]} and an{@code Object[]};</li>
                      <li> Otherwise, the method {@link ObjectOutputStream#write write(int val)}is called to write a byte with the value {@code 0}, then the method{@link ObjectOutputStream#writeObject writeObject(Object obj)} is called
                      to serialize the field {@code descriptor} directly.
                      </ul>
                      </ul>                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="651">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="654">
                    <declaration name="names" type="String[]" line="657"/>
                </scope>
                <scope line="661"/>
            </method>
            <javadoc line="668">
                Deserializes an {@link MBeanInfo} from an {@link ObjectInputStream}.                
                <serialData>
                    For compatibility reasons, an object of this class is deserialized as follows.
                      <ul>
                      The method {@link ObjectInputStream#defaultReadObject defaultReadObject()}is called first to deserialize the object except the field{@code descriptor}, which is not serialized in the default way. Then the method{@link ObjectInputStream#read read()} is called to read a byte, the field{@code descriptor} is deserialized according to the value of the byte value:
                      <ul>
                      <li>1. The method {@link ObjectInputStream#readObject readObject()}is called twice to obtain the field names (a {@code String[]}) and
                      the field values (a {@code Object[]}) of the {@code descriptor}.
                      The two obtained values then are used to construct
                      an {@link ImmutableDescriptor} instance for the field{@code descriptor};</li>
                      <li>0. The value for the field {@code descriptor} is obtained directly
                      by calling the method {@link ObjectInputStream#readObject readObject()}.
                      If the obtained value is null, the field {@code descriptor} is set to{@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR};</li>
                      <li>-1. This means that there is no byte to read and that the object is from
                      an earlier version of the JMX API. The field {@code descriptor} is set to{@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR}.</li>
                      <li>Any other value. A {@link StreamCorruptedException} is thrown.</li>
                      </ul>
                      </ul>                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="699">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="723">
                    from an earlier version of the JMX API                    
                </comment>
                <declaration name="names" type="String[]" line="705"/>
                <scope line="707"/>
                <scope line="709">
                    <declaration name="values" type="Object[]" line="710"/>
                </scope>
                <scope line="718"/>
            </method>
        </class>
    </source>