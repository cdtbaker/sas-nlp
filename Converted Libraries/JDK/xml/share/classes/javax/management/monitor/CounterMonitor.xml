<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.monitor">
        <import package="com.sun.jmx.defaults.JmxProperties.MONITOR_LOGGER"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.monitor.Monitor.NumericalType"/>
        <import package="javax.management.monitor.MonitorNotification"/>
        <class name="CounterMonitor" line="8">
            <extends class="Monitor"/>
            <implements interface="CounterMonitorMBean"/>
            <javadoc line="8">
                Defines a monitor MBean designed to observe the values of a counter
                  attribute.
                  &lt;P&gt; A counter monitor sends a {@link MonitorNotification#THRESHOLD_VALUE_EXCEEDED threshold
                  notification} when the value of the counter reaches or exceeds a
                  threshold known as the comparison level.  The notify flag must be
                  set to &lt;CODE&gt;true&lt;/CODE&gt;.
                  &lt;P&gt; In addition, an offset mechanism enables particular counting
                  intervals to be detected.  If the offset value is not zero,
                  whenever the threshold is triggered by the counter value reaching a
                  comparison level, that comparison level is incremented by the
                  offset value.  This is regarded as taking place instantaneously,
                  that is, before the count is incremented.  Thus, for each level,
                  the threshold triggers an event notification every time the count
                  increases by an interval equal to the offset value.
                  &lt;P&gt; If the counter can wrap around its maximum value, the modulus
                  needs to be specified.  The modulus is the value at which the
                  counter is reset to zero.
                  &lt;P&gt; If the counter difference mode is used, the value of the
                  derived gauge is calculated as the difference between the observed
                  counter values for two successive observations.  If this difference
                  is negative, the value of the derived gauge is incremented by the
                  value of the modulus.  The derived gauge value (V[t]) is calculated
                  using the following method:
                  &lt;UL&gt;
                  &lt;LI&gt;if (counter[t] - counter[t-GP]) is positive then
                  V[t] = counter[t] - counter[t-GP]
                  &lt;LI&gt;if (counter[t] - counter[t-GP]) is negative then
                  V[t] = counter[t] - counter[t-GP] + MODULUS
                  &lt;/UL&gt;
                  This implementation of the counter monitor requires the observed
                  attribute to be of the type integer (&lt;CODE&gt;Byte&lt;/CODE&gt;,
                  &lt;CODE&gt;Integer&lt;/CODE&gt;, &lt;CODE&gt;Short&lt;/CODE&gt;, &lt;CODE&gt;Long&lt;/CODE&gt;).                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="CounterMonitorObservedObject" line="44">
                <extends class="ObservedObject"/>
                <method name="CounterMonitorObservedObject" type="constructor" line="45">
                    <params>
                        <param name="observedObject" type="ObjectName"/>
                    </params>
                </method>
                <method name="getThreshold" type="Number" line="48"/>
                <method name="setThreshold" type="void" line="51">
                    <params>
                        <param name="threshold" type="Number"/>
                    </params>
                </method>
                <method name="getPreviousScanCounter" type="Number" line="54"/>
                <method name="setPreviousScanCounter" type="void" line="57">
                    <params>
                        <param name="previousScanCounter" type="Number"/>
                    </params>
                </method>
                <method name="getModulusExceeded" type="boolean" line="60"/>
                <method name="setModulusExceeded" type="void" line="63">
                    <params>
                        <param name="modulusExceeded" type="boolean"/>
                    </params>
                </method>
                <method name="getDerivedGaugeExceeded" type="Number" line="66"/>
                <method name="setDerivedGaugeExceeded" type="void" line="69">
                    <params>
                        <param name="derivedGaugeExceeded" type="Number"/>
                    </params>
                </method>
                <method name="getDerivedGaugeValid" type="boolean" line="72"/>
                <method name="setDerivedGaugeValid" type="void" line="75">
                    <params>
                        <param name="derivedGaugeValid" type="boolean"/>
                    </params>
                </method>
                <method name="getEventAlreadyNotified" type="boolean" line="78"/>
                <method name="setEventAlreadyNotified" type="void" line="81">
                    <params>
                        <param name="eventAlreadyNotified" type="boolean"/>
                    </params>
                </method>
                <method name="getType" type="NumericalType" line="84"/>
                <method name="setType" type="void" line="87">
                    <params>
                        <param name="type" type="NumericalType"/>
                    </params>
                </method>
                <declaration name="threshold" type="Number" line="90"/>
                <declaration name="previousScanCounter" type="Number" line="91"/>
                <declaration name="modulusExceeded" type="boolean" line="92"/>
                <declaration name="derivedGaugeExceeded" type="Number" line="93"/>
                <declaration name="derivedGaugeValid" type="boolean" line="94"/>
                <declaration name="eventAlreadyNotified" type="boolean" line="95"/>
                <declaration name="type" type="NumericalType" line="96"/>
            </class>
            <declaration name="modulus" type="Number" line="98"/>
            <javadoc line="98">
                Counter modulus.
                  &lt;BR&gt;The default value is a null Integer object.                
            </javadoc>
            <declaration name="offset" type="Number" line="103"/>
            <javadoc line="103">
                Counter offset.
                  &lt;BR&gt;The default value is a null Integer object.                
            </javadoc>
            <declaration name="notify" type="boolean" line="108"/>
            <javadoc line="108">
                Flag indicating if the counter monitor notifies when exceeding
                  the threshold.  The default value is set to
                  &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="differenceMode" type="boolean" line="114"/>
            <javadoc line="114">
                Flag indicating if the counter difference mode is used.  If the
                  counter difference mode is used, the derived gauge is the
                  difference between two consecutive observed values.  Otherwise,
                  the derived gauge is directly the value of the observed
                  attribute.  The default value is set to &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="initThreshold" type="Number" line="122"/>
            <javadoc line="122">
                Initial counter threshold.  This value is used to initialize
                  the threshold when a new object is added to the list and reset
                  the threshold to its initial value each time the counter
                  resets.                
            </javadoc>
            <declaration name="types" type="String[]" line="129"/>
            <declaration name="notifsInfo" type="MBeanNotificationInfo[]" line="130"/>
            <javadoc line="131">
                Default constructor.                
            </javadoc>
            <method name="CounterMonitor" type="constructor" line="134"/>
            <javadoc line="136">
                Starts the counter monitor.                
            </javadoc>
            <method name="start" type="void" line="139">
                <scope line="140"/>
                <scope line="144">
                    <declaration name="cmo" type="CounterMonitorObservedObject" line="145"/>
                </scope>
            </method>
            <javadoc line="153">
                Stops the counter monitor.                
            </javadoc>
            <method name="stop" type="void" line="156"/>
            <javadoc line="159">
                Gets the derived gauge of the specified object, if this object is
                  contained in the set of observed MBeans, or &lt;code&gt;null&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose derived gauge is to
                      be returned.                    
                </param>
                <return>
                    The derived gauge of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGauge" type="Number" line="166">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="169">
                Gets the derived gauge timestamp of the specified object, if
                  this object is contained in the set of observed MBeans, or
                  &lt;code&gt;0&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose derived gauge
                      timestamp is to be returned.                    
                </param>
                <return>
                    The derived gauge timestamp of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="177">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="180">
                Gets the current threshold value of the specified object, if
                  this object is contained in the set of observed MBeans, or
                  &lt;code&gt;null&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose threshold is to be
                      returned.                    
                </param>
                <return>
                    The threshold value of the specified object.                    
                </return>
            </javadoc>
            <method name="getThreshold" type="Number" line="188">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="o" type="CounterMonitorObservedObject" line="189"/>
                <scope line="191"/>
                <scope line="194"/>
            </method>
            <javadoc line="198">
                Gets the initial threshold value common to all observed objects.                
                <return>
                    The initial threshold.                    
                </return>
                <see>
                    #setInitThreshold                    
                </see>
            </javadoc>
            <method name="getInitThreshold" type="Number" line="203"/>
            <javadoc line="206">
                Sets the initial threshold value common to all observed objects.
                  &lt;BR&gt;The current threshold of every object in the set of
                  observed MBeans is updated consequently.                
                <param>
                    value The initial threshold value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified
                      threshold is null or the threshold value is less than zero.                    
                </exception>
                <see>
                    #getInitThreshold                    
                </see>
            </javadoc>
            <method name="setInitThreshold" type="void" line="215">
                <params>
                    <param name="value" type="Number"/>
                </params>
                <scope line="216"/>
                <scope line="219"/>
                <declaration name="index" type="int" line="224"/>
                <scope line="225">
                    <declaration name="cmo" type="CounterMonitorObservedObject" line="227"/>
                </scope>
            </method>
            <javadoc line="233">
                Returns the derived gauge of the first object in the set of
                  observed MBeans.                
                <return>
                    The derived gauge.                    
                </return>
                <deprecated>
                    As of JMX 1.2, replaced by{@link #getDerivedGauge(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getDerivedGauge" type="Number" line="239">
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <javadoc line="247">
                Gets the derived gauge timestamp of the first object in the set
                  of observed MBeans.                
                <return>
                    The derived gauge timestamp.                    
                </return>
                <deprecated>
                    As of JMX 1.2, replaced by{@link #getDerivedGaugeTimeStamp(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="253">
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <javadoc line="261">
                Gets the threshold value of the first object in the set of
                  observed MBeans.                
                <return>
                    The threshold value.                    
                </return>
                <see>
                    #setThreshold                    
                </see>
                <deprecated>
                    As of JMX 1.2, replaced by {@link #getThreshold(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getThreshold" type="Number" line="268"/>
            <javadoc line="271">
                Sets the initial threshold value.                
                <param>
                    value The initial threshold value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified threshold is
                      null or the threshold value is less than zero.                    
                </exception>
                <see>
                    #getThreshold()                    
                </see>
                <deprecated>
                    As of JMX 1.2, replaced by {@link #setInitThreshold}                    
                </deprecated>
            </javadoc>
            <method name="setThreshold" type="void" line="279">
                <params>
                    <param name="value" type="Number"/>
                </params>
            </method>
            <javadoc line="282">
                Gets the offset value common to all observed MBeans.                
                <return>
                    The offset value.                    
                </return>
                <see>
                    #setOffset                    
                </see>
            </javadoc>
            <method name="getOffset" type="Number" line="287"/>
            <javadoc line="290">
                Sets the offset value common to all observed MBeans.                
                <param>
                    value The offset value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified
                      offset is null or the offset value is less than zero.                    
                </exception>
                <see>
                    #getOffset                    
                </see>
            </javadoc>
            <method name="setOffset" type="void" line="297">
                <params>
                    <param name="value" type="Number"/>
                </params>
                <scope line="298"/>
                <scope line="301"/>
                <declaration name="index" type="int" line="306"/>
                <scope line="307"/>
            </method>
            <javadoc line="311">
                Gets the modulus value common to all observed MBeans.                
                <see>
                    #setModulus                    
                </see>
                <return>
                    The modulus value.                    
                </return>
            </javadoc>
            <method name="getModulus" type="Number" line="316"/>
            <javadoc line="319">
                Sets the modulus value common to all observed MBeans.                
                <param>
                    value The modulus value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified
                      modulus is null or the modulus value is less than zero.                    
                </exception>
                <see>
                    #getModulus                    
                </see>
            </javadoc>
            <method name="setModulus" type="void" line="326">
                <params>
                    <param name="value" type="Number"/>
                </params>
                <scope line="327"/>
                <scope line="330"/>
                <declaration name="index" type="int" line="335"/>
                <scope line="336">
                    <declaration name="cmo" type="CounterMonitorObservedObject" line="338"/>
                </scope>
            </method>
            <javadoc line="342">
                Gets the notification&apos;s on/off switch value common to all
                  observed MBeans.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the counter monitor notifies when
                      exceeding the threshold, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
                <see>
                    #setNotify                    
                </see>
            </javadoc>
            <method name="getNotify" type="boolean" line="349"/>
            <javadoc line="352">
                Sets the notification&apos;s on/off switch value common to all
                  observed MBeans.                
                <param>
                    value The notification&apos;s on/off switch value.                    
                </param>
                <see>
                    #getNotify                    
                </see>
            </javadoc>
            <method name="setNotify" type="void" line="358">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="362">
                Gets the difference mode flag value common to all observed MBeans.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the difference mode is used,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
                <see>
                    #setDifferenceMode                    
                </see>
            </javadoc>
            <method name="getDifferenceMode" type="boolean" line="368"/>
            <javadoc line="371">
                Sets the difference mode flag value common to all observed MBeans.                
                <param>
                    value The difference mode flag value.                    
                </param>
                <see>
                    #getDifferenceMode                    
                </see>
            </javadoc>
            <method name="setDifferenceMode" type="void" line="376">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <scope line="379">
                    <declaration name="cmo" type="CounterMonitorObservedObject" line="380"/>
                </scope>
            </method>
            <javadoc line="387">
                Returns a &lt;CODE&gt;NotificationInfo&lt;/CODE&gt; object containing the
                  name of the Java class of the notification and the notification
                  types sent by the counter monitor.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="392"/>
            <javadoc line="395">
                Updates the derived gauge attribute of the observed object.                
                <param>
                    scanCounter The value of the observed attribute.                    
                </param>
                <param>
                    o The observed object.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the derived gauge value is valid,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.  The derived gauge value is
                      invalid when the differenceMode flag is set to
                      &lt;CODE&gt;true&lt;/CODE&gt; and it is the first notification (so we
                      haven&apos;t 2 consecutive values to update the derived gauge).                    
                </return>
            </javadoc>
            <method name="updateDerivedGauge" type="boolean" line="405">
                <params>
                    <param name="scanCounter" type="Object"/>
                    <param name="o" type="CounterMonitorObservedObject"/>
                </params>
                <declaration name="is_derived_gauge_valid" type="boolean" line="406"/>
                <scope line="407">
                    <scope line="408">
                        <scope line="410">
                            <scope line="411"/>
                        </scope>
                    </scope>
                    <scope line="419"/>
                </scope>
                <scope line="424"/>
            </method>
            <javadoc line="430">
                Updates the notification attribute of the observed object
                  and notifies the listeners only once if the notify flag
                  is set to &lt;CODE&gt;true&lt;/CODE&gt;.                
                <param>
                    o The observed object.                    
                </param>
            </javadoc>
            <method name="updateNotifications" type="MonitorNotification" line="436">
                <params>
                    <param name="o" type="CounterMonitorObservedObject"/>
                </params>
                <declaration name="n" type="MonitorNotification" line="437"/>
                <scope line="438">
                    <scope line="439">
                        <scope line="440"/>
                        <scope line="443"/>
                    </scope>
                </scope>
                <scope line="448">
                    <scope line="449">
                        <declaration name="strb" type="StringBuilder" line="450"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="456">
                Updates the threshold attribute of the observed object.                
                <param>
                    o The observed object.                    
                </param>
            </javadoc>
            <method name="updateThreshold" type="void" line="460">
                <params>
                    <param name="o" type="CounterMonitorObservedObject"/>
                </params>
                <scope line="461">
                    <scope line="462">
                        <declaration name="threshold_value" type="long" line="463"/>
                        <scope line="464"/>
                        <scope line="484">
                            <scope line="485">
                                <scope line="486"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="494"/>
                </scope>
            </method>
            <javadoc line="500">
                Sets the derived gauge of the specified observed object when the
                  differenceMode flag is set to &lt;CODE&gt;true&lt;/CODE&gt;.  Integer types
                  only are allowed.                
                <param>
                    scanCounter The value of the observed attribute.                    
                </param>
                <param>
                    mod The counter modulus value.                    
                </param>
                <param>
                    o The observed object.                    
                </param>
            </javadoc>
            <method name="setDerivedGaugeWithDifference" type="void" line="508">
                <params>
                    <param name="scanCounter" type="Number"/>
                    <param name="mod" type="Number"/>
                    <param name="o" type="CounterMonitorObservedObject"/>
                </params>
                <declaration name="derived" type="long" line="509"/>
            </method>
            <javadoc line="529">
                Factory method for ObservedObject creation.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createObservedObject" type="ObservedObject" line="533">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="cmo" type="CounterMonitorObservedObject" line="534"/>
            </method>
            <javadoc line="541">
                This method globally sets the derived gauge type for the given
                  &quot;object&quot; and &quot;attribute&quot; after checking that the type of the
                  supplied observed attribute value is one of the value types
                  supported by this monitor.                
            </javadoc>
            <method name="isComparableTypeValid" type="boolean" line="547">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable&lt;?&gt;"/>
                </params>
                <declaration name="o" type="CounterMonitorObservedObject" line="548"/>
                <scope line="550"/>
                <scope line="553"/>
                <scope line="556"/>
                <scope line="559"/>
                <scope line="562"/>
            </method>
            <method name="getDerivedGaugeFromComparable" type="Comparable&lt;?&gt;" line="567">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable&lt;?&gt;"/>
                </params>
                <declaration name="o" type="CounterMonitorObservedObject" line="568"/>
                <scope line="570">
                    <scope line="571"/>
                </scope>
            </method>
            <method name="onErrorNotification" type="void" line="580">
                <params>
                    <param name="notification" type="MonitorNotification"/>
                </params>
                <declaration name="o" type="CounterMonitorObservedObject" line="581"/>
            </method>
            <method name="buildAlarmNotification" type="MonitorNotification" line="587">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable&lt;?&gt;"/>
                </params>
                <declaration name="o" type="CounterMonitorObservedObject" line="588"/>
                <declaration name="alarm" type="MonitorNotification" line="590"/>
                <scope line="591"/>
                <scope line="595"/>
            </method>
            <javadoc line="600">
                Tests if the threshold, offset and modulus of the specified observed
                  object are of the same type as the counter. Only integer types are
                  allowed.
                  Note:
                  If the optional offset or modulus have not been initialized, their
                  default value is an Integer object with a value equal to zero.                
                <param>
                    object The observed object.                    
                </param>
                <param>
                    attribute The observed attribute.                    
                </param>
                <param>
                    value The sample value.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if type is the same,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isThresholdTypeValid" type="boolean" line="613">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable&lt;?&gt;"/>
                </params>
                <declaration name="o" type="CounterMonitorObservedObject" line="614"/>
                <declaration name="c" type="Class&amp;lt;? extends Number&amp;gt;" line="616"/>
            </method>
        </class>
    </source>