<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.monitor">
        <import package="com.sun.jmx.defaults.JmxProperties.MONITOR_LOGGER"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.monitor.MonitorNotification"/>
        <class name="StringMonitor" line="34">
            <extends class="Monitor"/>
            <comment line="62">
                ------------------------------------------
                  PACKAGE CLASSES
                 ------------------------------------------                
            </comment>
            <comment line="84">
                ------------------------------------------
                  PRIVATE VARIABLES
                 ------------------------------------------                
            </comment>
            <comment line="126">
                Flags needed to implement the matching/differing mechanism.                
            </comment>
            <comment line="132">
                ------------------------------------------
                  CONSTRUCTORS
                 ------------------------------------------                
            </comment>
            <comment line="144">
                ------------------------------------------
                  PUBLIC METHODS
                 ------------------------------------------                
            </comment>
            <comment line="176">
                GETTERS AND SETTERS
                --------------------                
            </comment>
            <comment line="352">
                ------------------------------------------
                  PACKAGE METHODS
                 ------------------------------------------                
            </comment>
            <implements interface="StringMonitorMBean"/>
            <javadoc line="34">
                Defines a monitor MBean designed to observe the values of a string
                  attribute.
                  &lt;P&gt;
                  A string monitor sends notifications as follows:
                  &lt;UL&gt;
                  &lt;LI&gt; if the attribute value matches the string to compare value,
                  a {@link MonitorNotification#STRING_TO_COMPARE_VALUE_MATCHEDmatch notification} is sent.
                  The notify match flag must be set to &lt;CODE&gt;true&lt;/CODE&gt;.
                  &lt;BR&gt;Subsequent matchings of the string to compare values do not
                  cause further notifications unless
                  the attribute value differs from the string to compare value.
                  &lt;LI&gt; if the attribute value differs from the string to compare value,
                  a {@link MonitorNotification#STRING_TO_COMPARE_VALUE_DIFFEREDdiffer notification} is sent.
                  The notify differ flag must be set to &lt;CODE&gt;true&lt;/CODE&gt;.
                  &lt;BR&gt;Subsequent differences from the string to compare value do
                  not cause further notifications unless
                  the attribute value matches the string to compare value.
                  &lt;/UL&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="StringMonitorObservedObject" line="67">
                <extends class="ObservedObject"/>
                <method name="StringMonitorObservedObject" type="constructor" line="69">
                    <params>
                        <param name="observedObject" type="ObjectName"/>
                    </params>
                </method>
                <method name="getStatus" type="int" line="73"/>
                <method name="setStatus" type="void" line="76">
                    <params>
                        <param name="status" type="int"/>
                    </params>
                </method>
                <declaration name="status" type="int" line="80"/>
            </class>
            <declaration name="stringToCompare" type="String" line="89"/>
            <javadoc line="89">
                String to compare with the observed attribute.
                  &lt;BR&gt;The default value is an empty character sequence.                
            </javadoc>
            <declaration name="notifyMatch" type="boolean" line="95"/>
            <javadoc line="95">
                Flag indicating if the string monitor notifies when matching
                  the string to compare.
                  &lt;BR&gt;The default value is set to &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="notifyDiffer" type="boolean" line="102"/>
            <javadoc line="102">
                Flag indicating if the string monitor notifies when differing
                  from the string to compare.
                  &lt;BR&gt;The default value is set to &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="types" type="String[]" line="109"/>
            <declaration name="notifsInfo" type="MBeanNotificationInfo[]" line="118"/>
            <declaration name="MATCHING" type="int" line="127"/>
            <declaration name="DIFFERING" type="int" line="128"/>
            <declaration name="MATCHING_OR_DIFFERING" type="int" line="129"/>
            <javadoc line="137">
                Default constructor.                
            </javadoc>
            <method name="StringMonitor" type="constructor" line="140"/>
            <javadoc line="149">
                Starts the string monitor.                
            </javadoc>
            <method name="start" type="void" line="152">
                <comment line="159">
                    Reset values.                    
                </comment>
                <scope line="153"/>
                <scope line="160">
                    <declaration name="smo" type="StringMonitorObservedObject" line="161"/>
                </scope>
            </method>
            <javadoc line="168">
                Stops the string monitor.                
            </javadoc>
            <method name="stop" type="void" line="171"/>
            <javadoc line="178">
                Gets the derived gauge of the specified object, if this object is
                  contained in the set of observed MBeans, or &lt;code&gt;null&lt;/code&gt; otherwise.                
                <param>
                    object the name of the MBean whose derived gauge is required.                    
                </param>
                <return>
                    The derived gauge of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGauge" type="String" line="188">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="192">
                Gets the derived gauge timestamp of the specified object, if
                  this object is contained in the set of observed MBeans, or
                  &lt;code&gt;0&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose derived gauge
                      timestamp is to be returned.                    
                </param>
                <return>
                    The derived gauge timestamp of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="204">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="208">
                Returns the derived gauge of the first object in the set of
                  observed MBeans.                
                <return>
                    The derived gauge.                    
                </return>
                <deprecated>
                    As of JMX 1.2, replaced by{@link #getDerivedGauge(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getDerivedGauge" type="String" line="218">
                <scope line="219"/>
                <scope line="221"/>
            </method>
            <javadoc line="226">
                Gets the derived gauge timestamp of the first object in the set
                  of observed MBeans.                
                <return>
                    The derived gauge timestamp.                    
                </return>
                <deprecated>
                    As of JMX 1.2, replaced by{@link #getDerivedGaugeTimeStamp(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="236">
                <scope line="237"/>
                <scope line="239"/>
            </method>
            <javadoc line="244">
                Gets the string to compare with the observed attribute common
                  to all observed MBeans.                
                <return>
                    The string value.                    
                </return>
                <see>
                    #setStringToCompare                    
                </see>
            </javadoc>
            <method name="getStringToCompare" type="String" line="252"/>
            <javadoc line="256">
                Sets the string to compare with the observed attribute common
                  to all observed MBeans.                
                <param>
                    value The string value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified
                      string to compare is null.                    
                </exception>
                <see>
                    #getStringToCompare                    
                </see>
            </javadoc>
            <method name="setStringToCompare" type="void" line="268">
                <params>
                    <param name="value" type="String"/>
                </params>
                <comment line="279">
                    Reset values.                    
                </comment>
                <scope line="270"/>
                <scope line="280">
                    <declaration name="smo" type="StringMonitorObservedObject" line="281"/>
                </scope>
            </method>
            <javadoc line="287">
                Gets the matching notification&apos;s on/off switch value common to
                  all observed MBeans.                
                <return>
                    <CODE>true</CODE> if the string monitor notifies when
                      matching the string to compare, <CODE>false</CODE> otherwise.                    
                </return>
                <see>
                    #setNotifyMatch                    
                </see>
            </javadoc>
            <method name="getNotifyMatch" type="boolean" line="296"/>
            <javadoc line="300">
                Sets the matching notification&apos;s on/off switch value common to
                  all observed MBeans.                
                <param>
                    value The matching notification's on/off switch value.                    
                </param>
                <see>
                    #getNotifyMatch                    
                </see>
            </javadoc>
            <method name="setNotifyMatch" type="void" line="308">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="314">
                Gets the differing notification&apos;s on/off switch value common to
                  all observed MBeans.                
                <return>
                    <CODE>true</CODE> if the string monitor notifies when
                      differing from the string to compare, <CODE>false</CODE> otherwise.                    
                </return>
                <see>
                    #setNotifyDiffer                    
                </see>
            </javadoc>
            <method name="getNotifyDiffer" type="boolean" line="323"/>
            <javadoc line="327">
                Sets the differing notification&apos;s on/off switch value common to
                  all observed MBeans.                
                <param>
                    value The differing notification's on/off switch value.                    
                </param>
                <see>
                    #getNotifyDiffer                    
                </see>
            </javadoc>
            <method name="setNotifyDiffer" type="void" line="335">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="341">
                Returns a &lt;CODE&gt;NotificationInfo&lt;/CODE&gt; object containing the name of
                  the Java class of the notification and the notification types sent by
                  the string monitor.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="347"/>
            <javadoc line="357">
                Factory method for ObservedObject creation.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createObservedObject" type="ObservedObject" line="363">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="smo" type="StringMonitorObservedObject" line="364"/>
            </method>
            <javadoc line="370">
                Check that the type of the supplied observed attribute
                  value is one of the value types supported by this monitor.                
            </javadoc>
            <method name="isComparableTypeValid" type="boolean" line="377">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
                <comment line="379">
                    Check that the observed attribute is of type &quot;String&quot;.                    
                </comment>
                <scope line="380"/>
            </method>
            <method name="onErrorNotification" type="void" line="387">
                <params>
                    <param name="notification" type="MonitorNotification"/>
                </params>
                <comment line="394">
                    Reset values.                    
                </comment>
                <declaration name="o" type="StringMonitorObservedObject" line="388"/>
            </method>
            <method name="buildAlarmNotification" type="MonitorNotification" line="402">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
                <comment line="413">
                    Send matching notification if notifyMatch is true.
                     Send differing notification if notifyDiffer is true.                    
                </comment>
                <declaration name="type" type="String" line="403"/>
                <declaration name="msg" type="String" line="404"/>
                <declaration name="trigger" type="Object" line="405"/>
                <declaration name="o" type="StringMonitorObservedObject" line="407"/>
                <scope line="415">
                    <scope line="416">
                        <scope line="417"/>
                    </scope>
                    <scope line="423">
                        <scope line="424"/>
                    </scope>
                </scope>
                <scope line="431">
                    <scope line="432">
                        <scope line="433">
                            <scope line="434"/>
                        </scope>
                    </scope>
                    <scope line="441">
                        <scope line="442">
                            <scope line="443"/>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>