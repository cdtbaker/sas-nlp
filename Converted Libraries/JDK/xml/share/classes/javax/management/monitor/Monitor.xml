<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.monitor">
        <import package="com.sun.jmx.defaults.JmxProperties.MONITOR_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.mbeanserver.Introspector"/>
        <import package="java.io.IOException"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.concurrent.CopyOnWriteArrayList"/>
        <import package="java.util.concurrent.Executors"/>
        <import package="java.util.concurrent.Future"/>
        <import package="java.util.concurrent.LinkedBlockingQueue"/>
        <import package="java.util.concurrent.ScheduledExecutorService"/>
        <import package="java.util.concurrent.ScheduledFuture"/>
        <import package="java.util.concurrent.ThreadFactory"/>
        <import package="java.util.concurrent.ThreadPoolExecutor"/>
        <import package="java.util.concurrent.TimeUnit"/>
        <import package="java.util.concurrent.atomic.AtomicInteger"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.monitor.MonitorNotification"/>
        <class name="Monitor" line="38">
            <extends class="NotificationBroadcasterSupport"/>
            <implements interface="MonitorMBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="38">
                Defines the part common to all monitor MBeans.
                  A monitor MBean monitors values of an attribute common to a set of observed
                  MBeans. The observed attribute is monitored at intervals specified by the
                  granularity period. A gauge value (derived gauge) is derived from the values
                  of the observed attribute.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="ObservedObject" line="47">
                <method name="ObservedObject" type="constructor" line="48">
                    <params>
                        <param name="observedObject" type="ObjectName"/>
                    </params>
                </method>
                <method name="getObservedObject" type="ObjectName" line="51"/>
                <method name="getAlreadyNotified" type="int" line="54"/>
                <method name="setAlreadyNotified" type="void" line="57">
                    <params>
                        <param name="alreadyNotified" type="int"/>
                    </params>
                </method>
                <method name="getDerivedGauge" type="Object" line="60"/>
                <method name="setDerivedGauge" type="void" line="63">
                    <params>
                        <param name="derivedGauge" type="Object"/>
                    </params>
                </method>
                <method name="getDerivedGaugeTimeStamp" type="long" line="66"/>
                <method name="setDerivedGaugeTimeStamp" type="void" line="69">
                    <params>
                        <param name="derivedGaugeTimeStamp" type="long"/>
                    </params>
                </method>
                <declaration name="observedObject" type="ObjectName" line="72"/>
                <declaration name="alreadyNotified" type="int" line="73"/>
                <declaration name="derivedGauge" type="Object" line="74"/>
                <declaration name="derivedGaugeTimeStamp" type="long" line="75"/>
            </class>
            <declaration name="observedAttribute" type="String" line="77"/>
            <javadoc line="77">
                Attribute to observe.                
            </javadoc>
            <declaration name="granularityPeriod" type="long" line="81"/>
            <javadoc line="81">
                Monitor granularity period (in milliseconds).
                  The default value is set to 10 seconds.                
            </javadoc>
            <declaration name="isActive" type="boolean" line="86"/>
            <javadoc line="86">
                Monitor state.
                  The default value is set to &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="sequenceNumber" type="AtomicLong" line="91"/>
            <javadoc line="91">
                Monitor sequence number.
                  The default value is set to 0.                
            </javadoc>
            <declaration name="isComplexTypeAttribute" type="boolean" line="96"/>
            <javadoc line="96">
                Complex type attribute flag.
                  The default value is set to &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="firstAttribute" type="String" line="101"/>
            <javadoc line="101">
                First attribute name extracted from complex type attribute name.                
            </javadoc>
            <declaration name="remainingAttributes" type="List&lt;String&gt;" line="105"/>
            <javadoc line="105">
                Remaining attribute names extracted from complex type attribute name.                
            </javadoc>
            <declaration name="noPermissionsACC" type="AccessControlContext" line="109"/>
            <javadoc line="109">
                AccessControlContext of the Monitor.start() caller.                
            </javadoc>
            <declaration name="acc" type="AccessControlContext" line="113"/>
            <declaration name="scheduler" type="ScheduledExecutorService" line="114"/>
            <javadoc line="114">
                Scheduler Service.                
            </javadoc>
            <declaration name="executors" type="Map&lt;ThreadPoolExecutor,Void&gt;" line="118"/>
            <javadoc line="118">
                Map containing the thread pool executor per thread group.                
            </javadoc>
            <declaration name="executorsLock" type="Object" line="122"/>
            <javadoc line="122">
                Lock for executors map.                
            </javadoc>
            <declaration name="maximumPoolSize" type="int" line="126"/>
            <javadoc line="126">
                Maximum Pool Size                
            </javadoc>
            <scope line="130">
                <declaration name="maximumPoolSizeSysProp" type="String" line="131"/>
                <declaration name="maximumPoolSizeStr" type="String" line="132"/>
                <scope line="133"/>
                <scope line="136">
                    <declaration name="maximumPoolSizeTmp" type="int" line="137"/>
                    <scope line="138"/>
                    <scope line="141">
                        <scope line="142"/>
                    </scope>
                    <scope line="148"/>
                    <scope line="151"/>
                </scope>
            </scope>
            <declaration name="monitorFuture" type="Future&lt;?&gt;" line="156"/>
            <javadoc line="156">
                Future associated to the current monitor task.                
            </javadoc>
            <declaration name="schedulerTask" type="SchedulerTask" line="160"/>
            <javadoc line="160">
                Scheduler task to be executed by the Scheduler Service.                
            </javadoc>
            <declaration name="schedulerFuture" type="ScheduledFuture&lt;?&gt;" line="164"/>
            <javadoc line="164">
                ScheduledFuture associated to the current scheduler task.                
            </javadoc>
            <declaration name="capacityIncrement" type="int" line="168"/>
            <javadoc line="168">
                The amount by which the capacity of the monitor arrays are
                  automatically incremented when their size becomes greater than
                  their capacity.                
            </javadoc>
            <declaration name="elementCount" type="int" line="174"/>
            <javadoc line="174">
                The number of valid components in the vector of observed objects.                
            </javadoc>
            <declaration name="alreadyNotified" type="int" line="178"/>
            <javadoc line="178">
                Monitor errors that have already been notified.                
                <deprecated>
                    equivalent to {@link #alreadyNotifieds}[0].                    
                </deprecated>
            </javadoc>
            <declaration name="alreadyNotifieds" type="int" line="183"/>
            <javadoc line="183">
                &lt;p&gt;Selected monitor errors that have already been notified.&lt;/p&gt;
                  &lt;p&gt;Each element in this array corresponds to an observed object
                  in the vector.  It contains a bit mask of the flags {@link #OBSERVED_OBJECT_ERROR_NOTIFIED} etc, indicating whether the
                  corresponding notification has already been sent for the MBean
                  being monitored.&lt;/p&gt;                
            </javadoc>
            <declaration name="server" type="MBeanServer" line="191"/>
            <javadoc line="191">
                Reference to the MBean server.  This reference is null when the
                  monitor MBean is not registered in an MBean server.  This
                  reference is initialized before the monitor MBean is registered
                  in the MBean server.                
                <see>
                    #preRegister(MBeanServer server,ObjectName name)                    
                </see>
            </javadoc>
            <declaration name="RESET_FLAGS_ALREADY_NOTIFIED" type="int" line="199"/>
            <javadoc line="199">
                This flag is used to reset the {@link #alreadyNotifiedsalreadyNotifieds} monitor attribute.                
            </javadoc>
            <declaration name="OBSERVED_OBJECT_ERROR_NOTIFIED" type="int" line="203"/>
            <javadoc line="203">
                Flag denoting that a notification has occurred after changing
                  the observed object.  This flag is used to check that the new
                  observed object is registered in the MBean server at the time
                  of the first notification.                
            </javadoc>
            <declaration name="OBSERVED_ATTRIBUTE_ERROR_NOTIFIED" type="int" line="210"/>
            <javadoc line="210">
                Flag denoting that a notification has occurred after changing
                  the observed attribute.  This flag is used to check that the
                  new observed attribute belongs to the observed object at the
                  time of the first notification.                
            </javadoc>
            <declaration name="OBSERVED_ATTRIBUTE_TYPE_ERROR_NOTIFIED" type="int" line="217"/>
            <javadoc line="217">
                Flag denoting that a notification has occurred after changing
                  the observed object or the observed attribute.  This flag is
                  used to check that the observed attribute type is correct
                  (depending on the monitor in use) at the time of the first
                  notification.                
            </javadoc>
            <declaration name="RUNTIME_ERROR_NOTIFIED" type="int" line="225"/>
            <javadoc line="225">
                Flag denoting that a notification has occurred after changing
                  the observed object or the observed attribute.  This flag is
                  used to notify any exception (except the cases described above)
                  when trying to get the value of the observed attribute at the
                  time of the first notification.                
            </javadoc>
            <declaration name="dbgTag" type="String" line="233"/>
            <javadoc line="233">
                This field is retained for compatibility but should not be referenced.                
                <deprecated>
                    No replacement.                    
                </deprecated>
            </javadoc>
            <declaration name="observedObjects" type="List&lt;ObservedObject&gt;" line="238"/>
            <javadoc line="238">
                List of ObservedObjects to which the attribute to observe belongs.                
            </javadoc>
            <declaration name="THRESHOLD_ERROR_NOTIFIED" type="int" line="242"/>
            <javadoc line="242">
                Flag denoting that a notification has occurred after changing
                  the threshold. This flag is used to notify any exception
                  related to invalid thresholds settings.                
            </javadoc>
            <declaration name="NumericalType" type="enum" line="248"/>
            <javadoc line="248">
                Enumeration used to keep trace of the derived gauge type
                  in counter and gauge monitors.                
            </javadoc>
            <scope line="252"/>
            <declaration name="INTEGER_ZERO" type="Integer" line="253"/>
            <javadoc line="253">
                Constant used to initialize all the numeric values.                
            </javadoc>
            <javadoc line="257">
                Allows the monitor MBean to perform any operations it needs
                  before being registered in the MBean server.
                  &lt;P&gt;
                  Initializes the reference to the MBean server.                
                <param>
                    server The MBean server in which the monitor MBean will
                      be registered.                    
                </param>
                <param>
                    name The object name of the monitor MBean.                    
                </param>
                <return>
                    The name of the monitor MBean registered.                    
                </return>
                <exception>
                    Exception                    
                </exception>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="268">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="273">
                Allows the monitor MBean to perform any operations needed after
                  having been registered in the MBean server or after the
                  registration has failed.
                  &lt;P&gt;
                  Not used in this context.                
            </javadoc>
            <method name="postRegister" type="void" line="280">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <javadoc line="282">
                Allows the monitor MBean to perform any operations it needs
                  before being unregistered by the MBean server.
                  &lt;P&gt;
                  Stops the monitor.                
                <exception>
                    Exception                    
                </exception>
            </javadoc>
            <method name="preDeregister" type="void" line="289"/>
            <javadoc line="293">
                Allows the monitor MBean to perform any operations needed after
                  having been unregistered by the MBean server.
                  &lt;P&gt;
                  Not used in this context.                
            </javadoc>
            <method name="postDeregister" type="void" line="299"/>
            <method name="start" type="void" line="301"/>
            <javadoc line="301">
                Starts the monitor.                
            </javadoc>
            <method name="stop" type="void" line="305"/>
            <javadoc line="305">
                Stops the monitor.                
            </javadoc>
            <javadoc line="309">
                Returns the object name of the first object in the set of observed
                  MBeans, or &lt;code&gt;null&lt;/code&gt; if there is no such object.                
                <return>
                    The object being observed.                    
                </return>
                <see>
                    #setObservedObject(ObjectName)                    
                </see>
                <deprecated>
                    As of JMX 1.2, replaced by {@link #getObservedObjects}                    
                </deprecated>
            </javadoc>
            <method name="getObservedObject" type="ObjectName" line="316">
                <scope line="317"/>
                <scope line="320"/>
            </method>
            <javadoc line="324">
                Removes all objects from the set of observed objects, and then adds the
                  specified object.                
                <param>
                    object The object to observe.                    
                </param>
                <exception>
                    IllegalArgumentException The specified
                      object is null.                    
                </exception>
                <see>
                    #getObservedObject()                    
                </see>
                <deprecated>
                    As of JMX 1.2, replaced by {@link #addObservedObject}                    
                </deprecated>
            </javadoc>
            <method name="setObservedObject" type="void" line="333">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="339">
                Adds the specified object in the set of observed MBeans, if this object
                  is not already present.                
                <param>
                    object The object to observe.                    
                </param>
                <exception>
                    IllegalArgumentException The specified object is null.                    
                </exception>
            </javadoc>
            <method name="addObservedObject" type="void" line="345">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <scope line="346"/>
                <declaration name="o" type="ObservedObject" line="350"/>
            </method>
            <javadoc line="357">
                Removes the specified object from the set of observed MBeans.                
                <param>
                    object The object to remove.                    
                </param>
            </javadoc>
            <method name="removeObservedObject" type="void" line="361">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="o" type="ObservedObject" line="363"/>
                <scope line="364"/>
            </method>
            <javadoc line="369">
                Tests whether the specified object is in the set of observed MBeans.                
                <param>
                    object The object to check.                    
                </param>
                <return>
                    <CODE>true</CODE> if the specified object is present,
                      <CODE>false</CODE> otherwise.                    
                </return>
            </javadoc>
            <method name="containsObservedObject" type="boolean" line="375">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="378">
                Returns an array containing the objects being observed.                
                <return>
                    The objects being observed.                    
                </return>
            </javadoc>
            <method name="getObservedObjects" type="ObjectName[]" line="382">
                <declaration name="names" type="ObjectName[]" line="383"/>
            </method>
            <javadoc line="387">
                Gets the attribute being observed.
                  &lt;BR&gt;The observed attribute is not initialized by default (set to null).                
                <return>
                    The attribute being observed.                    
                </return>
                <see>
                    #setObservedAttribute                    
                </see>
            </javadoc>
            <method name="getObservedAttribute" type="String" line="393"/>
            <javadoc line="396">
                Sets the attribute to observe.
                  &lt;BR&gt;The observed attribute is not initialized by default (set to null).                
                <param>
                    attribute The attribute to observe.                    
                </param>
                <exception>
                    IllegalArgumentException The specified
                      attribute is null.                    
                </exception>
                <see>
                    #getObservedAttribute                    
                </see>
            </javadoc>
            <method name="setObservedAttribute" type="void" line="404">
                <params>
                    <param name="attribute" type="String"/>
                </params>
                <scope line="405"/>
                <scope line="408">
                    <declaration name="index" type="int" line="412"/>
                    <scope line="413"/>
                </scope>
            </method>
            <javadoc line="418">
                Gets the granularity period (in milliseconds).
                  &lt;BR&gt;The default value of the granularity period is 10 seconds.                
                <return>
                    The granularity period value.                    
                </return>
                <see>
                    #setGranularityPeriod                    
                </see>
            </javadoc>
            <method name="getGranularityPeriod" type="long" line="424"/>
            <javadoc line="427">
                Sets the granularity period (in milliseconds).
                  &lt;BR&gt;The default value of the granularity period is 10 seconds.                
                <param>
                    period The granularity period value.                    
                </param>
                <exception>
                    IllegalArgumentException The granularity
                      period is less than or equal to zero.                    
                </exception>
                <see>
                    #getGranularityPeriod                    
                </see>
            </javadoc>
            <method name="setGranularityPeriod" type="void" line="435">
                <params>
                    <param name="period" type="long"/>
                </params>
                <scope line="436"/>
                <scope line="441"/>
            </method>
            <javadoc line="446">
                Tests whether the monitor MBean is active.  A monitor MBean is
                  marked active when the {@link #start start} method is called.
                  It becomes inactive when the {@link #stop stop} method is
                  called.                
                <return>
                    <CODE>true</CODE> if the monitor MBean is active,
                      <CODE>false</CODE> otherwise.                    
                </return>
            </javadoc>
            <method name="isActive" type="boolean" line="454"/>
            <javadoc line="457">
                Starts the monitor.                
            </javadoc>
            <method name="doStart" type="void" line="460">
                <scope line="462">
                    <scope line="463"/>
                </scope>
            </method>
            <javadoc line="475">
                Stops the monitor.                
            </javadoc>
            <method name="doStop" type="void" line="478">
                <scope line="480">
                    <scope line="481"/>
                </scope>
            </method>
            <javadoc line="491">
                Gets the derived gauge of the specified object, if this object is
                  contained in the set of observed MBeans, or &lt;code&gt;null&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose derived gauge is to
                      be returned.                    
                </param>
                <return>
                    The derived gauge of the specified object.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDerivedGauge" type="Object" line="499">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="o" type="ObservedObject" line="500"/>
            </method>
            <javadoc line="503">
                Gets the derived gauge timestamp of the specified object, if
                  this object is contained in the set of observed MBeans, or
                  &lt;code&gt;0&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose derived gauge
                      timestamp is to be returned.                    
                </param>
                <return>
                    The derived gauge timestamp of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="511">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="o" type="ObservedObject" line="512"/>
            </method>
            <method name="getAttribute" type="Object" line="515">
                <params>
                    <param name="mbsc" type="MBeanServerConnection"/>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                </params>
                <declaration name="lookupMBeanInfo" type="boolean" line="516"/>
                <scope line="517"/>
                <declaration name="mbi" type="MBeanInfo" line="522"/>
                <scope line="523">
                    <scope line="524"/>
                    <scope line="527"/>
                </scope>
                <scope line="531"/>
                <declaration name="fa" type="String" line="534"/>
                <scope line="535">
                    <scope line="538">
                        <scope line="539">
                            <declaration name="mbaiArray" type="MBeanAttributeInfo" line="540"/>
                            <scope line="541">
                                <scope line="542"/>
                            </scope>
                            <scope line="547">
                                <declaration name="tokens" type="String" line="548"/>
                            </scope>
                        </scope>
                        <scope line="554"/>
                    </scope>
                </scope>
            </method>
            <method name="getComparableFromAttribute" type="Comparable<?>" line="562">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="563">
                    <declaration name="v" type="Object" line="564"/>
                </scope>
                <scope line="568"/>
            </method>
            <method name="isComparableTypeValid" type="boolean" line="572">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
            </method>
            <method name="buildErrorNotification" type="String" line="575">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
            </method>
            <method name="onErrorNotification" type="void" line="578">
                <params>
                    <param name="notification" type="MonitorNotification"/>
                </params>
            </method>
            <method name="getDerivedGaugeFromComparable" type="Comparable<?>" line="580">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
            </method>
            <method name="buildAlarmNotification" type="MonitorNotification" line="583">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
            </method>
            <method name="isThresholdTypeValid" type="boolean" line="586">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
            </method>
            <method name="classForType" type="Class<? extends Number>" line="589">
                <params>
                    <param name="type" type="NumericalType"/>
                </params>
            </method>
            <method name="isValidForType" type="boolean" line="607">
                <params>
                    <param name="value" type="Object"/>
                    <param name="c" type="Class<? extends Number>"/>
                </params>
            </method>
            <javadoc line="610">
                Get the specified {@code ObservedObject} if this object is
                  contained in the set of observed MBeans, or {@code null}otherwise.                
                <param>
                    object the name of the {@code ObservedObject} to retrieve.                    
                </param>
                <return>
                    The {@code ObservedObject} associated to the supplied{@code ObjectName}.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getObservedObject" type="ObservedObject" line="617">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="621">
                Factory method for ObservedObject creation.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createObservedObject" type="ObservedObject" line="625">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="628">
                Create the {@link #alreadyNotified} array from
                  the {@code ObservedObject} array list.                
            </javadoc>
            <method name="createAlreadyNotified" type="void" line="632">
                <scope line="635"/>
            </method>
            <javadoc line="640">
                Update the deprecated {@link #alreadyNotified} field.                
            </javadoc>
            <method name="updateDeprecatedAlreadyNotified" type="void" line="643"/>
            <javadoc line="647">
                Update the {@link #alreadyNotifieds} array element at the given index
                  with the already notified flag in the given {@code ObservedObject}.
                  Ensure the deprecated {@link #alreadyNotified} field is updated
                  if appropriate.                
            </javadoc>
            <method name="updateAlreadyNotified" type="void" line="653">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="657">
                Check if the given bits in the given element of {@link #alreadyNotifieds}are set.                
            </javadoc>
            <method name="isAlreadyNotified" type="boolean" line="660">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <javadoc line="663">
                Set the given bits in the given element of {@link #alreadyNotifieds}.
                  Ensure the deprecated {@link #alreadyNotified} field is updated
                  if appropriate.                
            </javadoc>
            <method name="setAlreadyNotified" type="void" line="668">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="index" type="int"/>
                    <param name="mask" type="int"/>
                    <param name="an" type="int"/>
                </params>
                <declaration name="i" type="int" line="669"/>
            </method>
            <javadoc line="674">
                Reset the given bits in the given element of {@link #alreadyNotifieds}.
                  Ensure the deprecated {@link #alreadyNotified} field is updated
                  if appropriate.                
            </javadoc>
            <method name="resetAlreadyNotified" type="void" line="679">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="index" type="int"/>
                    <param name="mask" type="int"/>
                </params>
            </method>
            <javadoc line="683">
                Reset all bits in the given element of {@link #alreadyNotifieds}.
                  Ensure the deprecated {@link #alreadyNotified} field is updated
                  if appropriate.                
            </javadoc>
            <method name="resetAllAlreadyNotified" type="void" line="688">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="index" type="int"/>
                    <param name="an" type="int"/>
                </params>
                <declaration name="i" type="int" line="689"/>
            </method>
            <javadoc line="694">
                Check if the {@link #alreadyNotifieds} array has been modified.
                  If true recompute the index for the given observed object.                
            </javadoc>
            <method name="computeAlreadyNotifiedIndex" type="int" line="698">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="index" type="int"/>
                    <param name="an" type="int"/>
                </params>
                <scope line="699"/>
                <scope line="702"/>
            </method>
            <javadoc line="706">
                This method is used by the monitor MBean to create and send a
                  monitor notification to all the listeners registered for this
                  kind of notification.                
                <param>
                    type The notification type.                    
                </param>
                <param>
                    timeStamp The notification emission date.                    
                </param>
                <param>
                    msg The notification message.                    
                </param>
                <param>
                    derGauge The derived gauge.                    
                </param>
                <param>
                    trigger The threshold/string (depending on the monitor
                      type) that triggered off the notification.                    
                </param>
                <param>
                    object The ObjectName of the observed object that triggered
                      off the notification.                    
                </param>
                <param>
                    onError Flag indicating if this monitor notification is
                      an error notification or an alarm notification.                    
                </param>
            </javadoc>
            <method name="sendNotification" type="void" line="721">
                <params>
                    <param name="type" type="String"/>
                    <param name="timeStamp" type="long"/>
                    <param name="msg" type="String"/>
                    <param name="derGauge" type="Object"/>
                    <param name="trigger" type="Object"/>
                    <param name="object" type="ObjectName"/>
                    <param name="onError" type="boolean"/>
                </params>
                <scope line="723"/>
                <declaration name="seqno" type="long" line="726"/>
                <declaration name="mn" type="MonitorNotification" line="727"/>
            </method>
            <javadoc line="731">
                This method is called by the monitor each time
                  the granularity period has been exceeded.                
                <param>
                    o The observed object.                    
                </param>
            </javadoc>
            <method name="monitor" type="void" line="736">
                <params>
                    <param name="o" type="ObservedObject"/>
                    <param name="index" type="int"/>
                    <param name="an" type="int"/>
                </params>
                <declaration name="attribute" type="String" line="737"/>
                <declaration name="notifType" type="String" line="738"/>
                <declaration name="msg" type="String" line="739"/>
                <declaration name="derGauge" type="Object" line="740"/>
                <declaration name="trigger" type="Object" line="741"/>
                <declaration name="object" type="ObjectName" line="742"/>
                <declaration name="value" type="Comparable&lt;?&gt;" line="743"/>
                <declaration name="alarm" type="MonitorNotification" line="744"/>
                <scope line="746">
                    <scope line="749"/>
                </scope>
                <declaration name="attributeValue" type="Object" line="753"/>
                <scope line="754">
                    <scope line="757"/>
                </scope>
                <scope line="764">
                    <scope line="766"/>
                </scope>
                <scope line="774">
                    <scope line="776"/>
                </scope>
                <scope line="784">
                    <scope line="786"/>
                </scope>
                <scope line="794">
                    <scope line="796"/>
                </scope>
                <scope line="804">
                    <scope line="805"/>
                    <scope line="808"/>
                </scope>
                <scope line="816">
                    <scope line="818"/>
                </scope>
                <scope line="826">
                    <scope line="828"/>
                </scope>
                <scope line="836">
                    <scope line="839">
                        <scope line="840"/>
                        <scope line="843">
                            <scope line="845"/>
                        </scope>
                        <scope line="853">
                            <scope line="855"/>
                        </scope>
                        <scope line="863">
                            <scope line="865"/>
                        </scope>
                    </scope>
                    <scope line="874">
                        <scope line="875">
                            <scope line="877"/>
                        </scope>
                    </scope>
                    <scope line="885">
                        <scope line="886">
                            <scope line="888"/>
                        </scope>
                    </scope>
                    <scope line="896">
                        <scope line="898">
                            <scope line="900"/>
                        </scope>
                    </scope>
                    <scope line="907"/>
                </scope>
            </method>
            <javadoc line="918">
                Cleanup the scheduler and monitor tasks futures.                
            </javadoc>
            <method name="cleanupFutures" type="void" line="921">
                <scope line="922"/>
                <scope line="926"/>
            </method>
            <javadoc line="931">
                Cleanup the &quot;is complex type attribute&quot; info.                
            </javadoc>
            <method name="cleanupIsComplexTypeAttribute" type="void" line="934"/>
            <class name="SchedulerTask" line="939">
                <implements interface="Runnable"/>
                <javadoc line="939">
                    SchedulerTask nested class: This class implements the Runnable interface.
                      The SchedulerTask is executed periodically with a given fixed delay by
                      the Scheduled Executor Service.                    
                </javadoc>
                <declaration name="task" type="MonitorTask" line="945"/>
                <method name="SchedulerTask" type="constructor" line="946"/>
                <method name="setMonitorTask" type="void" line="948">
                    <params>
                        <param name="task" type="MonitorTask"/>
                    </params>
                </method>
                <method name="run" type="void" line="951">
                    <scope line="952"/>
                </method>
            </class>
            <class name="MonitorTask" line="957">
                <implements interface="Runnable"/>
                <javadoc line="957">
                    MonitorTask nested class: This class implements the Runnable interface.
                      The MonitorTask is executed periodically with a given fixed delay by the
                      Scheduled Executor Service.                    
                </javadoc>
                <declaration name="executor" type="ThreadPoolExecutor" line="963"/>
                <method name="MonitorTask" type="constructor" line="964">
                    <declaration name="s" type="SecurityManager" line="965"/>
                    <declaration name="group" type="ThreadGroup" line="966"/>
                    <scope line="967">
                        <scope line="968">
                            <declaration name="tf" type="DaemonThreadFactory" line="969"/>
                            <declaration name="tg" type="ThreadGroup" line="970"/>
                            <scope line="971"/>
                        </scope>
                        <scope line="976"/>
                    </scope>
                </method>
                <method name="submit" type="Future<?>" line="983"/>
                <method name="run" type="void" line="986">
                    <declaration name="sf" type="ScheduledFuture&lt;?&gt;" line="987"/>
                    <declaration name="ac" type="AccessControlContext" line="988"/>
                    <scope line="989"/>
                    <anonymous_class line="993">
                        <method name="run" type="Void" line="994">
                            <scope line="995">
                                <declaration name="an" type="int" line="996"/>
                                <declaration name="index" type="int" line="997"/>
                                <scope line="998">
                                    <scope line="999"/>
                                </scope>
                            </scope>
                        </method>
                    </anonymous_class>
                    <declaration name="action" type="PrivilegedAction&lt;Void&gt;" line="993"/>
                    <scope line="1008"/>
                    <scope line="1012">
                        <scope line="1013"/>
                    </scope>
                </method>
            </class>
            <class name="DaemonThreadFactory" line="1020">
                <implements interface="ThreadFactory"/>
                <javadoc line="1020">
                    Daemon thread factory used by the monitor executors.
                      &lt;P&gt;
                      This factory creates all new threads used by an Executor in
                      the same ThreadGroup. If there is a SecurityManager, it uses
                      the group of System.getSecurityManager(), else the group of
                      the thread instantiating this DaemonThreadFactory. Each new
                      thread is created as a daemon thread with priority
                      Thread.NORM_PRIORITY. New threads have names accessible via
                      Thread.getName() of &quot;JMX Monitor &lt;pool-name&gt; Pool [Thread-M]&quot;,
                      where M is the sequence number of the thread created by this
                      factory.                    
                </javadoc>
                <declaration name="group" type="ThreadGroup" line="1034"/>
                <declaration name="threadNumber" type="AtomicInteger" line="1035"/>
                <declaration name="namePrefix" type="String" line="1036"/>
                <declaration name="nameSuffix" type="String" line="1037"/>
                <method name="DaemonThreadFactory" type="constructor" line="1038">
                    <params>
                        <param name="poolName" type="String"/>
                    </params>
                    <declaration name="s" type="SecurityManager" line="1039"/>
                </method>
                <method name="DaemonThreadFactory" type="constructor" line="1043">
                    <params>
                        <param name="poolName" type="String"/>
                        <param name="threadGroup" type="ThreadGroup"/>
                    </params>
                </method>
                <method name="getThreadGroup" type="ThreadGroup" line="1047"/>
                <method name="newThread" type="Thread" line="1050">
                    <params>
                        <param name="r" type="Runnable"/>
                    </params>
                    <declaration name="t" type="Thread" line="1051"/>
                </method>
            </class>
        </class>
    </source>