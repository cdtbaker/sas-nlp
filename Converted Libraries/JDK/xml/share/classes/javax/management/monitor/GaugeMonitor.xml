<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.monitor">
        <import package="com.sun.jmx.defaults.JmxProperties.MONITOR_LOGGER"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.monitor.Monitor.NumericalType"/>
        <import package="javax.management.monitor.MonitorNotification"/>
        <class name="GaugeMonitor" line="35">
            <extends class="Monitor"/>
            <comment line="90">
                ------------------------------------------
                  PACKAGE CLASSES
                 ------------------------------------------                
            </comment>
            <comment line="135">
                ------------------------------------------
                  PRIVATE VARIABLES
                 ------------------------------------------                
            </comment>
            <comment line="199">
                Flags needed to implement the hysteresis mechanism.                
            </comment>
            <comment line="205">
                ------------------------------------------
                  CONSTRUCTORS
                 ------------------------------------------                
            </comment>
            <comment line="217">
                ------------------------------------------
                  PUBLIC METHODS
                 ------------------------------------------                
            </comment>
            <comment line="250">
                GETTERS AND SETTERS
                --------------------                
            </comment>
            <comment line="488">
                ------------------------------------------
                  PRIVATE METHODS
                 ------------------------------------------                
            </comment>
            <comment line="744">
                ------------------------------------------
                  PACKAGE METHODS
                 ------------------------------------------                
            </comment>
            <implements interface="GaugeMonitorMBean"/>
            <javadoc line="35">
                Defines a monitor MBean designed to observe the values of a gauge attribute.
                  &lt;P&gt; A gauge monitor observes an attribute that is continuously
                  variable with time. A gauge monitor sends notifications as
                  follows:
                  &lt;UL&gt;
                  &lt;LI&gt; if the attribute value is increasing and becomes equal to or
                  greater than the high threshold value, a {@link MonitorNotification#THRESHOLD_HIGH_VALUE_EXCEEDED threshold high
                  notification} is sent. The notify high flag must be set to
                  &lt;CODE&gt;true&lt;/CODE&gt;.
                  &lt;BR&gt;Subsequent crossings of the high threshold value do not cause
                  further notifications unless the attribute value becomes equal to
                  or less than the low threshold value.&lt;/LI&gt;
                  &lt;LI&gt; if the attribute value is decreasing and becomes equal to or
                  less than the low threshold value, a {@link MonitorNotification#THRESHOLD_LOW_VALUE_EXCEEDED threshold low
                  notification} is sent. The notify low flag must be set to
                  &lt;CODE&gt;true&lt;/CODE&gt;.
                  &lt;BR&gt;Subsequent crossings of the low threshold value do not cause
                  further notifications unless the attribute value becomes equal to
                  or greater than the high threshold value.&lt;/LI&gt;
                  &lt;/UL&gt;
                  This provides a hysteresis mechanism to avoid repeated triggering
                  of notifications when the attribute value makes small oscillations
                  around the high or low threshold value.
                  &lt;P&gt; If the gauge difference mode is used, the value of the derived
                  gauge is calculated as the difference between the observed gauge
                  values for two successive observations.
                  &lt;BR&gt;The derived gauge value (V[t]) is calculated using the following method:
                  &lt;UL&gt;
                  &lt;LI&gt;V[t] = gauge[t] - gauge[t-GP]&lt;/LI&gt;
                  &lt;/UL&gt;
                  This implementation of the gauge monitor requires the observed
                  attribute to be of the type integer or floating-point
                  (&lt;CODE&gt;Byte&lt;/CODE&gt;, &lt;CODE&gt;Integer&lt;/CODE&gt;, &lt;CODE&gt;Short&lt;/CODE&gt;,
                  &lt;CODE&gt;Long&lt;/CODE&gt;, &lt;CODE&gt;Float&lt;/CODE&gt;, &lt;CODE&gt;Double&lt;/CODE&gt;).                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="GaugeMonitorObservedObject" line="95">
                <extends class="ObservedObject"/>
                <method name="GaugeMonitorObservedObject" type="constructor" line="97">
                    <params>
                        <param name="observedObject" type="ObjectName"/>
                    </params>
                </method>
                <method name="getDerivedGaugeValid" type="boolean" line="101"/>
                <method name="setDerivedGaugeValid" type="void" line="105">
                    <params>
                        <param name="derivedGaugeValid" type="boolean"/>
                    </params>
                </method>
                <method name="getType" type="NumericalType" line="108"/>
                <method name="setType" type="void" line="111">
                    <params>
                        <param name="type" type="NumericalType"/>
                    </params>
                </method>
                <method name="getPreviousScanGauge" type="Number" line="114"/>
                <method name="setPreviousScanGauge" type="void" line="118">
                    <params>
                        <param name="previousScanGauge" type="Number"/>
                    </params>
                </method>
                <method name="getStatus" type="int" line="121"/>
                <method name="setStatus" type="void" line="124">
                    <params>
                        <param name="status" type="int"/>
                    </params>
                </method>
                <declaration name="derivedGaugeValid" type="boolean" line="128"/>
                <declaration name="type" type="NumericalType" line="129"/>
                <declaration name="previousScanGauge" type="Number" line="130"/>
                <declaration name="status" type="int" line="131"/>
            </class>
            <declaration name="highThreshold" type="Number" line="140"/>
            <javadoc line="140">
                Gauge high threshold.
                  &lt;BR&gt;The default value is a null Integer object.                
            </javadoc>
            <declaration name="lowThreshold" type="Number" line="147"/>
            <javadoc line="147">
                Gauge low threshold.
                  &lt;BR&gt;The default value is a null Integer object.                
            </javadoc>
            <declaration name="notifyHigh" type="boolean" line="154"/>
            <javadoc line="154">
                Flag indicating if the gauge monitor notifies when exceeding
                  the high threshold.
                  &lt;BR&gt;The default value is &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="notifyLow" type="boolean" line="162"/>
            <javadoc line="162">
                Flag indicating if the gauge monitor notifies when exceeding
                  the low threshold.
                  &lt;BR&gt;The default value is &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="differenceMode" type="boolean" line="170"/>
            <javadoc line="170">
                Flag indicating if the gauge difference mode is used.  If the
                  gauge difference mode is used, the derived gauge is the
                  difference between two consecutive observed values.  Otherwise,
                  the derived gauge is directly the value of the observed
                  attribute.
                  &lt;BR&gt;The default value is set to &lt;CODE&gt;false&lt;/CODE&gt;.                
            </javadoc>
            <declaration name="types" type="String[]" line="181"/>
            <declaration name="notifsInfo" type="MBeanNotificationInfo[]" line="191"/>
            <declaration name="RISING" type="int" line="200"/>
            <declaration name="FALLING" type="int" line="201"/>
            <declaration name="RISING_OR_FALLING" type="int" line="202"/>
            <javadoc line="210">
                Default constructor.                
            </javadoc>
            <method name="GaugeMonitor" type="constructor" line="213"/>
            <javadoc line="222">
                Starts the gauge monitor.                
            </javadoc>
            <method name="start" type="void" line="225">
                <comment line="232">
                    Reset values.                    
                </comment>
                <scope line="226"/>
                <scope line="233">
                    <declaration name="gmo" type="GaugeMonitorObservedObject" line="234"/>
                </scope>
            </method>
            <javadoc line="242">
                Stops the gauge monitor.                
            </javadoc>
            <method name="stop" type="void" line="245"/>
            <javadoc line="252">
                Gets the derived gauge of the specified object, if this object is
                  contained in the set of observed MBeans, or &lt;code&gt;null&lt;/code&gt; otherwise.                
                <param>
                    object the name of the MBean.                    
                </param>
                <return>
                    The derived gauge of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGauge" type="Number" line="262">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="266">
                Gets the derived gauge timestamp of the specified object, if
                  this object is contained in the set of observed MBeans, or
                  &lt;code&gt;0&lt;/code&gt; otherwise.                
                <param>
                    object the name of the object whose derived gauge
                      timestamp is to be returned.                    
                </param>
                <return>
                    The derived gauge timestamp of the specified object.                    
                </return>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="278">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="282">
                Returns the derived gauge of the first object in the set of
                  observed MBeans.                
                <return>
                    The derived gauge.                    
                </return>
                <deprecated>
                    As of JMX 1.2, replaced by{@link #getDerivedGauge(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getDerivedGauge" type="Number" line="292">
                <scope line="293"/>
                <scope line="295"/>
            </method>
            <javadoc line="300">
                Gets the derived gauge timestamp of the first object in the set
                  of observed MBeans.                
                <return>
                    The derived gauge timestamp.                    
                </return>
                <deprecated>
                    As of JMX 1.2, replaced by{@link #getDerivedGaugeTimeStamp(ObjectName)}                    
                </deprecated>
            </javadoc>
            <method name="getDerivedGaugeTimeStamp" type="long" line="310">
                <scope line="311"/>
                <scope line="313"/>
            </method>
            <javadoc line="318">
                Gets the high threshold value common to all observed MBeans.                
                <return>
                    The high threshold value.                    
                </return>
                <see>
                    #setThresholds                    
                </see>
            </javadoc>
            <method name="getHighThreshold" type="Number" line="325"/>
            <javadoc line="329">
                Gets the low threshold value common to all observed MBeans.                
                <return>
                    The low threshold value.                    
                </return>
                <see>
                    #setThresholds                    
                </see>
            </javadoc>
            <method name="getLowThreshold" type="Number" line="336"/>
            <javadoc line="340">
                Sets the high and the low threshold values common to all
                  observed MBeans.                
                <param>
                    highValue The high threshold value.                    
                </param>
                <param>
                    lowValue The low threshold value.                    
                </param>
                <exception>
                    IllegalArgumentException The specified high/low
                      threshold is null or the low threshold is greater than the high
                      threshold or the high threshold and the low threshold are not
                      of the same type.                    
                </exception>
                <see>
                    #getHighThreshold                    
                </see>
                <see>
                    #getLowThreshold                    
                </see>
            </javadoc>
            <method name="setThresholds" type="void" line="356">
                <params>
                    <param name="highValue" type="Number"/>
                    <param name="lowValue" type="Number"/>
                </params>
                <comment line="379">
                    Reset values.                    
                </comment>
                <scope line="358"/>
                <scope line="362"/>
                <scope line="368"/>
                <declaration name="index" type="int" line="380"/>
                <scope line="381">
                    <declaration name="gmo" type="GaugeMonitorObservedObject" line="383"/>
                </scope>
            </method>
            <javadoc line="389">
                Gets the high notification&apos;s on/off switch value common to all
                  observed MBeans.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the gauge monitor notifies when
                      exceeding the high threshold, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
                <see>
                    #setNotifyHigh                    
                </see>
            </javadoc>
            <method name="getNotifyHigh" type="boolean" line="398"/>
            <javadoc line="402">
                Sets the high notification&apos;s on/off switch value common to all
                  observed MBeans.                
                <param>
                    value The high notification&apos;s on/off switch value.                    
                </param>
                <see>
                    #getNotifyHigh                    
                </see>
            </javadoc>
            <method name="setNotifyHigh" type="void" line="410">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="416">
                Gets the low notification&apos;s on/off switch value common to all
                  observed MBeans.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the gauge monitor notifies when
                      exceeding the low threshold, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
                <see>
                    #setNotifyLow                    
                </see>
            </javadoc>
            <method name="getNotifyLow" type="boolean" line="425"/>
            <javadoc line="429">
                Sets the low notification&apos;s on/off switch value common to all
                  observed MBeans.                
                <param>
                    value The low notification&apos;s on/off switch value.                    
                </param>
                <see>
                    #getNotifyLow                    
                </see>
            </javadoc>
            <method name="setNotifyLow" type="void" line="437">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="443">
                Gets the difference mode flag value common to all observed MBeans.                
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the difference mode is used,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
                <see>
                    #setDifferenceMode                    
                </see>
            </javadoc>
            <method name="getDifferenceMode" type="boolean" line="451"/>
            <javadoc line="455">
                Sets the difference mode flag value common to all observed MBeans.                
                <param>
                    value The difference mode flag value.                    
                </param>
                <see>
                    #getDifferenceMode                    
                </see>
            </javadoc>
            <method name="setDifferenceMode" type="void" line="462">
                <params>
                    <param name="value" type="boolean"/>
                </params>
                <comment line="468">
                    Reset values.                    
                </comment>
                <scope line="469">
                    <declaration name="gmo" type="GaugeMonitorObservedObject" line="470"/>
                </scope>
            </method>
            <javadoc line="477">
                Returns a &lt;CODE&gt;NotificationInfo&lt;/CODE&gt; object containing the
                  name of the Java class of the notification and the notification
                  types sent by the gauge monitor.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="483"/>
            <javadoc line="493">
                Updates the derived gauge attribute of the observed object.                
                <param>
                    scanGauge The value of the observed attribute.                    
                </param>
                <param>
                    o The observed object.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the derived gauge value is valid,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.  The derived gauge value is
                      invalid when the differenceMode flag is set to
                      &lt;CODE&gt;true&lt;/CODE&gt; and it is the first notification (so we
                      haven&apos;t 2 consecutive values to update the derived gauge).                    
                </return>
            </javadoc>
            <method name="updateDerivedGauge" type="boolean" line="505">
                <params>
                    <param name="scanGauge" type="Object"/>
                    <param name="o" type="GaugeMonitorObservedObject"/>
                </params>
                <comment line="510">
                    The gauge difference mode is used.                    
                </comment>
                <comment line="514">
                    The previous scan gauge has been initialized.                    
                </comment>
                <comment line="520">
                    The previous scan gauge has not been initialized.
                     We cannot update the derived gauge...                    
                </comment>
                <comment line="528">
                    The gauge difference mode is not used.                    
                </comment>
                <declaration name="is_derived_gauge_valid" type="boolean" line="507"/>
                <scope line="511">
                    <scope line="515"/>
                    <scope line="522"/>
                </scope>
                <scope line="529"/>
            </method>
            <javadoc line="537">
                Updates the notification attribute of the observed object
                  and notifies the listeners only once if the notify flag
                  is set to &lt;CODE&gt;true&lt;/CODE&gt;.                
                <param>
                    o The observed object.                    
                </param>
            </javadoc>
            <method name="updateNotifications" type="MonitorNotification" line="544">
                <params>
                    <param name="o" type="GaugeMonitorObservedObject"/>
                </params>
                <comment line="549">
                    Send high notification if notifyHigh is true.
                     Send low notification if notifyLow is true.                    
                </comment>
                <declaration name="n" type="MonitorNotification" line="546"/>
                <scope line="551">
                    <scope line="554">
                        <scope line="555"/>
                    </scope>
                    <scope line="570">
                        <scope line="571"/>
                    </scope>
                </scope>
                <scope line="585">
                    <scope line="586">
                        <scope line="589">
                            <scope line="590"/>
                        </scope>
                    </scope>
                    <scope line="604">
                        <scope line="607">
                            <scope line="608"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="628">
                Sets the derived gauge when the differenceMode flag is set to
                  &lt;CODE&gt;true&lt;/CODE&gt;.  Both integer and floating-point types are
                  allowed.                
                <param>
                    scanGauge The value of the observed attribute.                    
                </param>
                <param>
                    o The observed object.                    
                </param>
            </javadoc>
            <method name="setDerivedGaugeWithDifference" type="void" line="637">
                <params>
                    <param name="scanGauge" type="Number"/>
                    <param name="o" type="GaugeMonitorObservedObject"/>
                </params>
                <comment line="667">
                    Should never occur...                    
                </comment>
                <declaration name="prev" type="Number" line="638"/>
                <declaration name="der" type="Number" line="639"/>
            </method>
            <javadoc line="675">
                Tests if the first specified Number is greater than or equal to
                  the last.  Both integer and floating-point types are allowed.                
                <param>
                    greater The first Number to compare with the second.                    
                </param>
                <param>
                    less The second Number to compare with the first.                    
                </param>
                <param>
                    type The number type.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the first specified Number is
                      greater than or equal to the last, &lt;CODE&gt;false&lt;/CODE&gt;
                      otherwise.                    
                </return>
            </javadoc>
            <method name="isFirstGreaterThanLast" type="boolean" line="688">
                <params>
                    <param name="greater" type="Number"/>
                    <param name="less" type="Number"/>
                    <param name="type" type="NumericalType"/>
                </params>
                <comment line="701">
                    Should never occur...                    
                </comment>
            </method>
            <javadoc line="708">
                Tests if the first specified Number is strictly greater than the last.
                  Both integer and floating-point types are allowed.                
                <param>
                    greater The first Number to compare with the second.                    
                </param>
                <param>
                    less The second Number to compare with the first.                    
                </param>
                <param>
                    className The number class name.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if the first specified Number is
                      strictly greater than the last, &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isFirstStrictlyGreaterThanLast" type="boolean" line="720">
                <params>
                    <param name="greater" type="Number"/>
                    <param name="less" type="Number"/>
                    <param name="className" type="String"/>
                </params>
                <comment line="736">
                    Should never occur...                    
                </comment>
                <scope line="725"/>
                <scope line="730"/>
                <scope line="734"/>
            </method>
            <javadoc line="749">
                Factory method for ObservedObject creation.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createObservedObject" type="ObservedObject" line="755">
                <params>
                    <param name="object" type="ObjectName"/>
                </params>
                <declaration name="gmo" type="GaugeMonitorObservedObject" line="756"/>
            </method>
            <javadoc line="763">
                This method globally sets the derived gauge type for the given
                  &quot;object&quot; and &quot;attribute&quot; after checking that the type of the
                  supplied observed attribute value is one of the value types
                  supported by this monitor.                
            </javadoc>
            <method name="isComparableTypeValid" type="boolean" line="772">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
                <comment line="779">
                    Check that the observed attribute is either of type
                     &quot;Integer&quot; or &quot;Float&quot;.                    
                </comment>
                <declaration name="o" type="GaugeMonitorObservedObject" line="773"/>
                <scope line="781"/>
                <scope line="783"/>
                <scope line="785"/>
                <scope line="787"/>
                <scope line="789"/>
                <scope line="791"/>
                <scope line="793"/>
            </method>
            <method name="getDerivedGaugeFromComparable" type="Comparable<?>" line="803">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
                <comment line="810">
                    Update the derived gauge attributes and check the
                     validity of the new value. The derived gauge value
                     is invalid when the differenceMode flag is set to
                     true and it is the first notification, i.e. we
                     haven&apos;t got 2 consecutive values to update the
                     derived gauge.                    
                </comment>
                <declaration name="o" type="GaugeMonitorObservedObject" line="804"/>
            </method>
            <method name="onErrorNotification" type="void" line="822">
                <params>
                    <param name="notification" type="MonitorNotification"/>
                </params>
                <comment line="829">
                    Reset values.                    
                </comment>
                <declaration name="o" type="GaugeMonitorObservedObject" line="823"/>
            </method>
            <method name="buildAlarmNotification" type="MonitorNotification" line="838">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
                <comment line="845">
                    Notify the listeners if the updated derived
                     gauge value is valid.                    
                </comment>
                <declaration name="o" type="GaugeMonitorObservedObject" line="839"/>
                <declaration name="alarm" type="MonitorNotification" line="847"/>
            </method>
            <javadoc line="855">
                Tests if the threshold high and threshold low are both of the
                  same type as the gauge.  Both integer and floating-point types
                  are allowed.
                  Note:
                  If the optional lowThreshold or highThreshold have not been
                  initialized, their default value is an Integer object with
                  a value equal to zero.                
                <param>
                    object The observed object.                    
                </param>
                <param>
                    attribute The observed attribute.                    
                </param>
                <param>
                    value The sample value.                    
                </param>
                <return>
                    &lt;CODE&gt;true&lt;/CODE&gt; if type is the same,
                      &lt;CODE&gt;false&lt;/CODE&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isThresholdTypeValid" type="boolean" line="874">
                <params>
                    <param name="object" type="ObjectName"/>
                    <param name="attribute" type="String"/>
                    <param name="value" type="Comparable<?>"/>
                </params>
                <declaration name="o" type="GaugeMonitorObservedObject" line="875"/>
                <declaration name="c" type="Class&lt;? extends Number&gt;" line="880"/>
            </method>
        </class>
    </source>