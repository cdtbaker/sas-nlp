<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.StreamCorruptedException"/>
        <class name="MBeanFeatureInfo" line="34">
            <comment line="47">
                                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="DescriptorRead"/>
            <javadoc line="34">
                &lt;p&gt;Provides general information for an MBean descriptor object.
                  The feature described can be an attribute, an operation, a
                  parameter, or a notification.  Instances of this class are
                  immutable.  Subclasses may be mutable but this is not
                  recommended.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="47"/>
            <declaration name="name" type="String" line="49"/>
            <javadoc line="49">
                The name of the feature.  It is recommended that subclasses call{@link #getName} rather than reading this field, and that they
                  not change it.                
                <serial>
                    The name of the feature.                    
                </serial>
            </javadoc>
            <declaration name="description" type="String" line="58"/>
            <javadoc line="58">
                The human-readable description of the feature.  It is
                  recommended that subclasses call {@link #getDescription} rather
                  than reading this field, and that they not change it.                
                <serial>
                    The human-readable description of the feature.                    
                </serial>
            </javadoc>
            <declaration name="descriptor" type="Descriptor" line="67"/>
            <javadoc line="67">
                @serial The Descriptor for this MBeanFeatureInfo.  This field
                  can be null, which is equivalent to an empty Descriptor.                
            </javadoc>
            <javadoc line="74">
                Constructs an &lt;CODE&gt;MBeanFeatureInfo&lt;/CODE&gt; object.  This
                  constructor is equivalent to {@code MBeanFeatureInfo(name,
                  description, (Descriptor) null}.                
                <param>
                    name The name of the feature.                    
                </param>
                <param>
                    description A human readable description of the feature.                    
                </param>
            </javadoc>
            <method name="MBeanFeatureInfo" type="constructor" line="82">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <javadoc line="86">
                Constructs an &lt;CODE&gt;MBeanFeatureInfo&lt;/CODE&gt; object.                
                <param>
                    name The name of the feature.                    
                </param>
                <param>
                    description A human readable description of the feature.                    
                </param>
                <param>
                    descriptor The descriptor for the feature.  This may be null
                      which is equivalent to an empty descriptor.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MBeanFeatureInfo" type="constructor" line="97">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the name of the feature.                
                <return>
                    the name of the feature.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="108"/>
            <javadoc line="112">
                Returns the human-readable description of the feature.                
                <return>
                    the human-readable description of the feature.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="117"/>
            <javadoc line="121">
                Returns the descriptor for the feature.  Changing the returned value
                  will have no affect on the original descriptor.                
                <return>
                    a descriptor that is either immutable or a copy of the original.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="129"/>
            <javadoc line="133">
                Compare this MBeanFeatureInfo to another.                
                <param>
                    o the object to compare to.                    
                </param>
                <return>
                    true if and only if &lt;code&gt;o&lt;/code&gt; is an MBeanFeatureInfo such
                      that its {@link #getName()}, {@link #getDescription()}, and{@link #getDescriptor()}values are equal (not necessarily identical) to those of this
                      MBeanFeatureInfo.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="144">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <declaration name="p" type="MBeanFeatureInfo" line="149"/>
            </method>
            <method name="hashCode" type="int" line="155"/>
            <javadoc line="160">
                Serializes an {@link MBeanFeatureInfo} to an {@link ObjectOutputStream}.                
                <serialData>
                    For compatibility reasons, an object of this class is serialized as follows.
                      &lt;ul&gt;
                      The method {@link ObjectOutputStream#defaultWriteObject defaultWriteObject()}is called first to serialize the object except the field {@code descriptor}which is declared as transient. The field {@code descriptor} is serialized
                      as follows:
                      &lt;ul&gt;
                      &lt;li&gt;If {@code descriptor} is an instance of the class{@link ImmutableDescriptor}, the method {@link ObjectOutputStream#writewrite(int val)} is called to write a byte with the value {@code 1},
                      then the method {@link ObjectOutputStream#writeObject writeObject(Object obj)}is called twice to serialize the field names and the field values of the{@code descriptor}, respectively as a {@code String[]} and an{@code Object[]};&lt;/li&gt;
                      &lt;li&gt;Otherwise, the method {@link ObjectOutputStream#write write(int val)}is called to write a byte with the value {@code 0}, then the method{@link ObjectOutputStream#writeObject writeObject(Object obj)} is called
                      to serialize directly the field {@code descriptor}.
                      &lt;/ul&gt;
                      &lt;/ul&gt;                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeObject" type="void" line="185">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="189">
                    <declaration name="names" type="String[]" line="193"/>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="204">
                Deserializes an {@link MBeanFeatureInfo} from an {@link ObjectInputStream}.                
                <serialData>
                    For compatibility reasons, an object of this class is deserialized as follows.
                      &lt;ul&gt;
                      The method {@link ObjectInputStream#defaultReadObject defaultReadObject()}is called first to deserialize the object except the field{@code descriptor}, which is not serialized in the default way. Then the method{@link ObjectInputStream#read read()} is called to read a byte, the field{@code descriptor} is deserialized according to the value of the byte value:
                      &lt;ul&gt;
                      &lt;li&gt;1. The method {@link ObjectInputStream#readObject readObject()}is called twice to obtain the field names (a {@code String[]}) and
                      the field values (a {@code Object[]}) of the {@code descriptor}.
                      The two obtained values then are used to construct
                      an {@link ImmutableDescriptor} instance for the field{@code descriptor};&lt;/li&gt;
                      &lt;li&gt;0. The value for the field {@code descriptor} is obtained directly
                      by calling the method {@link ObjectInputStream#readObject readObject()}.
                      If the obtained value is null, the field {@code descriptor} is set to{@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR};&lt;/li&gt;
                      &lt;li&gt;-1. This means that there is no byte to read and that the object is from
                      an earlier version of the JMX API. The field {@code descriptor} is set
                      to {@link ImmutableDescriptor#EMPTY_DESCRIPTOR EMPTY_DESCRIPTOR}&lt;/li&gt;
                      &lt;li&gt;Any other value. A {@link StreamCorruptedException} is thrown.&lt;/li&gt;
                      &lt;/ul&gt;
                      &lt;/ul&gt;                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="readObject" type="void" line="234">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="259">
                    from an earlier version of the JMX API                    
                </comment>
                <declaration name="names" type="String[]" line="240"/>
                <scope line="242"/>
                <scope line="244">
                    <declaration name="values" type="Object[]" line="245"/>
                </scope>
                <scope line="253"/>
            </method>
        </class>
    </source>