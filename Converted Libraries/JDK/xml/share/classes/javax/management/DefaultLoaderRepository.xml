<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <class name="DefaultLoaderRepository" line="30">
            <javadoc line="30">
                &lt;p&gt;Keeps the list of Class Loaders registered in the MBean Server.
                  It provides the necessary methods to load classes using the registered
                  Class Loaders.&lt;/p&gt;
                  &lt;p&gt;This deprecated class is maintained for compatibility.  In
                  previous versions of the JMX API, there was one
                  &lt;code&gt;DefaultLoaderRepository&lt;/code&gt; shared by all MBean servers.
                  As of version 1.2 of the JMX API, that functionality is
                  approximated by using {@link MBeanServerFactory#findMBeanServer} to
                  find all known MBean servers, and consulting the {@link ClassLoaderRepository} of each one.  It is strongly recommended
                  that code referencing &lt;code&gt;DefaultLoaderRepository&lt;/code&gt; be
                  rewritten.&lt;/p&gt;                
                <deprecated>
                    Use{@link javax.management.MBeanServer#getClassLoaderRepository()}instead.                    
                </deprecated>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="53">
                Go through the list of class loaders and try to load the requested class.
                  The method will stop as soon as the class is found. If the class
                  is not found the method will throw a &lt;CODE&gt;ClassNotFoundException&lt;/CODE&gt;
                  exception.                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be found.                    
                </exception>
            </javadoc>
            <method name="loadClass" type="Class<?>" line="66">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="71">
                Go through the list of class loaders but exclude the given class loader, then try to load
                  the requested class.
                  The method will stop as soon as the class is found. If the class
                  is not found the method will throw a &lt;CODE&gt;ClassNotFoundException&lt;/CODE&gt;
                  exception.                
                <param>
                    className The name of the class to be loaded.                    
                </param>
                <param>
                    loader The class loader to be excluded.                    
                </param>
                <return>
                    the loaded class.                    
                </return>
                <exception>
                    ClassNotFoundException The specified class could not be found.                    
                </exception>
            </javadoc>
            <method name="loadClassWithout" type="Class<?>" line="86">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="className" type="String"/>
                </params>
            </method>
        </class>
    </source>