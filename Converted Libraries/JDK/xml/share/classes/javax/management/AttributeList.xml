<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.LinkedHashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <class name="AttributeList" line="34">
            <extends class="ArrayList">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </extends>
            <comment line="51">
                We cannot extend ArrayList&lt;Attribute&gt; because our legacy
                add(Attribute) method would then override add(E) in ArrayList&lt;E&gt;,
                and our return value is void whereas ArrayList.add(E)&apos;s is boolean.
                Likewise for set(int,Attribute).  Grrr.  We cannot use covariance
                to override the most important methods and have them return
                Attribute, either, because that would break subclasses that
                override those methods in turn (using the original return type
                of Object).  Finally, we cannot implement Iterable&lt;Attribute&gt;
                so you could write
                for (Attribute a : attributeList)
                because ArrayList&lt;&gt; implements Iterable&lt;&gt; and the same class cannot
                implement two versions of a generic interface.  Instead we provide
                the asList() method so you can write
                for (Attribute a : attributeList.asList())                
            </comment>
            <comment line="71">
                                
            </comment>
            <comment line="259">
                Override all of the methods from ArrayList&lt;Object&gt; that might add
                 a non-Attribute to the List, and disallow that if asList has ever
                 been called on this instance.                
            </comment>
            <javadoc line="34">
                &lt;p&gt;Represents a list of values for attributes of an MBean.  See the{@link MBeanServerConnection#getAttributes getAttributes} and{@link MBeanServerConnection#setAttributes setAttributes} methods of{@link MBeanServer} and {@link MBeanServerConnection}.&lt;/p&gt;
                  &lt;p id=&quot;type-safe&quot;&gt;For compatibility reasons, it is possible, though
                  highly discouraged, to add objects to an {@code AttributeList} that are
                  not instances of {@code Attribute}.  However, an {@code AttributeList}can be made &lt;em&gt;type-safe&lt;/em&gt;, which means that an attempt to add
                  an object that is not an {@code Attribute} will produce an {@codeIllegalArgumentException}.  An {@code AttributeList} becomes type-safe
                  when the method {@link #asList()} is called on it.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="typeSafe" type="boolean" line="67"/>
            <declaration name="tainted" type="boolean" line="68"/>
            <declaration name="serialVersionUID" type="long" line="71"/>
            <javadoc line="73">
                Constructs an empty &lt;CODE&gt;AttributeList&lt;/CODE&gt;.                
            </javadoc>
            <method name="AttributeList" type="constructor" line="76"/>
            <javadoc line="80">
                Constructs an empty &lt;CODE&gt;AttributeList&lt;/CODE&gt; with
                  the initial capacity specified.                
                <param>
                    initialCapacity the initial capacity of the
                      <code>AttributeList</code>, as specified by {@link ArrayList#ArrayList(int)}.                    
                </param>
            </javadoc>
            <method name="AttributeList" type="constructor" line="88">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="92">
                Constructs an &lt;CODE&gt;AttributeList&lt;/CODE&gt; containing the
                  elements of the &lt;CODE&gt;AttributeList&lt;/CODE&gt; specified, in the
                  order in which they are returned by the
                  &lt;CODE&gt;AttributeList&lt;/CODE&gt;&apos;s iterator.  The
                  &lt;CODE&gt;AttributeList&lt;/CODE&gt; instance has an initial capacity of
                  110% of the size of the &lt;CODE&gt;AttributeList&lt;/CODE&gt; specified.                
                <param>
                    list the <code>AttributeList</code> that defines the initial
                      contents of the new <code>AttributeList</code>.                    
                </param>
                <see>
                    ArrayList#ArrayList(java.util.Collection)                    
                </see>
            </javadoc>
            <method name="AttributeList" type="constructor" line="105">
                <params>
                    <param name="list" type="AttributeList"/>
                </params>
            </method>
            <javadoc line="109">
                Constructs an {@code AttributeList} containing the elements of the{@code List} specified, in the order in which they are returned by
                  the {@code List}&apos;s iterator.                
                <param>
                    list the {@code List} that defines the initial contents of
                      the new {@code AttributeList}.                    
                </param>
                <exception>
                    IllegalArgumentException if the {@code list} parameter
                      is {@code null} or if the {@code list} parameter contains any
                      non-Attribute objects.                    
                </exception>
                <see>
                    ArrayList#ArrayList(java.util.Collection)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="AttributeList" type="constructor" line="125">
                <params>
                    <param name="list" type="List<Attribute>"/>
                </params>
                <comment line="126">
                    Check for null parameter                    
                </comment>
                <comment line="127">
                                        
                </comment>
                <comment line="131">
                    Check for non-Attribute objects                    
                </comment>
                <comment line="132">
                                        
                </comment>
                <comment line="135">
                    Build the List&lt;Attribute&gt;                    
                </comment>
                <comment line="136">
                                        
                </comment>
            </method>
            <javadoc line="140">
                Return a view of this list as a {@code List&lt;Attribute&gt;}.
                  Changes to the returned value are reflected by changes
                  to the original {@code AttributeList} and vice versa.                
                <return>
                    a {@code List<Attribute>} whose contents
                      reflect the contents of this {@code AttributeList}.
                      <p>If this method has ever been called on a given{@code AttributeList} instance, a subsequent attempt to add
                      an object to that instance which is not an {@code Attribute}will fail with a {@code IllegalArgumentException}. For compatibility
                      reasons, an {@code AttributeList} on which this method has never
                      been called does allow objects other than {@code Attribute}s to
                      be added.</p>                    
                </return>
                <throws>
                    IllegalArgumentException if this {@code AttributeList} contains
                      an element that is not an {@code Attribute}.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="asList" type="List<Attribute>" line="162">
                <comment line="165">
                    will throw IllegalArgumentException                    
                </comment>
            </method>
            <javadoc line="169">
                Adds the {@code Attribute} specified as the last element of the list.                
                <param>
                    object  The attribute to be added.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="174">
                <params>
                    <param name="object" type="Attribute"/>
                </params>
            </method>
            <javadoc line="178">
                Inserts the attribute specified as an element at the position specified.
                  Elements with an index greater than or equal to the current position are
                  shifted up. If the index is out of range (index &lt; 0 || index &gt;
                  size()) a RuntimeOperationsException should be raised, wrapping the
                  java.lang.IndexOutOfBoundsException thrown.                
                <param>
                    object  The <CODE>Attribute</CODE> object to be inserted.                    
                </param>
                <param>
                    index The position in the list where the new {@code Attribute}object is to be inserted.                    
                </param>
            </javadoc>
            <method name="add" type="void" line="189">
                <params>
                    <param name="index" type="int"/>
                    <param name="object" type="Attribute"/>
                </params>
                <scope line="190"/>
                <scope line="193"/>
            </method>
            <javadoc line="199">
                Sets the element at the position specified to be the attribute specified.
                  The previous element at that position is discarded. If the index is
                  out of range (index &lt; 0 || index &gt; size() a RuntimeOperationsException
                  should be raised, wrapping the java.lang.IndexOutOfBoundsException thrown.                
                <param>
                    object  The value to which the attribute element should be set.                    
                </param>
                <param>
                    index  The position specified.                    
                </param>
            </javadoc>
            <method name="set" type="void" line="208">
                <params>
                    <param name="index" type="int"/>
                    <param name="object" type="Attribute"/>
                </params>
                <scope line="209"/>
                <scope line="212"/>
            </method>
            <javadoc line="218">
                Appends all the elements in the &lt;CODE&gt;AttributeList&lt;/CODE&gt; specified to
                  the end of the list, in the order in which they are returned by the
                  Iterator of the &lt;CODE&gt;AttributeList&lt;/CODE&gt; specified.                
                <param>
                    list  Elements to be inserted into the list.                    
                </param>
                <return>
                    true if this list changed as a result of the call.                    
                </return>
                <see>
                    ArrayList#addAll(java.util.Collection)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="229">
                <params>
                    <param name="list" type="AttributeList"/>
                </params>
            </method>
            <javadoc line="233">
                Inserts all of the elements in the &lt;CODE&gt;AttributeList&lt;/CODE&gt; specified
                  into this list, starting at the specified position, in the order in which
                  they are returned by the Iterator of the {@code AttributeList} specified.
                  If the index is out of range (index &lt; 0 || index &gt; size() a
                  RuntimeOperationsException should be raised, wrapping the
                  java.lang.IndexOutOfBoundsException thrown.                
                <param>
                    list  Elements to be inserted into the list.                    
                </param>
                <param>
                    index  Position at which to insert the first element from the
                      <CODE>AttributeList</CODE> specified.                    
                </param>
                <return>
                    true if this list changed as a result of the call.                    
                </return>
                <see>
                    ArrayList#addAll(int,java.util.Collection)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="249">
                <params>
                    <param name="index" type="int"/>
                    <param name="list" type="AttributeList"/>
                </params>
                <scope line="250"/>
                <scope line="252"/>
            </method>
            <javadoc line="264">
                {@inheritDoc}                
                <throws>
                    IllegalArgumentException if this {@code AttributeList} is
                      <a href="#type-safe">type-safe</a> and {@code element} is not an{@code Attribute}.                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="271">
                <params>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="276">
                {@inheritDoc}                
                <throws>
                    IllegalArgumentException if this {@code AttributeList} is
                      <a href="#type-safe">type-safe</a> and {@code element} is not an{@code Attribute}.                    
                </throws>
            </javadoc>
            <method name="add" type="void" line="283">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="288">
                {@inheritDoc}                
                <throws>
                    IllegalArgumentException if this {@code AttributeList} is
                      <a href="#type-safe">type-safe</a> and {@code c} contains an
                      element that is not an {@code Attribute}.                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="295">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="300">
                {@inheritDoc}                
                <throws>
                    IllegalArgumentException if this {@code AttributeList} is
                      <a href="#type-safe">type-safe</a> and {@code c} contains an
                      element that is not an {@code Attribute}.                    
                </throws>
            </javadoc>
            <method name="addAll" type="boolean" line="307">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <javadoc line="312">
                {@inheritDoc}                
                <throws>
                    IllegalArgumentException if this {@code AttributeList} is
                      <a href="#type-safe">type-safe</a> and {@code element} is not an{@code Attribute}.                    
                </throws>
            </javadoc>
            <method name="set" type="Object" line="319">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <method name="adding" type="void" line="324">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <method name="adding" type="void" line="333">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
        </class>
    </source>