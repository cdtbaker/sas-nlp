<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <class name="ObjectName" line="42">
            <comment line="223">
                don&apos;t complain serialVersionUID not constant                
            </comment>
            <comment line="281">
                Inner classes &lt;========================================                
            </comment>
            <comment line="285">
                Private fields ----------------------------------------&gt;                
            </comment>
            <comment line="288">
                Serialization compatibility stuff --------------------&gt;                
            </comment>
            <comment line="290">
                Two serial forms are supported in this class. The selected form depends                
            </comment>
            <comment line="291">
                on system property &quot;jmx.serial.form&quot;:                
            </comment>
            <comment line="292">
                - &quot;1.0&quot; for JMX 1.0                
            </comment>
            <comment line="293">
                - any other value for JMX 1.1 and higher                
            </comment>
            <comment line="294">
                                
            </comment>
            <comment line="295">
                Serial version for old serial form                
            </comment>
            <comment line="297">
                                
            </comment>
            <comment line="298">
                Serial version for new serial form                
            </comment>
            <comment line="300">
                                
            </comment>
            <comment line="301">
                Serializable fields in old serial form                
            </comment>
            <comment line="311">
                                
            </comment>
            <comment line="312">
                Serializable fields in new serial form                
            </comment>
            <comment line="314">
                                
            </comment>
            <comment line="315">
                Actual serial version and serial form                
            </comment>
            <comment line="336">
                                
            </comment>
            <comment line="337">
                Serialization compatibility stuff &lt;==============================                
            </comment>
            <comment line="339">
                Class private fields -----------------------------------&gt;                
            </comment>
            <comment line="347">
                Class private fields &lt;==============================                
            </comment>
            <comment line="349">
                Instance private fields -----------------------------------&gt;                
            </comment>
            <comment line="397">
                Instance private fields &lt;=======================================                
            </comment>
            <comment line="399">
                Private fields &lt;========================================                
            </comment>
            <comment line="402">
                Private methods ----------------------------------------&gt;                
            </comment>
            <comment line="404">
                Category : Instance construction -------------------------&gt;                
            </comment>
            <comment line="752">
                Category : Instance construction &lt;==============================                
            </comment>
            <comment line="754">
                Category : Internal utilities ------------------------------&gt;                
            </comment>
            <comment line="1036">
                Category : Internal utilities &lt;==============================                
            </comment>
            <comment line="1038">
                Category : Internal accessors ------------------------------&gt;                
            </comment>
            <comment line="1062">
                Category : Internal accessors &lt;==============================                
            </comment>
            <comment line="1064">
                Category : Serialization -----------------------------------&gt;                
            </comment>
            <comment line="1246">
                Category : Serialization &lt;===================================                
            </comment>
            <comment line="1248">
                Private methods &lt;========================================                
            </comment>
            <comment line="1250">
                Public methods ----------------------------------------&gt;                
            </comment>
            <comment line="1252">
                Category : ObjectName Construction ------------------------------&gt;                
            </comment>
            <comment line="1433">
                Category : ObjectName Construction &lt;==============================                
            </comment>
            <comment line="1436">
                Category : Getter methods ------------------------------&gt;                
            </comment>
            <comment line="1744">
                Category : Getter methods &lt;===================================                
            </comment>
            <comment line="1746">
                Category : Utilities ----------------------------------------&gt;                
            </comment>
            <comment line="1923">
                Category : Utilities &lt;===================================                
            </comment>
            <comment line="1925">
                Category : QueryExp Interface ----------------------------------------&gt;                
            </comment>
            <comment line="2021">
                Method inherited from QueryExp, no implementation needed here
                because ObjectName is not relative to an MBeanServer and does
                not contain a subquery.                
            </comment>
            <comment line="2027">
                Category : QueryExp Interface &lt;=========================                
            </comment>
            <comment line="2029">
                Category : Comparable Interface ----------------------------------------&gt;                
            </comment>
            <comment line="2108">
                Category : Comparable Interface &lt;=========================                
            </comment>
            <comment line="2110">
                Public methods &lt;========================================                
            </comment>
            <implements interface="Comparable">
                <type_params>
                    <type_param name="ObjectName"/>
                </type_params>
            </implements>
            <implements interface="QueryExp"/>
            <javadoc line="42">
                &lt;p&gt;Represents the object name of an MBean, or a pattern that can
                  match the names of several MBeans.  Instances of this class are
                  immutable.&lt;/p&gt;
                  &lt;p&gt;An instance of this class can be used to represent:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;An object name&lt;/li&gt;
                  &lt;li&gt;An object name pattern, within the context of a query&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;An object name consists of two parts, the domain and the key
                  properties.&lt;/p&gt;
                  &lt;p&gt;The &lt;em&gt;domain&lt;/em&gt; is a string of characters not including
                  the character colon (&lt;code&gt;:&lt;/code&gt;).  It is recommended that the domain
                  should not contain the string &quot;{@code //}&quot;, which is reserved for future use.
                  &lt;p&gt;If the domain includes at least one occurrence of the wildcard
                  characters asterisk (&lt;code&gt;&lt;/code&gt;) or question mark
                  (&lt;code&gt;?&lt;/code&gt;), then the object name is a pattern.  The asterisk
                  matches any sequence of zero or more characters, while the question
                  mark matches any single character.&lt;/p&gt;
                  &lt;p&gt;If the domain is empty, it will be replaced in certain contexts
                  by the &lt;em&gt;default domain&lt;/em&gt; of the MBean server in which the
                  ObjectName is used.&lt;/p&gt;
                  &lt;p&gt;The &lt;em&gt;key properties&lt;/em&gt; are an unordered set of keys and
                  associated values.&lt;/p&gt;
                  &lt;p&gt;Each &lt;em&gt;key&lt;/em&gt; is a nonempty string of characters which may
                  not contain any of the characters comma (&lt;code&gt;,&lt;/code&gt;), equals
                  (&lt;code&gt;=&lt;/code&gt;), colon, asterisk, or question mark.  The same key
                  may not occur twice in a given ObjectName.&lt;/p&gt;
                  &lt;p&gt;Each &lt;em&gt;value&lt;/em&gt; associated with a key is a string of
                  characters that is either unquoted or quoted.&lt;/p&gt;
                  &lt;p&gt;An &lt;em&gt;unquoted value&lt;/em&gt; is a possibly empty string of
                  characters which may not contain any of the characters comma,
                  equals, colon, or quote.&lt;/p&gt;
                  &lt;p&gt;If the &lt;em&gt;unquoted value&lt;/em&gt; contains at least one occurrence
                  of the wildcard characters asterisk or question mark, then the object
                  name is a &lt;em&gt;property value pattern&lt;/em&gt;. The asterisk matches any
                  sequence of zero or more characters, while the question mark matches
                  any single character.&lt;/p&gt;
                  &lt;p&gt;A &lt;em&gt;quoted value&lt;/em&gt; consists of a quote (&lt;code&gt;&quot;&lt;/code&gt;),
                  followed by a possibly empty string of characters, followed by
                  another quote.  Within the string of characters, the backslash
                  (&lt;code&gt;\&lt;/code&gt;) has a special meaning.  It must be followed by
                  one of the following characters:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Another backslash.  The second backslash has no special
                  meaning and the two characters represent a single backslash.&lt;/li&gt;
                  &lt;li&gt;The character &apos;n&apos;.  The two characters represent a newline
                  (&apos;\n&apos; in Java).&lt;/li&gt;
                  &lt;li&gt;A quote.  The two characters represent a quote, and that quote
                  is not considered to terminate the quoted value. An ending closing
                  quote must be present for the quoted value to be valid.&lt;/li&gt;
                  &lt;li&gt;A question mark (?) or asterisk ().  The two characters represent
                  a question mark or asterisk respectively.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;A quote may not appear inside a quoted value except immediately
                  after an odd number of consecutive backslashes.&lt;/p&gt;
                  &lt;p&gt;The quotes surrounding a quoted value, and any backslashes
                  within that value, are considered to be part of the value.&lt;/p&gt;
                  &lt;p&gt;If the &lt;em&gt;quoted value&lt;/em&gt; contains at least one occurrence of
                  the characters asterisk or question mark and they are not preceded
                  by a backslash, then they are considered as wildcard characters and
                  the object name is a &lt;em&gt;property value pattern&lt;/em&gt;. The asterisk
                  matches any sequence of zero or more characters, while the question
                  mark matches any single character.&lt;/p&gt;
                  &lt;p&gt;An ObjectName may be a &lt;em&gt;property list pattern&lt;/em&gt;. In this
                  case it may have zero or more keys and associated values. It matches
                  a nonpattern ObjectName whose domain matches and that contains the
                  same keys and associated values, as well as possibly other keys and
                  values.&lt;/p&gt;
                  &lt;p&gt;An ObjectName is a &lt;em&gt;property value pattern&lt;/em&gt; when at least
                  one of its &lt;em&gt;quoted&lt;/em&gt; or &lt;em&gt;unquoted&lt;/em&gt; key property values
                  contains the wildcard characters asterisk or question mark as described
                  above. In this case it has one or more keys and associated values, with
                  at least one of the values containing wildcard characters. It matches a
                  nonpattern ObjectName whose domain matches and that contains the same
                  keys whose values match; if the property value pattern is also a
                  property list pattern then the nonpattern ObjectName can contain
                  other keys and values.&lt;/p&gt;
                  &lt;p&gt;An ObjectName is a &lt;em&gt;property pattern&lt;/em&gt; if it is either a
                  &lt;em&gt;property list pattern&lt;/em&gt; or a &lt;em&gt;property value pattern&lt;/em&gt;
                  or both.&lt;/p&gt;
                  &lt;p&gt;An ObjectName is a pattern if its domain contains a wildcard or
                  if the ObjectName is a property pattern.&lt;/p&gt;
                  &lt;p&gt;If an ObjectName is not a pattern, it must contain at least one
                  key with its associated value.&lt;/p&gt;
                  &lt;p&gt;Examples of ObjectName patterns are:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code :type=Foo,name=Bar} to match names in any domain whose
                  exact set of keys is {@code type=Foo,name=Bar}.&lt;/li&gt;
                  &lt;li&gt;{@code d:type=Foo,name=Bar,} to match names in the domain{@code d} that have the keys {@code type=Foo,name=Bar} plus
                  zero or more other keys.&lt;/li&gt;
                  &lt;li&gt;{@code :type=Foo,name=Bar,} to match names in any domain
                  that has the keys {@code type=Foo,name=Bar} plus zero or
                  more other keys.&lt;/li&gt;
                  &lt;li&gt;{@code d:type=F?o,name=Bar} will match e.g.{@code d:type=Foo,name=Bar} and {@code d:type=Fro,name=Bar}.&lt;/li&gt;
                  &lt;li&gt;{@code d:type=Fo,name=Bar} will match e.g.{@code d:type=Fo,name=Bar} and {@code d:type=Frodo,name=Bar}.&lt;/li&gt;
                  &lt;li&gt;{@code d:type=Foo,name=&quot;B&quot;} will match e.g.{@code d:type=Foo,name=&quot;Bling&quot;}. Wildcards are recognized even
                  inside quotes, and like other special characters can be escaped
                  with {@code \}.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;An ObjectName can be written as a String with the following
                  elements in order:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The domain.
                  &lt;li&gt;A colon (&lt;code&gt;:&lt;/code&gt;).
                  &lt;li&gt;A key property list as defined below.
                  &lt;/ul&gt;
                  &lt;p&gt;A key property list written as a String is a comma-separated
                  list of elements.  Each element is either an asterisk or a key
                  property.  A key property consists of a key, an equals
                  (&lt;code&gt;=&lt;/code&gt;), and the associated value.&lt;/p&gt;
                  &lt;p&gt;At most one element of a key property list may be an asterisk.
                  If the key property list contains an asterisk element, the
                  ObjectName is a property list pattern.&lt;/p&gt;
                  &lt;p&gt;Spaces have no special significance in a String representing an
                  ObjectName.  For example, the String:
                  &lt;pre&gt;
                  domain: key1 = value1 , key2 = value2
                  &lt;/pre&gt;
                  represents an ObjectName with two keys.  The name of each key
                  contains six characters, of which the first and last are spaces.
                  The value associated with the key &lt;code&gt;&quot;&amp;nbsp;key1&amp;nbsp;&quot;&lt;/code&gt;
                  also begins and ends with a space.&lt;/p&gt;
                  &lt;p&gt;In addition to the restrictions on characters spelt out above,
                  no part of an ObjectName may contain a newline character
                  (&lt;code&gt;&apos;\n&apos;&lt;/code&gt;), whether the domain, a key, or a value, whether
                  quoted or unquoted.  The newline character can be represented in a
                  quoted value with the sequence &lt;code&gt;\n&lt;/code&gt;.
                  &lt;p&gt;The rules on special characters and quoting apply regardless of
                  which constructor is used to make an ObjectName.&lt;/p&gt;
                  &lt;p&gt;To avoid collisions between MBeans supplied by different
                  vendors, a useful convention is to begin the domain name with the
                  reverse DNS name of the organization that specifies the MBeans,
                  followed by a period and a string whose interpretation is
                  determined by that organization.  For example, MBeans specified by
                  &lt;code&gt;example.com&lt;/code&gt;  would have
                  domains such as &lt;code&gt;com.example.MyDomain&lt;/code&gt;.  This is essentially
                  the same convention as for Java-language package names.&lt;/p&gt;
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;1081892073854801359L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <class name="Property" line="225">
                <comment line="1623">
                    CR 6441274 depends on the modification property defined above                    
                </comment>
                <javadoc line="225">
                    A structure recording property structure and
                      proposing minimal services                    
                </javadoc>
                <declaration name="_key_index" type="int" line="231"/>
                <declaration name="_key_length" type="int" line="232"/>
                <declaration name="_value_length" type="int" line="233"/>
                <javadoc line="235">
                    Constructor.                    
                </javadoc>
                <method name="Property" type="constructor" line="238">
                    <params>
                        <param name="key_index" type="int"/>
                        <param name="key_length" type="int"/>
                        <param name="value_length" type="int"/>
                    </params>
                </method>
                <javadoc line="244">
                    Assigns the key index of property                    
                </javadoc>
                <method name="setKeyIndex" type="void" line="247">
                    <params>
                        <param name="key_index" type="int"/>
                    </params>
                </method>
                <javadoc line="251">
                    Returns a key string for receiver key                    
                </javadoc>
                <method name="getKeyString" type="String" line="254">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <javadoc line="258">
                    Returns a value string for receiver key                    
                </javadoc>
                <method name="getValueString" type="String" line="261">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                    <declaration name="in_begin" type="int" line="262"/>
                    <declaration name="out_end" type="int" line="263"/>
                </method>
            </class>
            <class name="PatternProperty" line="268">
                <extends class="Property"/>
                <comment line="1623">
                    CR 6441274 depends on the modification property defined above                    
                </comment>
                <javadoc line="268">
                    Marker class for value pattern property.                    
                </javadoc>
                <javadoc line="272">
                    Constructor.                    
                </javadoc>
                <method name="PatternProperty" type="constructor" line="275">
                    <params>
                        <param name="key_index" type="int"/>
                        <param name="key_length" type="int"/>
                        <param name="value_length" type="int"/>
                    </params>
                </method>
            </class>
            <declaration name="oldSerialVersionUID" type="long" line="295"/>
            <declaration name="newSerialVersionUID" type="long" line="298"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="301"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="312"/>
            <declaration name="serialVersionUID" type="long" line="315"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="316"/>
            <declaration name="compat" type="boolean" line="317"/>
            <scope line="318">
                <scope line="319">
                    <declaration name="act" type="GetPropertyAction" line="320"/>
                    <declaration name="form" type="String" line="321"/>
                </scope>
                <scope line="323"/>
                <scope line="326"/>
                <scope line="329"/>
            </scope>
            <declaration name="_Empty_property_array" type="Property[]" line="340"/>
            <javadoc line="340">
                a shared empty array for empty property lists                
            </javadoc>
            <declaration name="_canonicalName" type="String" line="350"/>
            <javadoc line="350">
                a String containing the canonical name                
            </javadoc>
            <declaration name="_kp_array" type="Property[]" line="356"/>
            <javadoc line="356">
                An array of properties in the same seq order as time creation                
            </javadoc>
            <declaration name="_ca_array" type="Property[]" line="361"/>
            <javadoc line="361">
                An array of properties in the same seq order as canonical order                
            </javadoc>
            <declaration name="_domain_length" type="int" line="367"/>
            <javadoc line="367">
                The length of the domain part of built objectname                
            </javadoc>
            <declaration name="_propertyList" type="Map&lt;String,String&gt;" line="373"/>
            <javadoc line="373">
                The propertyList of built object name. Initialized lazily.
                  Table that contains all the pairs (key,value) for this ObjectName.                
            </javadoc>
            <declaration name="_domain_pattern" type="boolean" line="379"/>
            <javadoc line="379">
                boolean that declares if this ObjectName domain part is a pattern                
            </javadoc>
            <declaration name="_property_list_pattern" type="boolean" line="384"/>
            <javadoc line="384">
                boolean that declares if this ObjectName contains a pattern on the
                  key property list                
            </javadoc>
            <declaration name="_property_value_pattern" type="boolean" line="390"/>
            <javadoc line="390">
                boolean that declares if this ObjectName contains a pattern on the
                  value of at least one key property                
            </javadoc>
            <javadoc line="405">
                Initializes this {@link ObjectName} from the given string
                  representation.                
                <param>
                    name A string representation of the {@link ObjectName}                    
                </param>
                <exception>
                    MalformedObjectNameException The string passed as a
                      parameter does not have the right format.                    
                </exception>
                <exception>
                    NullPointerException The <code>name</code> parameter
                      is null.                    
                </exception>
            </javadoc>
            <method name="construct" type="void" line="417">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="419">
                    The name cannot be null                    
                </comment>
                <comment line="423">
                    Test if the name is empty                    
                </comment>
                <comment line="425">
                    this is equivalent to the whole word query object name.                    
                </comment>
                <comment line="437">
                    initialize parsing of the string                    
                </comment>
                <comment line="440">
                    canonical form will                    
                </comment>
                <comment line="441">
                    be same length at most                    
                </comment>
                <comment line="446">
                    parses domain part                    
                </comment>
                <comment line="454">
                    &quot;:&quot; omission check.                    
                </comment>
                <comment line="455">
                                        
                </comment>
                <comment line="456">
                    Although &quot;=&quot; is a valid character in the domain part                    
                </comment>
                <comment line="457">
                    it is true that it is rarely used in the real world.                    
                </comment>
                <comment line="458">
                    So check straight away if the &quot;:&quot; has been omitted                    
                </comment>
                <comment line="459">
                    from the ObjectName. This allows us to provide a more                    
                </comment>
                <comment line="460">
                    accurate exception message.                    
                </comment>
                <comment line="481">
                    check for non-empty properties                    
                </comment>
                <comment line="486">
                    we have got the domain part, begins building of _canonicalName                    
                </comment>
                <comment line="491">
                    parses property list                    
                </comment>
                <comment line="509">
                    case of pattern properties                    
                </comment>
                <comment line="523">
                    empty properties case                    
                </comment>
                <comment line="530">
                    correct pattern spec in props, continue                    
                </comment>
                <comment line="537">
                    standard property case, key part                    
                </comment>
                <comment line="544">
                    &apos;=&apos; considered to introduce value part                    
                </comment>
                <comment line="558">
                    in_index pointing after &apos;=&apos; char                    
                </comment>
                <comment line="559">
                    found end of key                    
                </comment>
                <comment line="561">
                    standard property case, value part                    
                </comment>
                <comment line="565">
                    the case of quoted value part                    
                </comment>
                <comment line="569">
                    the case of an escaped character                    
                </comment>
                <comment line="580">
                    valid character                    
                </comment>
                <comment line="603">
                    the case of standard value part                    
                </comment>
                <comment line="607">
                    &apos;,&apos; considered to be the value separator                    
                </comment>
                <comment line="628">
                    Parsed property, checks the end of name                    
                </comment>
                <comment line="638">
                    we got the key and value part, prepare a property for this                    
                </comment>
                <comment line="659">
                    computes and set canonical name                    
                </comment>
                <scope line="424"/>
                <declaration name="name_chars" type="char[]" line="438"/>
                <declaration name="len" type="int" line="439"/>
                <declaration name="canonical_chars" type="char[]" line="440"/>
                <declaration name="cname_index" type="int" line="442"/>
                <declaration name="index" type="int" line="443"/>
                <declaration name="c" type="char" line="444"/>
                <scope line="448">
                    <declaration name="i" type="int" line="461"/>
                </scope>
                <declaration name="prop" type="Property" line="492"/>
                <declaration name="keys_map" type="Map&lt;String,Property&gt;" line="493"/>
                <declaration name="keys" type="String[]" line="494"/>
                <declaration name="key_name" type="String" line="495"/>
                <declaration name="quoted_value" type="boolean" line="496"/>
                <declaration name="property_index" type="int" line="497"/>
                <declaration name="in_index" type="int" line="498"/>
                <declaration name="key_index" type="int" line="499"/>
                <scope line="506">
                    <scope line="510">
                        <scope line="515">
                            <scope line="521">
                                <scope line="522"/>
                            </scope>
                            <scope line="529"/>
                        </scope>
                    </scope>
                    <declaration name="ichar" type="String" line="550"/>
                    <declaration name="value_pattern" type="boolean" line="562"/>
                    <scope line="563">
                        <scope line="568">
                            <scope line="570"/>
                            <scope line="586"/>
                            <scope line="589"/>
                        </scope>
                    </scope>
                    <scope line="602">
                        <declaration name="ichar" type="String" line="617"/>
                    </scope>
                    <scope line="629"/>
                    <scope line="639"/>
                    <scope line="641"/>
                    <scope line="647">
                        <declaration name="tmp_string_array" type="String[]" line="648"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="664">
                Construct an ObjectName from a domain and a Hashtable.                
                <param>
                    domain Domain of the ObjectName.                    
                </param>
                <param>
                    props  Map containing couples <i>key</i> -> <i>value</i>.                    
                </param>
                <exception>
                    MalformedObjectNameException The <code>domain</code>
                      contains an illegal character, or one of the keys or values in
                      <code>table</code> contains an illegal character, or one of the
                      values in <code>table</code> does not follow the rules for quoting.                    
                </exception>
                <exception>
                    NullPointerException One of the parameters is null.                    
                </exception>
            </javadoc>
            <method name="construct" type="void" line="677">
                <params>
                    <param name="domain" type="String"/>
                    <param name="props" type="Map<String,String>"/>
                </params>
                <comment line="679">
                    The domain cannot be null                    
                </comment>
                <comment line="683">
                    The key property list cannot be null                    
                </comment>
                <comment line="687">
                    The key property list cannot be empty                    
                </comment>
                <comment line="692">
                    checks domain validity                    
                </comment>
                <comment line="696">
                    init canonicalname                    
                </comment>
                <comment line="701">
                    allocates the property array                    
                </comment>
                <comment line="741">
                    initialize canonical name and data structure                    
                </comment>
                <declaration name="sb" type="StringBuilder" line="697"/>
                <declaration name="nb_props" type="int" line="702"/>
                <declaration name="keys" type="String[]" line="705"/>
                <declaration name="keys_map" type="Map&lt;String,Property&gt;" line="706"/>
                <declaration name="prop" type="Property" line="707"/>
                <declaration name="key_index" type="int" line="708"/>
                <declaration name="i" type="int" line="709"/>
                <scope line="710">
                    <declaration name="key" type="String" line="713"/>
                    <declaration name="value" type="String" line="714"/>
                    <scope line="715"/>
                    <scope line="717"/>
                    <declaration name="value_pattern" type="boolean" line="725"/>
                    <scope line="727"/>
                    <scope line="731"/>
                </scope>
                <declaration name="len" type="int" line="742"/>
                <declaration name="initial_chars" type="char[]" line="743"/>
                <declaration name="canonical_chars" type="char[]" line="745"/>
            </method>
            <javadoc line="755">
                Add passed property to the list at the given index
                  for the passed key name                
            </javadoc>
            <method name="addProperty" type="void" line="761">
                <params>
                    <param name="prop" type="Property"/>
                    <param name="index" type="int"/>
                    <param name="keys_map" type="Map<String,Property>"/>
                    <param name="key_name" type="String"/>
                </params>
                <comment line="767">
                    if no more space for property arrays, have to increase it                    
                </comment>
                <scope line="768">
                    <declaration name="tmp_prop_array" type="Property[]" line="769"/>
                </scope>
            </method>
            <javadoc line="777">
                Sets the canonical name of receiver from input &apos;specified_chars&apos;
                  array, by filling &apos;canonical_chars&apos; array with found &apos;nb-props&apos;
                  properties starting at position &apos;prop_index&apos;.                
            </javadoc>
            <method name="setCanonicalName" type="void" line="785">
                <params>
                    <param name="specified_chars" type="char[]"/>
                    <param name="canonical_chars" type="char[]"/>
                    <param name="keys" type="String[]"/>
                    <param name="keys_map" type="Map<String,Property>"/>
                    <param name="prop_index" type="int"/>
                    <param name="nb_props" type="int"/>
                </params>
                <comment line="787">
                    Sort the list of found properties                    
                </comment>
                <comment line="799">
                    now assigns _ca_array to the sorted list of keys                    
                </comment>
                <comment line="800">
                    (there cannot be two identical keys in an objectname.                    
                </comment>
                <comment line="804">
                    now we build the canonical name and set begin indexes of                    
                </comment>
                <comment line="805">
                    properties to reflect canonical form                    
                </comment>
                <comment line="811">
                    length of prop including &apos;=&apos; char                    
                </comment>
                <comment line="824">
                    terminate canonicalname with &apos;*&apos; in case of pattern                    
                </comment>
                <comment line="831">
                    we now build the canonicalname string                    
                </comment>
                <scope line="788">
                    <declaration name="tmp_keys" type="String[]" line="789"/>
                    <declaration name="tmp_props" type="Property[]" line="790"/>
                    <declaration name="last_index" type="int" line="806"/>
                    <declaration name="prop_len" type="int" line="807"/>
                    <declaration name="prop" type="Property" line="808"/>
                    <scope line="809">
                        <scope line="817"/>
                    </scope>
                </scope>
                <scope line="825"/>
            </method>
            <javadoc line="835">
                Parse a key.
                  &lt;pre&gt;final int endKey=parseKey(s,startKey);&lt;/pre&gt;
                  &lt;p&gt;key starts at startKey (included), and ends at endKey (excluded).
                  If (startKey == endKey), then the key is empty.                
                <param>
                    s The char array of the original string.                    
                </param>
                <param>
                    startKey index at which to begin parsing.                    
                </param>
                <return>
                    The index following the last character of the key.                    
                </return>
            </javadoc>
            <method name="parseKey" type="int" line="846">
                <params>
                    <param name="s" type="char[]"/>
                    <param name="startKey" type="int"/>
                </params>
                <comment line="863">
                    we got the key.                    
                </comment>
                <declaration name="next" type="int" line="847"/>
                <declaration name="endKey" type="int" line="848"/>
                <declaration name="len" type="int" line="849"/>
                <scope line="850">
                    <declaration name="k" type="char" line="851"/>
                    <declaration name="ichar" type="String" line="858"/>
                </scope>
            </method>
            <javadoc line="875">
                Parse a value.
                  &lt;pre&gt;final int endVal=parseValue(s,startVal);&lt;/pre&gt;
                  &lt;p&gt;value starts at startVal (included), and ends at endVal (excluded).
                  If (startVal == endVal), then the key is empty.                
                <param>
                    s The char array of the original string.                    
                </param>
                <param>
                    startValue index at which to begin parsing.                    
                </param>
                <return>
                    The first element of the int array indicates the index
                      following the last character of the value. The second
                      element of the int array indicates that the value is
                      a pattern when its value equals 1.                    
                </return>
            </javadoc>
            <method name="parseValue" type="int[]" line="889">
                <params>
                    <param name="s" type="char[]"/>
                    <param name="startValue" type="int"/>
                </params>
                <comment line="900">
                    quoted value                    
                </comment>
                <comment line="917">
                    We have an escaped quote. If this escaped                    
                </comment>
                <comment line="918">
                    quote is the last character, it does not                    
                </comment>
                <comment line="919">
                    qualify as a valid termination quote.                    
                </comment>
                <comment line="920">
                                        
                </comment>
                <comment line="947">
                    Check that last character is a termination quote.                    
                </comment>
                <comment line="948">
                    We have already handled the case were the last                    
                </comment>
                <comment line="949">
                    character is an escaped quote earlier.                    
                </comment>
                <comment line="950">
                                        
                </comment>
                <comment line="960">
                    Non quoted value.                    
                </comment>
                <declaration name="value_pattern" type="boolean" line="891"/>
                <declaration name="next" type="int" line="893"/>
                <declaration name="endValue" type="int" line="894"/>
                <declaration name="len" type="int" line="896"/>
                <declaration name="q" type="char" line="897"/>
                <scope line="899">
                    <scope line="903">
                        <declaration name="last" type="char" line="904"/>
                        <scope line="905"/>
                        <scope line="931"/>
                        <scope line="934"/>
                        <scope line="937"/>
                    </scope>
                    <scope line="955"/>
                </scope>
                <scope line="959">
                    <scope line="961">
                        <declaration name="v" type="char" line="962"/>
                        <declaration name="ichar" type="String" line="973"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="990">
                Check if the supplied value is a valid value.                
                <return>
                    true if the value is a pattern, otherwise false.                    
                </return>
            </javadoc>
            <method name="checkValue" type="boolean" line="996">
                <params>
                    <param name="val" type="String"/>
                </params>
                <declaration name="len" type="int" line="1001"/>
                <declaration name="s" type="char[]" line="1005"/>
                <declaration name="result" type="int[]" line="1006"/>
                <declaration name="endValue" type="int" line="1007"/>
                <declaration name="value_pattern" type="boolean" line="1008"/>
            </method>
            <javadoc line="1015">
                Check if the supplied key is a valid key.                
            </javadoc>
            <method name="checkKey" type="void" line="1019">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="len" type="int" line="1024"/>
                <declaration name="k" type="char[]" line="1027"/>
                <declaration name="endKey" type="int" line="1028"/>
            </method>
            <javadoc line="1039">
                Check if domain is a valid domain.  Set _domain_pattern if appropriate.                
            </javadoc>
            <method name="isDomain" type="boolean" line="1042">
                <params>
                    <param name="domain" type="String"/>
                </params>
                <declaration name="len" type="int" line="1044"/>
                <declaration name="next" type="int" line="1045"/>
                <scope line="1046">
                    <declaration name="c" type="char" line="1047"/>
                </scope>
            </method>
            <javadoc line="1065">
                Deserializes an {@link ObjectName} from an {@link ObjectInputStream}.                
                <serialData>
                    <ul>
                      <li>In the current serial form (value of property
                      <code>jmx.serial.form</code> differs from
                      <code>1.0</code>): the string
                      &quot;&lt;domain&gt;:&lt;properties&gt;&lt;wild&gt;&quot;,
                      where: <ul>
                      <li>&lt;domain&gt; represents the domain part
                      of the {@link ObjectName}</li>
                      <li>&lt;properties&gt; represents the list of
                      properties, as returned by{@link #getKeyPropertyListString}<li>&lt;wild&gt; is empty if not
                      <code>isPropertyPattern</code>, or
                      is the character "<code></code>" if
                      <code>isPropertyPattern</code>
                      and &lt;properties&gt; is empty, or
                      is "<code>,</code>" if
                      <code>isPropertyPattern</code> and
                      &lt;properties&gt; is not empty.
                      </li>
                      </ul>
                      The intent is that this string could be supplied
                      to the {@link #ObjectName(String)} constructor to
                      produce an equivalent {@link ObjectName}.
                      </li>
                      <li>In the old serial form (value of property
                      <code>jmx.serial.form</code> is
                      <code>1.0</code>): &lt;domain&gt; &lt;propertyList&gt;
                      &lt;propertyListString&gt; &lt;canonicalName&gt;
                      &lt;pattern&gt; &lt;propertyPattern&gt;,
                      where: <ul>
                      <li>&lt;domain&gt; represents the domain part
                      of the {@link ObjectName}</li>
                      <li>&lt;propertyList&gt; is the{@link Hashtable} that contains all the
                      pairs (key,value) for this{@link ObjectName}</li>
                      <li>&lt;propertyListString&gt; is the{@link String} representation of the
                      list of properties in any order (not
                      mandatorily a canonical representation)
                      </li>
                      <li>&lt;canonicalName&gt; is the{@link String} containing this{@link ObjectName}'s canonical name</li>
                      <li>&lt;pattern&gt; is a boolean which is
                      <code>true</code> if this{@link ObjectName} contains a pattern</li>
                      <li>&lt;propertyPattern&gt; is a boolean which
                      is <code>true</code> if this{@link ObjectName} contains a pattern in
                      the list of properties</li>
                      </ul>
                      </li>
                      </ul>                    
                </serialData>
            </javadoc>
            <method name="readObject" type="void" line="1124">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="1128">
                    Read an object serialized in the old serial form                    
                </comment>
                <comment line="1129">
                                        
                </comment>
                <comment line="1130">
                    in.defaultReadObject();                    
                </comment>
                <comment line="1135">
                    6616825: take care of property patterns                    
                </comment>
                <comment line="1146">
                    Read an object serialized in the new serial form                    
                </comment>
                <comment line="1147">
                                        
                </comment>
                <declaration name="cn" type="String" line="1126"/>
                <scope line="1127">
                    <declaration name="fields" type="ObjectInputStream.GetField" line="1131"/>
                    <declaration name="propListString" type="String" line="1132"/>
                    <declaration name="propPattern" type="boolean" line="1136"/>
                    <scope line="1138"/>
                </scope>
                <scope line="1145"/>
                <scope line="1152"/>
                <scope line="1154"/>
                <scope line="1156"/>
            </method>
            <javadoc line="1162">
                Serializes an {@link ObjectName} to an {@link ObjectOutputStream}.                
                <serialData>
                    <ul>
                      <li>In the current serial form (value of property
                      <code>jmx.serial.form</code> differs from
                      <code>1.0</code>): the string
                      &quot;&lt;domain&gt;:&lt;properties&gt;&lt;wild&gt;&quot;,
                      where: <ul>
                      <li>&lt;domain&gt; represents the domain part
                      of the {@link ObjectName}</li>
                      <li>&lt;properties&gt; represents the list of
                      properties, as returned by{@link #getKeyPropertyListString}<li>&lt;wild&gt; is empty if not
                      <code>isPropertyPattern</code>, or
                      is the character "<code></code>" if
                      this <code>isPropertyPattern</code>
                      and &lt;properties&gt; is empty, or
                      is "<code>,</code>" if
                      <code>isPropertyPattern</code> and
                      &lt;properties&gt; is not empty.
                      </li>
                      </ul>
                      The intent is that this string could be supplied
                      to the {@link #ObjectName(String)} constructor to
                      produce an equivalent {@link ObjectName}.
                      </li>
                      <li>In the old serial form (value of property
                      <code>jmx.serial.form</code> is
                      <code>1.0</code>): &lt;domain&gt; &lt;propertyList&gt;
                      &lt;propertyListString&gt; &lt;canonicalName&gt;
                      &lt;pattern&gt; &lt;propertyPattern&gt;,
                      where: <ul>
                      <li>&lt;domain&gt; represents the domain part
                      of the {@link ObjectName}</li>
                      <li>&lt;propertyList&gt; is the{@link Hashtable} that contains all the
                      pairs (key,value) for this{@link ObjectName}</li>
                      <li>&lt;propertyListString&gt; is the{@link String} representation of the
                      list of properties in any order (not
                      mandatorily a canonical representation)
                      </li>
                      <li>&lt;canonicalName&gt; is the{@link String} containing this{@link ObjectName}'s canonical name</li>
                      <li>&lt;pattern&gt; is a boolean which is
                      <code>true</code> if this{@link ObjectName} contains a pattern</li>
                      <li>&lt;propertyPattern&gt; is a boolean which
                      is <code>true</code> if this{@link ObjectName} contains a pattern in
                      the list of properties</li>
                      </ul>
                      </li>
                      </ul>                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="1221">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="1225">
                    Serializes this instance in the old serial form                    
                </comment>
                <comment line="1226">
                    Read CR 6441274 before making any changes to this code                    
                </comment>
                <comment line="1238">
                    Serializes this instance in the new serial form                    
                </comment>
                <comment line="1239">
                                        
                </comment>
                <scope line="1224">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="1227"/>
                </scope>
                <scope line="1237"/>
            </method>
            <javadoc line="1253">
                &lt;p&gt;Return an instance of ObjectName that can be used anywhere
                  an object obtained with {@link #ObjectName(String) new
                  ObjectName(name)} can be used.  The returned object may be of
                  a subclass of ObjectName.  Calling this method twice with the
                  same parameters may return the same object or two equal but
                  not identical objects.&lt;/p&gt;                
                <param>
                    name  A string representation of the object name.                    
                </param>
                <return>
                    an ObjectName corresponding to the given String.                    
                </return>
                <exception>
                    MalformedObjectNameException The string passed as a
                      parameter does not have the right format.                    
                </exception>
                <exception>
                    NullPointerException The <code>name</code> parameter
                      is null.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ObjectName" line="1272">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1276">
                &lt;p&gt;Return an instance of ObjectName that can be used anywhere
                  an object obtained with {@link #ObjectName(String,String,String) new ObjectName(domain, key, value)} can be used.  The
                  returned object may be of a subclass of ObjectName.  Calling
                  this method twice with the same parameters may return the same
                  object or two equal but not identical objects.&lt;/p&gt;                
                <param>
                    domain  The domain part of the object name.                    
                </param>
                <param>
                    key  The attribute in the key property of the object name.                    
                </param>
                <param>
                    value The value in the key property of the object name.                    
                </param>
                <return>
                    an ObjectName corresponding to the given domain,
                      key, and value.                    
                </return>
                <exception>
                    MalformedObjectNameException The
                      <code>domain</code>, <code>key</code>, or <code>value</code>
                      contains an illegal character, or <code>value</code> does not
                      follow the rules for quoting.                    
                </exception>
                <exception>
                    NullPointerException One of the parameters is null.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ObjectName" line="1300">
                <params>
                    <param name="domain" type="String"/>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="1304">
                &lt;p&gt;Return an instance of ObjectName that can be used anywhere
                  an object obtained with {@link #ObjectName(String,Hashtable)new ObjectName(domain, table)} can be used.  The returned
                  object may be of a subclass of ObjectName.  Calling this method
                  twice with the same parameters may return the same object or
                  two equal but not identical objects.&lt;/p&gt;                
                <param>
                    domain  The domain part of the object name.                    
                </param>
                <param>
                    table A hash table containing one or more key
                      properties.  The key of each entry in the table is the key of a
                      key property in the object name.  The associated value in the
                      table is the associated value in the object name.                    
                </param>
                <return>
                    an ObjectName corresponding to the given domain and
                      key mappings.                    
                </return>
                <exception>
                    MalformedObjectNameException The <code>domain</code>
                      contains an illegal character, or one of the keys or values in
                      <code>table</code> contains an illegal character, or one of the
                      values in <code>table</code> does not follow the rules for
                      quoting.                    
                </exception>
                <exception>
                    NullPointerException One of the parameters is null.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ObjectName" line="1331">
                <params>
                    <param name="domain" type="String"/>
                    <param name="table" type="Hashtable<String,String>"/>
                </params>
            </method>
            <javadoc line="1335">
                &lt;p&gt;Return an instance of ObjectName that can be used anywhere
                  the given object can be used.  The returned object may be of a
                  subclass of ObjectName.  If &lt;code&gt;name&lt;/code&gt; is of a subclass
                  of ObjectName, it is not guaranteed that the returned object
                  will be of the same class.&lt;/p&gt;
                  &lt;p&gt;The returned value may or may not be identical to
                  &lt;code&gt;name&lt;/code&gt;.  Calling this method twice with the same
                  parameters may return the same object or two equal but not
                  identical objects.&lt;/p&gt;
                  &lt;p&gt;Since ObjectName is immutable, it is not usually useful to
                  make a copy of an ObjectName.  The principal use of this method
                  is to guard against a malicious caller who might pass an
                  instance of a subclass with surprising behavior to sensitive
                  code.  Such code can call this method to obtain an ObjectName
                  that is known not to have surprising behavior.&lt;/p&gt;                
                <param>
                    name an instance of the ObjectName class or of a subclass                    
                </param>
                <return>
                    an instance of ObjectName or a subclass that is known to
                      have the same semantics.  If <code>name</code> respects the
                      semantics of ObjectName, then the returned object is equal
                      (though not necessarily identical) to <code>name</code>.                    
                </return>
                <exception>
                    NullPointerException The <code>name</code> is null.                    
                </exception>
            </javadoc>
            <method name="getInstance" type="ObjectName" line="1364">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="1370">
                Construct an object name from the given string.                
                <param>
                    name  A string representation of the object name.                    
                </param>
                <exception>
                    MalformedObjectNameException The string passed as a
                      parameter does not have the right format.                    
                </exception>
                <exception>
                    NullPointerException The <code>name</code> parameter
                      is null.                    
                </exception>
            </javadoc>
            <method name="ObjectName" type="constructor" line="1381">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="1385">
                Construct an object name with exactly one key property.                
                <param>
                    domain  The domain part of the object name.                    
                </param>
                <param>
                    key  The attribute in the key property of the object name.                    
                </param>
                <param>
                    value The value in the key property of the object name.                    
                </param>
                <exception>
                    MalformedObjectNameException The
                      <code>domain</code>, <code>key</code>, or <code>value</code>
                      contains an illegal character, or <code>value</code> does not
                      follow the rules for quoting.                    
                </exception>
                <exception>
                    NullPointerException One of the parameters is null.                    
                </exception>
            </javadoc>
            <method name="ObjectName" type="constructor" line="1399">
                <params>
                    <param name="domain" type="String"/>
                    <param name="key" type="String"/>
                    <param name="value" type="String"/>
                </params>
                <comment line="1400">
                    If key or value are null a NullPointerException                    
                </comment>
                <comment line="1401">
                    will be thrown by the put method in Hashtable.                    
                </comment>
                <comment line="1402">
                                        
                </comment>
                <declaration name="table" type="Map&lt;String,String&gt;" line="1403"/>
            </method>
            <javadoc line="1407">
                Construct an object name with several key properties from a Hashtable.                
                <param>
                    domain  The domain part of the object name.                    
                </param>
                <param>
                    table A hash table containing one or more key
                      properties.  The key of each entry in the table is the key of a
                      key property in the object name.  The associated value in the
                      table is the associated value in the object name.                    
                </param>
                <exception>
                    MalformedObjectNameException The <code>domain</code>
                      contains an illegal character, or one of the keys or values in
                      <code>table</code> contains an illegal character, or one of the
                      values in <code>table</code> does not follow the rules for
                      quoting.                    
                </exception>
                <exception>
                    NullPointerException One of the parameters is null.                    
                </exception>
            </javadoc>
            <method name="ObjectName" type="constructor" line="1424">
                <params>
                    <param name="domain" type="String"/>
                    <param name="table" type="Hashtable<String,String>"/>
                </params>
                <comment line="1426">
                    The exception for when a key or value in the table is not a
                    String is now ClassCastException rather than
                    MalformedObjectNameException.  This was not previously                    
                </comment>
            </method>
            <javadoc line="1437">
                Checks whether the object name is a pattern.
                  &lt;p&gt;
                  An object name is a pattern if its domain contains a
                  wildcard or if the object name is a property pattern.                
                <return>
                    True if the name is a pattern, otherwise false.                    
                </return>
            </javadoc>
            <method name="isPattern" type="boolean" line="1445"/>
            <javadoc line="1451">
                Checks whether the object name is a pattern on the domain part.                
                <return>
                    True if the name is a domain pattern, otherwise false.                    
                </return>
            </javadoc>
            <method name="isDomainPattern" type="boolean" line="1457"/>
            <javadoc line="1461">
                Checks whether the object name is a pattern on the key properties.
                  &lt;p&gt;
                  An object name is a pattern on the key properties if it is a
                  pattern on the key property list (e.g. &quot;d:k=v,&quot;) or on the
                  property values (e.g. &quot;d:k=&quot;) or on both (e.g. &quot;d:k=,&quot;).                
                <return>
                    True if the name is a property pattern, otherwise false.                    
                </return>
            </javadoc>
            <method name="isPropertyPattern" type="boolean" line="1470"/>
            <javadoc line="1474">
                Checks whether the object name is a pattern on the key property list.
                  &lt;p&gt;
                  For example, &quot;d:k=v,&quot; and &quot;d:k=,&quot; are key property list patterns
                  whereas &quot;d:k=&quot; is not.                
                <return>
                    True if the name is a property list pattern, otherwise false.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPropertyListPattern" type="boolean" line="1484"/>
            <javadoc line="1488">
                Checks whether the object name is a pattern on the value part
                  of at least one of the key properties.
                  &lt;p&gt;
                  For example, &quot;d:k=&quot; and &quot;d:k=,&quot; are property value patterns
                  whereas &quot;d:k=v,&quot; is not.                
                <return>
                    True if the name is a property value pattern, otherwise false.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPropertyValuePattern" type="boolean" line="1499"/>
            <javadoc line="1503">
                Checks whether the value associated with a key in a key
                  property is a pattern.                
                <param>
                    property The property whose value is to be checked.                    
                </param>
                <return>
                    True if the value associated with the given key property
                      is a pattern, otherwise false.                    
                </return>
                <exception>
                    NullPointerException If <code>property</code> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException If <code>property</code> is not
                      a valid key property for this ObjectName.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPropertyValuePattern" type="boolean" line="1518">
                <params>
                    <param name="property" type="String"/>
                </params>
                <scope line="1521">
                    <declaration name="prop" type="Property" line="1522"/>
                    <declaration name="key" type="String" line="1523"/>
                </scope>
            </method>
            <javadoc line="1530">
                &lt;p&gt;Returns the canonical form of the name; that is, a string
                  representation where the properties are sorted in lexical
                  order.&lt;/p&gt;
                  &lt;p&gt;More precisely, the canonical form of the name is a String
                  consisting of the &lt;em&gt;domain part&lt;/em&gt;, a colon
                  (&lt;code&gt;:&lt;/code&gt;), the &lt;em&gt;canonical key property list&lt;/em&gt;, and
                  a &lt;em&gt;pattern indication&lt;/em&gt;.&lt;/p&gt;
                  &lt;p&gt;The &lt;em&gt;canonical key property list&lt;/em&gt; is the same string
                  as described for {@link #getCanonicalKeyPropertyListString()}.&lt;/p&gt;
                  &lt;p&gt;The &lt;em&gt;pattern indication&lt;/em&gt; is:
                  &lt;ul&gt;
                  &lt;li&gt;empty for an ObjectName
                  that is not a property list pattern;
                  &lt;li&gt;an asterisk for an ObjectName
                  that is a property list pattern with no keys; or
                  &lt;li&gt;a comma and an
                  asterisk (&lt;code&gt;,&lt;/code&gt;) for an ObjectName that is a property
                  list pattern with at least one key.
                  &lt;/ul&gt;&lt;/p&gt;                
                <return>
                    The canonical form of the name.                    
                </return>
            </javadoc>
            <method name="getCanonicalName" type="String" line="1556"/>
            <javadoc line="1560">
                Returns the domain part.                
                <return>
                    The domain.                    
                </return>
            </javadoc>
            <method name="getDomain" type="String" line="1565"/>
            <javadoc line="1569">
                Obtains the value associated with a key in a key property.                
                <param>
                    property The property whose value is to be obtained.                    
                </param>
                <return>
                    The value of the property, or null if there is no such
                      property in this ObjectName.                    
                </return>
                <exception>
                    NullPointerException If <code>property</code> is null.                    
                </exception>
            </javadoc>
            <method name="getKeyProperty" type="String" line="1579">
                <params>
                    <param name="property" type="String"/>
                </params>
            </method>
            <javadoc line="1583">
                &lt;p&gt;Returns the key properties as a Map.  The returned
                  value is a Map in which each key is a key in the
                  ObjectName&apos;s key property list and each value is the associated
                  value.&lt;/p&gt;
                  &lt;p&gt;The returned value must not be modified.&lt;/p&gt;                
                <return>
                    The table of key properties.                    
                </return>
            </javadoc>
            <method name="_getKeyPropertyList" type="Map<String,String>" line="1593">
                <comment line="1596">
                    build (lazy eval) the property list from the canonical                    
                </comment>
                <comment line="1597">
                    properties array                    
                </comment>
                <scope line="1594">
                    <scope line="1595">
                        <declaration name="len" type="int" line="1599"/>
                        <declaration name="prop" type="Property" line="1600"/>
                        <scope line="1601"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1611">
                &lt;p&gt;Returns the key properties as a Hashtable.  The returned
                  value is a Hashtable in which each key is a key in the
                  ObjectName&apos;s key property list and each value is the associated
                  value.&lt;/p&gt;
                  &lt;p&gt;The returned value may be unmodifiable.  If it is
                  modifiable, changing it has no effect on this ObjectName.&lt;/p&gt;                
                <return>
                    The table of key properties.                    
                </return>
            </javadoc>
            <method name="getKeyPropertyList" type="Hashtable<String,String>" line="1623">
                <comment line="1622">
                    CR 6441274 depends on the modification property defined above                    
                </comment>
            </method>
            <javadoc line="1627">
                &lt;p&gt;Returns a string representation of the list of key
                  properties specified at creation time.  If this ObjectName was
                  constructed with the constructor {@link #ObjectName(String)},
                  the key properties in the returned String will be in the same
                  order as in the argument to the constructor.&lt;/p&gt;                
                <return>
                    The key property list string.  This string is
                      independent of whether the ObjectName is a pattern.                    
                </return>
            </javadoc>
            <method name="getKeyPropertyListString" type="String" line="1637">
                <comment line="1638">
                    BEWARE : we rebuild the propertyliststring at each call !!                    
                </comment>
                <comment line="1641">
                    the size of the string is the canonical one minus domain                    
                </comment>
                <comment line="1642">
                    part and pattern part                    
                </comment>
                <declaration name="total_size" type="int" line="1643"/>
                <declaration name="dest_chars" type="char[]" line="1646"/>
                <declaration name="value" type="char[]" line="1647"/>
            </method>
            <javadoc line="1652">
                &lt;p&gt;Returns the serialized string of the ObjectName.
                  properties specified at creation time.  If this ObjectName was
                  constructed with the constructor {@link #ObjectName(String)},
                  the key properties in the returned String will be in the same
                  order as in the argument to the constructor.&lt;/p&gt;                
                <return>
                    The key property list string.  This string is
                      independent of whether the ObjectName is a pattern.                    
                </return>
            </javadoc>
            <method name="getSerializedNameString" type="String" line="1662">
                <comment line="1664">
                    the size of the string is the canonical one                    
                </comment>
                <comment line="1670">
                    copy &quot;domain:&quot; into dest_chars                    
                </comment>
                <comment line="1671">
                                        
                </comment>
                <comment line="1674">
                    Add property list string                    
                </comment>
                <comment line="1677">
                    Add &quot;,*&quot; if necessary                    
                </comment>
                <comment line="1680">
                    Property list string is empty.                    
                </comment>
                <comment line="1683">
                    Property list string is not empty.                    
                </comment>
                <declaration name="total_size" type="int" line="1665"/>
                <declaration name="dest_chars" type="char[]" line="1666"/>
                <declaration name="value" type="char[]" line="1667"/>
                <declaration name="offset" type="int" line="1668"/>
                <declaration name="end" type="int" line="1675"/>
                <scope line="1678">
                    <scope line="1679"/>
                    <scope line="1682"/>
                </scope>
            </method>
            <javadoc line="1692">
                &lt;p&gt;Write a string representation of the list of key
                  properties specified at creation time in the given array, starting
                  at the specified offset.  If this ObjectName was
                  constructed with the constructor {@link #ObjectName(String)},
                  the key properties in the returned String will be in the same
                  order as in the argument to the constructor.&lt;/p&gt;                
                <return>
                    offset + #of chars written                    
                </return>
            </javadoc>
            <method name="writeKeyPropertyListString" type="int" line="1703">
                <params>
                    <param name="canonicalChars" type="char[]"/>
                    <param name="data" type="char[]"/>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="dest_chars" type="char[]" line="1706"/>
                <declaration name="value" type="char[]" line="1707"/>
                <declaration name="index" type="int" line="1709"/>
                <declaration name="len" type="int" line="1710"/>
                <declaration name="last" type="int" line="1711"/>
                <scope line="1712">
                    <declaration name="prop" type="Property" line="1713"/>
                    <declaration name="prop_len" type="int" line="1714"/>
                </scope>
            </method>
            <javadoc line="1725">
                Returns a string representation of the list of key properties,
                  in which the key properties are sorted in lexical order. This
                  is used in lexicographic comparisons performed in order to
                  select MBeans based on their key property list.  Lexical order
                  is the order implied by {@link String#compareTo(String)String.compareTo(String)}.                
                <return>
                    The canonical key property list string.  This string is
                      independent of whether the ObjectName is a pattern.                    
                </return>
            </javadoc>
            <method name="getCanonicalKeyPropertyListString" type="String" line="1736">
                <declaration name="len" type="int" line="1739"/>
            </method>
            <javadoc line="1747">
                &lt;p&gt;Returns a string representation of the object name.  The
                  format of this string is not specified, but users can expect
                  that two ObjectNames return the same string if and only if they
                  are equal.&lt;/p&gt;                
                <return>
                    a string representation of this object name.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1756"/>
            <javadoc line="1760">
                Compares the current object name with another object name.  Two
                  ObjectName instances are equal if and only if their canonical
                  forms are equal.  The canonical form is the string described
                  for {@link #getCanonicalName()}.                
                <param>
                    object  The object name that the current object name is to be
                      compared with.                    
                </param>
                <return>
                    True if <code>object</code> is an ObjectName whose
                      canonical form is equal to that of this ObjectName.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1773">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <comment line="1775">
                    same object case                    
                </comment>
                <comment line="1778">
                    object is not an object name case                    
                </comment>
                <comment line="1781">
                    equality when canonical names are the same                    
                </comment>
                <comment line="1782">
                    (because usage of intern())                    
                </comment>
                <comment line="1785">
                    ES: OK                    
                </comment>
                <comment line="1787">
                    Because we are sharing canonical form between object names,                    
                </comment>
                <comment line="1788">
                    we have finished the comparison at this stage ==&gt; unequal                    
                </comment>
                <declaration name="on" type="ObjectName" line="1783"/>
                <declaration name="on_string" type="String" line="1784"/>
            </method>
            <javadoc line="1792">
                Returns a hash code for this object name.                
            </javadoc>
            <method name="hashCode" type="int" line="1797"/>
            <javadoc line="1801">
                &lt;p&gt;Returns a quoted form of the given String, suitable for
                  inclusion in an ObjectName.  The returned value can be used as
                  the value associated with a key in an ObjectName.  The String
                  &lt;code&gt;s&lt;/code&gt; may contain any character.  Appropriate quoting
                  ensures that the returned value is legal in an ObjectName.&lt;/p&gt;
                  &lt;p&gt;The returned value consists of a quote (&apos;&quot;&apos;), a sequence of
                  characters corresponding to the characters of &lt;code&gt;s&lt;/code&gt;,
                  and another quote.  Characters in &lt;code&gt;s&lt;/code&gt; appear
                  unchanged within the returned value except:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;A quote (&apos;&quot;&apos;) is replaced by a backslash (\) followed by a quote.&lt;/li&gt;
                  &lt;li&gt;An asterisk (&apos;&apos;) is replaced by a backslash (\) followed by an
                  asterisk.&lt;/li&gt;
                  &lt;li&gt;A question mark (&apos;?&apos;) is replaced by a backslash (\) followed by
                  a question mark.&lt;/li&gt;
                  &lt;li&gt;A backslash (&apos;\&apos;) is replaced by two backslashes.&lt;/li&gt;
                  &lt;li&gt;A newline character (the character &apos;\n&apos; in Java) is replaced
                  by a backslash followed by the character &apos;\n&apos;.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    s the String to be quoted.                    
                </param>
                <return>
                    the quoted String.                    
                </return>
                <exception>
                    NullPointerException if <code>s</code> is null.                    
                </exception>
            </javadoc>
            <method name="quote" type="String" line="1831">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="1832"/>
                <declaration name="len" type="int" line="1833"/>
                <scope line="1834">
                    <declaration name="c" type="char" line="1835"/>
                </scope>
            </method>
            <javadoc line="1854">
                &lt;p&gt;Returns an unquoted form of the given String.  If
                  &lt;code&gt;q&lt;/code&gt; is a String returned by {@link #quote quote(s)},
                  then &lt;code&gt;unquote(q).equals(s)&lt;/code&gt;.  If there is no String
                  &lt;code&gt;s&lt;/code&gt; for which &lt;code&gt;quote(s).equals(q)&lt;/code&gt;, then
                  unquote(q) throws an IllegalArgumentException.&lt;/p&gt;
                  &lt;p&gt;These rules imply that there is a one-to-one mapping between
                  quoted and unquoted forms.&lt;/p&gt;                
                <param>
                    q the String to be unquoted.                    
                </param>
                <return>
                    the unquoted String.                    
                </return>
                <exception>
                    IllegalArgumentException if <code>q</code> could not
                      have been returned by the {@link #quote} method, for instance
                      if it does not begin and end with a quote (").                    
                </exception>
                <exception>
                    NullPointerException if <code>q</code> is null.                    
                </exception>
            </javadoc>
            <method name="unquote" type="String" line="1875">
                <params>
                    <param name="q" type="String"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="1876"/>
                <declaration name="len" type="int" line="1877"/>
                <scope line="1880">
                    <declaration name="c" type="char" line="1881"/>
                    <scope line="1882"/>
                    <scope line="1899"/>
                </scope>
            </method>
            <declaration name="WILDCARD" type="ObjectName" line="1915"/>
            <javadoc line="1915">
                Defines the wildcard &quot;:&quot; ObjectName.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="1926">
                &lt;p&gt;Test whether this ObjectName, which may be a pattern,
                  matches another ObjectName.  If &lt;code&gt;name&lt;/code&gt; is a pattern,
                  the result is false.  If this ObjectName is a pattern, the
                  result is true if and only if &lt;code&gt;name&lt;/code&gt; matches the
                  pattern.  If neither this ObjectName nor &lt;code&gt;name&lt;/code&gt; is
                  a pattern, the result is true if and only if the two
                  ObjectNames are equal as described for the {@link #equals(Object)} method.&lt;/p&gt;                
                <param>
                    name The name of the MBean to compare to.                    
                </param>
                <return>
                    True if <code>name</code> matches this ObjectName.                    
                </return>
                <exception>
                    NullPointerException if <code>name</code> is null.                    
                </exception>
            </javadoc>
            <method name="apply" type="boolean" line="1943">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="1952">
                    No pattern                    
                </comment>
            </method>
            <method name="matchDomains" type="boolean" line="1961">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="1963">
                    wildmatch domains                    
                </comment>
                <comment line="1964">
                    This ObjectName is the pattern                    
                </comment>
                <comment line="1965">
                    The other ObjectName is the string.                    
                </comment>
                <scope line="1962"/>
            </method>
            <method name="matchKeys" type="boolean" line="1971">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="1972">
                    If key property value pattern but not key property list                    
                </comment>
                <comment line="1973">
                    pattern, then the number of key properties must be equal                    
                </comment>
                <comment line="1974">
                                        
                </comment>
                <comment line="1980">
                    If key property value pattern or key property list pattern,                    
                </comment>
                <comment line="1981">
                    then every property inside pattern should exist in name                    
                </comment>
                <comment line="1982">
                                        
                </comment>
                <comment line="1988">
                    Find value in given object name for key at current                    
                </comment>
                <comment line="1989">
                    index in receiver                    
                </comment>
                <comment line="1990">
                                        
                </comment>
                <comment line="1994">
                    Did we find a value for this key ?                    
                </comment>
                <comment line="1995">
                                        
                </comment>
                <comment line="1997">
                    If this property is ok (same key, same value), go to next                    
                </comment>
                <comment line="1998">
                                        
                </comment>
                <comment line="2000">
                    wildmatch key property values                    
                </comment>
                <comment line="2001">
                    p is the property pattern, v is the string                    
                </comment>
                <comment line="2013">
                    If no pattern, then canonical names must be equal                    
                </comment>
                <comment line="2014">
                                        
                </comment>
                <scope line="1983">
                    <declaration name="nameProps" type="Map&lt;String,String&gt;" line="1984"/>
                    <declaration name="props" type="Property[]" line="1985"/>
                    <declaration name="cn" type="String" line="1986"/>
                    <scope line="1987">
                        <declaration name="p" type="Property" line="1991"/>
                        <declaration name="k" type="String" line="1992"/>
                        <declaration name="v" type="String" line="1993"/>
                        <scope line="1999"/>
                    </scope>
                </scope>
                <declaration name="p1" type="String" line="2015"/>
                <declaration name="p2" type="String" line="2016"/>
            </method>
            <method name="setMBeanServer" type="void" line="2024">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
            </method>
            <javadoc line="2030">
                &lt;p&gt;Compares two ObjectName instances. The ordering relation between
                  ObjectNames is not completely specified but is intended to be such
                  that a sorted list of ObjectNames will appear in an order that is
                  convenient for a person to read.&lt;/p&gt;
                  &lt;p&gt;In particular, if the two ObjectName instances have different
                  domains then their order is the lexicographical order of the domains.
                  The ordering of the key property list remains unspecified.&lt;/p&gt;
                  &lt;p&gt;For example, the ObjectName instances below:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Shapes:type=Square,name=3&lt;/li&gt;
                  &lt;li&gt;Colors:type=Red,name=2&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Triangle,side=isosceles,name=2&lt;/li&gt;
                  &lt;li&gt;Colors:type=Red,name=1&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Square,name=1&lt;/li&gt;
                  &lt;li&gt;Colors:type=Blue,name=1&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Square,name=2&lt;/li&gt;
                  &lt;li&gt;JMImplementation:type=MBeanServerDelegate&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Triangle,side=scalene,name=1&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;could be ordered as follows:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Colors:type=Blue,name=1&lt;/li&gt;
                  &lt;li&gt;Colors:type=Red,name=1&lt;/li&gt;
                  &lt;li&gt;Colors:type=Red,name=2&lt;/li&gt;
                  &lt;li&gt;JMImplementation:type=MBeanServerDelegate&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Square,name=1&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Square,name=2&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Square,name=3&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Triangle,side=scalene,name=1&lt;/li&gt;
                  &lt;li&gt;Shapes:type=Triangle,side=isosceles,name=2&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    name the ObjectName to be compared.                    
                </param>
                <return>
                    a negative integer, zero, or a positive integer as this
                      ObjectName is less than, equal to, or greater than the
                      specified ObjectName.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="compareTo" type="int" line="2073">
                <params>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="2074">
                    Quick optimization:                    
                </comment>
                <comment line="2075">
                                        
                </comment>
                <comment line="2078">
                    (1) Compare domains                    
                </comment>
                <comment line="2079">
                                        
                </comment>
                <comment line="2084">
                    (2) Compare &quot;type=&quot; keys                    
                </comment>
                <comment line="2085">
                                        
                </comment>
                <comment line="2086">
                    Within a given domain, all names with missing or empty &quot;type=&quot;                    
                </comment>
                <comment line="2087">
                    come before all names with non-empty type.                    
                </comment>
                <comment line="2088">
                                        
                </comment>
                <comment line="2089">
                    When both types are missing or empty, canonical-name ordering                    
                </comment>
                <comment line="2090">
                    applies which is a total order.                    
                </comment>
                <comment line="2091">
                                        
                </comment>
                <comment line="2102">
                    (3) Compare canonical names                    
                </comment>
                <comment line="2103">
                                        
                </comment>
                <declaration name="domainValue" type="int" line="2080"/>
                <declaration name="thisTypeKey" type="String" line="2092"/>
                <declaration name="anotherTypeKey" type="String" line="2093"/>
                <declaration name="typeKeyValue" type="int" line="2098"/>
            </method>
        </class>
    </source>