<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="com.sun.jmx.defaults.JmxProperties.MISC_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.DescriptorCache"/>
        <import package="com.sun.jmx.mbeanserver.Introspector"/>
        <import package="com.sun.jmx.mbeanserver.MBeanSupport"/>
        <import package="com.sun.jmx.mbeanserver.MXBeanSupport"/>
        <import package="com.sun.jmx.mbeanserver.StandardMBeanSupport"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.WeakHashMap"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.openmbean.OpenMBeanAttributeInfo"/>
        <import package="javax.management.openmbean.OpenMBeanAttributeInfoSupport"/>
        <import package="javax.management.openmbean.OpenMBeanConstructorInfo"/>
        <import package="javax.management.openmbean.OpenMBeanConstructorInfoSupport"/>
        <import package="javax.management.openmbean.OpenMBeanOperationInfo"/>
        <import package="javax.management.openmbean.OpenMBeanOperationInfoSupport"/>
        <import package="javax.management.openmbean.OpenMBeanParameterInfo"/>
        <import package="javax.management.openmbean.OpenMBeanParameterInfoSupport"/>
        <class name="StandardMBean" line="23">
            <implements interface="DynamicMBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="23">
                &lt;p&gt;An MBean whose management interface is determined by reflection
                  on a Java interface.&lt;/p&gt;
                  &lt;p&gt;This class brings more flexibility to the notion of Management
                  Interface in the use of Standard MBeans.  Straightforward use of
                  the patterns for Standard MBeans described in the JMX Specification
                  means that there is a fixed relationship between the implementation
                  class of an MBean and its management interface (i.e., if the
                  implementation class is Thing, the management interface must be
                  ThingMBean).  This class makes it possible to keep the convenience
                  of specifying the management interface with a Java interface,
                  without requiring that there be any naming relationship between the
                  implementation and interface classes.&lt;/p&gt;
                  &lt;p&gt;By making a DynamicMBean out of an MBean, this class makes
                  it possible to select any interface implemented by the MBean as its
                  management interface, provided that it complies with JMX patterns
                  (i.e., attributes defined by getter/setter etc...).&lt;/p&gt;
                  &lt;p&gt; This class also provides hooks that make it possible to supply
                  custom descriptions and names for the {@link MBeanInfo} returned by
                  the DynamicMBean interface.&lt;/p&gt;
                  &lt;p&gt;Using this class, an MBean can be created with any
                  implementation class name &lt;i&gt;Impl&lt;/i&gt; and with a management
                  interface defined (as for current Standard MBeans) by any interface
                  &lt;i&gt;Intf&lt;/i&gt;, in one of two general ways:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Using the public constructor{@link #StandardMBean(java.lang.Object,java.lang.Class,boolean)StandardMBean(impl,interface)}:
                  &lt;pre&gt;
                  MBeanServer mbs;
                  ...
                  Impl impl = new Impl(...);
                  StandardMBean mbean = new StandardMBean(impl, Intf.class, false);
                  mbs.registerMBean(mbean, objectName);
                  &lt;/pre&gt;&lt;/li&gt;
                  &lt;li&gt;Subclassing StandardMBean:
                  &lt;pre&gt;
                  public class Impl extends StandardMBean implements Intf {
                  public Impl() {
                  super(Intf.class, false);
                  }
                  // implement methods of Intf
                  }
                  [...]
                  MBeanServer mbs;
                  ....
                  Impl impl = new Impl();
                  mbs.registerMBean(impl, objectName);
                  &lt;/pre&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;In either case, the class &lt;i&gt;Impl&lt;/i&gt; must implement the
                  interface &lt;i&gt;Intf&lt;/i&gt;.&lt;/p&gt;
                  &lt;p&gt;Standard MBeans based on the naming relationship between
                  implementation and interface classes are of course still
                  available.&lt;/p&gt;
                  &lt;p&gt;This class may also be used to construct MXBeans.  The usage
                  is exactly the same as for Standard MBeans except that in the
                  examples above, the {@code false} parameter to the constructor or{@code super(...)} invocation is instead {@code true}.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="descriptors" type="DescriptorCache" line="82"/>
            <declaration name="mbean" type="MBeanSupport&amp;lt;?&amp;gt;" line="83"/>
            <javadoc line="83">
                The DynamicMBean that wraps the MXBean or Standard MBean implementation.                
            </javadoc>
            <declaration name="cachedMBeanInfo" type="MBeanInfo" line="87"/>
            <javadoc line="87">
                The cached MBeanInfo.                
            </javadoc>
            <javadoc line="91">
                Make a DynamicMBean out of &lt;var&gt;implementation&lt;/var&gt;, using the
                  specified &lt;var&gt;mbeanInterface&lt;/var&gt; class.                
                <param>
                    implementation The implementation of this MBean.
                      If &lt;code&gt;null&lt;/code&gt;, and null implementation is allowed,
                      then the implementation is assumed to be &lt;var&gt;this&lt;/var&gt;.                    
                </param>
                <param>
                    mbeanInterface The Management Interface exported by this
                      MBean&apos;s implementation. If &lt;code&gt;null&lt;/code&gt;, then this
                      object will use standard JMX design pattern to determine
                      the management interface associated with the given
                      implementation.                    
                </param>
                <param>
                    nullImplementationAllowed &lt;code&gt;true&lt;/code&gt; if a null
                      implementation is allowed. If null implementation is allowed,
                      and a null implementation is passed, then the implementation
                      is assumed to be &lt;var&gt;this&lt;/var&gt;.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;var&gt;implementation&lt;/var&gt; is null, and null is not allowed.                    
                </exception>
            </javadoc>
            <method name="construct" type="void" line="109">
                <params>
                    <param name="implementation" type="T"/>
                    <param name="mbeanInterface" type="Class&lt;T&gt;"/>
                    <param name="nullImplementationAllowed" type="boolean"/>
                    <param name="isMXBean" type="boolean"/>
                </params>
                <scope line="110"/>
                <scope line="114">
                    <scope line="115"/>
                </scope>
                <scope line="120">
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="127">
                &lt;p&gt;Make a DynamicMBean out of the object
                  &lt;var&gt;implementation&lt;/var&gt;, using the specified
                  &lt;var&gt;mbeanInterface&lt;/var&gt; class.&lt;/p&gt;                
                <param>
                    implementation The implementation of this MBean.                    
                </param>
                <param>
                    mbeanInterface The Management Interface exported by this
                      MBean&apos;s implementation. If &lt;code&gt;null&lt;/code&gt;, then this
                      object will use standard JMX design pattern to determine
                      the management interface associated with the given
                      implementation.                    
                </param>
                <param>
                    &lt;T&gt;
                      Allows the compiler to check
                      that {@code implementation} does indeed implement the class
                      described by {@code mbeanInterface}.  The compiler can only
                      check this if {@code mbeanInterface} is a class literal such
                      as {@code MyMBean.class}.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;var&gt;implementation&lt;/var&gt; is null.                    
                </exception>
                <exception>
                    NotCompliantMBeanException if the &lt;var&gt;mbeanInterface&lt;/var&gt;
                      does not follow JMX design patterns for Management Interfaces, or
                      if the given &lt;var&gt;implementation&lt;/var&gt; does not implement the
                      specified interface.                    
                </exception>
            </javadoc>
            <method name="StandardMBean" type="constructor" line="150">
                <params>
                    <param name="implementation" type="T"/>
                    <param name="mbeanInterface" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="153">
                &lt;p&gt;Make a DynamicMBean out of &lt;var&gt;this&lt;/var&gt;, using the specified
                  &lt;var&gt;mbeanInterface&lt;/var&gt; class.&lt;/p&gt;
                  &lt;p&gt;Calls {@link #StandardMBean(java.lang.Object,java.lang.Class)this(this,mbeanInterface)}.
                  This constructor is reserved to subclasses.&lt;/p&gt;                
                <param>
                    mbeanInterface The Management Interface exported by this
                      MBean.                    
                </param>
                <exception>
                    NotCompliantMBeanException if the &lt;var&gt;mbeanInterface&lt;/var&gt;
                      does not follow JMX design patterns for Management Interfaces, or
                      if &lt;var&gt;this&lt;/var&gt; does not implement the specified interface.                    
                </exception>
            </javadoc>
            <method name="StandardMBean" type="constructor" line="164">
                <params>
                    <param name="mbeanInterface" type="Class&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="167">
                &lt;p&gt;Make a DynamicMBean out of the object
                  &lt;var&gt;implementation&lt;/var&gt;, using the specified
                  &lt;var&gt;mbeanInterface&lt;/var&gt; class, and choosing whether the
                  resultant MBean is an MXBean.  This constructor can be used
                  to make either Standard MBeans or MXBeans.  Unlike the
                  constructor {@link #StandardMBean(Object,Class)}, it
                  does not throw NotCompliantMBeanException.&lt;/p&gt;                
                <param>
                    implementation The implementation of this MBean.                    
                </param>
                <param>
                    mbeanInterface The Management Interface exported by this
                      MBean&apos;s implementation. If &lt;code&gt;null&lt;/code&gt;, then this
                      object will use standard JMX design pattern to determine
                      the management interface associated with the given
                      implementation.                    
                </param>
                <param>
                    isMXBean If true, the {@code mbeanInterface} parameter
                      names an MXBean interface and the resultant MBean is an MXBean.                    
                </param>
                <param>
                    &lt;T&gt;
                      Allows the compiler to check
                      that {@code implementation} does indeed implement the class
                      described by {@code mbeanInterface}.  The compiler can only
                      check this if {@code mbeanInterface} is a class literal such
                      as {@code MyMBean.class}.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;var&gt;implementation&lt;/var&gt; is null, or if the &lt;var&gt;mbeanInterface&lt;/var&gt;
                      does not follow JMX design patterns for Management Interfaces, or
                      if the given &lt;var&gt;implementation&lt;/var&gt; does not implement the
                      specified interface.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="StandardMBean" type="constructor" line="196">
                <params>
                    <param name="implementation" type="T"/>
                    <param name="mbeanInterface" type="Class&lt;T&gt;"/>
                    <param name="isMXBean" type="boolean"/>
                </params>
                <scope line="197"/>
                <scope line="200"/>
            </method>
            <javadoc line="204">
                &lt;p&gt;Make a DynamicMBean out of &lt;var&gt;this&lt;/var&gt;, using the specified
                  &lt;var&gt;mbeanInterface&lt;/var&gt; class, and choosing whether the resulting
                  MBean is an MXBean.  This constructor can be used
                  to make either Standard MBeans or MXBeans.  Unlike the
                  constructor {@link #StandardMBean(Object,Class)}, it
                  does not throw NotCompliantMBeanException.&lt;/p&gt;
                  &lt;p&gt;Calls {@link #StandardMBean(java.lang.Object,java.lang.Class,boolean)this(this, mbeanInterface, isMXBean)}.
                  This constructor is reserved to subclasses.&lt;/p&gt;                
                <param>
                    mbeanInterface The Management Interface exported by this
                      MBean.                    
                </param>
                <param>
                    isMXBean If true, the {@code mbeanInterface} parameter
                      names an MXBean interface and the resultant MBean is an MXBean.                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;var&gt;mbeanInterface&lt;/var&gt;
                      does not follow JMX design patterns for Management Interfaces, or
                      if &lt;var&gt;this&lt;/var&gt; does not implement the specified interface.                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="StandardMBean" type="constructor" line="222">
                <params>
                    <param name="mbeanInterface" type="Class&lt;?&gt;"/>
                    <param name="isMXBean" type="boolean"/>
                </params>
                <scope line="223"/>
                <scope line="226"/>
            </method>
            <javadoc line="230">
                &lt;p&gt;Replace the implementation object wrapped in this object.&lt;/p&gt;                
                <param>
                    implementation The new implementation of this Standard MBean
                      (or MXBean). The &lt;code&gt;implementation&lt;/code&gt; object must implement
                      the Standard MBean (or MXBean) interface that was supplied when this
                      &lt;code&gt;StandardMBean&lt;/code&gt; was constructed.                    
                </param>
                <exception>
                    IllegalArgumentException if the given
                      &lt;var&gt;implementation&lt;/var&gt; is null.                    
                </exception>
                <exception>
                    NotCompliantMBeanException if the given
                      &lt;var&gt;implementation&lt;/var&gt; does not implement the
                      Standard MBean (or MXBean) interface that was
                      supplied at construction.                    
                </exception>
                <see>
                    #getImplementation                    
                </see>
            </javadoc>
            <method name="setImplementation" type="void" line="244">
                <params>
                    <param name="implementation" type="Object"/>
                </params>
                <scope line="246"/>
                <scope line="249"/>
            </method>
            <javadoc line="253">
                Get the implementation of this Standard MBean (or MXBean).                
                <return>
                    The implementation of this Standard MBean (or MXBean).                    
                </return>
                <see>
                    #setImplementation                    
                </see>
            </javadoc>
            <method name="getImplementation" type="Object" line="258"/>
            <javadoc line="261">
                Get the Management Interface of this Standard MBean (or MXBean).                
                <return>
                    The management interface of this Standard MBean (or MXBean).                    
                </return>
            </javadoc>
            <method name="getMBeanInterface" type="Class&lt;?&gt;" line="265"/>
            <javadoc line="268">
                Get the class of the implementation of this Standard MBean (or MXBean).                
                <return>
                    The class of the implementation of this Standard MBean (or MXBean).                    
                </return>
            </javadoc>
            <method name="getImplementationClass" type="Class&lt;?&gt;" line="272"/>
            <method name="getAttribute" type="Object" line="275">
                <params>
                    <param name="attribute" type="String"/>
                </params>
            </method>
            <method name="setAttribute" type="void" line="278">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
            </method>
            <method name="getAttributes" type="AttributeList" line="281">
                <params>
                    <param name="attributes" type="String[]"/>
                </params>
            </method>
            <method name="setAttributes" type="AttributeList" line="284">
                <params>
                    <param name="attributes" type="AttributeList"/>
                </params>
            </method>
            <method name="invoke" type="Object" line="287">
                <params>
                    <param name="actionName" type="String"/>
                    <param name="params" type="Object"/>
                    <param name="signature" type="String"/>
                </params>
            </method>
            <javadoc line="290">
                Get the {@link MBeanInfo} for this MBean.
                  &lt;p&gt;
                  This method implements{@link javax.management.DynamicMBean#getMBeanInfo()DynamicMBean.getMBeanInfo()}.
                  &lt;p&gt;
                  This method first calls {@link #getCachedMBeanInfo()} in order to
                  retrieve the cached MBeanInfo for this MBean, if any. If the
                  MBeanInfo returned by {@link #getCachedMBeanInfo()} is not null,
                  then it is returned.&lt;br&gt;
                  Otherwise, this method builds a default MBeanInfo for this MBean,
                  using the Management Interface specified for this MBean.
                  &lt;p&gt;
                  While building the MBeanInfo, this method calls the customization
                  hooks that make it possible for subclasses to supply their custom
                  descriptions, parameter names, etc...&lt;br&gt;
                  Finally, it calls {@link #cacheMBeanInfo(javax.management.MBeanInfo)cacheMBeanInfo()} in order to cache the new MBeanInfo.                
                <return>
                    The cached MBeanInfo for that MBean, if not null, or a
                      newly built MBeanInfo if none was cached.                    
                </return>
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="309">
                <scope line="310">
                    <declaration name="cached" type="MBeanInfo" line="311"/>
                </scope>
                <scope line="314">
                    <scope line="315"/>
                </scope>
                <scope line="319"/>
                <declaration name="msupport" type="MBeanSupport&amp;lt;?&amp;gt;" line="322"/>
                <declaration name="bi" type="MBeanInfo" line="323"/>
                <declaration name="impl" type="Object" line="324"/>
                <declaration name="immutableInfo" type="boolean" line="325"/>
                <declaration name="cname" type="String" line="326"/>
                <declaration name="text" type="String" line="327"/>
                <declaration name="ctors" type="MBeanConstructorInfo[]" line="328"/>
                <declaration name="attrs" type="MBeanAttributeInfo[]" line="329"/>
                <declaration name="ops" type="MBeanOperationInfo[]" line="330"/>
                <declaration name="ntfs" type="MBeanNotificationInfo[]" line="331"/>
                <declaration name="desc" type="Descriptor" line="332"/>
                <declaration name="nmbi" type="MBeanInfo" line="333"/>
                <scope line="334"/>
                <scope line="337">
                    <scope line="338"/>
                </scope>
            </method>
            <javadoc line="344">
                Customization hook:
                  Get the className that will be used in the MBeanInfo returned by
                  this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom class name.  The default implementation returns{@link MBeanInfo#getClassName() info.getClassName()}.                
                <param>
                    info The default MBeanInfo derived by reflection.                    
                </param>
                <return>
                    the class name for the new MBeanInfo.                    
                </return>
            </javadoc>
            <method name="getClassName" type="String" line="354">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
            </method>
            <javadoc line="358">
                Customization hook:
                  Get the description that will be used in the MBeanInfo returned by
                  this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom MBean description.  The default implementation returns{@link MBeanInfo#getDescription() info.getDescription()}.                
                <param>
                    info The default MBeanInfo derived by reflection.                    
                </param>
                <return>
                    the description for the new MBeanInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="368">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
            </method>
            <javadoc line="372">
                &lt;p&gt;Customization hook:
                  Get the description that will be used in the MBeanFeatureInfo
                  returned by this MBean.&lt;/p&gt;
                  &lt;p&gt;Subclasses may redefine this method in order to supply
                  their custom description.  The default implementation returns{@link MBeanFeatureInfo#getDescription()info.getDescription()}.&lt;/p&gt;
                  &lt;p&gt;This method is called by{@link #getDescription(MBeanAttributeInfo)},{@link #getDescription(MBeanOperationInfo)},{@link #getDescription(MBeanConstructorInfo)}.&lt;/p&gt;                
                <param>
                    info The default MBeanFeatureInfo derived by reflection.                    
                </param>
                <return>
                    the description for the given MBeanFeatureInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="382">
                <params>
                    <param name="info" type="MBeanFeatureInfo"/>
                </params>
            </method>
            <javadoc line="386">
                Customization hook:
                  Get the description that will be used in the MBeanAttributeInfo
                  returned by this MBean.
                  &lt;p&gt;Subclasses may redefine this method in order to supply their
                  custom description.  The default implementation returns {@link #getDescription(MBeanFeatureInfo)getDescription((MBeanFeatureInfo) info)}.                
                <param>
                    info The default MBeanAttributeInfo derived by reflection.                    
                </param>
                <return>
                    the description for the given MBeanAttributeInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="395">
                <params>
                    <param name="info" type="MBeanAttributeInfo"/>
                </params>
            </method>
            <javadoc line="398">
                Customization hook:
                  Get the description that will be used in the MBeanConstructorInfo
                  returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom description.
                  The default implementation returns {@link #getDescription(MBeanFeatureInfo)getDescription((MBeanFeatureInfo) info)}.                
                <param>
                    info The default MBeanConstructorInfo derived by reflection.                    
                </param>
                <return>
                    the description for the given MBeanConstructorInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="409">
                <params>
                    <param name="info" type="MBeanConstructorInfo"/>
                </params>
            </method>
            <javadoc line="412">
                Customization hook:
                  Get the description that will be used for the  &lt;var&gt;sequence&lt;/var&gt;
                  MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom description.  The default implementation returns{@link MBeanParameterInfo#getDescription() param.getDescription()}.                
                <param>
                    ctor  The default MBeanConstructorInfo derived by reflection.                    
                </param>
                <param>
                    param The default MBeanParameterInfo derived by reflection.                    
                </param>
                <param>
                    sequence The sequence number of the parameter considered
                      (&quot;0&quot; for the first parameter, &quot;1&quot; for the second parameter,
                      etc...).                    
                </param>
                <return>
                    the description for the given MBeanParameterInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="426">
                <params>
                    <param name="ctor" type="MBeanConstructorInfo"/>
                    <param name="param" type="MBeanParameterInfo"/>
                    <param name="sequence" type="int"/>
                </params>
            </method>
            <javadoc line="430">
                Customization hook:
                  Get the name that will be used for the &lt;var&gt;sequence&lt;/var&gt;
                  MBeanParameterInfo of the MBeanConstructorInfo returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom parameter name.  The default implementation returns{@link MBeanParameterInfo#getName() param.getName()}.                
                <param>
                    ctor  The default MBeanConstructorInfo derived by reflection.                    
                </param>
                <param>
                    param The default MBeanParameterInfo derived by reflection.                    
                </param>
                <param>
                    sequence The sequence number of the parameter considered
                      (&quot;0&quot; for the first parameter, &quot;1&quot; for the second parameter,
                      etc...).                    
                </param>
                <return>
                    the name for the given MBeanParameterInfo.                    
                </return>
            </javadoc>
            <method name="getParameterName" type="String" line="444">
                <params>
                    <param name="ctor" type="MBeanConstructorInfo"/>
                    <param name="param" type="MBeanParameterInfo"/>
                    <param name="sequence" type="int"/>
                </params>
            </method>
            <javadoc line="448">
                Customization hook:
                  Get the description that will be used in the MBeanOperationInfo
                  returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom description.  The default implementation returns{@link #getDescription(MBeanFeatureInfo)getDescription((MBeanFeatureInfo) info)}.                
                <param>
                    info The default MBeanOperationInfo derived by reflection.                    
                </param>
                <return>
                    the description for the given MBeanOperationInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="458">
                <params>
                    <param name="info" type="MBeanOperationInfo"/>
                </params>
            </method>
            <javadoc line="461">
                Customization hook:
                  Get the &lt;var&gt;impact&lt;/var&gt; flag of the operation that will be used in
                  the MBeanOperationInfo returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom impact flag.  The default implementation returns{@link MBeanOperationInfo#getImpact() info.getImpact()}.                
                <param>
                    info The default MBeanOperationInfo derived by reflection.                    
                </param>
                <return>
                    the impact flag for the given MBeanOperationInfo.                    
                </return>
            </javadoc>
            <method name="getImpact" type="int" line="471">
                <params>
                    <param name="info" type="MBeanOperationInfo"/>
                </params>
            </method>
            <javadoc line="475">
                Customization hook:
                  Get the name that will be used for the &lt;var&gt;sequence&lt;/var&gt;
                  MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom parameter name.  The default implementation returns{@link MBeanParameterInfo#getName() param.getName()}.                
                <param>
                    op    The default MBeanOperationInfo derived by reflection.                    
                </param>
                <param>
                    param The default MBeanParameterInfo derived by reflection.                    
                </param>
                <param>
                    sequence The sequence number of the parameter considered
                      (&quot;0&quot; for the first parameter, &quot;1&quot; for the second parameter,
                      etc...).                    
                </param>
                <return>
                    the name to use for the given MBeanParameterInfo.                    
                </return>
            </javadoc>
            <method name="getParameterName" type="String" line="489">
                <params>
                    <param name="op" type="MBeanOperationInfo"/>
                    <param name="param" type="MBeanParameterInfo"/>
                    <param name="sequence" type="int"/>
                </params>
            </method>
            <javadoc line="493">
                Customization hook:
                  Get the description that will be used for the  &lt;var&gt;sequence&lt;/var&gt;
                  MBeanParameterInfo of the MBeanOperationInfo returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom description.  The default implementation returns{@link MBeanParameterInfo#getDescription() param.getDescription()}.                
                <param>
                    op    The default MBeanOperationInfo derived by reflection.                    
                </param>
                <param>
                    param The default MBeanParameterInfo derived by reflection.                    
                </param>
                <param>
                    sequence The sequence number of the parameter considered
                      (&quot;0&quot; for the first parameter, &quot;1&quot; for the second parameter,
                      etc...).                    
                </param>
                <return>
                    the description for the given MBeanParameterInfo.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="507">
                <params>
                    <param name="op" type="MBeanOperationInfo"/>
                    <param name="param" type="MBeanParameterInfo"/>
                    <param name="sequence" type="int"/>
                </params>
            </method>
            <javadoc line="511">
                Customization hook:
                  Get the MBeanConstructorInfo[] that will be used in the MBeanInfo
                  returned by this MBean.
                  &lt;br&gt;
                  By default, this method returns &lt;code&gt;null&lt;/code&gt; if the wrapped
                  implementation is not &lt;var&gt;this&lt;/var&gt;. Indeed, if the wrapped
                  implementation is not this object itself, it will not be possible
                  to recreate a wrapped implementation by calling the implementation
                  constructors through &lt;code&gt;MBeanServer.createMBean(...)&lt;/code&gt;.&lt;br&gt;
                  Otherwise, if the wrapped implementation is &lt;var&gt;this&lt;/var&gt;,
                  &lt;var&gt;ctors&lt;/var&gt; is returned.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to modify this
                  behavior, if needed.                
                <param>
                    ctors The default MBeanConstructorInfo[] derived by reflection.                    
                </param>
                <param>
                    impl  The wrapped implementation. If &lt;code&gt;null&lt;/code&gt; is
                      passed, the wrapped implementation is ignored and
                      &lt;var&gt;ctors&lt;/var&gt; is returned.                    
                </param>
                <return>
                    the MBeanConstructorInfo[] for the new MBeanInfo.                    
                </return>
            </javadoc>
            <method name="getConstructors" type="MBeanConstructorInfo[]" line="532">
                <params>
                    <param name="ctors" type="MBeanConstructorInfo[]"/>
                    <param name="impl" type="Object"/>
                </params>
            </method>
            <javadoc line="537">
                Customization hook:
                  Get the MBeanNotificationInfo[] that will be used in the MBeanInfo
                  returned by this MBean.
                  &lt;br&gt;
                  Subclasses may redefine this method in order to supply their
                  custom notifications.                
                <param>
                    info The default MBeanInfo derived by reflection.                    
                </param>
                <return>
                    the MBeanNotificationInfo[] for the new MBeanInfo.                    
                </return>
            </javadoc>
            <method name="getNotifications" type="MBeanNotificationInfo[]" line="547">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
            </method>
            <javadoc line="550">
                &lt;p&gt;Get the Descriptor that will be used in the MBeanInfo
                  returned by this MBean.&lt;/p&gt;
                  &lt;p&gt;Subclasses may redefine this method in order to supply
                  their custom descriptor.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method returns a Descriptor
                  that contains at least the field {@code interfaceClassName}, with
                  value {@link #getMBeanInterface()}.getName(). It may also contain
                  the field {@code immutableInfo}, with a value that is the string{@code &quot;true&quot;} if the implementation can determine that the{@code MBeanInfo} returned by {@link #getMBeanInfo()} will always
                  be the same. It may contain other fields: fields defined by the
                  JMX specification must have appropriate values, and other fields
                  must follow the conventions for non-standard field names.&lt;/p&gt;                
                <param>
                    info The default MBeanInfo derived by reflection.                    
                </param>
                <return>
                    the Descriptor for the new MBeanInfo.                    
                </return>
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="565">
                <params>
                    <param name="info" type="MBeanInfo"/>
                    <param name="immutableInfo" type="boolean"/>
                </params>
                <declaration name="desc" type="ImmutableDescriptor" line="566"/>
                <scope line="567">
                    <declaration name="interfaceClassNameS" type="String" line="568"/>
                    <declaration name="immutableInfoS" type="String" line="569"/>
                </scope>
                <scope line="573">
                    <declaration name="d" type="Descriptor" line="574"/>
                    <declaration name="fields" type="Map&amp;lt;String,Object&amp;gt;" line="575"/>
                    <scope line="576">
                        <scope line="577"/>
                        <scope line="580"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="588">
                Customization hook:
                  Return the MBeanInfo cached for this object.
                  &lt;p&gt;Subclasses may redefine this method in order to implement their
                  own caching policy.  The default implementation stores one{@link MBeanInfo} object per instance.                
                <return>
                    The cached MBeanInfo, or null if no MBeanInfo is cached.                    
                </return>
                <see>
                    #cacheMBeanInfo(MBeanInfo)                    
                </see>
            </javadoc>
            <method name="getCachedMBeanInfo" type="MBeanInfo" line="596"/>
            <javadoc line="599">
                Customization hook:
                  cache the MBeanInfo built for this object.
                  &lt;p&gt;Subclasses may redefine this method in order to implement
                  their own caching policy.  The default implementation stores
                  &lt;code&gt;info&lt;/code&gt; in this instance.  A subclass can define
                  other policies, such as not saving &lt;code&gt;info&lt;/code&gt; (so it is
                  reconstructed every time {@link #getMBeanInfo()} is called) or
                  sharing a unique {@link MBeanInfo} object when several
                  &lt;code&gt;StandardMBean&lt;/code&gt; instances have equal {@link MBeanInfo} values.                
                <param>
                    info the new &lt;code&gt;MBeanInfo&lt;/code&gt; to cache.  Any
                      previously cached value is discarded.  This parameter may be
                      null, in which case there is no new cached value.                    
                </param>
            </javadoc>
            <method name="cacheMBeanInfo" type="void" line="613">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
            </method>
            <method name="isMXBean" type="boolean" line="616"/>
            <method name="identicalArrays" type="boolean" line="619">
                <params>
                    <param name="a" type="T[]"/>
                    <param name="b" type="T[]"/>
                </params>
                <scope line="622"/>
            </method>
            <method name="equal" type="boolean" line="627">
                <params>
                    <param name="a" type="T"/>
                    <param name="b" type="T"/>
                </params>
            </method>
            <method name="customize" type="MBeanParameterInfo" line="632">
                <params>
                    <param name="pi" type="MBeanParameterInfo"/>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                </params>
                <scope line="634">
                    <declaration name="opi" type="OpenMBeanParameterInfo" line="635"/>
                </scope>
                <scope line="638"/>
            </method>
            <method name="customize" type="MBeanConstructorInfo" line="642">
                <params>
                    <param name="ci" type="MBeanConstructorInfo"/>
                    <param name="description" type="String"/>
                    <param name="signature" type="MBeanParameterInfo[]"/>
                </params>
                <scope line="644">
                    <declaration name="oparams" type="OpenMBeanParameterInfo[]" line="645"/>
                </scope>
                <scope line="648"/>
            </method>
            <method name="customize" type="MBeanOperationInfo" line="652">
                <params>
                    <param name="oi" type="MBeanOperationInfo"/>
                    <param name="description" type="String"/>
                    <param name="signature" type="MBeanParameterInfo[]"/>
                    <param name="impact" type="int"/>
                </params>
                <scope line="654">
                    <declaration name="ooi" type="OpenMBeanOperationInfo" line="655"/>
                    <declaration name="oparams" type="OpenMBeanParameterInfo[]" line="656"/>
                </scope>
                <scope line="659"/>
            </method>
            <method name="customize" type="MBeanAttributeInfo" line="663">
                <params>
                    <param name="ai" type="MBeanAttributeInfo"/>
                    <param name="description" type="String"/>
                </params>
                <scope line="665">
                    <declaration name="oai" type="OpenMBeanAttributeInfo" line="666"/>
                </scope>
                <scope line="669"/>
            </method>
            <method name="paramsToOpenParams" type="OpenMBeanParameterInfo[]" line="673">
                <params>
                    <param name="params" type="MBeanParameterInfo[]"/>
                </params>
                <declaration name="oparams" type="OpenMBeanParameterInfo[]" line="675"/>
            </method>
            <method name="getConstructors" type="MBeanConstructorInfo[]" line="679">
                <params>
                    <param name="info" type="MBeanInfo"/>
                    <param name="impl" type="Object"/>
                </params>
                <declaration name="ctors" type="MBeanConstructorInfo[]" line="680"/>
                <declaration name="ctorlen" type="int" line="682"/>
                <declaration name="nctors" type="MBeanConstructorInfo[]" line="683"/>
                <scope line="684">
                    <declaration name="c" type="MBeanConstructorInfo" line="685"/>
                    <declaration name="params" type="MBeanParameterInfo[]" line="686"/>
                    <declaration name="nps" type="MBeanParameterInfo[]" line="687"/>
                    <scope line="688">
                        <declaration name="plen" type="int" line="689"/>
                        <scope line="691">
                            <declaration name="p" type="MBeanParameterInfo" line="692"/>
                        </scope>
                    </scope>
                    <scope line="696"/>
                </scope>
            </method>
            <method name="getOperations" type="MBeanOperationInfo[]" line="703">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
                <declaration name="ops" type="MBeanOperationInfo[]" line="704"/>
                <declaration name="oplen" type="int" line="706"/>
                <declaration name="nops" type="MBeanOperationInfo[]" line="707"/>
                <scope line="708">
                    <declaration name="o" type="MBeanOperationInfo" line="709"/>
                    <declaration name="params" type="MBeanParameterInfo[]" line="710"/>
                    <declaration name="nps" type="MBeanParameterInfo[]" line="711"/>
                    <scope line="712">
                        <declaration name="plen" type="int" line="713"/>
                        <scope line="715">
                            <declaration name="p" type="MBeanParameterInfo" line="716"/>
                        </scope>
                    </scope>
                    <scope line="720"/>
                </scope>
            </method>
            <method name="getAttributes" type="MBeanAttributeInfo[]" line="727">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
                <declaration name="atts" type="MBeanAttributeInfo[]" line="728"/>
                <declaration name="natts" type="MBeanAttributeInfo[]" line="730"/>
                <declaration name="attlen" type="int" line="731"/>
                <scope line="733">
                    <declaration name="a" type="MBeanAttributeInfo" line="734"/>
                </scope>
            </method>
            <javadoc line="739">
                &lt;p&gt;Allows the MBean to perform any operations it needs before
                  being registered in the MBean server.  If the name of the MBean
                  is not specified, the MBean can provide a name for its
                  registration.  If any exception is raised, the MBean will not be
                  registered in the MBean server.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method returns the {@code name}parameter.  It does nothing else for
                  Standard MBeans.  For MXBeans, it records the {@code MBeanServer}and {@code ObjectName} parameters so they can be used to translate
                  inter-MXBean references.&lt;/p&gt;
                  &lt;p&gt;It is good practice for a subclass that overrides this method
                  to call the overridden method via {@code super.preRegister(...)}.
                  This is necessary if this object is an MXBean that is referenced
                  by attributes or operations in other MXBeans.&lt;/p&gt;                
                <param>
                    server The MBean server in which the MBean will be registered.                    
                </param>
                <param>
                    name The object name of the MBean.  This name is null if
                      the name parameter to one of the &lt;code&gt;createMBean&lt;/code&gt; or
                      &lt;code&gt;registerMBean&lt;/code&gt; methods in the {@link MBeanServer}interface is null.  In that case, this method must return a
                      non-null ObjectName for the new MBean.                    
                </param>
                <return>
                    The name under which the MBean is to be registered.
                      This value must not be null.  If the &lt;code&gt;name&lt;/code&gt;
                      parameter is not null, it will usually but not necessarily be
                      the returned value.                    
                </return>
                <throws>
                    IllegalArgumentException if this is an MXBean and{@code name} is null.                    
                </throws>
                <throws>
                    InstanceAlreadyExistsException if this is an MXBean and
                      it has already been registered under another name (in this
                      MBean Server or another).                    
                </throws>
                <throws>
                    Exception no other checked exceptions are thrown by
                      this method but {@code Exception} is declared so that subclasses
                      can override the method and throw their own exceptions.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="770">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="774">
                &lt;p&gt;Allows the MBean to perform any operations needed after having been
                  registered in the MBean server or after the registration has failed.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method does nothing for
                  Standard MBeans.  For MXBeans, it undoes any work done by{@link #preRegister preRegister} if registration fails.&lt;/p&gt;
                  &lt;p&gt;It is good practice for a subclass that overrides this method
                  to call the overridden method via {@code super.postRegister(...)}.
                  This is necessary if this object is an MXBean that is referenced
                  by attributes or operations in other MXBeans.&lt;/p&gt;                
                <param>
                    registrationDone Indicates whether or not the MBean has
                      been successfully registered in the MBean server. The value
                      false means that the registration phase has failed.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="postRegister" type="void" line="788">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <javadoc line="791">
                &lt;p&gt;Allows the MBean to perform any operations it needs before
                  being unregistered by the MBean server.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method does nothing.&lt;/p&gt;
                  &lt;p&gt;It is good practice for a subclass that overrides this method
                  to call the overridden method via {@code super.preDeregister(...)}.&lt;/p&gt;                
                <throws>
                    Exception no checked exceptions are throw by this method
                      but {@code Exception} is declared so that subclasses can override
                      this method and throw their own exceptions.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="preDeregister" type="void" line="802"/>
            <javadoc line="804">
                &lt;p&gt;Allows the MBean to perform any operations needed after having been
                  unregistered in the MBean server.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method does nothing for
                  Standard MBeans.  For MXBeans, it removes any information that
                  was recorded by the {@link #preRegister preRegister} method.&lt;/p&gt;
                  &lt;p&gt;It is good practice for a subclass that overrides this method
                  to call the overridden method via {@code super.postRegister(...)}.
                  This is necessary if this object is an MXBean that is referenced
                  by attributes or operations in other MXBeans.&lt;/p&gt;                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="postDeregister" type="void" line="816"/>
            <declaration name="mbeanInfoSafeMap" type="Map&amp;lt;Class&amp;lt;?&amp;gt;,Boolean&amp;gt;" line="819"/>
            <javadoc line="819">
                Cached results of previous calls to immutableInfo. This is
                  a WeakHashMap so that we don&apos;t prevent a class from being
                  garbage collected just because we know whether its MBeanInfo
                  is immutable.                
            </javadoc>
            <javadoc line="826">
                Return true if {@code subclass} is known to preserve the immutability
                  of the {@code MBeanInfo}. The {@code subclass} is considered to have
                  an immutable {@code MBeanInfo} if it does not override any of the
                  getMBeanInfo, getCachedMBeanInfo, cacheMBeanInfo and getNotificationInfo
                  methods.                
            </javadoc>
            <method name="immutableInfo" type="boolean" line="833">
                <params>
                    <param name="subclass" type="Class&lt;? extends StandardMBean&gt;"/>
                </params>
                <scope line="835">
                    <declaration name="safe" type="Boolean" line="836"/>
                    <scope line="837">
                        <scope line="838">
                            <declaration name="action" type="MBeanInfoSafeAction" line="839"/>
                        </scope>
                        <scope line="842"/>
                    </scope>
                </scope>
            </method>
            <method name="overrides" type="boolean" line="850">
                <params>
                    <param name="subclass" type="Class&lt;?&gt;"/>
                    <param name="superclass" type="Class&lt;?&gt;"/>
                    <param name="name" type="String"/>
                    <param name="params" type="Class&lt;?&gt;"/>
                </params>
                <scope line="851">
                    <scope line="852"/>
                    <scope line="856"/>
                </scope>
            </method>
            <class name="MBeanInfoSafeAction" line="861">
                <implements interface="PrivilegedAction">
                    <type_params>
                        <type_param name="Boolean"/>
                    </type_params>
                </implements>
                <declaration name="subclass" type="Class&amp;lt;?&amp;gt;" line="862"/>
                <method name="MBeanInfoSafeAction" type="constructor" line="863">
                    <params>
                        <param name="subclass" type="Class&lt;?&gt;"/>
                    </params>
                </method>
                <method name="run" type="Boolean" line="866"/>
            </class>
        </class>
    </source>