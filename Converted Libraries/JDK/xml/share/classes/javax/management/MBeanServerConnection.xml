<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.io.IOException"/>
        <import package="java.util.Set"/>
        <interface name="MBeanServerConnection">
            <javadoc line="34">
                This interface represents a way to talk to an MBean server, whether
                  local or remote.  The {@link MBeanServer} interface, representing a
                  local MBean server, extends this interface.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="43"/>
            <javadoc line="43">
                &lt;p&gt;Instantiates and registers an MBean in the MBean server.  The
                  MBean server will use its {@link javax.management.loading.ClassLoaderRepository Default Loader
                  Repository} to load the class of the MBean.  An object name is
                  associated with the MBean.  If the object name given is null, the
                  MBean must provide its own name by implementing the {@link javax.management.MBeanRegistration MBeanRegistration} interface
                  and returning the name from the {@link MBeanRegistration#preRegister preRegister} method.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to {@link #createMBean(String,ObjectName,Object[],String[])createMBean(className, name, (Object[]) null, (String[])
                  null)}.&lt;/p&gt;                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      instantiated MBean.  If the contained <code>ObjectName</code>
                      is <code>n</code>, the contained Java class name is
                      <code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or a
                      <CODE>java.lang.Exception</CODE> that occurred
                      when trying to invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The
                      <CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </exception>
                <exception>
                    RuntimeMBeanException If the MBean's constructor or its{@code preRegister} or {@code postRegister} method threw
                      a {@code RuntimeException}. If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
                      <CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception. Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    RuntimeErrorException If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
                      <CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has
                      thrown an exception                    
                </exception>
                <exception>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null, the <CODE>ObjectName</CODE> passed
                      in parameter contains a pattern or no <CODE>ObjectName</CODE>
                      is specified for the MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    javax.management.MBeanRegistration                    
                </see>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="116"/>
            <javadoc line="116">
                &lt;p&gt;Instantiates and registers an MBean in the MBean server.  The
                  class loader to be used is identified by its object name. An
                  object name is associated with the MBean. If the object name of
                  the loader is null, the ClassLoader that loaded the MBean
                  server will be used.  If the MBean&apos;s object name given is null,
                  the MBean must provide its own name by implementing the {@link javax.management.MBeanRegistration MBeanRegistration} interface
                  and returning the name from the {@link MBeanRegistration#preRegister preRegister} method.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to {@link #createMBean(String,ObjectName,ObjectName,Object[],String[])createMBean(className, name, loaderName, (Object[]) null,
                  (String[]) null)}.&lt;/p&gt;                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      instantiated MBean.  If the contained <code>ObjectName</code>
                      is <code>n</code>, the contained Java class name is
                      <code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or a
                      <CODE>java.lang.Exception</CODE> that occurred when trying to
                      invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The
                      <CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </exception>
                <exception>
                    RuntimeMBeanException If the MBean's constructor or its{@code preRegister} or {@code postRegister} method threw
                      a {@code RuntimeException}. If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
                      <CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    RuntimeErrorException If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
                      <CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has
                      thrown an exception                    
                </exception>
                <exception>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null, the <CODE>ObjectName</CODE> passed
                      in parameter contains a pattern or no <CODE>ObjectName</CODE>
                      is specified for the MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    javax.management.MBeanRegistration                    
                </see>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="195"/>
            <javadoc line="195">
                Instantiates and registers an MBean in the MBean server.  The
                  MBean server will use its {@link javax.management.loading.ClassLoaderRepository Default Loader
                  Repository} to load the class of the MBean.  An object name is
                  associated with the MBean.  If the object name given is null, the
                  MBean must provide its own name by implementing the {@link javax.management.MBeanRegistration MBeanRegistration} interface
                  and returning the name from the {@link MBeanRegistration#preRegister preRegister} method.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    params An array containing the parameters of the
                      constructor to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      instantiated MBean.  If the contained <code>ObjectName</code>
                      is <code>n</code>, the contained Java class name is
                      <code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or a
                      <CODE>java.lang.Exception</CODE> that occurred when trying to
                      invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The
                      <CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </exception>
                <exception>
                    RuntimeMBeanException If the MBean's constructor or its{@code preRegister} or {@code postRegister} method threw
                      a {@code RuntimeException}. If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
                      <CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    RuntimeErrorException If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
                      <CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has
                      thrown an exception                    
                </exception>
                <exception>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null, the <CODE>ObjectName</CODE> passed
                      in parameter contains a pattern or no <CODE>ObjectName</CODE>
                      is specified for the MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    javax.management.MBeanRegistration                    
                </see>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="268"/>
            <javadoc line="268">
                &lt;p&gt;Instantiates and registers an MBean in the MBean server.  The
                  class loader to be used is identified by its object name. An
                  object name is associated with the MBean. If the object name of
                  the loader is not specified, the ClassLoader that loaded the
                  MBean server will be used.  If the MBean object name given is
                  null, the MBean must provide its own name by implementing the{@link javax.management.MBeanRegistration MBeanRegistration}interface and returning the name from the {@link MBeanRegistration#preRegister preRegister} method.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    params An array containing the parameters of the
                      constructor to be invoked.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <return>
                    An <CODE>ObjectInstance</CODE>, containing the
                      <CODE>ObjectName</CODE> and the Java class name of the newly
                      instantiated MBean.  If the contained <code>ObjectName</code>
                      is <code>n</code>, the contained Java class name is
                      <code>{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()</code>.                    
                </return>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.ClassNotFoundException</CODE> or a
                      <CODE>java.lang.Exception</CODE> that occurred when trying to
                      invoke the MBean's constructor.                    
                </exception>
                <exception>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The
                      <CODE>preRegister</CODE> (<CODE>MBeanRegistration</CODE>
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </exception>
                <exception>
                    RuntimeMBeanException The MBean's constructor or its{@code preRegister} or {@code postRegister} method threw
                      a {@code RuntimeException}. If the <CODE>postRegister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
                      <CODE>RuntimeException</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeMBeanException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    RuntimeErrorException If the <CODE>postRegister</CODE> method
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
                      <CODE>Error</CODE>, the <CODE>createMBean</CODE> method will
                      throw a <CODE>RuntimeErrorException</CODE>, although the MBean creation
                      and registration succeeded. In such a case, the MBean will be actually
                      registered even though the <CODE>createMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeErrorException</CODE> can
                      also be thrown by <CODE>preRegister</CODE>, in which case the MBean
                      will not be registered.                    
                </exception>
                <exception>
                    MBeanException The constructor of the MBean has
                      thrown an exception                    
                </exception>
                <exception>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean                    
                </exception>
                <exception>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The className
                      passed in parameter is null, the <CODE>ObjectName</CODE> passed
                      in parameter contains a pattern or no <CODE>ObjectName</CODE>
                      is specified for the MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    javax.management.MBeanRegistration                    
                </see>
            </javadoc>
            <method name="unregisterMBean" type="void" line="346"/>
            <javadoc line="346">
                Unregisters an MBean from the MBean server. The MBean is
                  identified by its object name. Once the method has been
                  invoked, the MBean may no longer be accessed by its object
                  name.                
                <param>
                    name The object name of the MBean to be unregistered.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    MBeanRegistrationException The preDeregister
                      ((<CODE>MBeanRegistration</CODE> interface) method of the MBean
                      has thrown an exception.                    
                </exception>
                <exception>
                    RuntimeMBeanException If the <CODE>postDeregister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws a
                      <CODE>RuntimeException</CODE>, the <CODE>unregisterMBean</CODE> method
                      will throw a <CODE>RuntimeMBeanException</CODE>, although the MBean
                      unregistration succeeded. In such a case, the MBean will be actually
                      unregistered even though the <CODE>unregisterMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preDeregister</CODE>, in which case the MBean
                      will remain registered.                    
                </exception>
                <exception>
                    RuntimeErrorException If the <CODE>postDeregister</CODE>
                      (<CODE>MBeanRegistration</CODE> interface) method of the MBean throws an
                      <CODE>Error</CODE>, the <CODE>unregisterMBean</CODE> method will
                      throw a <CODE>RuntimeErrorException</CODE>, although the MBean
                      unregistration succeeded. In such a case, the MBean will be actually
                      unregistered even though the <CODE>unregisterMBean</CODE> method
                      threw an exception.  Note that <CODE>RuntimeMBeanException</CODE> can
                      also be thrown by <CODE>preDeregister</CODE>, in which case the MBean
                      will remain registered.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      name in parameter is null or the MBean you are when trying to
                      unregister is the {@link javax.management.MBeanServerDelegateMBeanServerDelegate} MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    javax.management.MBeanRegistration                    
                </see>
            </javadoc>
            <method name="getObjectInstance" type="ObjectInstance" line="390"/>
            <javadoc line="390">
                Gets the &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; for a given MBean
                  registered with the MBean server.                
                <param>
                    name The object name of the MBean.                    
                </param>
                <return>
                    The <CODE>ObjectInstance</CODE> associated with the MBean
                      specified by <VAR>name</VAR>.  The contained <code>ObjectName</code>
                      is <code>name</code> and the contained class name is
                      <code>{@link #getMBeanInfo getMBeanInfo(name)}.getClassName()</code>.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="queryMBeans" type="Set<ObjectInstance>" line="409"/>
            <javadoc line="409">
                Gets MBeans controlled by the MBean server. This method allows
                  any of the following to be obtained: All MBeans, a set of
                  MBeans specified by pattern matching on the
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt; and/or a Query expression, a specific
                  MBean. When the object name is null or no domain and key
                  properties are specified, all objects are to be selected (and
                  filtered if a query is specified). It returns the set of
                  &lt;CODE&gt;ObjectInstance&lt;/CODE&gt; objects (containing the
                  &lt;CODE&gt;ObjectName&lt;/CODE&gt; and the Java Class name) for the
                  selected MBeans.                
                <param>
                    name The object name pattern identifying the MBeans to
                      be retrieved. If null or no domain and key properties are
                      specified, all the MBeans registered will be retrieved.                    
                </param>
                <param>
                    query The query expression to be applied for selecting
                      MBeans. If null no query expression will be applied for
                      selecting MBeans.                    
                </param>
                <return>
                    A set containing the <CODE>ObjectInstance</CODE>
                      objects for the selected MBeans.  If no MBean satisfies the
                      query an empty list is returned.                    
                </return>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="queryNames" type="Set<ObjectName>" line="438"/>
            <javadoc line="438">
                Gets the names of MBeans controlled by the MBean server. This
                  method enables any of the following to be obtained: The names
                  of all MBeans, the names of a set of MBeans specified by
                  pattern matching on the &lt;CODE&gt;ObjectName&lt;/CODE&gt; and/or a Query
                  expression, a specific MBean name (equivalent to testing
                  whether an MBean is registered). When the object name is null
                  or no domain and key properties are specified, all objects are
                  selected (and filtered if a query is specified). It returns the
                  set of ObjectNames for the MBeans selected.                
                <param>
                    name The object name pattern identifying the MBean names
                      to be retrieved. If null or no domain and key properties are
                      specified, the name of all registered MBeans will be retrieved.                    
                </param>
                <param>
                    query The query expression to be applied for selecting
                      MBeans. If null no query expression will be applied for
                      selecting MBeans.                    
                </param>
                <return>
                    A set containing the ObjectNames for the MBeans
                      selected.  If no MBean satisfies the query, an empty list is
                      returned.                    
                </return>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="isRegistered" type="boolean" line="468"/>
            <javadoc line="468">
                Checks whether an MBean, identified by its object name, is
                  already registered with the MBean server.                
                <param>
                    name The object name of the MBean to be checked.                    
                </param>
                <return>
                    True if the MBean is already registered in the MBean
                      server, false otherwise.                    
                </return>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      name in parameter is null.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="getMBeanCount" type="Integer" line="487"/>
            <javadoc line="487">
                Returns the number of MBeans registered in the MBean server.                
                <return>
                    the number of MBeans registered.                    
                </return>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="getAttribute" type="Object" line="498"/>
            <javadoc line="498">
                Gets the value of a specific attribute of a named MBean. The MBean
                  is identified by its object name.                
                <param>
                    name The object name of the MBean from which the
                      attribute is to be retrieved.                    
                </param>
                <param>
                    attribute A String specifying the name of the attribute
                      to be retrieved.                    
                </param>
                <return>
                    The value of the retrieved attribute.                    
                </return>
                <exception>
                    AttributeNotFoundException The attribute specified
                      is not accessible in the MBean.                    
                </exception>
                <exception>
                    MBeanException Wraps an exception thrown by the
                      MBean's getter.                    
                </exception>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.Exception</CODE> thrown when trying to invoke
                      the setter.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      name in parameter is null or the attribute in parameter is
                      null.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #setAttribute                    
                </see>
            </javadoc>
            <method name="getAttributes" type="AttributeList" line="533"/>
            <javadoc line="533">
                &lt;p&gt;Retrieves the values of several attributes of a named MBean. The MBean
                  is identified by its object name.&lt;/p&gt;
                  &lt;p&gt;If one or more attributes cannot be retrieved for some reason, they
                  will be omitted from the returned {@code AttributeList}.  The caller
                  should check that the list is the same size as the {@code attributes}array.  To discover what problem prevented a given attribute from being
                  retrieved, call {@link #getAttribute getAttribute} for that attribute.&lt;/p&gt;
                  &lt;p&gt;Here is an example of calling this method and checking that it
                  succeeded in retrieving all the requested attributes:&lt;/p&gt;
                  &lt;pre&gt;
                  String[] attrNames = ...;
                  AttributeList list = mbeanServerConnection.getAttributes(objectName, attrNames);
                  if (list.size() == attrNames.length)
                  System.out.println(&quot;All attributes were retrieved successfully&quot;);
                  else {{@code List&lt;String&gt;} missing = new {@code ArrayList&lt;String&gt;}(&lt;!--
                  --&gt;{@link java.util.Arrays#asList Arrays.asList}(attrNames));
                  for (Attribute a : list.asList())
                  missing.remove(a.getName());
                  System.out.println(&quot;Did not retrieve: &quot; + missing);
                  }
                  &lt;/pre&gt;                
                <param>
                    name The object name of the MBean from which the
                      attributes are retrieved.                    
                </param>
                <param>
                    attributes A list of the attributes to be retrieved.                    
                </param>
                <return>
                    The list of the retrieved attributes.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    ReflectionException An exception occurred when
                      trying to invoke the getAttributes method of a Dynamic MBean.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wrap a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      name in parameter is null or attributes in parameter is null.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #setAttributes                    
                </see>
            </javadoc>
            <method name="setAttribute" type="void" line="583"/>
            <javadoc line="583">
                Sets the value of a specific attribute of a named MBean. The MBean
                  is identified by its object name.                
                <param>
                    name The name of the MBean within which the attribute is
                      to be set.                    
                </param>
                <param>
                    attribute The identification of the attribute to be set
                      and the value it is to be set to.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    AttributeNotFoundException The attribute specified
                      is not accessible in the MBean.                    
                </exception>
                <exception>
                    InvalidAttributeValueException The value specified
                      for the attribute is not valid.                    
                </exception>
                <exception>
                    MBeanException Wraps an exception thrown by the
                      MBean's setter.                    
                </exception>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.Exception</CODE> thrown when trying to invoke
                      the setter.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      name in parameter is null or the attribute in parameter is
                      null.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #getAttribute                    
                </see>
            </javadoc>
            <method name="setAttributes" type="AttributeList" line="618"/>
            <javadoc line="618">
                &lt;p&gt;Sets the values of several attributes of a named MBean. The MBean is
                  identified by its object name.&lt;/p&gt;
                  &lt;p&gt;If one or more attributes cannot be set for some reason, they will be
                  omitted from the returned {@code AttributeList}.  The caller should check
                  that the input {@code AttributeList} is the same size as the output one.
                  To discover what problem prevented a given attribute from being retrieved,
                  it will usually be possible to call {@link #setAttribute setAttribute}for that attribute, although this is not guaranteed to work.  (For
                  example, the values of two attributes may have been rejected because
                  they were inconsistent with each other.  Setting one of them alone might
                  be allowed.)&lt;p&gt;
                  &lt;p&gt;Here is an example of calling this method and checking that it
                  succeeded in setting all the requested attributes:&lt;/p&gt;
                  &lt;pre&gt;
                  AttributeList inputAttrs = ...;
                  AttributeList outputAttrs = mbeanServerConnection.setAttributes(&lt;!--
                  --&gt;objectName, inputAttrs);
                  if (inputAttrs.size() == outputAttrs.size())
                  System.out.println(&quot;All attributes were set successfully&quot;);
                  else {{@code List&lt;String&gt;} missing = new {@code ArrayList&lt;String&gt;}();
                  for (Attribute a : inputAttrs.asList())
                  missing.add(a.getName());
                  for (Attribute a : outputAttrs.asList())
                  missing.remove(a.getName());
                  System.out.println(&quot;Did not set: &quot; + missing);
                  }
                  &lt;/pre&gt;                
                <param>
                    name The object name of the MBean within which the
                      attributes are to be set.                    
                </param>
                <param>
                    attributes A list of attributes: The identification of
                      the attributes to be set and the values they are to be set to.                    
                </param>
                <return>
                    The list of attributes that were set, with their new
                      values.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    ReflectionException An exception occurred when
                      trying to invoke the getAttributes method of a Dynamic MBean.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a
                      <CODE>java.lang.IllegalArgumentException</CODE>: The object
                      name in parameter is null or attributes in parameter is null.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #getAttributes                    
                </see>
            </javadoc>
            <method name="invoke" type="Object" line="675"/>
            <javadoc line="675">
                &lt;p&gt;Invokes an operation on an MBean.&lt;/p&gt;
                  &lt;p&gt;Because of the need for a {@code signature} to differentiate
                  possibly-overloaded operations, it is much simpler to invoke operations
                  through an {@linkplain JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class) MBean proxy} where possible.  For example, suppose you have a
                  Standard MBean interface like this:&lt;/p&gt;
                  &lt;pre&gt;
                  public interface FooMBean {
                  public int countMatches(String[] patterns, boolean ignoreCase);
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;The {@code countMatches} operation can be invoked as follows:&lt;/p&gt;
                  &lt;pre&gt;
                  String[] myPatterns = ...;
                  int count = (Integer) mbeanServerConnection.invoke(
                  objectName,
                  &quot;countMatches&quot;,
                  new Object[] {myPatterns, true},
                  new String[] {String[].class.getName(), boolean.class.getName()});
                  &lt;/pre&gt;
                  &lt;p&gt;Alternatively, it can be invoked through a proxy as follows:&lt;/p&gt;
                  &lt;pre&gt;
                  String[] myPatterns = ...;
                  FooMBean fooProxy = JMX.newMBeanProxy(
                  mbeanServerConnection, objectName, FooMBean.class);
                  int count = fooProxy.countMatches(myPatterns, true);
                  &lt;/pre&gt;                
                <param>
                    name The object name of the MBean on which the method is
                      to be invoked.                    
                </param>
                <param>
                    operationName The name of the operation to be invoked.                    
                </param>
                <param>
                    params An array containing the parameters to be set when
                      the operation is invoked                    
                </param>
                <param>
                    signature An array containing the signature of the
                      operation, an array of class names in the format returned by{@link Class#getName()}. The class objects will be loaded using the same
                      class loader as the one used for loading the MBean on which the
                      operation was invoked.                    
                </param>
                <return>
                    The object returned by the operation, which represents
                      the result of invoking the operation on the MBean specified.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    MBeanException Wraps an exception thrown by the
                      MBean's invoked method.                    
                </exception>
                <exception>
                    ReflectionException Wraps a
                      <CODE>java.lang.Exception</CODE> thrown while trying to invoke
                      the method.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="getDefaultDomain" type="String" line="742"/>
            <javadoc line="742">
                Returns the default domain used for naming the MBean.
                  The default domain name is used as the domain part in the ObjectName
                  of MBeans if no domain is specified by the user.                
                <return>
                    the default domain.                    
                </return>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="getDomains" type="String[]" line="755"/>
            <javadoc line="755">
                &lt;p&gt;Returns the list of domains in which any MBean is currently
                  registered.  A string is in the returned array if and only if
                  there is at least one MBean registered with an ObjectName whose{@link ObjectName#getDomain() getDomain()} is equal to that
                  string.  The order of strings within the returned array is
                  not defined.&lt;/p&gt;                
                <return>
                    the list of domains.                    
                </return>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="addNotificationListener" type="void" line="772"/>
            <javadoc line="772">
                &lt;p&gt;Adds a listener to a registered MBean.
                  Notifications emitted by the MBean will be forwarded to the listener.&lt;/p&gt;                
                <param>
                    name The name of the MBean on which the listener should
                      be added.                    
                </param>
                <param>
                    listener The listener object which will handle the
                      notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no
                      filtering will be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #removeNotificationListener(ObjectName,NotificationListener)                    
                </see>
                <see>
                    #removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)                    
                </see>
            </javadoc>
            <method name="addNotificationListener" type="void" line="801"/>
            <javadoc line="801">
                &lt;p&gt;Adds a listener to a registered MBean.&lt;/p&gt;
                  &lt;p&gt;A notification emitted by an MBean will be forwarded by the
                  MBeanServer to the listener.  If the source of the notification
                  is a reference to an MBean object, the MBean server will
                  replace it by that MBean&apos;s ObjectName.  Otherwise the source is
                  unchanged.&lt;/p&gt;
                  &lt;p&gt;The listener object that receives notifications is the one
                  that is registered with the given name at the time this method
                  is called.  Even if it is subsequently unregistered, it will
                  continue to receive notifications.&lt;/p&gt;                
                <param>
                    name The name of the MBean on which the listener should
                      be added.                    
                </param>
                <param>
                    listener The object name of the listener which will
                      handle the notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no
                      filtering will be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name of the
                      notification listener or of the notification broadcaster does
                      not match any of the registered MBeans.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an {@link IllegalArgumentException}.  The MBean named by
                      <code>listener</code> exists but does not implement the {@link NotificationListener} interface.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #removeNotificationListener(ObjectName,ObjectName)                    
                </see>
                <see>
                    #removeNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="845"/>
            <javadoc line="845">
                Removes a listener from a registered MBean.
                  &lt;P&gt; If the listener is registered more than once, perhaps with
                  different filters or callbacks, this method will remove all
                  those registrations.                
                <param>
                    name The name of the MBean on which the listener should
                      be removed.                    
                </param>
                <param>
                    listener The object name of the listener to be removed.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </exception>
                <exception>
                    ListenerNotFoundException The listener is not
                      registered in the MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #addNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="871"/>
            <javadoc line="871">
                &lt;p&gt;Removes a listener from a registered MBean.&lt;/p&gt;
                  &lt;p&gt;The MBean must have a listener that exactly matches the
                  given &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and
                  &lt;code&gt;handback&lt;/code&gt; parameters.  If there is more than one
                  such listener, only one is removed.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters
                  may be null if and only if they are null in a listener to be
                  removed.&lt;/p&gt;                
                <param>
                    name The name of the MBean on which the listener should
                      be removed.                    
                </param>
                <param>
                    listener The object name of the listener to be removed.                    
                </param>
                <param>
                    filter The filter that was specified when the listener
                      was added.                    
                </param>
                <param>
                    handback The handback that was specified when the
                      listener was added.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </exception>
                <exception>
                    ListenerNotFoundException The listener is not
                      registered in the MBean, or it is not registered with the given
                      filter and handback.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #addNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="911"/>
            <javadoc line="911">
                &lt;p&gt;Removes a listener from a registered MBean.&lt;/p&gt;
                  &lt;P&gt; If the listener is registered more than once, perhaps with
                  different filters or callbacks, this method will remove all
                  those registrations.                
                <param>
                    name The name of the MBean on which the listener should
                      be removed.                    
                </param>
                <param>
                    listener The listener to be removed.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </exception>
                <exception>
                    ListenerNotFoundException The listener is not
                      registered in the MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="937"/>
            <javadoc line="937">
                &lt;p&gt;Removes a listener from a registered MBean.&lt;/p&gt;
                  &lt;p&gt;The MBean must have a listener that exactly matches the
                  given &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and
                  &lt;code&gt;handback&lt;/code&gt; parameters.  If there is more than one
                  such listener, only one is removed.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters
                  may be null if and only if they are null in a listener to be
                  removed.&lt;/p&gt;                
                <param>
                    name The name of the MBean on which the listener should
                      be removed.                    
                </param>
                <param>
                    listener The listener to be removed.                    
                </param>
                <param>
                    filter The filter that was specified when the listener
                      was added.                    
                </param>
                <param>
                    handback The handback that was specified when the
                      listener was added.                    
                </param>
                <exception>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </exception>
                <exception>
                    ListenerNotFoundException The listener is not
                      registered in the MBean, or it is not registered with the given
                      filter and handback.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    #addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)                    
                </see>
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="976"/>
            <javadoc line="976">
                This method discovers the attributes and operations that an
                  MBean exposes for management.                
                <param>
                    name The name of the MBean to analyze                    
                </param>
                <return>
                    An instance of <CODE>MBeanInfo</CODE> allowing the
                      retrieval of all attributes and operations of this MBean.                    
                </return>
                <exception>
                    IntrospectionException An exception occurred during
                      introspection.                    
                </exception>
                <exception>
                    InstanceNotFoundException The MBean specified was
                      not found.                    
                </exception>
                <exception>
                    ReflectionException An exception occurred when
                      trying to invoke the getMBeanInfo of a Dynamic MBean.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
            </javadoc>
            <method name="isInstanceOf" type="boolean" line="999"/>
            <javadoc line="999">
                &lt;p&gt;Returns true if the MBean specified is an instance of the
                  specified class, false otherwise.&lt;/p&gt;
                  &lt;p&gt;If &lt;code&gt;name&lt;/code&gt; does not name an MBean, this method
                  throws {@link InstanceNotFoundException}.&lt;/p&gt;
                  &lt;p&gt;Otherwise, let&lt;br&gt;
                  X be the MBean named by &lt;code&gt;name&lt;/code&gt;,&lt;br&gt;
                  L be the ClassLoader of X,&lt;br&gt;
                  N be the class name in X&apos;s {@link MBeanInfo}.&lt;/p&gt;
                  &lt;p&gt;If N equals &lt;code&gt;className&lt;/code&gt;, the result is true.&lt;/p&gt;
                  &lt;p&gt;Otherwise, if L successfully loads &lt;code&gt;className&lt;/code&gt;
                  and X is an instance of this class, the result is true.
                  &lt;p&gt;Otherwise, if L successfully loads both N and
                  &lt;code&gt;className&lt;/code&gt;, and the second class is assignable from
                  the first, the result is true.&lt;/p&gt;
                  &lt;p&gt;Otherwise, the result is false.&lt;/p&gt;                
                <param>
                    name The <CODE>ObjectName</CODE> of the MBean.                    
                </param>
                <param>
                    className The name of the class.                    
                </param>
                <return>
                    true if the MBean specified is an instance of the
                      specified class according to the rules above, false otherwise.                    
                </return>
                <exception>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </exception>
                <exception>
                    IOException A communication problem occurred when
                      talking to the MBean server.                    
                </exception>
                <see>
                    Class#isInstance                    
                </see>
            </javadoc>
        </interface>
    </source>