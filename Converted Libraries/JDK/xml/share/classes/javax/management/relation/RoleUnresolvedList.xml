<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <class name="RoleUnresolvedList" line="33">
            <extends class="ArrayList">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </extends>
            <comment line="41">
                We cannot extend ArrayList&lt;RoleUnresolved&gt; because our legacy
                add(RoleUnresolved) method would then override add(E) in ArrayList&lt;E&gt;,
                and our return value is void whereas ArrayList.add(E)&apos;s is boolean.
                Likewise for set(int,RoleUnresolved).  Grrr.  We cannot use covariance
                to override the most important methods and have them return
                RoleUnresolved, either, because that would break subclasses that
                override those methods in turn (using the original return type
                of Object).  Finally, we cannot implement Iterable&lt;RoleUnresolved&gt;
                so you could write
                for (RoleUnresolved r : roleUnresolvedList)
                because ArrayList&lt;&gt; implements Iterable&lt;&gt; and the same class cannot
                implement two versions of a generic interface.  Instead we provide
                the asList() method so you can write
                for (RoleUnresolved r : roleUnresolvedList.asList())                
            </comment>
            <comment line="61">
                                
            </comment>
            <comment line="64">
                Constructors                
            </comment>
            <comment line="148">
                Accessors                
            </comment>
            <comment line="273">
                Override all of the methods from ArrayList&lt;Object&gt; that might add
                 a non-RoleUnresolved to the List, and disallow that if asList has
                 ever been called on this instance.                
            </comment>
            <javadoc line="33">
                A RoleUnresolvedList represents a list of RoleUnresolved objects,
                  representing roles not retrieved from a relation due to a problem
                  encountered when trying to access (read or write) the roles.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="typeSafe" type="boolean" line="57"/>
            <declaration name="tainted" type="boolean" line="58"/>
            <declaration name="serialVersionUID" type="long" line="61"/>
            <javadoc line="67">
                Constructs an empty RoleUnresolvedList.                
            </javadoc>
            <method name="RoleUnresolvedList" type="constructor" line="70"/>
            <javadoc line="74">
                Constructs an empty RoleUnresolvedList with the initial capacity
                  specified.                
                <param>
                    initialCapacity  initial capacity                    
                </param>
            </javadoc>
            <method name="RoleUnresolvedList" type="constructor" line="80">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Constructs a {@code RoleUnresolvedList} containing the elements of the{@code List} specified, in the order in which they are returned by
                  the {@code List}&apos;s iterator. The {@code RoleUnresolvedList} instance has
                  an initial capacity of 110% of the size of the {@code List}specified.                
                <param>
                    list the {@code List} that defines the initial contents of
                      the new {@code RoleUnresolvedList}.                    
                </param>
                <exception>
                    IllegalArgumentException if the {@code list} parameter
                      is {@code null} or if the {@code list} parameter contains any
                      non-RoleUnresolved objects.                    
                </exception>
                <see>
                    ArrayList#ArrayList(java.util.Collection)                    
                </see>
            </javadoc>
            <method name="RoleUnresolvedList" type="constructor" line="101">
                <params>
                    <param name="list" type="List<RoleUnresolved>"/>
                </params>
                <comment line="103">
                    Check for null parameter                    
                </comment>
                <comment line="108">
                    Check for non-RoleUnresolved objects                    
                </comment>
                <comment line="112">
                    Build the List&lt;RoleUnresolved&gt;                    
                </comment>
            </method>
            <javadoc line="116">
                Return a view of this list as a {@code List&lt;RoleUnresolved&gt;}.
                  Changes to the returned value are reflected by changes
                  to the original {@code RoleUnresolvedList} and vice versa.                
                <return>
                    a {@code List&lt;RoleUnresolved&gt;} whose contents
                      reflect the contents of this {@code RoleUnresolvedList}.
                      &lt;p&gt;If this method has ever been called on a given{@code RoleUnresolvedList} instance, a subsequent attempt to add
                      an object to that instance which is not a {@code RoleUnresolved}will fail with an {@code IllegalArgumentException}. For compatibility
                      reasons, a {@code RoleUnresolvedList} on which this method has never
                      been called does allow objects other than {@code RoleUnresolved}s to
                      be added.&lt;/p&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if this {@code RoleUnresolvedList}contains an element that is not a {@code RoleUnresolved}.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="asList" type="List<RoleUnresolved>" line="138">
                <scope line="139"/>
            </method>
            <javadoc line="151">
                Adds the RoleUnresolved specified as the last element of the list.                
                <param>
                    role - the unresolved role to be added.                    
                </param>
                <exception>
                    IllegalArgumentException  if the unresolved role is null.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="159">
                <params>
                    <param name="role" type="RoleUnresolved"/>
                </params>
                <scope line="161">
                    <declaration name="excMsg" type="String" line="162"/>
                </scope>
            </method>
            <javadoc line="168">
                Inserts the unresolved role specified as an element at the position
                  specified.
                  Elements with an index greater than or equal to the current position are
                  shifted up.                
                <param>
                    index - The position in the list where the new
                      RoleUnresolved object is to be inserted.                    
                </param>
                <param>
                    role - The RoleUnresolved object to be inserted.                    
                </param>
                <exception>
                    IllegalArgumentException  if the unresolved role is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (&lt;code&gt;index &amp;lt; 0 || index &amp;gt; size()&lt;/code&gt;).                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="185">
                <params>
                    <param name="index" type="int"/>
                    <param name="role" type="RoleUnresolved"/>
                </params>
                <scope line="187">
                    <declaration name="excMsg" type="String" line="188"/>
                </scope>
            </method>
            <javadoc line="195">
                Sets the element at the position specified to be the unresolved role
                  specified.
                  The previous element at that position is discarded.                
                <param>
                    index - The position specified.                    
                </param>
                <param>
                    role - The value to which the unresolved role element
                      should be set.                    
                </param>
                <exception>
                    IllegalArgumentException   if the unresolved role is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (&lt;code&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/code&gt;).                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="211">
                <params>
                    <param name="index" type="int"/>
                    <param name="role" type="RoleUnresolved"/>
                </params>
                <scope line="213">
                    <declaration name="excMsg" type="String" line="214"/>
                </scope>
            </method>
            <javadoc line="221">
                Appends all the elements in the RoleUnresolvedList specified to the end
                  of the list, in the order in which they are returned by the Iterator of
                  the RoleUnresolvedList specified.                
                <param>
                    roleList - Elements to be inserted into the list
                      (can be null).                    
                </param>
                <return>
                    true if this list changed as a result of the call.                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if accessing with an index
                      outside of the list.                    
                </exception>
            </javadoc>
            <method name="addAll" type="boolean" line="235">
                <params>
                    <param name="roleList" type="RoleUnresolvedList"/>
                </params>
                <scope line="237"/>
            </method>
            <javadoc line="244">
                Inserts all of the elements in the RoleUnresolvedList specified into
                  this list, starting at the specified position, in the order in which
                  they are returned by the Iterator of the RoleUnresolvedList specified.                
                <param>
                    index - Position at which to insert the first element from the
                      RoleUnresolvedList specified.                    
                </param>
                <param>
                    roleList - Elements to be inserted into the list.                    
                </param>
                <return>
                    true if this list changed as a result of the call.                    
                </return>
                <exception>
                    IllegalArgumentException  if the role is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (&lt;code&gt;index &amp;lt; 0 || index &amp;gt; size()&lt;/code&gt;).                    
                </exception>
            </javadoc>
            <method name="addAll" type="boolean" line="262">
                <params>
                    <param name="index" type="int"/>
                    <param name="roleList" type="RoleUnresolvedList"/>
                </params>
                <scope line="264">
                    <declaration name="excMsg" type="String" line="265"/>
                </scope>
            </method>
            <method name="add" type="boolean" line="279">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="add" type="void" line="288">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <method name="addAll" type="boolean" line="297">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <method name="addAll" type="boolean" line="306">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection<?>"/>
                </params>
            </method>
            <method name="set" type="Object" line="315">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="323">
                IllegalArgumentException if o is a non-RoleUnresolved object.                
            </javadoc>
            <method name="checkTypeSafe" type="void" line="326">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="327"/>
                <scope line="329"/>
            </method>
            <javadoc line="334">
                IllegalArgumentException if c contains any non-RoleUnresolved objects.                
            </javadoc>
            <method name="checkTypeSafe" type="void" line="337">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <scope line="338">
                    <declaration name="r" type="RoleUnresolved" line="339"/>
                </scope>
                <scope line="342"/>
            </method>
            <javadoc line="347">
                Returns true if o is a non-RoleUnresolved object.                
            </javadoc>
            <method name="isTainted" type="boolean" line="350">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="351"/>
                <scope line="353"/>
            </method>
            <javadoc line="359">
                Returns true if c contains any non-RoleUnresolved objects.                
            </javadoc>
            <method name="isTainted" type="boolean" line="362">
                <params>
                    <param name="c" type="Collection<?>"/>
                </params>
                <scope line="363"/>
                <scope line="365"/>
            </method>
        </class>
    </source>