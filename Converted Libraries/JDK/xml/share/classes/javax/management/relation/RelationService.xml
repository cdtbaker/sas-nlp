<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Date"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <class name="RelationService" line="28">
            <extends class="NotificationBroadcasterSupport"/>
            <implements interface="RelationServiceMBean"/>
            <implements interface="MBeanRegistration"/>
            <implements interface="NotificationListener"/>
            <javadoc line="28">
                The Relation Service is in charge of creating and deleting relation types
                  and relations, of handling the consistency and of providing query
                  mechanisms.
                  &lt;P&gt;It implements the NotificationBroadcaster by extending
                  NotificationBroadcasterSupport to send notifications when a relation is
                  removed from it.
                  &lt;P&gt;It implements the NotificationListener interface to be able to receive
                  notifications concerning unregistration of MBeans referenced in relation
                  roles and of relation MBeans.
                  &lt;P&gt;It implements the MBeanRegistration interface to be able to retrieve
                  its ObjectName and MBean Server.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="myRelId2ObjMap" type="Map&amp;lt;String,Object&amp;gt;" line="43"/>
            <declaration name="myRelId2RelTypeMap" type="Map&amp;lt;String,String&amp;gt;" line="44"/>
            <declaration name="myRelMBeanObjName2RelIdMap" type="Map&amp;lt;ObjectName,String&amp;gt;" line="45"/>
            <declaration name="myRelType2ObjMap" type="Map&amp;lt;String,RelationType&amp;gt;" line="46"/>
            <declaration name="myRelType2RelIdsMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="47"/>
            <declaration name="myRefedMBeanObjName2RelIdsMap" type="Map&amp;lt;ObjectName,Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;&amp;gt;" line="48"/>
            <declaration name="myPurgeFlag" type="boolean" line="49"/>
            <declaration name="atomicSeqNo" type="AtomicLong" line="50"/>
            <declaration name="myObjName" type="ObjectName" line="51"/>
            <declaration name="myMBeanServer" type="MBeanServer" line="52"/>
            <declaration name="myUnregNtfFilter" type="MBeanServerNotificationFilter" line="53"/>
            <declaration name="myUnregNtfList" type="List&amp;lt;MBeanServerNotification&amp;gt;" line="54"/>
            <javadoc line="55">
                Constructor.                
                <param>
                    immediatePurgeFlag  flag to indicate when a notification is
                      received for the unregistration of an MBean referenced in a relation, if
                      an immediate &quot;purge&quot; of the relations (look for the relations no
                      longer valid) has to be performed , or if that will be performed only
                      when the purgeRelations method will be explicitly called.
                      &lt;P&gt;true is immediate purge.                    
                </param>
            </javadoc>
            <method name="RelationService" type="constructor" line="64">
                <params>
                    <param name="immediatePurgeFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="70">
                Checks if the Relation Service is active.
                  Current condition is that the Relation Service must be registered in the
                  MBean Server                
                <exception>
                    RelationServiceNotRegisteredException  if it is not
                      registered                    
                </exception>
            </javadoc>
            <method name="isActive" type="void" line="77">
                <scope line="78">
                    <declaration name="excMsg" type="String" line="79"/>
                </scope>
            </method>
            <method name="preRegister" type="ObjectName" line="84">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="postRegister" type="void" line="89">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <method name="preDeregister" type="void" line="92"/>
            <method name="postDeregister" type="void" line="95"/>
            <javadoc line="98">
                Returns the flag to indicate if when a notification is received for the
                  unregistration of an MBean referenced in a relation, if an immediate
                  &quot;purge&quot; of the relations (look for the relations no longer valid)
                  has to be performed , or if that will be performed only when the
                  purgeRelations method will be explicitly called.
                  &lt;P&gt;true is immediate purge.                
                <return>
                    true if purges are automatic.                    
                </return>
                <see>
                    #setPurgeFlag                    
                </see>
            </javadoc>
            <method name="getPurgeFlag" type="boolean" line="108"/>
            <javadoc line="111">
                Sets the flag to indicate if when a notification is received for the
                  unregistration of an MBean referenced in a relation, if an immediate
                  &quot;purge&quot; of the relations (look for the relations no longer valid)
                  has to be performed , or if that will be performed only when the
                  purgeRelations method will be explicitly called.
                  &lt;P&gt;true is immediate purge.                
                <param>
                    purgeFlag  flag                    
                </param>
                <see>
                    #getPurgeFlag                    
                </see>
            </javadoc>
            <method name="setPurgeFlag" type="void" line="121">
                <params>
                    <param name="purgeFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="125">
                Creates a relation type (a RelationTypeSupport object) with given
                  role infos (provided by the RoleInfo objects), and adds it in the
                  Relation Service.                
                <param>
                    relationTypeName  name of the relation type                    
                </param>
                <param>
                    roleInfoArray  array of role infos                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    InvalidRelationTypeException  If:
                      &lt;P&gt;- there is already a relation type with that name
                      &lt;P&gt;- the same name has been used for two different role infos
                      &lt;P&gt;- no role info provided
                      &lt;P&gt;- one null role info provided                    
                </exception>
            </javadoc>
            <method name="createRelationType" type="void" line="138">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <scope line="139">
                    <declaration name="excMsg" type="String" line="140"/>
                </scope>
                <declaration name="relType" type="RelationType" line="144"/>
            </method>
            <javadoc line="149">
                Adds given object as a relation type. The object is expected to
                  implement the RelationType interface.                
                <param>
                    relationTypeObj  relation type object (implementing the
                      RelationType interface)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter or if{@link RelationType#getRelationTypeName()} returns null.                    
                </exception>
                <exception>
                    InvalidRelationTypeException  if:
                      &lt;P&gt;- the same name has been used for two different roles
                      &lt;P&gt;- no role info provided
                      &lt;P&gt;- one null role info provided
                      &lt;P&gt;- there is already a relation type with that name                    
                </exception>
            </javadoc>
            <method name="addRelationType" type="void" line="161">
                <params>
                    <param name="relationTypeObj" type="RelationType"/>
                </params>
                <scope line="162">
                    <declaration name="excMsg" type="String" line="163"/>
                </scope>
                <declaration name="roleInfoList" type="List&amp;lt;RoleInfo&amp;gt;" line="167"/>
                <scope line="168">
                    <declaration name="excMsg" type="String" line="169"/>
                </scope>
                <declaration name="roleInfoArray" type="RoleInfo[]" line="172"/>
                <declaration name="i" type="int" line="173"/>
                <scope line="174"/>
            </method>
            <javadoc line="183">
                Retrieves names of all known relation types.                
                <return>
                    ArrayList of relation type names (Strings)                    
                </return>
            </javadoc>
            <method name="getAllRelationTypeNames" type="List&lt;String&gt;" line="187">
                <declaration name="result" type="ArrayList&amp;lt;String&amp;gt;" line="188"/>
                <scope line="189"/>
            </method>
            <javadoc line="194">
                Retrieves list of role infos (RoleInfo objects) of a given relation
                  type.                
                <param>
                    relationTypeName  name of relation type                    
                </param>
                <return>
                    ArrayList of RoleInfo.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if there is no relation type
                      with that name.                    
                </exception>
            </javadoc>
            <method name="getRoleInfos" type="List&lt;RoleInfo&gt;" line="203">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="204">
                    <declaration name="excMsg" type="String" line="205"/>
                </scope>
                <declaration name="relType" type="RelationType" line="209"/>
            </method>
            <javadoc line="213">
                Retrieves role info for given role name of a given relation type.                
                <param>
                    relationTypeName  name of relation type                    
                </param>
                <param>
                    roleInfoName  name of role                    
                </param>
                <return>
                    RoleInfo object.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type is not
                      known in the Relation Service                    
                </exception>
                <exception>
                    RoleInfoNotFoundException  if the role is not part of the
                      relation type.                    
                </exception>
            </javadoc>
            <method name="getRoleInfo" type="RoleInfo" line="224">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoName" type="String"/>
                </params>
                <scope line="225">
                    <declaration name="excMsg" type="String" line="226"/>
                </scope>
                <declaration name="relType" type="RelationType" line="230"/>
                <declaration name="roleInfo" type="RoleInfo" line="231"/>
            </method>
            <javadoc line="235">
                Removes given relation type from Relation Service.
                  &lt;P&gt;The relation objects of that type will be removed from the
                  Relation Service.                
                <param>
                    relationTypeName  name of the relation type to be removed                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  If there is no relation type
                      with that name                    
                </exception>
            </javadoc>
            <method name="removeRelationType" type="void" line="246">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="248">
                    <declaration name="excMsg" type="String" line="249"/>
                </scope>
                <declaration name="relType" type="RelationType" line="253"/>
                <declaration name="relIdList" type="List&amp;lt;String&amp;gt;" line="254"/>
                <scope line="255">
                    <declaration name="relIdList1" type="List&amp;lt;String&amp;gt;" line="256"/>
                    <scope line="257"/>
                </scope>
                <scope line="261"/>
                <scope line="264"/>
                <scope line="267">
                    <scope line="268">
                        <scope line="269"/>
                        <scope line="272"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="280">
                Creates a simple relation (represented by a RelationSupport object) of
                  given relation type, and adds it in the Relation Service.
                  &lt;P&gt;Roles are initialized according to the role list provided in
                  parameter. The ones not initialized in this way are set to an empty
                  ArrayList of ObjectNames.
                  &lt;P&gt;A RelationNotification, with type RELATION_BASIC_CREATION, is sent.                
                <param>
                    relationId  relation identifier, to identify uniquely the relation
                      inside the Relation Service                    
                </param>
                <param>
                    relationTypeName  name of the relation type (has to be created
                      in the Relation Service)                    
                </param>
                <param>
                    roleList  role list to initialize roles of the relation (can
                      be null).                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter, except the role
                      list which can be null if no role initialization                    
                </exception>
                <exception>
                    RoleNotFoundException  if a value is provided for a role
                      that does not exist in the relation type                    
                </exception>
                <exception>
                    InvalidRelationIdException  if relation id already used                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if relation type not known in
                      Relation Service                    
                </exception>
                <exception>
                    InvalidRoleValueException if:
                      &lt;P&gt;- the same role name is used for two different roles
                      &lt;P&gt;- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      &lt;P&gt;- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      &lt;P&gt;- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      &lt;P&gt;- an MBean provided for that role does not exist                    
                </exception>
            </javadoc>
            <method name="createRelation" type="void" line="312">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <scope line="314">
                    <declaration name="excMsg" type="String" line="315"/>
                </scope>
                <declaration name="relObj" type="RelationSupport" line="319"/>
            </method>
            <javadoc line="324">
                Adds an MBean created by the user (and registered by him in the MBean
                  Server) as a relation in the Relation Service.
                  &lt;P&gt;To be added as a relation, the MBean must conform to the
                  following:
                  &lt;P&gt;- implement the Relation interface
                  &lt;P&gt;- have for RelationService ObjectName the ObjectName of current
                  Relation Service
                  &lt;P&gt;- have a relation id unique and unused in current Relation Service
                  &lt;P&gt;- have for relation type a relation type created in the Relation
                  Service
                  &lt;P&gt;- have roles conforming to the role info provided in the relation
                  type.                
                <param>
                    relationObjectName  ObjectName of the relation MBean to be added.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    NoSuchMethodException  If the MBean does not implement the
                      Relation interface                    
                </exception>
                <exception>
                    InvalidRelationIdException  if:
                      &lt;P&gt;- no relation identifier in MBean
                      &lt;P&gt;- the relation identifier is already used in the Relation Service                    
                </exception>
                <exception>
                    InstanceNotFoundException  if the MBean for given ObjectName
                      has not been registered                    
                </exception>
                <exception>
                    InvalidRelationServiceException  if:
                      &lt;P&gt;- no Relation Service name in MBean
                      &lt;P&gt;- the Relation Service name in the MBean is not the one of the
                      current Relation Service                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if:
                      &lt;P&gt;- no relation type name in MBean
                      &lt;P&gt;- the relation type name in MBean does not correspond to a relation
                      type created in the Relation Service                    
                </exception>
                <exception>
                    InvalidRoleValueException  if:
                      &lt;P&gt;- the number of referenced MBeans in a role is less than
                      expected minimum degree
                      &lt;P&gt;- the number of referenced MBeans in a role exceeds expected
                      maximum degree
                      &lt;P&gt;- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      &lt;P&gt;- an MBean provided for a role does not exist                    
                </exception>
                <exception>
                    RoleNotFoundException  if a value is provided for a role
                      that does not exist in the relation type                    
                </exception>
            </javadoc>
            <method name="addRelation" type="void" line="367">
                <params>
                    <param name="relationObjectName" type="ObjectName"/>
                </params>
                <scope line="368">
                    <declaration name="excMsg" type="String" line="369"/>
                </scope>
                <scope line="374">
                    <declaration name="excMsg" type="String" line="375"/>
                </scope>
                <declaration name="relId" type="String" line="378"/>
                <scope line="379"/>
                <scope line="382"/>
                <scope line="385"/>
                <scope line="388"/>
                <scope line="391">
                    <declaration name="excMsg" type="String" line="392"/>
                </scope>
                <declaration name="relServObjName" type="ObjectName" line="395"/>
                <scope line="396"/>
                <scope line="399"/>
                <scope line="402"/>
                <scope line="405"/>
                <declaration name="badRelServFlag" type="boolean" line="408"/>
                <scope line="409"/>
                <scope line="412"/>
                <scope line="415">
                    <declaration name="excMsg" type="String" line="416"/>
                </scope>
                <declaration name="relTypeName" type="String" line="419"/>
                <scope line="420"/>
                <scope line="423"/>
                <scope line="426"/>
                <scope line="429"/>
                <scope line="432">
                    <declaration name="excMsg" type="String" line="433"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="436"/>
                <scope line="437"/>
                <scope line="440"/>
                <scope line="443"/>
                <scope line="447"/>
                <scope line="450"/>
                <scope line="453"/>
                <declaration name="newRefList" type="List&amp;lt;ObjectName&amp;gt;" line="455"/>
            </method>
            <javadoc line="461">
                If the relation is represented by an MBean (created by the user and
                  added as a relation in the Relation Service), returns the ObjectName of
                  the MBean.                
                <param>
                    relationId  relation id identifying the relation                    
                </param>
                <return>
                    ObjectName of the corresponding relation MBean, or null if
                      the relation is not an MBean.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException there is no relation associated
                      to that id                    
                </exception>
            </javadoc>
            <method name="isRelationMBean" type="ObjectName" line="472">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="473">
                    <declaration name="excMsg" type="String" line="474"/>
                </scope>
                <declaration name="result" type="Object" line="478"/>
                <scope line="479"/>
                <scope line="482"/>
            </method>
            <javadoc line="486">
                Returns the relation id associated to the given ObjectName if the
                  MBean has been added as a relation in the Relation Service.                
                <param>
                    objectName  ObjectName of supposed relation                    
                </param>
                <return>
                    relation id (String) or null (if the ObjectName is not a
                      relation handled by the Relation Service)                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="isRelation" type="String" line="494">
                <params>
                    <param name="objectName" type="ObjectName"/>
                </params>
                <scope line="495">
                    <declaration name="excMsg" type="String" line="496"/>
                </scope>
                <declaration name="result" type="String" line="500"/>
                <scope line="501">
                    <declaration name="relId" type="String" line="502"/>
                    <scope line="503"/>
                </scope>
            </method>
            <javadoc line="509">
                Checks if there is a relation identified in Relation Service with given
                  relation id.                
                <param>
                    relationId  relation id identifying the relation                    
                </param>
                <return>
                    boolean: true if there is a relation, false else                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="hasRelation" type="Boolean" line="516">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="517">
                    <declaration name="excMsg" type="String" line="518"/>
                </scope>
                <scope line="522">
                    <declaration name="result" type="Object" line="523"/>
                </scope>
                <scope line="526"/>
            </method>
            <javadoc line="530">
                Returns all the relation ids for all the relations handled by the
                  Relation Service.                
                <return>
                    ArrayList of String                    
                </return>
            </javadoc>
            <method name="getAllRelationIds" type="List&lt;String&gt;" line="535">
                <declaration name="result" type="List&amp;lt;String&amp;gt;" line="536"/>
                <scope line="537"/>
            </method>
            <javadoc line="542">
                Checks if given Role can be read in a relation of the given type.                
                <param>
                    roleName  name of role to be checked                    
                </param>
                <param>
                    relationTypeName  name of the relation type                    
                </param>
                <return>
                    an Integer wrapping an integer corresponding to possible
                      problems represented as constants in RoleUnresolved:
                      &lt;P&gt;- 0 if role can be read
                      &lt;P&gt;- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
                      &lt;P&gt;- integer corresponding to RoleStatus.ROLE_NOT_READABLE                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type is not
                      known in the Relation Service                    
                </exception>
            </javadoc>
            <method name="checkRoleReading" type="Integer" line="555">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="556">
                    <declaration name="excMsg" type="String" line="557"/>
                </scope>
                <declaration name="result" type="Integer" line="561"/>
                <declaration name="relType" type="RelationType" line="562"/>
                <scope line="563">
                    <declaration name="roleInfo" type="RoleInfo" line="564"/>
                </scope>
                <scope line="567"/>
            </method>
            <javadoc line="573">
                Checks if given Role can be set in a relation of given type.                
                <param>
                    role  role to be checked                    
                </param>
                <param>
                    relationTypeName  name of relation type                    
                </param>
                <param>
                    initFlag  flag to specify that the checking is done for the
                      initialization of a role, write access shall not be verified.                    
                </param>
                <return>
                    an Integer wrapping an integer corresponding to possible
                      problems represented as constants in RoleUnresolved:
                      &lt;P&gt;- 0 if role can be set
                      &lt;P&gt;- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
                      &lt;P&gt;- integer for RoleStatus.ROLE_NOT_WRITABLE
                      &lt;P&gt;- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
                      &lt;P&gt;- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
                      &lt;P&gt;- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
                      &lt;P&gt;- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if unknown relation type                    
                </exception>
            </javadoc>
            <method name="checkRoleWriting" type="Integer" line="591">
                <params>
                    <param name="role" type="Role"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="initFlag" type="Boolean"/>
                </params>
                <scope line="592">
                    <declaration name="excMsg" type="String" line="593"/>
                </scope>
                <declaration name="relType" type="RelationType" line="597"/>
                <declaration name="roleName" type="String" line="598"/>
                <declaration name="roleValue" type="List&amp;lt;ObjectName&amp;gt;" line="599"/>
                <declaration name="writeChkFlag" type="boolean" line="600"/>
                <scope line="601"/>
                <declaration name="roleInfo" type="RoleInfo" line="604"/>
                <scope line="605"/>
                <scope line="608"/>
                <declaration name="result" type="Integer" line="612"/>
            </method>
            <javadoc line="616">
                Sends a notification (RelationNotification) for a relation creation.
                  The notification type is:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_CREATION if the relation is an
                  object internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_CREATION if the relation is a
                  MBean added as a relation.
                  &lt;P&gt;The source object is the Relation Service itself.
                  &lt;P&gt;It is called in Relation Service createRelation() and
                  addRelation() methods.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if there is no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="sendRelationCreationNotification" type="void" line="631">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="632">
                    <declaration name="excMsg" type="String" line="633"/>
                </scope>
                <declaration name="ntfMsg" type="StringBuilder" line="637"/>
            </method>
            <javadoc line="643">
                Sends a notification (RelationNotification) for a role update in the
                  given relation. The notification type is:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_UPDATE if the relation is an
                  object internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a
                  MBean added as a relation.
                  &lt;P&gt;The source object is the Relation Service itself.
                  &lt;P&gt;It is called in relation MBean setRole() (for given role) and
                  setRoles() (for each role) methods (implementation provided in
                  RelationSupport class).
                  &lt;P&gt;It is also called in Relation Service setRole() (for given role) and
                  setRoles() (for each role) methods.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <param>
                    newRole  new role (name and new value)                    
                </param>
                <param>
                    oldValue  old role value (List of ObjectName objects)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if there is no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="sendRoleUpdateNotification" type="void" line="663">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="newRole" type="Role"/>
                    <param name="oldValue" type="List&lt;ObjectName&gt;"/>
                </params>
                <scope line="664">
                    <declaration name="excMsg" type="String" line="665"/>
                </scope>
                <declaration name="roleName" type="String" line="670"/>
                <declaration name="newRoleVal" type="List&amp;lt;ObjectName&amp;gt;" line="671"/>
                <declaration name="newRoleValString" type="String" line="672"/>
                <declaration name="oldRoleValString" type="String" line="673"/>
                <declaration name="ntfMsg" type="StringBuilder" line="674"/>
            </method>
            <javadoc line="683">
                Sends a notification (RelationNotification) for a relation removal.
                  The notification type is:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an
                  object internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a
                  MBean added as a relation.
                  &lt;P&gt;The source object is the Relation Service itself.
                  &lt;P&gt;It is called in Relation Service removeRelation() method.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <param>
                    unregMBeanList  List of ObjectNames of MBeans expected
                      to be unregistered due to relation removal (can be null)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if there is no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="sendRelationRemovalNotification" type="void" line="699">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="unregMBeanList" type="List&lt;ObjectName&gt;"/>
                </params>
                <scope line="700">
                    <declaration name="excMsg" type="String" line="701"/>
                </scope>
            </method>
            <javadoc line="709">
                Handles update of the Relation Service role map for the update of given
                  role in given relation.
                  &lt;P&gt;It is called in relation MBean setRole() (for given role) and
                  setRoles() (for each role) methods (implementation provided in
                  RelationSupport class).
                  &lt;P&gt;It is also called in Relation Service setRole() (for given role) and
                  setRoles() (for each role) methods.
                  &lt;P&gt;To allow the Relation Service to maintain the consistency (in case
                  of MBean unregistration) and to be able to perform queries, this method
                  must be called when a role is updated.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <param>
                    newRole  new role (name and new value)                    
                </param>
                <param>
                    oldValue  old role value (List of ObjectName objects)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given id.                    
                </exception>
            </javadoc>
            <method name="updateRoleMap" type="void" line="728">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="newRole" type="Role"/>
                    <param name="oldValue" type="List&lt;ObjectName&gt;"/>
                </params>
                <scope line="729">
                    <declaration name="excMsg" type="String" line="730"/>
                </scope>
                <declaration name="result" type="Object" line="735"/>
                <declaration name="roleName" type="String" line="736"/>
                <declaration name="newRoleValue" type="List&amp;lt;ObjectName&amp;gt;" line="737"/>
                <declaration name="oldRoleValue" type="List&amp;lt;ObjectName&amp;gt;" line="738"/>
                <declaration name="newRefList" type="List&amp;lt;ObjectName&amp;gt;" line="739"/>
                <scope line="740">
                    <declaration name="currObjNamePos" type="int" line="741"/>
                    <scope line="742">
                        <declaration name="isNewFlag" type="boolean" line="743"/>
                        <scope line="744"/>
                    </scope>
                    <scope line="748"/>
                </scope>
                <declaration name="obsRefList" type="List&amp;lt;ObjectName&amp;gt;" line="752"/>
                <scope line="753">
                    <declaration name="noLongerRefFlag" type="boolean" line="754"/>
                    <scope line="755"/>
                </scope>
            </method>
            <javadoc line="763">
                Removes given relation from the Relation Service.
                  &lt;P&gt;A RelationNotification notification is sent, its type being:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_REMOVAL if the relation was
                  only internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is
                  registered as an MBean.
                  &lt;P&gt;For MBeans referenced in such relation, nothing will be done,                
                <param>
                    relationId  relation id of the relation to be removed                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation corresponding to
                      given relation id                    
                </exception>
            </javadoc>
            <method name="removeRelation" type="void" line="778">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="780">
                    <declaration name="excMsg" type="String" line="781"/>
                </scope>
                <declaration name="result" type="Object" line="785"/>
                <scope line="786">
                    <declaration name="obsRefList" type="List&amp;lt;ObjectName&amp;gt;" line="787"/>
                </scope>
                <declaration name="refMBeanList" type="List&amp;lt;ObjectName&amp;gt;" line="792"/>
                <declaration name="nonRefObjNameList" type="List&amp;lt;ObjectName&amp;gt;" line="793"/>
                <scope line="794">
                    <scope line="795">
                        <declaration name="relIdMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="796"/>
                        <scope line="797"/>
                        <scope line="801"/>
                    </scope>
                    <scope line="805"/>
                </scope>
                <scope line="809"/>
                <scope line="812">
                    <scope line="813"/>
                </scope>
                <declaration name="relTypeName" type="String" line="817"/>
                <scope line="818"/>
                <scope line="822">
                    <declaration name="relIdList" type="List&amp;lt;String&amp;gt;" line="823"/>
                    <scope line="824">
                        <scope line="826"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="834">
                Purges the relations.
                  &lt;P&gt;Depending on the purgeFlag value, this method is either called
                  automatically when a notification is received for the unregistration of
                  an MBean referenced in a relation (if the flag is set to true), or not
                  (if the flag is set to false).
                  &lt;P&gt;In that case it is up to the user to call it to maintain the
                  consistency of the relations. To be kept in mind that if an MBean is
                  unregistered and the purge not done immediately, if the ObjectName is
                  reused and assigned to another MBean referenced in a relation, calling
                  manually this purgeRelations() method will cause trouble, as will
                  consider the ObjectName as corresponding to the unregistered MBean, not
                  seeing the new one.
                  &lt;P&gt;The behavior depends on the cardinality of the role where the
                  unregistered MBean is referenced:
                  &lt;P&gt;- if removing one MBean reference in the role makes its number of
                  references less than the minimum degree, the relation has to be removed.
                  &lt;P&gt;- if the remaining number of references after removing the MBean
                  reference is still in the cardinality range, keep the relation and
                  update it calling its handleMBeanUnregistration() callback.                
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server.                    
                </exception>
            </javadoc>
            <method name="purgeRelations" type="void" line="857">
                <declaration name="localUnregNtfList" type="List&amp;lt;MBeanServerNotification&amp;gt;" line="860"/>
                <scope line="861"/>
                <declaration name="obsRefList" type="List&amp;lt;ObjectName&amp;gt;" line="865"/>
                <declaration name="localMBean2RelIdMap" type="Map&amp;lt;ObjectName,Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;&amp;gt;" line="866"/>
                <scope line="867">
                    <scope line="868">
                        <declaration name="unregMBeanName" type="ObjectName" line="869"/>
                        <declaration name="relIdMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="871"/>
                    </scope>
                </scope>
                <scope line="877">
                    <declaration name="unregMBeanName" type="ObjectName" line="878"/>
                    <declaration name="localRelIdMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="879"/>
                    <scope line="880">
                        <declaration name="currRelId" type="String" line="881"/>
                        <declaration name="localRoleNameList" type="List&amp;lt;String&amp;gt;" line="882"/>
                        <scope line="883"/>
                        <scope line="886"/>
                        <scope line="889"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="897">
                Retrieves the relations where a given MBean is referenced.
                  &lt;P&gt;This corresponds to the CIM &quot;References&quot; and &quot;ReferenceNames&quot;
                  operations.                
                <param>
                    mbeanName  ObjectName of MBean                    
                </param>
                <param>
                    relationTypeName  can be null; if specified, only the relations
                      of that type will be considered in the search. Else all relation types
                      are considered.                    
                </param>
                <param>
                    roleName  can be null; if specified, only the relations
                      where the MBean is referenced in that role will be returned. Else all
                      roles are considered.                    
                </param>
                <return>
                    an HashMap, where the keys are the relation ids of the relations
                      where the MBean is referenced, and the value is, for each key,
                      an ArrayList of role names (as an MBean can be referenced in several
                      roles in the same relation).                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="findReferencingRelations" type="Map&lt;String,List&lt;String&gt;&gt;" line="914">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="915">
                    <declaration name="excMsg" type="String" line="916"/>
                </scope>
                <declaration name="result" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="920"/>
                <scope line="921">
                    <declaration name="relId2RoleNamesMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="922"/>
                    <scope line="923">
                        <declaration name="allRelIdSet" type="Set&amp;lt;String&amp;gt;" line="924"/>
                        <declaration name="relIdList" type="List&amp;lt;String&amp;gt;" line="925"/>
                        <scope line="926"/>
                        <scope line="929">
                            <scope line="931">
                                <declaration name="currRelTypeName" type="String" line="932"/>
                                <scope line="933"/>
                                <scope line="936"/>
                            </scope>
                        </scope>
                        <scope line="941">
                            <declaration name="currRoleNameList" type="List&amp;lt;String&amp;gt;" line="942"/>
                            <scope line="943"/>
                            <scope line="946">
                                <declaration name="dummyList" type="List&amp;lt;String&amp;gt;" line="947"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="957">
                Retrieves the MBeans associated to given one in a relation.
                  &lt;P&gt;This corresponds to CIM Associators and AssociatorNames operations.                
                <param>
                    mbeanName  ObjectName of MBean                    
                </param>
                <param>
                    relationTypeName  can be null; if specified, only the relations
                      of that type will be considered in the search. Else all
                      relation types are considered.                    
                </param>
                <param>
                    roleName  can be null; if specified, only the relations
                      where the MBean is referenced in that role will be considered. Else all
                      roles are considered.                    
                </param>
                <return>
                    an HashMap, where the keys are the ObjectNames of the MBeans
                      associated to given MBean, and the value is, for each key, an ArrayList
                      of the relation ids of the relations where the key MBean is
                      associated to given one (as they can be associated in several different
                      relations).                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="findAssociatedMBeans" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="974">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="975">
                    <declaration name="excMsg" type="String" line="976"/>
                </scope>
                <declaration name="relId2RoleNamesMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="980"/>
                <declaration name="result" type="Map&amp;lt;ObjectName,List&amp;lt;String&amp;gt;&amp;gt;" line="981"/>
                <scope line="982">
                    <declaration name="objName2RoleNamesMap" type="Map&amp;lt;ObjectName,List&amp;lt;String&amp;gt;&amp;gt;" line="983"/>
                    <scope line="984"/>
                    <scope line="987"/>
                    <scope line="990">
                        <scope line="991">
                            <declaration name="currRelIdList" type="List&amp;lt;String&amp;gt;" line="992"/>
                            <scope line="993"/>
                            <scope line="998"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1007">
                Returns the relation ids for relations of the given type.                
                <param>
                    relationTypeName  relation type name                    
                </param>
                <return>
                    an ArrayList of relation ids.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if there is no relation type
                      with that name.                    
                </exception>
            </javadoc>
            <method name="findRelationsOfType" type="List&lt;String&gt;" line="1015">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="1016">
                    <declaration name="excMsg" type="String" line="1017"/>
                </scope>
                <declaration name="relType" type="RelationType" line="1021"/>
                <declaration name="result" type="List&amp;lt;String&amp;gt;" line="1022"/>
                <scope line="1023">
                    <declaration name="result1" type="List&amp;lt;String&amp;gt;" line="1024"/>
                </scope>
            </method>
            <javadoc line="1031">
                Retrieves role value for given role name in given relation.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the ArrayList of ObjectName objects being the role value                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <exception>
                    RoleNotFoundException  if:
                      &lt;P&gt;- there is no role with given name
                      &lt;P&gt;or
                      &lt;P&gt;- the role is not readable.                    
                </exception>
                <see>
                    #setRole                    
                </see>
            </javadoc>
            <method name="getRole" type="List&lt;ObjectName&gt;" line="1046">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="1047">
                    <declaration name="excMsg" type="String" line="1048"/>
                </scope>
                <declaration name="relObj" type="Object" line="1053"/>
                <declaration name="result" type="List&amp;lt;ObjectName&amp;gt;" line="1054"/>
                <scope line="1055"/>
                <scope line="1058">
                    <declaration name="params" type="Object[]" line="1059"/>
                    <declaration name="signature" type="String[]" line="1061"/>
                    <scope line="1063">
                        <declaration name="invokeResult" type="List&amp;lt;ObjectName&amp;gt;" line="1064"/>
                    </scope>
                    <scope line="1068"/>
                    <scope line="1071"/>
                    <scope line="1074">
                        <declaration name="wrappedExc" type="Exception" line="1075"/>
                        <scope line="1076"/>
                        <scope line="1079"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1087">
                Retrieves values of roles with given names in given relation.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleNameArray  array of names of roles to be retrieved                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      retrieved).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <see>
                    #setRoles                    
                </see>
            </javadoc>
            <method name="getRoles" type="RoleResult" line="1100">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleNameArray" type="String[]"/>
                </params>
                <scope line="1101">
                    <declaration name="excMsg" type="String" line="1102"/>
                </scope>
                <declaration name="relObj" type="Object" line="1107"/>
                <declaration name="result" type="RoleResult" line="1108"/>
                <scope line="1109"/>
                <scope line="1112">
                    <declaration name="params" type="Object[]" line="1113"/>
                    <declaration name="signature" type="String[]" line="1115"/>
                    <scope line="1116"/>
                    <scope line="1119"/>
                    <scope line="1121"/>
                    <scope line="1124"/>
                    <scope line="1127"/>
                    <scope line="1130"/>
                </scope>
            </method>
            <javadoc line="1137">
                Returns all roles present in the relation.                
                <param>
                    relationId  relation id                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      readable).                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given id                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
            </javadoc>
            <method name="getAllRoles" type="RoleResult" line="1148">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="1149">
                    <declaration name="excMsg" type="String" line="1150"/>
                </scope>
                <declaration name="relObj" type="Object" line="1154"/>
                <declaration name="result" type="RoleResult" line="1155"/>
                <scope line="1156"/>
                <scope line="1159">
                    <scope line="1160"/>
                    <scope line="1163"/>
                </scope>
            </method>
            <javadoc line="1170">
                Retrieves the number of MBeans currently referenced in the given role.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the number of currently referenced MBeans in that role                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with given name                    
                </exception>
            </javadoc>
            <method name="getRoleCardinality" type="Integer" line="1179">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="1180">
                    <declaration name="excMsg" type="String" line="1181"/>
                </scope>
                <declaration name="relObj" type="Object" line="1185"/>
                <declaration name="result" type="Integer" line="1186"/>
                <scope line="1187"/>
                <scope line="1190">
                    <declaration name="params" type="Object[]" line="1191"/>
                    <declaration name="signature" type="String[]" line="1193"/>
                    <scope line="1195"/>
                    <scope line="1198"/>
                    <scope line="1201"/>
                    <scope line="1204">
                        <declaration name="wrappedExc" type="Exception" line="1205"/>
                        <scope line="1206"/>
                        <scope line="1209"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1217">
                Sets the given role in given relation.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;The Relation Service will keep track of the change to keep the
                  consistency of relations by handling referenced MBean unregistrations.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    role  role to be set (name and new value)                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <exception>
                    RoleNotFoundException  if the role does not exist or is not
                      writable                    
                </exception>
                <exception>
                    InvalidRoleValueException  if value provided for role is not
                      valid:
                      &lt;P&gt;- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      &lt;P&gt;or
                      &lt;P&gt;- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      &lt;P&gt;or
                      &lt;P&gt;- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      &lt;P&gt;or
                      &lt;P&gt;- an MBean provided for that role does not exist                    
                </exception>
                <see>
                    #getRole                    
                </see>
            </javadoc>
            <method name="setRole" type="void" line="1245">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="role" type="Role"/>
                </params>
                <scope line="1246">
                    <declaration name="excMsg" type="String" line="1247"/>
                </scope>
                <declaration name="relObj" type="Object" line="1252"/>
                <scope line="1253">
                    <scope line="1254"/>
                    <scope line="1257"/>
                </scope>
                <scope line="1261">
                    <declaration name="params" type="Object[]" line="1262"/>
                    <declaration name="signature" type="String[]" line="1264"/>
                    <scope line="1266"/>
                    <scope line="1269"/>
                    <scope line="1272"/>
                    <scope line="1275">
                        <declaration name="wrappedExc" type="Exception" line="1276"/>
                        <scope line="1277"/>
                        <scope line="1280"/>
                        <scope line="1283"/>
                    </scope>
                    <scope line="1287"/>
                    <scope line="1290"/>
                </scope>
            </method>
            <javadoc line="1297">
                Sets the given roles in given relation.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;The Relation Service keeps track of the changes to keep the
                  consistency of relations by handling referenced MBean unregistrations.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleList  list of roles to be set                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully set) and a RoleUnresolvedList (for roles not
                      set).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <see>
                    #getRoles                    
                </see>
            </javadoc>
            <method name="setRoles" type="RoleResult" line="1314">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <scope line="1315">
                    <declaration name="excMsg" type="String" line="1316"/>
                </scope>
                <declaration name="relObj" type="Object" line="1321"/>
                <declaration name="result" type="RoleResult" line="1322"/>
                <scope line="1323">
                    <scope line="1324"/>
                    <scope line="1327"/>
                </scope>
                <scope line="1331">
                    <declaration name="params" type="Object[]" line="1332"/>
                    <declaration name="signature" type="String[]" line="1334"/>
                    <scope line="1336"/>
                    <scope line="1339"/>
                    <scope line="1342"/>
                    <scope line="1345"/>
                </scope>
            </method>
            <javadoc line="1352">
                Retrieves MBeans referenced in the various roles of the relation.                
                <param>
                    relationId  relation id                    
                </param>
                <return>
                    a HashMap mapping:
                      &lt;P&gt; ObjectName -&gt; ArrayList of String (role
                      names)                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="getReferencedMBeans" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="1362">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="1363">
                    <declaration name="excMsg" type="String" line="1364"/>
                </scope>
                <declaration name="relObj" type="Object" line="1368"/>
                <declaration name="result" type="Map&amp;lt;ObjectName,List&amp;lt;String&amp;gt;&amp;gt;" line="1369"/>
                <scope line="1370"/>
                <scope line="1373">
                    <scope line="1374"/>
                    <scope line="1377"/>
                </scope>
            </method>
            <javadoc line="1384">
                Returns name of associated relation type for given relation.                
                <param>
                    relationId  relation id                    
                </param>
                <return>
                    the name of the associated relation type.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="getRelationTypeName" type="String" line="1392">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="1393">
                    <declaration name="excMsg" type="String" line="1394"/>
                </scope>
                <declaration name="relObj" type="Object" line="1398"/>
                <declaration name="result" type="String" line="1399"/>
                <scope line="1400"/>
                <scope line="1403">
                    <scope line="1404"/>
                    <scope line="1407"/>
                </scope>
            </method>
            <javadoc line="1414">
                Invoked when a JMX notification occurs.
                  Currently handles notifications for unregistration of MBeans, either
                  referenced in a relation role or being a relation itself.                
                <param>
                    notif  The notification.                    
                </param>
                <param>
                    handback  An opaque object which helps the listener to
                      associate information regarding the MBean emitter (can be null).                    
                </param>
            </javadoc>
            <method name="handleNotification" type="void" line="1422">
                <params>
                    <param name="notif" type="Notification"/>
                    <param name="handback" type="Object"/>
                </params>
                <scope line="1423">
                    <declaration name="excMsg" type="String" line="1424"/>
                </scope>
                <scope line="1428">
                    <declaration name="mbsNtf" type="MBeanServerNotification" line="1429"/>
                    <declaration name="ntfType" type="String" line="1430"/>
                    <scope line="1431">
                        <declaration name="mbeanName" type="ObjectName" line="1432"/>
                        <declaration name="isRefedMBeanFlag" type="boolean" line="1433"/>
                        <scope line="1434">
                            <scope line="1435">
                                <scope line="1436"/>
                            </scope>
                            <scope line="1441">
                                <scope line="1442"/>
                                <scope line="1445"/>
                            </scope>
                        </scope>
                        <declaration name="relId" type="String" line="1450"/>
                        <scope line="1451"/>
                        <scope line="1454">
                            <scope line="1455"/>
                            <scope line="1458"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1467">
                Returns a NotificationInfo object containing the name of the Java class
                  of the notification and the notification types sent.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="1471">
                <declaration name="ntfClass" type="String" line="1473"/>
                <declaration name="ntfTypes" type="String[]" line="1474"/>
                <declaration name="ntfDesc" type="String" line="1475"/>
                <declaration name="ntfInfo" type="MBeanNotificationInfo" line="1476"/>
            </method>
            <method name="addRelationTypeInt" type="void" line="1480">
                <params>
                    <param name="relationTypeObj" type="RelationType"/>
                </params>
                <scope line="1481">
                    <declaration name="excMsg" type="String" line="1482"/>
                </scope>
                <declaration name="relTypeName" type="String" line="1486"/>
                <scope line="1487">
                    <declaration name="relType" type="RelationType" line="1488"/>
                    <scope line="1489">
                        <declaration name="excMsg" type="String" line="1490"/>
                        <declaration name="excMsgStrB" type="StringBuilder" line="1491"/>
                    </scope>
                </scope>
                <scope line="1496"/>
                <scope line="1498"/>
                <scope line="1501"/>
            </method>
            <method name="getRelationType" type="RelationType" line="1507">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="1508">
                    <declaration name="excMsg" type="String" line="1509"/>
                </scope>
                <declaration name="relType" type="RelationType" line="1513"/>
                <scope line="1514"/>
                <scope line="1517">
                    <declaration name="excMsg" type="String" line="1518"/>
                    <declaration name="excMsgStrB" type="StringBuilder" line="1519"/>
                </scope>
            </method>
            <method name="getRelation" type="Object" line="1526">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <scope line="1527">
                    <declaration name="excMsg" type="String" line="1528"/>
                </scope>
                <declaration name="rel" type="Object" line="1532"/>
                <scope line="1533"/>
                <scope line="1536">
                    <declaration name="excMsg" type="String" line="1537"/>
                </scope>
            </method>
            <method name="addNewMBeanReference" type="boolean" line="1543">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="1544">
                    <declaration name="excMsg" type="String" line="1545"/>
                </scope>
                <declaration name="isNewFlag" type="boolean" line="1549"/>
                <scope line="1550">
                    <declaration name="mbeanRefMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="1551"/>
                    <scope line="1552">
                        <declaration name="roleNames" type="List&amp;lt;String&amp;gt;" line="1554"/>
                    </scope>
                    <scope line="1560">
                        <declaration name="roleNames" type="List&amp;lt;String&amp;gt;" line="1561"/>
                        <scope line="1562"/>
                        <scope line="1567"/>
                    </scope>
                </scope>
            </method>
            <method name="removeMBeanReference" type="boolean" line="1575">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                    <param name="allRolesFlag" type="boolean"/>
                </params>
                <scope line="1576">
                    <declaration name="excMsg" type="String" line="1577"/>
                </scope>
                <declaration name="noLongerRefFlag" type="boolean" line="1581"/>
                <scope line="1582">
                    <declaration name="mbeanRefMap" type="Map&amp;lt;String,List&amp;lt;String&amp;gt;&amp;gt;" line="1583"/>
                    <scope line="1584"/>
                    <declaration name="roleNames" type="List&amp;lt;String&amp;gt;" line="1588"/>
                    <scope line="1589">
                        <declaration name="obsRefIdx" type="int" line="1591"/>
                        <scope line="1592"/>
                    </scope>
                    <scope line="1596"/>
                    <scope line="1599"/>
                </scope>
            </method>
            <method name="updateUnregistrationListener" type="void" line="1607">
                <params>
                    <param name="newRefList" type="List&lt;ObjectName&gt;"/>
                    <param name="obsoleteRefList" type="List&lt;ObjectName&gt;"/>
                </params>
                <scope line="1608">
                    <scope line="1609"/>
                </scope>
                <scope line="1615">
                    <declaration name="newListenerFlag" type="boolean" line="1616"/>
                    <scope line="1617"/>
                    <scope line="1621">
                        <scope line="1622"/>
                        <scope line="1625"/>
                        <scope line="1628">
                            <scope line="1629"/>
                            <scope line="1632"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="addRelationInt" type="void" line="1641">
                <params>
                    <param name="relationBaseFlag" type="boolean"/>
                    <param name="relationObj" type="RelationSupport"/>
                    <param name="relationObjName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <scope line="1642">
                    <declaration name="excMsg" type="String" line="1643"/>
                </scope>
                <scope line="1648">
                    <declaration name="rel" type="Object" line="1649"/>
                    <scope line="1650">
                        <declaration name="excMsg" type="String" line="1651"/>
                        <declaration name="excMsgStrB" type="StringBuilder" line="1652"/>
                    </scope>
                </scope>
                <scope line="1657"/>
                <declaration name="relType" type="RelationType" line="1659"/>
                <declaration name="roleInfoList" type="List&amp;lt;RoleInfo&amp;gt;" line="1660"/>
                <scope line="1661">
                    <scope line="1662">
                        <declaration name="currRoleName" type="String" line="1663"/>
                        <declaration name="currRoleValue" type="List&amp;lt;ObjectName&amp;gt;" line="1664"/>
                        <declaration name="roleInfo" type="RoleInfo" line="1665"/>
                        <scope line="1666"/>
                        <scope line="1669"/>
                        <declaration name="status" type="Integer" line="1672"/>
                        <declaration name="pbType" type="int" line="1673"/>
                        <scope line="1674"/>
                        <declaration name="roleInfoIdx" type="int" line="1677"/>
                    </scope>
                </scope>
                <scope line="1682">
                    <scope line="1683"/>
                    <scope line="1686"/>
                </scope>
                <scope line="1690"/>
                <scope line="1693">
                    <declaration name="relIdList" type="List&amp;lt;String&amp;gt;" line="1694"/>
                    <declaration name="firstRelFlag" type="boolean" line="1695"/>
                    <scope line="1696"/>
                    <scope line="1701"/>
                </scope>
                <scope line="1705">
                    <declaration name="dummyList" type="List&amp;lt;ObjectName&amp;gt;" line="1706"/>
                    <scope line="1707"/>
                    <scope line="1710"/>
                </scope>
                <scope line="1713"/>
                <scope line="1716"/>
            </method>
            <method name="checkRoleInt" type="Integer" line="1721">
                <params>
                    <param name="chkType" type="int"/>
                    <param name="roleName" type="String"/>
                    <param name="roleValue" type="List&lt;ObjectName&gt;"/>
                    <param name="roleInfo" type="RoleInfo"/>
                    <param name="writeChkFlag" type="boolean"/>
                </params>
                <scope line="1722">
                    <declaration name="excMsg" type="String" line="1723"/>
                </scope>
                <declaration name="expName" type="String" line="1727"/>
                <scope line="1728"/>
                <scope line="1732">
                    <declaration name="isReadable" type="boolean" line="1733"/>
                    <scope line="1734"/>
                    <scope line="1738"/>
                </scope>
                <scope line="1743">
                    <declaration name="isWritable" type="boolean" line="1744"/>
                    <scope line="1745"/>
                </scope>
                <declaration name="refNbr" type="int" line="1750"/>
                <declaration name="chkMinFlag" type="boolean" line="1751"/>
                <scope line="1752"/>
                <declaration name="chkMaxFlag" type="boolean" line="1756"/>
                <scope line="1757"/>
                <declaration name="expClassName" type="String" line="1761"/>
                <scope line="1762">
                    <scope line="1763"/>
                    <scope line="1767">
                        <declaration name="classSts" type="boolean" line="1768"/>
                        <scope line="1769"/>
                    </scope>
                    <scope line="1774"/>
                </scope>
            </method>
            <method name="initializeMissingRoles" type="void" line="1782">
                <params>
                    <param name="relationBaseFlag" type="boolean"/>
                    <param name="relationObj" type="RelationSupport"/>
                    <param name="relationObjName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoList" type="List&lt;RoleInfo&gt;"/>
                </params>
                <scope line="1783">
                    <declaration name="excMsg" type="String" line="1784"/>
                </scope>
                <scope line="1789">
                    <declaration name="roleName" type="String" line="1790"/>
                    <declaration name="emptyValue" type="List&amp;lt;ObjectName&amp;gt;" line="1791"/>
                    <declaration name="role" type="Role" line="1792"/>
                    <scope line="1793">
                        <scope line="1794"/>
                        <scope line="1797"/>
                        <scope line="1800"/>
                        <scope line="1803"/>
                    </scope>
                    <scope line="1807">
                        <declaration name="params" type="Object[]" line="1808"/>
                        <declaration name="signature" type="String[]" line="1810"/>
                        <scope line="1812"/>
                        <scope line="1815"/>
                        <scope line="1818"/>
                        <scope line="1821">
                            <declaration name="wrappedExc" type="Exception" line="1822"/>
                            <scope line="1823"/>
                            <scope line="1826"/>
                        </scope>
                        <scope line="1830"/>
                        <scope line="1833"/>
                    </scope>
                </scope>
            </method>
            <method name="throwRoleProblemException" type="void" line="1841">
                <params>
                    <param name="pbType" type="int"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="1842">
                    <declaration name="excMsg" type="String" line="1843"/>
                </scope>
                <declaration name="excType" type="int" line="1846"/>
                <declaration name="excMsgPart" type="String" line="1847"/>
                <declaration name="excMsgStrB" type="StringBuilder" line="1878"/>
                <declaration name="excMsg" type="String" line="1880"/>
                <scope line="1881"/>
                <scope line="1884"/>
            </method>
            <method name="sendNotificationInt" type="void" line="1888">
                <params>
                    <param name="intNtfType" type="int"/>
                    <param name="message" type="String"/>
                    <param name="relationId" type="String"/>
                    <param name="unregMBeanList" type="List&lt;ObjectName&gt;"/>
                    <param name="roleName" type="String"/>
                    <param name="roleNewValue" type="List&lt;ObjectName&gt;"/>
                    <param name="oldValue" type="List&lt;ObjectName&gt;"/>
                </params>
                <scope line="1889">
                    <declaration name="excMsg" type="String" line="1890"/>
                </scope>
                <declaration name="relTypeName" type="String" line="1894"/>
                <scope line="1895"/>
                <declaration name="relObjName" type="ObjectName" line="1898"/>
                <declaration name="ntfType" type="String" line="1899"/>
                <scope line="1900"/>
                <scope line="1913"/>
                <declaration name="seqNo" type="Long" line="1926"/>
                <declaration name="currDate" type="Date" line="1927"/>
                <declaration name="timeStamp" type="long" line="1928"/>
                <declaration name="ntf" type="RelationNotification" line="1929"/>
                <scope line="1931"/>
            </method>
            <method name="handleReferenceUnregistration" type="void" line="1938">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleNameList" type="List&lt;String&gt;"/>
                </params>
                <scope line="1939">
                    <declaration name="excMsg" type="String" line="1940"/>
                </scope>
                <declaration name="currRelTypeName" type="String" line="1945"/>
                <declaration name="relObj" type="Object" line="1946"/>
                <declaration name="deleteRelFlag" type="boolean" line="1947"/>
                <scope line="1948">
                    <scope line="1949"/>
                    <declaration name="currRoleRefNbr" type="int" line="1952"/>
                    <declaration name="currRoleNewRefNbr" type="int" line="1953"/>
                    <declaration name="currRoleInfo" type="RoleInfo" line="1954"/>
                    <scope line="1955"/>
                    <scope line="1958"/>
                    <scope line="1961"/>
                    <declaration name="chkMinFlag" type="boolean" line="1964"/>
                    <scope line="1965"/>
                </scope>
                <scope line="1969"/>
                <scope line="1972">
                    <scope line="1973">
                        <scope line="1974">
                            <scope line="1975"/>
                            <scope line="1978"/>
                            <scope line="1981"/>
                        </scope>
                        <scope line="1985">
                            <declaration name="params" type="Object[]" line="1986"/>
                            <declaration name="signature" type="String[]" line="1989"/>
                            <scope line="1992"/>
                            <scope line="1995"/>
                            <scope line="1998"/>
                            <scope line="2001">
                                <declaration name="wrappedExc" type="Exception" line="2002"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>