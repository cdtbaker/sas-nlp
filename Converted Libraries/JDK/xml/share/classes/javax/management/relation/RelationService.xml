<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Date"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <class name="RelationService" line="57">
            <extends class="NotificationBroadcasterSupport"/>
            <comment line="76">
                                
            </comment>
            <comment line="77">
                Private members                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="80">
                Map associating:                
            </comment>
            <comment line="81">
                &lt;relation id&gt; -&gt; &lt;RelationSupport object/ObjectName&gt;                
            </comment>
            <comment line="82">
                depending if the relation has been created using createRelation()                
            </comment>
            <comment line="83">
                method (so internally handled) or is an MBean added as a relation by the                
            </comment>
            <comment line="84">
                user                
            </comment>
            <comment line="87">
                Map associating:                
            </comment>
            <comment line="88">
                &lt;relation id&gt; -&gt; &lt;relation type name&gt;                
            </comment>
            <comment line="91">
                Map associating:                
            </comment>
            <comment line="92">
                &lt;relation MBean Object Name&gt; -&gt; &lt;relation id&gt;                
            </comment>
            <comment line="96">
                Map associating:                
            </comment>
            <comment line="97">
                &lt;relation type name&gt; -&gt; &lt;RelationType object&gt;                
            </comment>
            <comment line="101">
                Map associating:                
            </comment>
            <comment line="102">
                &lt;relation type name&gt; -&gt; ArrayList of &lt;relation id&gt;                
            </comment>
            <comment line="103">
                to list all the relations of a given type                
            </comment>
            <comment line="107">
                Map associating:                
            </comment>
            <comment line="108">
                &lt;ObjectName&gt; -&gt; HashMap                
            </comment>
            <comment line="109">
                the value HashMap mapping:                
            </comment>
            <comment line="110">
                &lt;relation id&gt; -&gt; ArrayList of &lt;role name&gt;                
            </comment>
            <comment line="111">
                to track where a given MBean is referenced.                
            </comment>
            <comment line="116">
                Flag to indicate if, when a notification is received for the                
            </comment>
            <comment line="117">
                unregistration of an MBean referenced in a relation, if an immediate                
            </comment>
            <comment line="118">
                &quot;purge&quot; of the relations (look for the relations no                
            </comment>
            <comment line="119">
                longer valid) has to be performed , or if that will be performed only                
            </comment>
            <comment line="120">
                when the purgeRelations method will be explicitly called.                
            </comment>
            <comment line="121">
                true is immediate purge.                
            </comment>
            <comment line="124">
                Internal counter to provide sequence numbers for notifications sent by:                
            </comment>
            <comment line="125">
                - the Relation Service                
            </comment>
            <comment line="126">
                - a relation handled by the Relation Service                
            </comment>
            <comment line="129">
                ObjectName used to register the Relation Service in the MBean Server                
            </comment>
            <comment line="132">
                MBean Server where the Relation Service is registered                
            </comment>
            <comment line="135">
                Filter registered in the MBean Server with the Relation Service to be                
            </comment>
            <comment line="136">
                informed of referenced MBean unregistrations                
            </comment>
            <comment line="139">
                List of unregistration notifications received (storage used if purge                
            </comment>
            <comment line="140">
                of relations when unregistering a referenced MBean is not immediate but                
            </comment>
            <comment line="141">
                on user request)                
            </comment>
            <comment line="145">
                                
            </comment>
            <comment line="146">
                Constructor                
            </comment>
            <comment line="147">
                                
            </comment>
            <comment line="191">
                                
            </comment>
            <comment line="192">
                MBeanRegistration interface                
            </comment>
            <comment line="193">
                                
            </comment>
            <comment line="195">
                Pre-registration: retrieves its ObjectName and MBean Server                
            </comment>
            <comment line="196">
                                
            </comment>
            <comment line="197">
                No exception thrown.                
            </comment>
            <comment line="207">
                Post-registration: does nothing                
            </comment>
            <comment line="212">
                Pre-unregistration: does nothing                
            </comment>
            <comment line="218">
                Post-unregistration: does nothing                
            </comment>
            <comment line="223">
                                
            </comment>
            <comment line="224">
                Accessors                
            </comment>
            <comment line="225">
                                
            </comment>
            <comment line="261">
                                
            </comment>
            <comment line="262">
                Relation type handling                
            </comment>
            <comment line="263">
                                
            </comment>
            <comment line="513">
                                
            </comment>
            <comment line="514">
                Relation handling                
            </comment>
            <comment line="515">
                                
            </comment>
            <comment line="2405">
                                
            </comment>
            <comment line="2406">
                NotificationListener Interface                
            </comment>
            <comment line="2407">
                                
            </comment>
            <comment line="2490">
                                
            </comment>
            <comment line="2491">
                NotificationBroadcaster interface                
            </comment>
            <comment line="2492">
                                
            </comment>
            <comment line="2524">
                                
            </comment>
            <comment line="2525">
                Misc                
            </comment>
            <comment line="2526">
                                
            </comment>
            <comment line="2528">
                Adds given object as a relation type.                
            </comment>
            <comment line="2529">
                                
            </comment>
            <comment line="2530">
                -param relationTypeObj  relation type object                
            </comment>
            <comment line="2531">
                                
            </comment>
            <comment line="2532">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="2533">
                -exception InvalidRelationTypeException  if there is already a relation                
            </comment>
            <comment line="2534">
                type with that name                
            </comment>
            <comment line="2580">
                Retrieves relation type with given name                
            </comment>
            <comment line="2581">
                                
            </comment>
            <comment line="2582">
                -param relationTypeName  expected name of a relation type created in the                
            </comment>
            <comment line="2583">
                Relation Service                
            </comment>
            <comment line="2584">
                                
            </comment>
            <comment line="2585">
                -return RelationType object corresponding to given name                
            </comment>
            <comment line="2586">
                                
            </comment>
            <comment line="2587">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="2588">
                -exception RelationTypeNotFoundException  if no relation type for that                
            </comment>
            <comment line="2589">
                name created in Relation Service                
            </comment>
            <comment line="2590">
                                
            </comment>
            <comment line="2621">
                Retrieves relation corresponding to given relation id.                
            </comment>
            <comment line="2622">
                Returns either:                
            </comment>
            <comment line="2623">
                - a RelationSupport object if the relation is internal                
            </comment>
            <comment line="2624">
                or                
            </comment>
            <comment line="2625">
                - the ObjectName of the corresponding MBean                
            </comment>
            <comment line="2626">
                                
            </comment>
            <comment line="2627">
                -param relationId  expected relation id                
            </comment>
            <comment line="2628">
                                
            </comment>
            <comment line="2629">
                -return RelationSupport object or ObjectName of relation with given id                
            </comment>
            <comment line="2630">
                                
            </comment>
            <comment line="2631">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="2632">
                -exception RelationNotFoundException  if no relation for that                
            </comment>
            <comment line="2633">
                relation id created in Relation Service                
            </comment>
            <comment line="2634">
                                
            </comment>
            <comment line="2663">
                Adds a new MBean reference (reference to an ObjectName) in the                
            </comment>
            <comment line="2664">
                referenced MBean map (myRefedMBeanObjName2RelIdsMap).                
            </comment>
            <comment line="2665">
                                
            </comment>
            <comment line="2666">
                -param objectName  ObjectName of new referenced MBean                
            </comment>
            <comment line="2667">
                -param relationId  relation id of the relation where the MBean is                
            </comment>
            <comment line="2668">
                referenced                
            </comment>
            <comment line="2669">
                -param roleName  name of the role where the MBean is referenced                
            </comment>
            <comment line="2670">
                                
            </comment>
            <comment line="2671">
                -return boolean:                
            </comment>
            <comment line="2672">
                - true  if the MBean was not referenced before, so really a new                
            </comment>
            <comment line="2673">
                reference                
            </comment>
            <comment line="2674">
                - false else                
            </comment>
            <comment line="2675">
                                
            </comment>
            <comment line="2676">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="2749">
                Removes an obsolete MBean reference (reference to an ObjectName) in                
            </comment>
            <comment line="2750">
                the referenced MBean map (myRefedMBeanObjName2RelIdsMap).                
            </comment>
            <comment line="2751">
                                
            </comment>
            <comment line="2752">
                -param objectName  ObjectName of MBean no longer referenced                
            </comment>
            <comment line="2753">
                -param relationId  relation id of the relation where the MBean was                
            </comment>
            <comment line="2754">
                referenced                
            </comment>
            <comment line="2755">
                -param roleName  name of the role where the MBean was referenced                
            </comment>
            <comment line="2756">
                -param allRolesFlag  flag, if true removes reference to MBean for all                
            </comment>
            <comment line="2757">
                roles in the relation, not only for the one above                
            </comment>
            <comment line="2758">
                                
            </comment>
            <comment line="2759">
                -return boolean:                
            </comment>
            <comment line="2760">
                - true  if the MBean is no longer reference in any relation                
            </comment>
            <comment line="2761">
                - false else                
            </comment>
            <comment line="2762">
                                
            </comment>
            <comment line="2763">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="2834">
                Updates the listener registered to the MBean Server to be informed of                
            </comment>
            <comment line="2835">
                referenced MBean unregistrations                
            </comment>
            <comment line="2836">
                                
            </comment>
            <comment line="2837">
                -param newRefList  ArrayList of ObjectNames for new references done                
            </comment>
            <comment line="2838">
                to MBeans (can be null)                
            </comment>
            <comment line="2839">
                -param obsoleteRefList  ArrayList of ObjectNames for obsolete references                
            </comment>
            <comment line="2840">
                to MBeans (can be null)                
            </comment>
            <comment line="2841">
                                
            </comment>
            <comment line="2842">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="2843">
                Service is not registered in the MBean Server.                
            </comment>
            <comment line="2946">
                Adds a relation (being either a RelationSupport object or an MBean                
            </comment>
            <comment line="2947">
                referenced using its ObjectName) in the Relation Service.                
            </comment>
            <comment line="2948">
                Will send a notification RelationNotification with type:                
            </comment>
            <comment line="2949">
                - RelationNotification.RELATION_BASIC_CREATION for internal relation                
            </comment>
            <comment line="2950">
                creation                
            </comment>
            <comment line="2951">
                - RelationNotification.RELATION_MBEAN_CREATION for an MBean being added                
            </comment>
            <comment line="2952">
                as a relation.                
            </comment>
            <comment line="2953">
                                
            </comment>
            <comment line="2954">
                -param relationBaseFlag  flag true if the relation is a RelationSupport                
            </comment>
            <comment line="2955">
                object, false if it is an MBean                
            </comment>
            <comment line="2956">
                -param relationObj  RelationSupport object (if relation is internal)                
            </comment>
            <comment line="2957">
                -param relationObjName  ObjectName of the MBean to be added as a relation                
            </comment>
            <comment line="2958">
                (only for the relation MBean)                
            </comment>
            <comment line="2959">
                -param relationId  relation identifier, to uniquely identify the relation                
            </comment>
            <comment line="2960">
                inside the Relation Service                
            </comment>
            <comment line="2961">
                -param relationTypeName  name of the relation type (has to be created                
            </comment>
            <comment line="2962">
                in the Relation Service)                
            </comment>
            <comment line="2963">
                -param roleList  role list to initialize roles of the relation                
            </comment>
            <comment line="2964">
                (can be null)                
            </comment>
            <comment line="2965">
                                
            </comment>
            <comment line="2966">
                -exception IllegalArgumentException  if null paramater                
            </comment>
            <comment line="2967">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="2968">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="2969">
                -exception RoleNotFoundException  if a value is provided for a role                
            </comment>
            <comment line="2970">
                that does not exist in the relation type                
            </comment>
            <comment line="2971">
                -exception InvalidRelationIdException  if relation id already used                
            </comment>
            <comment line="2972">
                -exception RelationTypeNotFoundException  if relation type not known in                
            </comment>
            <comment line="2973">
                Relation Service                
            </comment>
            <comment line="2974">
                -exception InvalidRoleValueException if:                
            </comment>
            <comment line="2975">
                - the same role name is used for two different roles                
            </comment>
            <comment line="2976">
                - the number of referenced MBeans in given value is less than                
            </comment>
            <comment line="2977">
                expected minimum degree                
            </comment>
            <comment line="2978">
                - the number of referenced MBeans in provided value exceeds expected                
            </comment>
            <comment line="2979">
                maximum degree                
            </comment>
            <comment line="2980">
                - one referenced MBean in the value is not an Object of the MBean                
            </comment>
            <comment line="2981">
                class expected for that role                
            </comment>
            <comment line="2982">
                - an MBean provided for that role does not exist                
            </comment>
            <comment line="3154">
                Checks that given role conforms to given role info.                
            </comment>
            <comment line="3155">
                                
            </comment>
            <comment line="3156">
                -param chkType  type of check:                
            </comment>
            <comment line="3157">
                - 1: read, just check read access                
            </comment>
            <comment line="3158">
                - 2: write, check value and write access if writeChkFlag                
            </comment>
            <comment line="3159">
                -param roleName  role name                
            </comment>
            <comment line="3160">
                -param roleValue  role value                
            </comment>
            <comment line="3161">
                -param roleInfo  corresponding role info                
            </comment>
            <comment line="3162">
                -param writeChkFlag  boolean to specify a current write access and                
            </comment>
            <comment line="3163">
                to check it                
            </comment>
            <comment line="3164">
                                
            </comment>
            <comment line="3165">
                -return Integer with value:                
            </comment>
            <comment line="3166">
                - 0: ok                
            </comment>
            <comment line="3167">
                - RoleStatus.NO_ROLE_WITH_NAME                
            </comment>
            <comment line="3168">
                - RoleStatus.ROLE_NOT_READABLE                
            </comment>
            <comment line="3169">
                - RoleStatus.ROLE_NOT_WRITABLE                
            </comment>
            <comment line="3170">
                - RoleStatus.LESS_THAN_MIN_ROLE_DEGREE                
            </comment>
            <comment line="3171">
                - RoleStatus.MORE_THAN_MAX_ROLE_DEGREE                
            </comment>
            <comment line="3172">
                - RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS                
            </comment>
            <comment line="3173">
                - RoleStatus.REF_MBEAN_NOT_REGISTERED                
            </comment>
            <comment line="3174">
                                
            </comment>
            <comment line="3175">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="3286">
                Initializes roles associated to given role infos to default value (empty                
            </comment>
            <comment line="3287">
                ArrayList of ObjectNames) in given relation.                
            </comment>
            <comment line="3288">
                It will succeed for every role except if the role info has a minimum                
            </comment>
            <comment line="3289">
                cardinality greater than 0. In that case, an InvalidRoleValueException                
            </comment>
            <comment line="3290">
                will be raised.                
            </comment>
            <comment line="3291">
                                
            </comment>
            <comment line="3292">
                -param relationBaseFlag  flag true if the relation is a RelationSupport                
            </comment>
            <comment line="3293">
                object, false if it is an MBean                
            </comment>
            <comment line="3294">
                -param relationObj  RelationSupport object (if relation is internal)                
            </comment>
            <comment line="3295">
                -param relationObjName  ObjectName of the MBean to be added as a relation                
            </comment>
            <comment line="3296">
                (only for the relation MBean)                
            </comment>
            <comment line="3297">
                -param relationId  relation id                
            </comment>
            <comment line="3298">
                -param relationTypeName  name of the relation type (has to be created                
            </comment>
            <comment line="3299">
                in the Relation Service)                
            </comment>
            <comment line="3300">
                -param roleInfoList  list of role infos for roles to be defaulted                
            </comment>
            <comment line="3301">
                                
            </comment>
            <comment line="3302">
                -exception IllegalArgumentException  if null paramater                
            </comment>
            <comment line="3303">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="3304">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="3305">
                -exception InvalidRoleValueException  if role must have a non-empty                
            </comment>
            <comment line="3306">
                value                
            </comment>
            <comment line="3308">
                Revisit [cebro] Handle CIM qualifiers as REQUIRED to detect roles which                
            </comment>
            <comment line="3309">
                should have been initialized by the user                
            </comment>
            <comment line="3420">
                Throws an exception corresponding to a given problem type                
            </comment>
            <comment line="3421">
                                
            </comment>
            <comment line="3422">
                -param pbType  possible problem, defined in RoleUnresolved                
            </comment>
            <comment line="3423">
                -param roleName  role name                
            </comment>
            <comment line="3424">
                                
            </comment>
            <comment line="3425">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="3426">
                -exception RoleNotFoundException  for problems:                
            </comment>
            <comment line="3427">
                - NO_ROLE_WITH_NAME                
            </comment>
            <comment line="3428">
                - ROLE_NOT_READABLE                
            </comment>
            <comment line="3429">
                - ROLE_NOT_WRITABLE                
            </comment>
            <comment line="3430">
                -exception InvalidRoleValueException  for problems:                
            </comment>
            <comment line="3431">
                - LESS_THAN_MIN_ROLE_DEGREE                
            </comment>
            <comment line="3432">
                - MORE_THAN_MAX_ROLE_DEGREE                
            </comment>
            <comment line="3433">
                - REF_MBEAN_OF_INCORRECT_CLASS                
            </comment>
            <comment line="3434">
                - REF_MBEAN_NOT_REGISTERED                
            </comment>
            <comment line="3495">
                Sends a notification of given type, with given parameters                
            </comment>
            <comment line="3496">
                                
            </comment>
            <comment line="3497">
                -param intNtfType  integer to represent notification type:                
            </comment>
            <comment line="3498">
                - 1 : create                
            </comment>
            <comment line="3499">
                - 2 : update                
            </comment>
            <comment line="3500">
                - 3 : delete                
            </comment>
            <comment line="3501">
                -param message  human-readable message                
            </comment>
            <comment line="3502">
                -param relationId  relation id of the created/updated/deleted relation                
            </comment>
            <comment line="3503">
                -param unregMBeanList  list of ObjectNames of referenced MBeans                
            </comment>
            <comment line="3504">
                expected to be unregistered due to relation removal (only for removal,                
            </comment>
            <comment line="3505">
                due to CIM qualifiers, can be null)                
            </comment>
            <comment line="3506">
                -param roleName  role name                
            </comment>
            <comment line="3507">
                -param roleNewValue  role new value (ArrayList of ObjectNames)                
            </comment>
            <comment line="3508">
                -param oldValue  old role value (ArrayList of ObjectNames)                
            </comment>
            <comment line="3509">
                                
            </comment>
            <comment line="3510">
                -exception IllegalArgument  if null parameter                
            </comment>
            <comment line="3511">
                -exception RelationNotFoundException  if no relation for given id                
            </comment>
            <comment line="3626">
                Checks, for the unregistration of an MBean referenced in the roles given                
            </comment>
            <comment line="3627">
                in parameter, if the relation has to be removed or not, regarding                
            </comment>
            <comment line="3628">
                expected minimum role cardinality and current number of                
            </comment>
            <comment line="3629">
                references in each role after removal of the current one.                
            </comment>
            <comment line="3630">
                If the relation is kept, calls handleMBeanUnregistration() callback of                
            </comment>
            <comment line="3631">
                the relation to update it.                
            </comment>
            <comment line="3632">
                                
            </comment>
            <comment line="3633">
                -param relationId  relation id                
            </comment>
            <comment line="3634">
                -param objectName  ObjectName of the unregistered MBean                
            </comment>
            <comment line="3635">
                -param roleNameList  list of names of roles where the unregistered                
            </comment>
            <comment line="3636">
                MBean is referenced.                
            </comment>
            <comment line="3637">
                                
            </comment>
            <comment line="3638">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="3639">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="3640">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="3641">
                -exception RelationNotFoundException  if unknown relation id                
            </comment>
            <comment line="3642">
                -exception RoleNotFoundException  if one role given as parameter does                
            </comment>
            <comment line="3643">
                not exist in the relation                
            </comment>
            <implements interface="RelationServiceMBean"/>
            <implements interface="MBeanRegistration"/>
            <implements interface="NotificationListener"/>
            <javadoc line="57">
                The Relation Service is in charge of creating and deleting relation types
                  and relations, of handling the consistency and of providing query
                  mechanisms.
                  &lt;P&gt;It implements the NotificationBroadcaster by extending
                  NotificationBroadcasterSupport to send notifications when a relation is
                  removed from it.
                  &lt;P&gt;It implements the NotificationListener interface to be able to receive
                  notifications concerning unregistration of MBeans referenced in relation
                  roles and of relation MBeans.
                  &lt;P&gt;It implements the MBeanRegistration interface to be able to retrieve
                  its ObjectName and MBean Server.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="myRelId2ObjMap" type="Map&lt;String,Object&gt;" line="84"/>
            <declaration name="myRelId2RelTypeMap" type="Map&lt;String,String&gt;" line="88"/>
            <declaration name="myRelMBeanObjName2RelIdMap" type="Map&lt;ObjectName,String&gt;" line="92"/>
            <declaration name="myRelType2ObjMap" type="Map&lt;String,RelationType&gt;" line="97"/>
            <declaration name="myRelType2RelIdsMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="103"/>
            <declaration name="myRefedMBeanObjName2RelIdsMap" type="Map&lt;ObjectName,Map&lt;String,List&lt;String&gt;&gt;&gt;" line="111"/>
            <declaration name="myPurgeFlag" type="boolean" line="121"/>
            <declaration name="atomicSeqNo" type="AtomicLong" line="126"/>
            <declaration name="myObjName" type="ObjectName" line="129"/>
            <declaration name="myMBeanServer" type="MBeanServer" line="132"/>
            <declaration name="myUnregNtfFilter" type="MBeanServerNotificationFilter" line="136"/>
            <declaration name="myUnregNtfList" type="List&lt;MBeanServerNotification&gt;" line="141"/>
            <javadoc line="148">
                Constructor.                
                <param>
                    immediatePurgeFlag  flag to indicate when a notification is
                      received for the unregistration of an MBean referenced in a relation, if
                      an immediate "purge" of the relations (look for the relations no
                      longer valid) has to be performed , or if that will be performed only
                      when the purgeRelations method will be explicitly called.
                      <P>true is immediate purge.                    
                </param>
            </javadoc>
            <method name="RelationService" type="constructor" line="158">
                <params>
                    <param name="immediatePurgeFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="170">
                Checks if the Relation Service is active.
                  Current condition is that the Relation Service must be registered in the
                  MBean Server                
                <exception>
                    RelationServiceNotRegisteredException  if it is not
                      registered                    
                </exception>
            </javadoc>
            <method name="isActive" type="void" line="179">
                <comment line="181">
                    MBean Server not set by preRegister(): relation service not                    
                </comment>
                <comment line="182">
                    registered                    
                </comment>
                <scope line="180">
                    <declaration name="excMsg" type="String" line="183"/>
                </scope>
            </method>
            <method name="preRegister" type="ObjectName" line="199">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="postRegister" type="void" line="207">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <method name="preDeregister" type="void" line="213"/>
            <method name="postDeregister" type="void" line="218"/>
            <javadoc line="226">
                Returns the flag to indicate if when a notification is received for the
                  unregistration of an MBean referenced in a relation, if an immediate
                  &quot;purge&quot; of the relations (look for the relations no longer valid)
                  has to be performed , or if that will be performed only when the
                  purgeRelations method will be explicitly called.
                  &lt;P&gt;true is immediate purge.                
                <return>
                    true if purges are automatic.                    
                </return>
                <see>
                    #setPurgeFlag                    
                </see>
            </javadoc>
            <method name="getPurgeFlag" type="boolean" line="238"/>
            <javadoc line="242">
                Sets the flag to indicate if when a notification is received for the
                  unregistration of an MBean referenced in a relation, if an immediate
                  &quot;purge&quot; of the relations (look for the relations no longer valid)
                  has to be performed , or if that will be performed only when the
                  purgeRelations method will be explicitly called.
                  &lt;P&gt;true is immediate purge.                
                <param>
                    purgeFlag  flag                    
                </param>
                <see>
                    #getPurgeFlag                    
                </see>
            </javadoc>
            <method name="setPurgeFlag" type="void" line="254">
                <params>
                    <param name="purgeFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="264">
                Creates a relation type (a RelationTypeSupport object) with given
                  role infos (provided by the RoleInfo objects), and adds it in the
                  Relation Service.                
                <param>
                    relationTypeName  name of the relation type                    
                </param>
                <param>
                    roleInfoArray  array of role infos                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    InvalidRelationTypeException  If:
                      <P>- there is already a relation type with that name
                      <P>- the same name has been used for two different role infos
                      <P>- no role info provided
                      <P>- one null role info provided                    
                </exception>
            </javadoc>
            <method name="createRelationType" type="void" line="282">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <comment line="292">
                    Can throw an InvalidRelationTypeException                    
                </comment>
                <scope line="284">
                    <declaration name="excMsg" type="String" line="285"/>
                </scope>
                <declaration name="relType" type="RelationType" line="293"/>
            </method>
            <javadoc line="303">
                Adds given object as a relation type. The object is expected to
                  implement the RelationType interface.                
                <param>
                    relationTypeObj  relation type object (implementing the
                      RelationType interface)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter or if{@link RelationType#getRelationTypeNamerelationTypeObj.getRelationTypeName()} returns null.                    
                </exception>
                <exception>
                    InvalidRelationTypeException  if:
                      <P>- the same name has been used for two different roles
                      <P>- no role info provided
                      <P>- one null role info provided
                      <P>- there is already a relation type with that name                    
                </exception>
            </javadoc>
            <method name="addRelationType" type="void" line="321">
                <params>
                    <param name="relationTypeObj" type="RelationType"/>
                </params>
                <comment line="331">
                    Checks the role infos                    
                </comment>
                <comment line="344">
                    Can throw InvalidRelationTypeException                    
                </comment>
                <scope line="323">
                    <declaration name="excMsg" type="String" line="324"/>
                </scope>
                <declaration name="roleInfoList" type="List&lt;RoleInfo&gt;" line="332"/>
                <scope line="333">
                    <declaration name="excMsg" type="String" line="334"/>
                </scope>
                <declaration name="roleInfoArray" type="RoleInfo[]" line="338"/>
                <declaration name="i" type="int" line="339"/>
                <scope line="340"/>
            </method>
            <javadoc line="354">
                Retrieves names of all known relation types.                
                <return>
                    ArrayList of relation type names (Strings)                    
                </return>
            </javadoc>
            <method name="getAllRelationTypeNames" type="List<String>" line="359">
                <declaration name="result" type="ArrayList&lt;String&gt;" line="360"/>
                <scope line="361"/>
            </method>
            <javadoc line="367">
                Retrieves list of role infos (RoleInfo objects) of a given relation
                  type.                
                <param>
                    relationTypeName  name of relation type                    
                </param>
                <return>
                    ArrayList of RoleInfo.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if there is no relation type
                      with that name.                    
                </exception>
            </javadoc>
            <method name="getRoleInfos" type="List<RoleInfo>" line="381">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <comment line="391">
                    Can throw a RelationTypeNotFoundException                    
                </comment>
                <scope line="383">
                    <declaration name="excMsg" type="String" line="384"/>
                </scope>
                <declaration name="relType" type="RelationType" line="392"/>
            </method>
            <javadoc line="399">
                Retrieves role info for given role name of a given relation type.                
                <param>
                    relationTypeName  name of relation type                    
                </param>
                <param>
                    roleInfoName  name of role                    
                </param>
                <return>
                    RoleInfo object.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type is not
                      known in the Relation Service                    
                </exception>
                <exception>
                    RoleInfoNotFoundException  if the role is not part of the
                      relation type.                    
                </exception>
            </javadoc>
            <method name="getRoleInfo" type="RoleInfo" line="417">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoName" type="String"/>
                </params>
                <comment line="427">
                    Can throw a RelationTypeNotFoundException                    
                </comment>
                <comment line="430">
                    Can throw a RoleInfoNotFoundException                    
                </comment>
                <scope line="419">
                    <declaration name="excMsg" type="String" line="420"/>
                </scope>
                <declaration name="relType" type="RelationType" line="428"/>
                <declaration name="roleInfo" type="RoleInfo" line="431"/>
            </method>
            <javadoc line="438">
                Removes given relation type from Relation Service.
                  &lt;P&gt;The relation objects of that type will be removed from the
                  Relation Service.                
                <param>
                    relationTypeName  name of the relation type to be removed                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  If there is no relation type
                      with that name                    
                </exception>
            </javadoc>
            <method name="removeRelationType" type="void" line="454">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <comment line="456">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="467">
                    Checks if the relation type to be removed exists                    
                </comment>
                <comment line="468">
                    Can throw a RelationTypeNotFoundException                    
                </comment>
                <comment line="471">
                    Retrieves the relation ids for relations of that type                    
                </comment>
                <comment line="474">
                    Note: take a copy of the list as it is a part of a map that                    
                </comment>
                <comment line="475">
                    will be updated by removeRelation() below.                    
                </comment>
                <comment line="483">
                    Removes the relation type from all maps                    
                </comment>
                <comment line="491">
                    Removes all relations of that type                    
                </comment>
                <comment line="494">
                    Note: will remove it from myRelId2RelTypeMap :)                    
                </comment>
                <comment line="495">
                                        
                </comment>
                <comment line="496">
                    Can throw RelationServiceNotRegisteredException (detected                    
                </comment>
                <comment line="497">
                    above)                    
                </comment>
                <comment line="498">
                    Shall not throw a RelationNotFoundException                    
                </comment>
                <scope line="459">
                    <declaration name="excMsg" type="String" line="460"/>
                </scope>
                <declaration name="relType" type="RelationType" line="469"/>
                <declaration name="relIdList" type="List&lt;String&gt;" line="472"/>
                <scope line="473">
                    <declaration name="relIdList1" type="List&lt;String&gt;" line="476"/>
                    <scope line="478"/>
                </scope>
                <scope line="484"/>
                <scope line="487"/>
                <scope line="492">
                    <scope line="493">
                        <scope line="499"/>
                        <scope line="501"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="516">
                Creates a simple relation (represented by a RelationSupport object) of
                  given relation type, and adds it in the Relation Service.
                  &lt;P&gt;Roles are initialized according to the role list provided in
                  parameter. The ones not initialized in this way are set to an empty
                  ArrayList of ObjectNames.
                  &lt;P&gt;A RelationNotification, with type RELATION_BASIC_CREATION, is sent.                
                <param>
                    relationId  relation identifier, to identify uniquely the relation
                      inside the Relation Service                    
                </param>
                <param>
                    relationTypeName  name of the relation type (has to be created
                      in the Relation Service)                    
                </param>
                <param>
                    roleList  role list to initialize roles of the relation (can
                      be null).                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter, except the role
                      list which can be null if no role initialization                    
                </exception>
                <exception>
                    RoleNotFoundException  if a value is provided for a role
                      that does not exist in the relation type                    
                </exception>
                <exception>
                    InvalidRelationIdException  if relation id already used                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if relation type not known in
                      Relation Service                    
                </exception>
                <exception>
                    InvalidRoleValueException if:
                      <P>- the same role name is used for two different roles
                      <P>- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      <P>- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      <P>- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      <P>- an MBean provided for that role does not exist                    
                </exception>
            </javadoc>
            <method name="createRelation" type="void" line="558">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <comment line="560">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="573">
                    Creates RelationSupport object                    
                </comment>
                <comment line="574">
                    Can throw InvalidRoleValueException                    
                </comment>
                <comment line="580">
                    Adds relation object as a relation into the Relation Service                    
                </comment>
                <comment line="581">
                    Can throw RoleNotFoundException, InvalidRelationId,                    
                </comment>
                <comment line="582">
                    RelationTypeNotFoundException, InvalidRoleValueException                    
                </comment>
                <comment line="583">
                                        
                </comment>
                <comment line="584">
                    Cannot throw MBeanException                    
                </comment>
                <scope line="564">
                    <declaration name="excMsg" type="String" line="565"/>
                </scope>
                <declaration name="relObj" type="RelationSupport" line="575"/>
            </method>
            <javadoc line="596">
                Adds an MBean created by the user (and registered by him in the MBean
                  Server) as a relation in the Relation Service.
                  &lt;P&gt;To be added as a relation, the MBean must conform to the
                  following:
                  &lt;P&gt;- implement the Relation interface
                  &lt;P&gt;- have for RelationService ObjectName the ObjectName of current
                  Relation Service
                  &lt;P&gt;- have a relation id unique and unused in current Relation Service
                  &lt;P&gt;- have for relation type a relation type created in the Relation
                  Service
                  &lt;P&gt;- have roles conforming to the role info provided in the relation
                  type.                
                <param>
                    relationObjectName  ObjectName of the relation MBean to be added.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    NoSuchMethodException  If the MBean does not implement the
                      Relation interface                    
                </exception>
                <exception>
                    InvalidRelationIdException  if:
                      <P>- no relation identifier in MBean
                      <P>- the relation identifier is already used in the Relation Service                    
                </exception>
                <exception>
                    InstanceNotFoundException  if the MBean for given ObjectName
                      has not been registered                    
                </exception>
                <exception>
                    InvalidRelationServiceException  if:
                      <P>- no Relation Service name in MBean
                      <P>- the Relation Service name in the MBean is not the one of the
                      current Relation Service                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if:
                      <P>- no relation type name in MBean
                      <P>- the relation type name in MBean does not correspond to a relation
                      type created in the Relation Service                    
                </exception>
                <exception>
                    InvalidRoleValueException  if:
                      <P>- the number of referenced MBeans in a role is less than
                      expected minimum degree
                      <P>- the number of referenced MBeans in a role exceeds expected
                      maximum degree
                      <P>- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      <P>- an MBean provided for a role does not exist                    
                </exception>
                <exception>
                    RoleNotFoundException  if a value is provided for a role
                      that does not exist in the relation type                    
                </exception>
            </javadoc>
            <method name="addRelation" type="void" line="650">
                <params>
                    <param name="relationObjectName" type="ObjectName"/>
                </params>
                <comment line="660">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="663">
                    Checks that the relation MBean implements the Relation interface.                    
                </comment>
                <comment line="664">
                    It will also check that the provided ObjectName corresponds to a                    
                </comment>
                <comment line="665">
                    registered MBean (else will throw an InstanceNotFoundException)                    
                </comment>
                <comment line="670">
                    Checks there is a relation id in the relation MBean (its uniqueness                    
                </comment>
                <comment line="671">
                    is checked in addRelationInt())                    
                </comment>
                <comment line="672">
                    Can throw InstanceNotFoundException (but detected above)                    
                </comment>
                <comment line="673">
                    No MBeanException as no exception raised by this method, and no                    
                </comment>
                <comment line="674">
                    ReflectionException                    
                </comment>
                <comment line="693">
                    Checks that the Relation Service where the relation MBean is                    
                </comment>
                <comment line="694">
                    expected to be added is the current one                    
                </comment>
                <comment line="695">
                    Can throw InstanceNotFoundException (but detected above)                    
                </comment>
                <comment line="696">
                    No MBeanException as no exception raised by this method, no                    
                </comment>
                <comment line="697">
                    ReflectionException                    
                </comment>
                <comment line="724">
                    Checks that a relation type has been specified for the relation                    
                </comment>
                <comment line="725">
                    Can throw InstanceNotFoundException (but detected above)                    
                </comment>
                <comment line="726">
                    No MBeanException as no exception raised by this method, no                    
                </comment>
                <comment line="727">
                    ReflectionException                    
                </comment>
                <comment line="745">
                    Retrieves all roles without considering read mode                    
                </comment>
                <comment line="746">
                    Can throw InstanceNotFoundException (but detected above)                    
                </comment>
                <comment line="747">
                    No MBeanException as no exception raised by this method, no                    
                </comment>
                <comment line="748">
                    ReflectionException                    
                </comment>
                <comment line="762">
                    Can throw RoleNotFoundException, InvalidRelationIdException,                    
                </comment>
                <comment line="763">
                    RelationTypeNotFoundException, InvalidRoleValueException                    
                </comment>
                <comment line="770">
                    Adds relation MBean ObjectName in map                    
                </comment>
                <comment line="775">
                    Updates flag to specify that the relation is managed by the Relation                    
                </comment>
                <comment line="776">
                    Service                    
                </comment>
                <comment line="777">
                    This flag and setter are inherited from RelationSupport and not parts                    
                </comment>
                <comment line="778">
                    of the Relation interface, so may be not supported.                    
                </comment>
                <comment line="785">
                    OK : The flag is not supported.                    
                </comment>
                <comment line="788">
                    Updates listener information to received notification for                    
                </comment>
                <comment line="789">
                    unregistration of this MBean                    
                </comment>
                <scope line="652">
                    <declaration name="excMsg" type="String" line="653"/>
                </scope>
                <scope line="666">
                    <declaration name="excMsg" type="String" line="667"/>
                </scope>
                <declaration name="relId" type="String" line="675"/>
                <scope line="676"/>
                <scope line="680"/>
                <scope line="683"/>
                <scope line="685"/>
                <scope line="689">
                    <declaration name="excMsg" type="String" line="690"/>
                </scope>
                <declaration name="relServObjName" type="ObjectName" line="698"/>
                <scope line="699"/>
                <scope line="704"/>
                <scope line="707"/>
                <scope line="709"/>
                <declaration name="badRelServFlag" type="boolean" line="713"/>
                <scope line="714"/>
                <scope line="717"/>
                <scope line="720">
                    <declaration name="excMsg" type="String" line="721"/>
                </scope>
                <declaration name="relTypeName" type="String" line="728"/>
                <scope line="729"/>
                <scope line="733"/>
                <scope line="736"/>
                <scope line="738"/>
                <scope line="741">
                    <declaration name="excMsg" type="String" line="742"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="749"/>
                <scope line="750"/>
                <scope line="755"/>
                <scope line="758"/>
                <scope line="771"/>
                <scope line="779"/>
                <scope line="784"/>
                <declaration name="newRefList" type="List&lt;ObjectName&gt;" line="790"/>
            </method>
            <javadoc line="799">
                If the relation is represented by an MBean (created by the user and
                  added as a relation in the Relation Service), returns the ObjectName of
                  the MBean.                
                <param>
                    relationId  relation id identifying the relation                    
                </param>
                <return>
                    ObjectName of the corresponding relation MBean, or null if
                      the relation is not an MBean.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException there is no relation associated
                      to that id                    
                </exception>
            </javadoc>
            <method name="isRelationMBean" type="ObjectName" line="815">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="825">
                    Can throw RelationNotFoundException                    
                </comment>
                <scope line="817">
                    <declaration name="excMsg" type="String" line="818"/>
                </scope>
                <declaration name="result" type="Object" line="826"/>
                <scope line="827"/>
                <scope line="829"/>
            </method>
            <javadoc line="834">
                Returns the relation id associated to the given ObjectName if the
                  MBean has been added as a relation in the Relation Service.                
                <param>
                    objectName  ObjectName of supposed relation                    
                </param>
                <return>
                    relation id (String) or null (if the ObjectName is not a
                      relation handled by the Relation Service)                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="isRelation" type="String" line="846">
                <params>
                    <param name="objectName" type="ObjectName"/>
                </params>
                <scope line="848">
                    <declaration name="excMsg" type="String" line="849"/>
                </scope>
                <declaration name="result" type="String" line="856"/>
                <scope line="857">
                    <declaration name="relId" type="String" line="858"/>
                    <scope line="859"/>
                </scope>
            </method>
            <javadoc line="866">
                Checks if there is a relation identified in Relation Service with given
                  relation id.                
                <param>
                    relationId  relation id identifying the relation                    
                </param>
                <return>
                    boolean: true if there is a relation, false else                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="hasRelation" type="Boolean" line="877">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="888">
                    Can throw RelationNotFoundException                    
                </comment>
                <scope line="879">
                    <declaration name="excMsg" type="String" line="880"/>
                </scope>
                <scope line="887">
                    <declaration name="result" type="Object" line="889"/>
                </scope>
                <scope line="891"/>
            </method>
            <javadoc line="896">
                Returns all the relation ids for all the relations handled by the
                  Relation Service.                
                <return>
                    ArrayList of String                    
                </return>
            </javadoc>
            <method name="getAllRelationIds" type="List<String>" line="902">
                <declaration name="result" type="List&lt;String&gt;" line="903"/>
                <scope line="904"/>
            </method>
            <javadoc line="910">
                Checks if given Role can be read in a relation of the given type.                
                <param>
                    roleName  name of role to be checked                    
                </param>
                <param>
                    relationTypeName  name of the relation type                    
                </param>
                <return>
                    an Integer wrapping an integer corresponding to possible
                      problems represented as constants in RoleUnresolved:
                      <P>- 0 if role can be read
                      <P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
                      <P>- integer corresponding to RoleStatus.ROLE_NOT_READABLE                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type is not
                      known in the Relation Service                    
                </exception>
            </javadoc>
            <method name="checkRoleReading" type="Integer" line="929">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="relationTypeName" type="String"/>
                </params>
                <comment line="941">
                    Can throw a RelationTypeNotFoundException                    
                </comment>
                <comment line="945">
                    Can throw a RoleInfoNotFoundException to be transformed into                    
                </comment>
                <comment line="946">
                    returned value RoleStatus.NO_ROLE_WITH_NAME                    
                </comment>
                <scope line="931">
                    <declaration name="excMsg" type="String" line="932"/>
                </scope>
                <declaration name="result" type="Integer" line="939"/>
                <declaration name="relType" type="RelationType" line="942"/>
                <scope line="944">
                    <declaration name="roleInfo" type="RoleInfo" line="947"/>
                </scope>
                <scope line="955"/>
            </method>
            <javadoc line="964">
                Checks if given Role can be set in a relation of given type.                
                <param>
                    role  role to be checked                    
                </param>
                <param>
                    relationTypeName  name of relation type                    
                </param>
                <param>
                    initFlag  flag to specify that the checking is done for the
                      initialization of a role, write access shall not be verified.                    
                </param>
                <return>
                    an Integer wrapping an integer corresponding to possible
                      problems represented as constants in RoleUnresolved:
                      <P>- 0 if role can be set
                      <P>- integer corresponding to RoleStatus.NO_ROLE_WITH_NAME
                      <P>- integer for RoleStatus.ROLE_NOT_WRITABLE
                      <P>- integer for RoleStatus.LESS_THAN_MIN_ROLE_DEGREE
                      <P>- integer for RoleStatus.MORE_THAN_MAX_ROLE_DEGREE
                      <P>- integer for RoleStatus.REF_MBEAN_OF_INCORRECT_CLASS
                      <P>- integer for RoleStatus.REF_MBEAN_NOT_REGISTERED                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if unknown relation type                    
                </exception>
            </javadoc>
            <method name="checkRoleWriting" type="Integer" line="989">
                <params>
                    <param name="role" type="Role"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="initFlag" type="Boolean"/>
                </params>
                <comment line="1002">
                    Can throw a RelationTypeNotFoundException                    
                </comment>
                <scope line="993">
                    <declaration name="excMsg" type="String" line="994"/>
                </scope>
                <declaration name="relType" type="RelationType" line="1003"/>
                <declaration name="roleName" type="String" line="1005"/>
                <declaration name="roleValue" type="List&lt;ObjectName&gt;" line="1006"/>
                <declaration name="writeChkFlag" type="boolean" line="1007"/>
                <scope line="1008"/>
                <declaration name="roleInfo" type="RoleInfo" line="1012"/>
                <scope line="1013"/>
                <scope line="1015"/>
                <declaration name="result" type="Integer" line="1021"/>
            </method>
            <javadoc line="1032">
                Sends a notification (RelationNotification) for a relation creation.
                  The notification type is:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_CREATION if the relation is an
                  object internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_CREATION if the relation is a
                  MBean added as a relation.
                  &lt;P&gt;The source object is the Relation Service itself.
                  &lt;P&gt;It is called in Relation Service createRelation() and
                  addRelation() methods.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if there is no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="sendRelationCreationNotification" type="void" line="1051">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="1061">
                    Message                    
                </comment>
                <comment line="1065">
                    Can throw RelationNotFoundException                    
                </comment>
                <scope line="1053">
                    <declaration name="excMsg" type="String" line="1054"/>
                </scope>
                <declaration name="ntfMsg" type="StringBuilder" line="1062"/>
            </method>
            <javadoc line="1079">
                Sends a notification (RelationNotification) for a role update in the
                  given relation. The notification type is:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_UPDATE if the relation is an
                  object internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_UPDATE if the relation is a
                  MBean added as a relation.
                  &lt;P&gt;The source object is the Relation Service itself.
                  &lt;P&gt;It is called in relation MBean setRole() (for given role) and
                  setRoles() (for each role) methods (implementation provided in
                  RelationSupport class).
                  &lt;P&gt;It is also called in Relation Service setRole() (for given role) and
                  setRoles() (for each role) methods.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <param>
                    newRole  new role (name and new value)                    
                </param>
                <param>
                    oldValue  old role value (List of ObjectName objects)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if there is no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="sendRoleUpdateNotification" type="void" line="1105">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="newRole" type="Role"/>
                    <param name="oldValue" type="List<ObjectName>"/>
                </params>
                <comment line="1124">
                    Message                    
                </comment>
                <comment line="1134">
                    Can throw a RelationNotFoundException                    
                </comment>
                <scope line="1109">
                    <declaration name="excMsg" type="String" line="1110"/>
                </scope>
                <declaration name="roleName" type="String" line="1121"/>
                <declaration name="newRoleVal" type="List&lt;ObjectName&gt;" line="1122"/>
                <declaration name="newRoleValString" type="String" line="1125"/>
                <declaration name="oldRoleValString" type="String" line="1126"/>
                <declaration name="ntfMsg" type="StringBuilder" line="1127"/>
            </method>
            <javadoc line="1147">
                Sends a notification (RelationNotification) for a relation removal.
                  The notification type is:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_REMOVAL if the relation is an
                  object internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is a
                  MBean added as a relation.
                  &lt;P&gt;The source object is the Relation Service itself.
                  &lt;P&gt;It is called in Relation Service removeRelation() method.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <param>
                    unregMBeanList  List of ObjectNames of MBeans expected
                      to be unregistered due to relation removal (can be null)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if there is no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="sendRelationRemovalNotification" type="void" line="1168">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="unregMBeanList" type="List<ObjectName>"/>
                </params>
                <comment line="1179">
                    Can throw RelationNotFoundException                    
                </comment>
                <scope line="1170">
                    <declaration name="excMsg" type="String" line="1171"/>
                </scope>
            </method>
            <javadoc line="1194">
                Handles update of the Relation Service role map for the update of given
                  role in given relation.
                  &lt;P&gt;It is called in relation MBean setRole() (for given role) and
                  setRoles() (for each role) methods (implementation provided in
                  RelationSupport class).
                  &lt;P&gt;It is also called in Relation Service setRole() (for given role) and
                  setRoles() (for each role) methods.
                  &lt;P&gt;To allow the Relation Service to maintain the consistency (in case
                  of MBean unregistration) and to be able to perform queries, this method
                  must be called when a role is updated.                
                <param>
                    relationId  relation identifier of the updated relation                    
                </param>
                <param>
                    newRole  new role (name and new value)                    
                </param>
                <param>
                    oldValue  old role value (List of ObjectName objects)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given id.                    
                </exception>
            </javadoc>
            <method name="updateRoleMap" type="void" line="1220">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="newRole" type="Role"/>
                    <param name="oldValue" type="List<ObjectName>"/>
                </params>
                <comment line="1232">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1235">
                    Verifies the relation has been added in the Relation Service                    
                </comment>
                <comment line="1236">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="1241">
                    Note: no need to test if oldValue not null before cloning,                    
                </comment>
                <comment line="1242">
                    tested above.                    
                </comment>
                <comment line="1246">
                    List of ObjectNames of new referenced MBeans                    
                </comment>
                <comment line="1251">
                    Checks if this ObjectName was already present in old value                    
                </comment>
                <comment line="1252">
                    Note: use copy (oldRoleValue) instead of original                    
                </comment>
                <comment line="1253">
                    oldValue to speed up, as oldRoleValue is decreased                    
                </comment>
                <comment line="1254">
                    by removing unchanged references :)                    
                </comment>
                <comment line="1258">
                    New reference to an ObjectName                    
                </comment>
                <comment line="1260">
                    Stores this reference into map                    
                </comment>
                <comment line="1261">
                    Returns true if new reference, false if MBean already                    
                </comment>
                <comment line="1262">
                    referenced                    
                </comment>
                <comment line="1268">
                    Adds it into list of new reference                    
                </comment>
                <comment line="1273">
                    MBean was already referenced in old value                    
                </comment>
                <comment line="1275">
                    Removes it from old value (local list) to ignore it when                    
                </comment>
                <comment line="1276">
                    looking for remove MBean references                    
                </comment>
                <comment line="1281">
                    List of ObjectNames of MBeans no longer referenced                    
                </comment>
                <comment line="1284">
                    Each ObjectName remaining in oldRoleValue is an ObjectName no longer                    
                </comment>
                <comment line="1285">
                    referenced in new value                    
                </comment>
                <comment line="1287">
                    Removes MBean reference from map                    
                </comment>
                <comment line="1288">
                    Returns true if the MBean is no longer referenced in any                    
                </comment>
                <comment line="1289">
                    relation                    
                </comment>
                <comment line="1296">
                    Adds it into list of references to be removed                    
                </comment>
                <comment line="1301">
                    To avoid having one listener per ObjectName of referenced MBean,                    
                </comment>
                <comment line="1302">
                    and to increase performances, there is only one listener recording                    
                </comment>
                <comment line="1303">
                    all ObjectNames of interest                    
                </comment>
                <scope line="1224">
                    <declaration name="excMsg" type="String" line="1225"/>
                </scope>
                <declaration name="result" type="Object" line="1237"/>
                <declaration name="roleName" type="String" line="1239"/>
                <declaration name="newRoleValue" type="List&lt;ObjectName&gt;" line="1240"/>
                <declaration name="oldRoleValue" type="List&lt;ObjectName&gt;" line="1243"/>
                <declaration name="newRefList" type="List&lt;ObjectName&gt;" line="1247"/>
                <scope line="1249">
                    <declaration name="currObjNamePos" type="int" line="1255"/>
                    <scope line="1257">
                        <declaration name="isNewFlag" type="boolean" line="1263"/>
                        <scope line="1267"/>
                    </scope>
                    <scope line="1272"/>
                </scope>
                <declaration name="obsRefList" type="List&lt;ObjectName&gt;" line="1282"/>
                <scope line="1286">
                    <declaration name="noLongerRefFlag" type="boolean" line="1290"/>
                    <scope line="1295"/>
                </scope>
            </method>
            <javadoc line="1311">
                Removes given relation from the Relation Service.
                  &lt;P&gt;A RelationNotification notification is sent, its type being:
                  &lt;P&gt;- RelationNotification.RELATION_BASIC_REMOVAL if the relation was
                  only internal to the Relation Service
                  &lt;P&gt;- RelationNotification.RELATION_MBEAN_REMOVAL if the relation is
                  registered as an MBean.
                  &lt;P&gt;For MBeans referenced in such relation, nothing will be done,                
                <param>
                    relationId  relation id of the relation to be removed                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation corresponding to
                      given relation id                    
                </exception>
            </javadoc>
            <method name="removeRelation" type="void" line="1331">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="1333">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1344">
                    Checks there is a relation with this id                    
                </comment>
                <comment line="1345">
                    Can throw RelationNotFoundException                    
                </comment>
                <comment line="1348">
                    Removes it from listener filter                    
                </comment>
                <comment line="1352">
                    Can throw a RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1356">
                    Sends a notification                    
                </comment>
                <comment line="1357">
                    Note: has to be done FIRST as needs the relation to be still in the                    
                </comment>
                <comment line="1358">
                    Relation Service                    
                </comment>
                <comment line="1359">
                    No RelationNotFoundException as checked above                    
                </comment>
                <comment line="1361">
                    Revisit [cebro] Handle CIM &quot;Delete&quot; and &quot;IfDeleted&quot; qualifiers:                    
                </comment>
                <comment line="1362">
                    deleting the relation can mean to delete referenced MBeans. In                    
                </comment>
                <comment line="1363">
                    that case, MBeans to be unregistered are put in a list sent along                    
                </comment>
                <comment line="1364">
                    with the notification below                    
                </comment>
                <comment line="1366">
                    Can throw a RelationNotFoundException (but detected above)                    
                </comment>
                <comment line="1369">
                    Removes the relation from various internal maps                    
                </comment>
                <comment line="1371">
                    - MBean reference map                    
                </comment>
                <comment line="1372">
                    Retrieves the MBeans referenced in this relation                    
                </comment>
                <comment line="1373">
                    Note: here we cannot use removeMBeanReference() because it would                    
                </comment>
                <comment line="1374">
                    require to know the MBeans referenced in the relation. For                    
                </comment>
                <comment line="1375">
                    that it would be necessary to call &apos;getReferencedMBeans()&apos;                    
                </comment>
                <comment line="1376">
                    on the relation itself. Ok if it is an internal one, but if                    
                </comment>
                <comment line="1377">
                    it is an MBean, it is possible it is already unregistered, so                    
                </comment>
                <comment line="1378">
                    not available through the MBean Server.                    
                </comment>
                <comment line="1380">
                    List of MBeans no longer referenced in any relation, to be                    
                </comment>
                <comment line="1381">
                    removed fom the map                    
                </comment>
                <comment line="1389">
                    Retrieves relations where the MBean is referenced                    
                </comment>
                <comment line="1399">
                    MBean no longer referenced                    
                </comment>
                <comment line="1400">
                    Note: do not remove it here because pointed by the                    
                </comment>
                <comment line="1401">
                    iterator!                    
                </comment>
                <comment line="1406">
                    Cleans MBean reference map by removing MBeans no longer                    
                </comment>
                <comment line="1407">
                    referenced                    
                </comment>
                <comment line="1413">
                    - Relation id to object map                    
                </comment>
                <comment line="1419">
                    - ObjectName to relation id map                    
                </comment>
                <comment line="1425">
                    Relation id to relation type name map                    
                </comment>
                <comment line="1426">
                    First retrieves the relation type name                    
                </comment>
                <comment line="1432">
                    - Relation type name to relation id map                    
                </comment>
                <comment line="1436">
                    Can be null if called from removeRelationType()                    
                </comment>
                <comment line="1439">
                    No other relation of that type                    
                </comment>
                <scope line="1336">
                    <declaration name="excMsg" type="String" line="1337"/>
                </scope>
                <declaration name="result" type="Object" line="1346"/>
                <scope line="1349">
                    <declaration name="obsRefList" type="List&lt;ObjectName&gt;" line="1350"/>
                </scope>
                <declaration name="refMBeanList" type="List&lt;ObjectName&gt;" line="1379"/>
                <declaration name="nonRefObjNameList" type="List&lt;ObjectName&gt;" line="1382"/>
                <scope line="1384">
                    <scope line="1387">
                        <declaration name="relIdMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="1390"/>
                        <scope line="1393"/>
                        <scope line="1398"/>
                    </scope>
                    <scope line="1408"/>
                </scope>
                <scope line="1414"/>
                <scope line="1418">
                    <scope line="1420"/>
                </scope>
                <declaration name="relTypeName" type="String" line="1427"/>
                <scope line="1428"/>
                <scope line="1433">
                    <declaration name="relIdList" type="List&lt;String&gt;" line="1434"/>
                    <scope line="1435">
                        <scope line="1438"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1450">
                Purges the relations.
                  &lt;P&gt;Depending on the purgeFlag value, this method is either called
                  automatically when a notification is received for the unregistration of
                  an MBean referenced in a relation (if the flag is set to true), or not
                  (if the flag is set to false).
                  &lt;P&gt;In that case it is up to the user to call it to maintain the
                  consistency of the relations. To be kept in mind that if an MBean is
                  unregistered and the purge not done immediately, if the ObjectName is
                  reused and assigned to another MBean referenced in a relation, calling
                  manually this purgeRelations() method will cause trouble, as will
                  consider the ObjectName as corresponding to the unregistered MBean, not
                  seeing the new one.
                  &lt;P&gt;The behavior depends on the cardinality of the role where the
                  unregistered MBean is referenced:
                  &lt;P&gt;- if removing one MBean reference in the role makes its number of
                  references less than the minimum degree, the relation has to be removed.
                  &lt;P&gt;- if the remaining number of references after removing the MBean
                  reference is still in the cardinality range, keep the relation and
                  update it calling its handleMBeanUnregistration() callback.                
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server.                    
                </exception>
            </javadoc>
            <method name="purgeRelations" type="void" line="1477">
                <comment line="1482">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1485">
                    Revisit [cebro] Handle the CIM &quot;Delete&quot; and &quot;IfDeleted&quot; qualifier:                    
                </comment>
                <comment line="1486">
                    if the unregistered MBean has the &quot;IfDeleted&quot; qualifier,                    
                </comment>
                <comment line="1487">
                    possible that the relation itself or other referenced MBeans                    
                </comment>
                <comment line="1488">
                    have to be removed (then a notification would have to be sent                    
                </comment>
                <comment line="1489">
                    to inform that they should be unregistered.                    
                </comment>
                <comment line="1492">
                    Clones the list of notifications to be able to still receive new                    
                </comment>
                <comment line="1493">
                    notifications while proceeding those ones                    
                </comment>
                <comment line="1498">
                    Resets list                    
                </comment>
                <comment line="1503">
                    Updates the listener filter to avoid receiving notifications for                    
                </comment>
                <comment line="1504">
                    those MBeans again                    
                </comment>
                <comment line="1505">
                    Makes also a local &quot;myRefedMBeanObjName2RelIdsMap&quot; map, mapping                    
                </comment>
                <comment line="1506">
                    ObjectName -&gt; relId -&gt; roles, to remove the MBean from the global                    
                </comment>
                <comment line="1507">
                    map                    
                </comment>
                <comment line="1508">
                    List of references to be removed from the listener filter                    
                </comment>
                <comment line="1510">
                    Map including ObjectNames for unregistered MBeans, with                    
                </comment>
                <comment line="1511">
                    referencing relation ids and roles                    
                </comment>
                <comment line="1520">
                    Adds the unregsitered MBean in the list of references to                    
                </comment>
                <comment line="1521">
                    remove from the listener filter                    
                </comment>
                <comment line="1524">
                    Retrieves the associated map of relation ids and roles                    
                </comment>
                <comment line="1533">
                    Updates the listener                    
                </comment>
                <comment line="1534">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1541">
                    Retrieves the relations where the MBean is referenced                    
                </comment>
                <comment line="1545">
                    List of relation ids where the unregistered MBean is                    
                </comment>
                <comment line="1546">
                    referenced                    
                </comment>
                <comment line="1550">
                    List of roles of the relation where the MBean is                    
                </comment>
                <comment line="1551">
                    referenced                    
                </comment>
                <comment line="1554">
                    Checks if the relation has to be removed or not,                    
                </comment>
                <comment line="1555">
                    regarding expected minimum role cardinality and current                    
                </comment>
                <comment line="1556">
                    number of references after removal of the current one                    
                </comment>
                <comment line="1557">
                    If the relation is kept, calls                    
                </comment>
                <comment line="1558">
                    handleMBeanUnregistration() callback of the relation to                    
                </comment>
                <comment line="1559">
                    update it                    
                </comment>
                <comment line="1560">
                                        
                </comment>
                <comment line="1561">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1562">
                                        
                </comment>
                <comment line="1563">
                    Shall not throw RelationNotFoundException,                    
                </comment>
                <comment line="1564">
                    RoleNotFoundException, MBeanException                    
                </comment>
                <declaration name="localUnregNtfList" type="List&lt;MBeanServerNotification&gt;" line="1494"/>
                <scope line="1495"/>
                <declaration name="obsRefList" type="List&lt;ObjectName&gt;" line="1509"/>
                <declaration name="localMBean2RelIdMap" type="Map&lt;ObjectName,Map&lt;String,List&lt;String&gt;&gt;&gt;" line="1512"/>
                <scope line="1515">
                    <scope line="1516">
                        <declaration name="unregMBeanName" type="ObjectName" line="1518"/>
                        <declaration name="relIdMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="1525"/>
                    </scope>
                </scope>
                <scope line="1537">
                    <declaration name="unregMBeanName" type="ObjectName" line="1539"/>
                    <declaration name="localRelIdMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="1542"/>
                    <scope line="1548">
                        <declaration name="currRelId" type="String" line="1549"/>
                        <declaration name="localRoleNameList" type="List&lt;String&gt;" line="1552"/>
                        <scope line="1565"/>
                        <scope line="1569"/>
                        <scope line="1571"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1582">
                Retrieves the relations where a given MBean is referenced.
                  &lt;P&gt;This corresponds to the CIM &quot;References&quot; and &quot;ReferenceNames&quot;
                  operations.                
                <param>
                    mbeanName  ObjectName of MBean                    
                </param>
                <param>
                    relationTypeName  can be null; if specified, only the relations
                      of that type will be considered in the search. Else all relation types
                      are considered.                    
                </param>
                <param>
                    roleName  can be null; if specified, only the relations
                      where the MBean is referenced in that role will be returned. Else all
                      roles are considered.                    
                </param>
                <return>
                    an HashMap, where the keys are the relation ids of the relations
                      where the MBean is referenced, and the value is, for each key,
                      an ArrayList of role names (as an MBean can be referenced in several
                      roles in the same relation).                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="findReferencingRelations" type="Map<String,List<String>>" line="1606">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="1621">
                    Retrieves the relations referencing the MBean                    
                </comment>
                <comment line="1627">
                    Relation Ids where the MBean is referenced                    
                </comment>
                <comment line="1630">
                    List of relation ids of interest regarding the selected                    
                </comment>
                <comment line="1631">
                    relation type                    
                </comment>
                <comment line="1634">
                    Considers all relations                    
                </comment>
                <comment line="1641">
                    Considers only the relation ids for relations of given                    
                </comment>
                <comment line="1642">
                    type                    
                </comment>
                <comment line="1645">
                    Retrieves its relation type                    
                </comment>
                <comment line="1660">
                    Now looks at the roles where the MBean is expected to be                    
                </comment>
                <comment line="1661">
                    referenced                    
                </comment>
                <comment line="1664">
                    Retrieves list of role names where the MBean is                    
                </comment>
                <comment line="1665">
                    referenced                    
                </comment>
                <comment line="1670">
                    All roles to be considered                    
                </comment>
                <comment line="1671">
                    Note: no need to test if list not null before                    
                </comment>
                <comment line="1672">
                    cloning, MUST be not null else bug :(                    
                </comment>
                <comment line="1677">
                    Filters only the relations where the MBean is                    
                </comment>
                <comment line="1678">
                    referenced in // given role                    
                </comment>
                <scope line="1608">
                    <declaration name="excMsg" type="String" line="1609"/>
                </scope>
                <declaration name="result" type="Map&lt;String,List&lt;String&gt;&gt;" line="1617"/>
                <scope line="1619">
                    <declaration name="relId2RoleNamesMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="1622"/>
                    <scope line="1625">
                        <declaration name="allRelIdSet" type="Set&lt;String&gt;" line="1628"/>
                        <declaration name="relIdList" type="List&lt;String&gt;" line="1632"/>
                        <scope line="1633"/>
                        <scope line="1637">
                            <scope line="1643">
                                <declaration name="currRelTypeName" type="String" line="1646"/>
                                <scope line="1647"/>
                                <scope line="1652"/>
                            </scope>
                        </scope>
                        <scope line="1663">
                            <declaration name="currRoleNameList" type="List&lt;String&gt;" line="1666"/>
                            <scope line="1669"/>
                            <scope line="1676">
                                <declaration name="dummyList" type="List&lt;String&gt;" line="1679"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1692">
                Retrieves the MBeans associated to given one in a relation.
                  &lt;P&gt;This corresponds to CIM Associators and AssociatorNames operations.                
                <param>
                    mbeanName  ObjectName of MBean                    
                </param>
                <param>
                    relationTypeName  can be null; if specified, only the relations
                      of that type will be considered in the search. Else all
                      relation types are considered.                    
                </param>
                <param>
                    roleName  can be null; if specified, only the relations
                      where the MBean is referenced in that role will be considered. Else all
                      roles are considered.                    
                </param>
                <return>
                    an HashMap, where the keys are the ObjectNames of the MBeans
                      associated to given MBean, and the value is, for each key, an ArrayList
                      of the relation ids of the relations where the key MBean is
                      associated to given one (as they can be associated in several different
                      relations).                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="findAssociatedMBeans" type="Map<ObjectName,List<String>>" line="1716">
                <params>
                    <param name="mbeanName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="1727">
                    Retrieves the map &lt;relation id&gt; -&gt; &lt;role names&gt; for those                    
                </comment>
                <comment line="1728">
                    criterias                    
                </comment>
                <comment line="1739">
                    Retrieves ObjectNames of MBeans referenced in this relation                    
                </comment>
                <comment line="1740">
                                        
                </comment>
                <comment line="1741">
                    Shall not throw a RelationNotFoundException if incorrect status                    
                </comment>
                <comment line="1742">
                    of maps :(                    
                </comment>
                <comment line="1750">
                    For each MBean associated to given one in a relation, adds the                    
                </comment>
                <comment line="1751">
                    association &lt;ObjectName&gt; -&gt; &lt;relation id&gt; into result map                    
                </comment>
                <comment line="1756">
                    Sees if this MBean is already associated to the given                    
                </comment>
                <comment line="1757">
                    one in another relation                    
                </comment>
                <scope line="1718">
                    <declaration name="excMsg" type="String" line="1719"/>
                </scope>
                <declaration name="relId2RoleNamesMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="1729"/>
                <declaration name="result" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="1734"/>
                <scope line="1737">
                    <declaration name="objName2RoleNamesMap" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="1743"/>
                    <scope line="1744"/>
                    <scope line="1746"/>
                    <scope line="1752">
                        <scope line="1754">
                            <declaration name="currRelIdList" type="List&lt;String&gt;" line="1758"/>
                            <scope line="1759"/>
                            <scope line="1765"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1777">
                Returns the relation ids for relations of the given type.                
                <param>
                    relationTypeName  relation type name                    
                </param>
                <return>
                    an ArrayList of relation ids.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if there is no relation type
                      with that name.                    
                </exception>
            </javadoc>
            <method name="findRelationsOfType" type="List<String>" line="1790">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <comment line="1800">
                    Can throw RelationTypeNotFoundException                    
                </comment>
                <scope line="1792">
                    <declaration name="excMsg" type="String" line="1793"/>
                </scope>
                <declaration name="relType" type="RelationType" line="1801"/>
                <declaration name="result" type="List&lt;String&gt;" line="1803"/>
                <scope line="1804">
                    <declaration name="result1" type="List&lt;String&gt;" line="1805"/>
                </scope>
            </method>
            <javadoc line="1817">
                Retrieves role value for given role name in given relation.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the ArrayList of ObjectName objects being the role value                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <exception>
                    RoleNotFoundException  if:
                      <P>- there is no role with given name
                      <P>or
                      <P>- the role is not readable.                    
                </exception>
                <see>
                    #setRole                    
                </see>
            </javadoc>
            <method name="getRole" type="List<ObjectName>" line="1841">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="1851">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1854">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="1860">
                    Internal relation                    
                </comment>
                <comment line="1861">
                    Can throw RoleNotFoundException                    
                </comment>
                <comment line="1869">
                    Relation MBean                    
                </comment>
                <comment line="1874">
                    Can throw MBeanException wrapping a RoleNotFoundException:                    
                </comment>
                <comment line="1875">
                    throw wrapped exception                    
                </comment>
                <comment line="1876">
                                        
                </comment>
                <comment line="1877">
                    Shall not throw InstanceNotFoundException or ReflectionException                    
                </comment>
                <scope line="1843">
                    <declaration name="excMsg" type="String" line="1844"/>
                </scope>
                <declaration name="relObj" type="Object" line="1855"/>
                <declaration name="result" type="List&lt;ObjectName&gt;" line="1857"/>
                <scope line="1859"/>
                <scope line="1868">
                    <declaration name="params" type="Object[]" line="1870"/>
                    <declaration name="signature" type="String[]" line="1872"/>
                    <scope line="1878">
                        <declaration name="invokeResult" type="List&lt;ObjectName&gt;" line="1879"/>
                    </scope>
                    <scope line="1888"/>
                    <scope line="1890"/>
                    <scope line="1892">
                        <declaration name="wrappedExc" type="Exception" line="1893"/>
                        <scope line="1894"/>
                        <scope line="1896"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1906">
                Retrieves values of roles with given names in given relation.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleNameArray  array of names of roles to be retrieved                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      retrieved).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <see>
                    #setRoles                    
                </see>
            </javadoc>
            <method name="getRoles" type="RoleResult" line="1927">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleNameArray" type="String[]"/>
                </params>
                <comment line="1937">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="1940">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="1946">
                    Internal relation                    
                </comment>
                <comment line="1951">
                    Relation MBean                    
                </comment>
                <comment line="1958">
                    OK : This is an array of java.lang.String                    
                </comment>
                <comment line="1959">
                    so this should never happen...                    
                </comment>
                <comment line="1961">
                    Shall not throw InstanceNotFoundException, ReflectionException                    
                </comment>
                <comment line="1962">
                    or MBeanException                    
                </comment>
                <scope line="1929">
                    <declaration name="excMsg" type="String" line="1930"/>
                </scope>
                <declaration name="relObj" type="Object" line="1941"/>
                <declaration name="result" type="RoleResult" line="1943"/>
                <scope line="1945"/>
                <scope line="1950">
                    <declaration name="params" type="Object[]" line="1952"/>
                    <declaration name="signature" type="String[]" line="1954"/>
                    <scope line="1955"/>
                    <scope line="1957"/>
                    <scope line="1963"/>
                    <scope line="1969"/>
                    <scope line="1971"/>
                    <scope line="1973"/>
                </scope>
            </method>
            <javadoc line="1983">
                Returns all roles present in the relation.                
                <param>
                    relationId  relation id                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      readable).                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given id                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
            </javadoc>
            <method name="getAllRoles" type="RoleResult" line="2000">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="2010">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="2016">
                    Internal relation                    
                </comment>
                <comment line="2020">
                    Relation MBean                    
                </comment>
                <comment line="2021">
                    Shall not throw any Exception                    
                </comment>
                <scope line="2002">
                    <declaration name="excMsg" type="String" line="2003"/>
                </scope>
                <declaration name="relObj" type="Object" line="2011"/>
                <declaration name="result" type="RoleResult" line="2013"/>
                <scope line="2015"/>
                <scope line="2019">
                    <scope line="2022"/>
                    <scope line="2026"/>
                </scope>
            </method>
            <javadoc line="2035">
                Retrieves the number of MBeans currently referenced in the given role.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the number of currently referenced MBeans in that role                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with given name                    
                </exception>
            </javadoc>
            <method name="getRoleCardinality" type="Integer" line="2051">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="2061">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="2067">
                    Internal relation                    
                </comment>
                <comment line="2068">
                    Can throw RoleNotFoundException                    
                </comment>
                <comment line="2072">
                    Relation MBean                    
                </comment>
                <comment line="2077">
                    Can throw MBeanException wrapping RoleNotFoundException:                    
                </comment>
                <comment line="2078">
                    throw wrapped exception                    
                </comment>
                <comment line="2079">
                                        
                </comment>
                <comment line="2080">
                    Shall not throw InstanceNotFoundException or ReflectionException                    
                </comment>
                <scope line="2053">
                    <declaration name="excMsg" type="String" line="2054"/>
                </scope>
                <declaration name="relObj" type="Object" line="2062"/>
                <declaration name="result" type="Integer" line="2064"/>
                <scope line="2066"/>
                <scope line="2071">
                    <declaration name="params" type="Object[]" line="2073"/>
                    <declaration name="signature" type="String[]" line="2075"/>
                    <scope line="2081"/>
                    <scope line="2087"/>
                    <scope line="2089"/>
                    <scope line="2091">
                        <declaration name="wrappedExc" type="Exception" line="2092"/>
                        <scope line="2093"/>
                        <scope line="2095"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2106">
                Sets the given role in given relation.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;The Relation Service will keep track of the change to keep the
                  consistency of relations by handling referenced MBean unregistrations.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    role  role to be set (name and new value)                    
                </param>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <exception>
                    RoleNotFoundException  if the role does not exist or is not
                      writable                    
                </exception>
                <exception>
                    InvalidRoleValueException  if value provided for role is not
                      valid:
                      <P>- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      <P>or
                      <P>- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      <P>or
                      <P>- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      <P>or
                      <P>- an MBean provided for that role does not exist                    
                </exception>
                <see>
                    #getRole                    
                </see>
            </javadoc>
            <method name="setRole" type="void" line="2143">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="role" type="Role"/>
                </params>
                <comment line="2153">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2156">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="2160">
                    Internal relation                    
                </comment>
                <comment line="2161">
                    Can throw RoleNotFoundException,                    
                </comment>
                <comment line="2162">
                    InvalidRoleValueException and                    
                </comment>
                <comment line="2163">
                    RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2164">
                                        
                </comment>
                <comment line="2165">
                    Shall not throw RelationTypeNotFoundException                    
                </comment>
                <comment line="2166">
                    (as relation exists in the RS, its relation type is known)                    
                </comment>
                <comment line="2178">
                    Relation MBean                    
                </comment>
                <comment line="2183">
                    Can throw MBeanException wrapping RoleNotFoundException,                    
                </comment>
                <comment line="2184">
                    InvalidRoleValueException                    
                </comment>
                <comment line="2185">
                                        
                </comment>
                <comment line="2186">
                    Shall not MBeanException wrapping an MBeanException wrapping                    
                </comment>
                <comment line="2187">
                    RelationTypeNotFoundException, or ReflectionException, or                    
                </comment>
                <comment line="2188">
                    InstanceNotFoundException                    
                </comment>
                <scope line="2145">
                    <declaration name="excMsg" type="String" line="2146"/>
                </scope>
                <declaration name="relObj" type="Object" line="2157"/>
                <scope line="2159">
                    <scope line="2167"/>
                    <scope line="2173"/>
                </scope>
                <scope line="2177">
                    <declaration name="params" type="Object[]" line="2179"/>
                    <declaration name="signature" type="String[]" line="2181"/>
                    <scope line="2189"/>
                    <scope line="2193"/>
                    <scope line="2195"/>
                    <scope line="2197">
                        <declaration name="wrappedExc" type="Exception" line="2198"/>
                        <scope line="2199"/>
                        <scope line="2201"/>
                        <scope line="2203"/>
                    </scope>
                    <scope line="2207"/>
                    <scope line="2209"/>
                </scope>
            </method>
            <javadoc line="2218">
                Sets the given roles in given relation.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;The Relation Service keeps track of the changes to keep the
                  consistency of relations by handling referenced MBean unregistrations.                
                <param>
                    relationId  relation id                    
                </param>
                <param>
                    roleList  list of roles to be set                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully set) and a RoleUnresolvedList (for roles not
                      set).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation with given id                    
                </exception>
                <see>
                    #getRoles                    
                </see>
            </javadoc>
            <method name="setRoles" type="RoleResult" line="2243">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <comment line="2253">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2256">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="2262">
                    Internal relation                    
                </comment>
                <comment line="2263">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2264">
                                        
                </comment>
                <comment line="2265">
                    Shall not throw RelationTypeNotFoundException (as relation is                    
                </comment>
                <comment line="2266">
                    known, its relation type exists)                    
                </comment>
                <comment line="2276">
                    Relation MBean                    
                </comment>
                <comment line="2281">
                    Shall not throw InstanceNotFoundException or an MBeanException                    
                </comment>
                <comment line="2282">
                    or ReflectionException                    
                </comment>
                <scope line="2245">
                    <declaration name="excMsg" type="String" line="2246"/>
                </scope>
                <declaration name="relObj" type="Object" line="2257"/>
                <declaration name="result" type="RoleResult" line="2259"/>
                <scope line="2261">
                    <scope line="2267"/>
                    <scope line="2271"/>
                </scope>
                <scope line="2275">
                    <declaration name="params" type="Object[]" line="2277"/>
                    <declaration name="signature" type="String[]" line="2279"/>
                    <scope line="2283"/>
                    <scope line="2289"/>
                    <scope line="2291"/>
                    <scope line="2293"/>
                </scope>
            </method>
            <javadoc line="2303">
                Retrieves MBeans referenced in the various roles of the relation.                
                <param>
                    relationId  relation id                    
                </param>
                <return>
                    a HashMap mapping:
                      <P> ObjectName -> ArrayList of String (role
                      names)                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="getReferencedMBeans" type="Map<ObjectName,List<String>>" line="2319">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="2329">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="2335">
                    Internal relation                    
                </comment>
                <comment line="2339">
                    Relation MBean                    
                </comment>
                <comment line="2340">
                    No Exception                    
                </comment>
                <scope line="2321">
                    <declaration name="excMsg" type="String" line="2322"/>
                </scope>
                <declaration name="relObj" type="Object" line="2330"/>
                <declaration name="result" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="2332"/>
                <scope line="2334"/>
                <scope line="2338">
                    <scope line="2341"/>
                    <scope line="2345"/>
                </scope>
            </method>
            <javadoc line="2355">
                Returns name of associated relation type for given relation.                
                <param>
                    relationId  relation id                    
                </param>
                <return>
                    the name of the associated relation type.                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RelationNotFoundException  if no relation for given
                      relation id                    
                </exception>
            </javadoc>
            <method name="getRelationTypeName" type="String" line="2368">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="2378">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="2384">
                    Internal relation                    
                </comment>
                <comment line="2388">
                    Relation MBean                    
                </comment>
                <comment line="2389">
                    No Exception                    
                </comment>
                <scope line="2370">
                    <declaration name="excMsg" type="String" line="2371"/>
                </scope>
                <declaration name="relObj" type="Object" line="2379"/>
                <declaration name="result" type="String" line="2381"/>
                <scope line="2383"/>
                <scope line="2387">
                    <scope line="2390"/>
                    <scope line="2394"/>
                </scope>
            </method>
            <javadoc line="2408">
                Invoked when a JMX notification occurs.
                  Currently handles notifications for unregistration of MBeans, either
                  referenced in a relation role or being a relation itself.                
                <param>
                    notif  The notification.                    
                </param>
                <param>
                    handback  An opaque object which helps the listener to
                      associate information regarding the MBean emitter (can be null).                    
                </param>
            </javadoc>
            <method name="handleNotification" type="void" line="2418">
                <params>
                    <param name="notif" type="Notification"/>
                    <param name="handback" type="Object"/>
                </params>
                <comment line="2438">
                    Note: use a flag to block access to                    
                </comment>
                <comment line="2439">
                    myRefedMBeanObjName2RelIdsMap only for a quick access                    
                </comment>
                <comment line="2444">
                    Unregistration of a referenced MBean                    
                </comment>
                <comment line="2451">
                    Immediate purge                    
                </comment>
                <comment line="2452">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2453">
                    but assume that will be fine :)                    
                </comment>
                <comment line="2462">
                    Note: do both tests as a relation can be an MBean and be                    
                </comment>
                <comment line="2463">
                    itself referenced in another relation :)                    
                </comment>
                <comment line="2469">
                    Unregistration of a relation MBean                    
                </comment>
                <comment line="2470">
                    Can throw RelationTypeNotFoundException,                    
                </comment>
                <comment line="2471">
                    RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2472">
                                        
                </comment>
                <comment line="2473">
                    Shall not throw RelationTypeNotFoundException or                    
                </comment>
                <comment line="2474">
                    InstanceNotFoundException                    
                </comment>
                <scope line="2420">
                    <declaration name="excMsg" type="String" line="2421"/>
                </scope>
                <scope line="2428">
                    <declaration name="mbsNtf" type="MBeanServerNotification" line="2430"/>
                    <declaration name="ntfType" type="String" line="2431"/>
                    <scope line="2434">
                        <declaration name="mbeanName" type="ObjectName" line="2435"/>
                        <declaration name="isRefedMBeanFlag" type="boolean" line="2440"/>
                        <scope line="2441">
                            <scope line="2443">
                                <scope line="2445"/>
                            </scope>
                            <scope line="2450">
                                <scope line="2454"/>
                                <scope line="2456"/>
                            </scope>
                        </scope>
                        <declaration name="relId" type="String" line="2464"/>
                        <scope line="2465"/>
                        <scope line="2468">
                            <scope line="2475"/>
                            <scope line="2477"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2493">
                Returns a NotificationInfo object containing the name of the Java class
                  of the notification and the notification types sent.                
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="2497">
                <declaration name="ntfClass" type="String" line="2502"/>
                <declaration name="ntfTypes" type="String[]" line="2504"/>
                <declaration name="ntfDesc" type="String" line="2513"/>
                <declaration name="ntfInfo" type="MBeanNotificationInfo" line="2515"/>
            </method>
            <method name="addRelationTypeInt" type="void" line="2536">
                <params>
                    <param name="relationTypeObj" type="RelationType"/>
                </params>
                <comment line="2548">
                    Checks that there is not already a relation type with that name                    
                </comment>
                <comment line="2549">
                    existing in the Relation Service                    
                </comment>
                <comment line="2551">
                    Can throw a RelationTypeNotFoundException (in fact should ;)                    
                </comment>
                <comment line="2562">
                    OK : The RelationType could not be found.                    
                </comment>
                <comment line="2565">
                    Adds the relation type                    
                </comment>
                <scope line="2538">
                    <declaration name="excMsg" type="String" line="2539"/>
                </scope>
                <declaration name="relTypeName" type="String" line="2546"/>
                <scope line="2550">
                    <declaration name="relType" type="RelationType" line="2552"/>
                    <scope line="2554">
                        <declaration name="excMsg" type="String" line="2555"/>
                        <declaration name="excMsgStrB" type="StringBuilder" line="2556"/>
                    </scope>
                </scope>
                <scope line="2561"/>
                <scope line="2566"/>
                <scope line="2570"/>
            </method>
            <method name="getRelationType" type="RelationType" line="2592">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <comment line="2602">
                    No null relation type accepted, so can use get()                    
                </comment>
                <scope line="2594">
                    <declaration name="excMsg" type="String" line="2595"/>
                </scope>
                <declaration name="relType" type="RelationType" line="2603"/>
                <scope line="2604"/>
                <scope line="2608">
                    <declaration name="excMsg" type="String" line="2609"/>
                    <declaration name="excMsgStrB" type="StringBuilder" line="2610"/>
                </scope>
            </method>
            <method name="getRelation" type="Object" line="2636">
                <params>
                    <param name="relationId" type="String"/>
                </params>
                <comment line="2646">
                    No null relation  accepted, so can use get()                    
                </comment>
                <scope line="2638">
                    <declaration name="excMsg" type="String" line="2639"/>
                </scope>
                <declaration name="rel" type="Object" line="2647"/>
                <scope line="2648"/>
                <scope line="2652">
                    <declaration name="excMsg" type="String" line="2653"/>
                </scope>
            </method>
            <method name="addNewMBeanReference" type="boolean" line="2679">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="2696">
                    Checks if the MBean was already referenced                    
                </comment>
                <comment line="2697">
                    No null value allowed, use get() directly                    
                </comment>
                <comment line="2702">
                    MBean not referenced in any relation yet                    
                </comment>
                <comment line="2706">
                    List of roles where the MBean is referenced in given                    
                </comment>
                <comment line="2707">
                    relation                    
                </comment>
                <comment line="2711">
                    Map of relations where the MBean is referenced                    
                </comment>
                <comment line="2718">
                    MBean already referenced in at least another relation                    
                </comment>
                <comment line="2719">
                    Checks if already referenced in another role in current                    
                </comment>
                <comment line="2720">
                    relation                    
                </comment>
                <comment line="2724">
                    MBean not referenced in current relation                    
                </comment>
                <comment line="2726">
                    List of roles where the MBean is referenced in given                    
                </comment>
                <comment line="2727">
                    relation                    
                </comment>
                <comment line="2731">
                    Adds new reference done in current relation                    
                </comment>
                <comment line="2735">
                    MBean already referenced in current relation in another                    
                </comment>
                <comment line="2736">
                    role                    
                </comment>
                <comment line="2737">
                    Adds new reference done                    
                </comment>
                <scope line="2683">
                    <declaration name="excMsg" type="String" line="2684"/>
                </scope>
                <declaration name="isNewFlag" type="boolean" line="2692"/>
                <scope line="2694">
                    <declaration name="mbeanRefMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="2698"/>
                    <scope line="2701">
                        <declaration name="roleNames" type="List&lt;String&gt;" line="2708"/>
                    </scope>
                    <scope line="2717">
                        <declaration name="roleNames" type="List&lt;String&gt;" line="2721"/>
                        <scope line="2723"/>
                        <scope line="2734"/>
                    </scope>
                </scope>
            </method>
            <method name="removeMBeanReference" type="boolean" line="2767">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="roleName" type="String"/>
                    <param name="allRolesFlag" type="boolean"/>
                </params>
                <comment line="2784">
                    Retrieves the set of relations (designed via their relation ids)                    
                </comment>
                <comment line="2785">
                    where the MBean is referenced                    
                </comment>
                <comment line="2786">
                    Note that it is possible that the MBean has already been removed                    
                </comment>
                <comment line="2787">
                    from the internal map: this is the case when the MBean is                    
                </comment>
                <comment line="2788">
                    unregistered, the role is updated, then we arrive here.                    
                </comment>
                <comment line="2793">
                    The MBean is no longer referenced                    
                </comment>
                <comment line="2801">
                    Now retrieves the roles of current relation where the MBean                    
                </comment>
                <comment line="2802">
                    was referenced                    
                </comment>
                <comment line="2805">
                    Removes obsolete reference to role                    
                </comment>
                <comment line="2812">
                    Checks if there is still at least one role in current relation                    
                </comment>
                <comment line="2813">
                    where the MBean is referenced                    
                </comment>
                <comment line="2815">
                    MBean no longer referenced in current relation: removes                    
                </comment>
                <comment line="2816">
                    entry                    
                </comment>
                <comment line="2820">
                    Checks if the MBean is still referenced in at least on relation                    
                </comment>
                <comment line="2822">
                    MBean no longer referenced in any relation: removes entry                    
                </comment>
                <scope line="2771">
                    <declaration name="excMsg" type="String" line="2772"/>
                </scope>
                <declaration name="noLongerRefFlag" type="boolean" line="2780"/>
                <scope line="2782">
                    <declaration name="mbeanRefMap" type="Map&lt;String,List&lt;String&gt;&gt;" line="2789"/>
                    <scope line="2792"/>
                    <declaration name="roleNames" type="List&lt;String&gt;" line="2799"/>
                    <scope line="2800">
                        <declaration name="obsRefIdx" type="int" line="2806"/>
                        <scope line="2807"/>
                    </scope>
                    <scope line="2814"/>
                    <scope line="2821"/>
                </scope>
            </method>
            <method name="updateUnregistrationListener" type="void" line="2845">
                <params>
                    <param name="newRefList" type="List<ObjectName>"/>
                    <param name="obsoleteRefList" type="List<ObjectName>"/>
                </params>
                <comment line="2849">
                    Nothing to do :)                    
                </comment>
                <comment line="2858">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2865">
                    Initialize it to be able to synchronise it :)                    
                </comment>
                <comment line="2872">
                    Enables ObjectNames in newRefList                    
                </comment>
                <comment line="2879">
                    Disables ObjectNames in obsoleteRefList                    
                </comment>
                <comment line="2884">
                    Under test                    
                </comment>
                <comment line="2897">
                    End test                    
                </comment>
                <comment line="2900">
                    if (!newListenerFlag) {                    
                </comment>
                <comment line="2901">
                    The Relation Service was already registered as a                    
                </comment>
                <comment line="2902">
                    listener:                    
                </comment>
                <comment line="2903">
                    removes it                    
                </comment>
                <comment line="2904">
                    Shall not throw InstanceNotFoundException (as the                    
                </comment>
                <comment line="2905">
                    MBean Server Delegate is expected to exist) or                    
                </comment>
                <comment line="2906">
                    ListenerNotFoundException (as it has been checked above                    
                </comment>
                <comment line="2907">
                    that the Relation Service is registered)                    
                </comment>
                <comment line="2908">
                    try {                    
                </comment>
                <comment line="2909">
                    myMBeanServer.removeNotificationListener(                    
                </comment>
                <comment line="2910">
                    MBeanServerDelegate.DELEGATE_NAME,                    
                </comment>
                <comment line="2911">
                    this);                    
                </comment>
                <comment line="2912">
                    } catch (InstanceNotFoundException exc1) {                    
                </comment>
                <comment line="2913">
                    throw new RuntimeException(exc1.getMessage());                    
                </comment>
                <comment line="2914">
                    } catch (ListenerNotFoundException exc2) {                    
                </comment>
                <comment line="2915">
                    throw new                    
                </comment>
                <comment line="2916">
                    RelationServiceNotRegisteredException(exc2.getMessage());                    
                </comment>
                <comment line="2917">
                    }                    
                </comment>
                <comment line="2918">
                    }                    
                </comment>
                <comment line="2920">
                    Adds Relation Service with current filter                    
                </comment>
                <comment line="2921">
                    Can throw InstanceNotFoundException if the Relation                    
                </comment>
                <comment line="2922">
                    Service is not registered, to be transformed into                    
                </comment>
                <comment line="2923">
                    RelationServiceNotRegisteredException                    
                </comment>
                <comment line="2924">
                                        
                </comment>
                <comment line="2925">
                    Assume that there will not be any InstanceNotFoundException                    
                </comment>
                <comment line="2926">
                    for the MBean Server Delegate :)                    
                </comment>
                <comment line="2927">
                    try {                    
                </comment>
                <comment line="2928">
                    myMBeanServer.addNotificationListener(                    
                </comment>
                <comment line="2929">
                    MBeanServerDelegate.DELEGATE_NAME,                    
                </comment>
                <comment line="2930">
                    this,                    
                </comment>
                <comment line="2931">
                    myUnregNtfFilter,                    
                </comment>
                <comment line="2932">
                    null);                    
                </comment>
                <comment line="2933">
                    } catch (InstanceNotFoundException exc) {                    
                </comment>
                <comment line="2934">
                    throw new                    
                </comment>
                <comment line="2935">
                    RelationServiceNotRegisteredException(exc.getMessage());                    
                </comment>
                <comment line="2936">
                    }                    
                </comment>
                <scope line="2847">
                    <scope line="2848"/>
                </scope>
                <scope line="2861">
                    <declaration name="newListenerFlag" type="boolean" line="2863"/>
                    <scope line="2864"/>
                    <scope line="2870">
                        <scope line="2873"/>
                        <scope line="2878"/>
                        <scope line="2885">
                            <scope line="2886"/>
                            <scope line="2892"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="addRelationInt" type="void" line="2993">
                <params>
                    <param name="relationBaseFlag" type="boolean"/>
                    <param name="relationObj" type="RelationSupport"/>
                    <param name="relationObjName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <comment line="3011">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="3014">
                    Checks if there is already a relation with given id                    
                </comment>
                <comment line="3016">
                    Can throw a RelationNotFoundException (in fact should :)                    
                </comment>
                <comment line="3020">
                    There is already a relation with that id                    
                </comment>
                <comment line="3027">
                    OK : The Relation could not be found.                    
                </comment>
                <comment line="3030">
                    Retrieves the relation type                    
                </comment>
                <comment line="3031">
                    Can throw RelationTypeNotFoundException                    
                </comment>
                <comment line="3034">
                    Checks that each provided role conforms to its role info provided in                    
                </comment>
                <comment line="3035">
                    the relation type                    
                </comment>
                <comment line="3036">
                    First retrieves a local list of the role infos of the relation type                    
                </comment>
                <comment line="3037">
                    to see which roles have not been initialized                    
                </comment>
                <comment line="3038">
                    Note: no need to test if list not null before cloning, not allowed                    
                </comment>
                <comment line="3039">
                    to have an empty relation type.                    
                </comment>
                <comment line="3047">
                    Retrieves corresponding role info                    
                </comment>
                <comment line="3048">
                    Can throw a RoleInfoNotFoundException to be converted into a                    
                </comment>
                <comment line="3049">
                    RoleNotFoundException                    
                </comment>
                <comment line="3057">
                    Checks that role conforms to role info,                    
                </comment>
                <comment line="3065">
                    A problem has occurred: throws appropriate exception                    
                </comment>
                <comment line="3066">
                    here InvalidRoleValueException                    
                </comment>
                <comment line="3070">
                    Removes role info for that list from list of role infos for                    
                </comment>
                <comment line="3071">
                    roles to be defaulted                    
                </comment>
                <comment line="3073">
                    Note: no need to check if != -1, MUST be there :)                    
                </comment>
                <comment line="3078">
                    Initializes roles not initialized by roleList                    
                </comment>
                <comment line="3079">
                    Can throw InvalidRoleValueException                    
                </comment>
                <comment line="3087">
                    Creation of relation successfull!!!!                    
                </comment>
                <comment line="3089">
                    Updates internal maps                    
                </comment>
                <comment line="3090">
                    Relation id to object map                    
                </comment>
                <comment line="3093">
                    Note: do not clone relation object, created by us :)                    
                </comment>
                <comment line="3100">
                    Relation id to relation type name map                    
                </comment>
                <comment line="3106">
                    Relation type to relation id map                    
                </comment>
                <comment line="3121">
                    Referenced MBean to relation id map                    
                </comment>
                <comment line="3122">
                    Only role list parameter used, as default initialization of roles                    
                </comment>
                <comment line="3123">
                    done automatically in initializeMissingRoles() sets each                    
                </comment>
                <comment line="3124">
                    uninitialized role to an empty value.                    
                </comment>
                <comment line="3126">
                    Creates a dummy empty ArrayList of ObjectNames to be the old                    
                </comment>
                <comment line="3127">
                    role value :)                    
                </comment>
                <comment line="3129">
                    Will not throw a RelationNotFoundException (as the RelId2Obj map                    
                </comment>
                <comment line="3130">
                    has been updated above) so catch it :)                    
                </comment>
                <comment line="3135">
                    OK : The Relation could not be found.                    
                </comment>
                <comment line="3139">
                    Sends a notification for relation creation                    
                </comment>
                <comment line="3140">
                    Will not throw RelationNotFoundException so catch it :)                    
                </comment>
                <comment line="3145">
                    OK : The Relation could not be found.                    
                </comment>
                <scope line="3002">
                    <declaration name="excMsg" type="String" line="3003"/>
                </scope>
                <scope line="3015">
                    <declaration name="rel" type="Object" line="3017"/>
                    <scope line="3019">
                        <declaration name="excMsg" type="String" line="3021"/>
                        <declaration name="excMsgStrB" type="StringBuilder" line="3022"/>
                    </scope>
                </scope>
                <scope line="3026"/>
                <declaration name="relType" type="RelationType" line="3032"/>
                <declaration name="roleInfoList" type="List&lt;RoleInfo&gt;" line="3040"/>
                <scope line="3042">
                    <scope line="3044">
                        <declaration name="currRoleName" type="String" line="3045"/>
                        <declaration name="currRoleValue" type="List&lt;ObjectName&gt;" line="3046"/>
                        <declaration name="roleInfo" type="RoleInfo" line="3050"/>
                        <scope line="3051"/>
                        <scope line="3053"/>
                        <declaration name="status" type="Integer" line="3058"/>
                        <declaration name="pbType" type="int" line="3063"/>
                        <scope line="3064"/>
                        <declaration name="roleInfoIdx" type="int" line="3072"/>
                    </scope>
                </scope>
                <scope line="3091">
                    <scope line="3092"/>
                    <scope line="3095"/>
                </scope>
                <scope line="3101"/>
                <scope line="3107">
                    <declaration name="relIdList" type="List&lt;String&gt;" line="3108"/>
                    <declaration name="firstRelFlag" type="boolean" line="3110"/>
                    <scope line="3111"/>
                    <scope line="3116"/>
                </scope>
                <scope line="3125">
                    <declaration name="dummyList" type="List&lt;ObjectName&gt;" line="3128"/>
                    <scope line="3131"/>
                    <scope line="3134"/>
                </scope>
                <scope line="3141"/>
                <scope line="3144"/>
            </method>
            <method name="checkRoleInt" type="Integer" line="3180">
                <params>
                    <param name="chkType" type="int"/>
                    <param name="roleName" type="String"/>
                    <param name="roleValue" type="List<ObjectName>"/>
                    <param name="roleInfo" type="RoleInfo"/>
                    <param name="writeChkFlag" type="boolean"/>
                </params>
                <comment line="3193">
                    Compares names                    
                </comment>
                <comment line="3201">
                    Checks read access if required                    
                </comment>
                <comment line="3209">
                    End of check :)                    
                </comment>
                <comment line="3216">
                    Checks write access if required                    
                </comment>
                <comment line="3228">
                    Checks minimum cardinality                    
                </comment>
                <comment line="3236">
                    Checks maximum cardinality                    
                </comment>
                <comment line="3244">
                    Verifies that each referenced MBean is registered in the MBean                    
                </comment>
                <comment line="3245">
                    Server and that it is an instance of the class specified in the                    
                </comment>
                <comment line="3246">
                    role info, or of a subclass of it                    
                </comment>
                <comment line="3247">
                    Note that here again this is under the assumption that                    
                </comment>
                <comment line="3248">
                    referenced MBeans, relation MBeans and the Relation Service are                    
                </comment>
                <comment line="3249">
                    registered in the same MBean Server.                    
                </comment>
                <comment line="3254">
                    Checks it is registered                    
                </comment>
                <comment line="3261">
                    Checks if it is of the correct class                    
                </comment>
                <comment line="3262">
                    Can throw an InstanceNotFoundException, if MBean not registered                    
                </comment>
                <scope line="3184">
                    <declaration name="excMsg" type="String" line="3185"/>
                </scope>
                <declaration name="expName" type="String" line="3194"/>
                <scope line="3195"/>
                <scope line="3202">
                    <declaration name="isReadable" type="boolean" line="3203"/>
                    <scope line="3204"/>
                    <scope line="3208"/>
                </scope>
                <scope line="3217">
                    <declaration name="isWritable" type="boolean" line="3218"/>
                    <scope line="3219"/>
                </scope>
                <declaration name="refNbr" type="int" line="3226"/>
                <declaration name="chkMinFlag" type="boolean" line="3229"/>
                <scope line="3230"/>
                <declaration name="chkMaxFlag" type="boolean" line="3237"/>
                <scope line="3238"/>
                <declaration name="expClassName" type="String" line="3250"/>
                <scope line="3252">
                    <scope line="3255"/>
                    <scope line="3263">
                        <declaration name="classSts" type="boolean" line="3264"/>
                        <scope line="3266"/>
                    </scope>
                    <scope line="3272"/>
                </scope>
            </method>
            <method name="initializeMissingRoles" type="void" line="3317">
                <params>
                    <param name="relationBaseFlag" type="boolean"/>
                    <param name="relationObj" type="RelationSupport"/>
                    <param name="relationObjName" type="ObjectName"/>
                    <param name="relationId" type="String"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoList" type="List<RoleInfo>"/>
                </params>
                <comment line="3337">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="3340">
                    For each role info (corresponding to a role not initialized by the                    
                </comment>
                <comment line="3341">
                    role list provided by the user), try to set in the relation a role                    
                </comment>
                <comment line="3342">
                    with an empty list of ObjectNames.                    
                </comment>
                <comment line="3343">
                    A check is performed to verify that the role can be set to an                    
                </comment>
                <comment line="3344">
                    empty value, according to its minimum cardinality                    
                </comment>
                <comment line="3349">
                    Creates an empty value                    
                </comment>
                <comment line="3351">
                    Creates a role                    
                </comment>
                <comment line="3356">
                    Internal relation                    
                </comment>
                <comment line="3357">
                    Can throw InvalidRoleValueException                    
                </comment>
                <comment line="3358">
                                        
                </comment>
                <comment line="3359">
                    Will not throw RoleNotFoundException (role to be                    
                </comment>
                <comment line="3360">
                    initialized), or RelationNotFoundException, or                    
                </comment>
                <comment line="3361">
                    RelationTypeNotFoundException                    
                </comment>
                <comment line="3375">
                    Relation is an MBean                    
                </comment>
                <comment line="3376">
                    Use standard setRole()                    
                </comment>
                <comment line="3381">
                    Can throw MBeanException wrapping                    
                </comment>
                <comment line="3382">
                    InvalidRoleValueException. Returns the target exception to                    
                </comment>
                <comment line="3383">
                    be homogeneous.                    
                </comment>
                <comment line="3384">
                                        
                </comment>
                <comment line="3385">
                    Will not throw MBeanException (wrapping                    
                </comment>
                <comment line="3386">
                    RoleNotFoundException or MBeanException) or                    
                </comment>
                <comment line="3387">
                    InstanceNotFoundException, or ReflectionException                    
                </comment>
                <comment line="3388">
                                        
                </comment>
                <comment line="3389">
                    Again here the assumption is that the Relation Service and                    
                </comment>
                <comment line="3390">
                    the relation MBeans are registered in the same MBean Server.                    
                </comment>
                <scope line="3327">
                    <declaration name="excMsg" type="String" line="3328"/>
                </scope>
                <scope line="3345">
                    <declaration name="roleName" type="String" line="3347"/>
                    <declaration name="emptyValue" type="List&lt;ObjectName&gt;" line="3350"/>
                    <declaration name="role" type="Role" line="3352"/>
                    <scope line="3354">
                        <scope line="3362"/>
                        <scope line="3365"/>
                        <scope line="3367"/>
                        <scope line="3369"/>
                    </scope>
                    <scope line="3373">
                        <declaration name="params" type="Object[]" line="3377"/>
                        <declaration name="signature" type="String[]" line="3379"/>
                        <scope line="3391"/>
                        <scope line="3395"/>
                        <scope line="3397"/>
                        <scope line="3399">
                            <declaration name="wrappedExc" type="Exception" line="3400"/>
                            <scope line="3401"/>
                            <scope line="3403"/>
                        </scope>
                        <scope line="3406"/>
                        <scope line="3408"/>
                    </scope>
                </scope>
            </method>
            <method name="throwRoleProblemException" type="void" line="3438">
                <params>
                    <param name="pbType" type="int"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="3445">
                    Exception type: 1 = RoleNotFoundException                    
                </comment>
                <comment line="3446">
                    2 = InvalidRoleValueException                    
                </comment>
                <comment line="3481">
                    No default as we must have been in one of those cases                    
                </comment>
                <scope line="3440">
                    <declaration name="excMsg" type="String" line="3441"/>
                </scope>
                <declaration name="excType" type="int" line="3447"/>
                <declaration name="excMsgPart" type="String" line="3449"/>
                <declaration name="excMsgStrB" type="StringBuilder" line="3483"/>
                <declaration name="excMsg" type="String" line="3485"/>
                <scope line="3486"/>
                <scope line="3489"/>
            </method>
            <method name="sendNotificationInt" type="void" line="3519">
                <params>
                    <param name="intNtfType" type="int"/>
                    <param name="message" type="String"/>
                    <param name="relationId" type="String"/>
                    <param name="unregMBeanList" type="List<ObjectName>"/>
                    <param name="roleName" type="String"/>
                    <param name="roleNewValue" type="List<ObjectName>"/>
                    <param name="oldValue" type="List<ObjectName>"/>
                </params>
                <comment line="3536">
                    Relation type name                    
                </comment>
                <comment line="3537">
                    Note: do not use getRelationTypeName() as if it is a relation MBean                    
                </comment>
                <comment line="3538">
                    it is already unregistered.                    
                </comment>
                <comment line="3544">
                    ObjectName (for a relation MBean)                    
                </comment>
                <comment line="3545">
                    Can also throw a RelationNotFoundException, but detected above                    
                </comment>
                <comment line="3575">
                    Sequence number                    
                </comment>
                <comment line="3578">
                    Timestamp                    
                </comment>
                <comment line="3589">
                    Creation or removal                    
                </comment>
                <comment line="3604">
                    Update                    
                </comment>
                <scope line="3527">
                    <declaration name="excMsg" type="String" line="3528"/>
                </scope>
                <declaration name="relTypeName" type="String" line="3539"/>
                <scope line="3540"/>
                <declaration name="relObjName" type="ObjectName" line="3546"/>
                <declaration name="ntfType" type="String" line="3548"/>
                <scope line="3549"/>
                <scope line="3561"/>
                <declaration name="seqNo" type="Long" line="3576"/>
                <declaration name="currDate" type="Date" line="3579"/>
                <declaration name="timeStamp" type="long" line="3580"/>
                <declaration name="ntf" type="RelationNotification" line="3582"/>
                <scope line="3603"/>
            </method>
            <method name="handleReferenceUnregistration" type="void" line="3649">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleNameList" type="List<String>"/>
                </params>
                <comment line="3662">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="3665">
                    Retrieves the relation type name of the relation                    
                </comment>
                <comment line="3666">
                    Can throw RelationNotFoundException                    
                </comment>
                <comment line="3669">
                    Retrieves the relation                    
                </comment>
                <comment line="3670">
                    Can throw RelationNotFoundException, but already detected above                    
                </comment>
                <comment line="3673">
                    Flag to specify if the relation has to be deleted                    
                </comment>
                <comment line="3682">
                    Retrieves number of MBeans currently referenced in role                    
                </comment>
                <comment line="3683">
                    BEWARE! Do not use getRole() as role may be not readable                    
                </comment>
                <comment line="3684">
                                        
                </comment>
                <comment line="3685">
                    Can throw RelationNotFoundException (but already checked),                    
                </comment>
                <comment line="3686">
                    RoleNotFoundException                    
                </comment>
                <comment line="3690">
                    Retrieves new number of element in role                    
                </comment>
                <comment line="3693">
                    Retrieves role info for that role                    
                </comment>
                <comment line="3694">
                                        
                </comment>
                <comment line="3695">
                    Shall not throw RelationTypeNotFoundException or                    
                </comment>
                <comment line="3696">
                    RoleInfoNotFoundException                    
                </comment>
                <comment line="3707">
                    Checks with expected minimum number of elements                    
                </comment>
                <comment line="3711">
                    The relation has to be deleted                    
                </comment>
                <comment line="3717">
                    Removes the relation                    
                </comment>
                <comment line="3722">
                    Updates each role in the relation using                    
                </comment>
                <comment line="3723">
                    handleMBeanUnregistration() callback                    
                </comment>
                <comment line="3724">
                                        
                </comment>
                <comment line="3725">
                    BEWARE: this roleNameList list MUST BE A COPY of a role name                    
                </comment>
                <comment line="3726">
                    list for a referenced MBean in a relation, NOT a                    
                </comment>
                <comment line="3727">
                    reference to an original one part of the                    
                </comment>
                <comment line="3728">
                    myRefedMBeanObjName2RelIdsMap!!!! Because each role                    
                </comment>
                <comment line="3729">
                    which name is in that list will be updated (potentially                    
                </comment>
                <comment line="3730">
                    using setRole(). So the Relation Service will update the                    
                </comment>
                <comment line="3731">
                    myRefedMBeanObjName2RelIdsMap to refelect the new role                    
                </comment>
                <comment line="3732">
                    value!                    
                </comment>
                <comment line="3736">
                    Internal relation                    
                </comment>
                <comment line="3737">
                    Can throw RoleNotFoundException (but already checked)                    
                </comment>
                <comment line="3738">
                                        
                </comment>
                <comment line="3739">
                    Shall not throw                    
                </comment>
                <comment line="3740">
                    RelationTypeNotFoundException,                    
                </comment>
                <comment line="3741">
                    InvalidRoleValueException (value was correct, removing                    
                </comment>
                <comment line="3742">
                    one reference shall not invalidate it, else detected                    
                </comment>
                <comment line="3743">
                    above)                    
                </comment>
                <comment line="3757">
                    Relation MBean                    
                </comment>
                <comment line="3764">
                    Shall not throw InstanceNotFoundException, or                    
                </comment>
                <comment line="3765">
                    MBeanException (wrapping RoleNotFoundException or                    
                </comment>
                <comment line="3766">
                    MBeanException or InvalidRoleValueException) or                    
                </comment>
                <comment line="3767">
                    ReflectionException                    
                </comment>
                <scope line="3653">
                    <declaration name="excMsg" type="String" line="3654"/>
                </scope>
                <declaration name="currRelTypeName" type="String" line="3667"/>
                <declaration name="relObj" type="Object" line="3671"/>
                <declaration name="deleteRelFlag" type="boolean" line="3674"/>
                <scope line="3676">
                    <scope line="3678"/>
                    <declaration name="currRoleRefNbr" type="int" line="3687"/>
                    <declaration name="currRoleNewRefNbr" type="int" line="3691"/>
                    <declaration name="currRoleInfo" type="RoleInfo" line="3697"/>
                    <scope line="3698"/>
                    <scope line="3701"/>
                    <scope line="3703"/>
                    <declaration name="chkMinFlag" type="boolean" line="3708"/>
                    <scope line="3710"/>
                </scope>
                <scope line="3716"/>
                <scope line="3720">
                    <scope line="3733">
                        <scope line="3735">
                            <scope line="3744"/>
                            <scope line="3750"/>
                            <scope line="3752"/>
                        </scope>
                        <scope line="3756">
                            <declaration name="params" type="Object[]" line="3758"/>
                            <declaration name="signature" type="String[]" line="3761"/>
                            <scope line="3768"/>
                            <scope line="3773"/>
                            <scope line="3775"/>
                            <scope line="3777">
                                <declaration name="wrappedExc" type="Exception" line="3778"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>