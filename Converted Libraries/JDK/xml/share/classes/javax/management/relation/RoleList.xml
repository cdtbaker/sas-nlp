<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collection"/>
        <import package="java.util.List"/>
        <class name="RoleList" line="6">
            <extends class="ArrayList">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </extends>
            <javadoc line="6">
                A RoleList represents a list of roles (Role objects). It is used as
                  parameter when creating a relation, and when trying to set several roles in
                  a relation (via &apos;setRoles()&apos; method). It is returned as part of a
                  RoleResult, to provide roles successfully retrieved.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="typeSafe" type="boolean" line="14"/>
            <declaration name="tainted" type="boolean" line="15"/>
            <declaration name="serialVersionUID" type="long" line="16"/>
            <javadoc line="17">
                Constructs an empty RoleList.                
            </javadoc>
            <method name="RoleList" type="constructor" line="20"/>
            <javadoc line="23">
                Constructs an empty RoleList with the initial capacity
                  specified.                
                <param>
                    initialCapacity  initial capacity                    
                </param>
            </javadoc>
            <method name="RoleList" type="constructor" line="28">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="31">
                Constructs a {@code RoleList} containing the elements of the{@code List} specified, in the order in which they are returned by
                  the {@code List}&apos;s iterator. The {@code RoleList} instance has
                  an initial capacity of 110% of the size of the {@code List}specified.                
                <param>
                    list the {@code List} that defines the initial contents of
                      the new {@code RoleList}.                    
                </param>
                <exception>
                    IllegalArgumentException if the {@code list} parameter
                      is {@code null} or if the {@code list} parameter contains any
                      non-Role objects.                    
                </exception>
                <see>
                    ArrayList#ArrayList(java.util.Collection)                    
                </see>
            </javadoc>
            <method name="RoleList" type="constructor" line="42">
                <params>
                    <param name="list" type="List&lt;Role&gt;"/>
                </params>
            </method>
            <javadoc line="47">
                Return a view of this list as a {@code List&lt;Role&gt;}.
                  Changes to the returned value are reflected by changes
                  to the original {@code RoleList} and vice versa.                
                <return>
                    a {@code List&lt;Role&gt;} whose contents
                      reflect the contents of this {@code RoleList}.
                      &lt;p&gt;If this method has ever been called on a given{@code RoleList} instance, a subsequent attempt to add
                      an object to that instance which is not a {@code Role}will fail with an {@code IllegalArgumentException}. For compatibility
                      reasons, a {@code RoleList} on which this method has never
                      been called does allow objects other than {@code Role}s to
                      be added.&lt;/p&gt;                    
                </return>
                <throws>
                    IllegalArgumentException if this {@code RoleList} contains
                      an element that is not a {@code Role}.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="asList" type="List&lt;Role&gt;" line="62">
                <scope line="63"/>
            </method>
            <javadoc line="69">
                Adds the Role specified as the last element of the list.                
                <param>
                    role  the role to be added.                    
                </param>
                <exception>
                    IllegalArgumentException  if the role is null.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="74">
                <params>
                    <param name="role" type="Role"/>
                </params>
                <scope line="75">
                    <declaration name="excMsg" type="String" line="76"/>
                </scope>
            </method>
            <javadoc line="81">
                Inserts the role specified as an element at the position specified.
                  Elements with an index greater than or equal to the current position are
                  shifted up.                
                <param>
                    index  The position in the list where the new Role
                      object is to be inserted.                    
                </param>
                <param>
                    role  The Role object to be inserted.                    
                </param>
                <exception>
                    IllegalArgumentException  if the role is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException  if accessing with an index
                      outside of the list.                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="92">
                <params>
                    <param name="index" type="int"/>
                    <param name="role" type="Role"/>
                </params>
                <scope line="93">
                    <declaration name="excMsg" type="String" line="94"/>
                </scope>
            </method>
            <javadoc line="99">
                Sets the element at the position specified to be the role
                  specified.
                  The previous element at that position is discarded.                
                <param>
                    index  The position specified.                    
                </param>
                <param>
                    role  The value to which the role element should be set.                    
                </param>
                <exception>
                    IllegalArgumentException  if the role is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException  if accessing with an index
                      outside of the list.                    
                </exception>
            </javadoc>
            <method name="set" type="void" line="109">
                <params>
                    <param name="index" type="int"/>
                    <param name="role" type="Role"/>
                </params>
                <scope line="110">
                    <declaration name="excMsg" type="String" line="111"/>
                </scope>
            </method>
            <javadoc line="116">
                Appends all the elements in the RoleList specified to the end
                  of the list, in the order in which they are returned by the Iterator of
                  the RoleList specified.                
                <param>
                    roleList  Elements to be inserted into the list (can be null)                    
                </param>
                <return>
                    true if this list changed as a result of the call.                    
                </return>
                <exception>
                    IndexOutOfBoundsException  if accessing with an index
                      outside of the list.                    
                </exception>
                <see>
                    ArrayList#addAll(Collection)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="126">
                <params>
                    <param name="roleList" type="RoleList"/>
                </params>
                <scope line="127"/>
            </method>
            <javadoc line="132">
                Inserts all of the elements in the RoleList specified into this
                  list, starting at the specified position, in the order in which they are
                  returned by the Iterator of the RoleList specified.                
                <param>
                    index  Position at which to insert the first element from the
                      RoleList specified.                    
                </param>
                <param>
                    roleList  Elements to be inserted into the list.                    
                </param>
                <return>
                    true if this list changed as a result of the call.                    
                </return>
                <exception>
                    IllegalArgumentException  if the role is null.                    
                </exception>
                <exception>
                    IndexOutOfBoundsException  if accessing with an index
                      outside of the list.                    
                </exception>
                <see>
                    ArrayList#addAll(int,Collection)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="145">
                <params>
                    <param name="index" type="int"/>
                    <param name="roleList" type="RoleList"/>
                </params>
                <scope line="146">
                    <declaration name="excMsg" type="String" line="147"/>
                </scope>
            </method>
            <method name="add" type="boolean" line="152">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <method name="add" type="void" line="157">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <method name="addAll" type="boolean" line="162">
                <params>
                    <param name="c" type="Collection&lt;?&gt;"/>
                </params>
            </method>
            <method name="addAll" type="boolean" line="167">
                <params>
                    <param name="index" type="int"/>
                    <param name="c" type="Collection&lt;?&gt;"/>
                </params>
            </method>
            <method name="set" type="Object" line="172">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="Object"/>
                </params>
            </method>
            <javadoc line="177">
                IllegalArgumentException if o is a non-Role object.                
            </javadoc>
            <method name="checkTypeSafe" type="void" line="180">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="181"/>
                <scope line="184"/>
            </method>
            <javadoc line="188">
                IllegalArgumentException if c contains any non-Role objects.                
            </javadoc>
            <method name="checkTypeSafe" type="void" line="191">
                <params>
                    <param name="c" type="Collection&lt;?&gt;"/>
                </params>
                <scope line="192">
                    <declaration name="r" type="Role" line="193"/>
                </scope>
                <scope line="196"/>
            </method>
            <javadoc line="200">
                Returns true if o is a non-Role object.                
            </javadoc>
            <method name="isTainted" type="boolean" line="203">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="204"/>
                <scope line="207"/>
            </method>
            <javadoc line="212">
                Returns true if c contains any non-Role objects.                
            </javadoc>
            <method name="isTainted" type="boolean" line="215">
                <params>
                    <param name="c" type="Collection&lt;?&gt;"/>
                </params>
                <scope line="216"/>
                <scope line="219"/>
            </method>
        </class>
    </source>