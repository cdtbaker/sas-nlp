<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <class name="RoleInfo" line="11">
            <implements interface="Serializable"/>
            <javadoc line="11">
                A RoleInfo object summarises a role in a relation type.
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;2504952983494636987L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="17"/>
            <declaration name="newSerialVersionUID" type="long" line="18"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="19"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="20"/>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="22"/>
            <javadoc line="22">
                @serialField name String Role name                
                <serialField>
                    isReadable boolean Read access mode: &lt;code&gt;true&lt;/code&gt; if role is readable                    
                </serialField>
                <serialField>
                    isWritable boolean Write access mode: &lt;code&gt;true&lt;/code&gt; if role is writable                    
                </serialField>
                <serialField>
                    description String Role description                    
                </serialField>
                <serialField>
                    minDegree int Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)                    
                </serialField>
                <serialField>
                    maxDegree int Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)                    
                </serialField>
                <serialField>
                    referencedMBeanClassName String Name of class of MBean(s) expected to be referenced in corresponding role                    
                </serialField>
            </javadoc>
            <declaration name="compat" type="boolean" line="32"/>
            <scope line="33">
                <scope line="34">
                    <declaration name="act" type="GetPropertyAction" line="35"/>
                    <declaration name="form" type="String" line="36"/>
                </scope>
                <scope line="39"/>
                <scope line="41"/>
                <scope line="45"/>
            </scope>
            <declaration name="ROLE_CARDINALITY_INFINITY" type="int" line="50"/>
            <javadoc line="50">
                To specify an unlimited cardinality.                
            </javadoc>
            <declaration name="name" type="String" line="54"/>
            <javadoc line="54">
                @serial Role name                
            </javadoc>
            <declaration name="isReadable" type="boolean" line="58"/>
            <javadoc line="58">
                @serial Read access mode: &lt;code&gt;true&lt;/code&gt; if role is readable                
            </javadoc>
            <declaration name="isWritable" type="boolean" line="62"/>
            <javadoc line="62">
                @serial Write access mode: &lt;code&gt;true&lt;/code&gt; if role is writable                
            </javadoc>
            <declaration name="description" type="String" line="66"/>
            <javadoc line="66">
                @serial Role description                
            </javadoc>
            <declaration name="minDegree" type="int" line="70"/>
            <javadoc line="70">
                @serial Minimum degree (i.e. minimum number of referenced MBeans in corresponding role)                
            </javadoc>
            <declaration name="maxDegree" type="int" line="74"/>
            <javadoc line="74">
                @serial Maximum degree (i.e. maximum number of referenced MBeans in corresponding role)                
            </javadoc>
            <declaration name="referencedMBeanClassName" type="String" line="78"/>
            <javadoc line="78">
                @serial Name of class of MBean(s) expected to be referenced in corresponding role                
            </javadoc>
            <javadoc line="82">
                Constructor.                
                <param>
                    roleName  name of the role.                    
                </param>
                <param>
                    mbeanClassName  name of the class of MBean(s) expected to
                      be referenced in corresponding role.  If an MBean &lt;em&gt;M&lt;/em&gt; is in
                      this role, then the MBean server must return true for{@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.                    
                </param>
                <param>
                    read  flag to indicate if the corresponding role
                      can be read                    
                </param>
                <param>
                    write  flag to indicate if the corresponding role
                      can be set                    
                </param>
                <param>
                    min  minimum degree for role, i.e. minimum number of
                      MBeans to provide in corresponding role
                      Must be less than or equal to &lt;tt&gt;max&lt;/tt&gt;.
                      (ROLE_CARDINALITY_INFINITY for unlimited)                    
                </param>
                <param>
                    max  maximum degree for role, i.e. maximum number of
                      MBeans to provide in corresponding role
                      Must be greater than or equal to &lt;tt&gt;min&lt;/tt&gt;
                      (ROLE_CARDINALITY_INFINITY for unlimited)                    
                </param>
                <param>
                    descr  description of the role (can be null)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    InvalidRoleInfoException  if the minimum degree is
                      greater than the maximum degree.                    
                </exception>
                <exception>
                    ClassNotFoundException As of JMX 1.2, this exception
                      can no longer be thrown.  It is retained in the declaration of
                      this class for compatibility with existing code.                    
                </exception>
                <exception>
                    NotCompliantMBeanException  if the class mbeanClassName
                      is not a MBean class.                    
                </exception>
            </javadoc>
            <method name="RoleInfo" type="constructor" line="110">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="mbeanClassName" type="String"/>
                    <param name="read" type="boolean"/>
                    <param name="write" type="boolean"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                    <param name="descr" type="String"/>
                </params>
            </method>
            <javadoc line="114">
                Constructor.                
                <param>
                    roleName  name of the role                    
                </param>
                <param>
                    mbeanClassName  name of the class of MBean(s) expected to
                      be referenced in corresponding role.  If an MBean &lt;em&gt;M&lt;/em&gt; is in
                      this role, then the MBean server must return true for{@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.                    
                </param>
                <param>
                    read  flag to indicate if the corresponding role
                      can be read                    
                </param>
                <param>
                    write  flag to indicate if the corresponding role
                      can be set
                      &lt;P&gt;Minimum and maximum degrees defaulted to 1.
                      &lt;P&gt;Description of role defaulted to null.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    ClassNotFoundException As of JMX 1.2, this exception
                      can no longer be thrown.  It is retained in the declaration of
                      this class for compatibility with existing code.                    
                </exception>
                <exception>
                    NotCompliantMBeanException As of JMX 1.2, this
                      exception can no longer be thrown.  It is retained in the
                      declaration of this class for compatibility with existing code.                    
                </exception>
            </javadoc>
            <method name="RoleInfo" type="constructor" line="134">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="mbeanClassName" type="String"/>
                    <param name="read" type="boolean"/>
                    <param name="write" type="boolean"/>
                </params>
                <scope line="135"/>
                <scope line="138"/>
            </method>
            <javadoc line="142">
                Constructor.                
                <param>
                    roleName  name of the role                    
                </param>
                <param>
                    mbeanClassName  name of the class of MBean(s) expected to
                      be referenced in corresponding role.  If an MBean &lt;em&gt;M&lt;/em&gt; is in
                      this role, then the MBean server must return true for{@link MBeanServer#isInstanceOf isInstanceOf(M, mbeanClassName)}.
                      &lt;P&gt;IsReadable and IsWritable defaulted to true.
                      &lt;P&gt;Minimum and maximum degrees defaulted to 1.
                      &lt;P&gt;Description of role defaulted to null.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    ClassNotFoundException As of JMX 1.2, this exception
                      can no longer be thrown.  It is retained in the declaration of
                      this class for compatibility with existing code.                    
                </exception>
                <exception>
                    NotCompliantMBeanException As of JMX 1.2, this
                      exception can no longer be thrown.  It is retained in the
                      declaration of this class for compatibility with existing code.                    
                </exception>
            </javadoc>
            <method name="RoleInfo" type="constructor" line="159">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="mbeanClassName" type="String"/>
                </params>
                <scope line="160"/>
                <scope line="163"/>
            </method>
            <javadoc line="167">
                Copy constructor.                
                <param>
                    roleInfo the &lt;tt&gt;RoleInfo&lt;/tt&gt; instance to be copied.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
            </javadoc>
            <method name="RoleInfo" type="constructor" line="172">
                <params>
                    <param name="roleInfo" type="RoleInfo"/>
                </params>
                <scope line="173">
                    <declaration name="excMsg" type="String" line="174"/>
                </scope>
                <scope line="177"/>
                <scope line="180"/>
            </method>
            <javadoc line="183">
                Returns the name of the role.                
                <return>
                    the name of the role.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="187"/>
            <javadoc line="190">
                Returns read access mode for the role (true if it is readable).                
                <return>
                    true if the role is readable.                    
                </return>
            </javadoc>
            <method name="isReadable" type="boolean" line="194"/>
            <javadoc line="197">
                Returns write access mode for the role (true if it is writable).                
                <return>
                    true if the role is writable.                    
                </return>
            </javadoc>
            <method name="isWritable" type="boolean" line="201"/>
            <javadoc line="204">
                Returns description text for the role.                
                <return>
                    the description of the role.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="208"/>
            <javadoc line="211">
                Returns minimum degree for corresponding role reference.                
                <return>
                    the minimum degree.                    
                </return>
            </javadoc>
            <method name="getMinDegree" type="int" line="215"/>
            <javadoc line="218">
                Returns maximum degree for corresponding role reference.                
                <return>
                    the maximum degree.                    
                </return>
            </javadoc>
            <method name="getMaxDegree" type="int" line="222"/>
            <javadoc line="225">
                &lt;p&gt;Returns name of type of MBean expected to be referenced in
                  corresponding role.&lt;/p&gt;                
                <return>
                    the name of the referenced type.                    
                </return>
            </javadoc>
            <method name="getRefMBeanClassName" type="String" line="230"/>
            <javadoc line="233">
                Returns true if the &lt;tt&gt;value&lt;/tt&gt; parameter is greater than or equal to
                  the expected minimum degree, false otherwise.                
                <param>
                    value  the value to be checked                    
                </param>
                <return>
                    true if greater than or equal to minimum degree, false otherwise.                    
                </return>
            </javadoc>
            <method name="checkMinDegree" type="boolean" line="239">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <javadoc line="247">
                Returns true if the &lt;tt&gt;value&lt;/tt&gt; parameter is lower than or equal to
                  the expected maximum degree, false otherwise.                
                <param>
                    value  the value to be checked                    
                </param>
                <return>
                    true if lower than or equal to maximum degree, false otherwise.                    
                </return>
            </javadoc>
            <method name="checkMaxDegree" type="boolean" line="253">
                <params>
                    <param name="value" type="int"/>
                </params>
                <scope line="254"/>
                <scope line="257"/>
            </method>
            <javadoc line="261">
                Returns a string describing the role info.                
                <return>
                    a description of the role info.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="265">
                <declaration name="result" type="StringBuilder" line="266"/>
            </method>
            <method name="init" type="void" line="276">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="mbeanClassName" type="String"/>
                    <param name="read" type="boolean"/>
                    <param name="write" type="boolean"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                    <param name="descr" type="String"/>
                </params>
                <scope line="277">
                    <declaration name="excMsg" type="String" line="278"/>
                </scope>
                <scope line="284"/>
                <declaration name="invalidRoleInfoFlg" type="boolean" line="287"/>
                <declaration name="excMsgStrB" type="StringBuilder" line="288"/>
                <scope line="289"/>
                <scope line="296"/>
                <scope line="300"/>
            </method>
            <javadoc line="308">
                Deserializes a {@link RoleInfo} from an {@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="311">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="312">
                    <declaration name="fields" type="ObjectInputStream.GetField" line="313"/>
                    <scope line="315"/>
                    <scope line="319"/>
                    <scope line="323"/>
                    <scope line="327"/>
                    <scope line="331"/>
                    <scope line="335"/>
                    <scope line="339"/>
                </scope>
                <scope line="343"/>
            </method>
            <javadoc line="347">
                Serializes a {@link RoleInfo} to an {@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="350">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="351">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="352"/>
                </scope>
                <scope line="362"/>
            </method>
        </class>
    </source>