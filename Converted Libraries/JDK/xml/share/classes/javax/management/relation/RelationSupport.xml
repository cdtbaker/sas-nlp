<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <class name="RelationSupport" line="47">
            <comment line="74">
                                
            </comment>
            <comment line="75">
                Private members                
            </comment>
            <comment line="76">
                                
            </comment>
            <comment line="78">
                Relation identifier (expected to be unique in the Relation Service where                
            </comment>
            <comment line="79">
                the RelationSupport object will be added)                
            </comment>
            <comment line="82">
                ObjectName of the Relation Service where the relation will be added                
            </comment>
            <comment line="83">
                REQUIRED if the RelationSupport is created by the user to be registered as                
            </comment>
            <comment line="84">
                a MBean, as it will have to access the Relation Service via the MBean                
            </comment>
            <comment line="85">
                Server to perform the check regarding the relation type.                
            </comment>
            <comment line="86">
                Is null if current object is directly created by the Relation Service,                
            </comment>
            <comment line="87">
                as the object will directly access it.                
            </comment>
            <comment line="90">
                Reference to the MBean Server where the Relation Service is                
            </comment>
            <comment line="91">
                registered                
            </comment>
            <comment line="92">
                REQUIRED if the RelationSupport is created by the user to be registered as                
            </comment>
            <comment line="93">
                a MBean, as it will have to access the Relation Service via the MBean                
            </comment>
            <comment line="94">
                Server to perform the check regarding the relation type.                
            </comment>
            <comment line="95">
                If the Relationbase object is created by the Relation Service (use of                
            </comment>
            <comment line="96">
                createRelation() method), this is null as not needed, direct access to                
            </comment>
            <comment line="97">
                the Relation Service.                
            </comment>
            <comment line="98">
                If the Relationbase object is created by the user and registered as a                
            </comment>
            <comment line="99">
                MBean, this is set by the preRegister() method below.                
            </comment>
            <comment line="102">
                Relation type name (must be known in the Relation Service where the                
            </comment>
            <comment line="103">
                relation will be added)                
            </comment>
            <comment line="106">
                Role map, mapping &lt;role-name&gt; -&gt; &lt;Role&gt;                
            </comment>
            <comment line="107">
                Initialized by role list in the constructor, then updated:                
            </comment>
            <comment line="108">
                - if the relation is a MBean, via setRole() and setRoles() methods, or                
            </comment>
            <comment line="109">
                via Relation Service setRole() and setRoles() methods                
            </comment>
            <comment line="110">
                - if the relation is internal to the Relation Service, via                
            </comment>
            <comment line="111">
                setRoleInt() and setRolesInt() methods.                
            </comment>
            <comment line="114">
                Flag to indicate if the object has been added in the Relation Service                
            </comment>
            <comment line="117">
                                
            </comment>
            <comment line="118">
                Constructors                
            </comment>
            <comment line="119">
                                
            </comment>
            <comment line="258">
                                
            </comment>
            <comment line="259">
                Relation Interface                
            </comment>
            <comment line="260">
                                
            </comment>
            <comment line="663">
                                
            </comment>
            <comment line="664">
                MBeanRegistration interface                
            </comment>
            <comment line="665">
                                
            </comment>
            <comment line="667">
                Pre-registration: retrieves the MBean Server (useful to access to the                
            </comment>
            <comment line="668">
                Relation Service)                
            </comment>
            <comment line="669">
                This is the way to retrieve the MBean Server when the relation object is                
            </comment>
            <comment line="670">
                a MBean created by the user outside of the Relation Service.                
            </comment>
            <comment line="671">
                                
            </comment>
            <comment line="672">
                No exception thrown.                
            </comment>
            <comment line="681">
                Post-registration: does nothing                
            </comment>
            <comment line="686">
                Pre-unregistration: does nothing                
            </comment>
            <comment line="692">
                Post-unregistration: does nothing                
            </comment>
            <comment line="697">
                                
            </comment>
            <comment line="698">
                Others                
            </comment>
            <comment line="699">
                                
            </comment>
            <comment line="719">
                                
            </comment>
            <comment line="720">
                Misc                
            </comment>
            <comment line="721">
                                
            </comment>
            <comment line="723">
                Gets the role with given name                
            </comment>
            <comment line="724">
                Checks if the role exists and is readable according to the relation                
            </comment>
            <comment line="725">
                type.                
            </comment>
            <comment line="726">
                                
            </comment>
            <comment line="727">
                This method is called in getRole() above.                
            </comment>
            <comment line="728">
                It is also called in the Relation Service getRole() method.                
            </comment>
            <comment line="729">
                It is also called in getRolesInt() below (used for getRoles() above                
            </comment>
            <comment line="730">
                and for Relation Service getRoles() method).                
            </comment>
            <comment line="731">
                                
            </comment>
            <comment line="732">
                Depending on parameters reflecting its use (either in the scope of                
            </comment>
            <comment line="733">
                getting a single role or of getting several roles), will return:                
            </comment>
            <comment line="734">
                - in case of success:                
            </comment>
            <comment line="735">
                - for single role retrieval, the ArrayList of ObjectNames being the                
            </comment>
            <comment line="736">
                role value                
            </comment>
            <comment line="737">
                - for multi-role retrieval, the Role object itself                
            </comment>
            <comment line="738">
                - in case of failure (except critical exceptions):                
            </comment>
            <comment line="739">
                - for single role retrieval, if role does not exist or is not                
            </comment>
            <comment line="740">
                readable, an RoleNotFoundException exception is raised                
            </comment>
            <comment line="741">
                - for multi-role retrieval, a RoleUnresolved object                
            </comment>
            <comment line="742">
                                
            </comment>
            <comment line="743">
                -param roleName  name of role to be retrieved                
            </comment>
            <comment line="744">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="745">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="746">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="747">
                possible.                
            </comment>
            <comment line="748">
                -param relationServ  reference to Relation Service object, if object                
            </comment>
            <comment line="749">
                created by Relation Service.                
            </comment>
            <comment line="750">
                -param multiRoleFlg  true if getting the role in the scope of a                
            </comment>
            <comment line="751">
                multiple retrieval.                
            </comment>
            <comment line="752">
                                
            </comment>
            <comment line="753">
                -return:                
            </comment>
            <comment line="754">
                - for single role retrieval (multiRoleFlg false):                
            </comment>
            <comment line="755">
                - ArrayList of ObjectName objects, value of role with given name, if                
            </comment>
            <comment line="756">
                the role can be retrieved                
            </comment>
            <comment line="757">
                - raise a RoleNotFoundException exception else                
            </comment>
            <comment line="758">
                - for multi-role retrieval (multiRoleFlg true):                
            </comment>
            <comment line="759">
                - the Role object for given role name if role can be retrieved                
            </comment>
            <comment line="760">
                - a RoleUnresolved object with problem.                
            </comment>
            <comment line="761">
                                
            </comment>
            <comment line="762">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="763">
                -exception RoleNotFoundException  if multiRoleFlg is false and:                
            </comment>
            <comment line="764">
                - there is no role with given name                
            </comment>
            <comment line="765">
                or                
            </comment>
            <comment line="766">
                - the role is not readable.                
            </comment>
            <comment line="767">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="768">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="893">
                Gets the given roles                
            </comment>
            <comment line="894">
                For each role, verifies if the role exists and is readable according to                
            </comment>
            <comment line="895">
                the relation type.                
            </comment>
            <comment line="896">
                                
            </comment>
            <comment line="897">
                This method is called in getRoles() above and in Relation Service                
            </comment>
            <comment line="898">
                getRoles() method.                
            </comment>
            <comment line="899">
                                
            </comment>
            <comment line="900">
                -param roleNameArray  array of names of roles to be retrieved                
            </comment>
            <comment line="901">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="902">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="903">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="904">
                possible.                
            </comment>
            <comment line="905">
                -param relationServ  reference to Relation Service object, if object                
            </comment>
            <comment line="906">
                created by Relation Service.                
            </comment>
            <comment line="907">
                                
            </comment>
            <comment line="908">
                -return a RoleResult object                
            </comment>
            <comment line="909">
                                
            </comment>
            <comment line="910">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="911">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="912">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="975">
                Returns all roles present in the relation                
            </comment>
            <comment line="976">
                                
            </comment>
            <comment line="977">
                -return a RoleResult object, including a RoleList (for roles                
            </comment>
            <comment line="978">
                successfully retrieved) and a RoleUnresolvedList (for roles not                
            </comment>
            <comment line="979">
                readable).                
            </comment>
            <comment line="980">
                                
            </comment>
            <comment line="981">
                -exception IllegalArgumentException if null parameter                
            </comment>
            <comment line="982">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="983">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="984">
                                
            </comment>
            <comment line="1015">
                Sets the role with given value                
            </comment>
            <comment line="1016">
                                
            </comment>
            <comment line="1017">
                This method is called in setRole() above.                
            </comment>
            <comment line="1018">
                It is also called by the Relation Service setRole() method.                
            </comment>
            <comment line="1019">
                It is also called in setRolesInt() method below (used in setRoles()                
            </comment>
            <comment line="1020">
                above and in RelationService setRoles() method).                
            </comment>
            <comment line="1021">
                                
            </comment>
            <comment line="1022">
                Will check the role according to its corresponding role definition                
            </comment>
            <comment line="1023">
                provided in relation&apos;s relation type                
            </comment>
            <comment line="1024">
                Will send a notification (RelationNotification with type                
            </comment>
            <comment line="1025">
                RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the                
            </comment>
            <comment line="1026">
                relation is a MBean or not) if not initialization of role.                
            </comment>
            <comment line="1027">
                                
            </comment>
            <comment line="1028">
                -param aRole  role to be set (name and new value)                
            </comment>
            <comment line="1029">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="1030">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="1031">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="1032">
                possible.                
            </comment>
            <comment line="1033">
                -param relationServ  reference to Relation Service object, if internal                
            </comment>
            <comment line="1034">
                relation                
            </comment>
            <comment line="1035">
                -param multiRoleFlg  true if getting the role in the scope of a                
            </comment>
            <comment line="1036">
                multiple retrieval.                
            </comment>
            <comment line="1037">
                                
            </comment>
            <comment line="1038">
                -return (except other &quot;critical&quot; exceptions):                
            </comment>
            <comment line="1039">
                - for single role retrieval (multiRoleFlg false):                
            </comment>
            <comment line="1040">
                - null if the role has been set                
            </comment>
            <comment line="1041">
                - raise an InvalidRoleValueException                
            </comment>
            <comment line="1042">
                else                
            </comment>
            <comment line="1043">
                - for multi-role retrieval (multiRoleFlg true):                
            </comment>
            <comment line="1044">
                - the Role object for given role name if role has been set                
            </comment>
            <comment line="1045">
                - a RoleUnresolved object with problem else.                
            </comment>
            <comment line="1046">
                                
            </comment>
            <comment line="1047">
                -exception IllegalArgumentException if null parameter                
            </comment>
            <comment line="1048">
                -exception RoleNotFoundException  if multiRoleFlg is false and:                
            </comment>
            <comment line="1049">
                - internal relation and the role does not exist                
            </comment>
            <comment line="1050">
                or                
            </comment>
            <comment line="1051">
                - existing role (i.e. not initializing it) and the role is not                
            </comment>
            <comment line="1052">
                writable.                
            </comment>
            <comment line="1053">
                -exception InvalidRoleValueException  ifmultiRoleFlg is false and                
            </comment>
            <comment line="1054">
                value provided for:                
            </comment>
            <comment line="1055">
                - the number of referenced MBeans in given value is less than                
            </comment>
            <comment line="1056">
                expected minimum degree                
            </comment>
            <comment line="1057">
                or                
            </comment>
            <comment line="1058">
                - the number of referenced MBeans in provided value exceeds expected                
            </comment>
            <comment line="1059">
                maximum degree                
            </comment>
            <comment line="1060">
                or                
            </comment>
            <comment line="1061">
                - one referenced MBean in the value is not an Object of the MBean                
            </comment>
            <comment line="1062">
                class expected for that role                
            </comment>
            <comment line="1063">
                or                
            </comment>
            <comment line="1064">
                - a MBean provided for that role does not exist                
            </comment>
            <comment line="1065">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="1066">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="1067">
                -exception RelationTypeNotFoundException  if relation type unknown                
            </comment>
            <comment line="1068">
                -exception RelationNotFoundException  if a relation MBean has not been                
            </comment>
            <comment line="1069">
                added in the Relation Service                
            </comment>
            <comment line="1252">
                Requires the Relation Service to send a notification                
            </comment>
            <comment line="1253">
                RelationNotification, with type being either:                
            </comment>
            <comment line="1254">
                - RelationNotification.RELATION_BASIC_UPDATE if the updated relation is                
            </comment>
            <comment line="1255">
                a relation internal to the Relation Service                
            </comment>
            <comment line="1256">
                - RelationNotification.RELATION_MBEAN_UPDATE if the updated relation is                
            </comment>
            <comment line="1257">
                a relation MBean.                
            </comment>
            <comment line="1258">
                                
            </comment>
            <comment line="1259">
                -param newRole  new role                
            </comment>
            <comment line="1260">
                -param oldRoleValue  old role value (ArrayList of ObjectNames)                
            </comment>
            <comment line="1261">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="1262">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="1263">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="1264">
                possible.                
            </comment>
            <comment line="1265">
                -param relationServ  reference to Relation Service object, if object                
            </comment>
            <comment line="1266">
                created by Relation Service.                
            </comment>
            <comment line="1267">
                                
            </comment>
            <comment line="1268">
                -exception IllegalArgumentException  if null parameter provided                
            </comment>
            <comment line="1269">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="1270">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="1271">
                -exception RelationNotFoundException if:                
            </comment>
            <comment line="1272">
                - relation MBean                
            </comment>
            <comment line="1273">
                and                
            </comment>
            <comment line="1274">
                - it has not been added into the Relation Service                
            </comment>
            <comment line="1350">
                Requires the Relation Service to update its internal map handling                
            </comment>
            <comment line="1351">
                MBeans referenced in relations.                
            </comment>
            <comment line="1352">
                The Relation Service will also update its recording as a listener to                
            </comment>
            <comment line="1353">
                be informed about unregistration of new referenced MBeans, and no longer                
            </comment>
            <comment line="1354">
                informed of MBeans no longer referenced.                
            </comment>
            <comment line="1355">
                                
            </comment>
            <comment line="1356">
                -param newRole  new role                
            </comment>
            <comment line="1357">
                -param oldRoleValue  old role value (ArrayList of ObjectNames)                
            </comment>
            <comment line="1358">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="1359">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="1360">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="1361">
                possible.                
            </comment>
            <comment line="1362">
                -param relationServ  reference to Relation Service object, if object                
            </comment>
            <comment line="1363">
                created by Relation Service.                
            </comment>
            <comment line="1364">
                                
            </comment>
            <comment line="1365">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="1366">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="1367">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="1368">
                -exception RelationNotFoundException if:                
            </comment>
            <comment line="1369">
                - relation MBean                
            </comment>
            <comment line="1370">
                and                
            </comment>
            <comment line="1371">
                - the relation is not added in the Relation Service                
            </comment>
            <comment line="1442">
                Sets the given roles                
            </comment>
            <comment line="1443">
                For each role:                
            </comment>
            <comment line="1444">
                - will check the role according to its corresponding role definition                
            </comment>
            <comment line="1445">
                provided in relation&apos;s relation type                
            </comment>
            <comment line="1446">
                - will send a notification (RelationNotification with type                
            </comment>
            <comment line="1447">
                RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the                
            </comment>
            <comment line="1448">
                relation is a MBean or not) for each updated role.                
            </comment>
            <comment line="1449">
                                
            </comment>
            <comment line="1450">
                This method is called in setRoles() above and in Relation Service                
            </comment>
            <comment line="1451">
                setRoles() method.                
            </comment>
            <comment line="1452">
                                
            </comment>
            <comment line="1453">
                -param list  list of roles to be set                
            </comment>
            <comment line="1454">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="1455">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="1456">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="1457">
                possible.                
            </comment>
            <comment line="1458">
                -param relationServ  reference to Relation Service object, if object                
            </comment>
            <comment line="1459">
                created by Relation Service.                
            </comment>
            <comment line="1460">
                                
            </comment>
            <comment line="1461">
                -return a RoleResult object                
            </comment>
            <comment line="1462">
                                
            </comment>
            <comment line="1463">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="1464">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="1465">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="1466">
                -exception RelationTypeNotFoundException if:                
            </comment>
            <comment line="1467">
                - relation MBean                
            </comment>
            <comment line="1468">
                and                
            </comment>
            <comment line="1469">
                - unknown relation type                
            </comment>
            <comment line="1470">
                -exception RelationNotFoundException if:                
            </comment>
            <comment line="1471">
                - relation MBean                
            </comment>
            <comment line="1472">
                and                
            </comment>
            <comment line="1473">
                - not added in the RS                
            </comment>
            <comment line="1542">
                Initializes all members                
            </comment>
            <comment line="1543">
                                
            </comment>
            <comment line="1544">
                -param relationId  relation identifier, to identify the relation in the                
            </comment>
            <comment line="1545">
                Relation Service.                
            </comment>
            <comment line="1546">
                Expected to be unique in the given Relation Service.                
            </comment>
            <comment line="1547">
                -param relationServiceName  ObjectName of the Relation Service where                
            </comment>
            <comment line="1548">
                the relation will be registered.                
            </comment>
            <comment line="1549">
                It is required as this is the Relation Service that is aware of the                
            </comment>
            <comment line="1550">
                definition of the relation type of given relation, so that will be able                
            </comment>
            <comment line="1551">
                to check update operations (set). Direct access via the Relation                
            </comment>
            <comment line="1552">
                Service (RelationService.setRole()) do not need this information but                
            </comment>
            <comment line="1553">
                as any user relation is a MBean, setRole() is part of its management                
            </comment>
            <comment line="1554">
                interface and can be called directly on the user relation MBean. So the                
            </comment>
            <comment line="1555">
                user relation MBean must be aware of the Relation Service where it will                
            </comment>
            <comment line="1556">
                be added.                
            </comment>
            <comment line="1557">
                -param relationTypeName  Name of relation type.                
            </comment>
            <comment line="1558">
                Expected to have been created in given Relation Service.                
            </comment>
            <comment line="1559">
                -param list  list of roles (Role objects) to initialized the                
            </comment>
            <comment line="1560">
                relation. Can be null.                
            </comment>
            <comment line="1561">
                Expected to conform to relation info in associated relation type.                
            </comment>
            <comment line="1562">
                                
            </comment>
            <comment line="1563">
                -exception InvalidRoleValueException  if the same name is used for two                
            </comment>
            <comment line="1564">
                roles.                
            </comment>
            <comment line="1565">
                -exception IllegalArgumentException  if a required value (Relation                
            </comment>
            <comment line="1566">
                Service Object Name, etc.) is not provided as parameter.                
            </comment>
            <comment line="1597">
                Initialize the internal role map from given RoleList parameter                
            </comment>
            <comment line="1598">
                                
            </comment>
            <comment line="1599">
                -param list  role list. Can be null.                
            </comment>
            <comment line="1600">
                As it is a RoleList object, it cannot include null (rejected).                
            </comment>
            <comment line="1601">
                                
            </comment>
            <comment line="1602">
                -exception InvalidRoleValueException  if the same role name is used for                
            </comment>
            <comment line="1603">
                several roles.                
            </comment>
            <comment line="1604">
                                
            </comment>
            <comment line="1640">
                Callback used by the Relation Service when a MBean referenced in a role                
            </comment>
            <comment line="1641">
                is unregistered.                
            </comment>
            <comment line="1642">
                The Relation Service will call this method to let the relation                
            </comment>
            <comment line="1643">
                take action to reflect the impact of such unregistration.                
            </comment>
            <comment line="1644">
                Current implementation is to set the role with its current value                
            </comment>
            <comment line="1645">
                (list of ObjectNames of referenced MBeans) without the unregistered                
            </comment>
            <comment line="1646">
                one.                
            </comment>
            <comment line="1647">
                                
            </comment>
            <comment line="1648">
                -param objectName  ObjectName of unregistered MBean                
            </comment>
            <comment line="1649">
                -param roleName  name of role where the MBean is referenced                
            </comment>
            <comment line="1650">
                -param relationServCallFlg  true if call from the Relation Service; this                
            </comment>
            <comment line="1651">
                will happen if the current RelationSupport object has been created by                
            </comment>
            <comment line="1652">
                the Relation Service (via createRelation()) method, so direct access is                
            </comment>
            <comment line="1653">
                possible.                
            </comment>
            <comment line="1654">
                -param relationServ  reference to Relation Service object, if internal                
            </comment>
            <comment line="1655">
                relation                
            </comment>
            <comment line="1656">
                                
            </comment>
            <comment line="1657">
                -exception IllegalArgumentException if null parameter                
            </comment>
            <comment line="1658">
                -exception RoleNotFoundException  if:                
            </comment>
            <comment line="1659">
                - the role does not exist                
            </comment>
            <comment line="1660">
                or                
            </comment>
            <comment line="1661">
                - role not writable.                
            </comment>
            <comment line="1662">
                -exception InvalidRoleValueException  if value provided for:                
            </comment>
            <comment line="1663">
                - the number of referenced MBeans in given value is less than                
            </comment>
            <comment line="1664">
                expected minimum degree                
            </comment>
            <comment line="1665">
                or                
            </comment>
            <comment line="1666">
                - the number of referenced MBeans in provided value exceeds expected                
            </comment>
            <comment line="1667">
                maximum degree                
            </comment>
            <comment line="1668">
                or                
            </comment>
            <comment line="1669">
                - one referenced MBean in the value is not an Object of the MBean                
            </comment>
            <comment line="1670">
                class expected for that role                
            </comment>
            <comment line="1671">
                or                
            </comment>
            <comment line="1672">
                - a MBean provided for that role does not exist                
            </comment>
            <comment line="1673">
                -exception RelationServiceNotRegisteredException  if the Relation                
            </comment>
            <comment line="1674">
                Service is not registered in the MBean Server                
            </comment>
            <comment line="1675">
                -exception RelationTypeNotFoundException if unknown relation type                
            </comment>
            <comment line="1676">
                -exception RelationNotFoundException if current relation has not been                
            </comment>
            <comment line="1677">
                added in the RS                
            </comment>
            <implements interface="RelationSupportMBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="47">
                A RelationSupport object is used internally by the Relation Service to
                  represent simple relations (only roles, no properties or methods), with an
                  unlimited number of roles, of any relation type. As internal representation,
                  it is not exposed to the user.
                  &lt;P&gt;RelationSupport class conforms to the design patterns of standard MBean. So
                  the user can decide to instantiate a RelationSupport object himself as
                  a MBean (as it follows the MBean design patterns), to register it in the
                  MBean Server, and then to add it in the Relation Service.
                  &lt;P&gt;The user can also, when creating his own MBean relation class, have it
                  extending RelationSupport, to retrieve the implementations of required
                  interfaces (see below).
                  &lt;P&gt;It is also possible to have in a user relation MBean class a member
                  being a RelationSupport object, and to implement the required interfaces by
                  delegating all to this member.
                  &lt;P&gt; RelationSupport implements the Relation interface (to be handled by the
                  Relation Service).
                  &lt;P&gt;It implements also the MBeanRegistration interface to be able to retrieve
                  the MBean Server where it is registered (if registered as a MBean) to access
                  to its Relation Service.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="myRelId" type="String" line="79"/>
            <declaration name="myRelServiceName" type="ObjectName" line="87"/>
            <declaration name="myRelServiceMBeanServer" type="MBeanServer" line="99"/>
            <declaration name="myRelTypeName" type="String" line="103"/>
            <declaration name="myRoleName2ValueMap" type="Map&lt;String,Role&gt;" line="111"/>
            <declaration name="myInRelServFlg" type="AtomicBoolean" line="114"/>
            <javadoc line="120">
                Creates a {@code RelationSupport} object.
                  &lt;P&gt;This constructor has to be used when the RelationSupport object will
                  be registered as a MBean by the user, or when creating a user relation
                  MBean whose class extends RelationSupport.
                  &lt;P&gt;Nothing is done at the Relation Service level, i.e.
                  the {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed to
                  see if the provided values are correct.
                  The object is always created, EXCEPT if:
                  &lt;P&gt;- any of the required parameters is {@code null}.
                  &lt;P&gt;- the same name is used for two roles.
                  &lt;P&gt;To be handled as a relation, the {@code RelationSupport} object has
                  to be added to the Relation Service using the Relation Service method
                  addRelation().                
                <param>
                    relationId  relation identifier, to identify the relation in the
                      Relation Service.
                      <P>Expected to be unique in the given Relation Service.                    
                </param>
                <param>
                    relationServiceName  ObjectName of the Relation Service where
                      the relation will be registered.
                      <P>This parameter is required as it is the Relation Service that is
                      aware of the definition of the relation type of the given relation,
                      so that will be able to check update operations (set).                    
                </param>
                <param>
                    relationTypeName  Name of relation type.
                      <P>Expected to have been created in the given Relation Service.                    
                </param>
                <param>
                    list  list of roles (Role objects) to initialize the
                      relation. Can be {@code null}.
                      <P>Expected to conform to relation info in associated relation type.                    
                </param>
                <exception>
                    InvalidRoleValueException  if the same name is used for two
                      roles.                    
                </exception>
                <exception>
                    IllegalArgumentException  if any of the required parameters
                      (relation id, relation service ObjectName, or relation type name) is{@code null}.                    
                </exception>
            </javadoc>
            <method name="RelationSupport" type="constructor" line="161">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="168">
                    Can throw InvalidRoleValueException and IllegalArgumentException                    
                </comment>
            </method>
            <javadoc line="179">
                Creates a {@code RelationSupport} object.
                  &lt;P&gt;This constructor has to be used when the user relation MBean
                  implements the interfaces expected to be supported by a relation by
                  delegating to a RelationSupport object.
                  &lt;P&gt;This object needs to know the Relation Service expected to handle the
                  relation. So it has to know the MBean Server where the Relation Service
                  is registered.
                  &lt;P&gt;According to a limitation, a relation MBean must be registered in the
                  same MBean Server as the Relation Service expected to handle it. So the
                  user relation MBean has to be created and registered, and then the
                  wrapped RelationSupport object can be created within the identified MBean
                  Server.
                  &lt;P&gt;Nothing is done at the Relation Service level, i.e.
                  the {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed to
                  see if the provided values are correct.
                  The object is always created, EXCEPT if:
                  &lt;P&gt;- any of the required parameters is {@code null}.
                  &lt;P&gt;- the same name is used for two roles.
                  &lt;P&gt;To be handled as a relation, the {@code RelationSupport} object has
                  to be added to the Relation Service using the Relation Service method
                  addRelation().                
                <param>
                    relationId  relation identifier, to identify the relation in the
                      Relation Service.
                      <P>Expected to be unique in the given Relation Service.                    
                </param>
                <param>
                    relationServiceName  ObjectName of the Relation Service where
                      the relation will be registered.
                      <P>This parameter is required as it is the Relation Service that is
                      aware of the definition of the relation type of the given relation,
                      so that will be able to check update operations (set).                    
                </param>
                <param>
                    relationServiceMBeanServer  MBean Server where the wrapping MBean
                      is or will be registered.
                      <P>Expected to be the MBean Server where the Relation Service is or will
                      be registered.                    
                </param>
                <param>
                    relationTypeName  Name of relation type.
                      <P>Expected to have been created in the given Relation Service.                    
                </param>
                <param>
                    list  list of roles (Role objects) to initialize the
                      relation. Can be {@code null}.
                      <P>Expected to conform to relation info in associated relation type.                    
                </param>
                <exception>
                    InvalidRoleValueException  if the same name is used for two
                      roles.                    
                </exception>
                <exception>
                    IllegalArgumentException  if any of the required parameters
                      (relation id, relation service ObjectName, relation service MBeanServer,
                      or relation type name) is {@code null}.                    
                </exception>
            </javadoc>
            <method name="RelationSupport" type="constructor" line="233">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationServiceMBeanServer" type="MBeanServer"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="245">
                    Can throw InvalidRoleValueException and                    
                </comment>
                <comment line="246">
                    IllegalArgumentException                    
                </comment>
                <scope line="237">
                    <declaration name="excMsg" type="String" line="238"/>
                </scope>
            </method>
            <javadoc line="261">
                Retrieves role value for given role name.
                  &lt;P&gt;Checks if the role exists and is readable according to the relation
                  type.                
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the ArrayList of ObjectName objects being the role value                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RoleNotFoundException  if:
                      <P>- there is no role with given name
                      <P>- the role is not readable.                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <see>
                    #setRole                    
                </see>
            </javadoc>
            <method name="getRole" type="List<ObjectName>" line="282">
                <params>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="292">
                    Can throw RoleNotFoundException and                    
                </comment>
                <comment line="293">
                    RelationServiceNotRegisteredException                    
                </comment>
                <scope line="284">
                    <declaration name="excMsg" type="String" line="285"/>
                </scope>
                <declaration name="result" type="List&lt;ObjectName&gt;" line="294"/>
            </method>
            <javadoc line="301">
                Retrieves values of roles with given names.
                  &lt;P&gt;Checks for each role if it exists and is readable according to the
                  relation type.                
                <param>
                    roleNameArray  array of names of roles to be retrieved                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      retrieved).                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <see>
                    #setRoles                    
                </see>
            </javadoc>
            <method name="getRoles" type="RoleResult" line="320">
                <params>
                    <param name="roleNameArray" type="String[]"/>
                </params>
                <comment line="329">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <scope line="322">
                    <declaration name="excMsg" type="String" line="323"/>
                </scope>
                <declaration name="result" type="RoleResult" line="330"/>
            </method>
            <javadoc line="336">
                Returns all roles present in the relation.                
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      readable).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
            </javadoc>
            <method name="getAllRoles" type="RoleResult" line="347">
                <comment line="356">
                    OK : Invalid parameters, ignore...                    
                </comment>
                <declaration name="result" type="RoleResult" line="352"/>
                <scope line="353"/>
                <scope line="355"/>
            </method>
            <javadoc line="363">
                Returns all roles in the relation without checking read mode.                
                <return>
                    a RoleList                    
                </return>
            </javadoc>
            <method name="retrieveAllRoles" type="RoleList" line="368">
                <declaration name="result" type="RoleList" line="373"/>
                <scope line="374"/>
            </method>
            <javadoc line="384">
                Returns the number of MBeans currently referenced in the given role.                
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the number of currently referenced MBeans in that role                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with given name                    
                </exception>
            </javadoc>
            <method name="getRoleCardinality" type="Integer" line="396">
                <params>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="406">
                    Try to retrieve the role                    
                </comment>
                <comment line="409">
                    No null Role is allowed, so direct use of get()                    
                </comment>
                <comment line="414">
                    Will throw a RoleNotFoundException                    
                </comment>
                <comment line="415">
                                        
                </comment>
                <comment line="416">
                    Will not throw InvalidRoleValueException, so catch it for the                    
                </comment>
                <comment line="417">
                    compiler                    
                </comment>
                <comment line="422">
                    OK : Do not throw InvalidRoleValueException as                    
                </comment>
                <comment line="423">
                    a RoleNotFoundException will be thrown.                    
                </comment>
                <scope line="398">
                    <declaration name="excMsg" type="String" line="399"/>
                </scope>
                <declaration name="role" type="Role" line="407"/>
                <scope line="408"/>
                <scope line="412">
                    <declaration name="pbType" type="int" line="413"/>
                    <scope line="418"/>
                    <scope line="421"/>
                </scope>
                <declaration name="roleValue" type="List&lt;ObjectName&gt;" line="427"/>
            </method>
            <javadoc line="434">
                Sets the given role.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;Will send a notification (RelationNotification with type
                  RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                  relation is a MBean or not).                
                <param>
                    role  role to be set (name and new value)                    
                </param>
                <exception>
                    IllegalArgumentException  if null role                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with the supplied
                      role's name or if the role is not writable (no test on the write access
                      mode performed when initializing the role)                    
                </exception>
                <exception>
                    InvalidRoleValueException  if value provided for
                      role is not valid, i.e.:
                      <P>- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      <P>- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      <P>- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      <P>- a MBean provided for that role does not exist                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service                    
                </exception>
                <exception>
                    RelationNotFoundException  if the relation has not been
                      added in the Relation Service.                    
                </exception>
                <see>
                    #getRole                    
                </see>
            </javadoc>
            <method name="setRole" type="void" line="472">
                <params>
                    <param name="role" type="Role"/>
                </params>
                <comment line="482">
                    Will return null :)                    
                </comment>
                <scope line="474">
                    <declaration name="excMsg" type="String" line="475"/>
                </scope>
                <declaration name="result" type="Object" line="483"/>
            </method>
            <javadoc line="489">
                Sets the given roles.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;Will send one notification (RelationNotification with type
                  RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                  relation is a MBean or not) per updated role.                
                <param>
                    list  list of roles to be set                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully set) and a RoleUnresolvedList (for roles not
                      set).                    
                </return>
                <exception>
                    IllegalArgumentException  if null role list                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service.                    
                </exception>
                <exception>
                    RelationNotFoundException  if the relation MBean has not been
                      added in the Relation Service.                    
                </exception>
                <see>
                    #getRoles                    
                </see>
            </javadoc>
            <method name="setRoles" type="RoleResult" line="517">
                <params>
                    <param name="list" type="RoleList"/>
                </params>
                <scope line="519">
                    <declaration name="excMsg" type="String" line="520"/>
                </scope>
                <declaration name="result" type="RoleResult" line="527"/>
            </method>
            <javadoc line="533">
                Callback used by the Relation Service when a MBean referenced in a role
                  is unregistered.
                  &lt;P&gt;The Relation Service will call this method to let the relation
                  take action to reflect the impact of such unregistration.
                  &lt;P&gt;BEWARE. the user is not expected to call this method.
                  &lt;P&gt;Current implementation is to set the role with its current value
                  (list of ObjectNames of referenced MBeans) without the unregistered
                  one.                
                <param>
                    objectName  ObjectName of unregistered MBean                    
                </param>
                <param>
                    roleName  name of role where the MBean is referenced                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RoleNotFoundException  if role does not exist in the
                      relation or is not writable                    
                </exception>
                <exception>
                    InvalidRoleValueException  if role value does not conform to
                      the associated role info (this will never happen when called from the
                      Relation Service)                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service.                    
                </exception>
                <exception>
                    RelationNotFoundException  if this method is called for a
                      relation MBean not added in the Relation Service.                    
                </exception>
            </javadoc>
            <method name="handleMBeanUnregistration" type="void" line="566">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="577">
                    Can throw RoleNotFoundException, InvalidRoleValueException,                    
                </comment>
                <comment line="578">
                    or RelationTypeNotFoundException                    
                </comment>
                <scope line="568">
                    <declaration name="excMsg" type="String" line="569"/>
                </scope>
            </method>
            <javadoc line="589">
                Retrieves MBeans referenced in the various roles of the relation.                
                <return>
                    a HashMap mapping:
                      <P> ObjectName -> ArrayList of String (role names)                    
                </return>
            </javadoc>
            <method name="getReferencedMBeans" type="Map<ObjectName,List<String>>" line="595">
                <comment line="608">
                    Retrieves ObjectNames of MBeans referenced in current role                    
                </comment>
                <comment line="613">
                    Sees if current MBean has been already referenced in                    
                </comment>
                <comment line="614">
                    roles already seen                    
                </comment>
                <declaration name="refMBeanMap" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="600"/>
                <scope line="603">
                    <scope line="605">
                        <declaration name="currRoleName" type="String" line="607"/>
                        <declaration name="currRefMBeanList" type="List&lt;ObjectName&gt;" line="609"/>
                        <scope line="611">
                            <declaration name="mbeanRoleNameList" type="List&lt;String&gt;" line="615"/>
                            <declaration name="newRefFlg" type="boolean" line="618"/>
                            <scope line="619"/>
                            <scope line="624"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="636">
                Returns name of associated relation type.                
            </javadoc>
            <method name="getRelationTypeName" type="String" line="639"/>
            <javadoc line="643">
                Returns ObjectName of the Relation Service handling the relation.                
                <return>
                    the ObjectName of the Relation Service.                    
                </return>
            </javadoc>
            <method name="getRelationServiceName" type="ObjectName" line="648"/>
            <javadoc line="652">
                Returns relation identifier (used to uniquely identify the relation
                  inside the Relation Service).                
                <return>
                    the relation id.                    
                </return>
            </javadoc>
            <method name="getRelationId" type="String" line="658"/>
            <method name="preRegister" type="ObjectName" line="674">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="postRegister" type="void" line="681">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <method name="preDeregister" type="void" line="687"/>
            <method name="postDeregister" type="void" line="692"/>
            <javadoc line="700">
                Returns an internal flag specifying if the object is still handled by
                  the Relation Service.                
            </javadoc>
            <method name="isInRelationService" type="Boolean" line="704"/>
            <method name="setRelationServiceManagementFlag" type="void" line="709">
                <params>
                    <param name="flag" type="Boolean"/>
                </params>
                <scope line="711">
                    <declaration name="excMsg" type="String" line="712"/>
                </scope>
            </method>
            <method name="getRoleInt" type="Object" line="774">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                    <param name="multiRoleFlg" type="boolean"/>
                </params>
                <comment line="789">
                    No null Role is allowed, so direct use of get()                    
                </comment>
                <comment line="797">
                    Checks if the role is readable                    
                </comment>
                <comment line="802">
                    Call from the Relation Service, so direct access to it,                    
                </comment>
                <comment line="803">
                    avoiding MBean Server                    
                </comment>
                <comment line="804">
                    Shall not throw a RelationTypeNotFoundException                    
                </comment>
                <comment line="814">
                    Call from getRole() method above                    
                </comment>
                <comment line="815">
                    So we have a MBean. We must access the Relation Service                    
                </comment>
                <comment line="816">
                    via the MBean Server.                    
                </comment>
                <comment line="823">
                    Can throw InstanceNotFoundException if the Relation                    
                </comment>
                <comment line="824">
                    Service is not registered (to be catched in any case and                    
                </comment>
                <comment line="825">
                    transformed into RelationServiceNotRegisteredException).                    
                </comment>
                <comment line="826">
                                        
                </comment>
                <comment line="827">
                    Shall not throw a MBeanException, or a ReflectionException                    
                </comment>
                <comment line="828">
                    or an InstanceNotFoundException                    
                </comment>
                <comment line="851">
                    Role can be retrieved                    
                </comment>
                <comment line="854">
                    Single role retrieved: returns its value                    
                </comment>
                <comment line="855">
                    Note: no need to test if role value (list) not null before                    
                </comment>
                <comment line="856">
                    cloning, null value not allowed, empty list if                    
                </comment>
                <comment line="857">
                    nothing.                    
                </comment>
                <comment line="861">
                    Role retrieved during multi-role retrieval: returns the                    
                </comment>
                <comment line="862">
                    role                    
                </comment>
                <comment line="867">
                    Role not retrieved                    
                </comment>
                <comment line="870">
                    Problem when retrieving a simple role: either role not                    
                </comment>
                <comment line="871">
                    found or not readable, so raises a RoleNotFoundException.                    
                </comment>
                <comment line="875">
                    To keep compiler happy :)                    
                </comment>
                <comment line="882">
                    Problem when retrieving a role in a multi-role retrieval:                    
                </comment>
                <comment line="883">
                    returns a RoleUnresolved object                    
                </comment>
                <scope line="777">
                    <declaration name="excMsg" type="String" line="778"/>
                </scope>
                <declaration name="pbType" type="int" line="785"/>
                <declaration name="role" type="Role" line="787"/>
                <scope line="788"/>
                <scope line="793"/>
                <scope line="796">
                    <declaration name="status" type="Integer" line="798"/>
                    <scope line="800">
                        <scope line="805"/>
                        <scope line="808"/>
                    </scope>
                    <scope line="812">
                        <declaration name="params" type="Object[]" line="817"/>
                        <declaration name="signature" type="String[]" line="820"/>
                        <scope line="829"/>
                        <scope line="835"/>
                        <scope line="837"/>
                        <scope line="839"/>
                    </scope>
                </scope>
                <declaration name="result" type="Object" line="848"/>
                <scope line="850">
                    <scope line="853"/>
                    <scope line="860"/>
                </scope>
                <scope line="866">
                    <scope line="869">
                        <scope line="872"/>
                        <scope line="877"/>
                    </scope>
                    <scope line="881"/>
                </scope>
            </method>
            <method name="getRolesInt" type="RoleResult" line="916">
                <params>
                    <param name="roleNameArray" type="String[]"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="935">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <comment line="936">
                                        
                </comment>
                <comment line="937">
                    RoleNotFoundException: not possible but catch it for compiler :)                    
                </comment>
                <comment line="945">
                    :)                    
                </comment>
                <comment line="949">
                    Can throw IllegalArgumentException if role is null                    
                </comment>
                <comment line="950">
                    (normally should not happen :(                    
                </comment>
                <comment line="958">
                    Can throw IllegalArgumentException if role is null                    
                </comment>
                <comment line="959">
                    (normally should not happen :(                    
                </comment>
                <scope line="919">
                    <declaration name="excMsg" type="String" line="920"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="927"/>
                <declaration name="roleUnresList" type="RoleUnresolvedList" line="928"/>
                <scope line="930">
                    <declaration name="currRoleName" type="String" line="931"/>
                    <declaration name="currResult" type="Object" line="933"/>
                    <scope line="938"/>
                    <scope line="944"/>
                    <scope line="948">
                        <scope line="951"/>
                        <scope line="953"/>
                    </scope>
                    <scope line="957">
                        <scope line="960"/>
                        <scope line="962"/>
                    </scope>
                </scope>
                <declaration name="result" type="RoleResult" line="968"/>
            </method>
            <method name="getAllRolesInt" type="RoleResult" line="987">
                <params>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="989">
                    <declaration name="excMsg" type="String" line="990"/>
                </scope>
                <declaration name="roleNameList" type="List&lt;String&gt;" line="997"/>
                <scope line="998"/>
                <declaration name="roleNames" type="String[]" line="1002"/>
                <declaration name="result" type="RoleResult" line="1005"/>
            </method>
            <method name="setRoleInt" type="Object" line="1078">
                <params>
                    <param name="aRole" type="Role"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                    <param name="multiRoleFlg" type="boolean"/>
                </params>
                <comment line="1093">
                    Checks if role exists in the relation                    
                </comment>
                <comment line="1094">
                    No error if the role does not exist in the relation, to be able to                    
                </comment>
                <comment line="1095">
                    handle initialization of role when creating the relation                    
                </comment>
                <comment line="1096">
                    (roles provided in the RoleList parameter are directly set but                    
                </comment>
                <comment line="1097">
                    roles automatically initialized are set using setRole())                    
                </comment>
                <comment line="1115">
                    Checks if the role can be set: is writable (except if                    
                </comment>
                <comment line="1116">
                    initialization) and correct value                    
                </comment>
                <comment line="1122">
                    Call from the Relation Service, so direct access to it,                    
                </comment>
                <comment line="1123">
                    avoiding MBean Server                    
                </comment>
                <comment line="1124">
                                        
                </comment>
                <comment line="1125">
                    Shall not raise a RelationTypeNotFoundException                    
                </comment>
                <comment line="1132">
                    Call from setRole() method above                    
                </comment>
                <comment line="1133">
                    So we have a MBean. We must access the Relation Service                    
                </comment>
                <comment line="1134">
                    via the MBean Server.                    
                </comment>
                <comment line="1143">
                    Can throw InstanceNotFoundException if the Relation Service                    
                </comment>
                <comment line="1144">
                    is not registered (to be transformed into                    
                </comment>
                <comment line="1145">
                    RelationServiceNotRegisteredException in any case).                    
                </comment>
                <comment line="1146">
                                        
                </comment>
                <comment line="1147">
                    Can throw a MBeanException wrapping a                    
                </comment>
                <comment line="1148">
                    RelationTypeNotFoundException:                    
                </comment>
                <comment line="1149">
                    throw wrapped exception.                    
                </comment>
                <comment line="1150">
                                        
                </comment>
                <comment line="1151">
                    Shall not throw a ReflectionException                    
                </comment>
                <comment line="1163">
                    Retrieves underlying exception                    
                </comment>
                <comment line="1185">
                    Role can be set                    
                </comment>
                <comment line="1188">
                    Not initializing the role                    
                </comment>
                <comment line="1189">
                    If role being initialized:                    
                </comment>
                <comment line="1190">
                    - do not send an update notification                    
                </comment>
                <comment line="1191">
                    - do not try to update internal map of Relation Service                    
                </comment>
                <comment line="1192">
                    listing referenced MBeans, as role is initialized to an                    
                </comment>
                <comment line="1193">
                    empty list                    
                </comment>
                <comment line="1195">
                    Sends a notification (RelationNotification)                    
                </comment>
                <comment line="1196">
                    Can throw a RelationNotFoundException                    
                </comment>
                <comment line="1202">
                    Updates the role map of the Relation Service                    
                </comment>
                <comment line="1203">
                    Can throw RelationNotFoundException                    
                </comment>
                <comment line="1211">
                    Sets the role                    
                </comment>
                <comment line="1217">
                    Single role set: returns null: nothing to set in result                    
                </comment>
                <comment line="1220">
                    Multi-roles retrieval: returns the role                    
                </comment>
                <comment line="1226">
                    Role not set                    
                </comment>
                <comment line="1229">
                    Problem when setting a simple role: either role not                    
                </comment>
                <comment line="1230">
                    found, not writable, or incorrect value:                    
                </comment>
                <comment line="1231">
                    raises appropriate exception, RoleNotFoundException or                    
                </comment>
                <comment line="1232">
                    InvalidRoleValueException                    
                </comment>
                <comment line="1235">
                    To keep compiler happy :)                    
                </comment>
                <comment line="1239">
                    Problem when retrieving a role in a multi-role retrieval:                    
                </comment>
                <comment line="1240">
                    returns a RoleUnresolved object                    
                </comment>
                <scope line="1081">
                    <declaration name="excMsg" type="String" line="1082"/>
                </scope>
                <declaration name="roleName" type="String" line="1090"/>
                <declaration name="pbType" type="int" line="1091"/>
                <declaration name="role" type="Role" line="1098"/>
                <scope line="1099"/>
                <declaration name="oldRoleValue" type="List&lt;ObjectName&gt;" line="1103"/>
                <declaration name="initFlg" type="Boolean" line="1104"/>
                <scope line="1106"/>
                <scope line="1110"/>
                <scope line="1117">
                    <declaration name="status" type="Integer" line="1118"/>
                    <scope line="1120"/>
                    <scope line="1130">
                        <declaration name="params" type="Object[]" line="1135"/>
                        <declaration name="signature" type="String[]" line="1139"/>
                    </scope>
                </scope>
                <scope line="1161">
                    <declaration name="wrappedExc" type="Exception" line="1164"/>
                    <scope line="1165"/>
                    <scope line="1168"/>
                </scope>
                <scope line="1172"/>
                <scope line="1175"/>
                <scope line="1178"/>
                <declaration name="result" type="Object" line="1182"/>
                <scope line="1184">
                    <scope line="1186"/>
                    <scope line="1212"/>
                    <scope line="1219"/>
                </scope>
                <scope line="1224">
                    <scope line="1228"/>
                    <scope line="1238"/>
                </scope>
            </method>
            <method name="sendRoleUpdateNotification" type="void" line="1280">
                <params>
                    <param name="newRole" type="Role"/>
                    <param name="oldRoleValue" type="List<ObjectName>"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1294">
                    Direct call to the Relation Service                    
                </comment>
                <comment line="1295">
                    Shall not throw a RelationNotFoundException for an internal                    
                </comment>
                <comment line="1296">
                    relation                    
                </comment>
                <comment line="1316">
                    Can throw InstanceNotFoundException if the Relation Service                    
                </comment>
                <comment line="1317">
                    is not registered (to be transformed).                    
                </comment>
                <comment line="1318">
                                        
                </comment>
                <comment line="1319">
                    Can throw a MBeanException wrapping a                    
                </comment>
                <comment line="1320">
                    RelationNotFoundException (to be raised in any case): wrapped                    
                </comment>
                <comment line="1321">
                    exception to be thrown                    
                </comment>
                <comment line="1322">
                                        
                </comment>
                <comment line="1323">
                    Shall not throw a ReflectionException                    
                </comment>
                <scope line="1284">
                    <declaration name="excMsg" type="String" line="1285"/>
                </scope>
                <scope line="1293">
                    <scope line="1297"/>
                    <scope line="1301"/>
                </scope>
                <scope line="1305">
                    <declaration name="params" type="Object[]" line="1307"/>
                    <declaration name="signature" type="String[]" line="1311"/>
                    <scope line="1324"/>
                    <scope line="1329"/>
                    <scope line="1331"/>
                    <scope line="1334">
                        <declaration name="wrappedExc" type="Exception" line="1335"/>
                        <scope line="1336"/>
                        <scope line="1338"/>
                    </scope>
                </scope>
            </method>
            <method name="updateRelationServiceMap" type="void" line="1377">
                <params>
                    <param name="newRole" type="Role"/>
                    <param name="oldRoleValue" type="List<ObjectName>"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1391">
                    Direct call to the Relation Service                    
                </comment>
                <comment line="1392">
                    Shall not throw a RelationNotFoundException                    
                </comment>
                <comment line="1410">
                    Can throw InstanceNotFoundException if the Relation Service                    
                </comment>
                <comment line="1411">
                    is not registered (to be transformed).                    
                </comment>
                <comment line="1412">
                    Can throw a MBeanException wrapping a RelationNotFoundException:                    
                </comment>
                <comment line="1413">
                    wrapped exception to be thrown                    
                </comment>
                <comment line="1414">
                                        
                </comment>
                <comment line="1415">
                    Shall not throw a ReflectionException                    
                </comment>
                <scope line="1381">
                    <declaration name="excMsg" type="String" line="1382"/>
                </scope>
                <scope line="1390">
                    <scope line="1393"/>
                    <scope line="1397"/>
                </scope>
                <scope line="1401">
                    <declaration name="params" type="Object[]" line="1402"/>
                    <declaration name="signature" type="String[]" line="1406"/>
                    <scope line="1416"/>
                    <scope line="1421"/>
                    <scope line="1423"/>
                    <scope line="1426">
                        <declaration name="wrappedExc" type="Exception" line="1427"/>
                        <scope line="1428"/>
                        <scope line="1430"/>
                    </scope>
                </scope>
            </method>
            <method name="setRolesInt" type="RoleResult" line="1479">
                <params>
                    <param name="list" type="RoleList"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1497">
                    Can throw:                    
                </comment>
                <comment line="1498">
                    RelationServiceNotRegisteredException,                    
                </comment>
                <comment line="1499">
                    RelationTypeNotFoundException                    
                </comment>
                <comment line="1500">
                                        
                </comment>
                <comment line="1501">
                    Will not throw, due to parameters, RoleNotFoundException or                    
                </comment>
                <comment line="1502">
                    InvalidRoleValueException, but catch them to keep compiler                    
                </comment>
                <comment line="1503">
                    happy                    
                </comment>
                <comment line="1510">
                    OK : Do not throw a RoleNotFoundException.                    
                </comment>
                <comment line="1512">
                    OK : Do not throw an InvalidRoleValueException.                    
                </comment>
                <comment line="1516">
                    Can throw IllegalArgumentException if role is null                    
                </comment>
                <comment line="1517">
                    (normally should not happen :(                    
                </comment>
                <comment line="1525">
                    Can throw IllegalArgumentException if role is null                    
                </comment>
                <comment line="1526">
                    (normally should not happen :(                    
                </comment>
                <scope line="1482">
                    <declaration name="excMsg" type="String" line="1483"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="1491"/>
                <declaration name="roleUnresList" type="RoleUnresolvedList" line="1492"/>
                <scope line="1494">
                    <declaration name="currResult" type="Object" line="1496"/>
                    <scope line="1504"/>
                    <scope line="1509"/>
                    <scope line="1511"/>
                    <scope line="1515">
                        <scope line="1518"/>
                        <scope line="1520"/>
                    </scope>
                    <scope line="1524">
                        <scope line="1527"/>
                        <scope line="1529"/>
                    </scope>
                </scope>
                <declaration name="result" type="RoleResult" line="1535"/>
            </method>
            <method name="initMembers" type="void" line="1572">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationServiceMBeanServer" type="MBeanServer"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="1589">
                    Can throw InvalidRoleValueException                    
                </comment>
                <scope line="1576">
                    <declaration name="excMsg" type="String" line="1577"/>
                </scope>
            </method>
            <method name="initRoleMap" type="void" line="1605">
                <params>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="1618">
                    No need to check if role is null, it is not allowed to store                    
                </comment>
                <comment line="1619">
                    a null role in a RoleList :)                    
                </comment>
                <comment line="1623">
                    Role already provided in current list                    
                </comment>
                <scope line="1607"/>
                <scope line="1614">
                    <scope line="1616">
                        <declaration name="currRoleName" type="String" line="1620"/>
                        <scope line="1622">
                            <declaration name="excMsgStrB" type="StringBuilder" line="1624"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="handleMBeanUnregistrationInt" type="void" line="1686">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleName" type="String"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1699">
                    Retrieves current role value                    
                </comment>
                <comment line="1714">
                    Note: no need to test if list not null before cloning, null value                    
                </comment>
                <comment line="1715">
                    not allowed for role value.                    
                </comment>
                <comment line="1720">
                    Can throw InvalidRoleValueException,                    
                </comment>
                <comment line="1721">
                    RelationTypeNotFoundException                    
                </comment>
                <comment line="1722">
                    (RoleNotFoundException already detected)                    
                </comment>
                <scope line="1690">
                    <declaration name="excMsg" type="String" line="1691"/>
                </scope>
                <declaration name="role" type="Role" line="1700"/>
                <scope line="1701"/>
                <scope line="1705">
                    <declaration name="excMsgStrB" type="StringBuilder" line="1706"/>
                    <declaration name="excMsg" type="String" line="1707"/>
                </scope>
                <declaration name="currRoleValue" type="List&lt;ObjectName&gt;" line="1712"/>
                <declaration name="newRoleValue" type="List&lt;ObjectName&gt;" line="1716"/>
                <declaration name="newRole" type="Role" line="1718"/>
                <declaration name="result" type="Object" line="1723"/>
            </method>
        </class>
    </source>