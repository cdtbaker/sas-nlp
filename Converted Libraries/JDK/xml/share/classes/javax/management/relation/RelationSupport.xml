<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <class name="RelationSupport" line="16">
            <implements interface="RelationSupportMBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="16">
                A RelationSupport object is used internally by the Relation Service to
                  represent simple relations (only roles, no properties or methods), with an
                  unlimited number of roles, of any relation type. As internal representation,
                  it is not exposed to the user.
                  &lt;P&gt;RelationSupport class conforms to the design patterns of standard MBean. So
                  the user can decide to instantiate a RelationSupport object himself as
                  a MBean (as it follows the MBean design patterns), to register it in the
                  MBean Server, and then to add it in the Relation Service.
                  &lt;P&gt;The user can also, when creating his own MBean relation class, have it
                  extending RelationSupport, to retrieve the implementations of required
                  interfaces (see below).
                  &lt;P&gt;It is also possible to have in a user relation MBean class a member
                  being a RelationSupport object, and to implement the required interfaces by
                  delegating all to this member.
                  &lt;P&gt; RelationSupport implements the Relation interface (to be handled by the
                  Relation Service).
                  &lt;P&gt;It implements also the MBeanRegistration interface to be able to retrieve
                  the MBean Server where it is registered (if registered as a MBean) to access
                  to its Relation Service.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="myRelId" type="String" line="39"/>
            <declaration name="myRelServiceName" type="ObjectName" line="40"/>
            <declaration name="myRelServiceMBeanServer" type="MBeanServer" line="41"/>
            <declaration name="myRelTypeName" type="String" line="42"/>
            <declaration name="myRoleName2ValueMap" type="Map&lt;String,Role&gt;" line="43"/>
            <declaration name="myInRelServFlg" type="AtomicBoolean" line="44"/>
            <javadoc line="45">
                Creates a {@code RelationSupport} object.
                  &lt;P&gt;This constructor has to be used when the RelationSupport object will
                  be registered as a MBean by the user, or when creating a user relation
                  MBean whose class extends RelationSupport.
                  &lt;P&gt;Nothing is done at the Relation Service level, i.e.
                  the {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed to
                  see if the provided values are correct.
                  The object is always created, EXCEPT if:
                  &lt;P&gt;- any of the required parameters is {@code null}.
                  &lt;P&gt;- the same name is used for two roles.
                  &lt;P&gt;To be handled as a relation, the {@code RelationSupport} object has
                  to be added to the Relation Service using the Relation Service method
                  addRelation().                
                <param>
                    relationId  relation identifier, to identify the relation in the
                      Relation Service.
                      <P>Expected to be unique in the given Relation Service.                    
                </param>
                <param>
                    relationServiceName  ObjectName of the Relation Service where
                      the relation will be registered.
                      <P>This parameter is required as it is the Relation Service that is
                      aware of the definition of the relation type of the given relation,
                      so that will be able to check update operations (set).                    
                </param>
                <param>
                    relationTypeName  Name of relation type.
                      <P>Expected to have been created in the given Relation Service.                    
                </param>
                <param>
                    list  list of roles (Role objects) to initialize the
                      relation. Can be {@code null}.
                      <P>Expected to conform to relation info in associated relation type.                    
                </param>
                <exception>
                    InvalidRoleValueException  if the same name is used for two
                      roles.                    
                </exception>
                <exception>
                    IllegalArgumentException  if any of the required parameters
                      (relation id, relation service ObjectName, or relation type name) is{@code null}.                    
                </exception>
            </javadoc>
            <method name="RelationSupport" type="constructor" line="77">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
            </method>
            <javadoc line="83">
                Creates a {@code RelationSupport} object.
                  &lt;P&gt;This constructor has to be used when the user relation MBean
                  implements the interfaces expected to be supported by a relation by
                  delegating to a RelationSupport object.
                  &lt;P&gt;This object needs to know the Relation Service expected to handle the
                  relation. So it has to know the MBean Server where the Relation Service
                  is registered.
                  &lt;P&gt;According to a limitation, a relation MBean must be registered in the
                  same MBean Server as the Relation Service expected to handle it. So the
                  user relation MBean has to be created and registered, and then the
                  wrapped RelationSupport object can be created within the identified MBean
                  Server.
                  &lt;P&gt;Nothing is done at the Relation Service level, i.e.
                  the {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed to
                  see if the provided values are correct.
                  The object is always created, EXCEPT if:
                  &lt;P&gt;- any of the required parameters is {@code null}.
                  &lt;P&gt;- the same name is used for two roles.
                  &lt;P&gt;To be handled as a relation, the {@code RelationSupport} object has
                  to be added to the Relation Service using the Relation Service method
                  addRelation().                
                <param>
                    relationId  relation identifier, to identify the relation in the
                      Relation Service.
                      <P>Expected to be unique in the given Relation Service.                    
                </param>
                <param>
                    relationServiceName  ObjectName of the Relation Service where
                      the relation will be registered.
                      <P>This parameter is required as it is the Relation Service that is
                      aware of the definition of the relation type of the given relation,
                      so that will be able to check update operations (set).                    
                </param>
                <param>
                    relationServiceMBeanServer  MBean Server where the wrapping MBean
                      is or will be registered.
                      <P>Expected to be the MBean Server where the Relation Service is or will
                      be registered.                    
                </param>
                <param>
                    relationTypeName  Name of relation type.
                      <P>Expected to have been created in the given Relation Service.                    
                </param>
                <param>
                    list  list of roles (Role objects) to initialize the
                      relation. Can be {@code null}.
                      <P>Expected to conform to relation info in associated relation type.                    
                </param>
                <exception>
                    InvalidRoleValueException  if the same name is used for two
                      roles.                    
                </exception>
                <exception>
                    IllegalArgumentException  if any of the required parameters
                      (relation id, relation service ObjectName, relation service MBeanServer,
                      or relation type name) is {@code null}.                    
                </exception>
            </javadoc>
            <method name="RelationSupport" type="constructor" line="128">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationServiceMBeanServer" type="MBeanServer"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <scope line="130">
                    <declaration name="excMsg" type="String" line="131"/>
                </scope>
            </method>
            <javadoc line="138">
                Retrieves role value for given role name.
                  &lt;P&gt;Checks if the role exists and is readable according to the relation
                  type.                
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the ArrayList of ObjectName objects being the role value                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RoleNotFoundException  if:
                      <P>- there is no role with given name
                      <P>- the role is not readable.                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <see>
                    #setRole                    
                </see>
            </javadoc>
            <method name="getRole" type="List<ObjectName>" line="152">
                <params>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="153">
                    <declaration name="excMsg" type="String" line="154"/>
                </scope>
                <declaration name="result" type="List&lt;ObjectName&gt;" line="158"/>
            </method>
            <javadoc line="162">
                Retrieves values of roles with given names.
                  &lt;P&gt;Checks for each role if it exists and is readable according to the
                  relation type.                
                <param>
                    roleNameArray  array of names of roles to be retrieved                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      retrieved).                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <see>
                    #setRoles                    
                </see>
            </javadoc>
            <method name="getRoles" type="RoleResult" line="175">
                <params>
                    <param name="roleNameArray" type="String[]"/>
                </params>
                <scope line="176">
                    <declaration name="excMsg" type="String" line="177"/>
                </scope>
                <declaration name="result" type="RoleResult" line="181"/>
            </method>
            <javadoc line="185">
                Returns all roles present in the relation.                
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      readable).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
            </javadoc>
            <method name="getAllRoles" type="RoleResult" line="193">
                <declaration name="result" type="RoleResult" line="195"/>
                <scope line="196"/>
                <scope line="199"/>
            </method>
            <javadoc line="204">
                Returns all roles in the relation without checking read mode.                
                <return>
                    a RoleList                    
                </return>
            </javadoc>
            <method name="retrieveAllRoles" type="RoleList" line="208">
                <declaration name="result" type="RoleList" line="210"/>
                <scope line="211"/>
            </method>
            <javadoc line="217">
                Returns the number of MBeans currently referenced in the given role.                
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the number of currently referenced MBeans in that role                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with given name                    
                </exception>
            </javadoc>
            <method name="getRoleCardinality" type="Integer" line="224">
                <params>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="225">
                    <declaration name="excMsg" type="String" line="226"/>
                </scope>
                <declaration name="role" type="Role" line="230"/>
                <scope line="231"/>
                <scope line="234">
                    <declaration name="pbType" type="int" line="235"/>
                    <scope line="236"/>
                    <scope line="239"/>
                </scope>
                <declaration name="roleValue" type="List&lt;ObjectName&gt;" line="242"/>
            </method>
            <javadoc line="246">
                Sets the given role.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;Will send a notification (RelationNotification with type
                  RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                  relation is a MBean or not).                
                <param>
                    role  role to be set (name and new value)                    
                </param>
                <exception>
                    IllegalArgumentException  if null role                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with the supplied
                      role's name or if the role is not writable (no test on the write access
                      mode performed when initializing the role)                    
                </exception>
                <exception>
                    InvalidRoleValueException  if value provided for
                      role is not valid, i.e.:
                      <P>- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      <P>- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      <P>- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      <P>- a MBean provided for that role does not exist                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service                    
                </exception>
                <exception>
                    RelationNotFoundException  if the relation has not been
                      added in the Relation Service.                    
                </exception>
                <see>
                    #getRole                    
                </see>
            </javadoc>
            <method name="setRole" type="void" line="275">
                <params>
                    <param name="role" type="Role"/>
                </params>
                <scope line="276">
                    <declaration name="excMsg" type="String" line="277"/>
                </scope>
                <declaration name="result" type="Object" line="281"/>
            </method>
            <javadoc line="285">
                Sets the given roles.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;Will send one notification (RelationNotification with type
                  RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                  relation is a MBean or not) per updated role.                
                <param>
                    list  list of roles to be set                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully set) and a RoleUnresolvedList (for roles not
                      set).                    
                </return>
                <exception>
                    IllegalArgumentException  if null role list                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service.                    
                </exception>
                <exception>
                    RelationNotFoundException  if the relation MBean has not been
                      added in the Relation Service.                    
                </exception>
                <see>
                    #getRoles                    
                </see>
            </javadoc>
            <method name="setRoles" type="RoleResult" line="305">
                <params>
                    <param name="list" type="RoleList"/>
                </params>
                <scope line="306">
                    <declaration name="excMsg" type="String" line="307"/>
                </scope>
                <declaration name="result" type="RoleResult" line="311"/>
            </method>
            <javadoc line="315">
                Callback used by the Relation Service when a MBean referenced in a role
                  is unregistered.
                  &lt;P&gt;The Relation Service will call this method to let the relation
                  take action to reflect the impact of such unregistration.
                  &lt;P&gt;BEWARE. the user is not expected to call this method.
                  &lt;P&gt;Current implementation is to set the role with its current value
                  (list of ObjectNames of referenced MBeans) without the unregistered
                  one.                
                <param>
                    objectName  ObjectName of unregistered MBean                    
                </param>
                <param>
                    roleName  name of role where the MBean is referenced                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RoleNotFoundException  if role does not exist in the
                      relation or is not writable                    
                </exception>
                <exception>
                    InvalidRoleValueException  if role value does not conform to
                      the associated role info (this will never happen when called from the
                      Relation Service)                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service.                    
                </exception>
                <exception>
                    RelationNotFoundException  if this method is called for a
                      relation MBean not added in the Relation Service.                    
                </exception>
            </javadoc>
            <method name="handleMBeanUnregistration" type="void" line="339">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleName" type="String"/>
                </params>
                <scope line="340">
                    <declaration name="excMsg" type="String" line="341"/>
                </scope>
            </method>
            <javadoc line="349">
                Retrieves MBeans referenced in the various roles of the relation.                
                <return>
                    a HashMap mapping:
                      <P> ObjectName -> ArrayList of String (role names)                    
                </return>
            </javadoc>
            <method name="getReferencedMBeans" type="Map<ObjectName,List<String>>" line="354">
                <declaration name="refMBeanMap" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="356"/>
                <scope line="357">
                    <scope line="358">
                        <declaration name="currRoleName" type="String" line="359"/>
                        <declaration name="currRefMBeanList" type="List&lt;ObjectName&gt;" line="360"/>
                        <scope line="361">
                            <declaration name="mbeanRoleNameList" type="List&lt;String&gt;" line="362"/>
                            <declaration name="newRefFlg" type="boolean" line="363"/>
                            <scope line="364"/>
                            <scope line="369"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="378">
                Returns name of associated relation type.                
            </javadoc>
            <method name="getRelationTypeName" type="String" line="381"/>
            <javadoc line="384">
                Returns ObjectName of the Relation Service handling the relation.                
                <return>
                    the ObjectName of the Relation Service.                    
                </return>
            </javadoc>
            <method name="getRelationServiceName" type="ObjectName" line="388"/>
            <javadoc line="391">
                Returns relation identifier (used to uniquely identify the relation
                  inside the Relation Service).                
                <return>
                    the relation id.                    
                </return>
            </javadoc>
            <method name="getRelationId" type="String" line="396"/>
            <method name="preRegister" type="ObjectName" line="399">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="postRegister" type="void" line="403">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <method name="preDeregister" type="void" line="406"/>
            <method name="postDeregister" type="void" line="409"/>
            <javadoc line="412">
                Returns an internal flag specifying if the object is still handled by
                  the Relation Service.                
            </javadoc>
            <method name="isInRelationService" type="Boolean" line="416"/>
            <method name="setRelationServiceManagementFlag" type="void" line="419">
                <params>
                    <param name="flag" type="Boolean"/>
                </params>
                <scope line="420">
                    <declaration name="excMsg" type="String" line="421"/>
                </scope>
            </method>
            <method name="getRoleInt" type="Object" line="426">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                    <param name="multiRoleFlg" type="boolean"/>
                </params>
                <scope line="427">
                    <declaration name="excMsg" type="String" line="428"/>
                </scope>
                <declaration name="pbType" type="int" line="432"/>
                <declaration name="role" type="Role" line="433"/>
                <scope line="434"/>
                <scope line="437"/>
                <scope line="440">
                    <declaration name="status" type="Integer" line="441"/>
                    <scope line="442">
                        <scope line="443"/>
                        <scope line="446"/>
                    </scope>
                    <scope line="450">
                        <declaration name="params" type="Object[]" line="451"/>
                        <declaration name="signature" type="String[]" line="454"/>
                        <scope line="457"/>
                        <scope line="460"/>
                        <scope line="463"/>
                        <scope line="466"/>
                    </scope>
                </scope>
                <declaration name="result" type="Object" line="472"/>
                <scope line="473">
                    <scope line="474"/>
                    <scope line="477"/>
                </scope>
                <scope line="481">
                    <scope line="482">
                        <scope line="483"/>
                        <scope line="487"/>
                    </scope>
                    <scope line="491"/>
                </scope>
            </method>
            <method name="getRolesInt" type="RoleResult" line="498">
                <params>
                    <param name="roleNameArray" type="String[]"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="499">
                    <declaration name="excMsg" type="String" line="500"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="504"/>
                <declaration name="roleUnresList" type="RoleUnresolvedList" line="505"/>
                <scope line="506">
                    <declaration name="currRoleName" type="String" line="507"/>
                    <declaration name="currResult" type="Object" line="508"/>
                    <scope line="509"/>
                    <scope line="512"/>
                    <scope line="515">
                        <scope line="516"/>
                        <scope line="519"/>
                    </scope>
                    <scope line="523">
                        <scope line="524"/>
                        <scope line="527"/>
                    </scope>
                </scope>
                <declaration name="result" type="RoleResult" line="532"/>
            </method>
            <method name="getAllRolesInt" type="RoleResult" line="536">
                <params>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="537">
                    <declaration name="excMsg" type="String" line="538"/>
                </scope>
                <declaration name="roleNameList" type="List&lt;String&gt;" line="542"/>
                <scope line="543"/>
                <declaration name="roleNames" type="String[]" line="546"/>
                <declaration name="result" type="RoleResult" line="548"/>
            </method>
            <method name="setRoleInt" type="Object" line="552">
                <params>
                    <param name="aRole" type="Role"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                    <param name="multiRoleFlg" type="boolean"/>
                </params>
                <scope line="553">
                    <declaration name="excMsg" type="String" line="554"/>
                </scope>
                <declaration name="roleName" type="String" line="558"/>
                <declaration name="pbType" type="int" line="559"/>
                <declaration name="role" type="Role" line="560"/>
                <scope line="561"/>
                <declaration name="oldRoleValue" type="List&lt;ObjectName&gt;" line="564"/>
                <declaration name="initFlg" type="Boolean" line="565"/>
                <scope line="566"/>
                <scope line="570"/>
                <scope line="574">
                    <declaration name="status" type="Integer" line="575"/>
                    <scope line="576"/>
                    <scope line="579">
                        <declaration name="params" type="Object[]" line="580"/>
                        <declaration name="signature" type="String[]" line="584"/>
                    </scope>
                </scope>
                <scope line="592">
                    <declaration name="wrappedExc" type="Exception" line="593"/>
                    <scope line="594"/>
                    <scope line="597"/>
                </scope>
                <scope line="601"/>
                <scope line="604"/>
                <scope line="607"/>
                <declaration name="result" type="Object" line="610"/>
                <scope line="611">
                    <scope line="612"/>
                    <scope line="616"/>
                    <scope line="619"/>
                </scope>
                <scope line="623">
                    <scope line="624"/>
                    <scope line="628"/>
                </scope>
            </method>
            <method name="sendRoleUpdateNotification" type="void" line="635">
                <params>
                    <param name="newRole" type="Role"/>
                    <param name="oldRoleValue" type="List<ObjectName>"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="636">
                    <declaration name="excMsg" type="String" line="637"/>
                </scope>
                <scope line="641">
                    <scope line="642"/>
                    <scope line="645"/>
                </scope>
                <scope line="649">
                    <declaration name="params" type="Object[]" line="650"/>
                    <declaration name="signature" type="String[]" line="654"/>
                    <scope line="658"/>
                    <scope line="661"/>
                    <scope line="664"/>
                    <scope line="667">
                        <declaration name="wrappedExc" type="Exception" line="668"/>
                        <scope line="669"/>
                        <scope line="672"/>
                    </scope>
                </scope>
            </method>
            <method name="updateRelationServiceMap" type="void" line="680">
                <params>
                    <param name="newRole" type="Role"/>
                    <param name="oldRoleValue" type="List<ObjectName>"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="681">
                    <declaration name="excMsg" type="String" line="682"/>
                </scope>
                <scope line="686">
                    <scope line="687"/>
                    <scope line="690"/>
                </scope>
                <scope line="694">
                    <declaration name="params" type="Object[]" line="695"/>
                    <declaration name="signature" type="String[]" line="699"/>
                    <scope line="703"/>
                    <scope line="706"/>
                    <scope line="709"/>
                    <scope line="712">
                        <declaration name="wrappedExc" type="Exception" line="713"/>
                        <scope line="714"/>
                        <scope line="717"/>
                    </scope>
                </scope>
            </method>
            <method name="setRolesInt" type="RoleResult" line="725">
                <params>
                    <param name="list" type="RoleList"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="726">
                    <declaration name="excMsg" type="String" line="727"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="731"/>
                <declaration name="roleUnresList" type="RoleUnresolvedList" line="732"/>
                <scope line="733">
                    <declaration name="currResult" type="Object" line="734"/>
                    <scope line="735"/>
                    <scope line="738"/>
                    <scope line="740"/>
                    <scope line="742">
                        <scope line="743"/>
                        <scope line="746"/>
                    </scope>
                    <scope line="750">
                        <scope line="751"/>
                        <scope line="754"/>
                    </scope>
                </scope>
                <declaration name="result" type="RoleResult" line="759"/>
            </method>
            <method name="initMembers" type="void" line="763">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationServiceMBeanServer" type="MBeanServer"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <scope line="764">
                    <declaration name="excMsg" type="String" line="765"/>
                </scope>
            </method>
            <method name="initRoleMap" type="void" line="777">
                <params>
                    <param name="list" type="RoleList"/>
                </params>
                <scope line="778"/>
                <scope line="782">
                    <scope line="783">
                        <declaration name="currRoleName" type="String" line="784"/>
                        <scope line="785">
                            <declaration name="excMsgStrB" type="StringBuilder" line="786"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="handleMBeanUnregistrationInt" type="void" line="797">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleName" type="String"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="798">
                    <declaration name="excMsg" type="String" line="799"/>
                </scope>
                <declaration name="role" type="Role" line="803"/>
                <scope line="804"/>
                <scope line="807">
                    <declaration name="excMsgStrB" type="StringBuilder" line="808"/>
                    <declaration name="excMsg" type="String" line="809"/>
                </scope>
                <declaration name="currRoleValue" type="List&lt;ObjectName&gt;" line="814"/>
                <declaration name="newRoleValue" type="List&lt;ObjectName&gt;" line="815"/>
                <declaration name="newRole" type="Role" line="817"/>
                <declaration name="result" type="Object" line="818"/>
            </method>
        </class>
    </source>