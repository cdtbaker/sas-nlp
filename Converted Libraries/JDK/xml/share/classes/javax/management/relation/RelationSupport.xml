<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.atomic.AtomicBoolean"/>
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <class name="RelationSupport" line="47">
            <comment line="74">
                Private members                
            </comment>
            <comment line="78">
                Relation identifier (expected to be unique in the Relation Service where
                 the RelationSupport object will be added)                
            </comment>
            <comment line="82">
                ObjectName of the Relation Service where the relation will be added
                 REQUIRED if the RelationSupport is created by the user to be registered as
                 a MBean, as it will have to access the Relation Service via the MBean
                 Server to perform the check regarding the relation type.
                 Is null if current object is directly created by the Relation Service,
                 as the object will directly access it.                
            </comment>
            <comment line="90">
                Reference to the MBean Server where the Relation Service is
                 registered
                 REQUIRED if the RelationSupport is created by the user to be registered as
                 a MBean, as it will have to access the Relation Service via the MBean
                 Server to perform the check regarding the relation type.
                 If the Relationbase object is created by the Relation Service (use of
                 createRelation() method), this is null as not needed, direct access to
                 the Relation Service.
                 If the Relationbase object is created by the user and registered as a
                 MBean, this is set by the preRegister() method below.                
            </comment>
            <comment line="102">
                Relation type name (must be known in the Relation Service where the
                 relation will be added)                
            </comment>
            <comment line="106">
                Role map, mapping &lt;role-name&gt; -&gt; &lt;Role&gt;
                 Initialized by role list in the constructor, then updated:
                 - if the relation is a MBean, via setRole() and setRoles() methods, or
                   via Relation Service setRole() and setRoles() methods
                 - if the relation is internal to the Relation Service, via
                   setRoleInt() and setRolesInt() methods.                
            </comment>
            <comment line="114">
                Flag to indicate if the object has been added in the Relation Service                
            </comment>
            <comment line="117">
                Constructors                
            </comment>
            <comment line="258">
                Relation Interface                
            </comment>
            <comment line="663">
                MBeanRegistration interface                
            </comment>
            <comment line="667">
                Pre-registration: retrieves the MBean Server (useful to access to the
                 Relation Service)
                 This is the way to retrieve the MBean Server when the relation object is
                 a MBean created by the user outside of the Relation Service.
                
                 No exception thrown.                
            </comment>
            <comment line="681">
                Post-registration: does nothing                
            </comment>
            <comment line="686">
                Pre-unregistration: does nothing                
            </comment>
            <comment line="692">
                Post-unregistration: does nothing                
            </comment>
            <comment line="697">
                Others                
            </comment>
            <comment line="719">
                Misc                
            </comment>
            <comment line="723">
                Gets the role with given name
                 Checks if the role exists and is readable according to the relation
                 type.
                
                 This method is called in getRole() above.
                 It is also called in the Relation Service getRole() method.
                 It is also called in getRolesInt() below (used for getRoles() above
                 and for Relation Service getRoles() method).
                
                 Depending on parameters reflecting its use (either in the scope of
                 getting a single role or of getting several roles), will return:
                 - in case of success:
                   - for single role retrieval, the ArrayList of ObjectNames being the
                     role value
                   - for multi-role retrieval, the Role object itself
                 - in case of failure (except critical exceptions):
                   - for single role retrieval, if role does not exist or is not
                     readable, an RoleNotFoundException exception is raised
                   - for multi-role retrieval, a RoleUnresolved object
                
                 -param roleName  name of role to be retrieved
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if object
                  created by Relation Service.
                 -param multiRoleFlg  true if getting the role in the scope of a
                  multiple retrieval.
                
                 -return:
                  - for single role retrieval (multiRoleFlg false):
                    - ArrayList of ObjectName objects, value of role with given name, if
                      the role can be retrieved
                    - raise a RoleNotFoundException exception else
                  - for multi-role retrieval (multiRoleFlg true):
                    - the Role object for given role name if role can be retrieved
                    - a RoleUnresolved object with problem.
                
                 -exception IllegalArgumentException  if null parameter
                 -exception RoleNotFoundException  if multiRoleFlg is false and:
                  - there is no role with given name
                  or
                  - the role is not readable.
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server                
            </comment>
            <comment line="893">
                Gets the given roles
                 For each role, verifies if the role exists and is readable according to
                 the relation type.
                
                 This method is called in getRoles() above and in Relation Service
                 getRoles() method.
                
                 -param roleNameArray  array of names of roles to be retrieved
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if object
                  created by Relation Service.
                
                 -return a RoleResult object
                
                 -exception IllegalArgumentException  if null parameter
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server                
            </comment>
            <comment line="975">
                Returns all roles present in the relation
                
                 -return a RoleResult object, including a RoleList (for roles
                  successfully retrieved) and a RoleUnresolvedList (for roles not
                  readable).
                
                 -exception IllegalArgumentException if null parameter
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server                
            </comment>
            <comment line="1015">
                Sets the role with given value
                
                 This method is called in setRole() above.
                 It is also called by the Relation Service setRole() method.
                 It is also called in setRolesInt() method below (used in setRoles()
                 above and in RelationService setRoles() method).
                
                 Will check the role according to its corresponding role definition
                 provided in relation&apos;s relation type
                 Will send a notification (RelationNotification with type
                 RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                 relation is a MBean or not) if not initialization of role.
                
                 -param aRole  role to be set (name and new value)
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if internal
                  relation
                 -param multiRoleFlg  true if getting the role in the scope of a
                  multiple retrieval.
                
                 -return (except other &quot;critical&quot; exceptions):
                  - for single role retrieval (multiRoleFlg false):
                    - null if the role has been set
                    - raise an InvalidRoleValueException
                 else
                  - for multi-role retrieval (multiRoleFlg true):
                    - the Role object for given role name if role has been set
                    - a RoleUnresolved object with problem else.
                
                 -exception IllegalArgumentException if null parameter
                 -exception RoleNotFoundException  if multiRoleFlg is false and:
                  - internal relation and the role does not exist
                  or
                  - existing role (i.e. not initializing it) and the role is not
                    writable.
                 -exception InvalidRoleValueException  ifmultiRoleFlg is false and
                  value provided for:
                   - the number of referenced MBeans in given value is less than
                     expected minimum degree
                   or
                   - the number of referenced MBeans in provided value exceeds expected
                     maximum degree
                   or
                   - one referenced MBean in the value is not an Object of the MBean
                     class expected for that role
                   or
                   - a MBean provided for that role does not exist
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server
                 -exception RelationTypeNotFoundException  if relation type unknown
                 -exception RelationNotFoundException  if a relation MBean has not been
                  added in the Relation Service                
            </comment>
            <comment line="1252">
                Requires the Relation Service to send a notification
                 RelationNotification, with type being either:
                 - RelationNotification.RELATION_BASIC_UPDATE if the updated relation is
                   a relation internal to the Relation Service
                 - RelationNotification.RELATION_MBEAN_UPDATE if the updated relation is
                   a relation MBean.
                
                 -param newRole  new role
                 -param oldRoleValue  old role value (ArrayList of ObjectNames)
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if object
                  created by Relation Service.
                
                 -exception IllegalArgumentException  if null parameter provided
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server
                 -exception RelationNotFoundException if:
                  - relation MBean
                  and
                  - it has not been added into the Relation Service                
            </comment>
            <comment line="1350">
                Requires the Relation Service to update its internal map handling
                 MBeans referenced in relations.
                 The Relation Service will also update its recording as a listener to
                 be informed about unregistration of new referenced MBeans, and no longer
                 informed of MBeans no longer referenced.
                
                 -param newRole  new role
                 -param oldRoleValue  old role value (ArrayList of ObjectNames)
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if object
                  created by Relation Service.
                
                 -exception IllegalArgumentException  if null parameter
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server
                 -exception RelationNotFoundException if:
                  - relation MBean
                  and
                  - the relation is not added in the Relation Service                
            </comment>
            <comment line="1442">
                Sets the given roles
                 For each role:
                 - will check the role according to its corresponding role definition
                   provided in relation&apos;s relation type
                 - will send a notification (RelationNotification with type
                   RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                   relation is a MBean or not) for each updated role.
                
                 This method is called in setRoles() above and in Relation Service
                 setRoles() method.
                
                 -param list  list of roles to be set
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if object
                  created by Relation Service.
                
                 -return a RoleResult object
                
                 -exception IllegalArgumentException  if null parameter
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server
                 -exception RelationTypeNotFoundException if:
                  - relation MBean
                  and
                  - unknown relation type
                 -exception RelationNotFoundException if:
                  - relation MBean
                 and
                 - not added in the RS                
            </comment>
            <comment line="1542">
                Initializes all members
                
                 -param relationId  relation identifier, to identify the relation in the
                 Relation Service.
                 Expected to be unique in the given Relation Service.
                 -param relationServiceName  ObjectName of the Relation Service where
                 the relation will be registered.
                 It is required as this is the Relation Service that is aware of the
                 definition of the relation type of given relation, so that will be able
                 to check update operations (set). Direct access via the Relation
                 Service (RelationService.setRole()) do not need this information but
                 as any user relation is a MBean, setRole() is part of its management
                 interface and can be called directly on the user relation MBean. So the
                 user relation MBean must be aware of the Relation Service where it will
                 be added.
                 -param relationTypeName  Name of relation type.
                 Expected to have been created in given Relation Service.
                 -param list  list of roles (Role objects) to initialized the
                 relation. Can be null.
                 Expected to conform to relation info in associated relation type.
                
                 -exception InvalidRoleValueException  if the same name is used for two
                  roles.
                 -exception IllegalArgumentException  if a required value (Relation
                  Service Object Name, etc.) is not provided as parameter.                
            </comment>
            <comment line="1597">
                Initialize the internal role map from given RoleList parameter
                
                 -param list  role list. Can be null.
                  As it is a RoleList object, it cannot include null (rejected).
                
                 -exception InvalidRoleValueException  if the same role name is used for
                  several roles.                
            </comment>
            <comment line="1640">
                Callback used by the Relation Service when a MBean referenced in a role
                 is unregistered.
                 The Relation Service will call this method to let the relation
                 take action to reflect the impact of such unregistration.
                 Current implementation is to set the role with its current value
                 (list of ObjectNames of referenced MBeans) without the unregistered
                 one.
                
                 -param objectName  ObjectName of unregistered MBean
                 -param roleName  name of role where the MBean is referenced
                 -param relationServCallFlg  true if call from the Relation Service; this
                  will happen if the current RelationSupport object has been created by
                  the Relation Service (via createRelation()) method, so direct access is
                  possible.
                 -param relationServ  reference to Relation Service object, if internal
                  relation
                
                 -exception IllegalArgumentException if null parameter
                 -exception RoleNotFoundException  if:
                  - the role does not exist
                  or
                  - role not writable.
                 -exception InvalidRoleValueException  if value provided for:
                   - the number of referenced MBeans in given value is less than
                     expected minimum degree
                   or
                   - the number of referenced MBeans in provided value exceeds expected
                     maximum degree
                   or
                   - one referenced MBean in the value is not an Object of the MBean
                     class expected for that role
                   or
                   - a MBean provided for that role does not exist
                 -exception RelationServiceNotRegisteredException  if the Relation
                  Service is not registered in the MBean Server
                 -exception RelationTypeNotFoundException if unknown relation type
                 -exception RelationNotFoundException if current relation has not been
                  added in the RS                
            </comment>
            <implements interface="RelationSupportMBean"/>
            <implements interface="MBeanRegistration"/>
            <javadoc line="47">
                A RelationSupport object is used internally by the Relation Service to
                  represent simple relations (only roles, no properties or methods), with an
                  unlimited number of roles, of any relation type. As internal representation,
                  it is not exposed to the user.
                  &lt;P&gt;RelationSupport class conforms to the design patterns of standard MBean. So
                  the user can decide to instantiate a RelationSupport object himself as
                  a MBean (as it follows the MBean design patterns), to register it in the
                  MBean Server, and then to add it in the Relation Service.
                  &lt;P&gt;The user can also, when creating his own MBean relation class, have it
                  extending RelationSupport, to retrieve the implementations of required
                  interfaces (see below).
                  &lt;P&gt;It is also possible to have in a user relation MBean class a member
                  being a RelationSupport object, and to implement the required interfaces by
                  delegating all to this member.
                  &lt;P&gt; RelationSupport implements the Relation interface (to be handled by the
                  Relation Service).
                  &lt;P&gt;It implements also the MBeanRegistration interface to be able to retrieve
                  the MBean Server where it is registered (if registered as a MBean) to access
                  to its Relation Service.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="myRelId" type="String" line="79"/>
            <declaration name="myRelServiceName" type="ObjectName" line="87"/>
            <declaration name="myRelServiceMBeanServer" type="MBeanServer" line="99"/>
            <declaration name="myRelTypeName" type="String" line="103"/>
            <declaration name="myRoleName2ValueMap" type="Map&lt;String,Role&gt;" line="111"/>
            <declaration name="myInRelServFlg" type="AtomicBoolean" line="114"/>
            <javadoc line="120">
                Creates a {@code RelationSupport} object.
                  &lt;P&gt;This constructor has to be used when the RelationSupport object will
                  be registered as a MBean by the user, or when creating a user relation
                  MBean whose class extends RelationSupport.
                  &lt;P&gt;Nothing is done at the Relation Service level, i.e.
                  the {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed to
                  see if the provided values are correct.
                  The object is always created, EXCEPT if:
                  &lt;P&gt;- any of the required parameters is {@code null}.
                  &lt;P&gt;- the same name is used for two roles.
                  &lt;P&gt;To be handled as a relation, the {@code RelationSupport} object has
                  to be added to the Relation Service using the Relation Service method
                  addRelation().                
                <param>
                    relationId  relation identifier, to identify the relation in the
                      Relation Service.
                      <P>Expected to be unique in the given Relation Service.                    
                </param>
                <param>
                    relationServiceName  ObjectName of the Relation Service where
                      the relation will be registered.
                      <P>This parameter is required as it is the Relation Service that is
                      aware of the definition of the relation type of the given relation,
                      so that will be able to check update operations (set).                    
                </param>
                <param>
                    relationTypeName  Name of relation type.
                      <P>Expected to have been created in the given Relation Service.                    
                </param>
                <param>
                    list  list of roles (Role objects) to initialize the
                      relation. Can be {@code null}.
                      <P>Expected to conform to relation info in associated relation type.                    
                </param>
                <exception>
                    InvalidRoleValueException  if the same name is used for two
                      roles.                    
                </exception>
                <exception>
                    IllegalArgumentException  if any of the required parameters
                      (relation id, relation service ObjectName, or relation type name) is{@code null}.                    
                </exception>
            </javadoc>
            <method name="RelationSupport" type="constructor" line="161">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="169">
                    Can throw InvalidRoleValueException and IllegalArgumentException                    
                </comment>
            </method>
            <javadoc line="179">
                Creates a {@code RelationSupport} object.
                  &lt;P&gt;This constructor has to be used when the user relation MBean
                  implements the interfaces expected to be supported by a relation by
                  delegating to a RelationSupport object.
                  &lt;P&gt;This object needs to know the Relation Service expected to handle the
                  relation. So it has to know the MBean Server where the Relation Service
                  is registered.
                  &lt;P&gt;According to a limitation, a relation MBean must be registered in the
                  same MBean Server as the Relation Service expected to handle it. So the
                  user relation MBean has to be created and registered, and then the
                  wrapped RelationSupport object can be created within the identified MBean
                  Server.
                  &lt;P&gt;Nothing is done at the Relation Service level, i.e.
                  the {@code RelationSupport} object is not added to the{@code RelationService} and no checks are performed to
                  see if the provided values are correct.
                  The object is always created, EXCEPT if:
                  &lt;P&gt;- any of the required parameters is {@code null}.
                  &lt;P&gt;- the same name is used for two roles.
                  &lt;P&gt;To be handled as a relation, the {@code RelationSupport} object has
                  to be added to the Relation Service using the Relation Service method
                  addRelation().                
                <param>
                    relationId  relation identifier, to identify the relation in the
                      Relation Service.
                      <P>Expected to be unique in the given Relation Service.                    
                </param>
                <param>
                    relationServiceName  ObjectName of the Relation Service where
                      the relation will be registered.
                      <P>This parameter is required as it is the Relation Service that is
                      aware of the definition of the relation type of the given relation,
                      so that will be able to check update operations (set).                    
                </param>
                <param>
                    relationServiceMBeanServer  MBean Server where the wrapping MBean
                      is or will be registered.
                      <P>Expected to be the MBean Server where the Relation Service is or will
                      be registered.                    
                </param>
                <param>
                    relationTypeName  Name of relation type.
                      <P>Expected to have been created in the given Relation Service.                    
                </param>
                <param>
                    list  list of roles (Role objects) to initialize the
                      relation. Can be {@code null}.
                      <P>Expected to conform to relation info in associated relation type.                    
                </param>
                <exception>
                    InvalidRoleValueException  if the same name is used for two
                      roles.                    
                </exception>
                <exception>
                    IllegalArgumentException  if any of the required parameters
                      (relation id, relation service ObjectName, relation service MBeanServer,
                      or relation type name) is {@code null}.                    
                </exception>
            </javadoc>
            <method name="RelationSupport" type="constructor" line="233">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationServiceMBeanServer" type="MBeanServer"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="246">
                    Can throw InvalidRoleValueException and
                     IllegalArgumentException                    
                </comment>
                <scope line="237">
                    <declaration name="excMsg" type="String" line="238"/>
                </scope>
            </method>
            <javadoc line="261">
                Retrieves role value for given role name.
                  &lt;P&gt;Checks if the role exists and is readable according to the relation
                  type.                
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the ArrayList of ObjectName objects being the role value                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RoleNotFoundException  if:
                      <P>- there is no role with given name
                      <P>- the role is not readable.                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <see>
                    #setRole                    
                </see>
            </javadoc>
            <method name="getRole" type="List<ObjectName>" line="282">
                <params>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="293">
                    Can throw RoleNotFoundException and
                     RelationServiceNotRegisteredException                    
                </comment>
                <scope line="284">
                    <declaration name="excMsg" type="String" line="285"/>
                </scope>
                <declaration name="result" type="List&lt;ObjectName&gt;" line="294"/>
            </method>
            <javadoc line="301">
                Retrieves values of roles with given names.
                  &lt;P&gt;Checks for each role if it exists and is readable according to the
                  relation type.                
                <param>
                    roleNameArray  array of names of roles to be retrieved                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      retrieved).                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <see>
                    #setRoles                    
                </see>
            </javadoc>
            <method name="getRoles" type="RoleResult" line="320">
                <params>
                    <param name="roleNameArray" type="String[]"/>
                </params>
                <comment line="330">
                    Can throw RelationServiceNotRegisteredException                    
                </comment>
                <scope line="322">
                    <declaration name="excMsg" type="String" line="323"/>
                </scope>
                <declaration name="result" type="RoleResult" line="330"/>
            </method>
            <javadoc line="336">
                Returns all roles present in the relation.                
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully retrieved) and a RoleUnresolvedList (for roles not
                      readable).                    
                </return>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
            </javadoc>
            <method name="getAllRoles" type="RoleResult" line="347">
                <comment line="357">
                    OK : Invalid parameters, ignore...                    
                </comment>
                <declaration name="result" type="RoleResult" line="352"/>
                <scope line="353"/>
                <scope line="355"/>
            </method>
            <javadoc line="363">
                Returns all roles in the relation without checking read mode.                
                <return>
                    a RoleList                    
                </return>
            </javadoc>
            <method name="retrieveAllRoles" type="RoleList" line="368">
                <declaration name="result" type="RoleList" line="373"/>
                <scope line="374"/>
            </method>
            <javadoc line="384">
                Returns the number of MBeans currently referenced in the given role.                
                <param>
                    roleName  name of role                    
                </param>
                <return>
                    the number of currently referenced MBeans in that role                    
                </return>
                <exception>
                    IllegalArgumentException  if null role name                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with given name                    
                </exception>
            </javadoc>
            <method name="getRoleCardinality" type="Integer" line="396">
                <params>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="407">
                    Try to retrieve the role                    
                </comment>
                <comment line="410">
                    No null Role is allowed, so direct use of get()                    
                </comment>
                <comment line="415">
                    Will throw a RoleNotFoundException
                    
                     Will not throw InvalidRoleValueException, so catch it for the
                     compiler                    
                </comment>
                <comment line="423">
                    OK : Do not throw InvalidRoleValueException as
                          a RoleNotFoundException will be thrown.                    
                </comment>
                <scope line="398">
                    <declaration name="excMsg" type="String" line="399"/>
                </scope>
                <declaration name="role" type="Role" line="407"/>
                <scope line="408"/>
                <scope line="412">
                    <declaration name="pbType" type="int" line="413"/>
                    <scope line="418"/>
                    <scope line="421"/>
                </scope>
                <declaration name="roleValue" type="List&lt;ObjectName&gt;" line="427"/>
            </method>
            <javadoc line="434">
                Sets the given role.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;Will send a notification (RelationNotification with type
                  RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                  relation is a MBean or not).                
                <param>
                    role  role to be set (name and new value)                    
                </param>
                <exception>
                    IllegalArgumentException  if null role                    
                </exception>
                <exception>
                    RoleNotFoundException  if there is no role with the supplied
                      role's name or if the role is not writable (no test on the write access
                      mode performed when initializing the role)                    
                </exception>
                <exception>
                    InvalidRoleValueException  if value provided for
                      role is not valid, i.e.:
                      <P>- the number of referenced MBeans in given value is less than
                      expected minimum degree
                      <P>- the number of referenced MBeans in provided value exceeds expected
                      maximum degree
                      <P>- one referenced MBean in the value is not an Object of the MBean
                      class expected for that role
                      <P>- a MBean provided for that role does not exist                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service                    
                </exception>
                <exception>
                    RelationNotFoundException  if the relation has not been
                      added in the Relation Service.                    
                </exception>
                <see>
                    #getRole                    
                </see>
            </javadoc>
            <method name="setRole" type="void" line="472">
                <params>
                    <param name="role" type="Role"/>
                </params>
                <comment line="483">
                    Will return null :)                    
                </comment>
                <scope line="474">
                    <declaration name="excMsg" type="String" line="475"/>
                </scope>
                <declaration name="result" type="Object" line="483"/>
            </method>
            <javadoc line="489">
                Sets the given roles.
                  &lt;P&gt;Will check the role according to its corresponding role definition
                  provided in relation&apos;s relation type
                  &lt;P&gt;Will send one notification (RelationNotification with type
                  RELATION_BASIC_UPDATE or RELATION_MBEAN_UPDATE, depending if the
                  relation is a MBean or not) per updated role.                
                <param>
                    list  list of roles to be set                    
                </param>
                <return>
                    a RoleResult object, including a RoleList (for roles
                      successfully set) and a RoleUnresolvedList (for roles not
                      set).                    
                </return>
                <exception>
                    IllegalArgumentException  if null role list                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service.                    
                </exception>
                <exception>
                    RelationNotFoundException  if the relation MBean has not been
                      added in the Relation Service.                    
                </exception>
                <see>
                    #getRoles                    
                </see>
            </javadoc>
            <method name="setRoles" type="RoleResult" line="517">
                <params>
                    <param name="list" type="RoleList"/>
                </params>
                <scope line="519">
                    <declaration name="excMsg" type="String" line="520"/>
                </scope>
                <declaration name="result" type="RoleResult" line="527"/>
            </method>
            <javadoc line="533">
                Callback used by the Relation Service when a MBean referenced in a role
                  is unregistered.
                  &lt;P&gt;The Relation Service will call this method to let the relation
                  take action to reflect the impact of such unregistration.
                  &lt;P&gt;BEWARE. the user is not expected to call this method.
                  &lt;P&gt;Current implementation is to set the role with its current value
                  (list of ObjectNames of referenced MBeans) without the unregistered
                  one.                
                <param>
                    objectName  ObjectName of unregistered MBean                    
                </param>
                <param>
                    roleName  name of role where the MBean is referenced                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RoleNotFoundException  if role does not exist in the
                      relation or is not writable                    
                </exception>
                <exception>
                    InvalidRoleValueException  if role value does not conform to
                      the associated role info (this will never happen when called from the
                      Relation Service)                    
                </exception>
                <exception>
                    RelationServiceNotRegisteredException  if the Relation
                      Service is not registered in the MBean Server                    
                </exception>
                <exception>
                    RelationTypeNotFoundException  if the relation type has not
                      been declared in the Relation Service.                    
                </exception>
                <exception>
                    RelationNotFoundException  if this method is called for a
                      relation MBean not added in the Relation Service.                    
                </exception>
            </javadoc>
            <method name="handleMBeanUnregistration" type="void" line="566">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleName" type="String"/>
                </params>
                <comment line="578">
                    Can throw RoleNotFoundException, InvalidRoleValueException,
                     or RelationTypeNotFoundException                    
                </comment>
                <scope line="568">
                    <declaration name="excMsg" type="String" line="569"/>
                </scope>
            </method>
            <javadoc line="589">
                Retrieves MBeans referenced in the various roles of the relation.                
                <return>
                    a HashMap mapping:
                      <P> ObjectName -> ArrayList of String (role names)                    
                </return>
            </javadoc>
            <method name="getReferencedMBeans" type="Map<ObjectName,List<String>>" line="595">
                <comment line="609">
                    Retrieves ObjectNames of MBeans referenced in current role                    
                </comment>
                <comment line="614">
                    Sees if current MBean has been already referenced in
                     roles already seen                    
                </comment>
                <declaration name="refMBeanMap" type="Map&lt;ObjectName,List&lt;String&gt;&gt;" line="600"/>
                <scope line="603">
                    <scope line="605">
                        <declaration name="currRoleName" type="String" line="607"/>
                        <declaration name="currRefMBeanList" type="List&lt;ObjectName&gt;" line="609"/>
                        <scope line="611">
                            <declaration name="mbeanRoleNameList" type="List&lt;String&gt;" line="615"/>
                            <declaration name="newRefFlg" type="boolean" line="618"/>
                            <scope line="619"/>
                            <scope line="624"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="636">
                Returns name of associated relation type.                
            </javadoc>
            <method name="getRelationTypeName" type="String" line="639"/>
            <javadoc line="643">
                Returns ObjectName of the Relation Service handling the relation.                
                <return>
                    the ObjectName of the Relation Service.                    
                </return>
            </javadoc>
            <method name="getRelationServiceName" type="ObjectName" line="648"/>
            <javadoc line="652">
                Returns relation identifier (used to uniquely identify the relation
                  inside the Relation Service).                
                <return>
                    the relation id.                    
                </return>
            </javadoc>
            <method name="getRelationId" type="String" line="658"/>
            <method name="preRegister" type="ObjectName" line="674">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
            </method>
            <method name="postRegister" type="void" line="681">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <method name="preDeregister" type="void" line="687"/>
            <method name="postDeregister" type="void" line="692"/>
            <javadoc line="700">
                Returns an internal flag specifying if the object is still handled by
                  the Relation Service.                
            </javadoc>
            <method name="isInRelationService" type="Boolean" line="704"/>
            <method name="setRelationServiceManagementFlag" type="void" line="709">
                <params>
                    <param name="flag" type="Boolean"/>
                </params>
                <scope line="711">
                    <declaration name="excMsg" type="String" line="712"/>
                </scope>
            </method>
            <method name="getRoleInt" type="Object" line="774">
                <params>
                    <param name="roleName" type="String"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                    <param name="multiRoleFlg" type="boolean"/>
                </params>
                <comment line="790">
                    No null Role is allowed, so direct use of get()                    
                </comment>
                <comment line="798">
                    Checks if the role is readable                    
                </comment>
                <comment line="803">
                    Call from the Relation Service, so direct access to it,
                     avoiding MBean Server
                     Shall not throw a RelationTypeNotFoundException                    
                </comment>
                <comment line="815">
                    Call from getRole() method above
                     So we have a MBean. We must access the Relation Service
                     via the MBean Server.                    
                </comment>
                <comment line="824">
                    Can throw InstanceNotFoundException if the Relation
                     Service is not registered (to be catched in any case and
                     transformed into RelationServiceNotRegisteredException).
                    
                     Shall not throw a MBeanException, or a ReflectionException
                     or an InstanceNotFoundException                    
                </comment>
                <comment line="852">
                    Role can be retrieved                    
                </comment>
                <comment line="855">
                    Single role retrieved: returns its value
                     Note: no need to test if role value (list) not null before
                           cloning, null value not allowed, empty list if
                           nothing.                    
                </comment>
                <comment line="862">
                    Role retrieved during multi-role retrieval: returns the
                     role                    
                </comment>
                <comment line="868">
                    Role not retrieved                    
                </comment>
                <comment line="871">
                    Problem when retrieving a simple role: either role not
                     found or not readable, so raises a RoleNotFoundException.                    
                </comment>
                <comment line="876">
                    To keep compiler happy :)                    
                </comment>
                <comment line="883">
                    Problem when retrieving a role in a multi-role retrieval:
                     returns a RoleUnresolved object                    
                </comment>
                <scope line="777">
                    <declaration name="excMsg" type="String" line="778"/>
                </scope>
                <declaration name="pbType" type="int" line="785"/>
                <declaration name="role" type="Role" line="787"/>
                <scope line="788"/>
                <scope line="793"/>
                <scope line="796">
                    <declaration name="status" type="Integer" line="798"/>
                    <scope line="800">
                        <scope line="805"/>
                        <scope line="808"/>
                    </scope>
                    <scope line="812">
                        <declaration name="params" type="Object[]" line="817"/>
                        <declaration name="signature" type="String[]" line="820"/>
                        <scope line="829"/>
                        <scope line="835"/>
                        <scope line="837"/>
                        <scope line="839"/>
                    </scope>
                </scope>
                <declaration name="result" type="Object" line="848"/>
                <scope line="850">
                    <scope line="853"/>
                    <scope line="860"/>
                </scope>
                <scope line="866">
                    <scope line="869">
                        <scope line="872"/>
                        <scope line="877"/>
                    </scope>
                    <scope line="881"/>
                </scope>
            </method>
            <method name="getRolesInt" type="RoleResult" line="916">
                <params>
                    <param name="roleNameArray" type="String[]"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="936">
                    Can throw RelationServiceNotRegisteredException
                    
                     RoleNotFoundException: not possible but catch it for compiler :)                    
                </comment>
                <comment line="946">
                    :)                    
                </comment>
                <comment line="950">
                    Can throw IllegalArgumentException if role is null
                     (normally should not happen :(                    
                </comment>
                <comment line="959">
                    Can throw IllegalArgumentException if role is null
                     (normally should not happen :(                    
                </comment>
                <scope line="919">
                    <declaration name="excMsg" type="String" line="920"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="927"/>
                <declaration name="roleUnresList" type="RoleUnresolvedList" line="928"/>
                <scope line="930">
                    <declaration name="currRoleName" type="String" line="931"/>
                    <declaration name="currResult" type="Object" line="933"/>
                    <scope line="938"/>
                    <scope line="944"/>
                    <scope line="948">
                        <scope line="951"/>
                        <scope line="953"/>
                    </scope>
                    <scope line="957">
                        <scope line="960"/>
                        <scope line="962"/>
                    </scope>
                </scope>
                <declaration name="result" type="RoleResult" line="968"/>
            </method>
            <method name="getAllRolesInt" type="RoleResult" line="987">
                <params>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <scope line="989">
                    <declaration name="excMsg" type="String" line="990"/>
                </scope>
                <declaration name="roleNameList" type="List&lt;String&gt;" line="997"/>
                <scope line="998"/>
                <declaration name="roleNames" type="String[]" line="1002"/>
                <declaration name="result" type="RoleResult" line="1005"/>
            </method>
            <method name="setRoleInt" type="Object" line="1078">
                <params>
                    <param name="aRole" type="Role"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                    <param name="multiRoleFlg" type="boolean"/>
                </params>
                <comment line="1094">
                    Checks if role exists in the relation
                     No error if the role does not exist in the relation, to be able to
                     handle initialization of role when creating the relation
                     (roles provided in the RoleList parameter are directly set but
                     roles automatically initialized are set using setRole())                    
                </comment>
                <comment line="1116">
                    Checks if the role can be set: is writable (except if
                     initialization) and correct value                    
                </comment>
                <comment line="1123">
                    Call from the Relation Service, so direct access to it,
                     avoiding MBean Server
                    
                     Shall not raise a RelationTypeNotFoundException                    
                </comment>
                <comment line="1133">
                    Call from setRole() method above
                     So we have a MBean. We must access the Relation Service
                     via the MBean Server.                    
                </comment>
                <comment line="1144">
                    Can throw InstanceNotFoundException if the Relation Service
                     is not registered (to be transformed into
                     RelationServiceNotRegisteredException in any case).
                    
                     Can throw a MBeanException wrapping a
                     RelationTypeNotFoundException:
                     throw wrapped exception.
                    
                     Shall not throw a ReflectionException                    
                </comment>
                <comment line="1164">
                    Retrieves underlying exception                    
                </comment>
                <comment line="1186">
                    Role can be set                    
                </comment>
                <comment line="1189">
                    Not initializing the role
                     If role being initialized:
                     - do not send an update notification
                     - do not try to update internal map of Relation Service
                       listing referenced MBeans, as role is initialized to an
                       empty list                    
                </comment>
                <comment line="1196">
                    Sends a notification (RelationNotification)
                     Can throw a RelationNotFoundException                    
                </comment>
                <comment line="1203">
                    Updates the role map of the Relation Service
                     Can throw RelationNotFoundException                    
                </comment>
                <comment line="1212">
                    Sets the role                    
                </comment>
                <comment line="1218">
                    Single role set: returns null: nothing to set in result                    
                </comment>
                <comment line="1221">
                    Multi-roles retrieval: returns the role                    
                </comment>
                <comment line="1227">
                    Role not set                    
                </comment>
                <comment line="1230">
                    Problem when setting a simple role: either role not
                     found, not writable, or incorrect value:
                     raises appropriate exception, RoleNotFoundException or
                     InvalidRoleValueException                    
                </comment>
                <comment line="1236">
                    To keep compiler happy :)                    
                </comment>
                <comment line="1240">
                    Problem when retrieving a role in a multi-role retrieval:
                     returns a RoleUnresolved object                    
                </comment>
                <scope line="1081">
                    <declaration name="excMsg" type="String" line="1082"/>
                </scope>
                <declaration name="roleName" type="String" line="1090"/>
                <declaration name="pbType" type="int" line="1091"/>
                <declaration name="role" type="Role" line="1098"/>
                <scope line="1099"/>
                <declaration name="oldRoleValue" type="List&lt;ObjectName&gt;" line="1103"/>
                <declaration name="initFlg" type="Boolean" line="1104"/>
                <scope line="1106"/>
                <scope line="1110"/>
                <scope line="1117">
                    <declaration name="status" type="Integer" line="1118"/>
                    <scope line="1120"/>
                    <scope line="1130">
                        <declaration name="params" type="Object[]" line="1135"/>
                        <declaration name="signature" type="String[]" line="1139"/>
                    </scope>
                </scope>
                <scope line="1161">
                    <declaration name="wrappedExc" type="Exception" line="1164"/>
                    <scope line="1165"/>
                    <scope line="1168"/>
                </scope>
                <scope line="1172"/>
                <scope line="1175"/>
                <scope line="1178"/>
                <declaration name="result" type="Object" line="1182"/>
                <scope line="1184">
                    <scope line="1186"/>
                    <scope line="1212"/>
                    <scope line="1219"/>
                </scope>
                <scope line="1224">
                    <scope line="1228"/>
                    <scope line="1238"/>
                </scope>
            </method>
            <method name="sendRoleUpdateNotification" type="void" line="1280">
                <params>
                    <param name="newRole" type="Role"/>
                    <param name="oldRoleValue" type="List<ObjectName>"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1295">
                    Direct call to the Relation Service
                     Shall not throw a RelationNotFoundException for an internal
                     relation                    
                </comment>
                <comment line="1317">
                    Can throw InstanceNotFoundException if the Relation Service
                     is not registered (to be transformed).
                    
                     Can throw a MBeanException wrapping a
                     RelationNotFoundException (to be raised in any case): wrapped
                     exception to be thrown
                    
                     Shall not throw a ReflectionException                    
                </comment>
                <scope line="1284">
                    <declaration name="excMsg" type="String" line="1285"/>
                </scope>
                <scope line="1293">
                    <scope line="1297"/>
                    <scope line="1301"/>
                </scope>
                <scope line="1305">
                    <declaration name="params" type="Object[]" line="1307"/>
                    <declaration name="signature" type="String[]" line="1311"/>
                    <scope line="1324"/>
                    <scope line="1329"/>
                    <scope line="1331"/>
                    <scope line="1334">
                        <declaration name="wrappedExc" type="Exception" line="1335"/>
                        <scope line="1336"/>
                        <scope line="1338"/>
                    </scope>
                </scope>
            </method>
            <method name="updateRelationServiceMap" type="void" line="1377">
                <params>
                    <param name="newRole" type="Role"/>
                    <param name="oldRoleValue" type="List<ObjectName>"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1392">
                    Direct call to the Relation Service
                     Shall not throw a RelationNotFoundException                    
                </comment>
                <comment line="1411">
                    Can throw InstanceNotFoundException if the Relation Service
                     is not registered (to be transformed).
                     Can throw a MBeanException wrapping a RelationNotFoundException:
                     wrapped exception to be thrown
                    
                     Shall not throw a ReflectionException                    
                </comment>
                <scope line="1381">
                    <declaration name="excMsg" type="String" line="1382"/>
                </scope>
                <scope line="1390">
                    <scope line="1393"/>
                    <scope line="1397"/>
                </scope>
                <scope line="1401">
                    <declaration name="params" type="Object[]" line="1402"/>
                    <declaration name="signature" type="String[]" line="1406"/>
                    <scope line="1416"/>
                    <scope line="1421"/>
                    <scope line="1423"/>
                    <scope line="1426">
                        <declaration name="wrappedExc" type="Exception" line="1427"/>
                        <scope line="1428"/>
                        <scope line="1430"/>
                    </scope>
                </scope>
            </method>
            <method name="setRolesInt" type="RoleResult" line="1479">
                <params>
                    <param name="list" type="RoleList"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1498">
                    Can throw:
                     RelationServiceNotRegisteredException,
                     RelationTypeNotFoundException
                    
                     Will not throw, due to parameters, RoleNotFoundException or
                     InvalidRoleValueException, but catch them to keep compiler
                     happy                    
                </comment>
                <comment line="1511">
                    OK : Do not throw a RoleNotFoundException.                    
                </comment>
                <comment line="1513">
                    OK : Do not throw an InvalidRoleValueException.                    
                </comment>
                <comment line="1517">
                    Can throw IllegalArgumentException if role is null
                     (normally should not happen :(                    
                </comment>
                <comment line="1526">
                    Can throw IllegalArgumentException if role is null
                     (normally should not happen :(                    
                </comment>
                <scope line="1482">
                    <declaration name="excMsg" type="String" line="1483"/>
                </scope>
                <declaration name="roleList" type="RoleList" line="1491"/>
                <declaration name="roleUnresList" type="RoleUnresolvedList" line="1492"/>
                <scope line="1494">
                    <declaration name="currResult" type="Object" line="1496"/>
                    <scope line="1504"/>
                    <scope line="1509"/>
                    <scope line="1511"/>
                    <scope line="1515">
                        <scope line="1518"/>
                        <scope line="1520"/>
                    </scope>
                    <scope line="1524">
                        <scope line="1527"/>
                        <scope line="1529"/>
                    </scope>
                </scope>
                <declaration name="result" type="RoleResult" line="1535"/>
            </method>
            <method name="initMembers" type="void" line="1572">
                <params>
                    <param name="relationId" type="String"/>
                    <param name="relationServiceName" type="ObjectName"/>
                    <param name="relationServiceMBeanServer" type="MBeanServer"/>
                    <param name="relationTypeName" type="String"/>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="1590">
                    Can throw InvalidRoleValueException                    
                </comment>
                <scope line="1576">
                    <declaration name="excMsg" type="String" line="1577"/>
                </scope>
            </method>
            <method name="initRoleMap" type="void" line="1605">
                <params>
                    <param name="list" type="RoleList"/>
                </params>
                <comment line="1619">
                    No need to check if role is null, it is not allowed to store
                     a null role in a RoleList :)                    
                </comment>
                <comment line="1624">
                    Role already provided in current list                    
                </comment>
                <scope line="1607"/>
                <scope line="1614">
                    <scope line="1616">
                        <declaration name="currRoleName" type="String" line="1620"/>
                        <scope line="1622">
                            <declaration name="excMsgStrB" type="StringBuilder" line="1624"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="handleMBeanUnregistrationInt" type="void" line="1686">
                <params>
                    <param name="objectName" type="ObjectName"/>
                    <param name="roleName" type="String"/>
                    <param name="relationServCallFlg" type="boolean"/>
                    <param name="relationServ" type="RelationService"/>
                </params>
                <comment line="1700">
                    Retrieves current role value                    
                </comment>
                <comment line="1715">
                    Note: no need to test if list not null before cloning, null value
                           not allowed for role value.                    
                </comment>
                <comment line="1721">
                    Can throw InvalidRoleValueException,
                     RelationTypeNotFoundException
                     (RoleNotFoundException already detected)                    
                </comment>
                <scope line="1690">
                    <declaration name="excMsg" type="String" line="1691"/>
                </scope>
                <declaration name="role" type="Role" line="1700"/>
                <scope line="1701"/>
                <scope line="1705">
                    <declaration name="excMsgStrB" type="StringBuilder" line="1706"/>
                    <declaration name="excMsg" type="String" line="1707"/>
                </scope>
                <declaration name="currRoleValue" type="List&lt;ObjectName&gt;" line="1712"/>
                <declaration name="newRoleValue" type="List&lt;ObjectName&gt;" line="1716"/>
                <declaration name="newRole" type="Role" line="1718"/>
                <declaration name="result" type="Object" line="1723"/>
            </method>
        </class>
    </source>