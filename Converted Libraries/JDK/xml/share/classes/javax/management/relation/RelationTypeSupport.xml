<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.logging.Level"/>
        <class name="RelationTypeSupport" line="17">
            <implements interface="RelationType"/>
            <javadoc line="17">
                A RelationTypeSupport object implements the RelationType interface.
                  &lt;P&gt;It represents a relation type, providing role information for each role
                  expected to be supported in every relation of that type.
                  &lt;P&gt;A relation type includes a relation type name and a list of
                  role infos (represented by RoleInfo objects).
                  &lt;P&gt;A relation type has to be declared in the Relation Service:
                  &lt;P&gt;- either using the createRelationType() method, where a RelationTypeSupport
                  object will be created and kept in the Relation Service
                  &lt;P&gt;- either using the addRelationType() method where the user has to create
                  an object implementing the RelationType interface, and this object will be
                  used as representing a relation type in the Relation Service.
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;4611072955724144607L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="33"/>
            <declaration name="newSerialVersionUID" type="long" line="34"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="35"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="36"/>
            <declaration name="serialVersionUID" type="long" line="37"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="38"/>
            <javadoc line="38">
                @serialField typeName String Relation type name                
                <serialField>
                    roleName2InfoMap Map {@link Map} holding the mapping:
                      &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;                    
                </serialField>
                <serialField>
                    isInRelationService boolean Flag specifying whether the relation type has been declared in the
                      Relation Service (so can no longer be updated)                    
                </serialField>
            </javadoc>
            <declaration name="compat" type="boolean" line="46"/>
            <scope line="47">
                <scope line="48">
                    <declaration name="act" type="GetPropertyAction" line="49"/>
                    <declaration name="form" type="String" line="50"/>
                </scope>
                <scope line="53"/>
                <scope line="55"/>
                <scope line="59"/>
            </scope>
            <declaration name="typeName" type="String" line="64"/>
            <javadoc line="64">
                @serial Relation type name                
            </javadoc>
            <declaration name="roleName2InfoMap" type="Map&lt;String,RoleInfo&gt;" line="68"/>
            <javadoc line="68">
                @serial {@link Map} holding the mapping:
                  &amp;lt;role name ({@link String})&amp;gt; -&amp;gt; &amp;lt;role info ({@link RoleInfo} object)&amp;gt;                
            </javadoc>
            <declaration name="isInRelationService" type="boolean" line="73"/>
            <javadoc line="73">
                @serial Flag specifying whether the relation type has been declared in the
                  Relation Service (so can no longer be updated)                
            </javadoc>
            <javadoc line="78">
                Constructor where all role definitions are dynamically created and
                  passed as parameter.                
                <param>
                    relationTypeName  Name of relation type                    
                </param>
                <param>
                    roleInfoArray  List of role definitions (RoleInfo objects)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    InvalidRelationTypeException  if:
                      <P>- the same name has been used for two different roles
                      <P>- no role info provided
                      <P>- one null role info provided                    
                </exception>
            </javadoc>
            <method name="RelationTypeSupport" type="constructor" line="89">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <scope line="90">
                    <declaration name="excMsg" type="String" line="91"/>
                </scope>
            </method>
            <javadoc line="99">
                Constructor to be used for subclasses.                
                <param>
                    relationTypeName  Name of relation type.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter.                    
                </exception>
            </javadoc>
            <method name="RelationTypeSupport" type="constructor" line="104">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="105">
                    <declaration name="excMsg" type="String" line="106"/>
                </scope>
            </method>
            <javadoc line="114">
                Returns the relation type name.                
                <return>
                    the relation type name.                    
                </return>
            </javadoc>
            <method name="getRelationTypeName" type="String" line="118"/>
            <javadoc line="121">
                Returns the list of role definitions (ArrayList of RoleInfo objects).                
            </javadoc>
            <method name="getRoleInfos" type="List<RoleInfo>" line="124"/>
            <javadoc line="127">
                Returns the role info (RoleInfo object) for the given role info name
                  (null if not found).                
                <param>
                    roleInfoName  role info name                    
                </param>
                <return>
                    RoleInfo object providing role definition
                      does not exist                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RoleInfoNotFoundException  if no role info with that name in
                      relation type.                    
                </exception>
            </javadoc>
            <method name="getRoleInfo" type="RoleInfo" line="137">
                <params>
                    <param name="roleInfoName" type="String"/>
                </params>
                <scope line="138">
                    <declaration name="excMsg" type="String" line="139"/>
                </scope>
                <declaration name="result" type="RoleInfo" line="143"/>
                <scope line="144">
                    <declaration name="excMsgStrB" type="StringBuilder" line="145"/>
                    <declaration name="excMsg" type="String" line="146"/>
                </scope>
            </method>
            <javadoc line="154">
                Add a role info.
                  This method of course should not be used after the creation of the
                  relation type, because updating it would invalidate that the relations
                  created associated to that type still conform to it.
                  Can throw a RuntimeException if trying to update a relation type
                  declared in the Relation Service.                
                <param>
                    roleInfo  role info to be added.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter.                    
                </exception>
                <exception>
                    InvalidRelationTypeException  if there is already a role
                      info in current relation type with the same name.                    
                </exception>
            </javadoc>
            <method name="addRoleInfo" type="void" line="166">
                <params>
                    <param name="roleInfo" type="RoleInfo"/>
                </params>
                <scope line="167">
                    <declaration name="excMsg" type="String" line="168"/>
                </scope>
                <scope line="172">
                    <declaration name="excMsg" type="String" line="173"/>
                </scope>
                <declaration name="roleName" type="String" line="176"/>
                <scope line="177">
                    <declaration name="excMsgStrB" type="StringBuilder" line="178"/>
                    <declaration name="excMsg" type="String" line="179"/>
                </scope>
            </method>
            <method name="setRelationServiceFlag" type="void" line="188">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="initMembers" type="void" line="192">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <scope line="193">
                    <declaration name="excMsg" type="String" line="194"/>
                </scope>
                <scope line="200">
                    <declaration name="currRoleInfo" type="RoleInfo" line="201"/>
                </scope>
            </method>
            <method name="checkRoleInfos" type="void" line="207">
                <params>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <scope line="208">
                    <declaration name="excMsg" type="String" line="209"/>
                </scope>
                <scope line="212">
                    <declaration name="excMsg" type="String" line="213"/>
                </scope>
                <declaration name="roleNames" type="Set&lt;String&gt;" line="216"/>
                <scope line="217">
                    <declaration name="currRoleInfo" type="RoleInfo" line="218"/>
                    <scope line="219">
                        <declaration name="excMsg" type="String" line="220"/>
                    </scope>
                    <declaration name="roleName" type="String" line="223"/>
                    <scope line="224">
                        <declaration name="excMsgStrB" type="StringBuilder" line="225"/>
                        <declaration name="excMsg" type="String" line="226"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="235">
                Deserializes a {@link RelationTypeSupport} from an {@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="238">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="239">
                    <declaration name="fields" type="ObjectInputStream.GetField" line="240"/>
                    <scope line="242"/>
                    <scope line="246"/>
                    <scope line="250"/>
                </scope>
                <scope line="254"/>
            </method>
            <javadoc line="258">
                Serializes a {@link RelationTypeSupport} to an {@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="261">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="262">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="263"/>
                </scope>
                <scope line="269"/>
            </method>
        </class>
    </source>