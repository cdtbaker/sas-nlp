<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.relation">
        <import package="com.sun.jmx.defaults.JmxProperties.RELATION_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.logging.Level"/>
        <class name="RelationTypeSupport" line="47">
            <comment line="67">
                serialVersionUID not constant                
            </comment>
            <comment line="70">
                Serialization compatibility stuff:                
            </comment>
            <comment line="71">
                Two serial forms are supported in this class. The selected form depends                
            </comment>
            <comment line="72">
                on system property &quot;jmx.serial.form&quot;:                
            </comment>
            <comment line="73">
                - &quot;1.0&quot; for JMX 1.0                
            </comment>
            <comment line="74">
                - any other value for JMX 1.1 and higher                
            </comment>
            <comment line="75">
                                
            </comment>
            <comment line="76">
                Serial version for old serial form                
            </comment>
            <comment line="78">
                                
            </comment>
            <comment line="79">
                Serial version for new serial form                
            </comment>
            <comment line="81">
                                
            </comment>
            <comment line="82">
                Serializable fields in old serial form                
            </comment>
            <comment line="89">
                                
            </comment>
            <comment line="90">
                Serializable fields in new serial form                
            </comment>
            <comment line="97">
                                
            </comment>
            <comment line="98">
                Actual serial version and serial form                
            </comment>
            <comment line="125">
                                
            </comment>
            <comment line="126">
                END Serialization compatibility stuff                
            </comment>
            <comment line="128">
                                
            </comment>
            <comment line="129">
                Private members                
            </comment>
            <comment line="130">
                                
            </comment>
            <comment line="150">
                                
            </comment>
            <comment line="151">
                Constructors                
            </comment>
            <comment line="152">
                                
            </comment>
            <comment line="213">
                                
            </comment>
            <comment line="214">
                Accessors                
            </comment>
            <comment line="215">
                                
            </comment>
            <comment line="274">
                                
            </comment>
            <comment line="275">
                Misc                
            </comment>
            <comment line="276">
                                
            </comment>
            <comment line="328">
                Sets the internal flag to specify that the relation type has been                
            </comment>
            <comment line="329">
                declared in the Relation Service                
            </comment>
            <comment line="335">
                Initializes the members, i.e. type name and role info list.                
            </comment>
            <comment line="336">
                                
            </comment>
            <comment line="337">
                -param relationTypeName  Name of relation type                
            </comment>
            <comment line="338">
                -param roleInfoArray  List of role definitions (RoleInfo objects)                
            </comment>
            <comment line="339">
                                
            </comment>
            <comment line="340">
                -exception IllegalArgumentException  if null parameter                
            </comment>
            <comment line="341">
                -exception InvalidRelationTypeException  If:                
            </comment>
            <comment line="342">
                - the same name has been used for two different roles                
            </comment>
            <comment line="343">
                - no role info provided                
            </comment>
            <comment line="344">
                - one null role info provided                
            </comment>
            <comment line="375">
                Checks the given RoleInfo array to verify that:                
            </comment>
            <comment line="376">
                - the array is not empty                
            </comment>
            <comment line="377">
                - it does not contain a null element                
            </comment>
            <comment line="378">
                - a given role name is used only for one RoleInfo                
            </comment>
            <comment line="379">
                                
            </comment>
            <comment line="380">
                -param roleInfoArray  array to be checked                
            </comment>
            <comment line="381">
                                
            </comment>
            <comment line="382">
                -exception IllegalArgumentException                
            </comment>
            <comment line="383">
                -exception InvalidRelationTypeException  If:                
            </comment>
            <comment line="384">
                - the same name has been used for two different roles                
            </comment>
            <comment line="385">
                - no role info provided                
            </comment>
            <comment line="386">
                - one null role info provided                
            </comment>
            <implements interface="RelationType"/>
            <javadoc line="47">
                A RelationTypeSupport object implements the RelationType interface.
                  &lt;P&gt;It represents a relation type, providing role information for each role
                  expected to be supported in every relation of that type.
                  &lt;P&gt;A relation type includes a relation type name and a list of
                  role infos (represented by RoleInfo objects).
                  &lt;P&gt;A relation type has to be declared in the Relation Service:
                  &lt;P&gt;- either using the createRelationType() method, where a RelationTypeSupport
                  object will be created and kept in the Relation Service
                  &lt;P&gt;- either using the addRelationType() method where the user has to create
                  an object implementing the RelationType interface, and this object will be
                  used as representing a relation type in the Relation Service.
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;4611072955724144607L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="76"/>
            <declaration name="newSerialVersionUID" type="long" line="79"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="82"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="90"/>
            <declaration name="serialVersionUID" type="long" line="98"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="99"/>
            <javadoc line="99">
                @serialField typeName String Relation type name                
                <serialField>
                    roleName2InfoMap Map {@link Map} holding the mapping:
                      &lt;role name ({@link String})&gt; -&gt; &lt;role info ({@link RoleInfo} object)&gt;                    
                </serialField>
                <serialField>
                    isInRelationService boolean Flag specifying whether the relation type has been declared in the
                      Relation Service (so can no longer be updated)                    
                </serialField>
            </javadoc>
            <declaration name="compat" type="boolean" line="107"/>
            <scope line="108">
                <scope line="109">
                    <declaration name="act" type="GetPropertyAction" line="110"/>
                    <declaration name="form" type="String" line="111"/>
                </scope>
                <scope line="113"/>
                <scope line="116"/>
                <scope line="119"/>
            </scope>
            <declaration name="typeName" type="String" line="131"/>
            <javadoc line="131">
                @serial Relation type name                
            </javadoc>
            <declaration name="roleName2InfoMap" type="Map&lt;String,RoleInfo&gt;" line="136"/>
            <javadoc line="136">
                @serial {@link Map} holding the mapping:
                  &amp;lt;role name ({@link String})&amp;gt; -&amp;gt; &amp;lt;role info ({@link RoleInfo} object)&amp;gt;                
            </javadoc>
            <declaration name="isInRelationService" type="boolean" line="143"/>
            <javadoc line="143">
                @serial Flag specifying whether the relation type has been declared in the
                  Relation Service (so can no longer be updated)                
            </javadoc>
            <javadoc line="153">
                Constructor where all role definitions are dynamically created and
                  passed as parameter.                
                <param>
                    relationTypeName  Name of relation type                    
                </param>
                <param>
                    roleInfoArray  List of role definitions (RoleInfo objects)                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    InvalidRelationTypeException  if:
                      <P>- the same name has been used for two different roles
                      <P>- no role info provided
                      <P>- one null role info provided                    
                </exception>
            </javadoc>
            <method name="RelationTypeSupport" type="constructor" line="169">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <comment line="179">
                    Can throw InvalidRelationTypeException, ClassNotFoundException                    
                </comment>
                <comment line="180">
                    and NotCompliantMBeanException                    
                </comment>
                <scope line="171">
                    <declaration name="excMsg" type="String" line="172"/>
                </scope>
            </method>
            <javadoc line="188">
                Constructor to be used for subclasses.                
                <param>
                    relationTypeName  Name of relation type.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter.                    
                </exception>
            </javadoc>
            <method name="RelationTypeSupport" type="constructor" line="196">
                <params>
                    <param name="relationTypeName" type="String"/>
                </params>
                <scope line="197">
                    <declaration name="excMsg" type="String" line="198"/>
                </scope>
            </method>
            <javadoc line="216">
                Returns the relation type name.                
                <return>
                    the relation type name.                    
                </return>
            </javadoc>
            <method name="getRelationTypeName" type="String" line="221"/>
            <javadoc line="225">
                Returns the list of role definitions (ArrayList of RoleInfo objects).                
            </javadoc>
            <method name="getRoleInfos" type="List<RoleInfo>" line="228"/>
            <javadoc line="232">
                Returns the role info (RoleInfo object) for the given role info name
                  (null if not found).                
                <param>
                    roleInfoName  role info name                    
                </param>
                <return>
                    RoleInfo object providing role definition
                      does not exist                    
                </return>
                <exception>
                    IllegalArgumentException  if null parameter                    
                </exception>
                <exception>
                    RoleInfoNotFoundException  if no role info with that name in
                      relation type.                    
                </exception>
            </javadoc>
            <method name="getRoleInfo" type="RoleInfo" line="247">
                <params>
                    <param name="roleInfoName" type="String"/>
                </params>
                <comment line="257">
                    No null RoleInfo allowed, so use get()                    
                </comment>
                <scope line="249">
                    <declaration name="excMsg" type="String" line="250"/>
                </scope>
                <declaration name="result" type="RoleInfo" line="258"/>
                <scope line="260">
                    <declaration name="excMsgStrB" type="StringBuilder" line="261"/>
                    <declaration name="excMsg" type="String" line="262"/>
                </scope>
            </method>
            <javadoc line="277">
                Add a role info.
                  This method of course should not be used after the creation of the
                  relation type, because updating it would invalidate that the relations
                  created associated to that type still conform to it.
                  Can throw a RuntimeException if trying to update a relation type
                  declared in the Relation Service.                
                <param>
                    roleInfo  role info to be added.                    
                </param>
                <exception>
                    IllegalArgumentException  if null parameter.                    
                </exception>
                <exception>
                    InvalidRelationTypeException  if there is already a role
                      info in current relation type with the same name.                    
                </exception>
            </javadoc>
            <method name="addRoleInfo" type="void" line="293">
                <params>
                    <param name="roleInfo" type="RoleInfo"/>
                </params>
                <comment line="304">
                    Trying to update a declared relation type                    
                </comment>
                <comment line="311">
                    Checks if the role info has already been described                    
                </comment>
                <scope line="295">
                    <declaration name="excMsg" type="String" line="296"/>
                </scope>
                <scope line="303">
                    <declaration name="excMsg" type="String" line="305"/>
                </scope>
                <declaration name="roleName" type="String" line="309"/>
                <scope line="312">
                    <declaration name="excMsgStrB" type="StringBuilder" line="313"/>
                    <declaration name="excMsg" type="String" line="314"/>
                </scope>
            </method>
            <method name="setRelationServiceFlag" type="void" line="329">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <method name="initMembers" type="void" line="347">
                <params>
                    <param name="relationTypeName" type="String"/>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <comment line="359">
                    Verifies role infos before setting them                    
                </comment>
                <comment line="360">
                    Can throw InvalidRelationTypeException                    
                </comment>
                <scope line="349">
                    <declaration name="excMsg" type="String" line="350"/>
                </scope>
                <scope line="363">
                    <declaration name="currRoleInfo" type="RoleInfo" line="364"/>
                </scope>
            </method>
            <method name="checkRoleInfos" type="void" line="388">
                <params>
                    <param name="roleInfoArray" type="RoleInfo[]"/>
                </params>
                <comment line="396">
                    No role info provided                    
                </comment>
                <comment line="414">
                    Checks if the role info has already been described                    
                </comment>
                <scope line="390">
                    <declaration name="excMsg" type="String" line="391"/>
                </scope>
                <scope line="395">
                    <declaration name="excMsg" type="String" line="397"/>
                </scope>
                <declaration name="roleNames" type="Set&lt;String&gt;" line="402"/>
                <scope line="404">
                    <declaration name="currRoleInfo" type="RoleInfo" line="405"/>
                    <scope line="407">
                        <declaration name="excMsg" type="String" line="408"/>
                    </scope>
                    <declaration name="roleName" type="String" line="412"/>
                    <scope line="415">
                        <declaration name="excMsgStrB" type="StringBuilder" line="416"/>
                        <declaration name="excMsg" type="String" line="417"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="429">
                Deserializes a {@link RelationTypeSupport} from an {@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="433">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="436">
                    Read an object serialized in the old serial form                    
                </comment>
                <comment line="437">
                                        
                </comment>
                <comment line="457">
                    Read an object serialized in the new serial form                    
                </comment>
                <comment line="458">
                                        
                </comment>
                <scope line="435">
                    <declaration name="fields" type="ObjectInputStream.GetField" line="438"/>
                    <scope line="441"/>
                    <scope line="446"/>
                    <scope line="451"/>
                </scope>
                <scope line="456"/>
            </method>
            <javadoc line="464">
                Serializes a {@link RelationTypeSupport} to an {@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="468">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="471">
                    Serializes this instance in the old serial form                    
                </comment>
                <comment line="472">
                                        
                </comment>
                <comment line="481">
                    Serializes this instance in the new serial form                    
                </comment>
                <comment line="482">
                                        
                </comment>
                <scope line="470">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="473"/>
                </scope>
                <scope line="480"/>
            </method>
        </class>
    </source>