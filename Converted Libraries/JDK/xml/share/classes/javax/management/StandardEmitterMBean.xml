<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <class name="StandardEmitterMBean" line="28">
            <extends class="StandardMBean"/>
            <implements interface="NotificationEmitter"/>
            <javadoc line="28">
                &lt;p&gt;An MBean whose management interface is determined by reflection
                  on a Java interface, and that emits notifications.&lt;/p&gt;
                  &lt;p&gt;The following example shows how to use the public constructor{@link #StandardEmitterMBean(Object,Class,NotificationEmitter)StandardEmitterMBean(implementation, mbeanInterface, emitter)} to
                  create an MBean emitting notifications with any
                  implementation class name &lt;i&gt;Impl&lt;/i&gt;, with a management
                  interface defined (as for current Standard MBeans) by any interface
                  &lt;i&gt;Intf&lt;/i&gt;, and with any implementation of the interface{@link NotificationEmitter}. The example uses the class{@link NotificationBroadcasterSupport} as an implementation
                  of the interface {@link NotificationEmitter}.&lt;/p&gt;
                  &lt;pre&gt;
                  MBeanServer mbs;
                  ...
                  final String[] types = new String[] {&quot;sun.disc.space&quot;,&quot;sun.disc.alarm&quot;};
                  final MBeanNotificationInfo info = new MBeanNotificationInfo(
                  types,
                  Notification.class.getName(),
                  &quot;Notification about disc info.&quot;);
                  final NotificationEmitter emitter =
                  new NotificationBroadcasterSupport(info);
                  final Intf impl = new Impl(...);
                  final Object mbean = new StandardEmitterMBean(
                  impl, Intf.class, emitter);
                  mbs.registerMBean(mbean, objectName);
                  &lt;/pre&gt;                
                <see>
                    StandardMBean                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="emitter" type="NotificationEmitter" line="67"/>
            <declaration name="notificationInfo" type="MBeanNotificationInfo[]" line="68"/>
            <javadoc line="70">
                &lt;p&gt;Make an MBean whose management interface is specified by{@code mbeanInterface}, with the given implementation and
                  where notifications are handled by the given {@code NotificationEmitter}.
                  The resultant MBean implements the {@code NotificationEmitter} interface
                  by forwarding its methods to {@code emitter}.  It is legal and useful
                  for {@code implementation} and {@code emitter} to be the same object.&lt;/p&gt;
                  &lt;p&gt;If {@code emitter} is an instance of {@codeNotificationBroadcasterSupport} then the MBean&apos;s {@link #sendNotificationsendNotification} method will call {@code emitter.}{@link NotificationBroadcasterSupport#sendNotification sendNotification}.&lt;/p&gt;
                  &lt;p&gt;The array returned by {@link #getNotificationInfo()} on the
                  new MBean is a copy of the array returned by{@code emitter.}{@link NotificationBroadcaster#getNotificationInfogetNotificationInfo()} at the time of construction.  If the array
                  returned by {@code emitter.getNotificationInfo()} later changes,
                  that will have no effect on this object&apos;s{@code getNotificationInfo()}.&lt;/p&gt;                
                <param>
                    implementation the implementation of the MBean interface.                    
                </param>
                <param>
                    mbeanInterface a Standard MBean interface.                    
                </param>
                <param>
                    emitter the object that will handle notifications.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code mbeanInterface}does not follow JMX design patterns for Management Interfaces, or
                      if the given {@code implementation} does not implement the
                      specified interface, or if {@code emitter} is null.                    
                </throws>
            </javadoc>
            <method name="StandardEmitterMBean" type="constructor" line="101">
                <params>
                    <param name="implementation" type="T"/>
                    <param name="mbeanInterface" type="Class<T>"/>
                    <param name="emitter" type="NotificationEmitter"/>
                </params>
            </method>
            <javadoc line="109">
                &lt;p&gt;Make an MBean whose management interface is specified by{@code mbeanInterface}, with the given implementation and where
                  notifications are handled by the given {@codeNotificationEmitter}.  This constructor can be used to make
                  either Standard MBeans or MXBeans.  The resultant MBean
                  implements the {@code NotificationEmitter} interface by
                  forwarding its methods to {@code emitter}.  It is legal and
                  useful for {@code implementation} and {@code emitter} to be the
                  same object.&lt;/p&gt;
                  &lt;p&gt;If {@code emitter} is an instance of {@codeNotificationBroadcasterSupport} then the MBean&apos;s {@link #sendNotificationsendNotification} method will call {@code emitter.}{@link NotificationBroadcasterSupport#sendNotification sendNotification}.&lt;/p&gt;
                  &lt;p&gt;The array returned by {@link #getNotificationInfo()} on the
                  new MBean is a copy of the array returned by{@code emitter.}{@link NotificationBroadcaster#getNotificationInfogetNotificationInfo()} at the time of construction.  If the array
                  returned by {@code emitter.getNotificationInfo()} later changes,
                  that will have no effect on this object&apos;s{@code getNotificationInfo()}.&lt;/p&gt;                
                <param>
                    implementation the implementation of the MBean interface.                    
                </param>
                <param>
                    mbeanInterface a Standard MBean interface.                    
                </param>
                <param>
                    isMXBean If true, the {@code mbeanInterface} parameter
                      names an MXBean interface and the resultant MBean is an MXBean.                    
                </param>
                <param>
                    emitter the object that will handle notifications.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code mbeanInterface}does not follow JMX design patterns for Management Interfaces, or
                      if the given {@code implementation} does not implement the
                      specified interface, or if {@code emitter} is null.                    
                </throws>
            </javadoc>
            <method name="StandardEmitterMBean" type="constructor" line="146">
                <params>
                    <param name="implementation" type="T"/>
                    <param name="mbeanInterface" type="Class<T>"/>
                    <param name="isMXBean" type="boolean"/>
                    <param name="emitter" type="NotificationEmitter"/>
                </params>
            </method>
            <javadoc line="154">
                &lt;p&gt;Make an MBean whose management interface is specified by{@code mbeanInterface}, and
                  where notifications are handled by the given {@code NotificationEmitter}.
                  The resultant MBean implements the {@code NotificationEmitter} interface
                  by forwarding its methods to {@code emitter}.&lt;/p&gt;
                  &lt;p&gt;If {@code emitter} is an instance of {@codeNotificationBroadcasterSupport} then the MBean&apos;s {@link #sendNotificationsendNotification} method will call {@code emitter.}{@link NotificationBroadcasterSupport#sendNotification sendNotification}.&lt;/p&gt;
                  &lt;p&gt;The array returned by {@link #getNotificationInfo()} on the
                  new MBean is a copy of the array returned by{@code emitter.}{@link NotificationBroadcaster#getNotificationInfogetNotificationInfo()} at the time of construction.  If the array
                  returned by {@code emitter.getNotificationInfo()} later changes,
                  that will have no effect on this object&apos;s{@code getNotificationInfo()}.&lt;/p&gt;
                  &lt;p&gt;This constructor must be called from a subclass that implements
                  the given {@code mbeanInterface}.&lt;/p&gt;                
                <param>
                    mbeanInterface a StandardMBean interface.                    
                </param>
                <param>
                    emitter the object that will handle notifications.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code mbeanInterface}does not follow JMX design patterns for Management Interfaces, or
                      if {@code this} does not implement the specified interface, or
                      if {@code emitter} is null.                    
                </throws>
            </javadoc>
            <method name="StandardEmitterMBean" type="constructor" line="186">
                <params>
                    <param name="mbeanInterface" type="Class<?>"/>
                    <param name="emitter" type="NotificationEmitter"/>
                </params>
            </method>
            <javadoc line="194">
                &lt;p&gt;Make an MBean whose management interface is specified by{@code mbeanInterface}, and where notifications are handled by
                  the given {@code NotificationEmitter}.  This constructor can be
                  used to make either Standard MBeans or MXBeans.  The resultant
                  MBean implements the {@code NotificationEmitter} interface by
                  forwarding its methods to {@code emitter}.&lt;/p&gt;
                  &lt;p&gt;If {@code emitter} is an instance of {@codeNotificationBroadcasterSupport} then the MBean&apos;s {@link #sendNotificationsendNotification} method will call {@code emitter.}{@link NotificationBroadcasterSupport#sendNotification sendNotification}.&lt;/p&gt;
                  &lt;p&gt;The array returned by {@link #getNotificationInfo()} on the
                  new MBean is a copy of the array returned by{@code emitter.}{@link NotificationBroadcaster#getNotificationInfogetNotificationInfo()} at the time of construction.  If the array
                  returned by {@code emitter.getNotificationInfo()} later changes,
                  that will have no effect on this object&apos;s{@code getNotificationInfo()}.&lt;/p&gt;
                  &lt;p&gt;This constructor must be called from a subclass that implements
                  the given {@code mbeanInterface}.&lt;/p&gt;                
                <param>
                    mbeanInterface a StandardMBean interface.                    
                </param>
                <param>
                    isMXBean If true, the {@code mbeanInterface} parameter
                      names an MXBean interface and the resultant MBean is an MXBean.                    
                </param>
                <param>
                    emitter the object that will handle notifications.                    
                </param>
                <throws>
                    IllegalArgumentException if the {@code mbeanInterface}does not follow JMX design patterns for Management Interfaces, or
                      if {@code this} does not implement the specified interface, or
                      if {@code emitter} is null.                    
                </throws>
            </javadoc>
            <method name="StandardEmitterMBean" type="constructor" line="229">
                <params>
                    <param name="mbeanInterface" type="Class<?>"/>
                    <param name="isMXBean" type="boolean"/>
                    <param name="emitter" type="NotificationEmitter"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="238">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <method name="removeNotificationListener" type="void" line="245">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="addNotificationListener" type="void" line="251">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="255"/>
            <javadoc line="259">
                &lt;p&gt;Sends a notification.&lt;/p&gt;
                  &lt;p&gt;If the {@code emitter} parameter to the constructor was an
                  instance of {@code NotificationBroadcasterSupport} then this
                  method will call {@code emitter.}{@link NotificationBroadcasterSupport#sendNotificationsendNotification}.&lt;/p&gt;                
                <param>
                    n the notification to send.                    
                </param>
                <throws>
                    ClassCastException if the {@code emitter} parameter to the
                      constructor was not a {@code NotificationBroadcasterSupport}.                    
                </throws>
            </javadoc>
            <method name="sendNotification" type="void" line="273">
                <params>
                    <param name="n" type="Notification"/>
                </params>
                <scope line="276">
                    <declaration name="msg" type="String" line="277"/>
                </scope>
            </method>
            <javadoc line="285">
                &lt;p&gt;Get the MBeanNotificationInfo[] that will be used in the
                  MBeanInfo returned by this MBean.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method returns{@link #getNotificationInfo()}.&lt;/p&gt;                
                <param>
                    info The default MBeanInfo derived by reflection.                    
                </param>
                <return>
                    the MBeanNotificationInfo[] for the new MBeanInfo.                    
                </return>
            </javadoc>
            <method name="getNotifications" type="MBeanNotificationInfo[]" line="296">
                <params>
                    <param name="info" type="MBeanInfo"/>
                </params>
            </method>
        </class>
    </source>