<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.util.Collection"/>
        <interface name="CompositeData">
            <javadoc line="3">
                The &lt;tt&gt;CompositeData&lt;/tt&gt; interface specifies the behavior of a specific type of complex &lt;i&gt;open data&lt;/i&gt; objects
                  which represent &lt;i&gt;composite data&lt;/i&gt; structures.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getCompositeType" type="CompositeType" line="9"/>
            <javadoc line="9">
                Returns the &lt;i&gt;composite type &lt;/i&gt; of this &lt;i&gt;composite data&lt;/i&gt; instance.                
                <return>
                    the type of this CompositeData.                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="14"/>
            <javadoc line="14">
                Returns the value of the item whose name is &lt;tt&gt;key&lt;/tt&gt;.                
                <param>
                    key the name of the item.                    
                </param>
                <return>
                    the value associated with this key.                    
                </return>
                <throws>
                    IllegalArgumentException  if <tt>key</tt> is a null or empty String.                    
                </throws>
                <throws>
                    InvalidKeyException  if <tt>key</tt> is not an existing item name for this <tt>CompositeData</tt> instance.                    
                </throws>
            </javadoc>
            <method name="getAll" type="Object[]" line="22"/>
            <javadoc line="22">
                Returns an array of the values of the items whose names are specified by &lt;tt&gt;keys&lt;/tt&gt;, in the same order as &lt;tt&gt;keys&lt;/tt&gt;.                
                <param>
                    keys the names of the items.                    
                </param>
                <return>
                    the values corresponding to the keys.                    
                </return>
                <throws>
                    IllegalArgumentException  if an element in <tt>keys</tt> is a null or empty String.                    
                </throws>
                <throws>
                    InvalidKeyException  if an element in <tt>keys</tt> is not an existing item name for this <tt>CompositeData</tt> instance.                    
                </throws>
            </javadoc>
            <method name="containsKey" type="boolean" line="30"/>
            <javadoc line="30">
                Returns &lt;tt&gt;true&lt;/tt&gt; if and only if this &lt;tt&gt;CompositeData&lt;/tt&gt; instance contains
                  an item whose name is &lt;tt&gt;key&lt;/tt&gt;.
                  If &lt;tt&gt;key&lt;/tt&gt; is a null or empty String, this method simply returns false.                
                <param>
                    key the key to be tested.                    
                </param>
                <return>
                    true if this <tt>CompositeData</tt> contains the key.                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="38"/>
            <javadoc line="38">
                Returns &lt;tt&gt;true&lt;/tt&gt; if and only if this &lt;tt&gt;CompositeData&lt;/tt&gt; instance contains an item
                  whose value is &lt;tt&gt;value&lt;/tt&gt;.                
                <param>
                    value the value to be tested.                    
                </param>
                <return>
                    true if this <tt>CompositeData</tt> contains the value.                    
                </return>
            </javadoc>
            <method name="values" type="Collection<?>" line="45"/>
            <javadoc line="45">
                Returns an unmodifiable Collection view of the item values contained in this &lt;tt&gt;CompositeData&lt;/tt&gt; instance.
                  The returned collection&apos;s iterator will return the values in the ascending lexicographic order of the corresponding
                  item names.                
                <return>
                    the values.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="52"/>
            <javadoc line="52">
                Compares the specified &lt;var&gt;obj&lt;/var&gt; parameter with this
                  &lt;code&gt;CompositeData&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Returns &lt;tt&gt;true&lt;/tt&gt; if and only if all of the following statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;var&gt;obj&lt;/var&gt; is non null,&lt;/li&gt;
                  &lt;li&gt;&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;CompositeData&lt;/code&gt; interface,&lt;/li&gt;
                  &lt;li&gt;their composite types are equal&lt;/li&gt;
                  &lt;li&gt;their contents, i.e. (name, value) pairs are equal. If a value contained in
                  the content is an array, the value comparison is done as if by calling
                  the {@link java.util.Arrays#deepEquals(Object[],Object[]) deepEquals} method
                  for arrays of object reference types or the appropriate overloading of{@code Arrays.equals(e1,e2)} for arrays of primitive types&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  This ensures that this &lt;tt&gt;equals&lt;/tt&gt; method works properly for
                  &lt;var&gt;obj&lt;/var&gt; parameters which are different implementations of the
                  &lt;code&gt;CompositeData&lt;/code&gt; interface, with the restrictions mentioned in the{@link java.util.Collection#equals(Object) equals}method of the &lt;tt&gt;java.util.Collection&lt;/tt&gt; interface.                
                <param>
                    obj  the object to be compared for equality with this
                      <code>CompositeData</code> instance.                    
                </param>
                <return>
                    <code>true</code> if the specified object is equal to this
                      <code>CompositeData</code> instance.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="76"/>
            <javadoc line="76">
                Returns the hash code value for this &lt;code&gt;CompositeData&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of a &lt;code&gt;CompositeData&lt;/code&gt; instance is the sum of the hash codes
                  of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons
                  (ie: its &lt;i&gt;composite type&lt;/i&gt; and all the item values).
                  &lt;p&gt;
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt;
                  for any two &lt;code&gt;CompositeData&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;
                  Each item value&apos;s hash code is added to the returned hash code.
                  If an item value is an array,
                  its hash code is obtained as if by calling the{@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} method
                  for arrays of object reference types or the appropriate overloading
                  of {@code Arrays.hashCode(e)} for arrays of primitive types.                
                <return>
                    the hash code value for this <code>CompositeData</code> instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="95"/>
            <javadoc line="95">
                Returns a string representation of this &lt;code&gt;CompositeData&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of the name of the implementing class,
                  the string representation of the composite type of this instance, and the string representation of the contents
                  (ie list the itemName=itemValue mappings).                
                <return>
                    a string representation of this <code>CompositeData</code> instance                    
                </return>
            </javadoc>
        </interface>
    </source>