<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <class name="TabularType" line="6">
            <extends class="OpenType">
                <type_params>
                    <type_param name="TabularData"/>
                </type_params>
            </extends>
            <javadoc line="6">
                The &lt;code&gt;TabularType&lt;/code&gt; class is the &lt;i&gt; open type&lt;/i&gt; class
                  whose instances describe the types of {@link TabularData &lt;code&gt;TabularData&lt;/code&gt;} values.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="rowType" type="CompositeType" line="13"/>
            <javadoc line="13">
                @serial The composite type of rows                
            </javadoc>
            <declaration name="indexNames" type="List&lt;String&gt;" line="17"/>
            <javadoc line="17">
                @serial The items used to index each row element, kept in the order the user gave
                  This is an unmodifiable {@link ArrayList}                
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="22"/>
            <declaration name="myToString" type="String" line="23"/>
            <javadoc line="24">
                Constructs a &lt;code&gt;TabularType&lt;/code&gt; instance, checking for the validity of the given parameters.
                  The validity constraints are described below for each parameter.
                  &lt;p&gt;
                  The Java class name of tabular data values this tabular type represents
                  (ie the class name returned by the {@link OpenType#getClassName() getClassName} method)
                  is set to the string value returned by &lt;code&gt;TabularData.class.getName()&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    typeName  The name given to the tabular type this instance represents; cannot be a null or empty string.
                      <br>&nbsp;                    
                </param>
                <param>
                    description  The human readable description of the tabular type this instance represents;
                      cannot be a null or empty string.
                      <br>&nbsp;                    
                </param>
                <param>
                    rowType  The type of the row elements of tabular data values described by this tabular type instance;
                      cannot be null.
                      <br>&nbsp;                    
                </param>
                <param>
                    indexNames  The names of the items the values of which are used to uniquely index each row element in the
                      tabular data values described by this tabular type instance;
                      cannot be null or empty. Each element should be an item name defined in <var>rowType</var>
                      (no null or empty string allowed).
                      It is important to note that the <b>order</b> of the item names in <var>indexNames</var>
                      is used by the methods {@link TabularData#get(java.lang.Object[]) <code>get</code>} and{@link TabularData#remove(java.lang.Object[]) <code>remove</code>} of class
                      <code>TabularData</code> to match their array of values parameter to items.
                      <br>&nbsp;                    
                </param>
                <throws>
                    IllegalArgumentException  if <var>rowType</var> is null,
                      or <var>indexNames</var> is a null or empty array,
                      or an element in <var>indexNames</var> is a null or empty string,
                      or <var>typeName</var> or <var>description</var> is a null or empty string.
                      <br>&nbsp;                    
                </throws>
                <throws>
                    OpenDataException  if an element's value of <var>indexNames</var>
                      is not an item name defined in <var>rowType</var>.                    
                </throws>
            </javadoc>
            <method name="TabularType" type="constructor" line="56">
                <params>
                    <param name="typeName" type="String"/>
                    <param name="description" type="String"/>
                    <param name="rowType" type="CompositeType"/>
                    <param name="indexNames" type="String[]"/>
                </params>
                <scope line="58"/>
                <scope line="63">
                    <scope line="64"/>
                </scope>
                <declaration name="tmpList" type="List&lt;String&gt;" line="69"/>
                <scope line="70"/>
            </method>
            <javadoc line="75">
                Checks that Object[] arg is neither null nor empty (ie length==0)
                  and that it does not contain any null element.                
            </javadoc>
            <method name="checkForNullElement" type="void" line="79">
                <params>
                    <param name="arg" type="Object[]"/>
                    <param name="argName" type="String"/>
                </params>
                <scope line="80"/>
                <scope line="83">
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="89">
                Checks that String[] does not contain any empty (or blank characters only) string.                
            </javadoc>
            <method name="checkForEmptyString" type="void" line="92">
                <params>
                    <param name="arg" type="String[]"/>
                    <param name="argName" type="String"/>
                </params>
                <scope line="93">
                    <scope line="94"/>
                </scope>
            </method>
            <javadoc line="99">
                Returns the type of the row elements of tabular data values
                  described by this &lt;code&gt;TabularType&lt;/code&gt; instance.                
                <return>
                    the type of each row.                    
                </return>
            </javadoc>
            <method name="getRowType" type="CompositeType" line="104"/>
            <javadoc line="107">
                &lt;p&gt;Returns, in the same order as was given to this instance&apos;s
                  constructor, an unmodifiable List of the names of the items the
                  values of which are used to uniquely index each row element of
                  tabular data values described by this &lt;code&gt;TabularType&lt;/code&gt;
                  instance.&lt;/p&gt;                
                <return>
                    a List of String representing the names of the index
                      items.                    
                </return>
            </javadoc>
            <method name="getIndexNames" type="List<String>" line="116"/>
            <javadoc line="119">
                Tests whether &lt;var&gt;obj&lt;/var&gt; is a value which could be
                  described by this &lt;code&gt;TabularType&lt;/code&gt; instance.
                  &lt;p&gt;If &lt;var&gt;obj&lt;/var&gt; is null or is not an instance of
                  &lt;code&gt;javax.management.openmbean.TabularData&lt;/code&gt;,
                  &lt;code&gt;isValue&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;If &lt;var&gt;obj&lt;/var&gt; is an instance of
                  &lt;code&gt;javax.management.openmbean.TabularData&lt;/code&gt;, say {@codetd}, the result is true if this {@code TabularType} is
                  &lt;em&gt;assignable from&lt;/em&gt; {@link TabularData#getTabularType()td.getTabularType()}, as defined in {@link CompositeType#isValue CompositeType.isValue}.&lt;/p&gt;                
                <param>
                    obj the value whose open type is to be tested for
                      compatibility with this <code>TabularType</code> instance.                    
                </param>
                <return>
                    <code>true</code> if <var>obj</var> is a value for this
                      tabular type, <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="133">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="value" type="TabularData" line="135"/>
                <declaration name="valueType" type="TabularType" line="136"/>
            </method>
            <method name="isAssignableFrom" type="boolean" line="139">
                <params>
                    <param name="ot" type="OpenType<?>"/>
                </params>
                <declaration name="tt" type="TabularType" line="141"/>
            </method>
            <javadoc line="145">
                Compares the specified &lt;code&gt;obj&lt;/code&gt; parameter with this &lt;code&gt;TabularType&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Two &lt;code&gt;TabularType&lt;/code&gt; instances are equal if and only if all of the following statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;their type names are equal&lt;/li&gt;
                  &lt;li&gt;their row types are equal&lt;/li&gt;
                  &lt;li&gt;they use the same index names, in the same order&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br&gt;&amp;nbsp;                
                <param>
                    obj  the object to be compared for equality with this <code>TabularType</code> instance;
                      if <var>obj</var> is <code>null</code>, <code>equals</code> returns <code>false</code>.                    
                </param>
                <return>
                    <code>true</code> if the specified object is equal to this <code>TabularType</code> instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="159">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="160"/>
                <declaration name="other" type="TabularType" line="163"/>
                <scope line="164"/>
                <scope line="167"/>
                <scope line="170"/>
                <scope line="173"/>
                <scope line="176"/>
            </method>
            <javadoc line="181">
                Returns the hash code value for this &lt;code&gt;TabularType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of a &lt;code&gt;TabularType&lt;/code&gt; instance is the sum of the hash codes
                  of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons
                  (ie: name, row type, index names).
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt;
                  for any two &lt;code&gt;TabularType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;
                  As &lt;code&gt;TabularType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once,
                  on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.                
                <return>
                    the hash code value for this <code>TabularType</code> instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="195">
                <scope line="196">
                    <declaration name="value" type="int" line="197"/>
                </scope>
            </method>
            <javadoc line="205">
                Returns a string representation of this &lt;code&gt;TabularType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of the name of this class (ie &lt;code&gt;javax.management.openmbean.TabularType&lt;/code&gt;),
                  the type name for this instance, the row type string representation of this instance,
                  and the index names of this instance.
                  &lt;p&gt;
                  As &lt;code&gt;TabularType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once,
                  on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.                
                <return>
                    a string representation of this <code>TabularType</code> instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="216">
                <scope line="217">
                    <declaration name="result" type="StringBuilder" line="218"/>
                    <declaration name="sep" type="String" line="219"/>
                    <scope line="220"/>
                </scope>
            </method>
        </class>
    </source>