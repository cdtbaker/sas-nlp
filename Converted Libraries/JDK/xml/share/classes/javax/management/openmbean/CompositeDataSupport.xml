<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.io.Serializable"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.LinkedHashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.TreeSet"/>
        <class name="CompositeDataSupport" line="47">
            <comment line="58">
                                
            </comment>
            <implements interface="CompositeData"/>
            <implements interface="Serializable"/>
            <javadoc line="47">
                The &lt;tt&gt;CompositeDataSupport&lt;/tt&gt; class is the &lt;i&gt;open data&lt;/i&gt; class which
                  implements the &lt;tt&gt;CompositeData&lt;/tt&gt; interface.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="58"/>
            <declaration name="contents" type="SortedMap&lt;String,Object&gt;" line="60"/>
            <javadoc line="60">
                @serial Internal representation of the mapping of item names to their
                  respective values.
                  A {@link SortedMap} is used for faster retrieval of elements.                
            </javadoc>
            <declaration name="compositeType" type="CompositeType" line="67"/>
            <javadoc line="67">
                @serial The &lt;i&gt;composite type &lt;/i&gt; of this &lt;i&gt;composite data&lt;/i&gt; instance.                
            </javadoc>
            <javadoc line="72">
                &lt;p&gt;Constructs a &lt;tt&gt;CompositeDataSupport&lt;/tt&gt; instance with the specified
                  &lt;tt&gt;compositeType&lt;/tt&gt;, whose item values
                  are specified by &lt;tt&gt;itemValues[]&lt;/tt&gt;, in the same order as in
                  &lt;tt&gt;itemNames[]&lt;/tt&gt;.
                  As a &lt;tt&gt;CompositeType&lt;/tt&gt; does not specify any order on its items,
                  the &lt;tt&gt;itemNames[]&lt;/tt&gt; parameter is used
                  to specify the order in which the values are given in &lt;tt&gt;itemValues[]&lt;/tt&gt;.
                  The items contained in this &lt;tt&gt;CompositeDataSupport&lt;/tt&gt; instance are
                  internally stored in a &lt;tt&gt;TreeMap&lt;/tt&gt;,
                  thus sorted in ascending lexicographic order of their names, for faster
                  retrieval of individual item values.&lt;/p&gt;
                  &lt;p&gt;The constructor checks that all the constraints listed below for each
                  parameter are satisfied,
                  and throws the appropriate exception if they are not.&lt;/p&gt;                
                <param>
                    compositeType the <i>composite type </i> of this <i>composite
                      data</i> instance; must not be null.                    
                </param>
                <param>
                    itemNames <tt>itemNames</tt> must list, in any order, all the
                      item names defined in <tt>compositeType</tt>; the order in which the
                      names are listed, is used to match values in <tt>itemValues[]</tt>; must
                      not be null or empty.                    
                </param>
                <param>
                    itemValues the values of the items, listed in the same order as
                      their respective names in <tt>itemNames</tt>; each item value can be
                      null, but if it is non-null it must be a valid value for the open type
                      defined in <tt>compositeType</tt> for the corresponding item; must be of
                      the same size as <tt>itemNames</tt>; must not be null or empty.                    
                </param>
                <throws>
                    IllegalArgumentException <tt>compositeType</tt> is null, or
                      <tt>itemNames[]</tt> or <tt>itemValues[]</tt> is null or empty, or one
                      of the elements in <tt>itemNames[]</tt> is a null or empty string, or
                      <tt>itemNames[]</tt> and <tt>itemValues[]</tt> are not of the same size.                    
                </throws>
                <throws>
                    OpenDataException <tt>itemNames[]</tt> or
                      <tt>itemValues[]</tt>'s size differs from the number of items defined in
                      <tt>compositeType</tt>, or one of the elements in <tt>itemNames[]</tt>
                      does not exist as an item name defined in <tt>compositeType</tt>, or one
                      of the elements in <tt>itemValues[]</tt> is not a valid value for the
                      corresponding item as defined in <tt>compositeType</tt>.                    
                </throws>
            </javadoc>
            <method name="CompositeDataSupport" type="constructor" line="117">
                <params>
                    <param name="compositeType" type="CompositeType"/>
                    <param name="itemNames" type="String[]"/>
                    <param name="itemValues" type="Object[]"/>
                </params>
            </method>
            <method name="makeMap" type="SortedMap<String,Object>" line="123">
                <params>
                    <param name="itemNames" type="String[]"/>
                    <param name="itemValues" type="Object[]"/>
                </params>
                <scope line="129"/>
                <declaration name="map" type="SortedMap&lt;String,Object&gt;" line="135"/>
                <scope line="136">
                    <declaration name="name" type="String" line="137"/>
                </scope>
            </method>
            <javadoc line="148">
                &lt;p&gt;
                  Constructs a &lt;tt&gt;CompositeDataSupport&lt;/tt&gt; instance with the specified &lt;tt&gt;compositeType&lt;/tt&gt;, whose item names and corresponding values
                  are given by the mappings in the map &lt;tt&gt;items&lt;/tt&gt;.
                  This constructor converts the keys to a string array and the values to an object array and calls
                  &lt;tt&gt;CompositeDataSupport(javax.management.openmbean.CompositeType, java.lang.String[], java.lang.Object[])&lt;/tt&gt;.                
                <param>
                    compositeType  the <i>composite type </i> of this <i>composite data</i> instance;
                      must not be null.                    
                </param>
                <param>
                    items  the mappings of all the item names to their values;
                      <tt>items</tt> must contain all the item names defined in <tt>compositeType</tt>;
                      must not be null or empty.                    
                </param>
                <throws>
                    IllegalArgumentException <tt>compositeType</tt> is null, or
                      <tt>items</tt> is null or empty, or one of the keys in <tt>items</tt> is a null
                      or empty string.                    
                </throws>
                <throws>
                    OpenDataException <tt>items</tt>' size differs from the
                      number of items defined in <tt>compositeType</tt>, or one of the
                      keys in <tt>items</tt> does not exist as an item name defined in
                      <tt>compositeType</tt>, or one of the values in <tt>items</tt>
                      is not a valid value for the corresponding item as defined in
                      <tt>compositeType</tt>.                    
                </throws>
                <throws>
                    ArrayStoreException one or more keys in <tt>items</tt> is not of
                      the class <tt>java.lang.String</tt>.                    
                </throws>
            </javadoc>
            <method name="CompositeDataSupport" type="constructor" line="175">
                <params>
                    <param name="compositeType" type="CompositeType"/>
                    <param name="items" type="Map<String,?>"/>
                </params>
            </method>
            <method name="makeMap" type="SortedMap<String,Object>" line="179">
                <params>
                    <param name="items" type="Map<String,?>"/>
                </params>
                <comment line="190">
                    This can happen because of erasure.  The particular
                     exception is a historical artifact - an implementation
                     detail that leaked into the API.                    
                </comment>
                <declaration name="map" type="SortedMap&lt;String,Object&gt;" line="183"/>
                <scope line="184">
                    <scope line="187"/>
                </scope>
            </method>
            <method name="CompositeDataSupport" type="constructor" line="200">
                <params>
                    <param name="items" type="SortedMap<String,Object>"/>
                    <param name="compositeType" type="CompositeType"/>
                </params>
                <comment line="203">
                    Check compositeType is not null                    
                </comment>
                <comment line="209">
                    item names defined in compositeType:                    
                </comment>
                <comment line="213">
                    This is just a comparison, but we do it this way for a better
                     exception message.                    
                </comment>
                <comment line="228">
                    Check each value, if not null, is of the open type defined for the
                     corresponding item                    
                </comment>
                <comment line="242">
                    Initialize internal fields: compositeType and contents                    
                </comment>
                <scope line="204"/>
                <declaration name="namesFromType" type="Set&lt;String&gt;" line="209"/>
                <declaration name="namesFromItems" type="Set&lt;String&gt;" line="210"/>
                <scope line="214">
                    <declaration name="extraFromType" type="Set&lt;String&gt;" line="215"/>
                    <declaration name="extraFromItems" type="Set&lt;String&gt;" line="217"/>
                    <scope line="219"/>
                </scope>
                <scope line="229">
                    <declaration name="value" type="Object" line="230"/>
                    <scope line="231">
                        <declaration name="itemType" type="OpenType&lt;?&gt;" line="232"/>
                        <scope line="233"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="247">
                Returns the &lt;i&gt;composite type &lt;/i&gt; of this &lt;i&gt;composite data&lt;/i&gt; instance.                
            </javadoc>
            <method name="getCompositeType" type="CompositeType" line="250"/>
            <javadoc line="255">
                Returns the value of the item whose name is &lt;tt&gt;key&lt;/tt&gt;.                
                <throws>
                    IllegalArgumentException  if <tt>key</tt> is a null or empty String.                    
                </throws>
                <throws>
                    InvalidKeyException  if <tt>key</tt> is not an existing item name for
                      this <tt>CompositeData</tt> instance.                    
                </throws>
            </javadoc>
            <method name="get" type="Object" line="263">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="265"/>
                <scope line="268"/>
            </method>
            <javadoc line="274">
                Returns an array of the values of the items whose names are specified by
                  &lt;tt&gt;keys&lt;/tt&gt;, in the same order as &lt;tt&gt;keys&lt;/tt&gt;.                
                <throws>
                    IllegalArgumentException  if an element in <tt>keys</tt> is a null
                      or empty String.                    
                </throws>
                <throws>
                    InvalidKeyException  if an element in <tt>keys</tt> is not an existing
                      item name for this <tt>CompositeData</tt> instance.                    
                </throws>
            </javadoc>
            <method name="getAll" type="Object[]" line="284">
                <params>
                    <param name="keys" type="String[]"/>
                </params>
                <scope line="286"/>
                <declaration name="results" type="Object[]" line="289"/>
                <scope line="290"/>
            </method>
            <javadoc line="296">
                Returns &lt;tt&gt;true&lt;/tt&gt; if and only if this &lt;tt&gt;CompositeData&lt;/tt&gt; instance contains
                  an item whose name is &lt;tt&gt;key&lt;/tt&gt;.
                  If &lt;tt&gt;key&lt;/tt&gt; is a null or empty String, this method simply returns false.                
            </javadoc>
            <method name="containsKey" type="boolean" line="301">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="303"/>
            </method>
            <javadoc line="309">
                Returns &lt;tt&gt;true&lt;/tt&gt; if and only if this &lt;tt&gt;CompositeData&lt;/tt&gt; instance
                  contains an item
                  whose value is &lt;tt&gt;value&lt;/tt&gt;.                
            </javadoc>
            <method name="containsValue" type="boolean" line="314">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="319">
                Returns an unmodifiable Collection view of the item values contained in this
                  &lt;tt&gt;CompositeData&lt;/tt&gt; instance.
                  The returned collection&apos;s iterator will return the values in the ascending
                  lexicographic order of the corresponding
                  item names.                
            </javadoc>
            <method name="values" type="Collection<?>" line="326"/>
            <javadoc line="331">
                Compares the specified &lt;var&gt;obj&lt;/var&gt; parameter with this
                  &lt;code&gt;CompositeDataSupport&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Returns &lt;tt&gt;true&lt;/tt&gt; if and only if all of the following statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;var&gt;obj&lt;/var&gt; is non null,&lt;/li&gt;
                  &lt;li&gt;&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;CompositeData&lt;/code&gt; interface,&lt;/li&gt;
                  &lt;li&gt;their composite types are equal&lt;/li&gt;
                  &lt;li&gt;their contents, i.e. (name, value) pairs are equal. If a value contained in
                  the content is an array, the value comparison is done as if by calling
                  the {@link java.util.Arrays#deepEquals(Object[],Object[]) deepEquals} method
                  for arrays of object reference types or the appropriate overloading of{@code Arrays.equals(e1,e2)} for arrays of primitive types&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  This ensures that this &lt;tt&gt;equals&lt;/tt&gt; method works properly for
                  &lt;var&gt;obj&lt;/var&gt; parameters which are different implementations of the
                  &lt;code&gt;CompositeData&lt;/code&gt; interface, with the restrictions mentioned in the{@link java.util.Collection#equals(Object) equals}method of the &lt;tt&gt;java.util.Collection&lt;/tt&gt; interface.                
                <param>
                    obj  the object to be compared for equality with this
                      <code>CompositeDataSupport</code> instance.                    
                </param>
                <return>
                    <code>true</code> if the specified object is equal to this
                      <code>CompositeDataSupport</code> instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="359">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="365">
                    if obj is not a CompositeData, return false                    
                </comment>
                <comment line="372">
                    their compositeType should be equal                    
                </comment>
                <comment line="398">
                    All tests for equality were successful                    
                </comment>
                <scope line="360"/>
                <scope line="365"/>
                <declaration name="other" type="CompositeData" line="369"/>
                <scope line="372"/>
                <scope line="376"/>
                <scope line="380">
                    <declaration name="e1" type="Object" line="381"/>
                    <declaration name="e2" type="Object" line="382"/>
                    <declaration name="eq" type="boolean" line="389"/>
                </scope>
            </method>
            <javadoc line="402">
                Returns the hash code value for this &lt;code&gt;CompositeDataSupport&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of a &lt;code&gt;CompositeDataSupport&lt;/code&gt; instance is the sum of the hash codes
                  of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons
                  (ie: its &lt;i&gt;composite type&lt;/i&gt; and all the item values).
                  &lt;p&gt;
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt;
                  for any two &lt;code&gt;CompositeDataSupport&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;
                  Each item value&apos;s hash code is added to the returned hash code.
                  If an item value is an array,
                  its hash code is obtained as if by calling the{@link java.util.Arrays#deepHashCode(Object[]) deepHashCode} method
                  for arrays of object reference types or the appropriate overloading
                  of {@code Arrays.hashCode(e)} for arrays of primitive types.                
                <return>
                    the hash code value for this <code>CompositeDataSupport</code> instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="424">
                <declaration name="hashcode" type="int" line="425"/>
                <scope line="427"/>
            </method>
            <javadoc line="453">
                Returns a string representation of this &lt;code&gt;CompositeDataSupport&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of the name of this class (ie &lt;code&gt;javax.management.openmbean.CompositeDataSupport&lt;/code&gt;),
                  the string representation of the composite type of this instance, and the string representation of the contents
                  (ie list the itemName=itemValue mappings).                
                <return>
                    a string representation of this <code>CompositeDataSupport</code> instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="463"/>
            <method name="contentString" type="String" line="474">
                <declaration name="sb" type="StringBuilder" line="475"/>
                <declaration name="sep" type="String" line="476"/>
                <scope line="477">
                    <declaration name="s" type="String" line="479"/>
                </scope>
            </method>
        </class>
    </source>