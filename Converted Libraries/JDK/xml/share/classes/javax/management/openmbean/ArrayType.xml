<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.io.ObjectStreamException"/>
        <import package="java.lang.reflect.Array"/>
        <class name="ArrayType" line="4">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="OpenType">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="4">
                The &lt;code&gt;ArrayType&lt;/code&gt; class is the &lt;i&gt;open type&lt;/i&gt; class whose instances describe
                  all &lt;i&gt;open data&lt;/i&gt; values which are n-dimensional arrays of &lt;i&gt;open data&lt;/i&gt; values.
                  &lt;p&gt;
                  Examples of valid {@code ArrayType} instances are:
                  &lt;pre&gt;
                  // 2-dimension array of java.lang.String
                  ArrayType&lt;String[][]&gt; a1 = new ArrayType&lt;String[][]&gt;(2, SimpleType.STRING);
                  // 1-dimension array of int
                  ArrayType&lt;int[]&gt; a2 = new ArrayType&lt;int[]&gt;(SimpleType.INTEGER, true);
                  // 1-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[]&gt; a3 = new ArrayType&lt;Integer[]&gt;(SimpleType.INTEGER, false);
                  // 4-dimension array of int
                  ArrayType&lt;int[][][][]&gt; a4 = new ArrayType&lt;int[][][][]&gt;(3, a2);
                  // 4-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[][][][]&gt; a5 = new ArrayType&lt;Integer[][][][]&gt;(3, a3);
                  // 1-dimension array of java.lang.String
                  ArrayType&lt;String[]&gt; a6 = new ArrayType&lt;String[]&gt;(SimpleType.STRING, false);
                  // 1-dimension array of long
                  ArrayType&lt;long[]&gt; a7 = new ArrayType&lt;long[]&gt;(SimpleType.LONG, true);
                  // 1-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[]&gt; a8 = ArrayType.getArrayType(SimpleType.INTEGER);
                  // 2-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[][]&gt; a9 = ArrayType.getArrayType(a8);
                  // 2-dimension array of int
                  ArrayType&lt;int[][]&gt; a10 = ArrayType.getPrimitiveArrayType(int[][].class);
                  // 3-dimension array of int
                  ArrayType&lt;int[][][]&gt; a11 = ArrayType.getArrayType(a10);
                  // 1-dimension array of float
                  ArrayType&lt;float[]&gt; a12 = ArrayType.getPrimitiveArrayType(float[].class);
                  // 2-dimension array of float
                  ArrayType&lt;float[][]&gt; a13 = ArrayType.getArrayType(a12);
                  // 1-dimension array of javax.management.ObjectName
                  ArrayType&lt;ObjectName[]&gt; a14 = ArrayType.getArrayType(SimpleType.OBJECTNAME);
                  // 2-dimension array of javax.management.ObjectName
                  ArrayType&lt;ObjectName[][]&gt; a15 = ArrayType.getArrayType(a14);
                  // 3-dimension array of java.lang.String
                  ArrayType&lt;String[][][]&gt; a16 = new ArrayType&lt;String[][][]&gt;(3, SimpleType.STRING);
                  // 1-dimension array of java.lang.String
                  ArrayType&lt;String[]&gt; a17 = new ArrayType&lt;String[]&gt;(1, SimpleType.STRING);
                  // 2-dimension array of java.lang.String
                  ArrayType&lt;String[][]&gt; a18 = new ArrayType&lt;String[][]&gt;(1, a17);
                  // 3-dimension array of java.lang.String
                  ArrayType&lt;String[][][]&gt; a19 = new ArrayType&lt;String[][][]&gt;(1, a18);
                  &lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="52"/>
            <declaration name="dimension" type="int" line="53"/>
            <javadoc line="53">
                @serial The dimension of arrays described by this {@link ArrayType}instance.                
            </javadoc>
            <declaration name="elementType" type="OpenType&amp;lt;?&amp;gt;" line="57"/>
            <javadoc line="57">
                @serial The &lt;i&gt;open type&lt;/i&gt; of element values contained in the arrays
                  described by this {@link ArrayType} instance.                
            </javadoc>
            <declaration name="primitiveArray" type="boolean" line="62"/>
            <javadoc line="62">
                @serial This flag indicates whether this {@link ArrayType}describes a primitive array.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="67"/>
            <declaration name="myToString" type="String" line="68"/>
            <declaration name="PRIMITIVE_WRAPPER_NAME_INDEX" type="int" line="69"/>
            <declaration name="PRIMITIVE_TYPE_NAME_INDEX" type="int" line="70"/>
            <declaration name="PRIMITIVE_TYPE_KEY_INDEX" type="int" line="71"/>
            <declaration name="PRIMITIVE_OPEN_TYPE_INDEX" type="int" line="72"/>
            <declaration name="PRIMITIVE_ARRAY_TYPES" type="Object[][]" line="73"/>
            <method name="isPrimitiveContentType" type="boolean" line="74">
                <params>
                    <param name="primitiveKey" type="String"/>
                </params>
                <scope line="75">
                    <scope line="76"/>
                </scope>
            </method>
            <javadoc line="82">
                Return the key used to identify the element type in
                  arrays - e.g. &quot;Z&quot; for boolean, &quot;C&quot; for char etc...                
                <param>
                    elementClassName the wrapper class name of the array
                      element (&quot;Boolean&quot;,  &quot;Character&quot;, etc...)                    
                </param>
                <return>
                    the key corresponding to the given type (&quot;Z&quot;, &quot;C&quot;, etc...)
                      return null if the given elementClassName is not a primitive
                      wrapper class name.                    
                </return>
            </javadoc>
            <method name="getPrimitiveTypeKey" type="String" line="91">
                <params>
                    <param name="elementClassName" type="String"/>
                </params>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Return the primitive type name corresponding to the given wrapper class.
                  e.g. &quot;boolean&quot; for &quot;Boolean&quot;, &quot;char&quot; for &quot;Character&quot; etc...                
                <param>
                    elementClassName the type of the array element (&quot;Boolean&quot;,
                      &quot;Character&quot;, etc...)                    
                </param>
                <return>
                    the primitive type name corresponding to the given wrapper class
                      (&quot;boolean&quot;, &quot;char&quot;, etc...)
                      return null if the given elementClassName is not a primitive
                      wrapper type name.                    
                </return>
            </javadoc>
            <method name="getPrimitiveTypeName" type="String" line="107">
                <params>
                    <param name="elementClassName" type="String"/>
                </params>
                <scope line="108"/>
            </method>
            <javadoc line="113">
                Return the primitive open type corresponding to the given primitive type.
                  e.g. SimpleType.BOOLEAN for &quot;boolean&quot;, SimpleType.CHARACTER for
                  &quot;char&quot;, etc...                
                <param>
                    primitiveTypeName the primitive type of the array element (&quot;boolean&quot;,
                      &quot;char&quot;, etc...)                    
                </param>
                <return>
                    the OpenType corresponding to the given primitive type name
                      (SimpleType.BOOLEAN, SimpleType.CHARACTER, etc...)
                      return null if the given elementClassName is not a primitive
                      type name.                    
                </return>
            </javadoc>
            <method name="getPrimitiveOpenType" type="SimpleType&lt;?&gt;" line="124">
                <params>
                    <param name="primitiveTypeName" type="String"/>
                </params>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Constructs an &lt;tt&gt;ArrayType&lt;/tt&gt; instance describing &lt;i&gt;open data&lt;/i&gt; values which are
                  arrays with dimension &lt;var&gt;dimension&lt;/var&gt; of elements whose &lt;i&gt;open type&lt;/i&gt; is &lt;var&gt;elementType&lt;/var&gt;.
                  &lt;p&gt;
                  When invoked on an &lt;tt&gt;ArrayType&lt;/tt&gt; instance, the {@link OpenType#getClassName() getClassName} method
                  returns the class name of the array instances it describes (following the rules defined by the{@link Class#getName() getName} method of &lt;code&gt;java.lang.Class&lt;/code&gt;), not the class name of the array elements
                  (which is returned by a call to &lt;tt&gt;getElementOpenType().getClassName()&lt;/tt&gt;).
                  &lt;p&gt;
                  The internal field corresponding to the type name of this &lt;code&gt;ArrayType&lt;/code&gt; instance is also set to
                  the class name of the array instances it describes.
                  In other words, the methods &lt;code&gt;getClassName&lt;/code&gt; and &lt;code&gt;getTypeName&lt;/code&gt; return the same string value.
                  The internal field corresponding to the description of this &lt;code&gt;ArrayType&lt;/code&gt; instance is set to a string value
                  which follows the following template:
                  &lt;ul&gt;
                  &lt;li&gt;if non-primitive array: &lt;tt&gt;&lt;i&gt;&amp;lt;dimension&amp;gt;&lt;/i&gt;-dimension array of &lt;i&gt;&amp;lt;element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;if primitive array: &lt;tt&gt;&lt;i&gt;&amp;lt;dimension&amp;gt;&lt;/i&gt;-dimension array of &lt;i&gt;&amp;lt;primitive_type_of_the_element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;String[][][]&gt; t = new ArrayType&lt;String[][][]&gt;(3, SimpleType.STRING);
                  System.out.println(&quot;array class name       = &quot; + t.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [[[Ljava.lang.String;
                  element class name     = java.lang.String
                  array type name        = [[[Ljava.lang.String;
                  array type description = 3-dimension array of java.lang.String
                  &lt;/pre&gt;
                  And the following piece of code which is equivalent to the one listed
                  above would also produce the same output:
                  &lt;pre&gt;
                  ArrayType&lt;String[]&gt; t1 = new ArrayType&lt;String[]&gt;(1, SimpleType.STRING);
                  ArrayType&lt;String[][]&gt; t2 = new ArrayType&lt;String[][]&gt;(1, t1);
                  ArrayType&lt;String[][][]&gt; t3 = new ArrayType&lt;String[][][]&gt;(1, t2);
                  System.out.println(&quot;array class name       = &quot; + t3.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t3.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t3.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t3.getDescription());
                  &lt;/pre&gt;                
                <param>
                    dimension  the dimension of arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt; instance;
                      must be greater than or equal to 1.                    
                </param>
                <param>
                    elementType  the &lt;i&gt;open type&lt;/i&gt; of element values contained
                      in the arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt;
                      instance; must be an instance of either
                      &lt;tt&gt;SimpleType&lt;/tt&gt;, &lt;tt&gt;CompositeType&lt;/tt&gt;,
                      &lt;tt&gt;TabularType&lt;/tt&gt; or another &lt;tt&gt;ArrayType&lt;/tt&gt;
                      with a &lt;tt&gt;SimpleType&lt;/tt&gt;, &lt;tt&gt;CompositeType&lt;/tt&gt;
                      or &lt;tt&gt;TabularType&lt;/tt&gt; as its &lt;tt&gt;elementType&lt;/tt&gt;.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code dimension} is not a positive
                      integer.                    
                </throws>
                <throws>
                    OpenDataException  if &lt;var&gt;elementType&apos;s className&lt;/var&gt; is not
                      one of the allowed Java class names for open
                      data.                    
                </throws>
            </javadoc>
            <method name="ArrayType" type="constructor" line="189">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType&lt;?&gt;"/>
                </params>
                <scope line="191">
                    <declaration name="at" type="ArrayType&amp;lt;?&amp;gt;" line="192"/>
                </scope>
                <scope line="197"/>
            </method>
            <javadoc line="203">
                Constructs a unidimensional {@code ArrayType} instance for the
                  supplied {@code SimpleType}.
                  &lt;p&gt;
                  This constructor supports the creation of arrays of primitive
                  types when {@code primitiveArray} is {@code true}.
                  &lt;p&gt;
                  For primitive arrays the {@link #getElementOpenType()} method
                  returns the {@link SimpleType} corresponding to the wrapper
                  type of the primitive type of the array.
                  &lt;p&gt;
                  When invoked on an &lt;tt&gt;ArrayType&lt;/tt&gt; instance, the {@link OpenType#getClassName() getClassName} method
                  returns the class name of the array instances it describes (following the rules defined by the{@link Class#getName() getName} method of &lt;code&gt;java.lang.Class&lt;/code&gt;), not the class name of the array elements
                  (which is returned by a call to &lt;tt&gt;getElementOpenType().getClassName()&lt;/tt&gt;).
                  &lt;p&gt;
                  The internal field corresponding to the type name of this &lt;code&gt;ArrayType&lt;/code&gt; instance is also set to
                  the class name of the array instances it describes.
                  In other words, the methods &lt;code&gt;getClassName&lt;/code&gt; and &lt;code&gt;getTypeName&lt;/code&gt; return the same string value.
                  The internal field corresponding to the description of this &lt;code&gt;ArrayType&lt;/code&gt; instance is set to a string value
                  which follows the following template:
                  &lt;ul&gt;
                  &lt;li&gt;if non-primitive array: &lt;tt&gt;1-dimension array of &lt;i&gt;&amp;lt;element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;if primitive array: &lt;tt&gt;1-dimension array of &lt;i&gt;&amp;lt;primitive_type_of_the_element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;int[]&gt; t = new ArrayType&lt;int[]&gt;(SimpleType.INTEGER, true);
                  System.out.println(&quot;array class name       = &quot; + t.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [I
                  element class name     = java.lang.Integer
                  array type name        = [I
                  array type description = 1-dimension array of int
                  &lt;/pre&gt;                
                <param>
                    elementType the {@code SimpleType} of the element values
                      contained in the arrays described by this{@code ArrayType} instance.                    
                </param>
                <param>
                    primitiveArray {@code true} when this array describes
                      primitive arrays.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code dimension} is not a positive
                      integer.                    
                </throws>
                <throws>
                    OpenDataException if {@code primitiveArray} is {@code true} and{@code elementType} is not a valid {@code SimpleType} for a primitive
                      type.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="ArrayType" type="constructor" line="253">
                <params>
                    <param name="elementType" type="SimpleType&lt;?&gt;"/>
                    <param name="primitiveArray" type="boolean"/>
                </params>
            </method>
            <method name="ArrayType" type="constructor" line="259">
                <params>
                    <param name="className" type="String"/>
                    <param name="typeName" type="String"/>
                    <param name="description" type="String"/>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType&lt;?&gt;"/>
                    <param name="primitiveArray" type="boolean"/>
                </params>
            </method>
            <method name="buildArrayClassName" type="String" line="265">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType&lt;?&gt;"/>
                </params>
                <declaration name="isPrimitiveArray" type="boolean" line="266"/>
                <scope line="267"/>
            </method>
            <method name="buildArrayClassName" type="String" line="272">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType&lt;?&gt;"/>
                    <param name="isPrimitiveArray" type="boolean"/>
                </params>
                <scope line="273"/>
                <declaration name="result" type="StringBuilder" line="276"/>
                <declaration name="elementClassName" type="String" line="277"/>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="284">
                    <scope line="285">
                        <declaration name="key" type="String" line="286"/>
                    </scope>
                    <scope line="290"/>
                </scope>
            </method>
            <method name="buildArrayDescription" type="String" line="298">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType&lt;?&gt;"/>
                </params>
                <declaration name="isPrimitiveArray" type="boolean" line="299"/>
                <scope line="300"/>
            </method>
            <method name="buildArrayDescription" type="String" line="305">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType&lt;?&gt;"/>
                    <param name="isPrimitiveArray" type="boolean"/>
                </params>
                <scope line="306">
                    <declaration name="at" type="ArrayType&amp;lt;?&amp;gt;" line="307"/>
                </scope>
                <declaration name="result" type="StringBuilder" line="312"/>
                <declaration name="elementClassName" type="String" line="313"/>
                <scope line="314">
                    <declaration name="primitiveType" type="String" line="315"/>
                </scope>
                <scope line="319"/>
            </method>
            <javadoc line="324">
                Returns the dimension of arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt; instance.                
                <return>
                    the dimension.                    
                </return>
            </javadoc>
            <method name="getDimension" type="int" line="328"/>
            <javadoc line="331">
                Returns the &lt;i&gt;open type&lt;/i&gt; of element values contained in the arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt; instance.                
                <return>
                    the element type.                    
                </return>
            </javadoc>
            <method name="getElementOpenType" type="OpenType&lt;?&gt;" line="335"/>
            <javadoc line="338">
                Returns &lt;code&gt;true&lt;/code&gt; if the open data values this open
                  type describes are primitive arrays, &lt;code&gt;false&lt;/code&gt; otherwise.                
                <return>
                    true if this is a primitive array type.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPrimitiveArray" type="boolean" line="344"/>
            <javadoc line="347">
                Tests whether &lt;var&gt;obj&lt;/var&gt; is a value for this &lt;code&gt;ArrayType&lt;/code&gt;
                  instance.
                  &lt;p&gt;
                  This method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;var&gt;obj&lt;/var&gt;
                  is not null, &lt;var&gt;obj&lt;/var&gt; is an array and any one of the following
                  is &lt;tt&gt;true&lt;/tt&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;if this &lt;code&gt;ArrayType&lt;/code&gt; instance describes an array of
                  &lt;tt&gt;SimpleType&lt;/tt&gt; elements or their corresponding primitive types,
                  &lt;var&gt;obj&lt;/var&gt;&apos;s class name is the same as the className field defined
                  for this &lt;code&gt;ArrayType&lt;/code&gt; instance (i.e. the class name returned
                  by the {@link OpenType#getClassName() getClassName} method, which
                  includes the dimension information),&lt;br&gt;&amp;nbsp;&lt;/li&gt;
                  &lt;li&gt;if this &lt;code&gt;ArrayType&lt;/code&gt; instance describes an array of
                  classes implementing the {@code TabularData} interface or the{@code CompositeData} interface, &lt;var&gt;obj&lt;/var&gt; is assignable to
                  such a declared array, and each element contained in &lt;var&gt;obj&lt;/var&gt;
                  is either null or a valid value for the element&apos;s open type specified
                  by this &lt;code&gt;ArrayType&lt;/code&gt; instance.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    obj the object to be tested.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;var&gt;obj&lt;/var&gt; is a value for this
                      &lt;code&gt;ArrayType&lt;/code&gt; instance.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="371">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="372"/>
                <declaration name="objClass" type="Class&amp;lt;?&amp;gt;" line="375"/>
                <declaration name="objClassName" type="String" line="376"/>
                <scope line="377"/>
                <scope line="380"/>
                <scope line="383">
                    <declaration name="isTabular" type="boolean" line="384"/>
                    <declaration name="dims" type="int[]" line="385"/>
                    <declaration name="elementClass" type="Class&amp;lt;?&amp;gt;" line="386"/>
                    <declaration name="targetClass" type="Class&amp;lt;?&amp;gt;" line="387"/>
                    <scope line="388"/>
                    <scope line="391"/>
                </scope>
            </method>
            <javadoc line="398">
                Returns true if and only if all elements contained in the array argument x_dim_Array of dimension dim
                  are valid values (ie either null or of the right openType)
                  for the element open type specified by this ArrayType instance.
                  This method&apos;s implementation uses recursion to go down the dimensions of the array argument.                
            </javadoc>
            <method name="checkElementsType" type="boolean" line="404">
                <params>
                    <param name="x_dim_Array" type="Object[]"/>
                    <param name="dim" type="int"/>
                </params>
                <scope line="405">
                    <scope line="406">
                        <scope line="407"/>
                    </scope>
                </scope>
                <scope line="413">
                    <scope line="414">
                        <scope line="415"/>
                    </scope>
                </scope>
            </method>
            <method name="isAssignableFrom" type="boolean" line="422">
                <params>
                    <param name="ot" type="OpenType&lt;?&gt;"/>
                </params>
                <declaration name="at" type="ArrayType&amp;lt;?&amp;gt;" line="424"/>
            </method>
            <javadoc line="427">
                Compares the specified &lt;code&gt;obj&lt;/code&gt; parameter with this
                  &lt;code&gt;ArrayType&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Two &lt;code&gt;ArrayType&lt;/code&gt; instances are equal if and only if they
                  describe array instances which have the same dimension, elements&apos;
                  open type and primitive array flag.                
                <param>
                    obj the object to be compared for equality with this
                      &lt;code&gt;ArrayType&lt;/code&gt; instance; if &lt;var&gt;obj&lt;/var&gt;
                      is &lt;code&gt;null&lt;/code&gt; or is not an instance of the
                      class &lt;code&gt;ArrayType&lt;/code&gt; this method returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified object is equal to
                      this &lt;code&gt;ArrayType&lt;/code&gt; instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="442">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="443"/>
                <declaration name="other" type="ArrayType&amp;lt;?&amp;gt;" line="447"/>
                <scope line="448"/>
                <scope line="451"/>
            </method>
            <javadoc line="456">
                Returns the hash code value for this &lt;code&gt;ArrayType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of an &lt;code&gt;ArrayType&lt;/code&gt; instance is the sum of the
                  hash codes of all the elements of information used in &lt;code&gt;equals&lt;/code&gt;
                  comparisons (i.e. dimension, elements&apos; open type and primitive array flag).
                  The hashcode for a primitive value is the hashcode of the corresponding boxed
                  object (e.g. the hashcode for &lt;tt&gt;true&lt;/tt&gt; is &lt;tt&gt;Boolean.TRUE.hashCode()&lt;/tt&gt;).
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that
                  &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two
                  &lt;code&gt;ArrayType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;
                  As &lt;code&gt;ArrayType&lt;/code&gt; instances are immutable, the hash
                  code for this instance is calculated once, on the first call
                  to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned
                  for subsequent calls.                
                <return>
                    the hash code value for this &lt;code&gt;ArrayType&lt;/code&gt; instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="475">
                <scope line="476">
                    <declaration name="value" type="int" line="477"/>
                </scope>
            </method>
            <javadoc line="485">
                Returns a string representation of this &lt;code&gt;ArrayType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of the name of this class (i.e.
                  &lt;code&gt;javax.management.openmbean.ArrayType&lt;/code&gt;), the type name,
                  the dimension, the elements&apos; open type and the primitive array flag
                  defined for this instance.
                  &lt;p&gt;
                  As &lt;code&gt;ArrayType&lt;/code&gt; instances are immutable, the
                  string representation for this instance is calculated
                  once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and
                  then the same value is returned for subsequent calls.                
                <return>
                    a string representation of this &lt;code&gt;ArrayType&lt;/code&gt; instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="499">
                <scope line="500"/>
            </method>
            <javadoc line="505">
                Create an {@code ArrayType} instance in a type-safe manner.
                  &lt;p&gt;
                  Multidimensional arrays can be built up by calling this method as many
                  times as necessary.
                  &lt;p&gt;
                  Calling this method twice with the same parameters may return the same
                  object or two equal but not identical objects.
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;String[]&gt; t1 = ArrayType.getArrayType(SimpleType.STRING);
                  ArrayType&lt;String[][]&gt; t2 = ArrayType.getArrayType(t1);
                  ArrayType&lt;String[][][]&gt; t3 = ArrayType.getArrayType(t2);
                  System.out.println(&quot;array class name       = &quot; + t3.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t3.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t3.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t3.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [[[Ljava.lang.String;
                  element class name     = java.lang.String
                  array type name        = [[[Ljava.lang.String;
                  array type description = 3-dimension array of java.lang.String
                  &lt;/pre&gt;                
                <param>
                    elementType  the &lt;i&gt;open type&lt;/i&gt; of element values contained
                      in the arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt;
                      instance; must be an instance of either
                      &lt;tt&gt;SimpleType&lt;/tt&gt;, &lt;tt&gt;CompositeType&lt;/tt&gt;,
                      &lt;tt&gt;TabularType&lt;/tt&gt; or another &lt;tt&gt;ArrayType&lt;/tt&gt;
                      with a &lt;tt&gt;SimpleType&lt;/tt&gt;, &lt;tt&gt;CompositeType&lt;/tt&gt;
                      or &lt;tt&gt;TabularType&lt;/tt&gt; as its &lt;tt&gt;elementType&lt;/tt&gt;.                    
                </param>
                <throws>
                    OpenDataException if &lt;var&gt;elementType&apos;s className&lt;/var&gt; is not
                      one of the allowed Java class names for open
                      data.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getArrayType" type="ArrayType&lt;E[]&gt;" line="543">
                <params>
                    <param name="elementType" type="OpenType&lt;E&gt;"/>
                </params>
            </method>
            <javadoc line="546">
                Create an {@code ArrayType} instance in a type-safe manner.
                  &lt;p&gt;
                  Calling this method twice with the same parameters may return the
                  same object or two equal but not identical objects.
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;int[][][]&gt; t = ArrayType.getPrimitiveArrayType(int[][][].class);
                  System.out.println(&quot;array class name       = &quot; + t.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [[[I
                  element class name     = java.lang.Integer
                  array type name        = [[[I
                  array type description = 3-dimension array of int
                  &lt;/pre&gt;                
                <param>
                    arrayClass a primitive array class such as {@code int[].class},{@code boolean[][].class}, etc. The {@link #getElementOpenType()} method of the returned{@code ArrayType} returns the {@link SimpleType}corresponding to the wrapper type of the primitive
                      type of the array.                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;var&gt;arrayClass&lt;/var&gt; is not
                      a primitive array.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getPrimitiveArrayType" type="ArrayType&lt;T&gt;" line="573">
                <params>
                    <param name="arrayClass" type="Class&lt;T&gt;"/>
                </params>
                <scope line="574"/>
                <declaration name="n" type="int" line="577"/>
                <declaration name="componentType" type="Class&amp;lt;?&amp;gt;" line="578"/>
                <scope line="579"/>
                <declaration name="componentTypeName" type="String" line="583"/>
                <scope line="584"/>
                <declaration name="simpleType" type="SimpleType&amp;lt;?&amp;gt;" line="587"/>
                <scope line="588">
                    <declaration name="at" type="ArrayType" line="589"/>
                </scope>
                <scope line="593"/>
            </method>
            <javadoc line="597">
                Replace/resolve the object read from the stream before it is returned
                  to the caller.                
                <serialData>
                    The new serial form of this class defines a new serializable{@code boolean} field {@code primitiveArray}. In order to guarantee the
                      interoperability with previous versions of this class the new serial
                      form must continue to refer to primitive wrapper types even when the{@code ArrayType} instance describes a primitive type array. So when{@code primitiveArray} is {@code true} the {@code className},{@code typeName} and {@code description} serializable fields
                      are converted into primitive types before the deserialized{@code ArrayType} instance is return to the caller. The{@code elementType} field always returns the {@code SimpleType}corresponding to the primitive wrapper type of the array&apos;s
                      primitive type.
                      &lt;p&gt;
                      Therefore the following serializable fields are deserialized as follows:
                      &lt;ul&gt;
                      &lt;li&gt;if {@code primitiveArray} is {@code true} the {@code className}field is deserialized by replacing the array&apos;s component primitive
                      wrapper type by the corresponding array&apos;s component primitive type,
                      e.g. {@code &quot;[[Ljava.lang.Integer;&quot;} will be deserialized as{@code &quot;[[I&quot;}.&lt;/li&gt;
                      &lt;li&gt;if {@code primitiveArray} is {@code true} the {@code typeName}field is deserialized by replacing the array&apos;s component primitive
                      wrapper type by the corresponding array&apos;s component primitive type,
                      e.g. {@code &quot;[[Ljava.lang.Integer;&quot;} will be deserialized as{@code &quot;[[I&quot;}.&lt;/li&gt;
                      &lt;li&gt;if {@code primitiveArray} is {@code true} the {@code description}field is deserialized by replacing the array&apos;s component primitive
                      wrapper type by the corresponding array&apos;s component primitive type,
                      e.g. {@code &quot;2-dimension array of java.lang.Integer&quot;} will be
                      deserialized as {@code &quot;2-dimension array of int&quot;}.&lt;/li&gt;
                      &lt;/ul&gt;                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="readResolve" type="Object" line="621">
                <scope line="622"/>
                <scope line="625"/>
            </method>
            <method name="convertFromWrapperToPrimitiveTypes" type="ArrayType&lt;T&gt;" line="629">
                <declaration name="cn" type="String" line="630"/>
                <declaration name="tn" type="String" line="631"/>
                <declaration name="d" type="String" line="632"/>
                <scope line="633">
                    <scope line="634"/>
                </scope>
            </method>
            <javadoc line="643">
                Nominate a replacement for this object in the stream before the object
                  is written.                
                <serialData>
                    The new serial form of this class defines a new serializable{@code boolean} field {@code primitiveArray}. In order to guarantee the
                      interoperability with previous versions of this class the new serial
                      form must continue to refer to primitive wrapper types even when the{@code ArrayType} instance describes a primitive type array. So when{@code primitiveArray} is {@code true} the {@code className},{@code typeName} and {@code description} serializable fields
                      are converted into wrapper types before the serialized{@code ArrayType} instance is written to the stream. The{@code elementType} field always returns the {@code SimpleType}corresponding to the primitive wrapper type of the array&apos;s
                      primitive type.
                      &lt;p&gt;
                      Therefore the following serializable fields are serialized as follows:
                      &lt;ul&gt;
                      &lt;li&gt;if {@code primitiveArray} is {@code true} the {@code className}field is serialized by replacing the array&apos;s component primitive
                      type by the corresponding array&apos;s component primitive wrapper type,
                      e.g. {@code &quot;[[I&quot;} will be serialized as{@code &quot;[[Ljava.lang.Integer;&quot;}.&lt;/li&gt;
                      &lt;li&gt;if {@code primitiveArray} is {@code true} the {@code typeName}field is serialized by replacing the array&apos;s component primitive
                      type by the corresponding array&apos;s component primitive wrapper type,
                      e.g. {@code &quot;[[I&quot;} will be serialized as{@code &quot;[[Ljava.lang.Integer;&quot;}.&lt;/li&gt;
                      &lt;li&gt;if {@code primitiveArray} is {@code true} the {@code description}field is serialized by replacing the array&apos;s component primitive
                      type by the corresponding array&apos;s component primitive wrapper type,
                      e.g. {@code &quot;2-dimension array of int&quot;} will be serialized as{@code &quot;2-dimension array of java.lang.Integer&quot;}.&lt;/li&gt;
                      &lt;/ul&gt;                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeReplace" type="Object" line="666">
                <scope line="667"/>
                <scope line="670"/>
            </method>
            <method name="convertFromPrimitiveToWrapperTypes" type="ArrayType&lt;T&gt;" line="674">
                <declaration name="cn" type="String" line="675"/>
                <declaration name="tn" type="String" line="676"/>
                <declaration name="d" type="String" line="677"/>
                <scope line="678">
                    <scope line="679"/>
                </scope>
            </method>
        </class>
    </source>