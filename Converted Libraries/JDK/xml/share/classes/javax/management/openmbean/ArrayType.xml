<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.io.ObjectStreamException"/>
        <import package="java.lang.reflect.Array"/>
        <class name="ArrayType" line="31">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="OpenType">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <comment line="99">
                Generification note: we could have defined a type parameter that is the
                element type, with class ArrayType&lt;E&gt; extends OpenType&lt;E[]&gt;.  However,
                that doesn&apos;t buy us all that much.  We can&apos;t say
                public OpenType&lt;E&gt; getElementOpenType()
                because this ArrayType could be a multi-dimensional array.
                For example, if we had
                ArrayType(2, SimpleType.INTEGER)
                then E would have to be Integer[], while getElementOpenType() would
                return SimpleType.INTEGER, which is an OpenType&lt;Integer&gt;.
                
                Furthermore, we would like to support int[] (as well as Integer[]) as
                an Open Type (RFE 5045358).  We would want this to be an OpenType&lt;int[]&gt;
                which can&apos;t be expressed as &lt;E[]&gt; because E can&apos;t be a primitive type
                like int.                
            </comment>
            <comment line="117">
                                
            </comment>
            <comment line="140">
                As this instance is immutable, these two values                
            </comment>
            <comment line="141">
                need only be calculated once.                
            </comment>
            <comment line="143">
                indexes refering to columns in the PRIMITIVE_ARRAY_TYPES table.                
            </comment>
            <comment line="223">
                                
            </comment>
            <comment line="386">
                                
            </comment>
            <comment line="484">
                                
            </comment>
            <comment line="650">
                                
            </comment>
            <javadoc line="31">
                The &lt;code&gt;ArrayType&lt;/code&gt; class is the &lt;i&gt;open type&lt;/i&gt; class whose instances describe
                  all &lt;i&gt;open data&lt;/i&gt; values which are n-dimensional arrays of &lt;i&gt;open data&lt;/i&gt; values.
                  &lt;p&gt;
                  Examples of valid {@code ArrayType} instances are:
                  &lt;pre&gt;
                  // 2-dimension array of java.lang.String
                  ArrayType&lt;String[][]&gt; a1 = new ArrayType&lt;String[][]&gt;(2, SimpleType.STRING);
                  // 1-dimension array of int
                  ArrayType&lt;int[]&gt; a2 = new ArrayType&lt;int[]&gt;(SimpleType.INTEGER, true);
                  // 1-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[]&gt; a3 = new ArrayType&lt;Integer[]&gt;(SimpleType.INTEGER, false);
                  // 4-dimension array of int
                  ArrayType&lt;int[][][][]&gt; a4 = new ArrayType&lt;int[][][][]&gt;(3, a2);
                  // 4-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[][][][]&gt; a5 = new ArrayType&lt;Integer[][][][]&gt;(3, a3);
                  // 1-dimension array of java.lang.String
                  ArrayType&lt;String[]&gt; a6 = new ArrayType&lt;String[]&gt;(SimpleType.STRING, false);
                  // 1-dimension array of long
                  ArrayType&lt;long[]&gt; a7 = new ArrayType&lt;long[]&gt;(SimpleType.LONG, true);
                  // 1-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[]&gt; a8 = ArrayType.getArrayType(SimpleType.INTEGER);
                  // 2-dimension array of java.lang.Integer
                  ArrayType&lt;Integer[][]&gt; a9 = ArrayType.getArrayType(a8);
                  // 2-dimension array of int
                  ArrayType&lt;int[][]&gt; a10 = ArrayType.getPrimitiveArrayType(int[][].class);
                  // 3-dimension array of int
                  ArrayType&lt;int[][][]&gt; a11 = ArrayType.getArrayType(a10);
                  // 1-dimension array of float
                  ArrayType&lt;float[]&gt; a12 = ArrayType.getPrimitiveArrayType(float[].class);
                  // 2-dimension array of float
                  ArrayType&lt;float[][]&gt; a13 = ArrayType.getArrayType(a12);
                  // 1-dimension array of javax.management.ObjectName
                  ArrayType&lt;ObjectName[]&gt; a14 = ArrayType.getArrayType(SimpleType.OBJECTNAME);
                  // 2-dimension array of javax.management.ObjectName
                  ArrayType&lt;ObjectName[][]&gt; a15 = ArrayType.getArrayType(a14);
                  // 3-dimension array of java.lang.String
                  ArrayType&lt;String[][][]&gt; a16 = new ArrayType&lt;String[][][]&gt;(3, SimpleType.STRING);
                  // 1-dimension array of java.lang.String
                  ArrayType&lt;String[]&gt; a17 = new ArrayType&lt;String[]&gt;(1, SimpleType.STRING);
                  // 2-dimension array of java.lang.String
                  ArrayType&lt;String[][]&gt; a18 = new ArrayType&lt;String[][]&gt;(1, a17);
                  // 3-dimension array of java.lang.String
                  ArrayType&lt;String[][][]&gt; a19 = new ArrayType&lt;String[][][]&gt;(1, a18);
                  &lt;/pre&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="117"/>
            <declaration name="dimension" type="int" line="119"/>
            <javadoc line="119">
                @serial The dimension of arrays described by this {@link ArrayType}instance.                
            </javadoc>
            <declaration name="elementType" type="OpenType&lt;?&gt;" line="125"/>
            <javadoc line="125">
                @serial The &lt;i&gt;open type&lt;/i&gt; of element values contained in the arrays
                  described by this {@link ArrayType} instance.                
            </javadoc>
            <declaration name="primitiveArray" type="boolean" line="131"/>
            <javadoc line="131">
                @serial This flag indicates whether this {@link ArrayType}describes a primitive array.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="139"/>
            <declaration name="myToString" type="String" line="140"/>
            <declaration name="PRIMITIVE_WRAPPER_NAME_INDEX" type="int" line="143"/>
            <declaration name="PRIMITIVE_TYPE_NAME_INDEX" type="int" line="144"/>
            <declaration name="PRIMITIVE_TYPE_KEY_INDEX" type="int" line="145"/>
            <declaration name="PRIMITIVE_OPEN_TYPE_INDEX" type="int" line="146"/>
            <declaration name="PRIMITIVE_ARRAY_TYPES" type="Object[][]" line="148"/>
            <method name="isPrimitiveContentType" type="boolean" line="159">
                <params>
                    <param name="primitiveKey" type="String"/>
                </params>
                <scope line="160">
                    <scope line="161"/>
                </scope>
            </method>
            <javadoc line="168">
                Return the key used to identify the element type in
                  arrays - e.g. &quot;Z&quot; for boolean, &quot;C&quot; for char etc...                
                <param>
                    elementClassName the wrapper class name of the array
                      element ("Boolean",  "Character", etc...)                    
                </param>
                <return>
                    the key corresponding to the given type ("Z", "C", etc...)
                      return null if the given elementClassName is not a primitive
                      wrapper class name.                    
                </return>
            </javadoc>
            <method name="getPrimitiveTypeKey" type="String" line="177">
                <params>
                    <param name="elementClassName" type="String"/>
                </params>
                <scope line="178"/>
            </method>
            <javadoc line="185">
                Return the primitive type name corresponding to the given wrapper class.
                  e.g. &quot;boolean&quot; for &quot;Boolean&quot;, &quot;char&quot; for &quot;Character&quot; etc...                
                <param>
                    elementClassName the type of the array element ("Boolean",
                      "Character", etc...)                    
                </param>
                <return>
                    the primitive type name corresponding to the given wrapper class
                      ("boolean", "char", etc...)
                      return null if the given elementClassName is not a primitive
                      wrapper type name.                    
                </return>
            </javadoc>
            <method name="getPrimitiveTypeName" type="String" line="195">
                <params>
                    <param name="elementClassName" type="String"/>
                </params>
                <scope line="196"/>
            </method>
            <javadoc line="203">
                Return the primitive open type corresponding to the given primitive type.
                  e.g. SimpleType.BOOLEAN for &quot;boolean&quot;, SimpleType.CHARACTER for
                  &quot;char&quot;, etc...                
                <param>
                    primitiveTypeName the primitive type of the array element ("boolean",
                      "char", etc...)                    
                </param>
                <return>
                    the OpenType corresponding to the given primitive type name
                      (SimpleType.BOOLEAN, SimpleType.CHARACTER, etc...)
                      return null if the given elementClassName is not a primitive
                      type name.                    
                </return>
            </javadoc>
            <method name="getPrimitiveOpenType" type="SimpleType<?>" line="214">
                <params>
                    <param name="primitiveTypeName" type="String"/>
                </params>
                <scope line="215"/>
            </method>
            <javadoc line="224">
                Constructs an &lt;tt&gt;ArrayType&lt;/tt&gt; instance describing &lt;i&gt;open data&lt;/i&gt; values which are
                  arrays with dimension &lt;var&gt;dimension&lt;/var&gt; of elements whose &lt;i&gt;open type&lt;/i&gt; is &lt;var&gt;elementType&lt;/var&gt;.
                  &lt;p&gt;
                  When invoked on an &lt;tt&gt;ArrayType&lt;/tt&gt; instance, the {@link OpenType#getClassName() getClassName} method
                  returns the class name of the array instances it describes (following the rules defined by the{@link Class#getName() getName} method of &lt;code&gt;java.lang.Class&lt;/code&gt;), not the class name of the array elements
                  (which is returned by a call to &lt;tt&gt;getElementOpenType().getClassName()&lt;/tt&gt;).
                  &lt;p&gt;
                  The internal field corresponding to the type name of this &lt;code&gt;ArrayType&lt;/code&gt; instance is also set to
                  the class name of the array instances it describes.
                  In other words, the methods &lt;code&gt;getClassName&lt;/code&gt; and &lt;code&gt;getTypeName&lt;/code&gt; return the same string value.
                  The internal field corresponding to the description of this &lt;code&gt;ArrayType&lt;/code&gt; instance is set to a string value
                  which follows the following template:
                  &lt;ul&gt;
                  &lt;li&gt;if non-primitive array: &lt;tt&gt;&lt;i&gt;&amp;lt;dimension&amp;gt;&lt;/i&gt;-dimension array of &lt;i&gt;&amp;lt;element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;if primitive array: &lt;tt&gt;&lt;i&gt;&amp;lt;dimension&amp;gt;&lt;/i&gt;-dimension array of &lt;i&gt;&amp;lt;primitive_type_of_the_element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;String[][][]&gt; t = new ArrayType&lt;String[][][]&gt;(3, SimpleType.STRING);
                  System.out.println(&quot;array class name       = &quot; + t.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [[[Ljava.lang.String;
                  element class name     = java.lang.String
                  array type name        = [[[Ljava.lang.String;
                  array type description = 3-dimension array of java.lang.String
                  &lt;/pre&gt;
                  And the following piece of code which is equivalent to the one listed
                  above would also produce the same output:
                  &lt;pre&gt;
                  ArrayType&lt;String[]&gt; t1 = new ArrayType&lt;String[]&gt;(1, SimpleType.STRING);
                  ArrayType&lt;String[][]&gt; t2 = new ArrayType&lt;String[][]&gt;(1, t1);
                  ArrayType&lt;String[][][]&gt; t3 = new ArrayType&lt;String[][][]&gt;(1, t2);
                  System.out.println(&quot;array class name       = &quot; + t3.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t3.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t3.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t3.getDescription());
                  &lt;/pre&gt;                
                <param>
                    dimension  the dimension of arrays described by this <tt>ArrayType</tt> instance;
                      must be greater than or equal to 1.                    
                </param>
                <param>
                    elementType  the <i>open type</i> of element values contained
                      in the arrays described by this <tt>ArrayType</tt>
                      instance; must be an instance of either
                      <tt>SimpleType</tt>, <tt>CompositeType</tt>,
                      <tt>TabularType</tt> or another <tt>ArrayType</tt>
                      with a <tt>SimpleType</tt>, <tt>CompositeType</tt>
                      or <tt>TabularType</tt> as its <tt>elementType</tt>.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code dimension} is not a positive
                      integer.                    
                </throws>
                <throws>
                    OpenDataException  if <var>elementType's className</var> is not
                      one of the allowed Java class names for open
                      data.                    
                </throws>
            </javadoc>
            <method name="ArrayType" type="constructor" line="288">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType<?>"/>
                </params>
                <comment line="289">
                    Check and construct state defined by parent.                    
                </comment>
                <comment line="290">
                    We can&apos;t use the package-private OpenType constructor because                    
                </comment>
                <comment line="291">
                    we don&apos;t know if the elementType parameter is sane.                    
                </comment>
                <comment line="296">
                    Check and construct state specific to ArrayType                    
                </comment>
                <comment line="297">
                                        
                </comment>
                <scope line="298">
                    <declaration name="at" type="ArrayType&lt;?&gt;" line="299"/>
                </scope>
                <scope line="303"/>
            </method>
            <javadoc line="310">
                Constructs a unidimensional {@code ArrayType} instance for the
                  supplied {@code SimpleType}.
                  &lt;p&gt;
                  This constructor supports the creation of arrays of primitive
                  types when {@code primitiveArray} is {@code true}.
                  &lt;p&gt;
                  For primitive arrays the {@link #getElementOpenType()} method
                  returns the {@link SimpleType} corresponding to the wrapper
                  type of the primitive type of the array.
                  &lt;p&gt;
                  When invoked on an &lt;tt&gt;ArrayType&lt;/tt&gt; instance, the {@link OpenType#getClassName() getClassName} method
                  returns the class name of the array instances it describes (following the rules defined by the{@link Class#getName() getName} method of &lt;code&gt;java.lang.Class&lt;/code&gt;), not the class name of the array elements
                  (which is returned by a call to &lt;tt&gt;getElementOpenType().getClassName()&lt;/tt&gt;).
                  &lt;p&gt;
                  The internal field corresponding to the type name of this &lt;code&gt;ArrayType&lt;/code&gt; instance is also set to
                  the class name of the array instances it describes.
                  In other words, the methods &lt;code&gt;getClassName&lt;/code&gt; and &lt;code&gt;getTypeName&lt;/code&gt; return the same string value.
                  The internal field corresponding to the description of this &lt;code&gt;ArrayType&lt;/code&gt; instance is set to a string value
                  which follows the following template:
                  &lt;ul&gt;
                  &lt;li&gt;if non-primitive array: &lt;tt&gt;1-dimension array of &lt;i&gt;&amp;lt;element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;li&gt;if primitive array: &lt;tt&gt;1-dimension array of &lt;i&gt;&amp;lt;primitive_type_of_the_element_class_name&amp;gt;&lt;/i&gt;&lt;/tt&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;int[]&gt; t = new ArrayType&lt;int[]&gt;(SimpleType.INTEGER, true);
                  System.out.println(&quot;array class name       = &quot; + t.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [I
                  element class name     = java.lang.Integer
                  array type name        = [I
                  array type description = 1-dimension array of int
                  &lt;/pre&gt;                
                <param>
                    elementType the {@code SimpleType} of the element values
                      contained in the arrays described by this{@code ArrayType} instance.                    
                </param>
                <param>
                    primitiveArray {@code true} when this array describes
                      primitive arrays.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code dimension} is not a positive
                      integer.                    
                </throws>
                <throws>
                    OpenDataException if {@code primitiveArray} is {@code true} and{@code elementType} is not a valid {@code SimpleType} for a primitive
                      type.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="ArrayType" type="constructor" line="368">
                <params>
                    <param name="elementType" type="SimpleType<?>"/>
                    <param name="primitiveArray" type="boolean"/>
                </params>
                <comment line="370">
                    Check and construct state defined by parent.                    
                </comment>
                <comment line="371">
                    We can call the package-private OpenType constructor because the                    
                </comment>
                <comment line="372">
                    set of SimpleTypes is fixed and SimpleType can&apos;t be subclassed.                    
                </comment>
                <comment line="378">
                    Check and construct state specific to ArrayType                    
                </comment>
                <comment line="379">
                                        
                </comment>
            </method>
            <method name="ArrayType" type="constructor" line="388">
                <params>
                    <param name="className" type="String"/>
                    <param name="typeName" type="String"/>
                    <param name="description" type="String"/>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType<?>"/>
                    <param name="primitiveArray" type="boolean"/>
                </params>
            </method>
            <method name="buildArrayClassName" type="String" line="397">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType<?>"/>
                </params>
                <declaration name="isPrimitiveArray" type="boolean" line="398"/>
                <scope line="399"/>
            </method>
            <method name="buildArrayClassName" type="String" line="408">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType<?>"/>
                    <param name="isPrimitiveArray" type="boolean"/>
                </params>
                <comment line="415">
                    Add N (= dimension) additional &apos;[&apos; characters to the existing array                    
                </comment>
                <comment line="424">
                    Ideally we should throw an IllegalArgumentException here,                    
                </comment>
                <comment line="425">
                    but for compatibility reasons we throw an OpenDataException.                    
                </comment>
                <comment line="426">
                    (used to be thrown by OpenType() constructor).                    
                </comment>
                <comment line="427">
                                        
                </comment>
                <scope line="409"/>
                <declaration name="result" type="StringBuilder" line="413"/>
                <declaration name="elementClassName" type="String" line="414"/>
                <scope line="416"/>
                <scope line="419"/>
                <scope line="421">
                    <scope line="422">
                        <declaration name="key" type="String" line="423"/>
                    </scope>
                    <scope line="432"/>
                </scope>
            </method>
            <method name="buildArrayDescription" type="String" line="443">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType<?>"/>
                </params>
                <declaration name="isPrimitiveArray" type="boolean" line="444"/>
                <scope line="445"/>
            </method>
            <method name="buildArrayDescription" type="String" line="454">
                <params>
                    <param name="dimension" type="int"/>
                    <param name="elementType" type="OpenType<?>"/>
                    <param name="isPrimitiveArray" type="boolean"/>
                </params>
                <comment line="465">
                    Convert from wrapper type to primitive type                    
                </comment>
                <comment line="469">
                    Ideally we should throw an IllegalArgumentException here,                    
                </comment>
                <comment line="470">
                    but for compatibility reasons we throw an OpenDataException.                    
                </comment>
                <comment line="471">
                    (used to be thrown by OpenType() constructor).                    
                </comment>
                <comment line="472">
                                        
                </comment>
                <scope line="455">
                    <declaration name="at" type="ArrayType&lt;?&gt;" line="456"/>
                </scope>
                <declaration name="result" type="StringBuilder" line="461"/>
                <declaration name="elementClassName" type="String" line="463"/>
                <scope line="464">
                    <declaration name="primitiveType" type="String" line="466"/>
                </scope>
                <scope line="477"/>
            </method>
            <javadoc line="485">
                Returns the dimension of arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt; instance.                
                <return>
                    the dimension.                    
                </return>
            </javadoc>
            <method name="getDimension" type="int" line="490"/>
            <javadoc line="495">
                Returns the &lt;i&gt;open type&lt;/i&gt; of element values contained in the arrays described by this &lt;tt&gt;ArrayType&lt;/tt&gt; instance.                
                <return>
                    the element type.                    
                </return>
            </javadoc>
            <method name="getElementOpenType" type="OpenType<?>" line="500"/>
            <javadoc line="505">
                Returns &lt;code&gt;true&lt;/code&gt; if the open data values this open
                  type describes are primitive arrays, &lt;code&gt;false&lt;/code&gt; otherwise.                
                <return>
                    true if this is a primitive array type.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isPrimitiveArray" type="boolean" line="513"/>
            <javadoc line="518">
                Tests whether &lt;var&gt;obj&lt;/var&gt; is a value for this &lt;code&gt;ArrayType&lt;/code&gt;
                  instance.
                  &lt;p&gt;
                  This method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;var&gt;obj&lt;/var&gt;
                  is not null, &lt;var&gt;obj&lt;/var&gt; is an array and any one of the following
                  is &lt;tt&gt;true&lt;/tt&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;if this &lt;code&gt;ArrayType&lt;/code&gt; instance describes an array of
                  &lt;tt&gt;SimpleType&lt;/tt&gt; elements or their corresponding primitive types,
                  &lt;var&gt;obj&lt;/var&gt;&apos;s class name is the same as the className field defined
                  for this &lt;code&gt;ArrayType&lt;/code&gt; instance (i.e. the class name returned
                  by the {@link OpenType#getClassName() getClassName} method, which
                  includes the dimension information),&lt;br&gt;&amp;nbsp;&lt;/li&gt;
                  &lt;li&gt;if this &lt;code&gt;ArrayType&lt;/code&gt; instance describes an array of
                  classes implementing the {@code TabularData} interface or the{@code CompositeData} interface, &lt;var&gt;obj&lt;/var&gt; is assignable to
                  such a declared array, and each element contained in &lt;var&gt;obj&lt;/var&gt;
                  is either null or a valid value for the element&apos;s open type specified
                  by this &lt;code&gt;ArrayType&lt;/code&gt; instance.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    obj the object to be tested.                    
                </param>
                <return>
                    <code>true</code> if <var>obj</var> is a value for this
                      <code>ArrayType</code> instance.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="546">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="548">
                    if obj is null, return false                    
                </comment>
                <comment line="549">
                                        
                </comment>
                <comment line="557">
                    if obj is not an array, return false                    
                </comment>
                <comment line="558">
                                        
                </comment>
                <comment line="563">
                    Test if obj&apos;s class name is the same as for the array values that this instance describes                    
                </comment>
                <comment line="564">
                    (this is fine if elements are of simple types, which are final classes)                    
                </comment>
                <comment line="565">
                                        
                </comment>
                <comment line="570">
                    In case this ArrayType instance describes an array of classes implementing the TabularData or CompositeData interface,                    
                </comment>
                <comment line="571">
                    we first check for the assignability of obj to such an array of TabularData or CompositeData,                    
                </comment>
                <comment line="572">
                    which ensures that:                    
                </comment>
                <comment line="573">
                    . obj is of the the same dimension as this ArrayType instance,                    
                </comment>
                <comment line="574">
                    . it is declared as an array of elements which are either all TabularData or all CompositeData.                    
                </comment>
                <comment line="575">
                                        
                </comment>
                <comment line="576">
                    If the assignment check is positive,                    
                </comment>
                <comment line="577">
                    then we have to check that each element in obj is of the same TabularType or CompositeType                    
                </comment>
                <comment line="578">
                    as the one described by this ArrayType instance.                    
                </comment>
                <comment line="579">
                                        
                </comment>
                <comment line="580">
                    [About assignment check, note that the call below returns true: ]                    
                </comment>
                <comment line="581">
                    [Class.forName(&quot;[Lpackage.CompositeData;&quot;).isAssignableFrom(Class.forName(&quot;[Lpackage.CompositeDataImpl;)&quot;)); ]                    
                </comment>
                <comment line="582">
                                        
                </comment>
                <comment line="592">
                    assignment check: return false if negative                    
                </comment>
                <comment line="597">
                    check that all elements in obj are valid values for this ArrayType                    
                </comment>
                <comment line="598">
                    we know obj&apos;s dimension is this.dimension                    
                </comment>
                <comment line="605">
                    if previous tests did not return, then obj is not a value for this ArrayType instance                    
                </comment>
                <scope line="550"/>
                <declaration name="objClass" type="Class&lt;?&gt;" line="554"/>
                <declaration name="objClassName" type="String" line="555"/>
                <scope line="559"/>
                <scope line="566"/>
                <scope line="584">
                    <declaration name="isTabular" type="boolean" line="586"/>
                    <declaration name="dims" type="int[]" line="588"/>
                    <declaration name="elementClass" type="Class&lt;?&gt;" line="589"/>
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="590"/>
                    <scope line="593"/>
                    <scope line="598"/>
                </scope>
            </method>
            <javadoc line="609">
                Returns true if and only if all elements contained in the array argument x_dim_Array of dimension dim
                  are valid values (ie either null or of the right openType)
                  for the element open type specified by this ArrayType instance.
                  This method&apos;s implementation uses recursion to go down the dimensions of the array argument.                
            </javadoc>
            <method name="checkElementsType" type="boolean" line="616">
                <params>
                    <param name="x_dim_Array" type="Object[]"/>
                    <param name="dim" type="int"/>
                </params>
                <comment line="618">
                    if the elements of x_dim_Array are themselves array: go down recursively....                    
                </comment>
                <comment line="627">
                    ...else, for a non-empty array, each element must be a valid value: either null or of the right openType                    
                </comment>
                <scope line="619">
                    <scope line="620">
                        <scope line="621"/>
                    </scope>
                </scope>
                <scope line="628">
                    <scope line="629">
                        <scope line="630"/>
                    </scope>
                </scope>
            </method>
            <method name="isAssignableFrom" type="boolean" line="639">
                <params>
                    <param name="ot" type="OpenType<?>"/>
                </params>
                <declaration name="at" type="ArrayType&lt;?&gt;" line="642"/>
            </method>
            <javadoc line="651">
                Compares the specified &lt;code&gt;obj&lt;/code&gt; parameter with this
                  &lt;code&gt;ArrayType&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Two &lt;code&gt;ArrayType&lt;/code&gt; instances are equal if and only if they
                  describe array instances which have the same dimension, elements&apos;
                  open type and primitive array flag.                
                <param>
                    obj the object to be compared for equality with this
                      <code>ArrayType</code> instance; if <var>obj</var>
                      is <code>null</code> or is not an instance of the
                      class <code>ArrayType</code> this method returns
                      <code>false</code>.                    
                </param>
                <return>
                    <code>true</code> if the specified object is equal to
                      this <code>ArrayType</code> instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="668">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="670">
                    if obj is null, return false                    
                </comment>
                <comment line="671">
                                        
                </comment>
                <comment line="676">
                    if obj is not an ArrayType, return false                    
                </comment>
                <comment line="677">
                                        
                </comment>
                <comment line="682">
                    if other&apos;s dimension is different than this instance&apos;s, return false                    
                </comment>
                <comment line="683">
                                        
                </comment>
                <comment line="688">
                    Test if other&apos;s elementType field is the same as for this instance                    
                </comment>
                <comment line="689">
                                        
                </comment>
                <comment line="694">
                    Test if other&apos;s primitiveArray flag is the same as for this instance                    
                </comment>
                <comment line="695">
                                        
                </comment>
                <scope line="672"/>
                <declaration name="other" type="ArrayType&lt;?&gt;" line="680"/>
                <scope line="684"/>
                <scope line="690"/>
            </method>
            <javadoc line="699">
                Returns the hash code value for this &lt;code&gt;ArrayType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of an &lt;code&gt;ArrayType&lt;/code&gt; instance is the sum of the
                  hash codes of all the elements of information used in &lt;code&gt;equals&lt;/code&gt;
                  comparisons (i.e. dimension, elements&apos; open type and primitive array flag).
                  The hashcode for a primitive value is the hashcode of the corresponding boxed
                  object (e.g. the hashcode for &lt;tt&gt;true&lt;/tt&gt; is &lt;tt&gt;Boolean.TRUE.hashCode()&lt;/tt&gt;).
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that
                  &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two
                  &lt;code&gt;ArrayType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;
                  As &lt;code&gt;ArrayType&lt;/code&gt; instances are immutable, the hash
                  code for this instance is calculated once, on the first call
                  to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned
                  for subsequent calls.                
                <return>
                    the hash code value for this <code>ArrayType</code> instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="720">
                <comment line="722">
                    Calculate the hash code value if it has not yet been done (ie 1st call to hashCode())                    
                </comment>
                <comment line="723">
                                        
                </comment>
                <comment line="732">
                    return always the same hash code for this instance (immutable)                    
                </comment>
                <comment line="733">
                                        
                </comment>
                <scope line="724">
                    <declaration name="value" type="int" line="725"/>
                </scope>
            </method>
            <javadoc line="737">
                Returns a string representation of this &lt;code&gt;ArrayType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of the name of this class (i.e.
                  &lt;code&gt;javax.management.openmbean.ArrayType&lt;/code&gt;), the type name,
                  the dimension, the elements&apos; open type and the primitive array flag
                  defined for this instance.
                  &lt;p&gt;
                  As &lt;code&gt;ArrayType&lt;/code&gt; instances are immutable, the
                  string representation for this instance is calculated
                  once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and
                  then the same value is returned for subsequent calls.                
                <return>
                    a string representation of this <code>ArrayType</code> instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="752">
                <comment line="754">
                    Calculate the string representation if it has not yet been done (ie 1st call to toString())                    
                </comment>
                <comment line="755">
                                        
                </comment>
                <comment line="764">
                    return always the same string representation for this instance (immutable)                    
                </comment>
                <comment line="765">
                                        
                </comment>
                <scope line="756"/>
            </method>
            <javadoc line="769">
                Create an {@code ArrayType} instance in a type-safe manner.
                  &lt;p&gt;
                  Multidimensional arrays can be built up by calling this method as many
                  times as necessary.
                  &lt;p&gt;
                  Calling this method twice with the same parameters may return the same
                  object or two equal but not identical objects.
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;String[]&gt; t1 = ArrayType.getArrayType(SimpleType.STRING);
                  ArrayType&lt;String[][]&gt; t2 = ArrayType.getArrayType(t1);
                  ArrayType&lt;String[][][]&gt; t3 = ArrayType.getArrayType(t2);
                  System.out.println(&quot;array class name       = &quot; + t3.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t3.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t3.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t3.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [[[Ljava.lang.String;
                  element class name     = java.lang.String
                  array type name        = [[[Ljava.lang.String;
                  array type description = 3-dimension array of java.lang.String
                  &lt;/pre&gt;                
                <param>
                    elementType  the <i>open type</i> of element values contained
                      in the arrays described by this <tt>ArrayType</tt>
                      instance; must be an instance of either
                      <tt>SimpleType</tt>, <tt>CompositeType</tt>,
                      <tt>TabularType</tt> or another <tt>ArrayType</tt>
                      with a <tt>SimpleType</tt>, <tt>CompositeType</tt>
                      or <tt>TabularType</tt> as its <tt>elementType</tt>.                    
                </param>
                <throws>
                    OpenDataException if <var>elementType's className</var> is not
                      one of the allowed Java class names for open
                      data.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getArrayType" type="ArrayType<E[]>" line="811">
                <params>
                    <param name="elementType" type="OpenType<E>"/>
                </params>
            </method>
            <javadoc line="815">
                Create an {@code ArrayType} instance in a type-safe manner.
                  &lt;p&gt;
                  Calling this method twice with the same parameters may return the
                  same object or two equal but not identical objects.
                  &lt;p&gt;
                  As an example, the following piece of code:
                  &lt;pre&gt;
                  ArrayType&lt;int[][][]&gt; t = ArrayType.getPrimitiveArrayType(int[][][].class);
                  System.out.println(&quot;array class name       = &quot; + t.getClassName());
                  System.out.println(&quot;element class name     = &quot; + t.getElementOpenType().getClassName());
                  System.out.println(&quot;array type name        = &quot; + t.getTypeName());
                  System.out.println(&quot;array type description = &quot; + t.getDescription());
                  &lt;/pre&gt;
                  would produce the following output:
                  &lt;pre&gt;
                  array class name       = [[[I
                  element class name     = java.lang.Integer
                  array type name        = [[[I
                  array type description = 3-dimension array of int
                  &lt;/pre&gt;                
                <param>
                    arrayClass a primitive array class such as {@code int[].class},{@code boolean[][].class}, etc. The {@link #getElementOpenType()} method of the returned{@code ArrayType} returns the {@link SimpleType}corresponding to the wrapper type of the primitive
                      type of the array.                    
                </param>
                <throws>
                    IllegalArgumentException if <var>arrayClass</var> is not
                      a primitive array.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getPrimitiveArrayType" type="ArrayType<T>" line="850">
                <params>
                    <param name="arrayClass" type="Class<T>"/>
                </params>
                <comment line="849">
                    can&apos;t get appropriate T for primitive array                    
                </comment>
                <comment line="851">
                    Check if the supplied parameter is an array                    
                </comment>
                <comment line="852">
                                        
                </comment>
                <comment line="857">
                    Calculate array dimension and component type name                    
                </comment>
                <comment line="858">
                                        
                </comment>
                <comment line="867">
                    Check if the array&apos;s component type is a primitive type                    
                </comment>
                <comment line="868">
                                        
                </comment>
                <comment line="874">
                    Map component type name to corresponding SimpleType                    
                </comment>
                <comment line="875">
                                        
                </comment>
                <comment line="879">
                    Build primitive array                    
                </comment>
                <comment line="880">
                                        
                </comment>
                <comment line="888">
                    should not happen                    
                </comment>
                <scope line="853"/>
                <declaration name="n" type="int" line="859"/>
                <declaration name="componentType" type="Class&lt;?&gt;" line="860"/>
                <scope line="861"/>
                <declaration name="componentTypeName" type="String" line="865"/>
                <scope line="869"/>
                <declaration name="simpleType" type="SimpleType&lt;?&gt;" line="876"/>
                <scope line="881">
                    <declaration name="at" type="ArrayType" line="882"/>
                </scope>
                <scope line="887"/>
            </method>
            <javadoc line="892">
                Replace/resolve the object read from the stream before it is returned
                  to the caller.                
                <serialData>
                    The new serial form of this class defines a new serializable{@code boolean} field {@code primitiveArray}. In order to guarantee the
                      interoperability with previous versions of this class the new serial
                      form must continue to refer to primitive wrapper types even when the{@code ArrayType} instance describes a primitive type array. So when{@code primitiveArray} is {@code true} the {@code className},{@code typeName} and {@code description} serializable fields
                      are converted into primitive types before the deserialized{@code ArrayType} instance is return to the caller. The{@code elementType} field always returns the {@code SimpleType}corresponding to the primitive wrapper type of the array's
                      primitive type.
                      <p>
                      Therefore the following serializable fields are deserialized as follows:
                      <ul>
                      <li>if {@code primitiveArray} is {@code true} the {@code className}field is deserialized by replacing the array's component primitive
                      wrapper type by the corresponding array's component primitive type,
                      e.g. {@code "[[Ljava.lang.Integer;"} will be deserialized as{@code "[[I"}.</li>
                      <li>if {@code primitiveArray} is {@code true} the {@code typeName}field is deserialized by replacing the array's component primitive
                      wrapper type by the corresponding array's component primitive type,
                      e.g. {@code "[[Ljava.lang.Integer;"} will be deserialized as{@code "[[I"}.</li>
                      <li>if {@code primitiveArray} is {@code true} the {@code description}field is deserialized by replacing the array's component primitive
                      wrapper type by the corresponding array's component primitive type,
                      e.g. {@code "2-dimension array of java.lang.Integer"} will be
                      deserialized as {@code "2-dimension array of int"}.</li>
                      </ul>                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="readResolve" type="Object" line="930">
                <scope line="931"/>
                <scope line="933"/>
            </method>
            <method name="convertFromWrapperToPrimitiveTypes" type="ArrayType<T>" line="938">
                <declaration name="cn" type="String" line="939"/>
                <declaration name="tn" type="String" line="940"/>
                <declaration name="d" type="String" line="941"/>
                <scope line="942">
                    <scope line="943"/>
                </scope>
            </method>
            <javadoc line="960">
                Nominate a replacement for this object in the stream before the object
                  is written.                
                <serialData>
                    The new serial form of this class defines a new serializable{@code boolean} field {@code primitiveArray}. In order to guarantee the
                      interoperability with previous versions of this class the new serial
                      form must continue to refer to primitive wrapper types even when the{@code ArrayType} instance describes a primitive type array. So when{@code primitiveArray} is {@code true} the {@code className},{@code typeName} and {@code description} serializable fields
                      are converted into wrapper types before the serialized{@code ArrayType} instance is written to the stream. The{@code elementType} field always returns the {@code SimpleType}corresponding to the primitive wrapper type of the array's
                      primitive type.
                      <p>
                      Therefore the following serializable fields are serialized as follows:
                      <ul>
                      <li>if {@code primitiveArray} is {@code true} the {@code className}field is serialized by replacing the array's component primitive
                      type by the corresponding array's component primitive wrapper type,
                      e.g. {@code "[[I"} will be serialized as{@code "[[Ljava.lang.Integer;"}.</li>
                      <li>if {@code primitiveArray} is {@code true} the {@code typeName}field is serialized by replacing the array's component primitive
                      type by the corresponding array's component primitive wrapper type,
                      e.g. {@code "[[I"} will be serialized as{@code "[[Ljava.lang.Integer;"}.</li>
                      <li>if {@code primitiveArray} is {@code true} the {@code description}field is serialized by replacing the array's component primitive
                      type by the corresponding array's component primitive wrapper type,
                      e.g. {@code "2-dimension array of int"} will be serialized as{@code "2-dimension array of java.lang.Integer"}.</li>
                      </ul>                    
                </serialData>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeReplace" type="Object" line="998">
                <scope line="999"/>
                <scope line="1001"/>
            </method>
            <method name="convertFromPrimitiveToWrapperTypes" type="ArrayType<T>" line="1006">
                <declaration name="cn" type="String" line="1007"/>
                <declaration name="tn" type="String" line="1008"/>
                <declaration name="d" type="String" line="1009"/>
                <scope line="1010">
                    <scope line="1011"/>
                </scope>
            </method>
        </class>
    </source>