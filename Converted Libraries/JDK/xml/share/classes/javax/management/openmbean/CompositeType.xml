<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.util.Set"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <class name="CompositeType" line="6">
            <extends class="OpenType">
                <type_params>
                    <type_param name="CompositeData"/>
                </type_params>
            </extends>
            <javadoc line="6">
                The &lt;code&gt;CompositeType&lt;/code&gt; class is the &lt;i&gt;open type&lt;/i&gt; class
                  whose instances describe the types of {@link CompositeData &lt;code&gt;CompositeData&lt;/code&gt;} values.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="nameToDescription" type="TreeMap&amp;lt;String,String&amp;gt;" line="13"/>
            <javadoc line="13">
                @serial Sorted mapping of the item names to their descriptions                
            </javadoc>
            <declaration name="nameToType" type="TreeMap&amp;lt;String,OpenType&amp;lt;?&amp;gt;&amp;gt;" line="17"/>
            <javadoc line="17">
                @serial Sorted mapping of the item names to their open types                
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="21"/>
            <declaration name="myToString" type="String" line="22"/>
            <declaration name="myNamesSet" type="Set&amp;lt;String&amp;gt;" line="23"/>
            <javadoc line="24">
                Constructs a &lt;code&gt;CompositeType&lt;/code&gt; instance, checking for the validity of the given parameters.
                  The validity constraints are described below for each parameter.
                  &lt;p&gt;
                  Note that the contents of the three array parameters
                  &lt;var&gt;itemNames&lt;/var&gt;, &lt;var&gt;itemDescriptions&lt;/var&gt; and &lt;var&gt;itemTypes&lt;/var&gt;
                  are internally copied so that any subsequent modification of these arrays by the caller of this constructor
                  has no impact on the constructed &lt;code&gt;CompositeType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The Java class name of composite data values this composite type represents
                  (ie the class name returned by the {@link OpenType#getClassName() getClassName} method)
                  is set to the string value returned by &lt;code&gt;CompositeData.class.getName()&lt;/code&gt;.
                  &lt;p&gt;                
                <param>
                    typeName  The name given to the composite type this instance represents; cannot be a null or empty string.
                      &lt;br&gt;&amp;nbsp;                    
                </param>
                <param>
                    description  The human readable description of the composite type this instance represents;
                      cannot be a null or empty string.
                      &lt;br&gt;&amp;nbsp;                    
                </param>
                <param>
                    itemNames  The names of the items contained in the
                      composite data values described by this &lt;code&gt;CompositeType&lt;/code&gt; instance;
                      cannot be null and should contain at least one element; no element can be a null or empty string.
                      Note that the order in which the item names are given is not important to differentiate a
                      &lt;code&gt;CompositeType&lt;/code&gt; instance from another;
                      the item names are internally stored sorted in ascending alphanumeric order.
                      &lt;br&gt;&amp;nbsp;                    
                </param>
                <param>
                    itemDescriptions  The descriptions, in the same order as &lt;var&gt;itemNames&lt;/var&gt;, of the items contained in the
                      composite data values described by this &lt;code&gt;CompositeType&lt;/code&gt; instance;
                      should be of the same size as &lt;var&gt;itemNames&lt;/var&gt;;
                      no element can be null or an empty string.
                      &lt;br&gt;&amp;nbsp;                    
                </param>
                <param>
                    itemTypes  The open type instances, in the same order as &lt;var&gt;itemNames&lt;/var&gt;, describing the items contained
                      in the composite data values described by this &lt;code&gt;CompositeType&lt;/code&gt; instance;
                      should be of the same size as &lt;var&gt;itemNames&lt;/var&gt;;
                      no element can be null.
                      &lt;br&gt;&amp;nbsp;                    
                </param>
                <throws>
                    IllegalArgumentException  If &lt;var&gt;typeName&lt;/var&gt; or &lt;var&gt;description&lt;/var&gt; is a null or empty string,
                      or &lt;var&gt;itemNames&lt;/var&gt; or &lt;var&gt;itemDescriptions&lt;/var&gt; or &lt;var&gt;itemTypes&lt;/var&gt; is null,
                      or any element of &lt;var&gt;itemNames&lt;/var&gt; or &lt;var&gt;itemDescriptions&lt;/var&gt;
                      is a null or empty string,
                      or any element of &lt;var&gt;itemTypes&lt;/var&gt; is null,
                      or &lt;var&gt;itemNames&lt;/var&gt; or &lt;var&gt;itemDescriptions&lt;/var&gt; or &lt;var&gt;itemTypes&lt;/var&gt;
                      are not of the same size.
                      &lt;br&gt;&amp;nbsp;                    
                </throws>
                <throws>
                    OpenDataException  If &lt;var&gt;itemNames&lt;/var&gt; contains duplicate item names
                      (case sensitive, but leading and trailing whitespaces removed).                    
                </throws>
            </javadoc>
            <method name="CompositeType" type="constructor" line="70">
                <params>
                    <param name="typeName" type="String"/>
                    <param name="description" type="String"/>
                    <param name="itemNames" type="String[]"/>
                    <param name="itemDescriptions" type="String[]"/>
                    <param name="itemTypes" type="OpenType&lt;?&gt;[]"/>
                </params>
                <scope line="77"/>
                <declaration name="key" type="String" line="82"/>
                <scope line="83">
                    <scope line="85"/>
                </scope>
            </method>
            <method name="checkForNullElement" type="void" line="92">
                <params>
                    <param name="arg" type="Object[]"/>
                    <param name="argName" type="String"/>
                </params>
                <scope line="93"/>
                <scope line="96">
                    <scope line="97"/>
                </scope>
            </method>
            <method name="checkForEmptyString" type="void" line="102">
                <params>
                    <param name="arg" type="String[]"/>
                    <param name="argName" type="String"/>
                </params>
                <scope line="103">
                    <scope line="104"/>
                </scope>
            </method>
            <javadoc line="109">
                Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;CompositeType&lt;/code&gt; instance defines an item
                  whose name is &lt;var&gt;itemName&lt;/var&gt;.                
                <param>
                    itemName the name of the item.                    
                </param>
                <return>
                    true if an item of this name is present.                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="115">
                <params>
                    <param name="itemName" type="String"/>
                </params>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                Returns the description of the item whose name is &lt;var&gt;itemName&lt;/var&gt;,
                  or &lt;code&gt;null&lt;/code&gt; if this &lt;code&gt;CompositeType&lt;/code&gt; instance does not define any item
                  whose name is &lt;var&gt;itemName&lt;/var&gt;.                
                <param>
                    itemName the name of the item.                    
                </param>
                <return>
                    the description.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="128">
                <params>
                    <param name="itemName" type="String"/>
                </params>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Returns the &lt;i&gt;open type&lt;/i&gt; of the item whose name is &lt;var&gt;itemName&lt;/var&gt;,
                  or &lt;code&gt;null&lt;/code&gt; if this &lt;code&gt;CompositeType&lt;/code&gt; instance does not define any item
                  whose name is &lt;var&gt;itemName&lt;/var&gt;.                
                <param>
                    itemName the name of the time.                    
                </param>
                <return>
                    the type.                    
                </return>
            </javadoc>
            <method name="getType" type="OpenType&lt;?&gt;" line="141">
                <params>
                    <param name="itemName" type="String"/>
                </params>
                <scope line="142"/>
            </method>
            <javadoc line="147">
                Returns an unmodifiable Set view of all the item names defined by this &lt;code&gt;CompositeType&lt;/code&gt; instance.
                  The set&apos;s iterator will return the item names in ascending order.                
                <return>
                    a {@link Set} of {@link String}.                    
                </return>
            </javadoc>
            <method name="keySet" type="Set&lt;String&gt;" line="152">
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Tests whether &lt;var&gt;obj&lt;/var&gt; is a value which could be
                  described by this &lt;code&gt;CompositeType&lt;/code&gt; instance.
                  &lt;p&gt;If &lt;var&gt;obj&lt;/var&gt; is null or is not an instance of
                  &lt;code&gt;javax.management.openmbean.CompositeData&lt;/code&gt;,
                  &lt;code&gt;isValue&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;If &lt;var&gt;obj&lt;/var&gt; is an instance of
                  &lt;code&gt;javax.management.openmbean.CompositeData&lt;/code&gt;, then let{@code ct} be its {@code CompositeType} as returned by {@link CompositeData#getCompositeType()}.  The result is true if{@code this} is &lt;em&gt;assignable from&lt;/em&gt; {@code ct}.  This
                  means that:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@link #getTypeName() this.getTypeName()} equals{@code ct.getTypeName()}, and
                  &lt;li&gt;there are no item names present in {@code this} that are
                  not also present in {@code ct}, and
                  &lt;li&gt;for every item in {@code this}, its type is assignable from
                  the type of the corresponding item in {@code ct}.
                  &lt;/ul&gt;
                  &lt;p&gt;A {@code TabularType} is assignable from another {@codeTabularType} if they have the same {@linkplain TabularType#getTypeName() typeName} and {@linkplain TabularType#getIndexNames() index name list}, and the{@linkplain TabularType#getRowType() row type} of the first is
                  assignable from the row type of the second.
                  &lt;p&gt;An {@code ArrayType} is assignable from another {@codeArrayType} if they have the same {@linkplain ArrayType#getDimension() dimension}; and both are {@linkplain ArrayType#isPrimitiveArray() primitive arrays} or neither is;
                  and the {@linkplain ArrayType#getElementOpenType() element
                  type} of the first is assignable from the element type of the
                  second.
                  &lt;p&gt;In every other case, an {@code OpenType} is assignable from
                  another {@code OpenType} only if they are equal.&lt;/p&gt;
                  &lt;p&gt;These rules mean that extra items can be added to a {@codeCompositeData} without making it invalid for a {@code CompositeType}that does not have those items.&lt;/p&gt;                
                <param>
                    obj  the value whose open type is to be tested for compatibility
                      with this &lt;code&gt;CompositeType&lt;/code&gt; instance.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;var&gt;obj&lt;/var&gt; is a value for this
                      composite type, &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="188">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="189"/>
                <declaration name="value" type="CompositeData" line="192"/>
                <declaration name="valueType" type="CompositeType" line="193"/>
            </method>
            <javadoc line="196">
                Tests whether values of the given type can be assigned to this
                  open type.  The result is true if the given type is also a
                  CompositeType with the same name ({@link #getTypeName()}), and
                  every item in this type is also present in the given type with
                  the same name and assignable type.  There can be additional
                  items in the given type, which are ignored.                
                <param>
                    ot the type to be tested.                    
                </param>
                <return>
                    true if {@code ot} is assignable to this open type.                    
                </return>
            </javadoc>
            <method name="isAssignableFrom" type="boolean" line="206">
                <params>
                    <param name="ot" type="OpenType&lt;?&gt;"/>
                </params>
                <declaration name="ct" type="CompositeType" line="208"/>
                <scope line="210">
                    <declaration name="otItemType" type="OpenType&amp;lt;?&amp;gt;" line="211"/>
                    <declaration name="thisItemType" type="OpenType&amp;lt;?&amp;gt;" line="212"/>
                </scope>
            </method>
            <javadoc line="217">
                Compares the specified &lt;code&gt;obj&lt;/code&gt; parameter with this &lt;code&gt;CompositeType&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Two &lt;code&gt;CompositeType&lt;/code&gt; instances are equal if and only if all of the following statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;their type names are equal&lt;/li&gt;
                  &lt;li&gt;their items&apos; names and types are equal&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br&gt;&amp;nbsp;                
                <param>
                    obj  the object to be compared for equality with this &lt;code&gt;CompositeType&lt;/code&gt; instance;
                      if &lt;var&gt;obj&lt;/var&gt; is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified object is equal to this &lt;code&gt;CompositeType&lt;/code&gt; instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="230">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="231"/>
                <declaration name="other" type="CompositeType" line="234"/>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
            </method>
            <javadoc line="249">
                Returns the hash code value for this &lt;code&gt;CompositeType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of a &lt;code&gt;CompositeType&lt;/code&gt; instance is the sum of the hash codes
                  of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons
                  (ie: name, items names, items types).
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt;
                  for any two &lt;code&gt;CompositeType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;
                  As &lt;code&gt;CompositeType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once,
                  on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.                
                <return>
                    the hash code value for this &lt;code&gt;CompositeType&lt;/code&gt; instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="263">
                <scope line="264">
                    <declaration name="value" type="int" line="265"/>
                    <scope line="267"/>
                </scope>
            </method>
            <javadoc line="275">
                Returns a string representation of this &lt;code&gt;CompositeType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of
                  the name of this class (ie &lt;code&gt;javax.management.openmbean.CompositeType&lt;/code&gt;), the type name for this instance,
                  and the list of the items names and types string representation of this instance.
                  &lt;p&gt;
                  As &lt;code&gt;CompositeType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once,
                  on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.                
                <return>
                    a string representation of this &lt;code&gt;CompositeType&lt;/code&gt; instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="286">
                <scope line="287">
                    <declaration name="result" type="StringBuilder" line="288"/>
                    <declaration name="i" type="int" line="293"/>
                    <declaration name="k" type="Iterator&amp;lt;String&amp;gt;" line="294"/>
                    <declaration name="key" type="String" line="295"/>
                    <scope line="296"/>
                </scope>
            </method>
        </class>
    </source>