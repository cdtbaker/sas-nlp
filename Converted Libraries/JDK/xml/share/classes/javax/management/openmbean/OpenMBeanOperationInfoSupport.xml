<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.util.Arrays"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanOperationInfo"/>
        <import package="javax.management.MBeanParameterInfo"/>
        <class name="OpenMBeanOperationInfoSupport" line="7">
            <extends class="MBeanOperationInfo"/>
            <implements interface="OpenMBeanOperationInfo"/>
            <javadoc line="7">
                Describes an operation of an Open MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="12"/>
            <declaration name="returnOpenType" type="OpenType&amp;lt;?&amp;gt;" line="13"/>
            <javadoc line="13">
                @serial The &lt;i&gt;open type&lt;/i&gt; of the values returned by the operation
                  described by this {@link OpenMBeanOperationInfo} instance                
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="18"/>
            <declaration name="myToString" type="String" line="19"/>
            <javadoc line="20">
                &lt;p&gt;Constructs an {@code OpenMBeanOperationInfoSupport}instance, which describes the operation of a class of open
                  MBeans, with the specified {@code name}, {@code description},{@code signature}, {@code returnOpenType} and {@codeimpact}.&lt;/p&gt;
                  &lt;p&gt;The {@code signature} array parameter is internally copied,
                  so that subsequent changes to the array referenced by {@codesignature} have no effect on this instance.&lt;/p&gt;                
                <param>
                    name cannot be a null or empty string.                    
                </param>
                <param>
                    description cannot be a null or empty string.                    
                </param>
                <param>
                    signature can be null or empty if there are no
                      parameters to describe.                    
                </param>
                <param>
                    returnOpenType cannot be null: use {@codeSimpleType.VOID} for operations that return nothing.                    
                </param>
                <param>
                    impact must be one of {@code ACTION}, {@codeACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@codereturnOpenType} is null, or {@code impact} is not one of {@codeACTION}, {@code ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.                    
                </throws>
                <throws>
                    ArrayStoreException If {@code signature} is not an
                      array of instances of a subclass of {@code MBeanParameterInfo}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanOperationInfoSupport" type="constructor" line="35">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="signature" type="OpenMBeanParameterInfo[]"/>
                    <param name="returnOpenType" type="OpenType&lt;?&gt;"/>
                    <param name="impact" type="int"/>
                </params>
            </method>
            <javadoc line="38">
                &lt;p&gt;Constructs an {@code OpenMBeanOperationInfoSupport}instance, which describes the operation of a class of open
                  MBeans, with the specified {@code name}, {@code description},{@code signature}, {@code returnOpenType}, {@codeimpact}, and {@code descriptor}.&lt;/p&gt;
                  &lt;p&gt;The {@code signature} array parameter is internally copied,
                  so that subsequent changes to the array referenced by {@codesignature} have no effect on this instance.&lt;/p&gt;                
                <param>
                    name cannot be a null or empty string.                    
                </param>
                <param>
                    description cannot be a null or empty string.                    
                </param>
                <param>
                    signature can be null or empty if there are no
                      parameters to describe.                    
                </param>
                <param>
                    returnOpenType cannot be null: use {@codeSimpleType.VOID} for operations that return nothing.                    
                </param>
                <param>
                    impact must be one of {@code ACTION}, {@codeACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.                    
                </param>
                <param>
                    descriptor The descriptor for the operation.  This may
                      be null, which is equivalent to an empty descriptor.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@codereturnOpenType} is null, or {@code impact} is not one of {@codeACTION}, {@code ACTION_INFO}, {@code INFO}, or {@code UNKNOWN}.                    
                </throws>
                <throws>
                    ArrayStoreException If {@code signature} is not an
                      array of instances of a subclass of {@code MBeanParameterInfo}.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="OpenMBeanOperationInfoSupport" type="constructor" line="56">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="signature" type="OpenMBeanParameterInfo[]"/>
                    <param name="returnOpenType" type="OpenType&lt;?&gt;"/>
                    <param name="impact" type="int"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
                <scope line="58"/>
                <scope line="61"/>
                <scope line="64"/>
                <scope line="67"/>
            </method>
            <method name="arrayCopyCast" type="MBeanParameterInfo[]" line="72">
                <params>
                    <param name="src" type="OpenMBeanParameterInfo[]"/>
                </params>
                <declaration name="dst" type="MBeanParameterInfo[]" line="74"/>
            </method>
            <method name="arrayCopyCast" type="OpenMBeanParameterInfo[]" line="78">
                <params>
                    <param name="src" type="MBeanParameterInfo[]"/>
                </params>
                <declaration name="dst" type="OpenMBeanParameterInfo[]" line="80"/>
            </method>
            <javadoc line="84">
                Returns the &lt;i&gt;open type&lt;/i&gt; of the values returned by the
                  operation described by this {@code OpenMBeanOperationInfo}instance.                
            </javadoc>
            <method name="getReturnOpenType" type="OpenType&lt;?&gt;" line="88"/>
            <javadoc line="91">
                &lt;p&gt;Compares the specified {@code obj} parameter with this{@code OpenMBeanOperationInfoSupport} instance for
                  equality.&lt;/p&gt;
                  &lt;p&gt;Returns {@code true} if and only if all of the following
                  statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;{@code obj} is non null,&lt;/li&gt;
                  &lt;li&gt;{@code obj} also implements the {@codeOpenMBeanOperationInfo} interface,&lt;/li&gt;
                  &lt;li&gt;their names are equal&lt;/li&gt;
                  &lt;li&gt;their signatures are equal&lt;/li&gt;
                  &lt;li&gt;their return open types are equal&lt;/li&gt;
                  &lt;li&gt;their impacts are equal&lt;/li&gt;
                  &lt;/ul&gt;
                  This ensures that this {@code equals} method works properly for{@code obj} parameters which are different implementations of
                  the {@code OpenMBeanOperationInfo} interface.                
                <param>
                    obj the object to be compared for equality with this{@code OpenMBeanOperationInfoSupport} instance;                    
                </param>
                <return>
                    {@code true} if the specified object is equal to this{@code OpenMBeanOperationInfoSupport} instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="109">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="110"/>
                <declaration name="other" type="OpenMBeanOperationInfo" line="113"/>
                <scope line="114"/>
                <scope line="117"/>
                <scope line="120"/>
                <scope line="123"/>
                <scope line="126"/>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                &lt;p&gt;Returns the hash code value for this {@codeOpenMBeanOperationInfoSupport} instance.&lt;/p&gt;
                  &lt;p&gt;The hash code of an {@code OpenMBeanOperationInfoSupport}instance is the sum of the hash codes of all elements of
                  information used in {@code equals} comparisons (ie: its name,
                  return open type, impact and signature, where the signature
                  hashCode is calculated by a call to 
                  ).&lt;/p&gt;
                  &lt;p&gt;This ensures that {@code t1.equals(t2) } implies that 
                   
                   for any two {@codeOpenMBeanOperationInfoSupport} instances {@code t1} and {@codet2}, as required by the general contract of the method {@link Object#hashCode() Object.hashCode()}.&lt;/p&gt;
                  &lt;p&gt;However, note that another instance of a class implementing
                  the {@code OpenMBeanOperationInfo} interface may be equal to
                  this {@code OpenMBeanOperationInfoSupport} instance as defined
                  by {@link #equals(java.lang.Object)}, but may have a different
                  hash code if it is calculated differently.&lt;/p&gt;
                  &lt;p&gt;As {@code OpenMBeanOperationInfoSupport} instances are
                  immutable, the hash code for this instance is calculated once,
                  on the first call to {@code hashCode}, and then the same value
                  is returned for subsequent calls.&lt;/p&gt;                
                <return>
                    the hash code value for this {@codeOpenMBeanOperationInfoSupport} instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="152">
                <scope line="153">
                    <declaration name="value" type="int" line="154"/>
                </scope>
            </method>
            <javadoc line="163">
                &lt;p&gt;Returns a string representation of this {@codeOpenMBeanOperationInfoSupport} instance.&lt;/p&gt;
                  &lt;p&gt;The string representation consists of the name of this class
                  (ie {@codejavax.management.openmbean.OpenMBeanOperationInfoSupport}), and
                  the name, signature, return open type and impact of the
                  described operation and the string representation of its descriptor.&lt;/p&gt;
                  &lt;p&gt;As {@code OpenMBeanOperationInfoSupport} instances are
                  immutable, the string representation for this instance is
                  calculated once, on the first call to {@code toString}, and
                  then the same value is returned for subsequent calls.&lt;/p&gt;                
                <return>
                    a string representation of this {@codeOpenMBeanOperationInfoSupport} instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="175">
                <scope line="176"/>
            </method>
            <javadoc line="181">
                An object serialized in a version of the API before Descriptors were
                  added to this class will have an empty or null Descriptor.
                  For consistency with our
                  behavior in this version, we must replace the object with one
                  where the Descriptors reflect the same value of returned openType.                
            </javadoc>
            <method name="readResolve" type="Object" line="188">
                <scope line="189"/>
            </method>
        </class>
    </source>