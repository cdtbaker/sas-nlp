<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.util.Set"/>
        <import package="java.util.Collection"/>
        <interface name="TabularData">
            <javadoc line="4">
                The &lt;tt&gt;TabularData&lt;/tt&gt; interface specifies the behavior of a specific type of complex &lt;i&gt;open data&lt;/i&gt; objects
                  which represent &lt;i&gt;tabular data&lt;/i&gt; structures.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getTabularType" type="TabularType" line="10"/>
            <javadoc line="10">
                Returns the &lt;i&gt;tabular type&lt;/i&gt; describing this
                  &lt;tt&gt;TabularData&lt;/tt&gt; instance.                
                <return>
                    the tabular type.                    
                </return>
            </javadoc>
            <method name="calculateIndex" type="Object[]" line="16"/>
            <javadoc line="16">
                Calculates the index that would be used in this &lt;tt&gt;TabularData&lt;/tt&gt; instance to refer to the specified
                  composite data &lt;var&gt;value&lt;/var&gt; parameter if it were added to this instance.
                  This method checks for the type validity of the specified &lt;var&gt;value&lt;/var&gt;,
                  but does not check if the calculated index is already used to refer to a value in this &lt;tt&gt;TabularData&lt;/tt&gt; instance.                
                <param>
                    value                      the composite data value whose index in this
                      &lt;tt&gt;TabularData&lt;/tt&gt; instance is to be calculated;
                      must be of the same composite type as this instance&apos;s row type;
                      must not be null.                    
                </param>
                <return>
                    the index that the specified &lt;var&gt;value&lt;/var&gt; would have in this &lt;tt&gt;TabularData&lt;/tt&gt; instance.                    
                </return>
                <throws>
                    NullPointerException       if &lt;var&gt;value&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <throws>
                    InvalidOpenTypeException   if &lt;var&gt;value&lt;/var&gt; does not conform to this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s
                      row type definition.                    
                </throws>
            </javadoc>
            <method name="size" type="int" line="31"/>
            <javadoc line="31">
                Returns the number of &lt;tt&gt;CompositeData&lt;/tt&gt; values (ie the
                  number of rows) contained in this &lt;tt&gt;TabularData&lt;/tt&gt;
                  instance.                
                <return>
                    the number of values contained.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="38"/>
            <javadoc line="38">
                Returns &lt;tt&gt;true&lt;/tt&gt; if the number of &lt;tt&gt;CompositeData&lt;/tt&gt;
                  values (ie the number of rows) contained in this
                  &lt;tt&gt;TabularData&lt;/tt&gt; instance is zero.                
                <return>
                    true if this &lt;tt&gt;TabularData&lt;/tt&gt; is empty.                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="45"/>
            <javadoc line="45">
                Returns &lt;tt&gt;true&lt;/tt&gt; if and only if this &lt;tt&gt;TabularData&lt;/tt&gt; instance contains a &lt;tt&gt;CompositeData&lt;/tt&gt; value
                  (ie a row) whose index is the specified &lt;var&gt;key&lt;/var&gt;. If &lt;var&gt;key&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt; or does not conform to
                  this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s &lt;tt&gt;TabularType&lt;/tt&gt; definition, this method simply returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    key  the index value whose presence in this &lt;tt&gt;TabularData&lt;/tt&gt; instance is to be tested.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this &lt;tt&gt;TabularData&lt;/tt&gt; indexes a row value with the specified key.                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="53"/>
            <javadoc line="53">
                Returns &lt;tt&gt;true&lt;/tt&gt; if and only if this &lt;tt&gt;TabularData&lt;/tt&gt; instance contains the specified
                  &lt;tt&gt;CompositeData&lt;/tt&gt; value. If &lt;var&gt;value&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt; or does not conform to
                  this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s row type definition, this method simply returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    value  the row value whose presence in this &lt;tt&gt;TabularData&lt;/tt&gt; instance is to be tested.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this &lt;tt&gt;TabularData&lt;/tt&gt; instance contains the specified row value.                    
                </return>
            </javadoc>
            <method name="get" type="CompositeData" line="61"/>
            <javadoc line="61">
                Returns the &lt;tt&gt;CompositeData&lt;/tt&gt; value whose index is
                  &lt;var&gt;key&lt;/var&gt;, or &lt;tt&gt;null&lt;/tt&gt; if there is no value mapping
                  to &lt;var&gt;key&lt;/var&gt;, in this &lt;tt&gt;TabularData&lt;/tt&gt; instance.                
                <param>
                    key the key of the row to return.                    
                </param>
                <return>
                    the value corresponding to &lt;var&gt;key&lt;/var&gt;.                    
                </return>
                <throws>
                    NullPointerException if the &lt;var&gt;key&lt;/var&gt; is
                      &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <throws>
                    InvalidKeyException if the &lt;var&gt;key&lt;/var&gt; does not
                      conform to this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s 
                      &lt;tt&gt;TabularType&lt;/tt&gt; definition                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="74"/>
            <javadoc line="74">
                Adds &lt;var&gt;value&lt;/var&gt; to this &lt;tt&gt;TabularData&lt;/tt&gt; instance.
                  The composite type of &lt;var&gt;value&lt;/var&gt; must be the same as this
                  instance&apos;s row type (ie the composite type returned by
                  &lt;tt&gt;this.getTabularType().{@link TabularType#getRowTypegetRowType()}&lt;/tt&gt;), and there must not already be an existing
                  value in this &lt;tt&gt;TabularData&lt;/tt&gt; instance whose index is the
                  same as the one calculated for the &lt;var&gt;value&lt;/var&gt; to be
                  added. The index for &lt;var&gt;value&lt;/var&gt; is calculated according
                  to this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s &lt;tt&gt;TabularType&lt;/tt&gt;
                  definition (see &lt;tt&gt;TabularType.{@link TabularType#getIndexNames getIndexNames()}&lt;/tt&gt;).                
                <param>
                    value                      the composite data value to be added as a new row to this &lt;tt&gt;TabularData&lt;/tt&gt; instance;
                      must be of the same composite type as this instance&apos;s row type;
                      must not be null.                    
                </param>
                <throws>
                    NullPointerException       if &lt;var&gt;value&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <throws>
                    InvalidOpenTypeException   if &lt;var&gt;value&lt;/var&gt; does not conform to this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s
                      row type definition.                    
                </throws>
                <throws>
                    KeyAlreadyExistsException  if the index for &lt;var&gt;value&lt;/var&gt;, calculated according to
                      this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s &lt;tt&gt;TabularType&lt;/tt&gt; definition
                      already maps to an existing value in the underlying HashMap.                    
                </throws>
            </javadoc>
            <method name="remove" type="CompositeData" line="95"/>
            <javadoc line="95">
                Removes the &lt;tt&gt;CompositeData&lt;/tt&gt; value whose index is &lt;var&gt;key&lt;/var&gt; from this &lt;tt&gt;TabularData&lt;/tt&gt; instance,
                  and returns the removed value, or returns &lt;tt&gt;null&lt;/tt&gt; if there is no value whose index is &lt;var&gt;key&lt;/var&gt;.                
                <param>
                    key  the index of the value to get in this &lt;tt&gt;TabularData&lt;/tt&gt; instance;
                      must be valid with this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s row type definition;
                      must not be null.                    
                </param>
                <return>
                    previous value associated with specified key, or &lt;tt&gt;null&lt;/tt&gt;
                      if there was no mapping for key.                    
                </return>
                <throws>
                    NullPointerException  if the &lt;var&gt;key&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <throws>
                    InvalidKeyException   if the &lt;var&gt;key&lt;/var&gt; does not conform to this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s
                      &lt;tt&gt;TabularType&lt;/tt&gt; definition                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="108"/>
            <javadoc line="108">
                Add all the elements in &lt;var&gt;values&lt;/var&gt; to this &lt;tt&gt;TabularData&lt;/tt&gt; instance.
                  If any  element in &lt;var&gt;values&lt;/var&gt; does not satisfy the constraints defined in {@link #put(CompositeData) &lt;tt&gt;put&lt;/tt&gt;},
                  or if any two elements in &lt;var&gt;values&lt;/var&gt; have the same index calculated according to this &lt;tt&gt;TabularData&lt;/tt&gt;
                  instance&apos;s &lt;tt&gt;TabularType&lt;/tt&gt; definition, then an exception describing the failure is thrown
                  and no element of &lt;var&gt;values&lt;/var&gt; is added,  thus leaving this &lt;tt&gt;TabularData&lt;/tt&gt; instance unchanged.                
                <param>
                    values  the array of composite data values to be added as new rows to this &lt;tt&gt;TabularData&lt;/tt&gt; instance;
                      if &lt;var&gt;values&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt; or empty, this method returns without doing anything.                    
                </param>
                <throws>
                    NullPointerException       if an element of &lt;var&gt;values&lt;/var&gt; is &lt;tt&gt;null&lt;/tt&gt;                    
                </throws>
                <throws>
                    InvalidOpenTypeException   if an element of &lt;var&gt;values&lt;/var&gt; does not conform to
                      this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s row type definition                    
                </throws>
                <throws>
                    KeyAlreadyExistsException  if the index for an element of &lt;var&gt;values&lt;/var&gt;, calculated according to
                      this &lt;tt&gt;TabularData&lt;/tt&gt; instance&apos;s &lt;tt&gt;TabularType&lt;/tt&gt; definition
                      already maps to an existing value in this instance,
                      or two elements of &lt;var&gt;values&lt;/var&gt; have the same index.                    
                </throws>
            </javadoc>
            <method name="clear" type="void" line="125"/>
            <javadoc line="125">
                Removes all &lt;tt&gt;CompositeData&lt;/tt&gt; values (ie rows) from this &lt;tt&gt;TabularData&lt;/tt&gt; instance.                
            </javadoc>
            <method name="keySet" type="Set&lt;?&gt;" line="129"/>
            <javadoc line="129">
                Returns a set view of the keys (ie the index values) of the{@code CompositeData} values (ie the rows) contained in this{@code TabularData} instance. The returned {@code Set} is a{@code Set&lt;List&lt;?&gt;&gt;} but is declared as a {@code Set&lt;?&gt;} for
                  compatibility reasons. The returned set can be used to iterate
                  over the keys.                
                <return>
                    a set view ({@code Set&lt;List&lt;?&gt;&gt;}) of the index values
                      used in this {@code TabularData} instance.                    
                </return>
            </javadoc>
            <method name="values" type="Collection&lt;?&gt;" line="137"/>
            <javadoc line="137">
                Returns a collection view of the {@code CompositeData} values
                  (ie the rows) contained in this {@code TabularData} instance.
                  The returned {@code Collection} is a {@code Collection&lt;CompositeData&gt;}but is declared as a {@code Collection&lt;?&gt;} for compatibility reasons.
                  The returned collection can be used to iterate over the values.                
                <return>
                    a collection view ({@code Collection&lt;CompositeData&gt;})
                      of the rows contained in this {@code TabularData} instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="146"/>
            <javadoc line="146">
                Compares the specified &lt;var&gt;obj&lt;/var&gt; parameter with this &lt;code&gt;TabularData&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Returns &lt;tt&gt;true&lt;/tt&gt; if and only if all of the following statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;var&gt;obj&lt;/var&gt; is non null,&lt;/li&gt;
                  &lt;li&gt;&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;TabularData&lt;/code&gt; interface,&lt;/li&gt;
                  &lt;li&gt;their row types are equal&lt;/li&gt;
                  &lt;li&gt;their contents (ie index to value mappings) are equal&lt;/li&gt;
                  &lt;/ul&gt;
                  This ensures that this &lt;tt&gt;equals&lt;/tt&gt; method works properly for &lt;var&gt;obj&lt;/var&gt; parameters which are
                  different implementations of the &lt;code&gt;TabularData&lt;/code&gt; interface.
                  &lt;br&gt;&amp;nbsp;                
                <param>
                    obj  the object to be compared for equality with this &lt;code&gt;TabularData&lt;/code&gt; instance;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the specified object is equal to this &lt;code&gt;TabularData&lt;/code&gt; instance.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="163"/>
            <javadoc line="163">
                Returns the hash code value for this &lt;code&gt;TabularData&lt;/code&gt; instance.
                  &lt;p&gt;
                  The hash code of a &lt;code&gt;TabularData&lt;/code&gt; instance is the sum of the hash codes
                  of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons
                  (ie: its &lt;i&gt;tabular type&lt;/i&gt; and its content, where the content is defined as all the index to value mappings).
                  &lt;p&gt;
                  This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt;
                  for any two &lt;code&gt;TabularDataSupport&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;,
                  as required by the general contract of the method{@link Object#hashCode() Object.hashCode()}.                
                <return>
                    the hash code value for this &lt;code&gt;TabularDataSupport&lt;/code&gt; instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="176"/>
            <javadoc line="176">
                Returns a string representation of this &lt;code&gt;TabularData&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of the name of the implementing class,
                  and the tabular type of this instance.                
                <return>
                    a string representation of this &lt;code&gt;TabularData&lt;/code&gt; instance                    
                </return>
            </javadoc>
        </interface>
    </source>