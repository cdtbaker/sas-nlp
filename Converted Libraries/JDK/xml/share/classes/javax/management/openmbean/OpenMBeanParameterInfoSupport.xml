<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.util.Set"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.DescriptorRead"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanParameterInfo"/>
        <import package="javax.management.openmbean.OpenMBeanAttributeInfoSupport"/>
        <class name="OpenMBeanParameterInfoSupport" line="8">
            <extends class="MBeanParameterInfo"/>
            <implements interface="OpenMBeanParameterInfo"/>
            <javadoc line="8">
                Describes a parameter used in one or more operations or
                  constructors of an open MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="14"/>
            <declaration name="openType" type="OpenType&amp;lt;?&amp;gt;" line="15"/>
            <javadoc line="15">
                @serial The open mbean parameter&apos;s &lt;i&gt;open type&lt;/i&gt;                
            </javadoc>
            <declaration name="defaultValue" type="Object" line="19"/>
            <javadoc line="19">
                @serial The open mbean parameter&apos;s default value                
            </javadoc>
            <declaration name="legalValues" type="Set&amp;lt;?&amp;gt;" line="23"/>
            <javadoc line="23">
                @serial The open mbean parameter&apos;s legal values. This {@link Set} is unmodifiable                
            </javadoc>
            <declaration name="minValue" type="Comparable&amp;lt;?&amp;gt;" line="27"/>
            <javadoc line="27">
                @serial The open mbean parameter&apos;s min value                
            </javadoc>
            <declaration name="maxValue" type="Comparable&amp;lt;?&amp;gt;" line="31"/>
            <javadoc line="31">
                @serial The open mbean parameter&apos;s max value                
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="35"/>
            <declaration name="myToString" type="String" line="36"/>
            <javadoc line="37">
                Constructs an {@code OpenMBeanParameterInfoSupport} instance,
                  which describes the parameter used in one or more operations or
                  constructors of a class of open MBeans, with the specified{@code name}, {@code openType} and {@code description}.                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanParameterInfoSupport" type="constructor" line="47">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType&lt;?&gt;"/>
                </params>
            </method>
            <javadoc line="50">
                                
            </javadoc>
            <method name="OpenMBeanParameterInfoSupport" type="constructor" line="52">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType&lt;?&gt;"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
                <scope line="60"/>
                <scope line="63"/>
            </method>
            <javadoc line="67">
                Constructs an {@code OpenMBeanParameterInfoSupport} instance,
                  which describes the parameter used in one or more operations or
                  constructors of a class of open MBeans, with the specified{@code name}, {@code openType}, {@code description} and {@codedefaultValue}.                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    defaultValue must be a valid value for the {@codeopenType} specified for this parameter; default value not
                      supported for {@code ArrayType} and {@code TabularType}; can be
                      null, in which case it means that no default value is set.                    
                </param>
                <param>
                    &lt;T&gt;
                      allows the compiler to check that the {@code defaultValue},
                      if non-null, has the correct Java type for the given {@code openType}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
                <throws>
                    OpenDataException if {@code defaultValue} is not a
                      valid value for the specified {@code openType}, or {@codedefaultValue} is non null and {@code openType} is an {@codeArrayType} or a {@code TabularType}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanParameterInfoSupport" type="constructor" line="85">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType&lt;T&gt;"/>
                    <param name="defaultValue" type="T"/>
                </params>
            </method>
            <javadoc line="88">
                &lt;p&gt;Constructs an {@code OpenMBeanParameterInfoSupport} instance,
                  which describes the parameter used in one or more operations or
                  constructors of a class of open MBeans, with the specified{@code name}, {@code openType}, {@code description}, {@codedefaultValue} and {@code legalValues}.&lt;/p&gt;
                  &lt;p&gt;The contents of {@code legalValues} are copied, so subsequent
                  modifications of the array referenced by {@code legalValues}have no impact on this {@code OpenMBeanParameterInfoSupport}instance.&lt;/p&gt;                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    defaultValue must be a valid value for the {@codeopenType} specified for this parameter; default value not
                      supported for {@code ArrayType} and {@code TabularType}; can be
                      null, in which case it means that no default value is set.                    
                </param>
                <param>
                    legalValues each contained value must be valid for the{@code openType} specified for this parameter; legal values not
                      supported for {@code ArrayType} and {@code TabularType}; can be
                      null or empty.                    
                </param>
                <param>
                    &lt;T&gt;
                      allows the compiler to check that the {@codedefaultValue} and {@code legalValues}, if non-null, have the
                      correct Java type for the given {@code openType}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
                <throws>
                    OpenDataException if {@code defaultValue} is not a
                      valid value for the specified {@code openType}, or one value in{@code legalValues} is not valid for the specified {@codeopenType}, or {@code defaultValue} is non null and {@codeopenType} is an {@code ArrayType} or a {@code TabularType}, or{@code legalValues} is non null and non empty and {@codeopenType} is an {@code ArrayType} or a {@code TabularType}, or{@code legalValues} is non null and non empty and {@codedefaultValue} is not contained in {@code legalValues}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanParameterInfoSupport" type="constructor" line="111">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType&lt;T&gt;"/>
                    <param name="defaultValue" type="T"/>
                    <param name="legalValues" type="T[]"/>
                </params>
            </method>
            <javadoc line="114">
                Constructs an {@code OpenMBeanParameterInfoSupport} instance,
                  which describes the parameter used in one or more operations or
                  constructors of a class of open MBeans, with the specified{@code name}, {@code openType}, {@code description}, {@codedefaultValue}, {@code minValue} and {@code maxValue}.
                  It is possible to specify minimal and maximal values only for
                  an open type whose values are {@code Comparable}.                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    defaultValue must be a valid value for the {@codeopenType} specified for this parameter; default value not
                      supported for {@code ArrayType} and {@code TabularType}; can be
                      null, in which case it means that no default value is set.                    
                </param>
                <param>
                    minValue must be valid for the {@code openType}specified for this parameter; can be null, in which case it
                      means that no minimal value is set.                    
                </param>
                <param>
                    maxValue must be valid for the {@code openType}specified for this parameter; can be null, in which case it
                      means that no maximal value is set.                    
                </param>
                <param>
                    &lt;T&gt;
                      allows the compiler to check that the {@codedefaultValue}, {@code minValue}, and {@code maxValue}, if
                      non-null, have the correct Java type for the given {@codeopenType}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
                <throws>
                    OpenDataException if {@code defaultValue}, {@codeminValue} or {@code maxValue} is not a valid value for the
                      specified {@code openType}, or {@code defaultValue} is non null
                      and {@code openType} is an {@code ArrayType} or a {@codeTabularType}, or both {@code minValue} and {@code maxValue} are
                      non-null and {@code minValue.compareTo(maxValue) &gt; 0} is {@codetrue}, or both {@code defaultValue} and {@code minValue} are
                      non-null and {@code minValue.compareTo(defaultValue) &gt; 0} is{@code true}, or both {@code defaultValue} and {@code maxValue}are non-null and {@code defaultValue.compareTo(maxValue) &gt; 0}is {@code true}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanParameterInfoSupport" type="constructor" line="141">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType&lt;T&gt;"/>
                    <param name="defaultValue" type="T"/>
                    <param name="minValue" type="Comparable&lt;T&gt;"/>
                    <param name="maxValue" type="Comparable&lt;T&gt;"/>
                </params>
            </method>
            <method name="OpenMBeanParameterInfoSupport" type="constructor" line="144">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType&lt;T&gt;"/>
                    <param name="defaultValue" type="T"/>
                    <param name="legalValues" type="T[]"/>
                    <param name="minValue" type="Comparable&lt;T&gt;"/>
                    <param name="maxValue" type="Comparable&lt;T&gt;"/>
                </params>
                <declaration name="d" type="Descriptor" line="147"/>
            </method>
            <javadoc line="154">
                An object serialized in a version of the API before Descriptors were
                  added to this class will have an empty or null Descriptor.
                  For consistency with our
                  behavior in this version, we must replace the object with one
                  where the Descriptors reflect the same values of openType, defaultValue,
                  etc.                
            </javadoc>
            <method name="readResolve" type="Object" line="162">
                <scope line="163">
                    <declaration name="xopenType" type="OpenType&amp;lt;Object&amp;gt;" line="164"/>
                    <declaration name="xlegalValues" type="Set&amp;lt;Object&amp;gt;" line="165"/>
                    <declaration name="xminValue" type="Comparable&amp;lt;Object&amp;gt;" line="166"/>
                    <declaration name="xmaxValue" type="Comparable&amp;lt;Object&amp;gt;" line="167"/>
                </scope>
            </method>
            <javadoc line="172">
                Returns the open type for the values of the parameter described
                  by this {@code OpenMBeanParameterInfoSupport} instance.                
            </javadoc>
            <method name="getOpenType" type="OpenType&lt;?&gt;" line="176"/>
            <javadoc line="179">
                Returns the default value for the parameter described by this{@code OpenMBeanParameterInfoSupport} instance, if specified,
                  or {@code null} otherwise.                
            </javadoc>
            <method name="getDefaultValue" type="Object" line="183"/>
            <javadoc line="186">
                Returns an unmodifiable Set of legal values for the parameter
                  described by this {@code OpenMBeanParameterInfoSupport}instance, if specified, or {@code null} otherwise.                
            </javadoc>
            <method name="getLegalValues" type="Set&lt;?&gt;" line="190"/>
            <javadoc line="193">
                Returns the minimal value for the parameter described by this{@code OpenMBeanParameterInfoSupport} instance, if specified,
                  or {@code null} otherwise.                
            </javadoc>
            <method name="getMinValue" type="Comparable&lt;?&gt;" line="197"/>
            <javadoc line="200">
                Returns the maximal value for the parameter described by this{@code OpenMBeanParameterInfoSupport} instance, if specified,
                  or {@code null} otherwise.                
            </javadoc>
            <method name="getMaxValue" type="Comparable&lt;?&gt;" line="204"/>
            <javadoc line="207">
                Returns {@code true} if this {@codeOpenMBeanParameterInfoSupport} instance specifies a non-null
                  default value for the described parameter, {@code false}otherwise.                
            </javadoc>
            <method name="hasDefaultValue" type="boolean" line="211"/>
            <javadoc line="214">
                Returns {@code true} if this {@codeOpenMBeanParameterInfoSupport} instance specifies a non-null
                  set of legal values for the described parameter, {@code false}otherwise.                
            </javadoc>
            <method name="hasLegalValues" type="boolean" line="218"/>
            <javadoc line="221">
                Returns {@code true} if this {@codeOpenMBeanParameterInfoSupport} instance specifies a non-null
                  minimal value for the described parameter, {@code false}otherwise.                
            </javadoc>
            <method name="hasMinValue" type="boolean" line="225"/>
            <javadoc line="228">
                Returns {@code true} if this {@codeOpenMBeanParameterInfoSupport} instance specifies a non-null
                  maximal value for the described parameter, {@code false}otherwise.                
            </javadoc>
            <method name="hasMaxValue" type="boolean" line="232"/>
            <javadoc line="235">
                Tests whether {@code obj} is a valid value for the parameter
                  described by this {@code OpenMBeanParameterInfo} instance.                
                <param>
                    obj the object to be tested.                    
                </param>
                <return>
                    {@code true} if {@code obj} is a valid value
                      for the parameter described by this{@code OpenMBeanParameterInfo} instance,{@code false} otherwise.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="242">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="245">
                &lt;p&gt;Compares the specified {@code obj} parameter with this {@codeOpenMBeanParameterInfoSupport} instance for equality.&lt;/p&gt;
                  &lt;p&gt;Returns {@code true} if and only if all of the following
                  statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;{@code obj} is non null,&lt;/li&gt;
                  &lt;li&gt;{@code obj} also implements the {@code OpenMBeanParameterInfo}interface,&lt;/li&gt;
                  &lt;li&gt;their names are equal&lt;/li&gt;
                  &lt;li&gt;their open types are equal&lt;/li&gt;
                  &lt;li&gt;their default, min, max and legal values are equal.&lt;/li&gt;
                  &lt;/ul&gt;
                  This ensures that this {@code equals} method works properly for{@code obj} parameters which are different implementations of
                  the {@code OpenMBeanParameterInfo} interface.
                  &lt;p&gt;If {@code obj} also implements {@link DescriptorRead}, then its{@link DescriptorRead#getDescriptor() getDescriptor()} method must
                  also return the same value as for this object.&lt;/p&gt;                
                <param>
                    obj the object to be compared for equality with this{@code OpenMBeanParameterInfoSupport} instance.                    
                </param>
                <return>
                    {@code true} if the specified object is equal to this{@code OpenMBeanParameterInfoSupport} instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="263">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="OpenMBeanParameterInfo" line="265"/>
            </method>
            <javadoc line="268">
                &lt;p&gt;Returns the hash code value for this {@codeOpenMBeanParameterInfoSupport} instance.&lt;/p&gt;
                  &lt;p&gt;The hash code of an {@code OpenMBeanParameterInfoSupport}instance is the sum of the hash codes of all elements of
                  information used in {@code equals} comparisons (ie: its name,
                  its &lt;i&gt;open type&lt;/i&gt;, its default, min, max and legal
                  values, and its Descriptor).
                  &lt;p&gt;This ensures that {@code t1.equals(t2)} implies that 
                   for any two {@codeOpenMBeanParameterInfoSupport} instances {@code t1} and {@codet2}, as required by the general contract of the method {@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;However, note that another instance of a class implementing
                  the {@code OpenMBeanParameterInfo} interface may be equal to
                  this {@code OpenMBeanParameterInfoSupport} instance as defined
                  by {@link #equals(java.lang.Object)}, but may have a different
                  hash code if it is calculated differently.
                  &lt;p&gt;As {@code OpenMBeanParameterInfoSupport} instances are
                  immutable, the hash code for this instance is calculated once,
                  on the first call to {@code hashCode}, and then the same value
                  is returned for subsequent calls.                
                <return>
                    the hash code value for this {@codeOpenMBeanParameterInfoSupport} instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="286"/>
            <javadoc line="290">
                Returns a string representation of this{@code OpenMBeanParameterInfoSupport} instance.
                  &lt;p&gt;
                  The string representation consists of the name of this class (i.e.{@code javax.management.openmbean.OpenMBeanParameterInfoSupport}),
                  the string representation of the name and open type of the described
                  parameter, the string representation of its default, min, max and legal
                  values and the string representation of its descriptor.
                  &lt;p&gt;
                  As {@code OpenMBeanParameterInfoSupport} instances are immutable,
                  the string representation for this instance is calculated once,
                  on the first call to {@code toString}, and then the same value
                  is returned for subsequent calls.                
                <return>
                    a string representation of this{@code OpenMBeanParameterInfoSupport} instance.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="304"/>
        </class>
    </source>