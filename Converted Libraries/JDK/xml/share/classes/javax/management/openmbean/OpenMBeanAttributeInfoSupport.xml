<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.lang.reflect.Array"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Modifier"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.DescriptorRead"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <class name="OpenMBeanAttributeInfoSupport" line="49">
            <extends class="MBeanAttributeInfo"/>
            <comment line="60">
                                
            </comment>
            <comment line="77">
                to be constructed unmodifiable                
            </comment>
            <comment line="90">
                As this instance is immutable, these two values need only
                 be calculated once.                
            </comment>
            <comment line="742">
                A Descriptor contained an array value encoded as Strings.  The
                Strings must be organized in an array corresponding to the desired
                array.  If the desired array has n dimensions, so must the String
                array.  We will convert element by element from String to desired                
            </comment>
            <comment line="942">
                                
            </comment>
            <implements interface="OpenMBeanAttributeInfo"/>
            <javadoc line="49">
                Describes an attribute of an open MBean.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="60"/>
            <declaration name="openType" type="OpenType&lt;?&gt;" line="62"/>
            <javadoc line="62">
                @serial The open mbean attribute&apos;s &lt;i&gt;open type&lt;/i&gt;                
            </javadoc>
            <declaration name="defaultValue" type="Object" line="67"/>
            <javadoc line="67">
                @serial The open mbean attribute&apos;s default value                
            </javadoc>
            <declaration name="legalValues" type="Set&lt;?&gt;" line="72"/>
            <javadoc line="72">
                @serial The open mbean attribute&apos;s legal values. This {@link Set} is unmodifiable                
            </javadoc>
            <declaration name="minValue" type="Comparable&lt;?&gt;" line="78"/>
            <javadoc line="78">
                @serial The open mbean attribute&apos;s min value                
            </javadoc>
            <declaration name="maxValue" type="Comparable&lt;?&gt;" line="83"/>
            <javadoc line="83">
                @serial The open mbean attribute&apos;s max value                
            </javadoc>
            <declaration name="myHashCode" type="Integer" line="91"/>
            <declaration name="myToString" type="String" line="92"/>
            <javadoc line="95">
                Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
                  which describes the attribute of an open MBean with the
                  specified {@code name}, {@code openType} and {@codedescription}, and the specified read/write access properties.                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    isReadable {@code true} if the attribute has a getter
                      exposed for management.                    
                </param>
                <param>
                    isWritable {@code true} if the attribute has a setter
                      exposed for management.                    
                </param>
                <param>
                    isIs {@code true} if the attribute&apos;s getter is of the
                      form &lt;tt&gt;is&lt;i&gt;XXX&lt;/i&gt;&lt;/tt&gt;.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanAttributeInfoSupport" type="constructor" line="125">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType<?>"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                </params>
            </method>
            <javadoc line="130">
                                
            </javadoc>
            <method name="OpenMBeanAttributeInfoSupport" type="constructor" line="173">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType<?>"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
                <comment line="175">
                    Construct parent&apos;s state                    
                </comment>
                <comment line="186">
                    Initialize this instance&apos;s specific state                    
                </comment>
                <comment line="190">
                    replace null by empty                    
                </comment>
                <scope line="195"/>
                <scope line="197"/>
            </method>
            <javadoc line="202">
                Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
                  which describes the attribute of an open MBean with the
                  specified {@code name}, {@code openType}, {@code description}and {@code defaultValue}, and the specified read/write access
                  properties.                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    isReadable {@code true} if the attribute has a getter
                      exposed for management.                    
                </param>
                <param>
                    isWritable {@code true} if the attribute has a setter
                      exposed for management.                    
                </param>
                <param>
                    isIs {@code true} if the attribute&apos;s getter is of the
                      form &lt;tt&gt;is&lt;i&gt;XXX&lt;/i&gt;&lt;/tt&gt;.                    
                </param>
                <param>
                    defaultValue must be a valid value for the {@codeopenType} specified for this attribute; default value not
                      supported for {@code ArrayType} and {@code TabularType}; can
                      be null, in which case it means that no default value is set.                    
                </param>
                <param>
                    &lt;T&gt;
                       allows the compiler to check that the {@code defaultValue},
                      if non-null, has the correct Java type for the given {@code openType}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
                <throws>
                    OpenDataException if {@code defaultValue} is not a
                      valid value for the specified {@code openType}, or {@codedefaultValue} is non null and {@code openType} is an {@codeArrayType} or a {@code TabularType}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanAttributeInfoSupport" type="constructor" line="248">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                </params>
            </method>
            <javadoc line="254">
                &lt;p&gt;Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
                  which describes the attribute of an open MBean with the
                  specified {@code name}, {@code openType}, {@code description},{@code defaultValue} and {@code legalValues}, and the specified
                  read/write access properties.&lt;/p&gt;
                  &lt;p&gt;The contents of {@code legalValues} are copied, so subsequent
                  modifications of the array referenced by {@code legalValues}have no impact on this {@code OpenMBeanAttributeInfoSupport}instance.&lt;/p&gt;                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    isReadable {@code true} if the attribute has a getter
                      exposed for management.                    
                </param>
                <param>
                    isWritable {@code true} if the attribute has a setter
                      exposed for management.                    
                </param>
                <param>
                    isIs {@code true} if the attribute&apos;s getter is of the
                      form &lt;tt&gt;is&lt;i&gt;XXX&lt;/i&gt;&lt;/tt&gt;.                    
                </param>
                <param>
                    defaultValue must be a valid value
                      for the {@codeopenType} specified for this attribute; default value not
                      supported for {@code ArrayType} and {@code TabularType}; can
                      be null, in which case it means that no default value is set.                    
                </param>
                <param>
                    legalValues each contained value must be valid for the{@code openType} specified for this attribute; legal values
                      not supported for {@code ArrayType} and {@code TabularType};
                      can be null or empty.                    
                </param>
                <param>
                    &lt;T&gt;
                       allows the compiler to check that the {@codedefaultValue} and {@code legalValues}, if non-null, have the
                      correct Java type for the given {@code openType}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
                <throws>
                    OpenDataException if {@code defaultValue} is not a
                      valid value for the specified {@code openType}, or one value in{@code legalValues} is not valid for the specified {@codeopenType}, or {@code defaultValue} is non null and {@codeopenType} is an {@code ArrayType} or a {@code TabularType}, or{@code legalValues} is non null and non empty and {@codeopenType} is an {@code ArrayType} or a {@code TabularType}, or{@code legalValues} is non null and non empty and {@codedefaultValue} is not contained in {@code legalValues}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanAttributeInfoSupport" type="constructor" line="318">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                    <param name="legalValues" type="T[]"/>
                </params>
            </method>
            <javadoc line="324">
                Constructs an {@code OpenMBeanAttributeInfoSupport} instance,
                  which describes the attribute of an open MBean, with the
                  specified {@code name}, {@code openType}, {@code description},{@code defaultValue}, {@code minValue} and {@code maxValue}.
                  It is possible to specify minimal and maximal values only for
                  an open type whose values are {@code Comparable}.                
                <param>
                    name  cannot be a null or empty string.                    
                </param>
                <param>
                    description  cannot be a null or empty string.                    
                </param>
                <param>
                    openType  cannot be null.                    
                </param>
                <param>
                    isReadable {@code true} if the attribute has a getter
                      exposed for management.                    
                </param>
                <param>
                    isWritable {@code true} if the attribute has a setter
                      exposed for management.                    
                </param>
                <param>
                    isIs {@code true} if the attribute&apos;s getter is of the
                      form &lt;tt&gt;is&lt;i&gt;XXX&lt;/i&gt;&lt;/tt&gt;.                    
                </param>
                <param>
                    defaultValue must be a valid value for the {@codeopenType} specified for this attribute; default value not
                      supported for {@code ArrayType} and {@code TabularType}; can be
                      null, in which case it means that no default value is set.                    
                </param>
                <param>
                    minValue must be valid for the {@code openType}specified for this attribute; can be null, in which case it
                      means that no minimal value is set.                    
                </param>
                <param>
                    maxValue must be valid for the {@code openType}specified for this attribute; can be null, in which case it
                      means that no maximal value is set.                    
                </param>
                <param>
                    &lt;T&gt;
                       allows the compiler to check that the {@codedefaultValue}, {@code minValue}, and {@code maxValue}, if
                      non-null, have the correct Java type for the given {@codeopenType}.                    
                </param>
                <throws>
                    IllegalArgumentException if {@code name} or {@codedescription} are null or empty string, or {@code openType} is
                      null.                    
                </throws>
                <throws>
                    OpenDataException if {@code defaultValue}, {@codeminValue} or {@code maxValue} is not a valid value for the
                      specified {@code openType}, or {@code defaultValue} is non null
                      and {@code openType} is an {@code ArrayType} or a {@codeTabularType}, or both {@code minValue} and {@code maxValue} are
                      non-null and {@code minValue.compareTo(maxValue) &gt; 0} is {@codetrue}, or both {@code defaultValue} and {@code minValue} are
                      non-null and {@code minValue.compareTo(defaultValue) &gt; 0} is{@code true}, or both {@code defaultValue} and {@code maxValue}are non-null and {@code defaultValue.compareTo(maxValue) &gt; 0}is {@code true}.                    
                </throws>
            </javadoc>
            <method name="OpenMBeanAttributeInfoSupport" type="constructor" line="391">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                    <param name="minValue" type="Comparable<T>"/>
                    <param name="maxValue" type="Comparable<T>"/>
                </params>
            </method>
            <method name="OpenMBeanAttributeInfoSupport" type="constructor" line="406">
                <params>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                    <param name="isReadable" type="boolean"/>
                    <param name="isWritable" type="boolean"/>
                    <param name="isIs" type="boolean"/>
                    <param name="defaultValue" type="T"/>
                    <param name="legalValues" type="T[]"/>
                    <param name="minValue" type="Comparable<T>"/>
                    <param name="maxValue" type="Comparable<T>"/>
                </params>
                <comment line="423">
                    We already converted the array into an unmodifiable Set
                     in the descriptor.                    
                </comment>
                <declaration name="d" type="Descriptor" line="418"/>
            </method>
            <javadoc line="429">
                An object serialized in a version of the API before Descriptors were
                  added to this class will have an empty or null Descriptor.
                  For consistency with our
                  behavior in this version, we must replace the object with one
                  where the Descriptors reflect the same values of openType, defaultValue,
                  etc.                
            </javadoc>
            <method name="readResolve" type="Object" line="437">
                <scope line="438">
                    <declaration name="xopenType" type="OpenType&lt;Object&gt;" line="439"/>
                    <declaration name="xlegalValues" type="Set&lt;Object&gt;" line="440"/>
                    <declaration name="xminValue" type="Comparable&lt;Object&gt;" line="441"/>
                    <declaration name="xmaxValue" type="Comparable&lt;Object&gt;" line="442"/>
                </scope>
            </method>
            <method name="check" type="void" line="452">
                <params>
                    <param name="info" type="OpenMBeanParameterInfo"/>
                </params>
                <comment line="466">
                    Check and initialize defaultValue                    
                </comment>
                <comment line="469">
                    Default value not supported for ArrayType and TabularType
                     Cast to Object because &quot;OpenType&lt;T&gt; instanceof&quot; is illegal                    
                </comment>
                <comment line="475">
                    Check defaultValue&apos;s class                    
                </comment>
                <comment line="486">
                    Check that we don&apos;t have both legalValues and min or max                    
                </comment>
                <comment line="494">
                    Check minValue and maxValue                    
                </comment>
                <comment line="508">
                    Check that defaultValue is a legal value                    
                </comment>
                <comment line="518">
                    Check that minValue &lt;= defaultValue &lt;= maxValue                    
                </comment>
                <comment line="534">
                    Check legalValues                    
                </comment>
                <comment line="537">
                    legalValues not supported for TabularType and arrays                    
                </comment>
                <comment line="542">
                    Check legalValues are valid with openType                    
                </comment>
                <comment line="555">
                    Check that, if both specified, minValue &lt;= maxValue                    
                </comment>
                <declaration name="openType" type="OpenType&lt;?&gt;" line="453"/>
                <scope line="467">
                    <scope line="470"/>
                    <scope line="475">
                        <declaration name="msg" type="String" line="476"/>
                    </scope>
                </scope>
                <scope line="488"/>
                <scope line="494">
                    <declaration name="msg" type="String" line="495"/>
                </scope>
                <scope line="500">
                    <declaration name="msg" type="String" line="501"/>
                </scope>
                <scope line="509">
                    <declaration name="defaultValue" type="Object" line="510"/>
                    <scope line="512"/>
                    <scope line="519">
                        <scope line="520"/>
                    </scope>
                    <scope line="525">
                        <scope line="526"/>
                    </scope>
                </scope>
                <scope line="535">
                    <scope line="537"/>
                    <scope line="542">
                        <scope line="543">
                            <declaration name="msg" type="String" line="544"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="556">
                    <scope line="557"/>
                </scope>
            </method>
            <method name="compare" type="int" line="566">
                <params>
                    <param name="x" type="Object"/>
                    <param name="y" type="Object"/>
                </params>
            </method>
            <method name="makeDescriptor" type="Descriptor" line="574">
                <params>
                    <param name="openType" type="OpenType<T>"/>
                    <param name="defaultValue" type="T"/>
                    <param name="legalValues" type="T[]"/>
                    <param name="minValue" type="Comparable<T>"/>
                    <param name="maxValue" type="Comparable<T>"/>
                </params>
                <declaration name="map" type="Map&lt;String,Object&gt;" line="575"/>
                <scope line="578">
                    <declaration name="set" type="Set&lt;T&gt;" line="579"/>
                </scope>
                <scope line="589"/>
                <scope line="591"/>
            </method>
            <method name="makeDescriptor" type="Descriptor" line="601">
                <params>
                    <param name="openType" type="OpenType<T>"/>
                    <param name="defaultValue" type="T"/>
                    <param name="legalValues" type="Set<T>"/>
                    <param name="minValue" type="Comparable<T>"/>
                    <param name="maxValue" type="Comparable<T>"/>
                </params>
                <declaration name="legals" type="T[]" line="602"/>
                <scope line="605"/>
            </method>
            <method name="valueFrom" type="T" line="613">
                <params>
                    <param name="d" type="Descriptor"/>
                    <param name="name" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <declaration name="x" type="Object" line="614"/>
                <scope line="617"/>
                <scope line="619">
                    <declaration name="msg" type="String" line="620"/>
                </scope>
            </method>
            <method name="valuesFrom" type="Set<T>" line="628">
                <params>
                    <param name="d" type="Descriptor"/>
                    <param name="name" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <declaration name="x" type="Object" line="629"/>
                <declaration name="coll" type="Collection&lt;?&gt;" line="632"/>
                <scope line="633">
                    <declaration name="set" type="Set&lt;?&gt;" line="634"/>
                    <declaration name="asis" type="boolean" line="635"/>
                    <scope line="636">
                        <scope line="637"/>
                    </scope>
                </scope>
                <scope line="645"/>
                <scope line="647">
                    <declaration name="msg" type="String" line="648"/>
                </scope>
                <declaration name="result" type="Set&lt;T&gt;" line="654"/>
            </method>
            <method name="comparableValueFrom" type="Comparable<?>" line="661">
                <params>
                    <param name="d" type="Descriptor"/>
                    <param name="name" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <declaration name="t" type="T" line="662"/>
                <declaration name="msg" type="String" line="665"/>
            </method>
            <method name="convertFrom" type="T" line="671">
                <params>
                    <param name="x" type="Object"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <scope line="672">
                    <declaration name="t" type="T" line="673"/>
                </scope>
            </method>
            <method name="convertFromStrings" type="T" line="679">
                <params>
                    <param name="x" type="Object"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <declaration name="msg" type="String" line="684"/>
            </method>
            <method name="convertFromString" type="T" line="690">
                <params>
                    <param name="s" type="String"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <comment line="696">
                    can&apos;t happen                    
                </comment>
                <comment line="699">
                    Look for: public static T valueOf(String)                    
                </comment>
                <comment line="719">
                    Look for: public T(String)                    
                </comment>
                <declaration name="c" type="Class&lt;T&gt;" line="691"/>
                <scope line="692"/>
                <scope line="694"/>
                <declaration name="valueOf" type="Method" line="699"/>
                <scope line="700"/>
                <scope line="705"/>
                <scope line="708">
                    <scope line="709"/>
                    <scope line="711">
                        <declaration name="msg" type="String" line="712"/>
                    </scope>
                </scope>
                <declaration name="con" type="Constructor&lt;T&gt;" line="719"/>
                <scope line="720"/>
                <scope line="722"/>
                <scope line="725">
                    <scope line="726"/>
                    <scope line="728">
                        <declaration name="msg" type="String" line="729"/>
                    </scope>
                </scope>
            </method>
            <method name="convertFromStringArray" type="T" line="747">
                <params>
                    <param name="x" type="Object"/>
                    <param name="openType" type="OpenType<T>"/>
                </params>
                <comment line="764">
                    can&apos;t happen                    
                </comment>
                <comment line="781">
                    can&apos;t happen                    
                </comment>
                <comment line="788">
                    String or String[] etc                    
                </comment>
                <declaration name="arrayType" type="ArrayType&lt;?&gt;" line="748"/>
                <declaration name="baseType" type="OpenType&lt;?&gt;" line="749"/>
                <declaration name="dim" type="int" line="750"/>
                <declaration name="squareBrackets" type="String" line="751"/>
                <declaration name="stringArrayClass" type="Class&lt;?&gt;" line="754"/>
                <declaration name="targetArrayClass" type="Class&lt;?&gt;" line="755"/>
                <scope line="756"/>
                <scope line="762"/>
                <scope line="765">
                    <declaration name="msg" type="String" line="766"/>
                </scope>
                <declaration name="componentOpenType" type="OpenType&lt;?&gt;" line="772"/>
                <scope line="775">
                    <scope line="776"/>
                    <scope line="778"/>
                </scope>
                <declaration name="n" type="int" line="783"/>
                <declaration name="targetArray" type="Object[]" line="784"/>
                <scope line="786">
                    <declaration name="stringish" type="Object" line="787"/>
                    <declaration name="converted" type="Object" line="788"/>
                </scope>
            </method>
            <method name="cast" type="T" line="796">
                <params>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="800">
                Returns the open type for the values of the attribute described
                  by this {@code OpenMBeanAttributeInfoSupport} instance.                
            </javadoc>
            <method name="getOpenType" type="OpenType<?>" line="804"/>
            <javadoc line="808">
                Returns the default value for the attribute described by this{@code OpenMBeanAttributeInfoSupport} instance, if specified,
                  or {@code null} otherwise.                
            </javadoc>
            <method name="getDefaultValue" type="Object" line="813">
                <comment line="816">
                    Special case for ArrayType and TabularType
                     [JF] TODO: clone it so that it cannot be altered,
                     [JF] TODO: if we decide to support defaultValue as an array itself.
                     [JF] As of today (oct 2000) it is not supported so
                     defaultValue is null for arrays. Nothing to do.                    
                </comment>
            </method>
            <javadoc line="824">
                Returns an unmodifiable Set of legal values for the attribute
                  described by this {@code OpenMBeanAttributeInfoSupport}instance, if specified, or {@code null} otherwise.                
            </javadoc>
            <method name="getLegalValues" type="Set<?>" line="829">
                <comment line="832">
                    Special case for ArrayType and TabularType
                     [JF] TODO: clone values so that they cannot be altered,
                     [JF] TODO: if we decide to support LegalValues as an array itself.
                     [JF] As of today (oct 2000) it is not supported so
                     legalValues is null for arrays. Nothing to do.                    
                </comment>
                <comment line="838">
                    Returns our legalValues Set (set was constructed unmodifiable)                    
                </comment>
            </method>
            <javadoc line="841">
                Returns the minimal value for the attribute described by this{@code OpenMBeanAttributeInfoSupport} instance, if specified,
                  or {@code null} otherwise.                
            </javadoc>
            <method name="getMinValue" type="Comparable<?>" line="846">
                <comment line="849">
                    Note: only comparable values have a minValue,
                     so that&apos;s not the case of arrays and tabulars (always null).                    
                </comment>
            </method>
            <javadoc line="854">
                Returns the maximal value for the attribute described by this{@code OpenMBeanAttributeInfoSupport} instance, if specified,
                  or {@code null} otherwise.                
            </javadoc>
            <method name="getMaxValue" type="Comparable<?>" line="859">
                <comment line="862">
                    Note: only comparable values have a maxValue,
                     so that&apos;s not the case of arrays and tabulars (always null).                    
                </comment>
            </method>
            <javadoc line="867">
                Returns {@code true} if this {@codeOpenMBeanAttributeInfoSupport} instance specifies a non-null
                  default value for the described attribute, {@code false}otherwise.                
            </javadoc>
            <method name="hasDefaultValue" type="boolean" line="873"/>
            <javadoc line="878">
                Returns {@code true} if this {@codeOpenMBeanAttributeInfoSupport} instance specifies a non-null
                  set of legal values for the described attribute, {@code false}otherwise.                
            </javadoc>
            <method name="hasLegalValues" type="boolean" line="884"/>
            <javadoc line="889">
                Returns {@code true} if this {@codeOpenMBeanAttributeInfoSupport} instance specifies a non-null
                  minimal value for the described attribute, {@code false}otherwise.                
            </javadoc>
            <method name="hasMinValue" type="boolean" line="895"/>
            <javadoc line="900">
                Returns {@code true} if this {@codeOpenMBeanAttributeInfoSupport} instance specifies a non-null
                  maximal value for the described attribute, {@code false}otherwise.                
            </javadoc>
            <method name="hasMaxValue" type="boolean" line="906"/>
            <javadoc line="912">
                Tests whether {@code obj} is a valid value for the attribute
                  described by this {@code OpenMBeanAttributeInfoSupport}instance.                
                <param>
                    obj the object to be tested.                    
                </param>
                <return>
                    {@code true} if {@code obj} is a valid value for
                      the parameter described by this {@codeOpenMBeanAttributeInfoSupport} instance, {@code false}otherwise.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="924">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="isValue" type="boolean" line="929">
                <params>
                    <param name="info" type="OpenMBeanParameterInfo"/>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="944">
                Compares the specified {@code obj} parameter with this {@codeOpenMBeanAttributeInfoSupport} instance for equality.
                  &lt;p&gt;
                  Returns {@code true} if and only if all of the following statements are true:
                  &lt;ul&gt;
                  &lt;li&gt;{@code obj} is non null,&lt;/li&gt;
                  &lt;li&gt;{@code obj} also implements the {@code OpenMBeanAttributeInfo} interface,&lt;/li&gt;
                  &lt;li&gt;their names are equal&lt;/li&gt;
                  &lt;li&gt;their open types are equal&lt;/li&gt;
                  &lt;li&gt;their access properties (isReadable, isWritable and isIs) are equal&lt;/li&gt;
                  &lt;li&gt;their default, min, max and legal values are equal.&lt;/li&gt;
                  &lt;/ul&gt;
                  This ensures that this {@code equals} method works properly for{@code obj} parameters which are different implementations of
                  the {@code OpenMBeanAttributeInfo} interface.
                  &lt;p&gt;If {@code obj} also implements {@link DescriptorRead}, then its{@link DescriptorRead#getDescriptor() getDescriptor()} method must
                  also return the same value as for this object.&lt;/p&gt;                
                <param>
                    obj the object to be compared for equality with this{@code OpenMBeanAttributeInfoSupport} instance.                    
                </param>
                <return>
                    {@code true} if the specified object is equal to this{@code OpenMBeanAttributeInfoSupport} instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="971">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="OpenMBeanAttributeInfo" line="975"/>
            </method>
            <method name="equal" type="boolean" line="984">
                <params>
                    <param name="x1" type="OpenMBeanParameterInfo"/>
                    <param name="x2" type="OpenMBeanParameterInfo"/>
                </params>
                <scope line="985">
                    <declaration name="d1" type="Descriptor" line="988"/>
                    <declaration name="d2" type="Descriptor" line="989"/>
                </scope>
            </method>
            <javadoc line="1012">
                &lt;p&gt;Returns the hash code value for this {@codeOpenMBeanAttributeInfoSupport} instance.&lt;/p&gt;
                  &lt;p&gt;The hash code of an {@code OpenMBeanAttributeInfoSupport}instance is the sum of the hash codes of all elements of
                  information used in {@code equals} comparisons (ie: its name,
                  its &lt;i&gt;open type&lt;/i&gt;, its default, min, max and legal
                  values, and its Descriptor).
                  &lt;p&gt;This ensures that {@code t1.equals(t2)} implies that {@codet1.hashCode()==t2.hashCode()} for any two {@codeOpenMBeanAttributeInfoSupport} instances {@code t1} and {@codet2}, as required by the general contract of the method {@link Object#hashCode() Object.hashCode()}.
                  &lt;p&gt;However, note that another instance of a class implementing
                  the {@code OpenMBeanAttributeInfo} interface may be equal to
                  this {@code OpenMBeanAttributeInfoSupport} instance as defined
                  by {@link #equals(java.lang.Object)}, but may have a different
                  hash code if it is calculated differently.
                  &lt;p&gt;As {@code OpenMBeanAttributeInfoSupport} instances are
                  immutable, the hash code for this instance is calculated once,
                  on the first call to {@code hashCode}, and then the same value
                  is returned for subsequent calls.                
                <return>
                    the hash code value for this {@codeOpenMBeanAttributeInfoSupport} instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="1042">
                <comment line="1045">
                    Calculate the hash code value if it has not yet been done
                     (ie 1st call to hashCode())                    
                </comment>
                <comment line="1051">
                    return always the same hash code for this instance (immutable)                    
                </comment>
            </method>
            <method name="hashCode" type="int" line="1055">
                <params>
                    <param name="info" type="OpenMBeanParameterInfo"/>
                </params>
                <declaration name="value" type="int" line="1056"/>
            </method>
            <javadoc line="1072">
                Returns a string representation of this{@code OpenMBeanAttributeInfoSupport} instance.
                  &lt;p&gt;
                  The string representation consists of the name of this class (i.e.{@code javax.management.openmbean.OpenMBeanAttributeInfoSupport}),
                  the string representation of the name and open type of the
                  described parameter, the string representation of its
                  default, min, max and legal values and the string
                  representation of its descriptor.
                  &lt;p&gt;As {@code OpenMBeanAttributeInfoSupport} instances are
                  immutable, the string representation for this instance is
                  calculated once, on the first call to {@code toString}, and
                  then the same value is returned for subsequent calls.                
                <return>
                    a string representation of this{@code OpenMBeanAttributeInfoSupport} instance.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="1091">
                <comment line="1094">
                    Calculate the string value if it has not yet been done
                     (ie 1st call to toString())                    
                </comment>
                <comment line="1100">
                    return always the same string representation for this
                     instance (immutable)                    
                </comment>
            </method>
            <method name="toString" type="String" line="1105">
                <params>
                    <param name="info" type="OpenMBeanParameterInfo"/>
                </params>
                <declaration name="d" type="Descriptor" line="1106"/>
            </method>
        </class>
    </source>