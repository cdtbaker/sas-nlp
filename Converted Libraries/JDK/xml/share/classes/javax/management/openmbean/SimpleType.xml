<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.ObjectStreamException"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Date"/>
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="javax.management.ObjectName"/>
        <class name="SimpleType" line="10">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <extends class="OpenType">
                <type_params>
                    <type_param name="T"/>
                </type_params>
            </extends>
            <javadoc line="10">
                The &lt;code&gt;SimpleType&lt;/code&gt; class is the &lt;i&gt;open type&lt;/i&gt; class whose instances describe
                  all &lt;i&gt;open data&lt;/i&gt; values which are neither arrays,
                  nor {@link CompositeData &lt;code&gt;CompositeData&lt;/code&gt;} values,
                  nor {@link TabularData &lt;code&gt;TabularData&lt;/code&gt;} values.
                  It predefines all its possible instances as static fields, and has no public constructor.
                  &lt;p&gt;
                  Given a &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;i&gt;className&lt;/i&gt;,
                  the internal fields corresponding to the name and description of this &lt;code&gt;SimpleType&lt;/code&gt; instance
                  are also set to &lt;i&gt;className&lt;/i&gt;.
                  In other words, its methods &lt;code&gt;getClassName&lt;/code&gt;, &lt;code&gt;getTypeName&lt;/code&gt; and &lt;code&gt;getDescription&lt;/code&gt;
                  all return the same string value &lt;i&gt;className&lt;/i&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="25"/>
            <declaration name="VOID" type="SimpleType&lt;Void&gt;" line="26"/>
            <javadoc line="26">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Void&lt;/code&gt;.                
            </javadoc>
            <declaration name="BOOLEAN" type="SimpleType&lt;Boolean&gt;" line="31"/>
            <javadoc line="31">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Boolean&lt;/code&gt;.                
            </javadoc>
            <declaration name="CHARACTER" type="SimpleType&lt;Character&gt;" line="36"/>
            <javadoc line="36">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Character&lt;/code&gt;.                
            </javadoc>
            <declaration name="BYTE" type="SimpleType&lt;Byte&gt;" line="41"/>
            <javadoc line="41">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Byte&lt;/code&gt;.                
            </javadoc>
            <declaration name="SHORT" type="SimpleType&lt;Short&gt;" line="46"/>
            <javadoc line="46">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Short&lt;/code&gt;.                
            </javadoc>
            <declaration name="INTEGER" type="SimpleType&lt;Integer&gt;" line="51"/>
            <javadoc line="51">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Integer&lt;/code&gt;.                
            </javadoc>
            <declaration name="LONG" type="SimpleType&lt;Long&gt;" line="56"/>
            <javadoc line="56">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Long&lt;/code&gt;.                
            </javadoc>
            <declaration name="FLOAT" type="SimpleType&lt;Float&gt;" line="61"/>
            <javadoc line="61">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Float&lt;/code&gt;.                
            </javadoc>
            <declaration name="DOUBLE" type="SimpleType&lt;Double&gt;" line="66"/>
            <javadoc line="66">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.Double&lt;/code&gt;.                
            </javadoc>
            <declaration name="STRING" type="SimpleType&lt;String&gt;" line="71"/>
            <javadoc line="71">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.lang.String&lt;/code&gt;.                
            </javadoc>
            <declaration name="BIGDECIMAL" type="SimpleType&lt;BigDecimal&gt;" line="76"/>
            <javadoc line="76">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.                
            </javadoc>
            <declaration name="BIGINTEGER" type="SimpleType&lt;BigInteger&gt;" line="81"/>
            <javadoc line="81">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.math.BigInteger&lt;/code&gt;.                
            </javadoc>
            <declaration name="DATE" type="SimpleType&lt;Date&gt;" line="86"/>
            <javadoc line="86">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;java.util.Date&lt;/code&gt;.                
            </javadoc>
            <declaration name="OBJECTNAME" type="SimpleType&lt;ObjectName&gt;" line="91"/>
            <javadoc line="91">
                The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose
                  Java class name is &lt;code&gt;javax.management.ObjectName&lt;/code&gt;.                
            </javadoc>
            <declaration name="typeArray" type="SimpleType&lt;?&gt;[]" line="96"/>
            <declaration name="myHashCode" type="Integer" line="97"/>
            <declaration name="myToString" type="String" line="98"/>
            <method name="SimpleType" type="constructor" line="99">
                <params>
                    <param name="valueClass" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="102">
                Tests whether &lt;var&gt;obj&lt;/var&gt; is a value for this
                  &lt;code&gt;SimpleType&lt;/code&gt; instance.  &lt;p&gt; This method returns
                  &lt;code&gt;true&lt;/code&gt; if and only if &lt;var&gt;obj&lt;/var&gt; is not null and
                  &lt;var&gt;obj&lt;/var&gt;&apos;s class name is the same as the className field
                  defined for this &lt;code&gt;SimpleType&lt;/code&gt; instance (ie the class
                  name returned by the {@link OpenType#getClassName()getClassName} method).                
                <param>
                    obj the object to be tested.                    
                </param>
                <return>
                    <code>true</code> if <var>obj</var> is a value for this
                      <code>SimpleType</code> instance.                    
                </return>
            </javadoc>
            <method name="isValue" type="boolean" line="113">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <scope line="114"/>
            </method>
            <javadoc line="119">
                Compares the specified &lt;code&gt;obj&lt;/code&gt; parameter with this &lt;code&gt;SimpleType&lt;/code&gt; instance for equality.
                  &lt;p&gt;
                  Two &lt;code&gt;SimpleType&lt;/code&gt; instances are equal if and only if their{@link OpenType#getClassName() getClassName} methods return the same value.                
                <param>
                    obj  the object to be compared for equality with this <code>SimpleType</code> instance;
                      if <var>obj</var> is <code>null</code> or is not an instance of the class <code>SimpleType</code>,
                      <code>equals</code> returns <code>false</code>.                    
                </param>
                <return>
                    <code>true</code> if the specified object is equal to this <code>SimpleType</code> instance.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="128">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="other" type="SimpleType&lt;?&gt;" line="130"/>
            </method>
            <javadoc line="133">
                Returns the hash code value for this &lt;code&gt;SimpleType&lt;/code&gt; instance.
                  The hash code of a &lt;code&gt;SimpleType&lt;/code&gt; instance is the the hash code of
                  the string value returned by the {@link OpenType#getClassName() getClassName} method.
                  &lt;p&gt;
                  As &lt;code&gt;SimpleType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once,
                  on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.                
                <return>
                    the hash code value for this <code>SimpleType</code> instance                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="142">
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Returns a string representation of this &lt;code&gt;SimpleType&lt;/code&gt; instance.
                  &lt;p&gt;
                  The string representation consists of
                  the name of this class (ie &lt;code&gt;javax.management.openmbean.SimpleType&lt;/code&gt;) and the type name
                  for this instance (which is the java class name of the values this &lt;code&gt;SimpleType&lt;/code&gt; instance represents).
                  &lt;p&gt;
                  As &lt;code&gt;SimpleType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once,
                  on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.                
                <return>
                    a string representation of this <code>SimpleType</code> instance                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="159">
                <scope line="160"/>
            </method>
            <declaration name="canonicalTypes" type="Map&lt;SimpleType&lt;?&gt;,SimpleType&lt;?&gt;&gt;" line="165"/>
            <scope line="166">
                <scope line="167">
                    <declaration name="type" type="SimpleType&lt;?&gt;" line="168"/>
                </scope>
            </scope>
            <javadoc line="172">
                Replace an object read from an {@link java.io.ObjectInputStream} with the unique instance for that
                  value.                
                <return>
                    the replacement object.                    
                </return>
                <exception>
                    ObjectStreamException if the read object cannot be
                      resolved.                    
                </exception>
            </javadoc>
            <method name="readResolve" type="Object" line="179">
                <declaration name="canonical" type="SimpleType&lt;?&gt;" line="180"/>
                <scope line="181"/>
            </method>
        </class>
    </source>