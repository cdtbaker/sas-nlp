<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.openmbean">
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <class name="OpenType" line="14">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <implements interface="Serializable"/>
            <javadoc line="14">
                The &lt;code&gt;OpenType&lt;/code&gt; class is the parent abstract class of all classes which describe the actual &lt;i&gt;open type&lt;/i&gt;
                  of open data values.
                  &lt;p&gt;
                  An &lt;i&gt;open type&lt;/i&gt; is defined by:
                  &lt;ul&gt;
                  &lt;li&gt;the fully qualified Java class name of the open data values this type describes;
                  note that only a limited set of Java classes is allowed for open data values
                  (see {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}),&lt;/li&gt;
                  &lt;li&gt;its name,&lt;/li&gt;
                  &lt;li&gt;its description.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    <T>
                      the Java type that instances described by this type must
                      have.  For example, {@link SimpleType#INTEGER} is a {@codeSimpleType<Integer>} which is a subclass of {@code OpenType<Integer>},
                      meaning that an attribute, parameter, or return value that is described
                      as a {@code SimpleType.INTEGER} must have Java type{@link Integer}.                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="34"/>
            <declaration name="ALLOWED_CLASSNAMES_LIST" type="List&lt;String&gt;" line="35"/>
            <javadoc line="35">
                List of the fully qualified names of the Java classes allowed for open
                  data values. A multidimensional array of any one of these classes or
                  their corresponding primitive types is also an allowed class for open
                  data values.
                  &lt;pre&gt;ALLOWED_CLASSNAMES_LIST = {
                  &quot;java.lang.Void&quot;,
                  &quot;java.lang.Boolean&quot;,
                  &quot;java.lang.Character&quot;,
                  &quot;java.lang.Byte&quot;,
                  &quot;java.lang.Short&quot;,
                  &quot;java.lang.Integer&quot;,
                  &quot;java.lang.Long&quot;,
                  &quot;java.lang.Float&quot;,
                  &quot;java.lang.Double&quot;,
                  &quot;java.lang.String&quot;,
                  &quot;java.math.BigDecimal&quot;,
                  &quot;java.math.BigInteger&quot;,
                  &quot;java.util.Date&quot;,
                  &quot;javax.management.ObjectName&quot;,
                  CompositeData.class.getName(),
                  TabularData.class.getName() } ;
                  &lt;/pre&gt;                
            </javadoc>
            <declaration name="ALLOWED_CLASSNAMES" type="String[]" line="60"/>
            <javadoc line="60">
                @deprecated Use {@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST} instead.                
            </javadoc>
            <declaration name="className" type="String" line="64"/>
            <javadoc line="64">
                @serial The fully qualified Java class name of open data values this
                  type describes.                
            </javadoc>
            <declaration name="description" type="String" line="69"/>
            <javadoc line="69">
                @serial The type description (should not be null or empty).                
            </javadoc>
            <declaration name="typeName" type="String" line="73"/>
            <javadoc line="73">
                @serial The name given to this type (should not be null or empty).                
            </javadoc>
            <declaration name="isArray" type="boolean" line="77"/>
            <javadoc line="77">
                Tells if this type describes an array (checked in constructor).                
            </javadoc>
            <declaration name="descriptor" type="Descriptor" line="81"/>
            <javadoc line="81">
                Cached Descriptor for this OpenType, constructed on demand.                
            </javadoc>
            <javadoc line="85">
                Constructs an &lt;code&gt;OpenType&lt;/code&gt; instance (actually a subclass instance as &lt;code&gt;OpenType&lt;/code&gt; is abstract),
                  checking for the validity of the given parameters.
                  The validity constraints are described below for each parameter.
                  &lt;br&gt;&amp;nbsp;                
                <param>
                    className  The fully qualified Java class name of the open data values this open type describes.
                      The valid Java class names allowed for open data values are listed in{@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.
                      A multidimensional array of any one of these classes
                      or their corresponding primitive types is also an allowed class,
                      in which case the class name follows the rules defined by the method{@link Class#getName() getName()} of <code>java.lang.Class</code>.
                      For example, a 3-dimensional array of Strings has for class name
                      &quot;<code>[[[Ljava.lang.String;</code>&quot; (without the quotes).
                      <br>&nbsp;                    
                </param>
                <param>
                    typeName  The name given to the open type this instance represents; cannot be a null or empty string.
                      <br>&nbsp;                    
                </param>
                <param>
                    description  The human readable description of the open type this instance represents;
                      cannot be a null or empty string.
                      <br>&nbsp;                    
                </param>
                <throws>
                    IllegalArgumentException  if <var>className</var>, <var>typeName</var> or <var>description</var>
                      is a null or empty string
                      <br>&nbsp;                    
                </throws>
                <throws>
                    OpenDataException  if <var>className</var> is not one of the allowed Java class names for open data                    
                </throws>
            </javadoc>
            <method name="OpenType" type="constructor" line="108">
                <params>
                    <param name="className" type="String"/>
                    <param name="typeName" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <method name="OpenType" type="constructor" line="115">
                <params>
                    <param name="className" type="String"/>
                    <param name="typeName" type="String"/>
                    <param name="description" type="String"/>
                    <param name="isArray" type="boolean"/>
                </params>
            </method>
            <method name="checkClassNameOverride" type="void" line="121">
                <scope line="123">
                    <declaration name="getExtendOpenTypes" type="GetPropertyAction" line="124"/>
                    <scope line="125"/>
                </scope>
            </method>
            <method name="overridesGetClassName" type="boolean" line="130">
                <params>
                    <param name="c" type="Class<?>"/>
                </params>
                <anonymous_class line="131">
                    <method name="run" type="Boolean" line="132">
                        <scope line="133"/>
                        <scope line="136"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="validClassName" type="String" line="143">
                <params>
                    <param name="className" type="String"/>
                </params>
                <declaration name="n" type="int" line="145"/>
                <scope line="146"/>
                <declaration name="eltClassName" type="String" line="149"/>
                <declaration name="isPrimitiveArray" type="boolean" line="150"/>
                <scope line="151">
                    <scope line="152"/>
                    <scope line="155"/>
                    <scope line="159"/>
                </scope>
                <scope line="163"/>
                <declaration name="ok" type="boolean" line="166"/>
                <scope line="167"/>
                <scope line="170"/>
                <scope line="173"/>
            </method>
            <method name="valid" type="String" line="178">
                <params>
                    <param name="argName" type="String"/>
                    <param name="argValue" type="String"/>
                </params>
            </method>
            <method name="getDescriptor" type="Descriptor" line="182">
                <scope line="183"/>
            </method>
            <javadoc line="188">
                Returns the fully qualified Java class name of the open data values
                  this open type describes.
                  The only possible Java class names for open data values are listed in{@link #ALLOWED_CLASSNAMES_LIST ALLOWED_CLASSNAMES_LIST}.
                  A multidimensional array of any one of these classes or their
                  corresponding primitive types is also an allowed class,
                  in which case the class name follows the rules defined by the method{@link Class#getName() getName()} of &lt;code&gt;java.lang.Class&lt;/code&gt;.
                  For example, a 3-dimensional array of Strings has for class name
                  &amp;quot;&lt;code&gt;[[[Ljava.lang.String;&lt;/code&gt;&amp;quot; (without the quotes),
                  a 3-dimensional array of Integers has for class name
                  &amp;quot;&lt;code&gt;[[[Ljava.lang.Integer;&lt;/code&gt;&amp;quot; (without the quotes),
                  and a 3-dimensional array of int has for class name
                  &amp;quot;&lt;code&gt;[[[I&lt;/code&gt;&amp;quot; (without the quotes)                
                <return>
                    the class name.                    
                </return>
            </javadoc>
            <method name="getClassName" type="String" line="203"/>
            <method name="safeGetClassName" type="String" line="206"/>
            <javadoc line="209">
                Returns the name of this &lt;code&gt;OpenType&lt;/code&gt; instance.                
                <return>
                    the type name.                    
                </return>
            </javadoc>
            <method name="getTypeName" type="String" line="213"/>
            <javadoc line="216">
                Returns the text description of this &lt;code&gt;OpenType&lt;/code&gt; instance.                
                <return>
                    the description.                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="220"/>
            <javadoc line="223">
                Returns &lt;code&gt;true&lt;/code&gt; if the open data values this open
                  type describes are arrays, &lt;code&gt;false&lt;/code&gt; otherwise.                
                <return>
                    true if this is an array type.                    
                </return>
            </javadoc>
            <method name="isArray" type="boolean" line="228"/>
            <method name="isValue" type="boolean" line="231"/>
            <javadoc line="231">
                Tests whether &lt;var&gt;obj&lt;/var&gt; is a value for this open type.                
                <param>
                    obj the object to be tested for validity.                    
                </param>
                <return>
                    <code>true</code> if <var>obj</var> is a value for this
                      open type, <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <javadoc line="238">
                Tests whether values of the given type can be assigned to this open type.
                  The default implementation of this method returns true only if the
                  types are equal.                
                <param>
                    ot the type to be tested.                    
                </param>
                <return>
                    true if {@code ot} is assignable to this open type.                    
                </return>
            </javadoc>
            <method name="isAssignableFrom" type="boolean" line="245">
                <params>
                    <param name="ot" type="OpenType<?>"/>
                </params>
            </method>
            <method name="equals" type="boolean" line="248"/>
            <javadoc line="248">
                Compares the specified &lt;code&gt;obj&lt;/code&gt; parameter with this
                  open type instance for equality.                
                <param>
                    obj the object to compare to.                    
                </param>
                <return>
                    true if this object and <code>obj</code> are equal.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="255"/>
            <method name="toString" type="String" line="256"/>
            <javadoc line="256">
                Returns a string representation of this open type instance.                
                <return>
                    the string representation.                    
                </return>
            </javadoc>
            <javadoc line="261">
                Deserializes an {@link OpenType} from an {@link java.io.ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="264">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="fields" type="ObjectInputStream.GetField" line="266"/>
                <declaration name="classNameField" type="String" line="267"/>
                <declaration name="descriptionField" type="String" line="268"/>
                <declaration name="typeNameField" type="String" line="269"/>
                <scope line="270"/>
                <scope line="275">
                    <declaration name="e2" type="IOException" line="276"/>
                </scope>
            </method>
        </class>
    </source>