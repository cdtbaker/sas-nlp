<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.security.Permission"/>
        <class name="MBeanPermission" line="32">
            <extends class="Permission"/>
            <javadoc line="32">
                &lt;p&gt;Permission controlling access to MBeanServer operations.  If a
                  security manager has been set using {@link System#setSecurityManager}, most operations on the MBean Server
                  require that the caller&apos;s permissions imply an MBeanPermission
                  appropriate for the operation.  This is described in detail in the
                  documentation for the {@link MBeanServer} interface.&lt;/p&gt;
                  &lt;p&gt;As with other {@link Permission} objects, an MBeanPermission can
                  represent either a permission that you &lt;em&gt;have&lt;/em&gt; or a
                  permission that you &lt;em&gt;need&lt;/em&gt;.  When a sensitive operation is
                  being checked for permission, an MBeanPermission is constructed
                  representing the permission you need.  The operation is only
                  allowed if the permissions you have {@linkplain #implies imply} the
                  permission you need.&lt;/p&gt;
                  &lt;p&gt;An MBeanPermission contains four items of information:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;p&gt;The &lt;em&gt;action&lt;/em&gt;.  For a permission you need,
                  this is one of the actions in the list &lt;a
                  href=&quot;#action-list&quot;&gt;below&lt;/a&gt;.  For a permission you have, this is
                  a comma-separated list of those actions, or &lt;code&gt;&lt;/code&gt;,
                  representing all actions.&lt;/p&gt;
                  &lt;p&gt;The action is returned by {@link #getActions()}.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;The &lt;em&gt;class name&lt;/em&gt;.&lt;/p&gt;
                  &lt;p&gt;For a permission you need, this is the class name of an MBean
                  you are accessing, as returned by {@link MBeanServer#getMBeanInfo(ObjectName)MBeanServer.getMBeanInfo(name)}.{@link MBeanInfo#getClassName()getClassName()}.  Certain operations do not reference a class name,
                  in which case the class name is null.&lt;/p&gt;
                  &lt;p&gt;For a permission you have, this is either empty or a &lt;em&gt;class
                  name pattern&lt;/em&gt;.  A class name pattern is a string following the
                  Java conventions for dot-separated class names.  It may end with
                  &quot;&lt;code&gt;.&lt;/code&gt;&quot; meaning that the permission grants access to any
                  class that begins with the string preceding &quot;&lt;code&gt;.&lt;/code&gt;&quot;.  For
                  instance, &quot;&lt;code&gt;javax.management.&lt;/code&gt;&quot; grants access to
                  &lt;code&gt;javax.management.MBeanServerDelegate&lt;/code&gt; and
                  &lt;code&gt;javax.management.timer.Timer&lt;/code&gt;, among other classes.&lt;/p&gt;
                  &lt;p&gt;A class name pattern can also be empty or the single character
                  &quot;&lt;code&gt;&lt;/code&gt;&quot;, both of which grant access to any class.&lt;/p&gt;
                  &lt;li&gt;&lt;p&gt;The &lt;em&gt;member&lt;/em&gt;.&lt;/p&gt;
                  &lt;p&gt;For a permission you need, this is the name of the attribute or
                  operation you are accessing.  For operations that do not reference
                  an attribute or operation, the member is null.&lt;/p&gt;
                  &lt;p&gt;For a permission you have, this is either the name of an attribute
                  or operation you can access, or it is empty or the single character
                  &quot;&lt;code&gt;&lt;/code&gt;&quot;, both of which grant access to any member.&lt;/p&gt;
                  &lt;li id=&quot;MBeanName&quot;&gt;&lt;p&gt;The &lt;em&gt;object name&lt;/em&gt;.&lt;/p&gt;
                  &lt;p&gt;For a permission you need, this is the {@link ObjectName} of the
                  MBean you are accessing.  For operations that do not reference a
                  single MBean, it is null.  It is never an object name pattern.&lt;/p&gt;
                  &lt;p&gt;For a permission you have, this is the {@link ObjectName} of the
                  MBean or MBeans you can access.  It may be an object name pattern
                  to grant access to all MBeans whose names match the pattern.  It
                  may also be empty, which grants access to all MBeans whatever their
                  name.&lt;/p&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;If you have an MBeanPermission, it allows operations only if all
                  four of the items match.&lt;/p&gt;
                  &lt;p&gt;The class name, member, and object name can be written together
                  as a single string, which is the &lt;em&gt;name&lt;/em&gt; of this permission.
                  The name of the permission is the string returned by {@link Permission#getName() getName()}.  The format of the string is:&lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;code&gt;className#member[objectName]&lt;/code&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;The object name is written using the usual syntax for {@link ObjectName}.  It may contain any legal characters, including
                  &lt;code&gt;]&lt;/code&gt;.  It is terminated by a &lt;code&gt;]&lt;/code&gt; character
                  that is the last character in the string.&lt;/p&gt;
                  &lt;p&gt;One or more of the &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;member&lt;/code&gt;,
                  or &lt;code&gt;objectName&lt;/code&gt; may be omitted.  If the
                  &lt;code&gt;member&lt;/code&gt; is omitted, the &lt;code&gt;#&lt;/code&gt; may be too (but
                  does not have to be).  If the &lt;code&gt;objectName&lt;/code&gt; is omitted,
                  the &lt;code&gt;[]&lt;/code&gt; may be too (but does not have to be).  It is
                  not legal to omit all three items, that is to have a &lt;em&gt;name&lt;/em&gt;
                  that is the empty string.&lt;/p&gt;
                  &lt;p&gt;One or more of the &lt;code&gt;className&lt;/code&gt;, &lt;code&gt;member&lt;/code&gt;,
                  or &lt;code&gt;objectName&lt;/code&gt; may be the character &quot;&lt;code&gt;-&lt;/code&gt;&quot;,
                  which is equivalent to a null value.  A null value is implied by
                  any value (including another null value) but does not imply any
                  other value.&lt;/p&gt;
                  &lt;p&gt;&lt;a name=&quot;action-list&quot;&gt;The possible actions are these:&lt;/a&gt;&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;addNotificationListener&lt;/li&gt;
                  &lt;li&gt;getAttribute&lt;/li&gt;
                  &lt;li&gt;getClassLoader&lt;/li&gt;
                  &lt;li&gt;getClassLoaderFor&lt;/li&gt;
                  &lt;li&gt;getClassLoaderRepository&lt;/li&gt;
                  &lt;li&gt;getDomains&lt;/li&gt;
                  &lt;li&gt;getMBeanInfo&lt;/li&gt;
                  &lt;li&gt;getObjectInstance&lt;/li&gt;
                  &lt;li&gt;instantiate&lt;/li&gt;
                  &lt;li&gt;invoke&lt;/li&gt;
                  &lt;li&gt;isInstanceOf&lt;/li&gt;
                  &lt;li&gt;queryMBeans&lt;/li&gt;
                  &lt;li&gt;queryNames&lt;/li&gt;
                  &lt;li&gt;registerMBean&lt;/li&gt;
                  &lt;li&gt;removeNotificationListener&lt;/li&gt;
                  &lt;li&gt;setAttribute&lt;/li&gt;
                  &lt;li&gt;unregisterMBean&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;In a comma-separated list of actions, spaces are allowed before
                  and after each action.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="165"/>
            <declaration name="AddNotificationListener" type="int" line="167"/>
            <javadoc line="167">
                Actions list.                
            </javadoc>
            <declaration name="GetAttribute" type="int" line="171"/>
            <declaration name="GetClassLoader" type="int" line="172"/>
            <declaration name="GetClassLoaderFor" type="int" line="173"/>
            <declaration name="GetClassLoaderRepository" type="int" line="174"/>
            <declaration name="GetDomains" type="int" line="175"/>
            <declaration name="GetMBeanInfo" type="int" line="176"/>
            <declaration name="GetObjectInstance" type="int" line="177"/>
            <declaration name="Instantiate" type="int" line="178"/>
            <declaration name="Invoke" type="int" line="179"/>
            <declaration name="IsInstanceOf" type="int" line="180"/>
            <declaration name="QueryMBeans" type="int" line="181"/>
            <declaration name="QueryNames" type="int" line="182"/>
            <declaration name="RegisterMBean" type="int" line="183"/>
            <declaration name="RemoveNotificationListener" type="int" line="184"/>
            <declaration name="SetAttribute" type="int" line="185"/>
            <declaration name="UnregisterMBean" type="int" line="186"/>
            <declaration name="NONE" type="int" line="188"/>
            <javadoc line="188">
                No actions.                
            </javadoc>
            <declaration name="ALL" type="int" line="193"/>
            <javadoc line="193">
                All actions.                
            </javadoc>
            <declaration name="actions" type="String" line="215"/>
            <javadoc line="215">
                The actions string.                
            </javadoc>
            <declaration name="mask" type="int" line="220"/>
            <javadoc line="220">
                The actions mask.                
            </javadoc>
            <declaration name="classNamePrefix" type="String" line="225"/>
            <javadoc line="225">
                The classname prefix that must match.  If null, is implied by any
                  classNamePrefix but does not imply any non-null classNamePrefix.                
            </javadoc>
            <declaration name="classNameExactMatch" type="boolean" line="231"/>
            <javadoc line="231">
                True if classNamePrefix must match exactly.  Otherwise, the
                  className being matched must start with classNamePrefix.                
            </javadoc>
            <declaration name="member" type="String" line="237"/>
            <javadoc line="237">
                The member that must match.  If null, is implied by any member
                  but does not imply any non-null member.                
            </javadoc>
            <declaration name="objectName" type="ObjectName" line="243"/>
            <javadoc line="243">
                The objectName that must match.  If null, is implied by any
                  objectName but does not imply any non-null objectName.                
            </javadoc>
            <javadoc line="249">
                Parse &lt;code&gt;actions&lt;/code&gt; parameter.                
            </javadoc>
            <method name="parseActions" type="void" line="252">
                <declaration name="mask" type="int" line="254"/>
            </method>
            <javadoc line="272">
                Parse &lt;code&gt;name&lt;/code&gt; parameter.                
            </javadoc>
            <method name="parseName" type="void" line="275">
                <comment line="287">
                    The name looks like &quot;class#member[objectname]&quot;.  We subtract
                    elements from the right as we parse, so after parsing the
                    objectname we have &quot;class#member&quot; and after parsing the                    
                </comment>
                <comment line="292">
                    Parse ObjectName                    
                </comment>
                <comment line="296">
                    If &quot;[on]&quot; missing then ObjectName(&quot;*:*&quot;)                    
                </comment>
                <comment line="307">
                    Create ObjectName                    
                </comment>
                <comment line="310">
                    If &quot;[]&quot; then ObjectName(&quot;*:*&quot;)                    
                </comment>
                <comment line="331">
                    Parse member                    
                </comment>
                <comment line="343">
                    Parse className                    
                </comment>
                <declaration name="name" type="String" line="276"/>
                <declaration name="openingBracket" type="int" line="293"/>
                <scope line="294"/>
                <scope line="298">
                    <scope line="299"/>
                    <scope line="305">
                        <scope line="308">
                            <declaration name="on" type="String" line="311"/>
                        </scope>
                        <scope line="319"/>
                    </scope>
                </scope>
                <declaration name="poundSign" type="int" line="332"/>
                <scope line="336">
                    <declaration name="memberName" type="String" line="337"/>
                </scope>
            </method>
            <javadoc line="347">
                Assign fields based on className, member, and objectName
                  parameters.                
            </javadoc>
            <method name="initName" type="void" line="352">
                <params>
                    <param name="className" type="String"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                </params>
            </method>
            <method name="setClassName" type="void" line="358">
                <params>
                    <param name="className" type="String"/>
                </params>
                <comment line="367">
                    Note that we include the &quot;.&quot; in the required prefix                    
                </comment>
                <scope line="359"/>
                <scope line="362"/>
                <scope line="365"/>
                <scope line="369"/>
            </method>
            <method name="setMember" type="void" line="375">
                <params>
                    <param name="member" type="String"/>
                </params>
            </method>
            <javadoc line="384">
                &lt;p&gt;Create a new MBeanPermission object with the specified target name
                  and actions.&lt;/p&gt;
                  &lt;p&gt;The target name is of the form
                  &quot;&lt;code&gt;className#member[objectName]&lt;/code&gt;&quot; where each part is
                  optional.  It must not be empty or null.&lt;/p&gt;
                  &lt;p&gt;The actions parameter contains a comma-separated list of the
                  desired actions granted on the target name.  It must not be
                  empty or null.&lt;/p&gt;                
                <param>
                    name the triplet &quot;className#member[objectName]&quot;.                    
                </param>
                <param>
                    actions the action string.                    
                </param>
                <exception>
                    IllegalArgumentException if the &lt;code&gt;name&lt;/code&gt; or
                      &lt;code&gt;actions&lt;/code&gt; is invalid.                    
                </exception>
            </javadoc>
            <method name="MBeanPermission" type="constructor" line="402">
                <params>
                    <param name="name" type="String"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <javadoc line="411">
                &lt;p&gt;Create a new MBeanPermission object with the specified target name
                  (class name, member, object name) and actions.&lt;/p&gt;
                  &lt;p&gt;The class name, member and object name parameters define a
                  target name of the form
                  &quot;&lt;code&gt;className#member[objectName]&lt;/code&gt;&quot; where each part is
                  optional.  This will be the result of {@link #getName()} on the
                  resultant MBeanPermission.&lt;/p&gt;
                  &lt;p&gt;The actions parameter contains a comma-separated list of the
                  desired actions granted on the target name.  It must not be
                  empty or null.&lt;/p&gt;                
                <param>
                    className the class name to which this permission applies.
                      May be null or &lt;code&gt;&quot;-&quot;&lt;/code&gt;, which represents a class name
                      that is implied by any class name but does not imply any other
                      class name.                    
                </param>
                <param>
                    member the member to which this permission applies.  May
                      be null or &lt;code&gt;&quot;-&quot;&lt;/code&gt;, which represents a member that is
                      implied by any member but does not imply any other member.                    
                </param>
                <param>
                    objectName the object name to which this permission
                      applies.  May be null, which represents an object name that is
                      implied by any object name but does not imply any other object
                      name.                    
                </param>
                <param>
                    actions the action string.                    
                </param>
            </javadoc>
            <method name="MBeanPermission" type="constructor" line="441">
                <params>
                    <param name="className" type="String"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="actions" type="String"/>
                </params>
            </method>
            <method name="makeName" type="String" line="451">
                <params>
                    <param name="className" type="String"/>
                    <param name="member" type="String"/>
                    <param name="objectName" type="ObjectName"/>
                </params>
                <comment line="465">
                    In the interests of legibility for Permission.toString(), we                    
                </comment>
                <declaration name="name" type="StringBuilder" line="452"/>
            </method>
            <javadoc line="472">
                Returns the &quot;canonical string representation&quot; of the actions. That is,
                  this method always returns present actions in alphabetical order.                
                <return>
                    the canonical string representation of the actions.                    
                </return>
            </javadoc>
            <method name="getActions" type="String" line="478"/>
            <javadoc line="486">
                Returns the &quot;canonical string representation&quot;
                  of the actions from the mask.                
            </javadoc>
            <method name="getActions" type="String" line="490">
                <params>
                    <param name="mask" type="int"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="491"/>
                <declaration name="comma" type="boolean" line="492"/>
                <scope line="494"/>
                <scope line="499"/>
                <scope line="505"/>
                <scope line="511"/>
                <scope line="517"/>
                <scope line="523"/>
                <scope line="529"/>
                <scope line="535"/>
                <scope line="541"/>
                <scope line="547"/>
                <scope line="553"/>
                <scope line="559"/>
                <scope line="565"/>
                <scope line="571"/>
                <scope line="577"/>
                <scope line="583"/>
                <scope line="589"/>
            </method>
            <javadoc line="598">
                Returns the hash code value for this object.                
                <return>
                    a hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="603"/>
            <javadoc line="607">
                Converts an action String to an integer action mask.                
                <param>
                    action the action string.                    
                </param>
                <return>
                    the action mask.                    
                </return>
            </javadoc>
            <method name="getMask" type="int" line="613">
                <params>
                    <param name="action" type="String"/>
                </params>
                <comment line="616">
                    BE CAREFUL HERE! PARSING ORDER IS IMPORTANT IN THIS ALGORITHM.
                    
                     The &apos;string length&apos; test must be performed for the lengthiest
                     strings first.
                    
                     In this permission if the &quot;unregisterMBean&quot; string length test is
                     performed after the &quot;registerMBean&quot; string length test the algorithm
                     considers the &apos;unregisterMBean&apos; action as being the &apos;registerMBean&apos;
                     action and a parsing error is returned.                    
                </comment>
                <comment line="647">
                    skip whitespace                    
                </comment>
                <comment line="655">
                    check for the known strings                    
                </comment>
                <comment line="658">
                                        
                </comment>
                <comment line="687">
                                        
                </comment>
                <comment line="714">
                                        
                </comment>
                <comment line="740">
                                        
                </comment>
                <comment line="760">
                                        
                </comment>
                <comment line="780">
                                        
                </comment>
                <comment line="798">
                                        
                </comment>
                <comment line="815">
                                        
                </comment>
                <comment line="831">
                                        
                </comment>
                <comment line="846">
                                        
                </comment>
                <comment line="861">
                                        
                </comment>
                <comment line="876">
                                        
                </comment>
                <comment line="891">
                                        
                </comment>
                <comment line="905">
                                        
                </comment>
                <comment line="919">
                                        
                </comment>
                <comment line="932">
                                        
                </comment>
                <comment line="945">
                                        
                </comment>
                <comment line="955">
                    parse error                    
                </comment>
                <comment line="960">
                    make sure we didn&apos;t just match the tail of a word
                     like &quot;ackbarfaccept&quot;.  Also, skip to the comma.                    
                </comment>
                <comment line="978">
                    point i at the location of the comma minus one (or -1).                    
                </comment>
                <declaration name="mask" type="int" line="627"/>
                <scope line="629"/>
                <scope line="633"/>
                <declaration name="a" type="char[]" line="637"/>
                <declaration name="i" type="int" line="639"/>
                <scope line="643">
                    <declaration name="c" type="char" line="644"/>
                    <declaration name="matchlen" type="int" line="655"/>
                    <scope line="683"/>
                    <scope line="710"/>
                    <scope line="736"/>
                    <scope line="756"/>
                    <scope line="776"/>
                    <scope line="794"/>
                    <scope line="811"/>
                    <scope line="827"/>
                    <scope line="842"/>
                    <scope line="857"/>
                    <scope line="872"/>
                    <scope line="887"/>
                    <scope line="901"/>
                    <scope line="915"/>
                    <scope line="928"/>
                    <scope line="941"/>
                    <scope line="950"/>
                    <scope line="953"/>
                    <declaration name="seencomma" type="boolean" line="961"/>
                    <scope line="962"/>
                </scope>
            </method>
            <javadoc line="984">
                &lt;p&gt;Checks if this MBeanPermission object &quot;implies&quot; the
                  specified permission.&lt;/p&gt;
                  &lt;p&gt;More specifically, this method returns true if:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; is an instance of MBeanPermission; and&lt;/li&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; has a null className or &lt;i&gt;p&lt;/i&gt;&apos;s className
                  matches this object&apos;s className; and&lt;/li&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; has a null member or &lt;i&gt;p&lt;/i&gt;&apos;s member matches this
                  object&apos;s member; and&lt;/li&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt; has a null object name or &lt;i&gt;p&lt;/i&gt;&apos;s
                  object name matches this object&apos;s object name; and&lt;/li&gt;
                  &lt;li&gt; &lt;i&gt;p&lt;/i&gt;&apos;s actions are a subset of this object&apos;s actions&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;If this object&apos;s className is &quot;&lt;code&gt;&lt;/code&gt;&quot;, &lt;i&gt;p&lt;/i&gt;&apos;s
                  className always matches it.  If it is &quot;&lt;code&gt;a.&lt;/code&gt;&quot;, &lt;i&gt;p&lt;/i&gt;&apos;s
                  className matches it if it begins with &quot;&lt;code&gt;a.&lt;/code&gt;&quot;.&lt;/p&gt;
                  &lt;p&gt;If this object&apos;s member is &quot;&lt;code&gt;&lt;/code&gt;&quot;, &lt;i&gt;p&lt;/i&gt;&apos;s
                  member always matches it.&lt;/p&gt;
                  &lt;p&gt;If this object&apos;s objectName &lt;i&gt;n1&lt;/i&gt; is an object name pattern,
                  &lt;i&gt;p&lt;/i&gt;&apos;s objectName &lt;i&gt;n2&lt;/i&gt; matches it if{@link ObjectName#equals &lt;i&gt;n1&lt;/i&gt;.equals(&lt;i&gt;n2&lt;/i&gt;)} or if{@link ObjectName#apply &lt;i&gt;n1&lt;/i&gt;.apply(&lt;i&gt;n2&lt;/i&gt;)}.&lt;/p&gt;
                  &lt;p&gt;A permission that includes the &lt;code&gt;queryMBeans&lt;/code&gt; action
                  is considered to include &lt;code&gt;queryNames&lt;/code&gt; as well.&lt;/p&gt;                
                <param>
                    p the permission to check against.                    
                </param>
                <return>
                    true if the specified permission is implied by this object,
                      false if not.                    
                </return>
            </javadoc>
            <method name="implies" type="boolean" line="1026">
                <params>
                    <param name="p" type="Permission"/>
                </params>
                <comment line="1033">
                    Actions
                    
                     The actions in &apos;this&apos; permission must be a
                     superset of the actions in &apos;that&apos; permission                    
                </comment>
                <comment line="1039">
                                        
                </comment>
                <comment line="1042">
                    System.out.println(&quot;action [with QueryNames] does not imply&quot;);                    
                </comment>
                <comment line="1047">
                    System.out.println(&quot;action does not imply&quot;);                    
                </comment>
                <comment line="1052">
                    Target name
                    
                     The &apos;className&apos; check is true iff:
                     1) the className in &apos;this&apos; permission is omitted or &quot;*&quot;, or
                     2) the className in &apos;that&apos; permission is omitted or &quot;*&quot;, or
                     3) the className in &apos;this&apos; permission does pattern
                        matching with the className in &apos;that&apos; permission.
                    
                     The &apos;member&apos; check is true iff:
                     1) the member in &apos;this&apos; permission is omitted or &quot;*&quot;, or
                     2) the member in &apos;that&apos; permission is omitted or &quot;*&quot;, or
                     3) the member in &apos;this&apos; permission equals the member in
                        &apos;that&apos; permission.
                    
                     The &apos;object name&apos; check is true iff:
                     1) the object name in &apos;this&apos; permission is omitted or &quot;*:*&quot;, or
                     2) the object name in &apos;that&apos; permission is omitted or &quot;*:*&quot;, or
                     3) the object name in &apos;this&apos; permission does pattern
                        matching with the object name in &apos;that&apos; permission.                    
                </comment>
                <comment line="1073">
                    Check if this.className implies that.className.
                    
                    If that.classNamePrefix is empty that means the className is
                    irrelevant for this permission check.  Otherwise, we do not
                    expect that &quot;that&quot; contains a wildcard, since it is a                    
                </comment>
                <comment line="1081">
                    bottom is implied                    
                </comment>
                <comment line="1083">
                    bottom implies nothing but itself                    
                </comment>
                <comment line="1087">
                    exact never implies wildcard                    
                </comment>
                <comment line="1089">
                    exact match fails                    
                </comment>
                <comment line="1091">
                    prefix match, works even if &quot;that&quot; is also a wildcard
                     e.g. a.* implies a.* and a.b.*                    
                </comment>
                <comment line="1097">
                                        
                </comment>
                <comment line="1100">
                    bottom is implied                    
                </comment>
                <comment line="1102">
                    bottom implies nothing but itself                    
                </comment>
                <comment line="1105">
                    wildcard implies everything (including itself)                    
                </comment>
                <comment line="1110">
                                        
                </comment>
                <comment line="1113">
                    bottom is implied                    
                </comment>
                <comment line="1115">
                    bottom implies nothing but itself                    
                </comment>
                <comment line="1118">
                    ObjectName.apply returns false if that.objectName is a
                    wildcard so we also allow equals for that case.  This
                    never happens during real permission checks, but means                    
                </comment>
                <declaration name="that" type="MBeanPermission" line="1030"/>
                <scope line="1039">
                    <scope line="1040"/>
                </scope>
                <scope line="1044">
                    <scope line="1045"/>
                </scope>
                <scope line="1079"/>
                <scope line="1081"/>
                <scope line="1084"/>
                <scope line="1089"/>
                <scope line="1098"/>
                <scope line="1100"/>
                <scope line="1103"/>
                <scope line="1105"/>
                <scope line="1111"/>
                <scope line="1113"/>
                <scope line="1116"/>
            </method>
            <javadoc line="1128">
                Checks two MBeanPermission objects for equality. Checks
                  that &lt;i&gt;obj&lt;/i&gt; is an MBeanPermission, and has the same
                  name and actions as this object.
                  &lt;P&gt;                
                <param>
                    obj the object we are testing for equality with this object.                    
                </param>
                <return>
                    true if obj is an MBeanPermission, and has the
                      same name and actions as this MBeanPermission object.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1137">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="that" type="MBeanPermission" line="1144"/>
            </method>
            <javadoc line="1150">
                Deserialize this object based on its name and actions.                
            </javadoc>
            <method name="readObject" type="void" line="1154">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
    </source>