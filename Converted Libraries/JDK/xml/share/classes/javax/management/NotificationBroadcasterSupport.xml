<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.util.concurrent.CopyOnWriteArrayList"/>
        <import package="java.util.concurrent.Executor"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <class name="NotificationBroadcasterSupport" line="7">
            <implements interface="NotificationEmitter"/>
            <javadoc line="7">
                &lt;p&gt;Provides an implementation of {@link javax.management.NotificationEmitter NotificationEmitter}interface.  This can be used as the super class of an MBean that
                  sends notifications.&lt;/p&gt;
                  &lt;p&gt;By default, the notification dispatch model is synchronous.
                  That is, when a thread calls sendNotification, the
                  &lt;code&gt;NotificationListener.handleNotification&lt;/code&gt; method of each listener
                  is called within that thread. You can override this default
                  by overriding &lt;code&gt;handleNotification&lt;/code&gt; in a subclass, or by passing an
                  Executor to the constructor.&lt;/p&gt;
                  &lt;p&gt;If the method call of a filter or listener throws an {@link Exception},
                  then that exception does not prevent other listeners from being invoked.  However,
                  if the method call of a filter or of {@code Executor.execute} or of{@code handleNotification} (when no {@code Excecutor} is specified) throws an{@link Error}, then that {@code Error} is propagated to the caller of{@link #sendNotification sendNotification}.&lt;/p&gt;
                  &lt;p&gt;Remote listeners added using the JMX Remote API (see JMXConnector) are not
                  usually called synchronously.  That is, when sendNotification returns, it is
                  not guaranteed that any remote listeners have yet received the notification.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="25">
                Constructs a NotificationBroadcasterSupport where each listener is invoked by the
                  thread sending the notification. This constructor is equivalent to{@link NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,
                      MBeanNotificationInfo[] info) NotificationBroadcasterSupport(null, null)}.                
            </javadoc>
            <method name="NotificationBroadcasterSupport" type="constructor" line="30"/>
            <javadoc line="33">
                Constructs a NotificationBroadcasterSupport where each listener is invoked using
                  the given {@link java.util.concurrent.Executor}. When {@link #sendNotificationsendNotification} is called, a listener is selected if it was added with a null{@link NotificationFilter}, or if {@link NotificationFilter#isNotificationEnabledisNotificationEnabled} returns true for the notification being sent. The call to
                  &lt;code&gt;NotificationFilter.isNotificationEnabled&lt;/code&gt; takes place in the thread
                  that called &lt;code&gt;sendNotification&lt;/code&gt;. Then, for each selected listener,{@link Executor#execute executor.execute} is called with a command
                  that calls the &lt;code&gt;handleNotification&lt;/code&gt; method.
                  This constructor is equivalent to{@link NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,
                      MBeanNotificationInfo[] info) NotificationBroadcasterSupport(executor, null)}.                
                <param>
                    executor an executor used by the method &lt;code&gt;sendNotification&lt;/code&gt; to
                      send each notification. If it is null, the thread calling &lt;code&gt;sendNotification&lt;/code&gt;
                      will invoke the &lt;code&gt;handleNotification&lt;/code&gt; method itself.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="NotificationBroadcasterSupport" type="constructor" line="46">
                <params>
                    <param name="executor" type="Executor"/>
                </params>
            </method>
            <javadoc line="49">
                &lt;p&gt;Constructs a NotificationBroadcasterSupport with information
                  about the notifications that may be sent.  Each listener is
                  invoked by the thread sending the notification.  This
                  constructor is equivalent to {@link
                      NotificationBroadcasterSupport#NotificationBroadcasterSupport(Executor,
                      MBeanNotificationInfo[] info)
                  NotificationBroadcasterSupport(null, info)}.&lt;/p&gt;
                  &lt;p&gt;If the &lt;code&gt;info&lt;/code&gt; array is not empty, then it is
                  cloned by the constructor as if by {@code info.clone()}, and
                  each call to {@link #getNotificationInfo()} returns a new
                  clone.&lt;/p&gt;                
                <param>
                    info an array indicating, for each notification this
                      MBean may send, the name of the Java class of the notification
                      and the notification type.  Can be null, which is equivalent to
                      an empty array.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="NotificationBroadcasterSupport" type="constructor" line="67">
                <params>
                    <param name="info" type="MBeanNotificationInfo"/>
                </params>
            </method>
            <javadoc line="70">
                &lt;p&gt;Constructs a NotificationBroadcasterSupport with information about the notifications that may be sent,
                  and where each listener is invoked using the given {@link java.util.concurrent.Executor}.&lt;/p&gt;
                  &lt;p&gt;When {@link #sendNotification sendNotification} is called, a
                  listener is selected if it was added with a null {@link NotificationFilter}, or if {@link NotificationFilter#isNotificationEnabled isNotificationEnabled}returns true for the notification being sent. The call to
                  &lt;code&gt;NotificationFilter.isNotificationEnabled&lt;/code&gt; takes
                  place in the thread that called
                  &lt;code&gt;sendNotification&lt;/code&gt;. Then, for each selected
                  listener, {@link Executor#execute executor.execute} is called
                  with a command that calls the &lt;code&gt;handleNotification&lt;/code&gt;
                  method.&lt;/p&gt;
                  &lt;p&gt;If the &lt;code&gt;info&lt;/code&gt; array is not empty, then it is
                  cloned by the constructor as if by {@code info.clone()}, and
                  each call to {@link #getNotificationInfo()} returns a new
                  clone.&lt;/p&gt;                
                <param>
                    executor an executor used by the method
                      &lt;code&gt;sendNotification&lt;/code&gt; to send each notification. If it
                      is null, the thread calling &lt;code&gt;sendNotification&lt;/code&gt; will
                      invoke the &lt;code&gt;handleNotification&lt;/code&gt; method itself.                    
                </param>
                <param>
                    info an array indicating, for each notification this
                      MBean may send, the name of the Java class of the notification
                      and the notification type.  Can be null, which is equivalent to
                      an empty array.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="NotificationBroadcasterSupport" type="constructor" line="95">
                <params>
                    <param name="executor" type="Executor"/>
                    <param name="info" type="MBeanNotificationInfo"/>
                </params>
            </method>
            <javadoc line="99">
                Adds a listener.                
                <param>
                    listener The listener to receive notifications.                    
                </param>
                <param>
                    filter The filter object. If filter is null, no
                      filtering will be performed before handling notifications.                    
                </param>
                <param>
                    handback An opaque object to be sent back to the
                      listener when a notification is emitted. This object cannot be
                      used by the Notification broadcaster object. It should be
                      resent unchanged with the notification to the listener.                    
                </param>
                <exception>
                    IllegalArgumentException thrown if the listener is null.                    
                </exception>
                <see>
                    #removeNotificationListener                    
                </see>
            </javadoc>
            <method name="addNotificationListener" type="void" line="111">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <scope line="112"/>
            </method>
            <method name="removeNotificationListener" type="void" line="117">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
                <declaration name="wildcard" type="ListenerInfo" line="118"/>
                <declaration name="removed" type="boolean" line="119"/>
            </method>
            <method name="removeNotificationListener" type="void" line="122">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="li" type="ListenerInfo" line="123"/>
                <declaration name="removed" type="boolean" line="124"/>
                <scope line="125"/>
            </method>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="129"/>
            <javadoc line="133">
                Sends a notification.
                  If an {@code Executor} was specified in the constructor, it will be given one
                  task per selected listener to deliver the notification to that listener.                
                <param>
                    notification The notification to send.                    
                </param>
            </javadoc>
            <method name="sendNotification" type="void" line="139">
                <params>
                    <param name="notification" type="Notification"/>
                </params>
                <scope line="140"/>
                <declaration name="enabled" type="boolean" line="143"/>
                <scope line="144">
                    <scope line="145"/>
                    <scope line="148">
                        <scope line="149"/>
                    </scope>
                    <scope line="154"/>
                </scope>
            </method>
            <javadoc line="159">
                &lt;p&gt;This method is called by {@link #sendNotificationsendNotification} for each listener in order to send the
                  notification to that listener.  It can be overridden in
                  subclasses to change the behavior of notification delivery,
                  for instance to deliver the notification in a separate
                  thread.&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method is equivalent to
                  &lt;pre&gt;
                  listener.handleNotification(notif, handback);
                  &lt;/pre&gt;                
                <param>
                    listener the listener to which the notification is being
                      delivered.                    
                </param>
                <param>
                    notif the notification being delivered to the listener.                    
                </param>
                <param>
                    handback the handback object that was supplied when the
                      listener was added.                    
                </param>
            </javadoc>
            <method name="handleNotification" type="void" line="175">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="notif" type="Notification"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <class name="ListenerInfo" line="178">
                <declaration name="listener" type="NotificationListener" line="179"/>
                <declaration name="filter" type="NotificationFilter" line="180"/>
                <declaration name="handback" type="Object" line="181"/>
                <method name="ListenerInfo" type="constructor" line="182">
                    <params>
                        <param name="listener" type="NotificationListener"/>
                        <param name="filter" type="NotificationFilter"/>
                        <param name="handback" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="187">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <declaration name="li" type="ListenerInfo" line="189"/>
                </method>
            </class>
            <class name="WildcardListenerInfo" line="194">
                <extends class="ListenerInfo"/>
                <method name="WildcardListenerInfo" type="constructor" line="195">
                    <params>
                        <param name="listener" type="NotificationListener"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="198">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
            </class>
            <declaration name="listenerList" type="List&amp;lt;ListenerInfo&amp;gt;" line="203"/>
            <declaration name="executor" type="Executor" line="204"/>
            <declaration name="notifInfo" type="MBeanNotificationInfo[]" line="205"/>
            <declaration name="defaultExecutor" type="Executor" line="206"/>
            <anonymous_class line="206">
                <method name="execute" type="void" line="207">
                    <params>
                        <param name="r" type="Runnable"/>
                    </params>
                </method>
            </anonymous_class>
            <declaration name="NO_NOTIFICATION_INFO" type="MBeanNotificationInfo[]" line="212"/>
            <class name="SendNotifJob" line="213">
                <implements interface="Runnable"/>
                <method name="SendNotifJob" type="constructor" line="214">
                    <params>
                        <param name="notif" type="Notification"/>
                        <param name="listenerInfo" type="ListenerInfo"/>
                    </params>
                </method>
                <method name="run" type="void" line="218">
                    <scope line="219"/>
                    <scope line="222">
                        <scope line="223"/>
                    </scope>
                </method>
                <declaration name="notif" type="Notification" line="228"/>
                <declaration name="listenerInfo" type="ListenerInfo" line="229"/>
            </class>
            <declaration name="logger" type="ClassLogger" line="231"/>
        </class>
    </source>