<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management">
        <import package="com.sun.jmx.mbeanserver.MXBeanProxy"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.InvocationHandler"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.WeakHashMap"/>
        <class name="MBeanServerInvocationHandler" line="37">
            <implements interface="InvocationHandler"/>
            <javadoc line="37">
                &lt;p&gt;{@link InvocationHandler} that forwards methods in an MBean&apos;s
                  management interface through the MBean server to the MBean.&lt;/p&gt;
                  &lt;p&gt;Given an {@link MBeanServerConnection}, the {@link ObjectName}of an MBean within that MBean server, and a Java interface
                  &lt;code&gt;Intf&lt;/code&gt; that describes the management interface of the
                  MBean using the patterns for a Standard MBean or an MXBean, this
                  class can be used to construct a proxy for the MBean.  The proxy
                  implements the interface &lt;code&gt;Intf&lt;/code&gt; such that all of its
                  methods are forwarded through the MBean server to the MBean.&lt;/p&gt;
                  &lt;p&gt;If the {@code InvocationHandler} is for an MXBean, then the parameters of
                  a method are converted from the type declared in the MXBean
                  interface into the corresponding mapped type, and the return value
                  is converted from the mapped type into the declared type.  For
                  example, with the method&lt;br&gt;{@code public List&lt;String&gt; reverse(List&lt;String&gt; list);}&lt;br&gt;
                  and given that the mapped type for {@code List&lt;String&gt;} is {@codeString[]}, a call to {@code proxy.reverse(someList)} will convert{@code someList} from a {@code List&lt;String&gt;} to a {@code String[]},
                  call the MBean operation {@code reverse}, then convert the returned{@code String[]} into a {@code List&lt;String&gt;}.&lt;/p&gt;
                  &lt;p&gt;The method Object.toString(), Object.hashCode(), or
                  Object.equals(Object), when invoked on a proxy using this
                  invocation handler, is forwarded to the MBean server as a method on
                  the proxied MBean only if it appears in one of the proxy&apos;s
                  interfaces.  For a proxy created with {@link JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class)JMX.newMBeanProxy} or {@link JMX#newMXBeanProxy(MBeanServerConnection,ObjectName,Class)JMX.newMXBeanProxy}, this means that the method must appear in the
                  Standard MBean or MXBean interface.  Otherwise these methods have
                  the following behavior:
                  &lt;ul&gt;
                  &lt;li&gt;toString() returns a string representation of the proxy
                  &lt;li&gt;hashCode() returns a hash code for the proxy such
                  that two equal proxies have the same hash code
                  &lt;li&gt;equals(Object)
                  returns true if and only if the Object argument is of the same
                  proxy class as this proxy, with an MBeanServerInvocationHandler
                  that has the same MBeanServerConnection and ObjectName; if one
                  of the {@code MBeanServerInvocationHandler}s was constructed with
                  a {@code Class} argument then the other must have been constructed
                  with the same {@code Class} for {@code equals} to return true.
                  &lt;/ul&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="90">
                &lt;p&gt;Invocation handler that forwards methods through an MBean
                  server to a Standard MBean.  This constructor may be called
                  instead of relying on {@link JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class)JMX.newMBeanProxy}, for instance if you need to supply a
                  different {@link ClassLoader} to {@link Proxy#newProxyInstanceProxy.newProxyInstance}.&lt;/p&gt;
                  &lt;p&gt;This constructor is not appropriate for an MXBean.  Use{@link #MBeanServerInvocationHandler(MBeanServerConnection,ObjectName,boolean)} for that.  This constructor is equivalent
                  to {@code new MBeanServerInvocationHandler(connection,
                  objectName, false)}.&lt;/p&gt;                
                <param>
                    connection the MBean server connection through which all
                      methods of a proxy using this handler will be forwarded.                    
                </param>
                <param>
                    objectName the name of the MBean within the MBean server
                      to which methods will be forwarded.                    
                </param>
            </javadoc>
            <method name="MBeanServerInvocationHandler" type="constructor" line="112">
                <params>
                    <param name="connection" type="MBeanServerConnection"/>
                    <param name="objectName" type="ObjectName"/>
                </params>
            </method>
            <javadoc line="117">
                &lt;p&gt;Invocation handler that can forward methods through an MBean
                  server to a Standard MBean or MXBean.  This constructor may be called
                  instead of relying on {@link JMX#newMXBeanProxy(MBeanServerConnection,ObjectName,Class)JMX.newMXBeanProxy}, for instance if you need to supply a
                  different {@link ClassLoader} to {@link Proxy#newProxyInstanceProxy.newProxyInstance}.&lt;/p&gt;                
                <param>
                    connection the MBean server connection through which all
                      methods of a proxy using this handler will be forwarded.                    
                </param>
                <param>
                    objectName the name of the MBean within the MBean server
                      to which methods will be forwarded.                    
                </param>
                <param>
                    isMXBean if true, the proxy is for an {@link MXBean}, and
                      appropriate mappings will be applied to method parameters and return
                      values.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="MBeanServerInvocationHandler" type="constructor" line="140">
                <params>
                    <param name="connection" type="MBeanServerConnection"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="isMXBean" type="boolean"/>
                </params>
                <scope line="141"/>
                <scope line="144"/>
            </method>
            <javadoc line="152">
                &lt;p&gt;The MBean server connection through which the methods of
                  a proxy using this handler are forwarded.&lt;/p&gt;                
                <return>
                    the MBean server connection.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getMBeanServerConnection" type="MBeanServerConnection" line="160"/>
            <javadoc line="164">
                &lt;p&gt;The name of the MBean within the MBean server to which methods
                  are forwarded.                
                <return>
                    the object name.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getObjectName" type="ObjectName" line="172"/>
            <javadoc line="176">
                &lt;p&gt;If true, the proxy is for an MXBean, and appropriate mappings
                  are applied to method parameters and return values.                
                <return>
                    whether the proxy is for an MXBean.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isMXBean" type="boolean" line="184"/>
            <javadoc line="188">
                &lt;p&gt;Return a proxy that implements the given interface by
                  forwarding its methods through the given MBean server to the
                  named MBean.  As of 1.6, the methods {@link JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class)} and{@link JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class,boolean)} are preferred to this method.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to {@link Proxy#newProxyInstanceProxy.newProxyInstance}&lt;code&gt;(interfaceClass.getClassLoader(),
                  interfaces, handler)&lt;/code&gt;.  Here &lt;code&gt;handler&lt;/code&gt; is the
                  result of {@link #MBeanServerInvocationHandler new
                  MBeanServerInvocationHandler(connection, objectName)}, and
                  &lt;code&gt;interfaces&lt;/code&gt; is an array that has one element if
                  &lt;code&gt;notificationBroadcaster&lt;/code&gt; is false and two if it is
                  true.  The first element of &lt;code&gt;interfaces&lt;/code&gt; is
                  &lt;code&gt;interfaceClass&lt;/code&gt; and the second, if present, is
                  &lt;code&gt;NotificationEmitter.class&lt;/code&gt;.                
                <param>
                    connection the MBean server to forward to.                    
                </param>
                <param>
                    objectName the name of the MBean within
                      <code>connection</code> to forward to.                    
                </param>
                <param>
                    interfaceClass the management interface that the MBean
                      exports, which will also be implemented by the returned proxy.                    
                </param>
                <param>
                    notificationBroadcaster make the returned proxy
                      implement {@link NotificationEmitter} by forwarding its methods
                      via <code>connection</code>. A call to {@link NotificationBroadcaster#addNotificationListener} on the proxy will
                      result in a call to {@link MBeanServerConnection#addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)}, and likewise
                      for the other methods of {@link NotificationBroadcaster} and {@link NotificationEmitter}.                    
                </param>
                <param>
                    <T>
                       allows the compiler to know that if the {@codeinterfaceClass} parameter is {@code MyMBean.class}, for example,
                      then the return type is {@code MyMBean}.                    
                </param>
                <return>
                    the new proxy instance.                    
                </return>
                <see>
                    JMX#newMBeanProxy(MBeanServerConnection,ObjectName,Class)                    
                </see>
            </javadoc>
            <method name="newProxyInstance" type="T" line="233">
                <params>
                    <param name="connection" type="MBeanServerConnection"/>
                    <param name="objectName" type="ObjectName"/>
                    <param name="interfaceClass" type="Class<T>"/>
                    <param name="notificationBroadcaster" type="boolean"/>
                </params>
                <declaration name="handler" type="InvocationHandler" line="234"/>
                <declaration name="interfaces" type="Class&lt;?&gt;[]" line="236"/>
                <scope line="237"/>
                <declaration name="proxy" type="Object" line="243"/>
            </method>
            <method name="invoke" type="Object" line="251">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <comment line="259">
                    local or not: equals, toString, hashCode                    
                </comment>
                <comment line="272">
                    Inexplicably, InvocationHandler specifies that args is null
                    when the method takes no arguments rather than a                    
                </comment>
                <comment line="316">
                    The invoke may fail because it can&apos;t get to the MBean, with
                    one of the these exceptions declared by
                    MBeanServerConnection.invoke:
                    - RemoteException: can&apos;t talk to MBeanServer;
                    - InstanceNotFoundException: objectName is not registered;
                    - ReflectionException: objectName is registered but does not
                    have the method being invoked.
                    In all of these cases, the exception will be wrapped by the
                    proxy mechanism in an UndeclaredThrowableException unless
                    it happens to be declared in the &quot;throws&quot; clause of the
                    method being invoked on the proxy.                    
                </comment>
                <declaration name="methodClass" type="Class&lt;?&gt;" line="252"/>
                <scope line="262">
                    <scope line="263">
                        <declaration name="p" type="MXBeanProxy" line="264"/>
                    </scope>
                    <scope line="266">
                        <declaration name="methodName" type="String" line="267"/>
                        <declaration name="paramTypes" type="Class&lt;?&gt;[]" line="268"/>
                        <declaration name="returnType" type="Class&lt;?&gt;" line="269"/>
                        <declaration name="nargs" type="int" line="274"/>
                        <scope line="279"/>
                        <scope line="288"/>
                        <scope line="296">
                            <declaration name="attr" type="Attribute" line="297"/>
                        </scope>
                        <declaration name="signature" type="String[]" line="302"/>
                    </scope>
                </scope>
                <scope line="308"/>
                <scope line="310"/>
                <scope line="312"/>
            </method>
            <method name="findMXBeanProxy" type="MXBeanProxy" line="329">
                <params>
                    <param name="mxbeanInterface" type="Class<?>"/>
                </params>
                <scope line="330">
                    <declaration name="proxyRef" type="WeakReference&lt;MXBeanProxy&gt;" line="331"/>
                    <declaration name="p" type="MXBeanProxy" line="333"/>
                    <scope line="334">
                        <scope line="335"/>
                        <scope line="337">
                            <declaration name="msg" type="String" line="338"/>
                            <declaration name="iae" type="IllegalArgumentException" line="340"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <declaration name="mxbeanProxies" type="WeakHashMap&lt;Class&lt;?&gt;,WeakReference&lt;MXBeanProxy&gt;&gt;" line="351"/>
            <method name="invokeBroadcasterMethod" type="Object" line="355">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <comment line="361">
                    The various throws of IllegalArgumentException here
                    should not happen, since we know what the methods in
                    NotificationBroadcaster and NotificationEmitter                    
                </comment>
                <comment line="370">
                    Other inconsistencies will produce ClassCastException                    
                </comment>
                <comment line="384">
                    NullPointerException if method with no args, but that                    
                </comment>
                <declaration name="methodName" type="String" line="356"/>
                <declaration name="nargs" type="int" line="357"/>
                <scope line="359">
                    <scope line="364">
                        <declaration name="msg" type="String" line="365"/>
                    </scope>
                    <declaration name="listener" type="NotificationListener" line="372"/>
                    <declaration name="filter" type="NotificationFilter" line="373"/>
                    <declaration name="handback" type="Object" line="374"/>
                </scope>
                <scope line="381">
                    <declaration name="listener" type="NotificationListener" line="385"/>
                    <declaration name="filter" type="NotificationFilter" line="393"/>
                    <declaration name="handback" type="Object" line="394"/>
                    <declaration name="msg" type="String" line="402"/>
                </scope>
                <scope line="407">
                    <scope line="409"/>
                    <declaration name="info" type="MBeanInfo" line="414"/>
                </scope>
                <scope line="417"/>
            </method>
            <method name="shouldDoLocally" type="boolean" line="423">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                </params>
                <declaration name="methodName" type="String" line="424"/>
            </method>
            <method name="doLocally" type="Object" line="437">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                    <param name="args" type="Object[]"/>
                </params>
                <declaration name="methodName" type="String" line="438"/>
                <scope line="440">
                    <scope line="442"/>
                    <scope line="446"/>
                    <declaration name="ihandler" type="InvocationHandler" line="450"/>
                    <scope line="454"/>
                    <declaration name="handler" type="MBeanServerInvocationHandler" line="458"/>
                </scope>
                <scope line="464"/>
                <scope line="467"/>
            </method>
            <method name="isLocal" type="boolean" line="474">
                <params>
                    <param name="proxy" type="Object"/>
                    <param name="method" type="Method"/>
                </params>
                <comment line="486">
                    found method in one of our interfaces                    
                </comment>
                <comment line="488">
                    OK.                    
                </comment>
                <comment line="492">
                    did not find in any interface                    
                </comment>
                <declaration name="interfaces" type="Class&lt;?&gt;[]" line="475"/>
                <scope line="476"/>
                <declaration name="methodName" type="String" line="480"/>
                <declaration name="params" type="Class&lt;?&gt;[]" line="481"/>
                <scope line="482">
                    <scope line="483"/>
                    <scope line="486"/>
                </scope>
            </method>
            <declaration name="connection" type="MBeanServerConnection" line="494"/>
            <declaration name="objectName" type="ObjectName" line="495"/>
            <declaration name="isMXBean" type="boolean" line="496"/>
        </class>
    </source>