<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeChangeNotification"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcaster"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <interface name="ModelMBeanNotificationBroadcaster">
            <implements interface="NotificationBroadcaster"/>
            <javadoc line="42">
                This interface must be implemented by the ModelMBeans. An implementation of this interface
                  must be shipped with every JMX Agent.
                  &lt;P&gt;
                  Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer&apos;s
                  createMBean method.  The resource then sets the ModelMBeanInfo (with Descriptors) for the ModelMBean
                  instance. The attributes and operations exposed via the ModelMBeanInfo for the ModelMBean are accessible
                  from MBeans, connectors/adaptors like other MBeans. Through the ModelMBeanInfo Descriptors, values and methods in
                  the managed application can be defined and mapped to attributes and operations of the ModelMBean.
                  This mapping can be defined during development in an XML formatted file or dynamically and
                  programmatically at runtime.
                  &lt;P&gt;
                  Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
                  its attributes and operations
                  become remotely accessible through the connectors/adaptors connected to that MBeanServer.
                  A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
                  By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.
                  &lt;P&gt;
                  MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows
                  for wrapping exceptions from distributed communications (RMI, EJB, etc.).  These exceptions do
                  not have to be thrown by the implementation except in the scenarios described in the specification
                  and javadoc.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="sendNotification" type="void" line="71"/>
            <javadoc line="71">
                Sends a Notification which is passed in to the registered
                  Notification listeners on the ModelMBean as a
                  jmx.modelmbean.generic notification.                
                <param>
                    ntfyObj The notification which is to be passed to
                      the 'handleNotification' method of the listener object.                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException:
                      The Notification object passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="sendNotification" type="void" line="88"/>
            <javadoc line="88">
                Sends a Notification which contains the text string that is passed in
                  to the registered Notification listeners on the ModelMBean.                
                <param>
                    ntfyText The text which is to be passed in the Notification to the 'handleNotification'
                      method of the listener object.
                      the constructed Notification will be:
                      type        "jmx.modelmbean.generic"
                      source      this ModelMBean instance
                      sequence    1                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException:
                      The Notification text string passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="sendAttributeChangeNotification" type="void" line="108"/>
            <javadoc line="108">
                Sends an attributeChangeNotification which is passed in to
                  the registered attributeChangeNotification listeners on the
                  ModelMBean.                
                <param>
                    notification The notification which is to be passed
                      to the 'handleNotification' method of the listener object.                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException: The AttributeChangeNotification object passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="sendAttributeChangeNotification" type="void" line="124"/>
            <javadoc line="124">
                Sends an attributeChangeNotification which contains the old value and new value for the
                  attribute to the registered AttributeChangeNotification listeners on the ModelMBean.
                  &lt;P&gt;                
                <param>
                    oldValue The original value for the Attribute                    
                </param>
                <param>
                    newValue The current value for the Attribute
                      <P>
                      <PRE>
                      The constructed attributeChangeNotification will be:
                      type        "jmx.attribute.change"
                      source      this ModelMBean instance
                      sequence    1
                      attributeName oldValue.getName()
                      attributeType oldValue's class
                      attributeOldValue oldValue.getValue()
                      attributeNewValue newValue.getValue()
                      </PRE>                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException: An Attribute object passed in parameter is null
                      or the names of the two Attribute objects in parameter are not the same.                    
                </exception>
            </javadoc>
            <method name="addAttributeChangeNotificationListener" type="void" line="150"/>
            <javadoc line="150">
                Registers an object which implements the NotificationListener interface as a listener.  This
                  object&apos;s &apos;handleNotification()&apos; method will be invoked when any attributeChangeNotification is issued through
                  or by the ModelMBean.  This does not include other Notifications.  They must be registered
                  for independently. An AttributeChangeNotification will be generated for this attributeName.                
                <param>
                    listener The listener object which will handles notifications emitted by the registered MBean.                    
                </param>
                <param>
                    attributeName The name of the ModelMBean attribute for which to receive change notifications.
                      If null, then all attribute changes will cause an attributeChangeNotification to be issued.                    
                </param>
                <param>
                    handback The context to be sent to the listener with the notification when a notification is emitted.                    
                </param>
                <exception>
                    IllegalArgumentException The listener cannot be null.                    
                </exception>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException The attribute name passed in parameter does not exist.                    
                </exception>
                <see>
                    #removeAttributeChangeNotificationListener                    
                </see>
            </javadoc>
            <method name="removeAttributeChangeNotificationListener" type="void" line="173"/>
            <javadoc line="173">
                Removes a listener for attributeChangeNotifications from the RequiredModelMBean.                
                <param>
                    listener The listener name which was handling notifications emitted by the registered MBean.
                      This method will remove all information related to this listener.                    
                </param>
                <param>
                    attributeName The attribute for which the listener no longer wants to receive attributeChangeNotifications.
                      If null the listener will be removed for all attributeChangeNotifications.                    
                </param>
                <exception>
                    ListenerNotFoundException The listener is not registered in the MBean or is null.                    
                </exception>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException If the inAttributeName parameter does not
                      correspond to an attribute name.                    
                </exception>
                <see>
                    #addAttributeChangeNotificationListener                    
                </see>
            </javadoc>
        </interface>
    </source>