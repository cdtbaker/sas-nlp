<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="javax.management.MBeanConstructorInfo"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanOperationInfo"/>
        <interface name="ModelMBeanInfo">
            <javadoc line="9">
                This interface is implemented by the ModelMBeanInfo for every ModelMBean. An implementation of this interface
                  must be shipped with every JMX Agent.
                  &lt;P&gt;
                  Java resources wishing to be manageable instantiate the ModelMBean using the MBeanServer&apos;s
                  createMBean method.  The resource then sets the ModelMBeanInfo and Descriptors for the ModelMBean
                  instance. The attributes, operations, and notifications exposed via the ModelMBeanInfo for the
                  ModelMBean comprise the management interface and are accessible
                  from MBeans, connectors/adaptors like other MBeans. Through the Descriptors, values and methods in
                  the managed application can be defined and mapped to attributes and operations of the ModelMBean.
                  This mapping can be defined during development in a file or dynamically and
                  programmatically at runtime.
                  &lt;P&gt;
                  Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
                  its attributes, operations, and notifications
                  become remotely accessible through the connectors/adaptors connected to that MBeanServer.
                  A Java object cannot be registered in the MBeanServer unless it is a JMX compliant MBean.
                  By instantiating a ModelMBean, resources are guaranteed that the MBean is valid.
                  MBeanException and RuntimeOperationsException must be thrown on every public method.  This allows
                  for wrapping exceptions from distributed communications (RMI, EJB, etc.)                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getDescriptors" type="Descriptor[]" line="32"/>
            <javadoc line="32">
                Returns a Descriptor array consisting of all
                  Descriptors for the ModelMBeanInfo of type inDescriptorType.                
                <param>
                    inDescriptorType value of descriptorType field that must be set for the descriptor
                      to be returned.  Must be "mbean", "attribute", "operation", "constructor" or "notification".
                      If it is null or empty then all types will be returned.                    
                </param>
                <return>
                    Descriptor array containing all descriptors for the ModelMBean if type inDescriptorType.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException when the descriptorType in parameter is
                      not one of: "mbean", "attribute", "operation", "constructor", "notification", empty or null.                    
                </exception>
                <see>
                    #setDescriptors                    
                </see>
            </javadoc>
            <method name="setDescriptors" type="void" line="45"/>
            <javadoc line="45">
                Adds or replaces descriptors in the ModelMBeanInfo.                
                <param>
                    inDescriptors The descriptors to be set in the ModelMBeanInfo. Null
                      elements of the list will be ignored.  All descriptors must have name and descriptorType fields.                    
                </param>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException for a null or invalid descriptor.                    
                </exception>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <see>
                    #getDescriptors                    
                </see>
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="54"/>
            <javadoc line="54">
                Returns a Descriptor requested by name and descriptorType.                
                <param>
                    inDescriptorName The name of the descriptor.                    
                </param>
                <param>
                    inDescriptorType The type of the descriptor being
                      requested.  If this is null or empty then all types are
                      searched. Valid types are 'mbean', 'attribute', 'constructor'
                      'operation', and 'notification'. This value will be equal to
                      the 'descriptorType' field in the descriptor that is returned.                    
                </param>
                <return>
                    Descriptor containing the descriptor for the ModelMBean
                      with the same name and descriptorType.  If no descriptor is
                      found, null is returned.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException for a null descriptor name or null or invalid type.
                      The type must be "mbean","attribute", "constructor", "operation", or "notification".                    
                </exception>
                <see>
                    #setDescriptor                    
                </see>
            </javadoc>
            <method name="setDescriptor" type="void" line="71"/>
            <javadoc line="71">
                Sets descriptors in the info array of type inDescriptorType
                  for the ModelMBean.  The setDescriptor method of the
                  corresponding ModelMBeanInfo will be called to set the
                  specified descriptor.                
                <param>
                    inDescriptor The descriptor to be set in the
                      ModelMBean. It must NOT be null.  All descriptors must have
                      name and descriptorType fields.                    
                </param>
                <param>
                    inDescriptorType The type of the descriptor being
                      set. If this is null then the descriptorType field in the
                      descriptor is used. If specified this value must be set in
                      the descriptorType field in the descriptor. Must be
                      "mbean","attribute", "constructor", "operation", or
                      "notification".                    
                </param>
                <exception>
                    RuntimeOperationsException Wraps an
                      IllegalArgumentException for illegal or null arguments or
                      if the name field of the descriptor is not found in the
                      corresponding MBeanAttributeInfo or MBeanConstructorInfo or
                      MBeanNotificationInfo or MBeanOperationInfo.                    
                </exception>
                <exception>
                    MBeanException Wraps a distributed communication
                      Exception.                    
                </exception>
                <see>
                    #getDescriptor                    
                </see>
            </javadoc>
            <method name="getMBeanDescriptor" type="Descriptor" line="95"/>
            <javadoc line="95">
                &lt;p&gt;Returns the ModelMBean&apos;s descriptor which contains MBean wide
                  policies.  This descriptor contains metadata about the MBean and default
                  policies for persistence and caching.&lt;/p&gt;
                  &lt;P id=&quot;descriptor&quot;&gt;
                  The fields in the descriptor are defined, but not limited to, the
                  following.  Note that when the Type in this table is Number, a String
                  that is the decimal representation of a Long can also be used.&lt;/P&gt;
                  &lt;table border=&quot;1&quot; cellpadding=&quot;5&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;MBean name.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;descriptorType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Must be &quot;mbean&quot;.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;displayName&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Name of MBean to be used in displays.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;persistPolicy&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;One of: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never.
                  See the section &quot;MBean Descriptor Fields&quot; in the JMX specification
                  document.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;persistLocation&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;The fully qualified directory name where the MBean should be
                  persisted (if appropriate).&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;persistFile&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;File name into which the MBean should be persisted.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;persistPeriod&lt;/td&gt;&lt;td&gt;Number&lt;/td&gt;
                  &lt;td&gt;Frequency of persist cycle in seconds, for OnTime and
                  NoMoreOftenThan PersistPolicy&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;currencyTimeLimit&lt;/td&gt;&lt;td&gt;Number&lt;/td&gt;
                  &lt;td&gt;How long cached value is valid: &amp;lt;0 never, =0 always,
                  &amp;gt;0 seconds.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;log&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;t: log all notifications, f: log no notifications.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;logfile&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Fully qualified filename to log events to.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;visibility&lt;/td&gt;&lt;td&gt;Number&lt;/td&gt;
                  &lt;td&gt;1-4 where 1: always visible 4: rarely visible.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;export&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Name to be used to export/expose this MBean so that it is
                  findable by other JMX Agents.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;presentationString&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;XML formatted string to allow presentation of data to be
                  associated with the MBean.&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;P&gt;
                  The default descriptor is: name=className,descriptorType=&quot;mbean&quot;, displayName=className,
                  persistPolicy=&quot;never&quot;,log=&quot;F&quot;,visibility=&quot;1&quot;
                  If the descriptor does not contain all these fields, they will be added with these default values.
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; because of inconsistencies in previous versions of
                  this specification, it is recommended not to use negative or zero
                  values for &lt;code&gt;currencyTimeLimit&lt;/code&gt;.  To indicate that a
                  cached value is never valid, omit the
                  &lt;code&gt;currencyTimeLimit&lt;/code&gt; field.  To indicate that it is
                  always valid, use a very large number for this field.&lt;/p&gt;                
                <return>
                    the MBean descriptor.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication
                      Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException a {@link RuntimeException} occurred while getting the descriptor.                    
                </exception>
                <see>
                    #setMBeanDescriptor                    
                </see>
            </javadoc>
            <method name="setMBeanDescriptor" type="void" line="156"/>
            <javadoc line="156">
                Sets the ModelMBean&apos;s descriptor.  This descriptor contains default, MBean wide
                  metadata about the MBean and default policies for persistence and caching. This operation
                  does a complete replacement of the descriptor, no merging is done. If the descriptor to
                  set to is null then the default descriptor will be created.
                  The default descriptor is: name=className,descriptorType=&quot;mbean&quot;, displayName=className,
                  persistPolicy=&quot;never&quot;,log=&quot;F&quot;,visibility=&quot;1&quot;
                  If the descriptor does not contain all these fields, they will be added with these default values.
                  See {@link #getMBeanDescriptor getMBeanDescriptor} method javadoc for description of valid field names.                
                <param>
                    inDescriptor the descriptor to set.                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException  for invalid descriptor.                    
                </exception>
                <see>
                    #getMBeanDescriptor                    
                </see>
            </javadoc>
            <method name="getAttribute" type="ModelMBeanAttributeInfo" line="171"/>
            <javadoc line="171">
                Returns a ModelMBeanAttributeInfo requested by name.                
                <param>
                    inName The name of the ModelMBeanAttributeInfo to get.
                      If no ModelMBeanAttributeInfo exists for this name null is returned.                    
                </param>
                <return>
                    the attribute info for the named attribute, or null
                      if there is none.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication
                      Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      IllegalArgumentException for a null attribute name.                    
                </exception>
            </javadoc>
            <method name="getOperation" type="ModelMBeanOperationInfo" line="183"/>
            <javadoc line="183">
                Returns a ModelMBeanOperationInfo requested by name.                
                <param>
                    inName The name of the ModelMBeanOperationInfo to get.
                      If no ModelMBeanOperationInfo exists for this name null is returned.                    
                </param>
                <return>
                    the operation info for the named operation, or null
                      if there is none.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException for a null operation name.                    
                </exception>
            </javadoc>
            <method name="getNotification" type="ModelMBeanNotificationInfo" line="193"/>
            <javadoc line="193">
                Returns a ModelMBeanNotificationInfo requested by name.                
                <param>
                    inName The name of the ModelMBeanNotificationInfo to get.
                      If no ModelMBeanNotificationInfo exists for this name null is returned.                    
                </param>
                <return>
                    the info for the named notification, or null if there
                      is none.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException for a null notification name.                    
                </exception>
            </javadoc>
            <method name="clone" type="java.lang.Object" line="203"/>
            <javadoc line="203">
                Creates and returns a copy of this object.                
            </javadoc>
            <method name="getAttributes" type="MBeanAttributeInfo[]" line="207"/>
            <javadoc line="207">
                Returns the list of attributes exposed for management.
                  Each attribute is described by an &lt;CODE&gt;MBeanAttributeInfo&lt;/CODE&gt; object.                
                <return>
                    An array of <CODE>MBeanAttributeInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getClassName" type="java.lang.String" line="213"/>
            <javadoc line="213">
                Returns the name of the Java class of the MBean described by
                  this &lt;CODE&gt;MBeanInfo&lt;/CODE&gt;.                
                <return>
                    the Java class name.                    
                </return>
            </javadoc>
            <method name="getConstructors" type="MBeanConstructorInfo[]" line="219"/>
            <javadoc line="219">
                Returns the list of the public constructors  of the MBean.
                  Each constructor is described by an &lt;CODE&gt;MBeanConstructorInfo&lt;/CODE&gt; object.                
                <return>
                    An array of <CODE>MBeanConstructorInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getDescription" type="java.lang.String" line="225"/>
            <javadoc line="225">
                Returns a human readable description of the MBean.                
                <return>
                    the description.                    
                </return>
            </javadoc>
            <method name="getNotifications" type="MBeanNotificationInfo[]" line="230"/>
            <javadoc line="230">
                Returns the list of the notifications emitted by the MBean.
                  Each notification is described by an &lt;CODE&gt;MBeanNotificationInfo&lt;/CODE&gt; object.
                  &lt;P&gt;
                  In addition to any notification specified by the application,
                  a ModelMBean may always send also two additional notifications:
                  &lt;UL&gt;
                  &lt;LI&gt; One with descriptor name &quot;GENERIC&quot; and displayName &quot;jmx.modelmbean.generic&quot;
                  &lt;LI&gt; Second is a standard attribute change notification
                  with descriptor name &quot;ATTRIBUTE_CHANGE&quot; and displayName &quot;jmx.attribute.change&quot;
                  &lt;/UL&gt;
                  Thus any implementation of ModelMBeanInfo should always add those two notifications
                  in addition to those specified by the application.                
                <return>
                    An array of <CODE>MBeanNotificationInfo</CODE> objects.                    
                </return>
            </javadoc>
            <method name="getOperations" type="MBeanOperationInfo[]" line="246"/>
            <javadoc line="246">
                Returns the list of operations  of the MBean.
                  Each operation is described by an &lt;CODE&gt;MBeanOperationInfo&lt;/CODE&gt; object.                
                <return>
                    An array of <CODE>MBeanOperationInfo</CODE> objects.                    
                </return>
            </javadoc>
        </interface>
    </source>