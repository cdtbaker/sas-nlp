<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER"/>
        <import package="java.io.FileOutputStream"/>
        <import package="java.io.PrintStream"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.Date"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.logging.Level"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeChangeNotification"/>
        <import package="javax.management.AttributeChangeNotificationFilter"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="javax.management.MBeanConstructorInfo"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanOperationInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.MBeanServerFactory"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.NotificationEmitter"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeErrorException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="javax.management.ServiceNotFoundException"/>
        <import package="javax.management.loading.ClassLoaderRepository"/>
        <import package="sun.reflect.misc.MethodUtil"/>
        <import package="sun.reflect.misc.ReflectUtil"/>
        <class name="RequiredModelMBean" line="85">
            <comment line="121">
                                
            </comment>
            <comment line="122">
                                
            </comment>
            <comment line="126">
                Notification broadcaster for any notification to be sent                
            </comment>
            <comment line="130">
                                
            </comment>
            <comment line="133">
                handle, name, or reference for instance on which the actual invoke                
            </comment>
            <comment line="138">
                                
            </comment>
            <comment line="142">
                                
            </comment>
            <comment line="143">
                                
            </comment>
            <comment line="144">
                                
            </comment>
            <comment line="214">
                                
            </comment>
            <comment line="215">
                                
            </comment>
            <comment line="216">
                                
            </comment>
            <comment line="443">
                                
            </comment>
            <comment line="444">
                                
            </comment>
            <comment line="445">
                                
            </comment>
            <comment line="1119">
                Map e.g. &quot;int&quot; to int.class.  Goodness knows how many time this                
            </comment>
            <comment line="1134">
                Find a method in RequiredModelMBean as determined by the given
                parameters.  Return null if there is none, or if the parameters                
            </comment>
            <comment line="1177">
                Invoke the given method, and throw the somewhat unpredictable
                 appropriate exception if the method itself gets an exception.                
            </comment>
            <comment line="1228">
                Cache the result of an operation in the descriptor, if that is
                 called for by the descriptor&apos;s configuration.  Note that we
                 don&apos;t remember operation parameters when caching the result, so
                 this is unlikely to be useful if there are any.                
            </comment>
            <comment line="1275">
                Determine whether the given name is the name of a public method
                 in this class.  This is only an optimization: it prevents us
                 from trying to do argument type lookups and reflection on a
                 method that will obviously fail because it has the wrong name.
                
                 The first time this method is called we do the reflection, and
                 every other time we reuse the remembered values.
                
                 It&apos;s conceivable that the (possibly malicious) first caller
                 doesn&apos;t have the required permissions to do reflection, in
                 which case we don&apos;t touch anything so as not to interfere
                 with a later permissionful caller.                
            </comment>
            <comment line="2014">
                                
            </comment>
            <comment line="2015">
                                
            </comment>
            <comment line="2762">
                                
            </comment>
            <comment line="2763">
                                
            </comment>
            <comment line="2764">
                                
            </comment>
            <implements interface="ModelMBean"/>
            <implements interface="MBeanRegistration"/>
            <implements interface="NotificationEmitter"/>
            <javadoc line="85">
                This class is the implementation of a ModelMBean. An appropriate
                  implementation of a ModelMBean must be shipped with every JMX Agent
                  and the class must be named RequiredModelMBean.
                  &lt;P&gt;
                  Java resources wishing to be manageable instantiate the
                  RequiredModelMBean using the MBeanServer&apos;s createMBean method.
                  The resource then sets the MBeanInfo and Descriptors for the
                  RequiredModelMBean instance. The attributes and operations exposed
                  via the ModelMBeanInfo for the ModelMBean are accessible
                  from MBeans, connectors/adaptors like other MBeans. Through the
                  Descriptors, values and methods in the managed application can be
                  defined and mapped to attributes and operations of the ModelMBean.
                  This mapping can be defined in an XML formatted file or dynamically and
                  programmatically at runtime.
                  &lt;P&gt;
                  Every RequiredModelMBean which is instantiated in the MBeanServer
                  becomes manageable:&lt;br&gt;
                  its attributes and operations become remotely accessible through the
                  connectors/adaptors connected to that MBeanServer.
                  &lt;P&gt;
                  A Java object cannot be registered in the MBeanServer unless it is a
                  JMX compliant MBean. By instantiating a RequiredModelMBean, resources
                  are guaranteed that the MBean is valid.
                  MBeanException and RuntimeOperationsException must be thrown on every
                  public method.  This allows for wrapping exceptions from distributed
                  communications (RMI, EJB, etc.)                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="modelMBeanInfo" type="ModelMBeanInfo" line="122"/>
            <javadoc line="122">
                                
            </javadoc>
            <declaration name="generalBroadcaster" type="NotificationBroadcasterSupport" line="127"/>
            <declaration name="attributeBroadcaster" type="NotificationBroadcasterSupport" line="130"/>
            <declaration name="managedResource" type="Object" line="134"/>
            <declaration name="registered" type="boolean" line="138"/>
            <declaration name="server" type="MBeanServer" line="139"/>
            <javadoc line="145">
                Constructs an &lt;CODE&gt;RequiredModelMBean&lt;/CODE&gt; with an empty
                  ModelMBeanInfo.
                  &lt;P&gt;
                  The RequiredModelMBean&apos;s MBeanInfo and Descriptors
                  can be customized using the {@link #setModelMBeanInfo} method.
                  After the RequiredModelMBean&apos;s MBeanInfo and Descriptors are
                  customized, the RequiredModelMBean can be registered with
                  the MBeanServer.                
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a {@link RuntimeException} during the construction of the object.                    
                </exception>
            </javadoc>
            <method name="RequiredModelMBean" type="constructor" line="161">
                <scope line="162"/>
                <scope line="168"/>
            </method>
            <javadoc line="175">
                Constructs a RequiredModelMBean object using ModelMBeanInfo passed in.
                  As long as the RequiredModelMBean is not registered
                  with the MBeanServer yet, the RequiredModelMBean&apos;s MBeanInfo and
                  Descriptors can be customized using the {@link #setModelMBeanInfo}method.
                  After the RequiredModelMBean&apos;s MBeanInfo and Descriptors are
                  customized, the RequiredModelMBean can be registered with the
                  MBeanServer.                
                <param>
                    mbi The ModelMBeanInfo object to be used by the
                      RequiredModelMBean. The given ModelMBeanInfo is cloned
                      and modified as specified by {@link #setModelMBeanInfo}                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an
                      {link java.lang.IllegalArgumentException}:
                      The MBeanInfo passed in parameter is null.                    
                </exception>
            </javadoc>
            <method name="RequiredModelMBean" type="constructor" line="196">
                <params>
                    <param name="mbi" type="ModelMBeanInfo"/>
                </params>
                <scope line="198"/>
                <scope line="205"/>
            </method>
            <javadoc line="217">
                Initializes a ModelMBean object using ModelMBeanInfo passed in.
                  This method makes it possible to set a customized ModelMBeanInfo on
                  the ModelMBean as long as it is not registered with the MBeanServer.
                  &lt;br&gt;
                  Once the ModelMBean&apos;s ModelMBeanInfo (with Descriptors) are
                  customized and set on the ModelMBean, the  ModelMBean be
                  registered with the MBeanServer.
                  &lt;P&gt;
                  If the ModelMBean is currently registered, this method throws
                  a {@link javax.management.RuntimeOperationsException} wrapping an{@link IllegalStateException}&lt;P&gt;
                  If the given &lt;var&gt;inModelMBeanInfo&lt;/var&gt; does not contain any{@link ModelMBeanNotificationInfo} for the &lt;code&gt;GENERIC&lt;/code&gt;
                  or &lt;code&gt;ATTRIBUTE_CHANGE&lt;/code&gt; notifications, then the
                  RequiredModelMBean will supply its own default{@link ModelMBeanNotificationInfo ModelMBeanNotificationInfo}s for
                  those missing notifications.                
                <param>
                    mbi The ModelMBeanInfo object to be used
                      by the ModelMBean.                    
                </param>
                <exception>
                    MBeanException Wraps a distributed communication
                      Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException<ul><li>Wraps an {@link IllegalArgumentException} if
                      the MBeanInfo passed in parameter is null.</li>
                      <li>Wraps an {@link IllegalStateException} if the ModelMBean
                      is currently registered in the MBeanServer.</li>
                      </ul>                    
                </exception>
            </javadoc>
            <method name="setModelMBeanInfo" type="void" line="251">
                <params>
                    <param name="mbi" type="ModelMBeanInfo"/>
                </params>
                <scope line="253"/>
                <scope line="259">
                    <scope line="260"/>
                    <declaration name="x" type="RuntimeException" line="266"/>
                    <declaration name="exceptionText" type="String" line="268"/>
                </scope>
                <scope line="274">
                    <scope line="275"/>
                    <declaration name="exceptionText" type="String" line="281"/>
                    <declaration name="x" type="RuntimeException" line="284"/>
                </scope>
                <scope line="289"/>
                <scope line="303"/>
            </method>
            <javadoc line="315">
                Sets the instance handle of the object against which to
                  execute all methods in this ModelMBean management interface
                  (MBeanInfo and Descriptors).                
                <param>
                    mr Object that is the managed resource                    
                </param>
                <param>
                    mr_type The type of reference for the managed resource.
                      <br>Can be: "ObjectReference", "Handle", "IOR", "EJBHandle",
                      or "RMIReference".
                      <br>In this implementation only "ObjectReference" is supported.                    
                </param>
                <exception>
                    MBeanException The initializer of the object has
                      thrown an exception.                    
                </exception>
                <exception>
                    InstanceNotFoundException The managed resource
                      object could not be found                    
                </exception>
                <exception>
                    InvalidTargetObjectTypeException The managed
                      resource type should be "ObjectReference".                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps a {@link RuntimeException} when setting the resource.                    
                </exception>
            </javadoc>
            <method name="setManagedResource" type="void" line="337">
                <params>
                    <param name="mr" type="Object"/>
                    <param name="mr_type" type="String"/>
                </params>
                <comment line="344">
                    check that the mr_type is supported by this JMXAgent                    
                </comment>
                <comment line="345">
                    only &quot;objectReference&quot; is supported                    
                </comment>
                <scope line="338"/>
                <scope line="347">
                    <scope line="348"/>
                </scope>
                <scope line="357"/>
                <scope line="365"/>
            </method>
            <javadoc line="372">
                &lt;p&gt;Instantiates this MBean instance with the data found for
                  the MBean in the persistent store.  The data loaded could include
                  attribute and operation values.&lt;/p&gt;
                  &lt;p&gt;This method should be called during construction or
                  initialization of this instance, and before the MBean is
                  registered with the MBeanServer.&lt;/p&gt;
                  &lt;p&gt;If the implementation of this class does not support
                  persistence, an {@link MBeanException} wrapping a {@link ServiceNotFoundException} is thrown.&lt;/p&gt;                
                <exception>
                    MBeanException Wraps another exception, or
                      persistence is not supported                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps exceptions from the
                      persistence mechanism                    
                </exception>
                <exception>
                    InstanceNotFoundException Could not find or load
                      this MBean from persistent storage                    
                </exception>
            </javadoc>
            <method name="load" type="void" line="394">
                <declaration name="x" type="ServiceNotFoundException" line="395"/>
            </method>
            <javadoc line="400">
                &lt;p&gt;Captures the current state of this MBean instance and writes
                  it out to the persistent store.  The state stored could include
                  attribute and operation values.&lt;/p&gt;
                  &lt;p&gt;If the implementation of this class does not support
                  persistence, an {@link MBeanException} wrapping a {@link ServiceNotFoundException} is thrown.&lt;/p&gt;
                  &lt;p&gt;Persistence policy from the MBean and attribute descriptor
                  is used to guide execution of this method. The MBean should be
                  stored if &apos;persistPolicy&apos; field is:&lt;/p&gt;
                  &lt;PRE&gt;  != &quot;never&quot;
                  = &quot;always&quot;
                  = &quot;onTimer&quot; and now &gt; &apos;lastPersistTime&apos; + &apos;persistPeriod&apos;
                  = &quot;NoMoreOftenThan&quot; and now &gt; &apos;lastPersistTime&apos; + &apos;persistPeriod&apos;
                  = &quot;onUnregister&quot;
                  &lt;/PRE&gt;
                  &lt;p&gt;Do not store the MBean if &apos;persistPolicy&apos; field is:&lt;/p&gt;
                  &lt;PRE&gt;
                  = &quot;never&quot;
                  = &quot;onUpdate&quot;
                  = &quot;onTimer&quot; &amp;&amp; now &lt; &apos;lastPersistTime&apos; + &apos;persistPeriod&apos;
                  &lt;/PRE&gt;                
                <exception>
                    MBeanException Wraps another exception, or
                      persistence is not supported                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps exceptions from the
                      persistence mechanism                    
                </exception>
                <exception>
                    InstanceNotFoundException Could not find/access the
                      persistent store                    
                </exception>
            </javadoc>
            <method name="store" type="void" line="436">
                <declaration name="x" type="ServiceNotFoundException" line="437"/>
            </method>
            <javadoc line="446">
                The resolveForCacheValue method checks the descriptor passed in to
                  see if there is a valid cached value in the descriptor.
                  The valid value will be in the &apos;value&apos; field if there is one.
                  If the &apos;currencyTimeLimit&apos; field in the descriptor is:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;b&gt;&amp;lt;0&lt;/b&gt; Then the value is not cached and is never valid.
                  Null is returned. The &apos;value&apos; and &apos;lastUpdatedTimeStamp&apos;
                  fields are cleared.&lt;/li&gt;
                  &lt;li&gt;&lt;b&gt;=0&lt;/b&gt; Then the value is always cached and always valid.
                  The &apos;value&apos; field is returned.
                  The &apos;lastUpdatedTimeStamp&apos; field is not checked.&lt;/li&gt;
                  &lt;li&gt;&lt;b&gt;&amp;gt;0&lt;/b&gt; Represents the number of seconds that the
                  &apos;value&apos; field is valid.
                  The &apos;value&apos; field is no longer valid when
                  &apos;lastUpdatedTimeStamp&apos; + &apos;currencyTimeLimit&apos; &amp;gt; Now.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;li&gt;When &apos;value&apos; is valid, &apos;valid&apos; is returned.&lt;/li&gt;
                  &lt;li&gt;When &apos;value&apos; is no longer valid then null is returned and
                  &apos;value&apos; and &apos;lastUpdatedTimeStamp&apos; fields are cleared.&lt;/li&gt;                
            </javadoc>
            <method name="resolveForCacheValue" type="Object" line="469">
                <params>
                    <param name="descr" type="Descriptor"/>
                </params>
                <comment line="504">
                    return response;                    
                </comment>
                <comment line="532">
                    convert seconds to milliseconds for time comparison                    
                </comment>
                <comment line="535">
                                        
                </comment>
                <comment line="544">
                                        
                </comment>
                <comment line="589">
                                        
                </comment>
                <comment line="610">
                                        
                </comment>
                <comment line="612">
                                        
                </comment>
                <comment line="630">
                                        
                </comment>
                <declaration name="tracing" type="boolean" line="471"/>
                <declaration name="mth" type="String" line="472"/>
                <scope line="473"/>
                <declaration name="response" type="Object" line="478"/>
                <declaration name="resetValue" type="boolean" line="479"/>
                <declaration name="currencyPeriod" type="long" line="480"/>
                <scope line="482">
                    <scope line="483"/>
                </scope>
                <scope line="491"/>
                <declaration name="mmbDescr" type="Descriptor" line="497"/>
                <scope line="498">
                    <scope line="499"/>
                </scope>
                <declaration name="objExpTime" type="Object" line="507"/>
                <declaration name="expTime" type="String" line="509"/>
                <scope line="510"/>
                <scope line="512"/>
                <scope line="516">
                    <scope line="518"/>
                    <scope line="520"/>
                </scope>
                <scope line="525">
                    <scope line="526"/>
                    <scope line="534">
                        <scope line="538"/>
                    </scope>
                    <scope line="543">
                        <scope line="547"/>
                    </scope>
                    <scope line="552">
                        <declaration name="objtStamp" type="Object" line="553"/>
                        <declaration name="tStamp" type="String" line="556"/>
                        <scope line="560"/>
                        <declaration name="lastTime" type="long" line="569"/>
                        <scope line="571"/>
                        <declaration name="now" type="long" line="578"/>
                        <scope line="580">
                            <scope line="583"/>
                        </scope>
                        <scope line="589">
                            <scope line="592"/>
                        </scope>
                    </scope>
                    <scope line="600"/>
                    <scope line="607">
                        <declaration name="currValue" type="Object" line="608"/>
                        <scope line="609">
                            <scope line="613"/>
                        </scope>
                        <scope line="619">
                            <scope line="621"/>
                        </scope>
                    </scope>
                    <scope line="629">
                        <scope line="635"/>
                    </scope>
                </scope>
                <scope line="643"/>
            </method>
            <javadoc line="651">
                Returns the attributes, operations, constructors and notifications
                  that this RequiredModelMBean exposes for management.                
                <return>
                    An instance of ModelMBeanInfo allowing retrieval all
                      attributes, operations, and Notifications of this MBean.                    
                </return>
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="659">
                <comment line="674">
                    return new ModelMBeanInfo(&quot; &quot;, &quot;&quot;, null, null, null, null);                    
                </comment>
                <scope line="661"/>
                <scope line="667">
                    <scope line="668"/>
                </scope>
                <scope line="677"/>
            </method>
            <method name="printModelMBeanInfo" type="String" line="691">
                <params>
                    <param name="info" type="ModelMBeanInfo"/>
                </params>
                <declaration name="retStr" type="StringBuilder" line="692"/>
                <scope line="693">
                    <scope line="694"/>
                </scope>
                <scope line="709"/>
                <scope line="712"/>
                <declaration name="attrInfo" type="MBeanAttributeInfo[]" line="718"/>
                <scope line="719">
                    <scope line="720">
                        <declaration name="attInfo" type="ModelMBeanAttributeInfo" line="721"/>
                    </scope>
                </scope>
                <scope line="731"/>
                <declaration name="constrInfo" type="MBeanConstructorInfo[]" line="736"/>
                <scope line="737">
                    <scope line="738">
                        <declaration name="ctorInfo" type="ModelMBeanConstructorInfo" line="739"/>
                    </scope>
                </scope>
                <scope line="750"/>
                <declaration name="opsInfo" type="MBeanOperationInfo[]" line="755"/>
                <scope line="756">
                    <scope line="757">
                        <declaration name="operInfo" type="ModelMBeanOperationInfo" line="758"/>
                    </scope>
                </scope>
                <scope line="768"/>
                <declaration name="notifInfo" type="MBeanNotificationInfo[]" line="774"/>
                <scope line="775">
                    <scope line="776">
                        <declaration name="nInfo" type="ModelMBeanNotificationInfo" line="777"/>
                    </scope>
                </scope>
                <scope line="784"/>
            </method>
            <javadoc line="793">
                Invokes a method on or through a RequiredModelMBean and returns
                  the result of the method execution.
                  &lt;P&gt;
                  If the given method to be invoked, together with the provided
                  signature, matches one of RequiredModelMbean
                  accessible methods, this one will be call. Otherwise the call to
                  the given method will be tried on the managed resource.
                  &lt;P&gt;
                  The last value returned by an operation may be cached in
                  the operation&apos;s descriptor which
                  is in the ModelMBeanOperationInfo&apos;s descriptor.
                  The valid value will be in the &apos;value&apos; field if there is one.
                  If the &apos;currencyTimeLimit&apos; field in the descriptor is:
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;b&gt;&amp;lt;0&lt;/b&gt; Then the value is not cached and is never valid.
                  The operation method is invoked.
                  The &apos;value&apos; and &apos;lastUpdatedTimeStamp&apos; fields are cleared.&lt;/LI&gt;
                  &lt;LI&gt;&lt;b&gt;=0&lt;/b&gt; Then the value is always cached and always valid.
                  The &apos;value&apos; field is returned. If there is no &apos;value&apos; field
                  then the operation method is invoked for the attribute.
                  The &apos;lastUpdatedTimeStamp&apos; field and `value&apos; fields are set to
                  the operation&apos;s return value and the current time stamp.&lt;/LI&gt;
                  &lt;LI&gt;&lt;b&gt;&amp;gt;0&lt;/b&gt; Represents the number of seconds that the &apos;value&apos;
                  field is valid.
                  The &apos;value&apos; field is no longer valid when
                  &apos;lastUpdatedTimeStamp&apos; + &apos;currencyTimeLimit&apos; &amp;gt; Now.
                  &lt;UL&gt;
                  &lt;LI&gt;When &apos;value&apos; is valid, &apos;value&apos; is returned.&lt;/LI&gt;
                  &lt;LI&gt;When &apos;value&apos; is no longer valid then the operation
                  method is invoked. The &apos;lastUpdatedTimeStamp&apos; field
                  and `value&apos; fields are updated.&lt;/lI&gt;
                  &lt;/UL&gt;
                  &lt;/LI&gt;
                  &lt;/UL&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; because of inconsistencies in previous versions of
                  this specification, it is recommended not to use negative or zero
                  values for &lt;code&gt;currencyTimeLimit&lt;/code&gt;.  To indicate that a
                  cached value is never valid, omit the
                  &lt;code&gt;currencyTimeLimit&lt;/code&gt; field.  To indicate that it is
                  always valid, use a very large number for this field.&lt;/p&gt;                
                <param>
                    opName The name of the method to be invoked. The
                      name can be the fully qualified method name including the
                      classname, or just the method name if the classname is
                      defined in the 'class' field of the operation descriptor.                    
                </param>
                <param>
                    opArgs An array containing the parameters to be set
                      when the operation is invoked                    
                </param>
                <param>
                    sig An array containing the signature of the
                      operation. The class objects will be loaded using the same
                      class loader as the one used for loading the MBean on which
                      the operation was invoked.                    
                </param>
                <return>
                    The object returned by the method, which represents the
                      result of invoking the method on the specified managed resource.                    
                </return>
                <exception>
                    MBeanException  Wraps one of the following Exceptions:
                      <UL>
                      <LI> An Exception thrown by the managed object's invoked method.</LI>
                      <LI> {@link ServiceNotFoundException}: No ModelMBeanOperationInfo or
                      no descriptor defined for the specified operation or the managed
                      resource is null.</LI>
                      <LI> {@link InvalidTargetObjectTypeException}: The 'targetType'
                      field value is not 'objectReference'.</LI>
                      </UL>                    
                </exception>
                <exception>
                    ReflectionException  Wraps an {@link java.lang.Exception}thrown while trying to invoke the method.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException} Method name is null.                    
                </exception>
            </javadoc>
            <method name="invoke" type="Object" line="901">
                <params>
                    <param name="opName" type="String"/>
                    <param name="opArgs" type="Object[]"/>
                    <param name="sig" type="String[]"/>
                </params>
                <comment line="865">
                    The requirement to be able to invoke methods on the
                    RequiredModelMBean class itself makes this method considerably
                    more complicated than it might otherwise be.  Note that, unlike
                    earlier versions, we do not allow you to invoke such methods if
                    they are not explicitly mentioned in the ModelMBeanInfo.  Doing
                    so was potentially a security problem, and certainly very
                    surprising.
                    
                    We do not look for the method in the RequiredModelMBean class
                    itself if:
                    (a) there is a &quot;targetObject&quot; field in the Descriptor for the
                    operation; or
                    (b) there is a &quot;class&quot; field in the Descriptor for the operation
                    and the named class is not RequiredModelMBean or one of its
                    superinterfaces; or
                    (c) the name of the operation is not the name of a method in
                    RequiredModelMBean (this is just an optimization).
                    
                    In cases (a) and (b), if you have gone to the trouble of adding
                    those fields specifically for this operation then presumably you
                    do not want RequiredModelMBean&apos;s methods to be called.
                    
                    We have to pay attention to class loading issues.  If the
                    &quot;class&quot; field is present, the named class has to be resolved
                    relative to RequiredModelMBean&apos;s class loader to test the
                    condition (b) above, and relative to the managed resource&apos;s
                    class loader to ensure that the managed resource is in fact of
                    the named class (or a subclass).  The class names in the sig
                    array likewise have to be resolved, first against
                    RequiredModelMBean&apos;s class loader, then against the managed
                    resource&apos;s class loader.  There is no point in using any other
                    loader because when we call Method.invoke we must call it on
                    a Method that is implemented by the target object.                    
                </comment>
                <comment line="922">
                    Parse for class name and method                    
                </comment>
                <comment line="930">
                    Ignore anything after a left paren.  We keep this for                    
                </comment>
                <comment line="969">
                    may still be null now                    
                </comment>
                <comment line="994">
                    Now look for the method, either in RequiredModelMBean itself
                    or in the target object.  Set &quot;method&quot; and &quot;targetObject&quot;                    
                </comment>
                <declaration name="tracing" type="boolean" line="903"/>
                <declaration name="mth" type="String" line="904"/>
                <scope line="906"/>
                <scope line="911">
                    <declaration name="x" type="RuntimeException" line="912"/>
                </scope>
                <declaration name="opClassName" type="String" line="919"/>
                <declaration name="opMethodName" type="String" line="920"/>
                <declaration name="opSplitter" type="int" line="923"/>
                <scope line="924"/>
                <scope line="936"/>
                <declaration name="opInfo" type="ModelMBeanOperationInfo" line="942"/>
                <scope line="944">
                    <declaration name="msg" type="String" line="945"/>
                </scope>
                <declaration name="opDescr" type="Descriptor" line="950"/>
                <scope line="951">
                    <declaration name="msg" type="String" line="952"/>
                </scope>
                <declaration name="cached" type="Object" line="956"/>
                <scope line="957">
                    <scope line="958"/>
                </scope>
                <scope line="972">
                    <declaration name="msg" type="String" line="973"/>
                </scope>
                <declaration name="targetTypeField" type="String" line="978"/>
                <scope line="981">
                    <declaration name="msg" type="String" line="982"/>
                </scope>
                <declaration name="targetObjectField" type="Object" line="988"/>
                <declaration name="method" type="Method" line="997"/>
                <declaration name="targetObject" type="Object" line="998"/>
                <scope line="1005">
                    <scope line="1006"/>
                    <scope line="1013">
                        <scope line="1015">
                            <declaration name="msg" type="String" line="1016"/>
                            <declaration name="snfe" type="Exception" line="1019"/>
                        </scope>
                    </scope>
                    <declaration name="targetClass" type="Class&lt;?&gt;" line="1024"/>
                    <scope line="1026">
                        <scope line="1027">
                            <declaration name="targetClassLoader" type="ClassLoader" line="1028"/>
                        </scope>
                        <scope line="1032">
                            <declaration name="msg" type="String" line="1033"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1043"/>
                <declaration name="result" type="Object" line="1049"/>
                <scope line="1052"/>
            </method>
            <method name="resolveMethod" type="Method" line="1067">
                <params>
                    <param name="targetClass" type="Class<?>"/>
                    <param name="opMethodName" type="String"/>
                    <param name="sig" type="String[]"/>
                </params>
                <declaration name="tracing" type="boolean" line="1068"/>
                <scope line="1070"/>
                <declaration name="argClasses" type="Class&lt;?&gt;[]" line="1076"/>
                <scope line="1080">
                    <declaration name="targetClassLoader" type="ClassLoader" line="1081"/>
                    <scope line="1083">
                        <scope line="1084"/>
                        <scope line="1090">
                            <scope line="1091"/>
                            <scope line="1094">
                                <scope line="1095"/>
                                <declaration name="msg" type="String" line="1101"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="1108"/>
                <scope line="1110">
                    <declaration name="msg" type="String" line="1111"/>
                </scope>
            </method>
            <declaration name="primitiveClasses" type="Class&lt;?&gt;[]" line="1120"/>
            <declaration name="primitiveClassMap" type="Map&lt;String,Class&lt;?&gt;&gt;" line="1124"/>
            <scope line="1126">
                <scope line="1127">
                    <declaration name="c" type="Class&lt;?&gt;" line="1128"/>
                </scope>
            </scope>
            <method name="findRMMBMethod" type="Method" line="1139">
                <params>
                    <param name="opMethodName" type="String"/>
                    <param name="targetObjectField" type="Object"/>
                    <param name="opClassName" type="String"/>
                    <param name="sig" type="String[]"/>
                </params>
                <declaration name="tracing" type="boolean" line="1140"/>
                <scope line="1142"/>
                <declaration name="rmmbClass" type="Class&lt;RequiredModelMBean&gt;" line="1153"/>
                <declaration name="targetClass" type="Class&lt;?&gt;" line="1154"/>
                <scope line="1157">
                    <scope line="1158">
                        <declaration name="targetClassLoader" type="ClassLoader" line="1159"/>
                    </scope>
                    <scope line="1165"/>
                </scope>
                <scope line="1169"/>
                <scope line="1171"/>
            </method>
            <method name="invokeMethod" type="Object" line="1182">
                <params>
                    <param name="opName" type="String"/>
                    <param name="method" type="Method"/>
                    <param name="targetObject" type="Object"/>
                    <param name="opArgs" type="Object[]"/>
                </params>
                <scope line="1183"/>
                <scope line="1186"/>
                <scope line="1190"/>
                <scope line="1194"/>
                <scope line="1199">
                    <declaration name="mmbTargEx" type="Throwable" line="1200"/>
                    <scope line="1201"/>
                    <scope line="1205"/>
                    <scope line="1209"/>
                    <scope line="1211"/>
                </scope>
                <scope line="1216"/>
                <scope line="1220"/>
            </method>
            <method name="cacheResult" type="void" line="1235">
                <params>
                    <param name="opInfo" type="ModelMBeanOperationInfo"/>
                    <param name="opDescr" type="Descriptor"/>
                    <param name="result" type="Object"/>
                </params>
                <declaration name="mmbDesc" type="Descriptor" line="1237"/>
                <declaration name="objctl" type="Object" line="1240"/>
                <declaration name="ctl" type="String" line="1242"/>
                <scope line="1243"/>
                <scope line="1245"/>
                <scope line="1248">
                    <scope line="1251"/>
                    <scope line="1253"/>
                </scope>
                <scope line="1257">
                    <scope line="1265"/>
                </scope>
            </method>
            <declaration name="rmmbMethodNames" type="Set&lt;String&gt;" line="1288"/>
            <method name="isRMMBMethodName" type="boolean" line="1289">
                <params>
                    <param name="name" type="String"/>
                </params>
                <comment line="1299">
                    This is only an optimization so we&apos;ll go on to discover                    
                </comment>
                <comment line="1300">
                    whether the name really is an RMMB method.                    
                </comment>
                <scope line="1290">
                    <scope line="1291">
                        <declaration name="names" type="Set&lt;String&gt;" line="1292"/>
                        <declaration name="methods" type="Method[]" line="1293"/>
                    </scope>
                    <scope line="1297"/>
                </scope>
            </method>
            <javadoc line="1306">
                Returns the value of a specific attribute defined for this
                  ModelMBean.
                  The last value returned by an attribute may be cached in the
                  attribute&apos;s descriptor.
                  The valid value will be in the &apos;value&apos; field if there is one.
                  If the &apos;currencyTimeLimit&apos; field in the descriptor is:
                  &lt;UL&gt;
                  &lt;LI&gt;  &lt;b&gt;&amp;lt;0&lt;/b&gt; Then the value is not cached and is never valid.
                  The getter method is invoked for the attribute.
                  The &apos;value&apos; and &apos;lastUpdatedTimeStamp&apos; fields are cleared.&lt;/LI&gt;
                  &lt;LI&gt;  &lt;b&gt;=0&lt;/b&gt; Then the value is always cached and always valid.
                  The &apos;value&apos; field is returned. If there is no&apos;value&apos; field
                  then the getter method is invoked for the attribute.
                  The &apos;lastUpdatedTimeStamp&apos; field and `value&apos; fields are set
                  to the attribute&apos;s value and the current time stamp.&lt;/LI&gt;
                  &lt;LI&gt;  &lt;b&gt;&amp;gt;0&lt;/b&gt; Represents the number of seconds that the &apos;value&apos;
                  field is valid.
                  The &apos;value&apos; field is no longer valid when
                  &apos;lastUpdatedTimeStamp&apos; + &apos;currencyTimeLimit&apos; &amp;gt; Now.
                  &lt;UL&gt;
                  &lt;LI&gt;When &apos;value&apos; is valid, &apos;value&apos; is returned.&lt;/LI&gt;
                  &lt;LI&gt;When &apos;value&apos; is no longer valid then the getter
                  method is invoked for the attribute.
                  The &apos;lastUpdatedTimeStamp&apos; field and `value&apos; fields
                  are updated.&lt;/LI&gt;
                  &lt;/UL&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; because of inconsistencies in previous versions of
                  this specification, it is recommended not to use negative or zero
                  values for &lt;code&gt;currencyTimeLimit&lt;/code&gt;.  To indicate that a
                  cached value is never valid, omit the
                  &lt;code&gt;currencyTimeLimit&lt;/code&gt; field.  To indicate that it is
                  always valid, use a very large number for this field.&lt;/p&gt;
                  &lt;p&gt;If the &apos;getMethod&apos; field contains the name of a valid
                  operation descriptor, then the method described by the
                  operation descriptor is executed.  The response from the
                  method is returned as the value of the attribute.  If the
                  operation fails or the returned value is not compatible with
                  the declared type of the attribute, an exception will be thrown.&lt;/p&gt;
                  &lt;p&gt;If no &apos;getMethod&apos; field is defined then the default value of the
                  attribute is returned. If the returned value is not compatible with
                  the declared type of the attribute, an exception will be thrown.&lt;/p&gt;
                  &lt;p&gt;The declared type of the attribute is the String returned by{@link ModelMBeanAttributeInfo#getType()}.  A value is compatible
                  with this type if one of the following is true:
                  &lt;ul&gt;
                  &lt;li&gt;the value is null;&lt;/li&gt;
                  &lt;li&gt;the declared name is a primitive type name (such as &quot;int&quot;)
                  and the value is an instance of the corresponding wrapper
                  type (such as java.lang.Integer);&lt;/li&gt;
                  &lt;li&gt;the name of the value&apos;s class is identical to the declared name;&lt;/li&gt;
                  &lt;li&gt;the declared name can be loaded by the value&apos;s class loader and
                  produces a class to which the value can be assigned.&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;In this implementation, in every case where the getMethod needs to
                  be called, because the method is invoked through the standard &quot;invoke&quot;
                  method and thus needs operationInfo, an operation must be specified
                  for that getMethod so that the invocation works correctly.&lt;/p&gt;                
                <param>
                    attrName A String specifying the name of the
                      attribute to be retrieved. It must match the name of a
                      ModelMBeanAttributeInfo.                    
                </param>
                <return>
                    The value of the retrieved attribute from the
                      descriptor 'value' field or from the invocation of the
                      operation in the 'getMethod' field of the descriptor.                    
                </return>
                <exception>
                    AttributeNotFoundException The specified attribute is
                      not accessible in the MBean.
                      The following cases may result in an AttributeNotFoundException:
                      <UL>
                      <LI> No ModelMBeanInfo was found for the Model MBean.</LI>
                      <LI> No ModelMBeanAttributeInfo was found for the specified
                      attribute name.</LI>
                      <LI> The ModelMBeanAttributeInfo isReadable method returns
                      'false'.</LI>
                      </UL>                    
                </exception>
                <exception>
                    MBeanException  Wraps one of the following Exceptions:
                      <UL>
                      <LI> {@link InvalidAttributeValueException}: A wrong value type
                      was received from the attribute's getter method or
                      no 'getMethod' field defined in the descriptor for
                      the attribute and no default value exists.</LI>
                      <LI> {@link ServiceNotFoundException}: No
                      ModelMBeanOperationInfo defined for the attribute's
                      getter method or no descriptor associated with the
                      ModelMBeanOperationInfo or the managed resource is
                      null.</LI>
                      <LI> {@link InvalidTargetObjectTypeException} The 'targetType'
                      field value is not 'objectReference'.</LI>
                      <LI> An Exception thrown by the managed object's getter.</LI>
                      </UL>                    
                </exception>
                <exception>
                    ReflectionException  Wraps an {@link java.lang.Exception}thrown while trying to invoke the getter.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException}: The attribute name in
                      parameter is null.                    
                </exception>
                <see>
                    #setAttribute(javax.management.Attribute)                    
                </see>
            </javadoc>
            <method name="getAttribute" type="Object" line="1414">
                <params>
                    <param name="attrName" type="String"/>
                </params>
                <comment line="1428">
                                        
                </comment>
                <comment line="1453">
                                        
                </comment>
                <comment line="1461">
                                        
                </comment>
                <comment line="1471">
                                        
                </comment>
                <comment line="1483">
                    error/validity check return value here                    
                </comment>
                <comment line="1493">
                    change cached value in attribute descriptor                    
                </comment>
                <comment line="1543">
                    response was invalid or really returned null                    
                </comment>
                <comment line="1552">
                    not getMethod so return descriptor (default) value                    
                </comment>
                <comment line="1565">
                    !! cast response to right class                    
                </comment>
                <comment line="1569">
                    make sure response class matches type field                    
                </comment>
                <comment line="1586">
                    inequality may come from primitive/wrapper class                    
                </comment>
                <comment line="1590">
                    inequality may come from type subclassing                    
                </comment>
                <comment line="1615">
                    throw exception, didn&apos;t get                    
                </comment>
                <comment line="1616">
                    back right attribute type                    
                </comment>
                <declaration name="mth" type="String" line="1420"/>
                <declaration name="tracing" type="boolean" line="1421"/>
                <scope line="1422"/>
                <declaration name="response" type="Object" line="1429"/>
                <scope line="1431">
                    <declaration name="attrInfo" type="ModelMBeanAttributeInfo" line="1437"/>
                    <declaration name="mmbDesc" type="Descriptor" line="1438"/>
                    <declaration name="attrDescr" type="Descriptor" line="1444"/>
                    <scope line="1445">
                        <scope line="1454"/>
                        <scope line="1460">
                            <scope line="1462"/>
                            <declaration name="attrGetMethod" type="String" line="1467"/>
                            <scope line="1470">
                                <scope line="1472"/>
                                <declaration name="getResponse" type="Object" line="1478"/>
                                <scope line="1482">
                                    <scope line="1484"/>
                                    <declaration name="objctl" type="Object" line="1494"/>
                                    <declaration name="ctl" type="String" line="1497"/>
                                    <scope line="1501"/>
                                    <scope line="1508">
                                        <scope line="1509"/>
                                        <declaration name="stamp" type="String" line="1517"/>
                                        <scope line="1524">
                                            <declaration name="attStr" type="String" line="1532"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="1542">
                                    <scope line="1544"/>
                                </scope>
                            </scope>
                            <scope line="1551">
                                <declaration name="qualifier" type="String" line="1553"/>
                                <scope line="1555"/>
                                <scope line="1559"/>
                            </scope>
                        </scope>
                        <declaration name="respType" type="String" line="1570"/>
                        <scope line="1571">
                            <declaration name="responseClass" type="String" line="1572"/>
                            <scope line="1573">
                                <declaration name="wrongType" type="boolean" line="1574"/>
                                <declaration name="primitiveType" type="boolean" line="1575"/>
                                <declaration name="correspondingTypes" type="boolean" line="1576"/>
                                <scope line="1577">
                                    <scope line="1578"/>
                                </scope>
                                <scope line="1585"/>
                                <scope line="1589">
                                    <declaration name="subtype" type="boolean" line="1591"/>
                                    <scope line="1592">
                                        <declaration name="cl" type="ClassLoader" line="1593"/>
                                        <declaration name="c" type="Class&lt;?&gt;" line="1595"/>
                                    </scope>
                                    <scope line="1597">
                                        <scope line="1600"/>
                                    </scope>
                                </scope>
                                <scope line="1609">
                                    <scope line="1610"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1625">
                        <scope line="1626"/>
                    </scope>
                </scope>
                <scope line="1640"/>
                <scope line="1642"/>
                <scope line="1644">
                    <scope line="1645"/>
                </scope>
                <scope line="1655"/>
            </method>
            <javadoc line="1663">
                Returns the values of several attributes in the ModelMBean.
                  Executes a getAttribute for each attribute name in the
                  attrNames array passed in.                
                <param>
                    attrNames A String array of names of the attributes
                      to be retrieved.                    
                </param>
                <return>
                    The array of the retrieved attributes.                    
                </return>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException}: The object name in parameter is
                      null or attributes in parameter is null.                    
                </exception>
                <see>
                    #setAttributes(javax.management.AttributeList)                    
                </see>
            </javadoc>
            <method name="getAttributes" type="AttributeList" line="1679">
                <params>
                    <param name="attrNames" type="String[]"/>
                </params>
                <comment line="1698">
                    eat exceptions because interface doesn&apos;t have an                    
                </comment>
                <comment line="1699">
                    exception on it                    
                </comment>
                <scope line="1680"/>
                <declaration name="responseList" type="AttributeList" line="1692"/>
                <scope line="1693">
                    <scope line="1694"/>
                    <scope line="1697">
                        <scope line="1700"/>
                    </scope>
                </scope>
                <scope line="1709"/>
            </method>
            <javadoc line="1718">
                Sets the value of a specific attribute of a named ModelMBean.
                  If the &apos;setMethod&apos; field of the attribute&apos;s descriptor
                  contains the name of a valid operation descriptor, then the
                  method described by the operation descriptor is executed.
                  In this implementation, the operation descriptor must be specified
                  correctly and assigned to the modelMBeanInfo so that the &apos;setMethod&apos;
                  works correctly.
                  The response from the method is set as the value of the attribute
                  in the descriptor.
                  &lt;p&gt;If currencyTimeLimit is &amp;gt; 0, then the new value for the
                  attribute is cached in the attribute descriptor&apos;s
                  &apos;value&apos; field and the &apos;lastUpdatedTimeStamp&apos; field is set to
                  the current time stamp.
                  &lt;p&gt;If the persist field of the attribute&apos;s descriptor is not null
                  then Persistence policy from the attribute descriptor is used to
                  guide storing the attribute in a persistent store.
                  &lt;br&gt;Store the MBean if &apos;persistPolicy&apos; field is:
                  &lt;UL&gt;
                  &lt;Li&gt; != &quot;never&quot;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;always&quot;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;onUpdate&quot;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;onTimer&quot; and now &amp;gt; &apos;lastPersistTime&apos; + &apos;persistPeriod&apos;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;NoMoreOftenThan&quot; and now &amp;gt; &apos;lastPersistTime&apos; +
                  &apos;persistPeriod&apos;&lt;/Li&gt;
                  &lt;/UL&gt;
                  Do not store the MBean if &apos;persistPolicy&apos; field is:
                  &lt;UL&gt;
                  &lt;Li&gt; = &quot;never&quot;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;onTimer&quot; &amp;&amp; now &amp;lt; &apos;lastPersistTime&apos; + &apos;persistPeriod&apos;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;onUnregister&quot;&lt;/Li&gt;
                  &lt;Li&gt; = &quot;NoMoreOftenThan&quot; and now &amp;lt; &apos;lastPersistTime&apos; +
                  &apos;persistPeriod&apos;&lt;/Li&gt;
                  &lt;/UL&gt;
                  &lt;p&gt;The ModelMBeanInfo of the Model MBean is stored in a file.                
                <param>
                    attribute The Attribute instance containing the name of
                      the attribute to be set and the value it is to be set to.                    
                </param>
                <exception>
                    AttributeNotFoundException The specified attribute is
                      not accessible in the MBean.
                      <br>The following cases may result in an AttributeNotFoundException:
                      <UL>
                      <LI> No ModelMBeanAttributeInfo is found for the specified
                      attribute.</LI>
                      <LI> The ModelMBeanAttributeInfo's isWritable method returns
                      'false'.</LI>
                      </UL>                    
                </exception>
                <exception>
                    InvalidAttributeValueException No descriptor is defined
                      for the specified attribute.                    
                </exception>
                <exception>
                    MBeanException Wraps one of the following Exceptions:
                      <UL>
                      <LI> An Exception thrown by the managed object's setter.</LI>
                      <LI> A {@link ServiceNotFoundException} if a setMethod field is
                      defined in the descriptor for the attribute and the managed
                      resource is null; or if no setMethod field is defined and
                      caching is not enabled for the attribute.
                      Note that if there is no getMethod field either, then caching
                      is automatically enabled.</LI>
                      <LI> {@link InvalidTargetObjectTypeException} The 'targetType'
                      field value is not 'objectReference'.</LI>
                      <LI> An Exception thrown by the managed object's getter.</LI>
                      </UL>                    
                </exception>
                <exception>
                    ReflectionException  Wraps an {@link java.lang.Exception}thrown while trying to invoke the setter.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException}: The attribute in parameter is
                      null.                    
                </exception>
                <see>
                    #getAttribute(java.lang.String)                    
                </see>
            </javadoc>
            <method name="setAttribute" type="void" line="1796">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
                <comment line="1810">
                                        
                </comment>
                <comment line="1811">
                                        
                </comment>
                <comment line="1812">
                                        
                </comment>
                <comment line="1813">
                                        
                </comment>
                <comment line="1814">
                                        
                </comment>
                <comment line="1845">
                    OK: Default &quot;Unknown&quot; value used for unknown attribute                    
                </comment>
                <comment line="1850">
                                        
                </comment>
                <comment line="1877">
                                        
                </comment>
                <comment line="1939">
                    if descriptor ... else no descriptor                    
                </comment>
                <comment line="1951">
                    else no descriptor                    
                </comment>
                <declaration name="tracing" type="boolean" line="1797"/>
                <scope line="1798"/>
                <declaration name="attrName" type="String" line="1815"/>
                <declaration name="attrValue" type="Object" line="1816"/>
                <declaration name="updateDescriptor" type="boolean" line="1817"/>
                <declaration name="attrInfo" type="ModelMBeanAttributeInfo" line="1819"/>
                <declaration name="mmbDesc" type="Descriptor" line="1826"/>
                <declaration name="attrDescr" type="Descriptor" line="1827"/>
                <scope line="1829">
                    <declaration name="attrSetMethod" type="String" line="1834"/>
                    <declaration name="attrGetMethod" type="String" line="1836"/>
                    <declaration name="attrType" type="String" line="1839"/>
                    <declaration name="currValue" type="Object" line="1840"/>
                    <scope line="1842"/>
                    <scope line="1844"/>
                    <declaration name="oldAttr" type="Attribute" line="1848"/>
                    <scope line="1851">
                        <scope line="1852">
                            <scope line="1853">
                                <declaration name="clazz" type="Class&lt;?&gt;" line="1854"/>
                            </scope>
                            <scope line="1860">
                                <scope line="1861"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1871"/>
                    <declaration name="objctl" type="Object" line="1878"/>
                    <declaration name="ctl" type="String" line="1879"/>
                    <scope line="1883"/>
                    <declaration name="updateCache" type="boolean" line="1889"/>
                    <scope line="1897">
                        <scope line="1898"/>
                        <scope line="1908">
                            <declaration name="currtime" type="String" line="1909"/>
                        </scope>
                        <scope line="1918">
                            <declaration name="strb" type="StringBuilder" line="1919"/>
                        </scope>
                    </scope>
                    <scope line="1932"/>
                </scope>
                <scope line="1939">
                    <scope line="1941"/>
                </scope>
                <scope line="1953"/>
            </method>
            <javadoc line="1961">
                Sets the values of an array of attributes of this ModelMBean.
                  Executes the setAttribute() method for each attribute in the list.                
                <param>
                    attributes A list of attributes: The identification of the
                      attributes to be set and  the values they are to be set to.                    
                </param>
                <return>
                    The array of attributes that were set, with their new
                      values in Attribute instances.                    
                </return>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException}: The object name in parameter
                      is null or attributes in parameter is null.                    
                </exception>
                <see>
                    #getAttributes                    
                </see>
            </javadoc>
            <method name="setAttributes" type="AttributeList" line="1977">
                <params>
                    <param name="attributes" type="AttributeList"/>
                </params>
                <comment line="1993">
                    Go through the list of attributes                    
                </comment>
                <scope line="1979"/>
                <declaration name="responseList" type="AttributeList" line="1991"/>
                <scope line="1994">
                    <scope line="1995"/>
                    <scope line="1998"/>
                </scope>
            </method>
            <method name="createDefaultModelMBeanInfo" type="ModelMBeanInfo" line="2008"/>
            <javadoc line="2015">
                                
            </javadoc>
            <method name="writeToLog" type="void" line="2019">
                <params>
                    <param name="logFileName" type="String"/>
                    <param name="logEntry" type="String"/>
                </params>
                <scope line="2021"/>
                <scope line="2027">
                    <scope line="2028"/>
                </scope>
                <declaration name="fos" type="FileOutputStream" line="2037"/>
                <scope line="2038">
                    <declaration name="logOut" type="PrintStream" line="2039"/>
                    <scope line="2042"/>
                </scope>
                <scope line="2048">
                    <scope line="2049"/>
                </scope>
                <scope line="2058"/>
            </method>
            <javadoc line="2064">
                Registers an object which implements the NotificationListener
                  interface as a listener.  This
                  object&apos;s &apos;handleNotification()&apos; method will be invoked when any
                  notification is issued through or by the ModelMBean.  This does
                  not include attributeChangeNotifications.  They must be registered
                  for independently.                
                <param>
                    listener The listener object which will handles
                      notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object. If null, no filtering will be
                      performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener with
                      the notification when a notification is emitted.                    
                </param>
                <exception>
                    IllegalArgumentException The listener cannot be null.                    
                </exception>
                <see>
                    #removeNotificationListener                    
                </see>
            </javadoc>
            <method name="addNotificationListener" type="void" line="2086">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="mth" type="String" line="2087"/>
                <scope line="2089"/>
                <scope line="2103"/>
            </method>
            <javadoc line="2112">
                Removes a listener for Notifications from the RequiredModelMBean.                
                <param>
                    listener The listener name which was handling notifications
                      emitted by the registered MBean.
                      This method will remove all information related to this listener.                    
                </param>
                <exception>
                    ListenerNotFoundException The listener is not registered
                      in the MBean or is null.                    
                </exception>
                <see>
                    #addNotificationListener                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="2125">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
                <declaration name="mth" type="String" line="2130"/>
                <scope line="2131"/>
                <scope line="2142"/>
            </method>
            <method name="removeNotificationListener" type="void" line="2152">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
                <declaration name="mth" type="String" line="2158"/>
                <scope line="2161"/>
                <scope line="2174"/>
            </method>
            <method name="sendNotification" type="void" line="2182">
                <params>
                    <param name="ntfyObj" type="Notification"/>
                </params>
                <comment line="2197">
                    log notification if specified in descriptor                    
                </comment>
                <scope line="2183"/>
                <declaration name="ntfyDesc" type="Descriptor" line="2198"/>
                <declaration name="mmbDesc" type="Descriptor" line="2200"/>
                <scope line="2202">
                    <declaration name="logging" type="String" line="2203"/>
                    <scope line="2205"/>
                    <scope line="2212">
                        <declaration name="logfile" type="String" line="2214"/>
                        <scope line="2215"/>
                        <scope line="2219">
                            <scope line="2220"/>
                            <scope line="2226">
                                <scope line="2227"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2238"/>
                <scope line="2242"/>
            </method>
            <method name="sendNotification" type="void" line="2256">
                <params>
                    <param name="ntfyText" type="String"/>
                </params>
                <scope line="2257"/>
                <declaration name="myNtfyObj" type="Notification" line="2270"/>
                <scope line="2273"/>
            </method>
            <javadoc line="2283">
                Returns `true&apos; if the notification `notifName&apos; is found
                  in `info&apos;. (bug 4744667)                
            </javadoc>
            <method name="hasNotification" type="boolean" line="2289">
                <params>
                    <param name="info" type="ModelMBeanInfo"/>
                    <param name="notifName" type="String"/>
                </params>
                <scope line="2290"/>
                <scope line="2293"/>
                <scope line="2295"/>
            </method>
            <javadoc line="2300">
                Creates a default ModelMBeanNotificationInfo for GENERIC
                  notification.  (bug 4744667)                
            </javadoc>
            <method name="makeGenericInfo" type="ModelMBeanNotificationInfo" line="2304">
                <declaration name="genericDescriptor" type="Descriptor" line="2305"/>
            </method>
            <javadoc line="2320">
                Creates a default ModelMBeanNotificationInfo for ATTRIBUTE_CHANGE
                  notification.  (bug 4744667)                
            </javadoc>
            <method name="makeAttributeChangeInfo" type="ModelMBeanNotificationInfo" line="2325">
                <declaration name="attributeDescriptor" type="Descriptor" line="2326"/>
            </method>
            <javadoc line="2341">
                Returns the array of Notifications always generated by the
                  RequiredModelMBean.
                  &lt;P&gt;
                  RequiredModelMBean may always send also two additional notifications:
                  &lt;UL&gt;
                  &lt;LI&gt; One with descriptor &lt;code&gt;&quot;name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic&quot;&lt;/code&gt;&lt;/LI&gt;
                  &lt;LI&gt; Second is a standard attribute change notification
                  with descriptor &lt;code&gt;&quot;name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change&quot;&lt;/code&gt;&lt;/LI&gt;
                  &lt;/UL&gt;
                  Thus these two notifications are always added to those specified
                  by the application.                
                <return>
                    MBeanNotificationInfo[]                    
                </return>
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="2358">
                <comment line="2365">
                    Using hasNotification() is not optimal, but shouldn&apos;t really                    
                </comment>
                <comment line="2366">
                    matter in this context...                    
                </comment>
                <comment line="2368">
                    hasGeneric==true if GENERIC notification is present.                    
                </comment>
                <comment line="2369">
                    (bug 4744667)                    
                </comment>
                <comment line="2372">
                    hasAttributeChange==true if ATTRIBUTE_CHANGE notification is                    
                </comment>
                <comment line="2373">
                    present.                    
                </comment>
                <comment line="2374">
                    (bug 4744667)                    
                </comment>
                <comment line="2378">
                    User supplied list of notification infos.                    
                </comment>
                <comment line="2379">
                                        
                </comment>
                <comment line="2383">
                    Length of the returned list of notification infos:                    
                </comment>
                <comment line="2384">
                    length of user suplied list + possibly 1 for GENERIC, +                    
                </comment>
                <comment line="2385">
                    possibly 1 for ATTRIBUTE_CHANGE                    
                </comment>
                <comment line="2386">
                    (bug 4744667)                    
                </comment>
                <comment line="2390">
                    Returned list of notification infos:                    
                </comment>
                <comment line="2391">
                                        
                </comment>
                <comment line="2395">
                    Preserve previous ordering (JMX 1.1)                    
                </comment>
                <comment line="2396">
                                        
                </comment>
                <comment line="2398">
                    Counter of &quot;standard&quot; notification inserted before user                    
                </comment>
                <comment line="2399">
                    supplied notifications.                    
                </comment>
                <comment line="2400">
                                        
                </comment>
                <comment line="2403">
                    We need to add description for GENERIC notification                    
                </comment>
                <comment line="2404">
                    (bug 4744667)                    
                </comment>
                <comment line="2409">
                    We need to add description for ATTRIBUTE_CHANGE notification                    
                </comment>
                <comment line="2410">
                    (bug 4744667)                    
                </comment>
                <comment line="2413">
                    Now copy user supplied list in returned list.                    
                </comment>
                <comment line="2414">
                                        
                </comment>
                <scope line="2359"/>
                <declaration name="hasGeneric" type="boolean" line="2370"/>
                <declaration name="hasAttributeChange" type="boolean" line="2375"/>
                <declaration name="currInfo" type="ModelMBeanNotificationInfo[]" line="2380"/>
                <declaration name="len" type="int" line="2387"/>
                <declaration name="respInfo" type="ModelMBeanNotificationInfo[]" line="2392"/>
                <declaration name="inserted" type="int" line="2401"/>
                <declaration name="count" type="int" line="2415"/>
                <declaration name="offset" type="int" line="2416"/>
                <scope line="2417"/>
                <scope line="2421"/>
            </method>
            <method name="addAttributeChangeNotificationListener" type="void" line="2437">
                <params>
                    <param name="inlistener" type="NotificationListener"/>
                    <param name="inAttributeName" type="String"/>
                    <param name="inhandback" type="Object"/>
                </params>
                <declaration name="mth" type="String" line="2438"/>
                <scope line="2441"/>
                <declaration name="currFilter" type="AttributeChangeNotificationFilter" line="2454"/>
                <declaration name="attrInfo" type="MBeanAttributeInfo[]" line="2457"/>
                <declaration name="found" type="boolean" line="2458"/>
                <scope line="2459">
                    <scope line="2460">
                        <scope line="2461"/>
                    </scope>
                </scope>
                <scope line="2465">
                    <scope line="2466">
                        <scope line="2467">
                            <scope line="2468"/>
                        </scope>
                    </scope>
                    <scope line="2475"/>
                </scope>
                <scope line="2484">
                    <declaration name="enabledAttrs" type="Vector&lt;String&gt;" line="2485"/>
                    <declaration name="s" type="String" line="2486"/>
                </scope>
                <scope line="2496"/>
            </method>
            <method name="removeAttributeChangeNotificationListener" type="void" line="2508">
                <params>
                    <param name="inlistener" type="NotificationListener"/>
                    <param name="inAttributeName" type="String"/>
                </params>
                <comment line="2544">
                                        
                </comment>
                <comment line="2545">
                    this may be a problem if the same listener is registered for
                    multiple attributes with multiple filters andor handback                    
                </comment>
                <declaration name="mth" type="String" line="2512"/>
                <scope line="2515"/>
                <declaration name="attrInfo" type="MBeanAttributeInfo[]" line="2526"/>
                <declaration name="found" type="boolean" line="2527"/>
                <scope line="2528">
                    <scope line="2529">
                        <scope line="2530"/>
                    </scope>
                </scope>
                <scope line="2537"/>
                <scope line="2551"/>
            </method>
            <method name="sendAttributeChangeNotification" type="void" line="2559">
                <params>
                    <param name="ntfyObj" type="AttributeChangeNotification"/>
                </params>
                <comment line="2589">
                    log notification if specified in descriptor                    
                </comment>
                <comment line="2661">
                    XXX Revisit: This is a quickfix: it would be better to have a                    
                </comment>
                <comment line="2662">
                    single broadcaster. However, it is not so simple because                    
                </comment>
                <comment line="2663">
                    removeAttributeChangeNotificationListener() should                    
                </comment>
                <comment line="2664">
                    remove only listeners whose filter is an instanceof                    
                </comment>
                <comment line="2665">
                    AttributeChangeNotificationFilter.                    
                </comment>
                <comment line="2666">
                                        
                </comment>
                <declaration name="mth" type="String" line="2560"/>
                <scope line="2563"/>
                <declaration name="oldv" type="Object" line="2575"/>
                <declaration name="newv" type="Object" line="2576"/>
                <scope line="2581"/>
                <declaration name="ntfyDesc" type="Descriptor" line="2590"/>
                <declaration name="mmbDesc" type="Descriptor" line="2592"/>
                <declaration name="logging" type="String" line="2594"/>
                <scope line="2596">
                    <scope line="2598"/>
                    <scope line="2604">
                        <scope line="2606"/>
                        <scope line="2611">
                            <scope line="2612"/>
                            <scope line="2620">
                                <scope line="2621"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2630">
                    <scope line="2634">
                        <scope line="2637">
                            <scope line="2638"/>
                            <scope line="2646">
                                <scope line="2647"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2657"/>
                <scope line="2667"/>
                <scope line="2671"/>
            </method>
            <method name="sendAttributeChangeNotification" type="void" line="2683">
                <params>
                    <param name="inOldVal" type="Attribute"/>
                    <param name="inNewVal" type="Attribute"/>
                </params>
                <comment line="2692">
                    do we really want to do this?                    
                </comment>
                <declaration name="mth" type="String" line="2684"/>
                <scope line="2686"/>
                <declaration name="newVal" type="Object" line="2707"/>
                <declaration name="oldVal" type="Object" line="2708"/>
                <declaration name="className" type="String" line="2709"/>
                <declaration name="myNtfyObj" type="AttributeChangeNotification" line="2715"/>
                <scope line="2727"/>
            </method>
            <javadoc line="2735">
                Return the Class Loader Repository used to perform class loading.
                  Subclasses may wish to redefine this method in order to return
                  the appropriate {@link javax.management.loading.ClassLoaderRepository}that should be used in this object.                
                <return>
                    the Class Loader Repository.                    
                </return>
            </javadoc>
            <method name="getClassLoaderRepository" type="ClassLoaderRepository" line="2744"/>
            <method name="loadClass" type="Class<?>" line="2749">
                <params>
                    <param name="className" type="String"/>
                </params>
                <scope line="2750"/>
                <scope line="2752">
                    <declaration name="clr" type="ClassLoaderRepository" line="2753"/>
                </scope>
            </method>
            <javadoc line="2765">
                Allows the MBean to perform any operations it needs before
                  being registered in the MBean server.  If the name of the MBean
                  is not specified, the MBean can provide a name for its
                  registration.  If any exception is raised, the MBean will not be
                  registered in the MBean server.
                  &lt;P&gt;
                  In order to ensure proper run-time semantics of RequireModelMBean,
                  Any subclass of RequiredModelMBean overloading or overriding this
                  method should call &lt;code&gt;super.preRegister(server, name)&lt;/code&gt;
                  in its own &lt;code&gt;preRegister&lt;/code&gt; implementation.                
                <param>
                    server The MBean server in which the MBean will be registered.                    
                </param>
                <param>
                    name The object name of the MBean.  This name is null if
                      the name parameter to one of the <code>createMBean</code> or
                      <code>registerMBean</code> methods in the {@link MBeanServer}interface is null.  In that case, this method must return a
                      non-null ObjectName for the new MBean.                    
                </param>
                <return>
                    The name under which the MBean is to be registered.
                      This value must not be null.  If the <code>name</code>
                      parameter is not null, it will usually but not necessarily be
                      the returned value.                    
                </return>
                <exception>
                    java.lang.Exception This exception will be caught by
                      the MBean server and re-thrown as an{@link javax.management.MBeanRegistrationExceptionMBeanRegistrationException}.                    
                </exception>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="2797">
                <params>
                    <param name="server" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <comment line="2798">
                    Since ModelMbeanInfo cannot be null (otherwise exception                    
                </comment>
                <comment line="2799">
                    thrown at creation)                    
                </comment>
                <comment line="2800">
                    no exception thrown on ModelMBeanInfo not set.                    
                </comment>
            </method>
            <javadoc line="2807">
                Allows the MBean to perform any operations needed after having been
                  registered in the MBean server or after the registration has failed.
                  &lt;P&gt;
                  In order to ensure proper run-time semantics of RequireModelMBean,
                  Any subclass of RequiredModelMBean overloading or overriding this
                  method should call &lt;code&gt;super.postRegister(registrationDone)&lt;/code&gt;
                  in its own &lt;code&gt;postRegister&lt;/code&gt; implementation.                
                <param>
                    registrationDone Indicates whether or not the MBean has
                      been successfully registered in the MBean server. The value
                      false means that the registration phase has failed.                    
                </param>
            </javadoc>
            <method name="postRegister" type="void" line="2820">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <javadoc line="2824">
                Allows the MBean to perform any operations it needs before
                  being unregistered by the MBean server.
                  &lt;P&gt;
                  In order to ensure proper run-time semantics of RequireModelMBean,
                  Any subclass of RequiredModelMBean overloading or overriding this
                  method should call &lt;code&gt;super.preDeregister()&lt;/code&gt; in its own
                  &lt;code&gt;preDeregister&lt;/code&gt; implementation.                
                <exception>
                    java.lang.Exception This exception will be caught by
                      the MBean server and re-thrown as an{@link javax.management.MBeanRegistrationExceptionMBeanRegistrationException}.                    
                </exception>
            </javadoc>
            <method name="preDeregister" type="void" line="2838"/>
            <javadoc line="2841">
                Allows the MBean to perform any operations needed after having been
                  unregistered in the MBean server.
                  &lt;P&gt;
                  In order to ensure proper run-time semantics of RequireModelMBean,
                  Any subclass of RequiredModelMBean overloading or overriding this
                  method should call &lt;code&gt;super.postDeregister()&lt;/code&gt; in its own
                  &lt;code&gt;postDeregister&lt;/code&gt; implementation.                
            </javadoc>
            <method name="postDeregister" type="void" line="2850"/>
            <declaration name="primitiveTypes" type="String[]" line="2855"/>
            <declaration name="primitiveWrappers" type="String[]" line="2856"/>
            <scope line="2857"/>
        </class>
    </source>