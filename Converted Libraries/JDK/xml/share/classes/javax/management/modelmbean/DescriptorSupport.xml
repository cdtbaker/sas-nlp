<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.Util.cast"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="java.util.SortedMap"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.TreeMap"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.ImmutableDescriptor"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="sun.reflect.misc.ReflectUtil"/>
        <class name="DescriptorSupport" line="25">
            <implements interface="javax.management.Descriptor"/>
            <javadoc line="25">
                This class represents the metadata set for a ModelMBean element.  A
                  descriptor is part of the ModelMBeanInfo,
                  ModelMBeanNotificationInfo, ModelMBeanAttributeInfo,
                  ModelMBeanConstructorInfo, and ModelMBeanParameterInfo.
                  &lt;P&gt;
                  A descriptor consists of a collection of fields.  Each field is in
                  fieldname=fieldvalue format.  Field names are not case sensitive,
                  case will be preserved on field values.
                  &lt;P&gt;
                  All field names and values are not predefined. New fields can be
                  defined and added by any program.  Some fields have been predefined
                  for consistency of implementation and support by the
                  ModelMBeanInfo, ModelMBeanAttributeInfo, ModelMBeanConstructorInfo,
                  ModelMBeanNotificationInfo, ModelMBeanOperationInfo and ModelMBean
                  classes.
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-6292969195866300415L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="45"/>
            <declaration name="newSerialVersionUID" type="long" line="46"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="47"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="48"/>
            <declaration name="serialVersionUID" type="long" line="49"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="50"/>
            <javadoc line="50">
                @serialField descriptor HashMap The collection of fields representing this descriptor                
            </javadoc>
            <declaration name="serialForm" type="String" line="54"/>
            <scope line="55">
                <declaration name="form" type="String" line="56"/>
                <declaration name="compat" type="boolean" line="57"/>
                <scope line="58">
                    <declaration name="act" type="GetPropertyAction" line="59"/>
                </scope>
                <scope line="63"/>
                <scope line="66"/>
                <scope line="70"/>
            </scope>
            <declaration name="descriptorMap" type="SortedMap&lt;String,Object&gt;" line="75"/>
            <declaration name="currClass" type="String" line="76"/>
            <javadoc line="77">
                Descriptor default constructor.
                  Default initial descriptor size is 20.  It will grow as needed.&lt;br&gt;
                  Note that the created empty descriptor is not a valid descriptor
                  (the method {@link #isValid isValid} returns &lt;CODE&gt;false&lt;/CODE&gt;)                
            </javadoc>
            <method name="DescriptorSupport" type="constructor" line="83">
                <scope line="84"/>
            </method>
            <javadoc line="89">
                Descriptor constructor.  Takes as parameter the initial
                  capacity of the Map that stores the descriptor fields.
                  Capacity will grow as needed.&lt;br&gt; Note that the created empty
                  descriptor is not a valid descriptor (the method {@link #isValid isValid} returns &lt;CODE&gt;false&lt;/CODE&gt;).                
                <param>
                    initNumFields The initial capacity of the Map that
                      stores the descriptor fields.                    
                </param>
                <exception>
                    RuntimeOperationsException for illegal value for
                      initNumFields (&lt;= 0)                    
                </exception>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
            </javadoc>
            <method name="DescriptorSupport" type="constructor" line="100">
                <params>
                    <param name="initNumFields" type="int"/>
                </params>
                <scope line="101"/>
                <scope line="104">
                    <scope line="105"/>
                    <declaration name="msg" type="String" line="108"/>
                    <declaration name="iae" type="RuntimeException" line="109"/>
                </scope>
            </method>
            <javadoc line="114">
                Descriptor constructor taking a Descriptor as parameter.
                  Creates a new descriptor initialized to the values of the
                  descriptor passed in parameter.                
                <param>
                    inDescr the descriptor to be used to initialize the
                      constructed descriptor. If it is null or contains no descriptor
                      fields, an empty Descriptor will be created.                    
                </param>
            </javadoc>
            <method name="DescriptorSupport" type="constructor" line="122">
                <params>
                    <param name="inDescr" type="DescriptorSupport"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="129">
                &lt;p&gt;Descriptor constructor taking an XML String.&lt;/p&gt;
                  &lt;p&gt;The format of the XML string is not defined, but an
                  implementation must ensure that the string returned by{@link #toXMLString() toXMLString()} on an existing
                  descriptor can be used to instantiate an equivalent
                  descriptor using this constructor.&lt;/p&gt;
                  &lt;p&gt;In this implementation, all field values will be created
                  as Strings.  If the field values are not Strings, the
                  programmer will have to reset or convert these fields
                  correctly.&lt;/p&gt;                
                <param>
                    inStr An XML-formatted string used to populate this
                      Descriptor.  The format is not defined, but any
                      implementation must ensure that the string returned by
                      method {@link #toXMLString toXMLString} on an existing
                      descriptor can be used to instantiate an equivalent
                      descriptor when instantiated using this constructor.                    
                </param>
                <exception>
                    RuntimeOperationsException If the String inStr
                      passed in parameter is null                    
                </exception>
                <exception>
                    XMLParseException XML parsing problem while parsing
                      the input String                    
                </exception>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
            </javadoc>
            <method name="DescriptorSupport" type="constructor" line="151">
                <params>
                    <param name="inStr" type="String"/>
                </params>
                <scope line="152"/>
                <scope line="155">
                    <scope line="156"/>
                    <declaration name="msg" type="String" line="159"/>
                    <declaration name="iae" type="RuntimeException" line="160"/>
                </scope>
                <declaration name="lowerInStr" type="String" line="163"/>
                <scope line="164"/>
                <declaration name="st" type="StringTokenizer" line="168"/>
                <declaration name="inFld" type="boolean" line="169"/>
                <declaration name="inDesc" type="boolean" line="170"/>
                <declaration name="fieldName" type="String" line="171"/>
                <declaration name="fieldValue" type="String" line="172"/>
                <scope line="173">
                    <declaration name="tok" type="String" line="174"/>
                    <scope line="175"/>
                    <scope line="178">
                        <scope line="179">
                            <declaration name="fieldValueObject" type="Object" line="181"/>
                        </scope>
                    </scope>
                    <scope line="188"/>
                    <scope line="191"/>
                    <scope line="197">
                        <declaration name="eq_separator" type="int" line="198"/>
                        <scope line="199">
                            <declaration name="kwPart" type="String" line="200"/>
                            <declaration name="valPart" type="String" line="201"/>
                            <scope line="204">
                                <declaration name="msg" type="String" line="205"/>
                            </scope>
                        </scope>
                        <scope line="209">
                            <declaration name="msg" type="String" line="210"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="215"/>
            </method>
            <javadoc line="219">
                Constructor taking field names and field values.  Neither array
                  can be null.                
                <param>
                    fieldNames String array of field names.  No elements of
                      this array can be null.                    
                </param>
                <param>
                    fieldValues Object array of the corresponding field
                      values.  Elements of the array can be null. The
                      <code>fieldValue</code> must be valid for the
                      <code>fieldName</code> (as defined in method {@link #isValidisValid})
                      <p>Note: array sizes of parameters should match. If both arrays
                      are empty, then an empty descriptor is created.</p>                    
                </param>
                <exception>
                    RuntimeOperationsException for illegal value for
                      field Names or field Values.  The array lengths must be equal.
                      If the descriptor construction fails for any reason, this
                      exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="DescriptorSupport" type="constructor" line="235">
                <params>
                    <param name="fieldNames" type="String[]"/>
                    <param name="fieldValues" type="Object[]"/>
                </params>
                <scope line="236"/>
                <scope line="239">
                    <scope line="240"/>
                    <declaration name="msg" type="String" line="243"/>
                    <declaration name="iae" type="RuntimeException" line="244"/>
                </scope>
                <scope line="248"/>
                <scope line="251"/>
            </method>
            <javadoc line="255">
                Constructor taking fields in the &lt;i&gt;fieldName=fieldValue&lt;/i&gt;
                  format.                
                <param>
                    fields String array with each element containing a
                      field name and value.  If this array is null or empty, then the
                      default constructor will be executed. Null strings or empty
                      strings will be ignored.
                      <p>All field values should be Strings.  If the field values are
                      not Strings, the programmer will have to reset or convert these
                      fields correctly.
                      <p>Note: Each string should be of the form
                      <i>fieldName=fieldValue</i>.  The field name
                      ends at the first {@code =} character; for example if the String
                      is {@code a=b=c} then the field name is {@code a} and its value
                      is {@code b=c}.                    
                </param>
                <exception>
                    RuntimeOperationsException for illegal value for
                      field Names or field Values.  The field must contain an
                      "=". "=fieldValue", "fieldName", and "fieldValue" are illegal.
                      FieldName cannot be null.  "fieldName=" will cause the value to
                      be null.  If the descriptor construction fails for any reason,
                      this exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="DescriptorSupport" type="constructor" line="277">
                <params>
                    <param name="fields" type="String"/>
                </params>
                <scope line="278"/>
                <scope line="284">
                    <scope line="285"/>
                    <declaration name="eq_separator" type="int" line="288"/>
                    <scope line="289">
                        <scope line="290"/>
                        <declaration name="msg" type="String" line="293"/>
                        <declaration name="iae" type="RuntimeException" line="294"/>
                    </scope>
                    <declaration name="fieldName" type="String" line="297"/>
                    <declaration name="fieldValue" type="String" line="298"/>
                    <scope line="299"/>
                    <scope line="302">
                        <scope line="303"/>
                        <declaration name="msg" type="String" line="306"/>
                        <declaration name="iae" type="RuntimeException" line="307"/>
                    </scope>
                </scope>
                <scope line="312"/>
            </method>
            <method name="init" type="void" line="316">
                <params>
                    <param name="initMap" type="Map<String,?>"/>
                </params>
            </method>
            <method name="getFieldValue" type="Object" line="320">
                <params>
                    <param name="fieldName" type="String"/>
                </params>
                <scope line="321">
                    <scope line="322"/>
                    <declaration name="msg" type="String" line="325"/>
                    <declaration name="iae" type="RuntimeException" line="326"/>
                </scope>
                <declaration name="retValue" type="Object" line="329"/>
                <scope line="330"/>
            </method>
            <method name="setField" type="void" line="335">
                <params>
                    <param name="fieldName" type="String"/>
                    <param name="fieldValue" type="Object"/>
                </params>
                <scope line="336">
                    <scope line="337"/>
                    <declaration name="msg" type="String" line="340"/>
                    <declaration name="iae" type="RuntimeException" line="341"/>
                </scope>
                <scope line="344">
                    <scope line="345"/>
                    <declaration name="msg" type="String" line="348"/>
                    <declaration name="iae" type="RuntimeException" line="349"/>
                </scope>
                <scope line="352"/>
            </method>
            <method name="getFields" type="String[]" line="357">
                <scope line="358"/>
                <declaration name="numberOfEntries" type="int" line="361"/>
                <declaration name="responseFields" type="String[]" line="362"/>
                <declaration name="returnedSet" type="Set&lt;Map.Entry&lt;String,Object&gt;&gt;" line="363"/>
                <declaration name="i" type="int" line="364"/>
                <scope line="365"/>
                <scope line="368">
                    <declaration name="currElement" type="Map.Entry&lt;String,Object&gt;" line="369"/>
                    <scope line="370">
                        <scope line="371"/>
                    </scope>
                    <scope line="375">
                        <declaration name="currValue" type="Object" line="376"/>
                        <scope line="377"/>
                        <scope line="380">
                            <scope line="381"/>
                            <scope line="384"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="390"/>
            </method>
            <method name="getFieldNames" type="String[]" line="395">
                <scope line="396"/>
                <declaration name="numberOfEntries" type="int" line="399"/>
                <declaration name="responseFields" type="String[]" line="400"/>
                <declaration name="returnedSet" type="Set&lt;Map.Entry&lt;String,Object&gt;&gt;" line="401"/>
                <declaration name="i" type="int" line="402"/>
                <scope line="403"/>
                <scope line="406">
                    <declaration name="currElement" type="Map.Entry&lt;String,Object&gt;" line="407"/>
                    <scope line="408">
                        <scope line="409"/>
                    </scope>
                    <scope line="413"/>
                </scope>
                <scope line="417"/>
            </method>
            <method name="getFieldValues" type="Object[]" line="422">
                <params>
                    <param name="fieldNames" type="String"/>
                </params>
                <scope line="423"/>
                <declaration name="numberOfEntries" type="int" line="426"/>
                <declaration name="responseFields" type="Object[]" line="427"/>
                <declaration name="i" type="int" line="428"/>
                <scope line="429"/>
                <scope line="432"/>
                <scope line="435">
                    <scope line="436">
                        <scope line="437"/>
                        <scope line="440"/>
                    </scope>
                </scope>
                <scope line="445"/>
            </method>
            <method name="setFields" type="void" line="450">
                <params>
                    <param name="fieldNames" type="String[]"/>
                    <param name="fieldValues" type="Object[]"/>
                </params>
                <scope line="451"/>
                <scope line="454">
                    <scope line="455"/>
                    <declaration name="msg" type="String" line="458"/>
                    <declaration name="iae" type="RuntimeException" line="459"/>
                </scope>
                <scope line="462">
                    <scope line="463">
                        <scope line="464"/>
                        <declaration name="msg" type="String" line="467"/>
                        <declaration name="iae" type="RuntimeException" line="468"/>
                    </scope>
                </scope>
                <scope line="473"/>
            </method>
            <javadoc line="477">
                Returns a new Descriptor which is a duplicate of the Descriptor.                
                <exception>
                    RuntimeOperationsException for illegal value for
                      field Names or field Values.  If the descriptor construction
                      fails for any reason, this exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="483">
                <scope line="484"/>
            </method>
            <method name="removeField" type="void" line="489">
                <params>
                    <param name="fieldName" type="String"/>
                </params>
                <scope line="490"/>
            </method>
            <javadoc line="495">
                Compares this descriptor to the given object.  The objects are equal if
                  the given object is also a Descriptor, and if the two Descriptors have
                  the same field names (possibly differing in case) and the same
                  associated values.  The respective values for a field in the two
                  Descriptors are equal if the following conditions hold:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;If one value is null then the other must be too.&lt;/li&gt;
                  &lt;li&gt;If one value is a primitive array then the other must be a primitive
                  array of the same type with the same elements.&lt;/li&gt;
                  &lt;li&gt;If one value is an object array then the other must be too and{@link java.util.Arrays#deepEquals(Object[],Object[]) Arrays.deepEquals}must return true.&lt;/li&gt;
                  &lt;li&gt;Otherwise {@link Object#equals(Object)} must return true.&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    o the object to compare with.                    
                </param>
                <return>
                    {@code true} if the objects are the same; {@code false}otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="511">
                <params>
                    <param name="o" type="Object"/>
                </params>
            </method>
            <javadoc line="517">
                &lt;p&gt;Returns the hash code value for this descriptor.  The hash
                  code is computed as the sum of the hash codes for each field in
                  the descriptor.  The hash code of a field with name {@code n}and value {@code v} is {@code n.toLowerCase().hashCode() ^ h}.
                  Here {@code h} is the hash code of {@code v}, computed as
                  follows:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;If {@code v} is null then {@code h} is 0.&lt;/li&gt;
                  &lt;li&gt;If {@code v} is a primitive array then {@code h} is computed using
                  the appropriate overloading of {@code java.util.Arrays.hashCode}.&lt;/li&gt;
                  &lt;li&gt;If {@code v} is an object array then {@code h} is computed using{@link java.util.Arrays#deepHashCode(Object[]) Arrays.deepHashCode}.&lt;/li&gt;
                  &lt;li&gt;Otherwise {@code h} is {@code v.hashCode()}.&lt;/li&gt;
                  &lt;/ul&gt;                
                <return>
                    A hash code value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="532">
                <declaration name="size" type="int" line="533"/>
            </method>
            <javadoc line="536">
                Returns true if all of the fields have legal values given their
                  names.
                  &lt;P&gt;
                  This implementation does not support  interoperating with a directory
                  or lookup service. Thus, conforming to the specification, no checking is
                  done on the &lt;i&gt;&quot;export&quot;&lt;/i&gt; field.
                  &lt;P&gt;
                  Otherwise this implementation returns false if:
                  &lt;P&gt;
                  &lt;UL&gt;
                  &lt;LI&gt; name and descriptorType fieldNames are not defined, or
                  null, or empty, or not String
                  &lt;LI&gt; class, role, getMethod, setMethod fieldNames, if defined,
                  are null or not String
                  &lt;LI&gt; persistPeriod, currencyTimeLimit, lastUpdatedTimeStamp,
                  lastReturnedTimeStamp if defined, are null, or not a Numeric
                  String or not a Numeric Value &gt;= -1
                  &lt;LI&gt; log fieldName, if defined, is null, or not a Boolean or
                  not a String with value &quot;t&quot;, &quot;f&quot;, &quot;true&quot;, &quot;false&quot;. These String
                  values must not be case sensitive.
                  &lt;LI&gt; visibility fieldName, if defined, is null, or not a
                  Numeric String or a not Numeric Value &gt;= 1 and &amp;lt;= 4
                  &lt;LI&gt; severity fieldName, if defined, is null, or not a Numeric
                  String or not a Numeric Value &gt;= 0 and &amp;lt;= 6&lt;br&gt;
                  &lt;LI&gt; persistPolicy fieldName, if defined, is null, or not one of
                  the following strings:&lt;br&gt;
                  &quot;OnUpdate&quot;, &quot;OnTimer&quot;, &quot;NoMoreOftenThan&quot;, &quot;OnUnregister&quot;, &quot;Always&quot;,
                  &quot;Never&quot;. These String values must not be case sensitive.&lt;br&gt;
                  &lt;/UL&gt;                
                <exception>
                    RuntimeOperationsException If the validity checking
                      fails for any reason, this exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="isValid" type="boolean" line="569">
                <scope line="570"/>
                <declaration name="returnedSet" type="Set&lt;Map.Entry&lt;String,Object&gt;&gt;" line="573"/>
                <scope line="574">
                    <scope line="575"/>
                </scope>
                <declaration name="thisName" type="String" line="580"/>
                <declaration name="thisDescType" type="String" line="581"/>
                <scope line="582"/>
                <scope line="585">
                    <scope line="586">
                        <scope line="587">
                            <scope line="588"/>
                            <scope line="591">
                                <scope line="592"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="600"/>
            </method>
            <method name="validateField" type="boolean" line="605">
                <params>
                    <param name="fldName" type="String"/>
                    <param name="fldValue" type="Object"/>
                </params>
                <declaration name="SfldValue" type="String" line="607"/>
                <declaration name="isAString" type="boolean" line="608"/>
                <scope line="609"/>
                <declaration name="nameOrDescriptorType" type="boolean" line="613"/>
                <scope line="614"/>
                <scope line="619">
                    <declaration name="v" type="long" line="620"/>
                    <scope line="621"/>
                    <scope line="624"/>
                </scope>
                <scope line="631">
                    <declaration name="v" type="long" line="632"/>
                    <scope line="633"/>
                    <scope line="636"/>
                </scope>
                <scope line="642"/>
                <scope line="645">
                    <declaration name="v" type="long" line="646"/>
                    <scope line="647"/>
                    <scope line="650"/>
                </scope>
                <scope line="656"/>
            </method>
            <javadoc line="661">
                &lt;p&gt;Returns an XML String representing the descriptor.&lt;/p&gt;
                  &lt;p&gt;The format is not defined, but an implementation must
                  ensure that the string returned by this method can be
                  used to build an equivalent descriptor when instantiated
                  using the constructor {@link #DescriptorSupport(String)DescriptorSupport(String inStr)}.&lt;/p&gt;
                  &lt;p&gt;Fields which are not String objects will have toString()
                  called on them to create the value. The value will be
                  enclosed in parentheses.  It is not guaranteed that you can
                  reconstruct these objects unless they have been
                  specifically set up to support toString() in a meaningful
                  format and have a matching constructor that accepts a
                  String in the same format.&lt;/p&gt;
                  &lt;p&gt;If the descriptor is empty the following String is
                  returned: &amp;lt;Descriptor&amp;gt;&amp;lt;/Descriptor&amp;gt;&lt;/p&gt;                
                <return>
                    the XML string.                    
                </return>
                <exception>
                    RuntimeOperationsException for illegal value for
                      field Names or field Values.  If the XML formatted string
                      construction fails for any reason, this exception will be
                      thrown.                    
                </exception>
            </javadoc>
            <method name="toXMLString" type="String" line="682">
                <declaration name="buf" type="StringBuilder" line="683"/>
                <declaration name="returnedSet" type="Set&lt;Map.Entry&lt;String,Object&gt;&gt;" line="684"/>
                <scope line="685">
                    <declaration name="name" type="String" line="686"/>
                    <declaration name="value" type="Object" line="687"/>
                    <declaration name="valueString" type="String" line="688"/>
                    <scope line="689">
                        <declaration name="svalue" type="String" line="690"/>
                    </scope>
                </scope>
            </method>
            <declaration name="entities" type="String[]" line="699"/>
            <declaration name="entityToCharMap" type="Map&lt;String,Character&gt;" line="700"/>
            <declaration name="charToEntityMap" type="String[]" line="701"/>
            <scope line="702">
                <declaration name="maxChar" type="char" line="703"/>
                <scope line="704">
                    <declaration name="c" type="char" line="705"/>
                </scope>
                <scope line="709">
                    <declaration name="c" type="char" line="710"/>
                    <declaration name="entity" type="String" line="711"/>
                </scope>
            </scope>
            <method name="isMagic" type="boolean" line="716">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <method name="quote" type="String" line="719">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="found" type="boolean" line="720"/>
                <scope line="721">
                    <scope line="722"/>
                </scope>
                <declaration name="buf" type="StringBuilder" line="728"/>
                <scope line="729">
                    <declaration name="c" type="char" line="730"/>
                </scope>
            </method>
            <method name="unquote" type="String" line="736">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="buf" type="StringBuilder" line="738"/>
                <declaration name="len" type="int" line="739"/>
                <scope line="740">
                    <declaration name="c" type="char" line="741"/>
                    <declaration name="semi" type="int" line="742"/>
                    <declaration name="quoted" type="Character" line="743"/>
                    <scope line="744"/>
                </scope>
            </method>
            <javadoc line="752">
                Make the string that will go inside &quot;...&quot; for a value that is not
                  a plain String.                
                <throws>
                    RuntimeOperationsException if the value cannot be encoded.                    
                </throws>
            </javadoc>
            <method name="makeFieldValue" type="String" line="757">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="valueClass" type="Class&lt;?&gt;" line="759"/>
                <scope line="760"/>
                <scope line="763">
                    <declaration name="msg" type="String" line="764"/>
                    <declaration name="iae" type="RuntimeException" line="765"/>
                </scope>
                <scope line="768"/>
                <declaration name="quotedValueString" type="String" line="770"/>
            </method>
            <method name="parseQuotedFieldValue" type="Object" line="773">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="slash" type="int" line="777"/>
                <scope line="778"/>
                <declaration name="className" type="String" line="781"/>
                <declaration name="constr" type="Constructor&lt;?&gt;" line="782"/>
                <scope line="783">
                    <declaration name="contextClassLoader" type="ClassLoader" line="784"/>
                    <scope line="785"/>
                    <declaration name="c" type="Class&lt;?&gt;" line="788"/>
                </scope>
                <scope line="791"/>
                <declaration name="arg" type="String" line="794"/>
                <scope line="795"/>
                <scope line="798">
                    <declaration name="msg" type="String" line="799"/>
                </scope>
            </method>
            <javadoc line="803">
                Returns &lt;pv&gt;a human readable string representing the
                  descriptor&lt;/pv&gt;.  The string will be in the format of
                  &quot;fieldName=fieldValue,fieldName2=fieldValue2,...&quot;&lt;br&gt;
                  If there are no fields in the descriptor, then an empty String
                  is returned.&lt;br&gt;
                  If a fieldValue is an object then the toString() method is
                  called on it and its returned value is used as the value for
                  the field enclosed in parenthesis.                
                <exception>
                    RuntimeOperationsException for illegal value for
                      field Names or field Values.  If the descriptor string fails
                      for any reason, this exception will be thrown.                    
                </exception>
            </javadoc>
            <method name="toString" type="String" line="816">
                <scope line="817"/>
                <declaration name="respStr" type="String" line="820"/>
                <declaration name="fields" type="String[]" line="821"/>
                <scope line="822">
                    <scope line="823"/>
                </scope>
                <scope line="828"/>
                <scope line="831">
                    <scope line="832"/>
                    <scope line="835"/>
                </scope>
                <scope line="839"/>
            </method>
            <method name="toNumeric" type="long" line="844">
                <params>
                    <param name="inStr" type="String"/>
                </params>
                <scope line="845"/>
                <scope line="848"/>
            </method>
            <javadoc line="852">
                Deserializes a {@link DescriptorSupport} from an {@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="855">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <declaration name="fields" type="ObjectInputStream.GetField" line="856"/>
                <declaration name="descriptor" type="Map&lt;String,Object&gt;" line="857"/>
                <scope line="859"/>
            </method>
            <javadoc line="863">
                Serializes a {@link DescriptorSupport} to an {@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="866">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <declaration name="fields" type="ObjectOutputStream.PutField" line="867"/>
                <declaration name="compat" type="boolean" line="868"/>
                <declaration name="startMap" type="SortedMap&lt;String,Object&gt;" line="870"/>
                <scope line="871"/>
                <declaration name="descriptor" type="HashMap&lt;String,Object&gt;" line="875"/>
                <scope line="876"/>
            </method>
        </class>
    </source>