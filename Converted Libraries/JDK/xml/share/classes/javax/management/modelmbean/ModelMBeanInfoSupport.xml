<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.MBeanAttributeInfo"/>
        <import package="javax.management.MBeanConstructorInfo"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanOperationInfo"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <class name="ModelMBeanInfoSupport" line="52">
            <extends class="MBeanInfo"/>
            <comment line="88">
                Serialization compatibility stuff:
                 Two serial forms are supported in this class. The selected form depends
                 on system property &quot;jmx.serial.form&quot;:
                  - &quot;1.0&quot; for JMX 1.0
                  - any other value for JMX 1.1 and higher
                
                 Serial version for old serial form                
            </comment>
            <comment line="96">
                Serial version for new serial form                
            </comment>
            <comment line="99">
                Serializable fields in old serial form                
            </comment>
            <comment line="110">
                Serializable fields in new serial form                
            </comment>
            <comment line="120">
                Actual serial version and serial form                
            </comment>
            <comment line="157">
                END Serialization compatibility stuff                
            </comment>
            <comment line="165">
                The following fields always have the same values as the
                fields inherited from MBeanInfo and are retained only for
                compatibility.  By rewriting the serialization code we could
                get rid of them.
                
                These fields can&apos;t be final because they are assigned to by                
            </comment>
            <comment line="353">
                Java doc inherited from MOdelMBeanInfo interface                
            </comment>
            <comment line="891">
                                
            </comment>
            <implements interface="ModelMBeanInfo"/>
            <javadoc line="52">
                This class represents the meta data for ModelMBeans.  Descriptors have been
                  added on the meta data objects.
                  &lt;P&gt;
                  Java resources wishing to be manageable instantiate the ModelMBean using the
                  MBeanServer&apos;s createMBean method.  The resource then sets the ModelMBeanInfo
                  and Descriptors for the ModelMBean instance. The attributes and operations
                  exposed via the ModelMBeanInfo for the ModelMBean are accessible
                  from MBeans, connectors/adaptors like other MBeans. Through the Descriptors,
                  values and methods in the managed application can be defined and mapped to
                  attributes and operations of the ModelMBean.
                  This mapping can be defined during development in a file or dynamically and
                  programmatically at runtime.
                  &lt;P&gt;
                  Every ModelMBean which is instantiated in the MBeanServer becomes manageable:
                  its attributes and operations
                  become remotely accessible through the connectors/adaptors connected to that
                  MBeanServer.
                  A Java object cannot be registered in the MBeanServer unless it is a JMX
                  compliant MBean.
                  By instantiating a ModelMBean, resources are guaranteed that the MBean is
                  valid.
                  MBeanException and RuntimeOperationsException must be thrown on every public
                  method.  This allows for wrapping exceptions from distributed
                  communications (RMI, EJB, etc.)
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is
                  &lt;code&gt;-1935722590756516193L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="94"/>
            <declaration name="newSerialVersionUID" type="long" line="97"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="100"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="111"/>
            <declaration name="serialVersionUID" type="long" line="121"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="122"/>
            <javadoc line="122">
                @serialField modelMBeanDescriptor Descriptor The descriptor containing
                  MBean wide policy                
                <serialField>
                    modelMBeanAttributes ModelMBeanAttributeInfo[] The array of{@link ModelMBeanAttributeInfo} objects which
                      have descriptors                    
                </serialField>
                <serialField>
                    modelMBeanConstructors MBeanConstructorInfo[] The array of{@link ModelMBeanConstructorInfo} objects which
                      have descriptors                    
                </serialField>
                <serialField>
                    modelMBeanNotifications MBeanNotificationInfo[] The array of{@link ModelMBeanNotificationInfo} objects which
                      have descriptors                    
                </serialField>
                <serialField>
                    modelMBeanOperations MBeanOperationInfo[] The array of{@link ModelMBeanOperationInfo} objects which
                      have descriptors                    
                </serialField>
            </javadoc>
            <declaration name="compat" type="boolean" line="139"/>
            <scope line="140">
                <scope line="141">
                    <declaration name="act" type="GetPropertyAction" line="142"/>
                    <declaration name="form" type="String" line="143"/>
                </scope>
                <scope line="145"/>
                <scope line="148"/>
                <scope line="151"/>
            </scope>
            <declaration name="modelMBeanDescriptor" type="Descriptor" line="159"/>
            <javadoc line="159">
                @serial The descriptor containing MBean wide policy                
            </javadoc>
            <declaration name="modelMBeanAttributes" type="MBeanAttributeInfo[]" line="172"/>
            <javadoc line="172">
                @serial The array of {@link ModelMBeanAttributeInfo} objects which
                  have descriptors                
            </javadoc>
            <declaration name="modelMBeanConstructors" type="MBeanConstructorInfo[]" line="178"/>
            <javadoc line="178">
                @serial The array of {@link ModelMBeanConstructorInfo} objects which
                  have descriptors                
            </javadoc>
            <declaration name="modelMBeanNotifications" type="MBeanNotificationInfo[]" line="184"/>
            <javadoc line="184">
                @serial The array of {@link ModelMBeanNotificationInfo} objects which
                  have descriptors                
            </javadoc>
            <declaration name="modelMBeanOperations" type="MBeanOperationInfo[]" line="190"/>
            <javadoc line="190">
                @serial The array of {@link ModelMBeanOperationInfo} objects which
                  have descriptors                
            </javadoc>
            <declaration name="ATTR" type="String" line="196"/>
            <declaration name="OPER" type="String" line="197"/>
            <declaration name="NOTF" type="String" line="198"/>
            <declaration name="CONS" type="String" line="199"/>
            <declaration name="MMB" type="String" line="200"/>
            <declaration name="ALL" type="String" line="201"/>
            <declaration name="currClass" type="String" line="202"/>
            <javadoc line="204">
                Constructs a ModelMBeanInfoSupport which is a duplicate of the given
                  ModelMBeanInfo.  The returned object is a shallow copy of the given
                  object.  Neither the Descriptor nor the contained arrays
                  ({@code ModelMBeanAttributeInfo[]} etc) are cloned.  This method is
                  chiefly of interest to modify the Descriptor of the returned instance
                  via {@link #setDescriptor setDescriptor} without affecting the
                  Descriptor of the original object.                
                <param>
                    mbi the ModelMBeanInfo instance from which the ModelMBeanInfo
                      being created is initialized.                    
                </param>
            </javadoc>
            <method name="ModelMBeanInfoSupport" type="constructor" line="216">
                <params>
                    <param name="mbi" type="ModelMBeanInfo"/>
                </params>
                <scope line="229">
                    <declaration name="mbeandescriptor" type="Descriptor" line="230"/>
                </scope>
                <scope line="232">
                    <scope line="234"/>
                </scope>
                <scope line="243"/>
            </method>
            <javadoc line="250">
                Creates a ModelMBeanInfoSupport with the provided information,
                  but the descriptor is a default.
                  The default descriptor is: name=className, descriptorType=&quot;mbean&quot;,
                  displayName=className, persistPolicy=&quot;never&quot;, log=&quot;F&quot;, visibility=&quot;1&quot;                
                <param>
                    className classname of the MBean                    
                </param>
                <param>
                    description human readable description of the
                      ModelMBean                    
                </param>
                <param>
                    attributes array of ModelMBeanAttributeInfo objects
                      which have descriptors                    
                </param>
                <param>
                    constructors array of ModelMBeanConstructorInfo
                      objects which have descriptors                    
                </param>
                <param>
                    operations array of ModelMBeanOperationInfo objects
                      which have descriptors                    
                </param>
                <param>
                    notifications array of ModelMBeanNotificationInfo
                      objects which have descriptors                    
                </param>
            </javadoc>
            <method name="ModelMBeanInfoSupport" type="constructor" line="273">
                <params>
                    <param name="className" type="String"/>
                    <param name="description" type="String"/>
                    <param name="attributes" type="ModelMBeanAttributeInfo[]"/>
                    <param name="constructors" type="ModelMBeanConstructorInfo[]"/>
                    <param name="operations" type="ModelMBeanOperationInfo[]"/>
                    <param name="notifications" type="ModelMBeanNotificationInfo[]"/>
                </params>
            </method>
            <javadoc line="278">
                Creates a ModelMBeanInfoSupport with the provided information
                  and the descriptor given in parameter.                
                <param>
                    className classname of the MBean                    
                </param>
                <param>
                    description human readable description of the
                      ModelMBean                    
                </param>
                <param>
                    attributes array of ModelMBeanAttributeInfo objects
                      which have descriptors                    
                </param>
                <param>
                    constructors array of ModelMBeanConstructorInfo
                      objects which have descriptor                    
                </param>
                <param>
                    operations array of ModelMBeanOperationInfo objects
                      which have descriptor                    
                </param>
                <param>
                    notifications array of ModelMBeanNotificationInfo
                      objects which have descriptor                    
                </param>
                <param>
                    mbeandescriptor descriptor to be used as the
                      MBeanDescriptor containing MBean wide policy. If the
                      descriptor is null, a default descriptor will be constructed.
                      The default descriptor is:
                      name=className, descriptorType=&quot;mbean&quot;, displayName=className,
                      persistPolicy=&quot;never&quot;, log=&quot;F&quot;, visibility=&quot;1&quot;.  If the descriptor
                      does not contain all of these fields, the missing ones are
                      added with these default values.                    
                </param>
                <exception>
                    RuntimeOperationsException Wraps an
                      IllegalArgumentException for invalid descriptor passed in
                      parameter.  (see {@link #getMBeanDescriptorgetMBeanDescriptor} for the definition of a valid MBean
                      descriptor.)                    
                </exception>
            </javadoc>
            <method name="ModelMBeanInfoSupport" type="constructor" line="315">
                <params>
                    <param name="className" type="String"/>
                    <param name="description" type="String"/>
                    <param name="attributes" type="ModelMBeanAttributeInfo[]"/>
                    <param name="constructors" type="ModelMBeanConstructorInfo[]"/>
                    <param name="operations" type="ModelMBeanOperationInfo[]"/>
                    <param name="notifications" type="ModelMBeanNotificationInfo[]"/>
                    <param name="mbeandescriptor" type="Descriptor"/>
                </params>
                <comment line="323">
                    The values saved here are possibly null, but we
                    check this everywhere they are referenced.  If at
                    some stage we replace null with an empty array
                    here, as we do in the superclass constructor
                    parameters, then we must also do this in                    
                </comment>
                <scope line="333"/>
            </method>
            <declaration name="NO_ATTRIBUTES" type="ModelMBeanAttributeInfo[]" line="343"/>
            <declaration name="NO_CONSTRUCTORS" type="ModelMBeanConstructorInfo[]" line="345"/>
            <declaration name="NO_NOTIFICATIONS" type="ModelMBeanNotificationInfo[]" line="347"/>
            <declaration name="NO_OPERATIONS" type="ModelMBeanOperationInfo[]" line="349"/>
            <javadoc line="354">
                Returns a shallow clone of this instance.  Neither the Descriptor nor
                  the contained arrays ({@code ModelMBeanAttributeInfo[]} etc) are
                  cloned.  This method is chiefly of interest to modify the Descriptor
                  of the clone via {@link #setDescriptor setDescriptor} without affecting
                  the Descriptor of the original object.                
                <return>
                    a shallow clone of this instance.                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="363"/>
            <method name="getDescriptors" type="Descriptor[]" line="369">
                <params>
                    <param name="inDescriptorType" type="String"/>
                </params>
                <comment line="381">
                    if no descriptors of that type, will return empty array                    
                </comment>
                <scope line="370"/>
                <scope line="376"/>
                <declaration name="retList" type="Descriptor[]" line="382"/>
                <scope line="384"/>
                <scope line="386">
                    <declaration name="attrList" type="MBeanAttributeInfo[]" line="387"/>
                    <declaration name="numAttrs" type="int" line="388"/>
                    <scope line="392"/>
                </scope>
                <scope line="396">
                    <declaration name="operList" type="MBeanOperationInfo[]" line="397"/>
                    <declaration name="numOpers" type="int" line="398"/>
                    <scope line="402"/>
                </scope>
                <scope line="406">
                    <declaration name="consList" type="MBeanConstructorInfo[]" line="407"/>
                    <declaration name="numCons" type="int" line="408"/>
                    <scope line="412"/>
                </scope>
                <scope line="416">
                    <declaration name="notifList" type="MBeanNotificationInfo[]" line="417"/>
                    <declaration name="numNotifs" type="int" line="418"/>
                    <scope line="422"/>
                </scope>
                <scope line="426">
                    <declaration name="attrList" type="MBeanAttributeInfo[]" line="428"/>
                    <declaration name="numAttrs" type="int" line="429"/>
                    <declaration name="operList" type="MBeanOperationInfo[]" line="432"/>
                    <declaration name="numOpers" type="int" line="433"/>
                    <declaration name="consList" type="MBeanConstructorInfo[]" line="436"/>
                    <declaration name="numCons" type="int" line="437"/>
                    <declaration name="notifList" type="MBeanNotificationInfo[]" line="440"/>
                    <declaration name="numNotifs" type="int" line="441"/>
                    <declaration name="count" type="int" line="444"/>
                    <declaration name="j" type="int" line="449"/>
                    <scope line="450"/>
                    <scope line="455"/>
                    <scope line="460"/>
                    <scope line="465"/>
                </scope>
                <scope line="470">
                    <declaration name="iae" type="IllegalArgumentException" line="471"/>
                    <declaration name="msg" type="String" line="473"/>
                </scope>
                <scope line="477"/>
            </method>
            <method name="setDescriptors" type="void" line="488">
                <params>
                    <param name="inDescriptors" type="Descriptor[]"/>
                </params>
                <comment line="496">
                    throw RuntimeOperationsException - invalid descriptor                    
                </comment>
                <comment line="502">
                    empty list, no-op                    
                </comment>
                <scope line="489"/>
                <scope line="494"/>
                <scope line="501"/>
                <scope line="504"/>
                <scope line="507"/>
            </method>
            <javadoc line="516">
                Returns a Descriptor requested by name.                
                <param>
                    inDescriptorName The name of the descriptor.                    
                </param>
                <return>
                    Descriptor containing a descriptor for the ModelMBean with the
                      same name. If no descriptor is found, null is returned.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException
                      for null name.                    
                </exception>
                <see>
                    #setDescriptor                    
                </see>
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="532">
                <params>
                    <param name="inDescriptorName" type="String"/>
                </params>
                <scope line="533"/>
            </method>
            <method name="getDescriptor" type="Descriptor" line="544">
                <params>
                    <param name="inDescriptorName" type="String"/>
                    <param name="inDescriptorType" type="String"/>
                </params>
                <comment line="547">
                    throw RuntimeOperationsException - invalid descriptor                    
                </comment>
                <comment line="558">
                    The logic here is a bit convoluted, because we are
                    dealing with two possible cases, depending on whether
                    inDescriptorType is null.  If it&apos;s not null, then only
                    one of the following ifs will run, and it will either
                    return a descriptor or null.  If inDescriptorType is
                    null, then all of the following ifs will run until one                    
                </comment>
                <scope line="545"/>
                <scope line="553"/>
                <scope line="564">
                    <declaration name="attr" type="ModelMBeanAttributeInfo" line="565"/>
                </scope>
                <scope line="571">
                    <declaration name="oper" type="ModelMBeanOperationInfo" line="572"/>
                </scope>
                <scope line="578">
                    <declaration name="oper" type="ModelMBeanConstructorInfo" line="579"/>
                </scope>
                <scope line="586">
                    <declaration name="notif" type="ModelMBeanNotificationInfo" line="587"/>
                </scope>
            </method>
            <method name="setDescriptor" type="void" line="606">
                <params>
                    <param name="inDescriptor" type="Descriptor"/>
                    <param name="inDescriptorType" type="String"/>
                </params>
                <declaration name="excMsg" type="String" line="607"/>
                <scope line="609"/>
                <scope line="615"/>
                <scope line="619">
                    <scope line="623"/>
                </scope>
                <declaration name="inDescriptorName" type="String" line="632"/>
                <scope line="634"/>
                <declaration name="found" type="boolean" line="641"/>
                <scope line="642"/>
                <scope line="645">
                    <declaration name="attrList" type="MBeanAttributeInfo[]" line="646"/>
                    <declaration name="numAttrs" type="int" line="647"/>
                    <scope line="650">
                        <scope line="651">
                            <declaration name="mmbai" type="ModelMBeanAttributeInfo" line="653"/>
                            <scope line="656">
                                <declaration name="strb" type="StringBuilder" line="657"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="670">
                    <declaration name="operList" type="MBeanOperationInfo[]" line="671"/>
                    <declaration name="numOpers" type="int" line="672"/>
                    <scope line="675">
                        <scope line="676">
                            <declaration name="mmboi" type="ModelMBeanOperationInfo" line="678"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="683">
                    <declaration name="consList" type="MBeanConstructorInfo[]" line="684"/>
                    <declaration name="numCons" type="int" line="685"/>
                    <scope line="688">
                        <scope line="689">
                            <declaration name="mmbci" type="ModelMBeanConstructorInfo" line="691"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="696">
                    <declaration name="notifList" type="MBeanNotificationInfo[]" line="697"/>
                    <declaration name="numNotifs" type="int" line="698"/>
                    <scope line="701">
                        <scope line="702">
                            <declaration name="mmbni" type="ModelMBeanNotificationInfo" line="704"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="709">
                    <declaration name="iae" type="RuntimeException" line="710"/>
                </scope>
                <scope line="716">
                    <declaration name="iae" type="RuntimeException" line="717"/>
                </scope>
                <scope line="723"/>
            </method>
            <method name="getAttribute" type="ModelMBeanAttributeInfo" line="733">
                <params>
                    <param name="inName" type="String"/>
                </params>
                <declaration name="retInfo" type="ModelMBeanAttributeInfo" line="734"/>
                <scope line="735"/>
                <scope line="740"/>
                <declaration name="attrList" type="MBeanAttributeInfo[]" line="746"/>
                <declaration name="numAttrs" type="int" line="747"/>
                <scope line="750">
                    <scope line="751">
                        <declaration name="strb" type="StringBuilder" line="752"/>
                    </scope>
                    <scope line="763"/>
                </scope>
                <scope line="767"/>
            </method>
            <method name="getOperation" type="ModelMBeanOperationInfo" line="779">
                <params>
                    <param name="inName" type="String"/>
                </params>
                <comment line="793">
                    this.getOperations();                    
                </comment>
                <declaration name="retInfo" type="ModelMBeanOperationInfo" line="780"/>
                <scope line="781"/>
                <scope line="786"/>
                <declaration name="operList" type="MBeanOperationInfo[]" line="792"/>
                <declaration name="numOpers" type="int" line="793"/>
                <scope line="796">
                    <scope line="797"/>
                </scope>
                <scope line="801"/>
            </method>
            <javadoc line="810">
                Returns the ModelMBeanConstructorInfo requested by name.
                  If no ModelMBeanConstructorInfo exists for this name null is returned.                
                <param>
                    inName the name of the constructor.                    
                </param>
                <return>
                    the constructor info for the named constructor, or null
                      if there is none.                    
                </return>
                <exception>
                    MBeanException Wraps a distributed communication Exception.                    
                </exception>
                <exception>
                    RuntimeOperationsException Wraps an IllegalArgumentException
                      for a null constructor name.                    
                </exception>
            </javadoc>
            <method name="getConstructor" type="ModelMBeanConstructorInfo" line="825">
                <params>
                    <param name="inName" type="String"/>
                </params>
                <comment line="839">
                    this.getConstructors();                    
                </comment>
                <declaration name="retInfo" type="ModelMBeanConstructorInfo" line="826"/>
                <scope line="827"/>
                <scope line="832"/>
                <declaration name="consList" type="MBeanConstructorInfo[]" line="838"/>
                <declaration name="numCons" type="int" line="839"/>
                <scope line="842">
                    <scope line="843"/>
                </scope>
                <scope line="847"/>
            </method>
            <method name="getNotification" type="ModelMBeanNotificationInfo" line="858">
                <params>
                    <param name="inName" type="String"/>
                </params>
                <comment line="872">
                    this.getNotifications();                    
                </comment>
                <declaration name="retInfo" type="ModelMBeanNotificationInfo" line="859"/>
                <scope line="860"/>
                <scope line="865"/>
                <declaration name="notifList" type="MBeanNotificationInfo[]" line="871"/>
                <declaration name="numNotifs" type="int" line="872"/>
                <scope line="875">
                    <scope line="876"/>
                </scope>
                <scope line="880"/>
            </method>
            <javadoc line="891">
                @since 1.6                
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="895"/>
            <method name="getMBeanDescriptor" type="Descriptor" line="899"/>
            <method name="getMBeanDescriptorNoException" type="Descriptor" line="903">
                <scope line="904"/>
                <scope line="913"/>
            </method>
            <method name="setMBeanDescriptor" type="void" line="923">
                <params>
                    <param name="inMBeanDescriptor" type="Descriptor"/>
                </params>
                <scope line="924"/>
            </method>
            <javadoc line="933">
                Clones the passed in Descriptor, sets default values, and checks for validity.
                  If the Descriptor is invalid (for instance by having the wrong &quot;name&quot;),
                  this indicates programming error and a RuntimeOperationsException will be thrown.
                  The following fields will be defaulted if they are not already set:
                  displayName=className,name=className,descriptorType=&quot;mbean&quot;,
                  persistPolicy=&quot;never&quot;, log=&quot;F&quot;, visibility=&quot;1&quot;                
                <param>
                    in Descriptor to be checked, or null which is equivalent to
                      an empty Descriptor.                    
                </param>
                <exception>
                    RuntimeOperationsException if Descriptor is invalid                    
                </exception>
            </javadoc>
            <method name="validDescriptor" type="Descriptor" line="946">
                <params>
                    <param name="in" type="Descriptor"/>
                </params>
                <comment line="957">
                    Setting defaults.                    
                </comment>
                <comment line="983">
                    Checking validity                    
                </comment>
                <declaration name="clone" type="Descriptor" line="947"/>
                <declaration name="defaulted" type="boolean" line="948"/>
                <scope line="949"/>
                <scope line="952"/>
                <scope line="957"/>
                <scope line="961"/>
                <scope line="965"/>
                <scope line="969"/>
                <scope line="973"/>
                <scope line="977"/>
                <scope line="983"/>
                <scope line="989"/>
            </method>
            <javadoc line="1001">
                Deserializes a {@link ModelMBeanInfoSupport} from an {@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="1005">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="1008">
                    Read an object serialized in the old serial form                    
                </comment>
                <comment line="1037">
                    Read an object serialized in the new serial form                    
                </comment>
                <scope line="1006">
                    <declaration name="fields" type="ObjectInputStream.GetField" line="1009"/>
                    <scope line="1012"/>
                    <scope line="1017"/>
                    <scope line="1022"/>
                    <scope line="1027"/>
                    <scope line="1032"/>
                </scope>
                <scope line="1035"/>
            </method>
            <javadoc line="1043">
                Serializes a {@link ModelMBeanInfoSupport} to an {@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="1047">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="1050">
                    Serializes this instance in the old serial form                    
                </comment>
                <comment line="1061">
                    Serializes this instance in the new serial form                    
                </comment>
                <scope line="1048">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="1051"/>
                </scope>
                <scope line="1059"/>
            </method>
        </class>
    </source>