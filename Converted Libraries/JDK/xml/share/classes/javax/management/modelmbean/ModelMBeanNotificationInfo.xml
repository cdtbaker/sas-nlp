<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="com.sun.jmx.defaults.JmxProperties.MODELMBEAN_LOGGER"/>
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <import package="java.util.logging.Level"/>
        <import package="javax.management.Descriptor"/>
        <import package="javax.management.DescriptorAccess"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <class name="ModelMBeanNotificationInfo" line="48">
            <extends class="MBeanNotificationInfo"/>
            <comment line="96">
                serialVersionUID is not constant                
            </comment>
            <comment line="101">
                Serialization compatibility stuff:
                 Two serial forms are supported in this class. The selected form
                 depends on system property &quot;jmx.serial.form&quot;:
                  - &quot;1.0&quot; for JMX 1.0
                  - any other value for JMX 1.1 and higher
                
                 Serial version for old serial form                
            </comment>
            <comment line="109">
                Serial version for new serial form                
            </comment>
            <comment line="112">
                Serializable fields in old serial form                
            </comment>
            <comment line="119">
                Serializable fields in new serial form                
            </comment>
            <comment line="125">
                Actual serial version and serial form                
            </comment>
            <comment line="150">
                END Serialization compatibility stuff                
            </comment>
            <implements interface="DescriptorAccess"/>
            <javadoc line="48">
                &lt;p&gt;The ModelMBeanNotificationInfo object describes a notification emitted
                  by a ModelMBean.
                  It is a subclass of MBeanNotificationInfo with the addition of an
                  associated Descriptor and an implementation of the Descriptor interface.&lt;/p&gt;
                  &lt;P id=&quot;descriptor&quot;&gt;
                  The fields in the descriptor are defined, but not limited to, the following.
                  Note that when the Type in this table is Number, a String that is the decimal
                  representation of a Long can also be used.&lt;/P&gt;
                  &lt;table border=&quot;1&quot; cellpadding=&quot;5&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Type&lt;/th&gt;&lt;th&gt;Meaning&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Notification name.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;descriptorType&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Must be &quot;notification&quot;.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;severity&lt;/td&gt;&lt;td&gt;Number&lt;/td&gt;
                  &lt;td&gt;0-6 where 0: unknown; 1: non-recoverable;
                  2: critical, failure; 3: major, severe;
                  4: minor, marginal, error; 5: warning;
                  6: normal, cleared, informative&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;messageID&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Unique key for message text (to allow translation, analysis).&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;messageText&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;Text of notification.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;log&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;T - log message, F - do not log message.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;logfile&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;fully qualified file name appropriate for operating system.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;visibility&lt;/td&gt;&lt;td&gt;Number&lt;/td&gt;
                  &lt;td&gt;1-4 where 1: always visible 4: rarely visible.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;presentationString&lt;/td&gt;&lt;td&gt;String&lt;/td&gt;
                  &lt;td&gt;XML formatted string to allow presentation of data.&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;The default descriptor contains the name, descriptorType,
                  displayName and severity(=6) fields.  The default value of the name
                  and displayName fields is the name of the Notification class (as
                  specified by the &lt;code&gt;name&lt;/code&gt; parameter of the
                  ModelMBeanNotificationInfo constructor).&lt;/p&gt;
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;-7445681389570207141L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="107"/>
            <declaration name="newSerialVersionUID" type="long" line="110"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="113"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="120"/>
            <declaration name="serialVersionUID" type="long" line="126"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="127"/>
            <javadoc line="127">
                @serialField notificationDescriptor Descriptor The descriptor
                  containing the appropriate metadata for this instance                
            </javadoc>
            <declaration name="compat" type="boolean" line="132"/>
            <scope line="133">
                <scope line="134">
                    <declaration name="act" type="GetPropertyAction" line="135"/>
                    <declaration name="form" type="String" line="136"/>
                </scope>
                <scope line="138"/>
                <scope line="141"/>
                <scope line="144"/>
            </scope>
            <declaration name="notificationDescriptor" type="Descriptor" line="152"/>
            <javadoc line="152">
                @serial The descriptor containing the appropriate metadata for
                  this instance                
            </javadoc>
            <declaration name="currClass" type="String" line="158"/>
            <javadoc line="160">
                Constructs a ModelMBeanNotificationInfo object with a default
                  descriptor.                
                <param>
                    notifTypes The array of strings (in dot notation) containing
                      the notification types that may be emitted.                    
                </param>
                <param>
                    name The name of the Notification class.                    
                </param>
                <param>
                    description A human readable description of the
                      Notification. Optional.                    
                </param>
            </javadoc>
            <method name="ModelMBeanNotificationInfo" type="constructor" line="172">
                <params>
                    <param name="notifTypes" type="String[]"/>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <javadoc line="176">
                Constructs a ModelMBeanNotificationInfo object.                
                <param>
                    notifTypes The array of strings (in dot notation)
                      containing the notification types that may be emitted.                    
                </param>
                <param>
                    name The name of the Notification class.                    
                </param>
                <param>
                    description A human readable description of the Notification.
                      Optional.                    
                </param>
                <param>
                    descriptor An instance of Descriptor containing the
                      appropriate metadata for this instance of the
                      MBeanNotificationInfo. If it is null a default descriptor
                      will be created. If the descriptor does not contain the
                      fields "displayName" or "severity",
                      the missing ones are added with their default values.                    
                </param>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException}. The descriptor is invalid, or
                      descriptor field "name" is not equal to parameter name, or
                      descriptor field "descriptorType" is not equal to "notification".                    
                </exception>
            </javadoc>
            <method name="ModelMBeanNotificationInfo" type="constructor" line="200">
                <params>
                    <param name="notifTypes" type="String[]"/>
                    <param name="name" type="String"/>
                    <param name="description" type="String"/>
                    <param name="descriptor" type="Descriptor"/>
                </params>
                <scope line="202"/>
            </method>
            <javadoc line="210">
                Constructs a new ModelMBeanNotificationInfo object from this
                  ModelMBeanNotfication Object.                
                <param>
                    inInfo the ModelMBeanNotificationInfo to be duplicated                    
                </param>
            </javadoc>
            <method name="ModelMBeanNotificationInfo" type="constructor" line="217">
                <params>
                    <param name="inInfo" type="ModelMBeanNotificationInfo"/>
                </params>
            </method>
            <javadoc line="223">
                Creates and returns a new ModelMBeanNotificationInfo which is a
                  duplicate of this ModelMBeanNotificationInfo.                
            </javadoc>
            <method name="clone" type="Object" line="227">
                <scope line="228"/>
            </method>
            <javadoc line="236">
                Returns a copy of the associated Descriptor for the
                  ModelMBeanNotificationInfo.                
                <return>
                    Descriptor associated with the
                      ModelMBeanNotificationInfo object.                    
                </return>
                <see>
                    #setDescriptor                    
                </see>
            </javadoc>
            <method name="getDescriptor" type="Descriptor" line="245">
                <comment line="254">
                    Dead code. Should never happen.                    
                </comment>
                <scope line="246"/>
                <scope line="252">
                    <scope line="254"/>
                </scope>
            </method>
            <javadoc line="266">
                Sets associated Descriptor (full replace) for the
                  ModelMBeanNotificationInfo If the new Descriptor is null,
                  then the associated Descriptor reverts to a default
                  descriptor.  The Descriptor is validated before it is
                  assigned.  If the new Descriptor is invalid, then a
                  RuntimeOperationsException wrapping an
                  IllegalArgumentException is thrown.                
                <param>
                    inDescriptor replaces the Descriptor associated with the
                      ModelMBeanNotification interface                    
                </param>
                <exception>
                    RuntimeOperationsException Wraps an{@link IllegalArgumentException} for invalid Descriptor.                    
                </exception>
                <see>
                    #getDescriptor                    
                </see>
            </javadoc>
            <method name="setDescriptor" type="void" line="283">
                <params>
                    <param name="inDescriptor" type="Descriptor"/>
                </params>
                <scope line="284"/>
            </method>
            <javadoc line="292">
                Returns a human readable string containing
                  ModelMBeanNotificationInfo.                
                <return>
                    a string describing this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="298">
                <scope line="299"/>
                <declaration name="retStr" type="StringBuilder" line="305"/>
                <declaration name="nTypes" type="String[]" line="317"/>
                <scope line="318"/>
            </method>
            <javadoc line="326">
                Clones the passed in Descriptor, sets default values, and checks for validity.
                  If the Descriptor is invalid (for instance by having the wrong &quot;name&quot;),
                  this indicates programming error and a RuntimeOperationsException will be thrown.
                  The following fields will be defaulted if they are not already set:
                  descriptorType=&quot;notification&quot;,displayName=this.getName(),
                  name=this.getName(),severity=&quot;6&quot;                
                <param>
                    in Descriptor to be checked, or null which is equivalent to an
                      empty Descriptor.                    
                </param>
                <exception>
                    RuntimeOperationsException if Descriptor is invalid                    
                </exception>
            </javadoc>
            <method name="validDescriptor" type="Descriptor" line="340">
                <params>
                    <param name="in" type="Descriptor"/>
                </params>
                <comment line="351">
                    Setting defaults.                    
                </comment>
                <comment line="369">
                    Checking validity                    
                </comment>
                <declaration name="clone" type="Descriptor" line="341"/>
                <declaration name="defaulted" type="boolean" line="342"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="351"/>
                <scope line="355"/>
                <scope line="359"/>
                <scope line="363"/>
                <scope line="369"/>
                <scope line="374"/>
                <scope line="379"/>
            </method>
            <javadoc line="389">
                Deserializes a {@link ModelMBeanNotificationInfo} from an{@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="394">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <comment line="396">
                    New serial form ignores extra field &quot;currClass&quot;                    
                </comment>
            </method>
            <javadoc line="400">
                Serializes a {@link ModelMBeanNotificationInfo} to an{@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="405">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <comment line="408">
                    Serializes this instance in the old serial form                    
                </comment>
                <comment line="415">
                    Serializes this instance in the new serial form                    
                </comment>
                <scope line="406">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="409"/>
                </scope>
                <scope line="413"/>
            </method>
        </class>
    </source>