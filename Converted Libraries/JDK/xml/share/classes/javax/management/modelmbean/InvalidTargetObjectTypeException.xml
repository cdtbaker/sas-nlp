<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.modelmbean">
        <import package="com.sun.jmx.mbeanserver.GetPropertyAction"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectStreamField"/>
        <import package="java.security.AccessController"/>
        <class name="InvalidTargetObjectTypeException" line="8">
            <extends class="Exception"/>
            <javadoc line="8">
                Exception thrown when an invalid target object type is specified.
                  &lt;p&gt;The &lt;b&gt;serialVersionUID&lt;/b&gt; of this class is &lt;code&gt;1190536278266811217L&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="oldSerialVersionUID" type="long" line="14"/>
            <declaration name="newSerialVersionUID" type="long" line="15"/>
            <declaration name="oldSerialPersistentFields" type="ObjectStreamField[]" line="16"/>
            <declaration name="newSerialPersistentFields" type="ObjectStreamField[]" line="17"/>
            <declaration name="serialVersionUID" type="long" line="18"/>
            <declaration name="serialPersistentFields" type="ObjectStreamField[]" line="19"/>
            <javadoc line="19">
                @serialField exception Exception Encapsulated {@link Exception}                
            </javadoc>
            <declaration name="compat" type="boolean" line="23"/>
            <scope line="24">
                <scope line="25">
                    <declaration name="act" type="GetPropertyAction" line="26"/>
                    <declaration name="form" type="String" line="27"/>
                </scope>
                <scope line="30"/>
                <scope line="32"/>
                <scope line="36"/>
            </scope>
            <declaration name="exception" type="Exception" line="41"/>
            <javadoc line="41">
                @serial Encapsulated {@link Exception}                
            </javadoc>
            <javadoc line="45">
                Default constructor.                
            </javadoc>
            <method name="InvalidTargetObjectTypeException" type="constructor" line="48"/>
            <javadoc line="52">
                Constructor from a string.                
                <param>
                    s String value that will be incorporated in the message for
                      this exception.                    
                </param>
            </javadoc>
            <method name="InvalidTargetObjectTypeException" type="constructor" line="57">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="61">
                Constructor taking an exception and a string.                
                <param>
                    e Exception that we may have caught to reissue as an
                      InvalidTargetObjectTypeException.  The message will be used, and we may want to
                      consider overriding the printStackTrace() methods to get data
                      pointing back to original throw stack.                    
                </param>
                <param>
                    s String value that will be incorporated in message for
                      this exception.                    
                </param>
            </javadoc>
            <method name="InvalidTargetObjectTypeException" type="constructor" line="70">
                <params>
                    <param name="e" type="Exception"/>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="74">
                Deserializes an {@link InvalidTargetObjectTypeException} from an {@link ObjectInputStream}.                
            </javadoc>
            <method name="readObject" type="void" line="77">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
                <scope line="78">
                    <declaration name="fields" type="ObjectInputStream.GetField" line="79"/>
                    <scope line="81"/>
                </scope>
                <scope line="85"/>
            </method>
            <javadoc line="89">
                Serializes an {@link InvalidTargetObjectTypeException} to an {@link ObjectOutputStream}.                
            </javadoc>
            <method name="writeObject" type="void" line="92">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
                <scope line="93">
                    <declaration name="fields" type="ObjectOutputStream.PutField" line="94"/>
                </scope>
                <scope line="99"/>
            </method>
        </class>
    </source>