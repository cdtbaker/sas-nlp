<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote">
        <import package="java.io.IOException"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.management.MBeanNotificationInfo"/>
        <import package="javax.management.MBeanRegistration"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.ObjectName"/>
        <class name="JMXConnectorServer" line="12">
            <extends class="NotificationBroadcasterSupport"/>
            <implements interface="JMXConnectorServerMBean"/>
            <implements interface="MBeanRegistration"/>
            <implements interface="JMXAddressable"/>
            <javadoc line="12">
                &lt;p&gt;Superclass of every connector server.  A connector server is
                  attached to an MBean server.  It listens for client connection
                  requests and creates a connection for each one.&lt;/p&gt;
                  &lt;p&gt;A connector server is associated with an MBean server either by
                  registering it in that MBean server, or by passing the MBean server
                  to its constructor.&lt;/p&gt;
                  &lt;p&gt;A connector server is inactive when created.  It only starts
                  listening for client connections when the {@link #start() start}method is called.  A connector server stops listening for client
                  connections when the {@link #stop() stop} method is called or when
                  the connector server is unregistered from its MBean server.&lt;/p&gt;
                  &lt;p&gt;Stopping a connector server does not unregister it from its
                  MBean server.  A connector server once stopped cannot be
                  restarted.&lt;/p&gt;
                  &lt;p&gt;Each time a client connection is made or broken, a notification
                  of class {@link JMXConnectionNotification} is emitted.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="AUTHENTICATOR" type="String" line="31"/>
            <javadoc line="31">
                &lt;p&gt;Name of the attribute that specifies the authenticator for a
                  connector server.  The value associated with this attribute, if
                  any, must be an object that implements the interface {@link JMXAuthenticator}.&lt;/p&gt;                
            </javadoc>
            <javadoc line="37">
                &lt;p&gt;Constructs a connector server that will be registered as an
                  MBean in the MBean server it is attached to.  This constructor
                  is typically called by one of the &lt;code&gt;createMBean&lt;/code&gt;
                  methods when creating, within an MBean server, a connector
                  server that makes it available remotely.&lt;/p&gt;                
            </javadoc>
            <method name="JMXConnectorServer" type="constructor" line="44"/>
            <javadoc line="47">
                &lt;p&gt;Constructs a connector server that is attached to the given
                  MBean server.  A connector server that is created in this way
                  can be registered in a different MBean server, or not registered
                  in any MBean server.&lt;/p&gt;                
                <param>
                    mbeanServer the MBean server that this connector server
                      is attached to.  Null if this connector server will be attached
                      to an MBean server by being registered in it.                    
                </param>
            </javadoc>
            <method name="JMXConnectorServer" type="constructor" line="56">
                <params>
                    <param name="mbeanServer" type="MBeanServer"/>
                </params>
            </method>
            <javadoc line="59">
                &lt;p&gt;Returns the MBean server that this connector server is
                  attached to.&lt;/p&gt;                
                <return>
                    the MBean server that this connector server is attached
                      to, or null if it is not yet attached to an MBean server.                    
                </return>
            </javadoc>
            <method name="getMBeanServer" type="MBeanServer" line="65"/>
            <method name="setMBeanServerForwarder" type="void" line="68">
                <params>
                    <param name="mbsf" type="MBeanServerForwarder"/>
                </params>
            </method>
            <method name="getConnectionIds" type="String[]" line="73">
                <scope line="74"/>
            </method>
            <javadoc line="78">
                &lt;p&gt;Returns a client stub for this connector server.  A client
                  stub is a serializable object whose {@link JMXConnector#connect(Map) connect} method can be used to make
                  one new connection to this connector server.&lt;/p&gt;
                  &lt;p&gt;A given connector need not support the generation of client
                  stubs.  However, the connectors specified by the JMX Remote API do
                  (JMXMP Connector and RMI Connector).&lt;/p&gt;
                  &lt;p&gt;The default implementation of this method uses {@link #getAddress} and {@link JMXConnectorFactory} to generate the
                  stub, with code equivalent to the following:&lt;/p&gt;
                  &lt;pre&gt;
                  JMXServiceURL addr = {@link #getAddress() getAddress()};
                  return {@link JMXConnectorFactory#newJMXConnector(JMXServiceURL,Map)JMXConnectorFactory.newJMXConnector(addr, env)};
                  &lt;/pre&gt;
                  &lt;p&gt;A connector server for which this is inappropriate must
                  override this method so that it either implements the
                  appropriate logic or throws {@link UnsupportedOperationException}.&lt;/p&gt;                
                <param>
                    env client connection parameters of the same sort that
                      could be provided to {@link JMXConnector#connect(Map)JMXConnector.connect(Map)}.  Can be null, which is equivalent
                      to an empty map.                    
                </param>
                <return>
                    a client stub that can be used to make a new connection
                      to this connector server.                    
                </return>
                <exception>
                    UnsupportedOperationException if this connector
                      server does not support the generation of client stubs.                    
                </exception>
                <exception>
                    IllegalStateException if the JMXConnectorServer is
                      not started (see {@link JMXConnectorServerMBean#isActive()}).                    
                </exception>
                <exception>
                    IOException if a communications problem means that a
                      stub cannot be created.                    
                </exception>
            </javadoc>
            <method name="toJMXConnector" type="JMXConnector" line="106">
                <params>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
                <declaration name="addr" type="JMXServiceURL" line="108"/>
            </method>
            <javadoc line="111">
                &lt;p&gt;Returns an array indicating the notifications that this MBean
                  sends. The implementation in &lt;code&gt;JMXConnectorServer&lt;/code&gt;
                  returns an array with one element, indicating that it can emit
                  notifications of class {@link JMXConnectionNotification} with
                  the types defined in that class.  A subclass that can emit other
                  notifications should return an array that contains this element
                  plus descriptions of the other notifications.&lt;/p&gt;                
                <return>
                    the array of possible notifications.                    
                </return>
            </javadoc>
            <method name="getNotificationInfo" type="MBeanNotificationInfo[]" line="121">
                <declaration name="types" type="String[]" line="122"/>
                <declaration name="className" type="String" line="123"/>
                <declaration name="description" type="String" line="124"/>
            </method>
            <javadoc line="127">
                &lt;p&gt;Called by a subclass when a new client connection is opened.
                  Adds &lt;code&gt;connectionId&lt;/code&gt; to the list returned by {@link #getConnectionIds()}, then emits a {@link JMXConnectionNotification} with type {@link JMXConnectionNotification#OPENED}.&lt;/p&gt;                
                <param>
                    connectionId the ID of the new connection.  This must be
                      different from the ID of any connection previously opened by
                      this connector server.                    
                </param>
                <param>
                    message the message for the emitted {@link JMXConnectionNotification}.  Can be null.  See {@link Notification#getMessage()}.                    
                </param>
                <param>
                    userData the &lt;code&gt;userData&lt;/code&gt; for the emitted{@link JMXConnectionNotification}.  Can be null.  See {@link Notification#getUserData()}.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;connectionId&lt;/code&gt; is
                      null.                    
                </exception>
            </javadoc>
            <method name="connectionOpened" type="void" line="138">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                &lt;p&gt;Called by a subclass when a client connection is closed
                  normally.  Removes &lt;code&gt;connectionId&lt;/code&gt; from the list returned
                  by {@link #getConnectionIds()}, then emits a {@link JMXConnectionNotification} with type {@link JMXConnectionNotification#CLOSED}.&lt;/p&gt;                
                <param>
                    connectionId the ID of the closed connection.                    
                </param>
                <param>
                    message the message for the emitted {@link JMXConnectionNotification}.  Can be null.  See {@link Notification#getMessage()}.                    
                </param>
                <param>
                    userData the &lt;code&gt;userData&lt;/code&gt; for the emitted{@link JMXConnectionNotification}.  Can be null.  See {@link Notification#getUserData()}.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;connectionId&lt;/code&gt;
                      is null.                    
                </exception>
            </javadoc>
            <method name="connectionClosed" type="void" line="155">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                &lt;p&gt;Called by a subclass when a client connection fails.
                  Removes &lt;code&gt;connectionId&lt;/code&gt; from the list returned by{@link #getConnectionIds()}, then emits a {@link JMXConnectionNotification} with type {@link JMXConnectionNotification#FAILED}.&lt;/p&gt;                
                <param>
                    connectionId the ID of the failed connection.                    
                </param>
                <param>
                    message the message for the emitted {@link JMXConnectionNotification}.  Can be null.  See {@link Notification#getMessage()}.                    
                </param>
                <param>
                    userData the &lt;code&gt;userData&lt;/code&gt; for the emitted{@link JMXConnectionNotification}.  Can be null.  See {@link Notification#getUserData()}.                    
                </param>
                <exception>
                    NullPointerException if &lt;code&gt;connectionId&lt;/code&gt; is
                      null.                    
                </exception>
            </javadoc>
            <method name="connectionFailed" type="void" line="171">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
                <scope line="173"/>
            </method>
            <method name="sendNotification" type="void" line="178">
                <params>
                    <param name="type" type="String"/>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
                <declaration name="notif" type="Notification" line="179"/>
            </method>
            <method name="getNotificationSource" type="Object" line="182"/>
            <method name="nextSequenceNumber" type="long" line="186">
                <scope line="187"/>
            </method>
            <javadoc line="191">
                &lt;p&gt;Called by an MBean server when this connector server is
                  registered in that MBean server.  This connector server becomes
                  attached to the MBean server and its {@link #getMBeanServer()}method will return &lt;code&gt;mbs&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;If this connector server is already attached to an MBean
                  server, this method has no effect.  The MBean server it is
                  attached to is not necessarily the one it is being registered
                  in.&lt;/p&gt;                
                <param>
                    mbs the MBean server in which this connection server is
                      being registered.                    
                </param>
                <param>
                    name The object name of the MBean.                    
                </param>
                <return>
                    The name under which the MBean is to be registered.                    
                </return>
                <exception>
                    NullPointerException if &lt;code&gt;mbs&lt;/code&gt; or
                      &lt;code&gt;name&lt;/code&gt; is null.                    
                </exception>
            </javadoc>
            <method name="preRegister" type="ObjectName" line="206">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                    <param name="name" type="ObjectName"/>
                </params>
                <scope line="208"/>
            </method>
            <method name="postRegister" type="void" line="214">
                <params>
                    <param name="registrationDone" type="Boolean"/>
                </params>
            </method>
            <javadoc line="216">
                &lt;p&gt;Called by an MBean server when this connector server is
                  unregistered from that MBean server.  If this connector server
                  was attached to that MBean server by being registered in it,
                  and if the connector server is still active,
                  then unregistering it will call the {@link #stop stop} method.
                  If the &lt;code&gt;stop&lt;/code&gt; method throws an exception, the
                  unregistration attempt will fail.  It is recommended to call
                  the &lt;code&gt;stop&lt;/code&gt; method explicitly before unregistering
                  the MBean.&lt;/p&gt;                
                <exception>
                    IOException if thrown by the {@link #stop stop} method.                    
                </exception>
            </javadoc>
            <method name="preDeregister" type="void" line="228">
                <scope line="229"/>
            </method>
            <method name="postDeregister" type="void" line="234"/>
            <declaration name="mbeanServer" type="MBeanServer" line="237"/>
            <javadoc line="237">
                The MBeanServer used by this server to execute a client request.                
            </javadoc>
            <declaration name="myName" type="ObjectName" line="241"/>
            <javadoc line="241">
                The name used to registered this server in an MBeanServer.
                  It is null if the this server is not registered or has been unregistered.                
            </javadoc>
            <declaration name="connectionIds" type="List&amp;lt;String&amp;gt;" line="246"/>
            <declaration name="sequenceNumberLock" type="int[]" line="247"/>
            <declaration name="sequenceNumber" type="long" line="248"/>
        </class>
    </source>