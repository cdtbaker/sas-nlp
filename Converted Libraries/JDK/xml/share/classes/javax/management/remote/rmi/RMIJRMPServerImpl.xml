<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote.rmi">
        <import package="java.io.IOException"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.RemoteException"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.rmi.server.UnicastRemoteObject"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.util.Map"/>
        <import package="java.util.Collections"/>
        <import package="javax.security.auth.Subject"/>
        <import package="com.sun.jmx.remote.internal.RMIExporter"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="sun.rmi.server.UnicastServerRef"/>
        <import package="sun.rmi.server.UnicastServerRef2"/>
        <class name="RMIJRMPServerImpl" line="17">
            <extends class="RMIServerImpl"/>
            <javadoc line="17">
                &lt;p&gt;An {@link RMIServer} object that is exported through JRMP and that
                  creates client connections as RMI objects exported through JRMP.
                  User code does not usually reference this class directly.&lt;/p&gt;                
                <see>
                    RMIServerImpl                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="25">
                &lt;p&gt;Creates a new {@link RMIServer} object that will be exported
                  on the given port using the given socket factories.&lt;/p&gt;                
                <param>
                    port the port on which this object and the {@link RMIConnectionImpl} objects it creates will be exported.  Can be
                      zero, to indicate any available port.                    
                </param>
                <param>
                    csf the client socket factory for the created RMI
                      objects.  Can be null.                    
                </param>
                <param>
                    ssf the server socket factory for the created RMI
                      objects.  Can be null.                    
                </param>
                <param>
                    env the environment map.  Can be null.                    
                </param>
                <exception>
                    IOException if the {@link RMIServer} object
                      cannot be created.                    
                </exception>
                <exception>
                    IllegalArgumentException if &lt;code&gt;port&lt;/code&gt; is
                      negative.                    
                </exception>
            </javadoc>
            <method name="RMIJRMPServerImpl" type="constructor" line="40">
                <params>
                    <param name="port" type="int"/>
                    <param name="csf" type="RMIClientSocketFactory"/>
                    <param name="ssf" type="RMIServerSocketFactory"/>
                    <param name="env" type="Map&lt;String,?&gt;"/>
                </params>
            </method>
            <method name="export" type="void" line="48"/>
            <method name="export" type="void" line="51">
                <params>
                    <param name="obj" type="Remote"/>
                </params>
                <declaration name="exporter" type="RMIExporter" line="52"/>
                <declaration name="daemon" type="boolean" line="53"/>
                <scope line="54"/>
                <scope line="57">
                    <scope line="58"/>
                    <scope line="61"/>
                </scope>
                <scope line="65"/>
                <scope line="68"/>
            </method>
            <method name="unexport" type="void" line="72">
                <params>
                    <param name="obj" type="Remote"/>
                    <param name="force" type="boolean"/>
                </params>
                <declaration name="exporter" type="RMIExporter" line="73"/>
            </method>
            <method name="getProtocol" type="String" line="77"/>
            <javadoc line="80">
                &lt;p&gt;Returns a serializable stub for this {@link RMIServer} object.&lt;/p&gt;                
                <return>
                    a serializable stub.                    
                </return>
                <exception>
                    IOException if the stub cannot be obtained - e.g the
                      RMIJRMPServerImpl has not been exported yet.                    
                </exception>
            </javadoc>
            <method name="toStub" type="Remote" line="86"/>
            <javadoc line="89">
                &lt;p&gt;Creates a new client connection as an RMI object exported
                  through JRMP. The port and socket factories for the new{@link RMIConnection} object are the ones supplied
                  to the &lt;code&gt;RMIJRMPServerImpl&lt;/code&gt; constructor.&lt;/p&gt;                
                <param>
                    connectionId the ID of the new connection. Every
                      connection opened by this connector server will have a
                      different id.  The behavior is unspecified if this parameter is
                      null.                    
                </param>
                <param>
                    subject the authenticated subject.  Can be null.                    
                </param>
                <return>
                    the newly-created &lt;code&gt;RMIConnection&lt;/code&gt;.                    
                </return>
                <exception>
                    IOException if the new {@link RMIConnection}object cannot be created or exported.                    
                </exception>
            </javadoc>
            <method name="makeClient" type="RMIConnection" line="101">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="subject" type="Subject"/>
                </params>
                <declaration name="client" type="RMIConnection" line="103"/>
            </method>
            <method name="closeClient" type="void" line="107">
                <params>
                    <param name="client" type="RMIConnection"/>
                </params>
            </method>
            <javadoc line="110">
                &lt;p&gt;Called by {@link #close()} to close the connector server by
                  unexporting this object.  After returning from this method, the
                  connector server must not accept any new connections.&lt;/p&gt;                
                <exception>
                    IOException if the attempt to close the connector
                      server failed.                    
                </exception>
            </javadoc>
            <method name="closeServer" type="void" line="117"/>
            <declaration name="port" type="int" line="120"/>
            <declaration name="csf" type="RMIClientSocketFactory" line="121"/>
            <declaration name="ssf" type="RMIServerSocketFactory" line="122"/>
            <declaration name="env" type="Map&amp;lt;String,?&amp;gt;" line="123"/>
        </class>
    </source>