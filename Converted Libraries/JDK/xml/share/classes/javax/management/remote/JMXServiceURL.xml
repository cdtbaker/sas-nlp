<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote">
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.Serializable"/>
        <import package="java.net.InetAddress"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.net.UnknownHostException"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.StringTokenizer"/>
        <class name="JMXServiceURL" line="10">
            <implements interface="Serializable"/>
            <javadoc line="10">
                &lt;p&gt;The address of a JMX API connector server.  Instances of this class
                  are immutable.&lt;/p&gt;
                  &lt;p&gt;The address is an &lt;em&gt;Abstract Service URL&lt;/em&gt; for SLP, as
                  defined in RFC 2609 and amended by RFC 3111.  It must look like
                  this:&lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;code&gt;service:jmx:&lt;em&gt;protocol&lt;/em&gt;:&lt;em&gt;sap&lt;/em&gt;&lt;/code&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;Here, &lt;code&gt;&lt;em&gt;protocol&lt;/em&gt;&lt;/code&gt; is the transport
                  protocol to be used to connect to the connector server.  It is
                  a string of one or more ASCII characters, each of which is a
                  letter, a digit, or one of the characters &lt;code&gt;+&lt;/code&gt; or
                  &lt;code&gt;-&lt;/code&gt;.  The first character must be a letter.
                  Uppercase letters are converted into lowercase ones.&lt;/p&gt;
                  &lt;p&gt;&lt;code&gt;&lt;em&gt;sap&lt;/em&gt;&lt;/code&gt; is the address at which the connector
                  server is found.  This address uses a subset of the syntax defined
                  by RFC 2609 for IP-based protocols.  It is a subset because the
                  &lt;code&gt;user@host&lt;/code&gt; syntax is not supported.&lt;/p&gt;
                  &lt;p&gt;The other syntaxes defined by RFC 2609 are not currently
                  supported by this class.&lt;/p&gt;
                  &lt;p&gt;The supported syntax is:&lt;/p&gt;
                  &lt;blockquote&gt;
                  &lt;code&gt;//&lt;em&gt;[host[&lt;/em&gt;:&lt;em&gt;port]][url-path]&lt;/em&gt;&lt;/code&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;Square brackets &lt;code&gt;[]&lt;/code&gt; indicate optional parts of
                  the address.  Not all protocols will recognize all optional
                  parts.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; is a host name, an IPv4 numeric
                  host address, or an IPv6 numeric address enclosed in square
                  brackets.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; is a decimal port number.  0
                  means a default or anonymous port, depending on the protocol.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt;
                  can be omitted.  The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; cannot be supplied
                  without a &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt;, if any, begins with a slash
                  (&lt;code&gt;/&lt;/code&gt;) or a semicolon (&lt;code&gt;;&lt;/code&gt;) and continues to
                  the end of the address.  It can contain attributes using the
                  semicolon syntax specified in RFC 2609.  Those attributes are not
                  parsed by this class and incorrect attribute syntax is not
                  detected.&lt;/p&gt;
                  &lt;p&gt;Although it is legal according to RFC 2609 to have a
                  &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt; that begins with a semicolon, not
                  all implementations of SLP allow it, so it is recommended to avoid
                  that syntax.&lt;/p&gt;
                  &lt;p&gt;Case is not significant in the initial
                  &lt;code&gt;service:jmx:&lt;em&gt;protocol&lt;/em&gt;&lt;/code&gt; string or in the host
                  part of the address.  Depending on the protocol, case can be
                  significant in the &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt;.&lt;/p&gt;                
                <see>
                    <a
                      href="http://www.ietf.org/rfc/rfc2609.txt">RFC 2609,
                      "Service Templates and <code>Service:</code> Schemes"</a>                    
                </see>
                <see>
                    <a
                      href="http://www.ietf.org/rfc/rfc3111.txt">RFC 3111,
                      "Service Location Protocol Modifications for IPv6"</a>                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="69"/>
            <javadoc line="70">
                &lt;p&gt;Constructs a &lt;code&gt;JMXServiceURL&lt;/code&gt; by parsing a Service URL
                  string.&lt;/p&gt;                
                <param>
                    serviceURL the URL string to be parsed.                    
                </param>
                <exception>
                    NullPointerException if <code>serviceURL</code> is
                      null.                    
                </exception>
                <exception>
                    MalformedURLException if <code>serviceURL</code>
                      does not conform to the syntax for an Abstract Service URL or
                      if it is not a valid name for a JMX Remote API service.  A
                      <code>JMXServiceURL</code> must begin with the string
                      <code>"service:jmx:"</code> (case-insensitive).  It must not
                      contain any characters that are not printable ASCII characters.                    
                </exception>
            </javadoc>
            <method name="JMXServiceURL" type="constructor" line="83">
                <params>
                    <param name="serviceURL" type="String"/>
                </params>
                <declaration name="serviceURLLength" type="int" line="84"/>
                <scope line="85">
                    <declaration name="c" type="char" line="86"/>
                    <scope line="87"/>
                </scope>
                <declaration name="requiredPrefix" type="String" line="91"/>
                <declaration name="requiredPrefixLength" type="int" line="92"/>
                <scope line="93"/>
                <declaration name="protoStart" type="int" line="96"/>
                <declaration name="protoEnd" type="int" line="97"/>
                <scope line="99"/>
                <declaration name="hostStart" type="int" line="102"/>
                <declaration name="hostEnd" type="int" line="103"/>
                <scope line="104">
                    <scope line="108"/>
                </scope>
                <scope line="112"/>
                <declaration name="portEnd" type="int" line="116"/>
                <scope line="117">
                    <scope line="118"/>
                    <declaration name="portStart" type="int" line="121"/>
                    <declaration name="portString" type="String" line="123"/>
                    <scope line="124"/>
                    <scope line="127"/>
                </scope>
                <scope line="131"/>
                <declaration name="urlPathStart" type="int" line="135"/>
            </method>
            <javadoc line="140">
                &lt;p&gt;Constructs a &lt;code&gt;JMXServiceURL&lt;/code&gt; with the given protocol,
                  host, and port.  This constructor is equivalent to{@link #JMXServiceURL(String,String,int,String)JMXServiceURL(protocol, host, port, null)}.&lt;/p&gt;                
                <param>
                    protocol the protocol part of the URL.  If null, defaults
                      to <code>jmxmp</code>.                    
                </param>
                <param>
                    host the host part of the URL.  If null, defaults to the
                      local host name, as determined by
                      <code>InetAddress.getLocalHost().getHostName()</code>.  If it
                      is a numeric IPv6 address, it can optionally be enclosed in
                      square brackets <code>[]</code>.                    
                </param>
                <param>
                    port the port part of the URL.                    
                </param>
                <exception>
                    MalformedURLException if one of the parts is
                      syntactically incorrect, or if <code>host</code> is null and it
                      is not possible to find the local host name, or if
                      <code>port</code> is negative.                    
                </exception>
            </javadoc>
            <method name="JMXServiceURL" type="constructor" line="156">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                &lt;p&gt;Constructs a &lt;code&gt;JMXServiceURL&lt;/code&gt; with the given parts.                
                <param>
                    protocol the protocol part of the URL.  If null, defaults
                      to <code>jmxmp</code>.                    
                </param>
                <param>
                    host the host part of the URL.  If null, defaults to the
                      local host name, as determined by
                      <code>InetAddress.getLocalHost().getHostName()</code>.  If it
                      is a numeric IPv6 address, it can optionally be enclosed in
                      square brackets <code>[]</code>.                    
                </param>
                <param>
                    port the port part of the URL.                    
                </param>
                <param>
                    urlPath the URL path part of the URL.  If null, defaults to
                      the empty string.                    
                </param>
                <exception>
                    MalformedURLException if one of the parts is
                      syntactically incorrect, or if <code>host</code> is null and it
                      is not possible to find the local host name, or if
                      <code>port</code> is negative.                    
                </exception>
            </javadoc>
            <method name="JMXServiceURL" type="constructor" line="176">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="host" type="String"/>
                    <param name="port" type="int"/>
                    <param name="urlPath" type="String"/>
                </params>
                <scope line="178">
                    <declaration name="local" type="InetAddress" line="179"/>
                    <scope line="180"/>
                    <scope line="183"/>
                    <scope line="187"/>
                    <scope line="190">
                        <scope line="191"/>
                    </scope>
                </scope>
                <scope line="197">
                    <scope line="198"/>
                    <scope line="202"/>
                </scope>
            </method>
            <method name="validate" type="void" line="214">
                <declaration name="protoEnd" type="int" line="215"/>
                <scope line="216"/>
                <scope line="221"/>
            </method>
            <method name="validateHost" type="void" line="225">
                <scope line="226">
                    <scope line="227"/>
                </scope>
            </method>
            <method name="validateHost" type="void" line="234">
                <params>
                    <param name="h" type="String"/>
                </params>
                <scope line="235">
                    <scope line="236"/>
                    <scope line="239">
                        <declaration name="bad" type="MalformedURLException" line="240"/>
                    </scope>
                </scope>
                <scope line="245">
                    <declaration name="hostLen" type="int" line="246"/>
                    <declaration name="lastc" type="char" line="247"/>
                    <declaration name="sawDot" type="boolean" line="248"/>
                    <declaration name="componentStart" type="char" line="249"/>
                    <scope line="250">
                        <declaration name="c" type="char" line="251"/>
                        <declaration name="isAlphaNumeric" type="boolean" line="252"/>
                        <scope line="255"/>
                        <scope line="259"/>
                        <scope line="264"/>
                    </scope>
                    <scope line="269">
                        <scope line="271">
                            <declaration name="tok" type="StringTokenizer" line="272"/>
                            <scope line="273">
                                <declaration name="ns" type="String" line="274"/>
                                <declaration name="n" type="int" line="275"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="282"/>
                </scope>
            </method>
            <declaration name="randomException" type="Exception" line="287"/>
            <javadoc line="288">
                &lt;p&gt;The protocol part of the Service URL.                
                <return>
                    the protocol part of the Service URL.  This is never null.                    
                </return>
            </javadoc>
            <method name="getProtocol" type="String" line="292"/>
            <javadoc line="295">
                &lt;p&gt;The host part of the Service URL.  If the Service URL was
                  constructed with the constructor that takes a URL string
                  parameter, the result is the substring specifying the host in
                  that URL.  If the Service URL was constructed with a
                  constructor that takes a separate host parameter, the result is
                  the string that was specified.  If that string was null, the
                  result is
                  &lt;code&gt;InetAddress.getLocalHost().getHostName()&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;In either case, if the host was specified using the
                  &lt;code&gt;[...]&lt;/code&gt; syntax for numeric IPv6 addresses, the
                  square brackets are not included in the return value here.&lt;/p&gt;                
                <return>
                    the host part of the Service URL.  This is never null.                    
                </return>
            </javadoc>
            <method name="getHost" type="String" line="309"/>
            <javadoc line="312">
                &lt;p&gt;The port of the Service URL.  If no port was
                  specified, the returned value is 0.&lt;/p&gt;                
                <return>
                    the port of the Service URL, or 0 if none.                    
                </return>
            </javadoc>
            <method name="getPort" type="int" line="317"/>
            <javadoc line="320">
                &lt;p&gt;The URL Path part of the Service URL.  This is an empty
                  string, or a string beginning with a slash (&lt;code&gt;/&lt;/code&gt;), or
                  a string beginning with a semicolon (&lt;code&gt;;&lt;/code&gt;).                
                <return>
                    the URL Path part of the Service URL.  This is never
                      null.                    
                </return>
            </javadoc>
            <method name="getURLPath" type="String" line="327"/>
            <javadoc line="330">
                &lt;p&gt;The string representation of this Service URL.  If the value
                  returned by this method is supplied to the
                  &lt;code&gt;JMXServiceURL&lt;/code&gt; constructor, the resultant object is
                  equal to this one.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; part of the returned string
                  is the value returned by {@link #getHost()}.  If that value
                  specifies a numeric IPv6 address, it is surrounded by square
                  brackets &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; part of the returned string
                  is the value returned by {@link #getPort()} in its shortest
                  decimal form.  If the value is zero, it is omitted.&lt;/p&gt;                
                <return>
                    the string representation of this Service URL.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="344">
                <declaration name="buf" type="StringBuilder" line="346"/>
                <declaration name="getHost" type="String" line="348"/>
                <declaration name="getPort" type="int" line="351"/>
            </method>
            <javadoc line="357">
                &lt;p&gt;Indicates whether some other object is equal to this one.
                  This method returns true if and only if &lt;code&gt;obj&lt;/code&gt; is an
                  instance of &lt;code&gt;JMXServiceURL&lt;/code&gt; whose {@link #getProtocol()}, {@link #getHost()}, {@link #getPort()}, and{@link #getURLPath()} methods return the same values as for
                  this object.  The values for {@link #getProtocol()} and {@link #getHost()} can differ in case without affecting equality.                
                <param>
                    obj the reference object with which to compare.                    
                </param>
                <return>
                    <code>true</code> if this object is the same as the
                      <code>obj</code> argument; <code>false</code> otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="366">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="u" type="JMXServiceURL" line="368"/>
            </method>
            <method name="hashCode" type="int" line="371"/>
            <method name="isNumericIPv6Address" type="boolean" line="374">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <method name="indexOf" type="int" line="377">
                <params>
                    <param name="s" type="String"/>
                    <param name="c" type="char"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <declaration name="index" type="int" line="378"/>
            </method>
            <method name="indexOfFirstNotInSet" type="int" line="382">
                <params>
                    <param name="s" type="String"/>
                    <param name="set" type="BitSet"/>
                    <param name="fromIndex" type="int"/>
                </params>
                <declaration name="slen" type="int" line="383"/>
                <declaration name="i" type="int" line="384"/>
                <scope line="385">
                    <declaration name="c" type="char" line="387"/>
                </scope>
            </method>
            <declaration name="alphaBitSet" type="BitSet" line="394"/>
            <declaration name="numericBitSet" type="BitSet" line="395"/>
            <declaration name="alphaNumericBitSet" type="BitSet" line="396"/>
            <declaration name="protocolBitSet" type="BitSet" line="397"/>
            <declaration name="hostNameBitSet" type="BitSet" line="398"/>
            <scope line="399"/>
            <declaration name="protocol" type="String" line="412"/>
            <javadoc line="412">
                The value returned by {@link #getProtocol()}.                
            </javadoc>
            <declaration name="host" type="String" line="416"/>
            <javadoc line="416">
                The value returned by {@link #getHost()}.                
            </javadoc>
            <declaration name="port" type="int" line="420"/>
            <javadoc line="420">
                The value returned by {@link #getPort()}.                
            </javadoc>
            <declaration name="urlPath" type="String" line="424"/>
            <javadoc line="424">
                The value returned by {@link #getURLPath()}.                
            </javadoc>
            <declaration name="toString" type="String" line="428"/>
            <javadoc line="428">
                Cached result of {@link #toString()}.                
            </javadoc>
            <declaration name="logger" type="ClassLogger" line="432"/>
        </class>
    </source>