<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote.rmi">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="com.sun.jmx.remote.internal.ClientCommunicatorAdmin"/>
        <import package="com.sun.jmx.remote.internal.ClientListenerInfo"/>
        <import package="com.sun.jmx.remote.internal.ClientNotifForwarder"/>
        <import package="com.sun.jmx.remote.internal.ProxyRef"/>
        <import package="com.sun.jmx.remote.internal.IIOPHelper"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.InvalidObjectException"/>
        <import package="java.io.NotSerializableException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectStreamClass"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.WriteAbortedException"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.reflect.Constructor"/>
        <import package="java.lang.reflect.InvocationHandler"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.lang.reflect.Proxy"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.rmi.MarshalException"/>
        <import package="java.rmi.MarshalledObject"/>
        <import package="java.rmi.NoSuchObjectException"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.ServerException"/>
        <import package="java.rmi.UnmarshalException"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RemoteObject"/>
        <import package="java.rmi.server.RemoteObjectInvocationHandler"/>
        <import package="java.rmi.server.RemoteRef"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.PrivilegedExceptionAction"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Set"/>
        <import package="java.util.WeakHashMap"/>
        <import package="javax.management.Attribute"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.MBeanServerDelegate"/>
        <import package="javax.management.MBeanServerNotification"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.Notification"/>
        <import package="javax.management.NotificationBroadcasterSupport"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationFilterSupport"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.QueryExp"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.remote.JMXConnectionNotification"/>
        <import package="javax.management.remote.JMXConnector"/>
        <import package="javax.management.remote.JMXConnectorFactory"/>
        <import package="javax.management.remote.JMXServiceURL"/>
        <import package="javax.management.remote.NotificationResult"/>
        <import package="javax.management.remote.JMXAddressable"/>
        <import package="javax.naming.InitialContext"/>
        <import package="javax.naming.NamingException"/>
        <import package="javax.rmi.ssl.SslRMIClientSocketFactory"/>
        <import package="javax.security.auth.Subject"/>
        <import package="sun.rmi.server.UnicastRef2"/>
        <import package="sun.rmi.transport.LiveRef"/>
        <class name="RMIConnector" line="82">
            <implements interface="JMXConnector"/>
            <implements interface="Serializable"/>
            <implements interface="JMXAddressable"/>
            <javadoc line="82">
                &lt;p&gt;A connection to a remote RMI connector.  Usually, such
                  connections are made using {@link javax.management.remote.JMXConnectorFactory JMXConnectorFactory}.
                  However, specialized applications can use this class directly, for
                  example with an {@link RMIServer} stub obtained without going
                  through JNDI.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="logger" type="ClassLogger" line="91"/>
            <declaration name="serialVersionUID" type="long" line="92"/>
            <method name="RMIConnector" type="constructor" line="93">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="address" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <scope line="98"/>
                <scope line="101"/>
            </method>
            <javadoc line="106">
                &lt;p&gt;Constructs an &lt;code&gt;RMIConnector&lt;/code&gt; that will connect
                  the RMI connector server with the given address.&lt;/p&gt;
                  &lt;p&gt;The address can refer directly to the connector server,
                  using one of the following syntaxes:&lt;/p&gt;
                  &lt;pre&gt;
                  service:jmx:rmi://&lt;em&gt;[host[:port]]&lt;/em&gt;/stub/&lt;em&gt;encoded-stub&lt;/em&gt;
                  service:jmx:iiop://&lt;em&gt;[host[:port]]&lt;/em&gt;/ior/&lt;em&gt;encoded-IOR&lt;/em&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;(Here, the square brackets &lt;code&gt;[]&lt;/code&gt; are not part of the
                  address but indicate that the host and port are optional.)&lt;/p&gt;
                  &lt;p&gt;The address can instead indicate where to find an RMI stub
                  through JNDI, using one of the following syntaxes:&lt;/p&gt;
                  &lt;pre&gt;
                  service:jmx:rmi://&lt;em&gt;[host[:port]]&lt;/em&gt;/jndi/&lt;em&gt;jndi-name&lt;/em&gt;
                  service:jmx:iiop://&lt;em&gt;[host[:port]]&lt;/em&gt;/jndi/&lt;em&gt;jndi-name&lt;/em&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;An implementation may also recognize additional address
                  syntaxes, for example:&lt;/p&gt;
                  &lt;pre&gt;
                  service:jmx:iiop://&lt;em&gt;[host[:port]]&lt;/em&gt;/stub/&lt;em&gt;encoded-stub&lt;/em&gt;
                  &lt;/pre&gt;                
                <param>
                    url the address of the RMI connector server.                    
                </param>
                <param>
                    environment additional attributes specifying how to make
                      the connection.  For JNDI-based addresses, these attributes can
                      usefully include JNDI attributes recognized by {@link InitialContext#InitialContext(Hashtable) InitialContext}.  This
                      parameter can be null, which is equivalent to an empty Map.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>url</code>
                      is null.                    
                </exception>
            </javadoc>
            <method name="RMIConnector" type="constructor" line="136">
                <params>
                    <param name="url" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
            </method>
            <javadoc line="139">
                &lt;p&gt;Constructs an &lt;code&gt;RMIConnector&lt;/code&gt; using the given RMI stub.                
                <param>
                    rmiServer an RMI stub representing the RMI connector server.                    
                </param>
                <param>
                    environment additional attributes specifying how to make
                      the connection.  This parameter can be null, which is
                      equivalent to an empty Map.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>rmiServer</code>
                      is null.                    
                </exception>
            </javadoc>
            <method name="RMIConnector" type="constructor" line="148">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
            </method>
            <javadoc line="151">
                &lt;p&gt;Returns a string representation of this object.  In general,
                  the &lt;code&gt;toString&lt;/code&gt; method returns a string that
                  &quot;textually represents&quot; this object. The result should be a
                  concise but informative representation that is easy for a
                  person to read.&lt;/p&gt;                
                <return>
                    a String representation of this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="159">
                <declaration name="b" type="StringBuilder" line="160"/>
                <scope line="162"/>
                <scope line="165"/>
            </method>
            <javadoc line="171">
                &lt;p&gt;The address of this connector.&lt;/p&gt;                
                <return>
                    the address of this connector, or null if it
                      does not have one.                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAddress" type="JMXServiceURL" line="177"/>
            <method name="connect" type="void" line="180"/>
            <method name="connect" type="void" line="183">
                <params>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <declaration name="tracing" type="boolean" line="184"/>
                <declaration name="idstr" type="String" line="185"/>
                <scope line="186"/>
                <scope line="190"/>
                <scope line="194">
                    <declaration name="usemap" type="Map&lt;String,Object&gt;" line="196"/>
                    <scope line="197"/>
                    <declaration name="stub" type="RMIServer" line="202"/>
                    <declaration name="checkStub" type="boolean" line="203"/>
                    <declaration name="credentials" type="Object" line="209"/>
                    <scope line="210"/>
                    <scope line="213">
                        <scope line="214">
                            <declaration name="pro" type="String" line="215"/>
                            <declaration name="path" type="String" line="216"/>
                            <scope line="217">
                                <declaration name="mfe" type="MalformedURLException" line="218"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="checkPeriod" type="long" line="230"/>
                    <declaration name="connectedNotif" type="Notification" line="234"/>
                </scope>
                <scope line="238"/>
                <scope line="242"/>
                <scope line="246">
                    <declaration name="msg" type="String" line="247"/>
                </scope>
            </method>
            <method name="getConnectionId" type="String" line="252">
                <scope line="253"/>
            </method>
            <method name="getMBeanServerConnection" type="MBeanServerConnection" line="259"/>
            <method name="getMBeanServerConnection" type="MBeanServerConnection" line="262">
                <params>
                    <param name="delegationSubject" type="Subject"/>
                </params>
                <scope line="263"/>
                <scope line="267"/>
                <declaration name="rmbsc" type="MBeanServerConnection" line="271"/>
                <scope line="272"/>
            </method>
            <method name="addConnectionNotificationListener" type="void" line="279">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="removeConnectionNotificationListener" type="void" line="283">
                <params>
                    <param name="listener" type="NotificationListener"/>
                </params>
            </method>
            <method name="removeConnectionNotificationListener" type="void" line="287">
                <params>
                    <param name="listener" type="NotificationListener"/>
                    <param name="filter" type="NotificationFilter"/>
                    <param name="handback" type="Object"/>
                </params>
            </method>
            <method name="sendNotification" type="void" line="291">
                <params>
                    <param name="n" type="Notification"/>
                </params>
            </method>
            <method name="close" type="void" line="294"/>
            <method name="close" type="void" line="297">
                <params>
                    <param name="intern" type="boolean"/>
                </params>
                <declaration name="tracing" type="boolean" line="298"/>
                <declaration name="debug" type="boolean" line="299"/>
                <declaration name="idstr" type="String" line="300"/>
                <scope line="301">
                    <scope line="302">
                        <scope line="303"/>
                    </scope>
                    <scope line="308"/>
                </scope>
                <scope line="312">
                    <scope line="313"/>
                </scope>
                <declaration name="savedConnectionId" type="String" line="318"/>
                <scope line="319"/>
                <scope line="324"/>
                <scope line="327">
                    <scope line="328"/>
                    <scope line="332"/>
                </scope>
                <scope line="338">
                    <scope line="339"/>
                    <scope line="343"/>
                    <scope line="345"/>
                </scope>
                <scope line="352">
                    <declaration name="closedNotif" type="Notification" line="353"/>
                </scope>
                <scope line="356">
                    <declaration name="x" type="IOException" line="360"/>
                </scope>
            </method>
            <method name="addListenerWithSubject" type="Integer" line="364">
                <params>
                    <param name="name" type="ObjectName"/>
                    <param name="filter" type="MarshalledObject<NotificationFilter>"/>
                    <param name="delegationSubject" type="Subject"/>
                    <param name="reconnect" type="boolean"/>
                </params>
                <declaration name="debug" type="boolean" line="365"/>
                <declaration name="names" type="ObjectName[]" line="367"/>
                <declaration name="filters" type="MarshalledObject&lt;NotificationFilter&gt;[]" line="368"/>
                <declaration name="delegationSubjects" type="Subject[]" line="369"/>
                <declaration name="listenerIDs" type="Integer[]" line="370"/>
            </method>
            <method name="addListenersWithSubjects" type="Integer[]" line="374">
                <params>
                    <param name="names" type="ObjectName[]"/>
                    <param name="filters" type="MarshalledObject<NotificationFilter>[]"/>
                    <param name="delegationSubjects" type="Subject[]"/>
                    <param name="reconnect" type="boolean"/>
                </params>
                <declaration name="debug" type="boolean" line="375"/>
                <declaration name="old" type="ClassLoader" line="377"/>
                <declaration name="listenerIDs" type="Integer[]" line="378"/>
                <scope line="379"/>
                <scope line="382">
                    <scope line="383"/>
                    <scope line="387"/>
                </scope>
                <scope line="391"/>
                <scope line="394"/>
            </method>
            <class name="RemoteMBeanServerConnection" line="400">
                <implements interface="MBeanServerConnection"/>
                <declaration name="delegationSubject" type="Subject" line="401"/>
                <method name="RemoteMBeanServerConnection" type="constructor" line="402"/>
                <method name="RemoteMBeanServerConnection" type="constructor" line="405">
                    <params>
                        <param name="delegationSubject" type="Subject"/>
                    </params>
                </method>
                <method name="createMBean" type="ObjectInstance" line="408">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="410"/>
                    <scope line="411"/>
                    <scope line="414"/>
                    <scope line="418"/>
                </method>
                <method name="createMBean" type="ObjectInstance" line="422">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="ObjectName"/>
                        <param name="loaderName" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="424"/>
                    <scope line="425"/>
                    <scope line="428"/>
                    <scope line="432"/>
                </method>
                <method name="createMBean" type="ObjectInstance" line="436">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="ObjectName"/>
                        <param name="params" type="Object"/>
                        <param name="signature" type="String"/>
                    </params>
                    <declaration name="sParams" type="MarshalledObject&lt;Object[]&gt;" line="438"/>
                    <declaration name="old" type="ClassLoader" line="439"/>
                    <scope line="440"/>
                    <scope line="443"/>
                    <scope line="447"/>
                </method>
                <method name="createMBean" type="ObjectInstance" line="451">
                    <params>
                        <param name="className" type="String"/>
                        <param name="name" type="ObjectName"/>
                        <param name="loaderName" type="ObjectName"/>
                        <param name="params" type="Object"/>
                        <param name="signature" type="String"/>
                    </params>
                    <declaration name="sParams" type="MarshalledObject&lt;Object[]&gt;" line="453"/>
                    <declaration name="old" type="ClassLoader" line="454"/>
                    <scope line="455"/>
                    <scope line="458"/>
                    <scope line="462"/>
                </method>
                <method name="unregisterMBean" type="void" line="466">
                    <params>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="468"/>
                    <scope line="469"/>
                    <scope line="472"/>
                    <scope line="476"/>
                </method>
                <method name="getObjectInstance" type="ObjectInstance" line="480">
                    <params>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="482"/>
                    <scope line="483"/>
                    <scope line="486"/>
                    <scope line="490"/>
                </method>
                <method name="queryMBeans" type="Set<ObjectInstance>" line="494">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="query" type="QueryExp"/>
                    </params>
                    <declaration name="sQuery" type="MarshalledObject&lt;QueryExp&gt;" line="496"/>
                    <declaration name="old" type="ClassLoader" line="497"/>
                    <scope line="498"/>
                    <scope line="501"/>
                    <scope line="505"/>
                </method>
                <method name="queryNames" type="Set<ObjectName>" line="509">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="query" type="QueryExp"/>
                    </params>
                    <declaration name="sQuery" type="MarshalledObject&lt;QueryExp&gt;" line="511"/>
                    <declaration name="old" type="ClassLoader" line="512"/>
                    <scope line="513"/>
                    <scope line="516"/>
                    <scope line="520"/>
                </method>
                <method name="isRegistered" type="boolean" line="524">
                    <params>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="526"/>
                    <scope line="527"/>
                    <scope line="530"/>
                    <scope line="534"/>
                </method>
                <method name="getMBeanCount" type="Integer" line="538">
                    <declaration name="old" type="ClassLoader" line="540"/>
                    <scope line="541"/>
                    <scope line="544"/>
                    <scope line="548"/>
                </method>
                <method name="getAttribute" type="Object" line="552">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="attribute" type="String"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="554"/>
                    <scope line="555"/>
                    <scope line="558"/>
                    <scope line="562"/>
                </method>
                <method name="getAttributes" type="AttributeList" line="566">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="attributes" type="String[]"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="568"/>
                    <scope line="569"/>
                    <scope line="572"/>
                    <scope line="576"/>
                </method>
                <method name="setAttribute" type="void" line="580">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="attribute" type="Attribute"/>
                    </params>
                    <declaration name="sAttribute" type="MarshalledObject&lt;Attribute&gt;" line="582"/>
                    <declaration name="old" type="ClassLoader" line="583"/>
                    <scope line="584"/>
                    <scope line="587"/>
                    <scope line="591"/>
                </method>
                <method name="setAttributes" type="AttributeList" line="595">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="attributes" type="AttributeList"/>
                    </params>
                    <declaration name="sAttributes" type="MarshalledObject&lt;AttributeList&gt;" line="597"/>
                    <declaration name="old" type="ClassLoader" line="598"/>
                    <scope line="599"/>
                    <scope line="602"/>
                    <scope line="606"/>
                </method>
                <method name="invoke" type="Object" line="610">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="operationName" type="String"/>
                        <param name="params" type="Object"/>
                        <param name="signature" type="String"/>
                    </params>
                    <declaration name="sParams" type="MarshalledObject&lt;Object[]&gt;" line="612"/>
                    <declaration name="old" type="ClassLoader" line="613"/>
                    <scope line="614"/>
                    <scope line="617"/>
                    <scope line="621"/>
                </method>
                <method name="getDefaultDomain" type="String" line="625">
                    <declaration name="old" type="ClassLoader" line="627"/>
                    <scope line="628"/>
                    <scope line="631"/>
                    <scope line="635"/>
                </method>
                <method name="getDomains" type="String[]" line="639">
                    <declaration name="old" type="ClassLoader" line="641"/>
                    <scope line="642"/>
                    <scope line="645"/>
                    <scope line="649"/>
                </method>
                <method name="getMBeanInfo" type="MBeanInfo" line="653">
                    <params>
                        <param name="name" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="655"/>
                    <scope line="656"/>
                    <scope line="659"/>
                    <scope line="663"/>
                </method>
                <method name="isInstanceOf" type="boolean" line="667">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="className" type="String"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="669"/>
                    <scope line="670"/>
                    <scope line="673"/>
                    <scope line="677"/>
                </method>
                <method name="addNotificationListener" type="void" line="681">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="listener" type="ObjectName"/>
                        <param name="filter" type="NotificationFilter"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <declaration name="sFilter" type="MarshalledObject&lt;NotificationFilter&gt;" line="683"/>
                    <declaration name="sHandback" type="MarshalledObject&lt;Object&gt;" line="684"/>
                    <declaration name="old" type="ClassLoader" line="685"/>
                    <scope line="686"/>
                    <scope line="689"/>
                    <scope line="693"/>
                </method>
                <method name="removeNotificationListener" type="void" line="697">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="listener" type="ObjectName"/>
                    </params>
                    <declaration name="old" type="ClassLoader" line="699"/>
                    <scope line="700"/>
                    <scope line="703"/>
                    <scope line="707"/>
                </method>
                <method name="removeNotificationListener" type="void" line="711">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="listener" type="ObjectName"/>
                        <param name="filter" type="NotificationFilter"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <declaration name="sFilter" type="MarshalledObject&lt;NotificationFilter&gt;" line="713"/>
                    <declaration name="sHandback" type="MarshalledObject&lt;Object&gt;" line="714"/>
                    <declaration name="old" type="ClassLoader" line="715"/>
                    <scope line="716"/>
                    <scope line="719"/>
                    <scope line="723"/>
                </method>
                <method name="addNotificationListener" type="void" line="727">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="listener" type="NotificationListener"/>
                        <param name="filter" type="NotificationFilter"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <declaration name="debug" type="boolean" line="728"/>
                    <declaration name="listenerID" type="Integer" line="730"/>
                </method>
                <method name="removeNotificationListener" type="void" line="733">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="listener" type="NotificationListener"/>
                    </params>
                    <declaration name="debug" type="boolean" line="734"/>
                    <declaration name="ret" type="Integer[]" line="736"/>
                    <declaration name="old" type="ClassLoader" line="738"/>
                    <scope line="739"/>
                    <scope line="742"/>
                    <scope line="746"/>
                </method>
                <method name="removeNotificationListener" type="void" line="750">
                    <params>
                        <param name="name" type="ObjectName"/>
                        <param name="listener" type="NotificationListener"/>
                        <param name="filter" type="NotificationFilter"/>
                        <param name="handback" type="Object"/>
                    </params>
                    <declaration name="debug" type="boolean" line="751"/>
                    <declaration name="ret" type="Integer" line="753"/>
                    <declaration name="old" type="ClassLoader" line="755"/>
                    <scope line="756"/>
                    <scope line="759"/>
                    <scope line="763"/>
                </method>
            </class>
            <class name="RMINotifClient" line="768">
                <extends class="ClientNotifForwarder"/>
                <method name="RMINotifClient" type="constructor" line="769">
                    <params>
                        <param name="cl" type="ClassLoader"/>
                        <param name="env" type="Map<String,?>"/>
                    </params>
                </method>
                <method name="fetchNotifs" type="NotificationResult" line="772">
                    <params>
                        <param name="clientSequenceNumber" type="long"/>
                        <param name="maxNotifications" type="int"/>
                        <param name="timeout" type="long"/>
                    </params>
                    <declaration name="org" type="IOException" line="773"/>
                    <scope line="774">
                        <scope line="775"/>
                        <scope line="778">
                            <scope line="780"/>
                            <scope line="784"/>
                        </scope>
                    </scope>
                    <scope line="789">
                        <declaration name="ume" type="UnmarshalException" line="790"/>
                        <scope line="792">
                            <declaration name="wae" type="WriteAbortedException" line="793"/>
                        </scope>
                    </scope>
                    <scope line="797">
                        <declaration name="me" type="MarshalException" line="798"/>
                        <scope line="799"/>
                    </scope>
                </method>
                <method name="addListenerForMBeanRemovedNotif" type="Integer" line="805">
                    <declaration name="clientFilter" type="NotificationFilterSupport" line="806"/>
                    <declaration name="sFilter" type="MarshalledObject&lt;NotificationFilter&gt;" line="808"/>
                    <declaration name="listenerIDs" type="Integer[]" line="809"/>
                    <declaration name="names" type="ObjectName[]" line="810"/>
                    <declaration name="filters" type="MarshalledObject&lt;NotificationFilter&gt;[]" line="811"/>
                    <declaration name="subjects" type="Subject[]" line="812"/>
                    <scope line="813"/>
                    <scope line="816"/>
                </method>
                <method name="removeListenerForMBeanRemovedNotif" type="void" line="822">
                    <params>
                        <param name="id" type="Integer"/>
                    </params>
                    <scope line="823"/>
                    <scope line="826"/>
                </method>
                <method name="lostNotifs" type="void" line="831">
                    <params>
                        <param name="message" type="String"/>
                        <param name="number" type="long"/>
                    </params>
                    <declaration name="notifType" type="String" line="832"/>
                    <declaration name="n" type="JMXConnectionNotification" line="833"/>
                </method>
            </class>
            <class name="RMIClientCommunicatorAdmin" line="837">
                <extends class="ClientCommunicatorAdmin"/>
                <method name="RMIClientCommunicatorAdmin" type="constructor" line="838">
                    <params>
                        <param name="period" type="long"/>
                    </params>
                </method>
                <method name="gotIOException" type="void" line="841">
                    <params>
                        <param name="ioe" type="IOException"/>
                    </params>
                    <scope line="842"/>
                    <scope line="846"/>
                    <scope line="849">
                        <declaration name="toClose" type="boolean" line="850"/>
                        <scope line="851">
                            <scope line="852"/>
                        </scope>
                        <scope line="857">
                            <declaration name="failedNotif" type="Notification" line="858"/>
                            <scope line="860"/>
                            <scope line="863"/>
                        </scope>
                    </scope>
                    <scope line="867">
                        <declaration name="tt" type="Throwable" line="868"/>
                        <scope line="869"/>
                        <scope line="872"/>
                    </scope>
                </method>
                <method name="reconnectNotificationListeners" type="void" line="878">
                    <params>
                        <param name="old" type="ClientListenerInfo[]"/>
                    </params>
                    <declaration name="len" type="int" line="879"/>
                    <declaration name="i" type="int" line="880"/>
                    <declaration name="clis" type="ClientListenerInfo[]" line="881"/>
                    <declaration name="subjects" type="Subject[]" line="882"/>
                    <declaration name="names" type="ObjectName[]" line="883"/>
                    <declaration name="listeners" type="NotificationListener[]" line="884"/>
                    <declaration name="filters" type="NotificationFilter[]" line="885"/>
                    <declaration name="mFilters" type="MarshalledObject&lt;NotificationFilter&gt;[]" line="886"/>
                    <declaration name="handbacks" type="Object[]" line="887"/>
                    <scope line="888"/>
                    <scope line="896">
                        <declaration name="ids" type="Integer[]" line="897"/>
                        <scope line="898"/>
                    </scope>
                    <scope line="904"/>
                    <declaration name="j" type="int" line="906"/>
                    <scope line="907">
                        <scope line="908">
                            <declaration name="id" type="Integer" line="909"/>
                        </scope>
                        <scope line="912"/>
                    </scope>
                    <scope line="916">
                        <declaration name="tmp" type="ClientListenerInfo[]" line="917"/>
                    </scope>
                </method>
                <method name="checkConnection" type="void" line="923"/>
                <method name="doStart" type="void" line="927">
                    <declaration name="stub" type="RMIServer" line="928"/>
                    <scope line="929"/>
                    <scope line="932"/>
                    <declaration name="credentials" type="Object" line="936"/>
                    <declaration name="old" type="ClientListenerInfo[]" line="938"/>
                    <declaration name="reconnectedNotif" type="Notification" line="941"/>
                </method>
                <method name="doStop" type="void" line="944">
                    <scope line="945"/>
                    <scope line="948"/>
                </method>
            </class>
            <javadoc line="954">
                &lt;p&gt;In order to be usable, an IIOP stub must be connected to an ORB.
                  The stub is automatically connected to the ORB if:
                  &lt;ul&gt;
                  &lt;li&gt; It was returned by the COS naming&lt;/li&gt;
                  &lt;li&gt; Its server counterpart has been registered in COS naming
                  through JNDI.&lt;/li&gt;
                  &lt;/ul&gt;
                  Otherwise, it is not connected. A stub which is deserialized
                  from Jini is not connected. A stub which is obtained from a
                  non registered RMIIIOPServerImpl is not a connected.&lt;br&gt;
                  A stub which is not connected can&apos;t be serialized, and thus
                  can&apos;t be registered in Jini. A stub which is not connected can&apos;t
                  be used to invoke methods on the server.
                  &lt;p&gt;
                  In order to palliate this, this method will connect the
                  given stub if it is not yet connected. If the given
                  &lt;var&gt;RMIServer&lt;/var&gt; is not an instance of{@link javax.rmi.CORBA.Stub javax.rmi.CORBA.Stub}, then the
                  method do nothing and simply returns that stub. Otherwise,
                  this method will attempt to connect the stub to an ORB as
                  follows:
                  &lt;ul&gt;
                  &lt;p&gt;This method looks in the provided &lt;var&gt;environment&lt;/var&gt; for
                  the &quot;java.naming.corba.orb&quot; property. If it is found, the
                  referenced object (an {@link org.omg.CORBA.ORB ORB}) is used to
                  connect the stub. Otherwise, a new org.omg.CORBA.ORB is created
                  by calling {@link org.omg.CORBA.ORB#init(String[],Properties)org.omg.CORBA.ORB.init((String[])null,(Properties)null)}&lt;p&gt;The new created ORB is kept in a static{@link WeakReference} and can be reused for connecting other
                  stubs. However, no reference is ever kept on the ORB provided
                  in the &lt;var&gt;environment&lt;/var&gt; map, if any.
                  &lt;/ul&gt;                
                <param>
                    rmiServer A RMI Server Stub.                    
                </param>
                <param>
                    environment An environment map, possibly containing an ORB.                    
                </param>
                <return>
                    the given stub.                    
                </return>
                <exception>
                    IllegalArgumentException if the
                      <tt>java.naming.corba.orb</tt> property is specified and
                      does not point to an {@link org.omg.CORBA.ORB ORB}.                    
                </exception>
                <exception>
                    IOException if the connection to the ORB failed.                    
                </exception>
            </javadoc>
            <method name="connectStub" type="RMIServer" line="992">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <scope line="993">
                    <scope line="994"/>
                    <scope line="997"/>
                </scope>
            </method>
            <javadoc line="1003">
                Get the ORB specified by &lt;var&gt;environment&lt;/var&gt;, or create a
                  new one.
                  &lt;p&gt;This method looks in the provided &lt;var&gt;environment&lt;/var&gt; for
                  the &quot;java.naming.corba.orb&quot; property. If it is found, the
                  referenced object (an {@link org.omg.CORBA.ORB ORB}) is
                  returned. Otherwise, a new org.omg.CORBA.ORB is created
                  by calling {@link org.omg.CORBA.ORB#init(String[],java.util.Properties)org.omg.CORBA.ORB.init((String[])null,(Properties)null)}&lt;p&gt;The new created ORB is kept in a static{@link WeakReference} and can be reused for connecting other
                  stubs. However, no reference is ever kept on the ORB provided
                  in the &lt;var&gt;environment&lt;/var&gt; map, if any.                
                <param>
                    environment An environment map, possibly containing an ORB.                    
                </param>
                <return>
                    An ORB.                    
                </return>
                <exception>
                    IllegalArgumentException if the
                      <tt>java.naming.corba.orb</tt> property is specified and
                      does not point to an {@link org.omg.CORBA.ORB ORB}.                    
                </exception>
                <exception>
                    IOException if the ORB initialization failed.                    
                </exception>
            </javadoc>
            <method name="resolveOrb" type="Object" line="1020">
                <params>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <scope line="1021">
                    <declaration name="orb" type="Object" line="1022"/>
                </scope>
                <declaration name="orb" type="Object" line="1026"/>
                <declaration name="newOrb" type="Object" line="1028"/>
            </method>
            <javadoc line="1032">
                Read RMIConnector fields from an {@link java.io.ObjectInputStreamObjectInputStream}.
                  Calls &lt;code&gt;s.defaultReadObject()&lt;/code&gt; and then initializes
                  all transient variables that need initializing.                
                <param>
                    s The ObjectInputStream to read from.                    
                </param>
                <exception>
                    InvalidObjectException if none of <var>rmiServer</var> stub
                      or <var>jmxServiceURL</var> are set.                    
                </exception>
                <see>
                    #RMIConnector(JMXServiceURL,Map)                    
                </see>
                <see>
                    #RMIConnector(RMIServer,Map)                    
                </see>
            </javadoc>
            <method name="readObject" type="void" line="1042">
                <params>
                    <param name="s" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="1047">
                Writes the RMIConnector fields to an {@link java.io.ObjectOutputStreamObjectOutputStream}.
                  &lt;p&gt;Connects the underlying RMIServer stub to an ORB, if needed,
                  before serializing it. This is done using the environment
                  map that was provided to the constructor, if any, and as documented
                  in {@link javax.management.remote.rmi}.&lt;/p&gt;
                  &lt;p&gt;This method then calls &lt;code&gt;s.defaultWriteObject()&lt;/code&gt;.
                  Usually, &lt;var&gt;rmiServer&lt;/var&gt; is null if this object
                  was constructed with a JMXServiceURL, and &lt;var&gt;jmxServiceURL&lt;/var&gt;
                  is null if this object is constructed with a RMIServer stub.
                  &lt;p&gt;Note that the environment Map is not serialized, since the objects
                  it contains are assumed to be contextual and relevant only
                  with respect to the local environment (class loader, ORB, etc...).&lt;/p&gt;
                  &lt;p&gt;After an RMIConnector is deserialized, it is assumed that the
                  user will call {@link #connect(Map)}, providing a new Map that
                  can contain values which are contextually relevant to the new
                  local environment.&lt;/p&gt;
                  &lt;p&gt;Since connection to the ORB is needed prior to serializing, and
                  since the ORB to connect to is one of those contextual parameters,
                  it is not recommended to re-serialize a just de-serialized object -
                  as the de-serialized object has no map. Thus, when an RMIConnector
                  object is needed for serialization or transmission to a remote
                  application, it is recommended to obtain a new RMIConnector stub
                  by calling {@link RMIConnectorServer#toJMXConnector(Map)}.&lt;/p&gt;                
                <param>
                    s The ObjectOutputStream to write to.                    
                </param>
                <exception>
                    InvalidObjectException if none of <var>rmiServer</var> stub
                      or <var>jmxServiceURL</var> are set.                    
                </exception>
                <see>
                    #RMIConnector(JMXServiceURL,Map)                    
                </see>
                <see>
                    #RMIConnector(RMIServer,Map)                    
                </see>
            </javadoc>
            <method name="writeObject" type="void" line="1077">
                <params>
                    <param name="s" type="java.io.ObjectOutputStream"/>
                </params>
            </method>
            <method name="initTransients" type="void" line="1082"/>
            <method name="checkStub" type="void" line="1088">
                <params>
                    <param name="stub" type="Remote"/>
                    <param name="stubClass" type="Class<?>"/>
                </params>
                <scope line="1089">
                    <scope line="1090"/>
                    <scope line="1093">
                        <declaration name="handler" type="InvocationHandler" line="1094"/>
                    </scope>
                </scope>
                <declaration name="ref" type="RemoteRef" line="1099"/>
                <declaration name="liveRef" type="LiveRef" line="1101"/>
                <declaration name="csf" type="RMIClientSocketFactory" line="1102"/>
            </method>
            <method name="findRMIServer" type="RMIServer" line="1105">
                <params>
                    <param name="directoryURL" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,Object>"/>
                </params>
                <declaration name="isIiop" type="boolean" line="1106"/>
                <scope line="1107"/>
                <declaration name="path" type="String" line="1110"/>
                <declaration name="end" type="int" line="1111"/>
                <scope line="1115"/>
                <scope line="1119">
                    <declaration name="msg" type="String" line="1120"/>
                </scope>
            </method>
            <javadoc line="1124">
                Lookup the RMIServer stub in a directory.                
                <param>
                    jndiURL A JNDI URL indicating the location of the Stub
                      (see {@link javax.management.remote.rmi}), e.g.:
                      <ul><li><tt>rmi://registry-host:port/rmi-stub-name</tt></li>
                      <li>or <tt>iiop://cosnaming-host:port/iiop-stub-name</tt></li>
                      <li>or <tt>ldap://ldap-host:port/java-container-dn</tt></li>
                      </ul>                    
                </param>
                <param>
                    env the environment Map passed to the connector.                    
                </param>
                <param>
                    isIiop true if the stub is expected to be an IIOP stub.                    
                </param>
                <return>
                    The retrieved RMIServer stub.                    
                </return>
                <exception>
                    NamingException if the stub couldn't be found.                    
                </exception>
            </javadoc>
            <method name="findRMIServerJNDI" type="RMIServer" line="1137">
                <params>
                    <param name="jndiURL" type="String"/>
                    <param name="env" type="Map<String,?>"/>
                    <param name="isIiop" type="boolean"/>
                </params>
                <declaration name="ctx" type="InitialContext" line="1138"/>
                <declaration name="objref" type="Object" line="1139"/>
            </method>
            <method name="narrowJRMPServer" type="RMIServer" line="1144">
                <params>
                    <param name="objref" type="Object"/>
                </params>
            </method>
            <method name="narrowIIOPServer" type="RMIServer" line="1147">
                <params>
                    <param name="objref" type="Object"/>
                </params>
                <scope line="1148"/>
                <scope line="1151"/>
            </method>
            <method name="findRMIServerIIOP" type="RMIServer" line="1157">
                <params>
                    <param name="ior" type="String"/>
                    <param name="env" type="Map<String,?>"/>
                    <param name="isIiop" type="boolean"/>
                </params>
                <declaration name="orb" type="Object" line="1158"/>
                <declaration name="stub" type="Object" line="1159"/>
            </method>
            <method name="findRMIServerJRMP" type="RMIServer" line="1162">
                <params>
                    <param name="base64" type="String"/>
                    <param name="env" type="Map<String,?>"/>
                    <param name="isIiop" type="boolean"/>
                </params>
                <declaration name="serialized" type="byte[]" line="1163"/>
                <scope line="1164"/>
                <scope line="1167"/>
                <declaration name="bin" type="ByteArrayInputStream" line="1170"/>
                <declaration name="loader" type="ClassLoader" line="1171"/>
                <declaration name="oin" type="ObjectInputStream" line="1172"/>
                <declaration name="stub" type="Object" line="1173"/>
                <scope line="1174"/>
                <scope line="1177"/>
            </method>
            <class name="ObjectInputStreamWithLoader" line="1182">
                <extends class="ObjectInputStream"/>
                <method name="ObjectInputStreamWithLoader" type="constructor" line="1183">
                    <params>
                        <param name="in" type="InputStream"/>
                        <param name="cl" type="ClassLoader"/>
                    </params>
                </method>
                <method name="resolveClass" type="Class<?>" line="1187">
                    <params>
                        <param name="classDesc" type="ObjectStreamClass"/>
                    </params>
                </method>
                <declaration name="loader" type="ClassLoader" line="1190"/>
            </class>
            <declaration name="rmiServerImplStubClassName" type="String" line="1192"/>
            <declaration name="rmiServerImplStubClass" type="Class&lt;?&gt;" line="1193"/>
            <declaration name="rmiConnectionImplStubClassName" type="String" line="1194"/>
            <declaration name="rmiConnectionImplStubClass" type="Class&lt;?&gt;" line="1195"/>
            <declaration name="pRefClassName" type="String" line="1196"/>
            <declaration name="proxyRefConstructor" type="Constructor&lt;?&gt;" line="1197"/>
            <scope line="1198">
                <declaration name="pRefByteCodeString" type="String" line="1199"/>
                <declaration name="pRefByteCode" type="byte[]" line="1200"/>
                <anonymous_class line="1201">
                    <method name="run" type="Constructor<?>" line="1202">
                        <declaration name="thisClass" type="Class" line="1203"/>
                        <declaration name="thisLoader" type="ClassLoader" line="1204"/>
                        <declaration name="thisProtectionDomain" type="ProtectionDomain" line="1205"/>
                        <declaration name="otherClassNames" type="String[]" line="1206"/>
                        <declaration name="cl" type="ClassLoader" line="1207"/>
                        <declaration name="c" type="Class&lt;?&gt;" line="1208"/>
                    </method>
                </anonymous_class>
                <declaration name="action" type="PrivilegedExceptionAction&lt;Constructor&lt;?&gt;&gt;" line="1201"/>
                <declaration name="serverStubClass" type="Class&lt;?&gt;" line="1213"/>
                <scope line="1214"/>
                <scope line="1217"/>
                <declaration name="stubClass" type="Class&lt;?&gt;" line="1223"/>
                <declaration name="constr" type="Constructor&lt;?&gt;" line="1224"/>
                <scope line="1225"/>
                <scope line="1229"/>
            </scope>
            <method name="shadowJrmpStub" type="RMIConnection" line="1238">
                <params>
                    <param name="stub" type="RemoteObject"/>
                </params>
                <declaration name="ref" type="RemoteRef" line="1239"/>
                <declaration name="proxyRef" type="RemoteRef" line="1240"/>
                <declaration name="rmiConnectionImplStubConstructor" type="Constructor&lt;?&gt;" line="1241"/>
                <declaration name="args" type="Object[]" line="1242"/>
                <declaration name="proxyStub" type="RMIConnection" line="1243"/>
            </method>
            <declaration name="iiopConnectionStubClassName" type="String" line="1246"/>
            <declaration name="proxyStubClassName" type="String" line="1247"/>
            <declaration name="ProxyInputStreamClassName" type="String" line="1248"/>
            <declaration name="pInputStreamClassName" type="String" line="1249"/>
            <declaration name="proxyStubClass" type="Class&lt;?&gt;" line="1250"/>
            <scope line="1251">
                <declaration name="proxyStubByteCodeString" type="String" line="1252"/>
                <declaration name="pInputStreamByteCodeString" type="String" line="1253"/>
                <declaration name="proxyStubByteCode" type="byte[]" line="1254"/>
                <declaration name="pInputStreamByteCode" type="byte[]" line="1255"/>
                <declaration name="classNames" type="String[]" line="1256"/>
                <declaration name="byteCodes" type="byte[][]" line="1257"/>
                <declaration name="otherClassNames" type="String[]" line="1258"/>
                <scope line="1259">
                    <anonymous_class line="1260">
                        <method name="run" type="Class<?>" line="1261">
                            <declaration name="thisClass" type="Class" line="1262"/>
                            <declaration name="thisLoader" type="ClassLoader" line="1263"/>
                            <declaration name="thisProtectionDomain" type="ProtectionDomain" line="1264"/>
                            <declaration name="cl" type="ClassLoader" line="1265"/>
                        </method>
                    </anonymous_class>
                    <declaration name="action" type="PrivilegedExceptionAction&lt;Class&lt;?&gt;&gt;" line="1260"/>
                    <declaration name="stubClass" type="Class&lt;?&gt;" line="1270"/>
                    <scope line="1271"/>
                    <scope line="1274"/>
                </scope>
                <scope line="1281"/>
            </scope>
            <method name="shadowIiopStub" type="RMIConnection" line="1285">
                <params>
                    <param name="stub" type="Object"/>
                </params>
                <declaration name="proxyStub" type="Object" line="1286"/>
            </method>
            <method name="getConnection" type="RMIConnection" line="1290">
                <params>
                    <param name="server" type="RMIServer"/>
                    <param name="credentials" type="Object"/>
                    <param name="checkStub" type="boolean"/>
                </params>
                <declaration name="c" type="RMIConnection" line="1291"/>
                <scope line="1293"/>
                <scope line="1298"/>
            </method>
            <method name="base64ToByteArray" type="byte[]" line="1304">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="sLen" type="int" line="1305"/>
                <declaration name="numGroups" type="int" line="1306"/>
                <declaration name="missingBytesInLastGroup" type="int" line="1308"/>
                <declaration name="numFullGroups" type="int" line="1309"/>
                <scope line="1310">
                    <scope line="1311"/>
                </scope>
                <declaration name="result" type="byte[]" line="1317"/>
                <declaration name="inCursor" type="int" line="1318"/>
                <scope line="1319">
                    <declaration name="ch0" type="int" line="1320"/>
                    <declaration name="ch1" type="int" line="1321"/>
                    <declaration name="ch2" type="int" line="1322"/>
                    <declaration name="ch3" type="int" line="1323"/>
                </scope>
                <scope line="1328">
                    <declaration name="ch0" type="int" line="1329"/>
                    <declaration name="ch1" type="int" line="1330"/>
                    <scope line="1332">
                        <declaration name="ch2" type="int" line="1333"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1339">
                Translates the specified character, which is assumed to be in the
                  &quot;Base 64 Alphabet&quot; into its equivalent 6-bit positive integer.                
                <throws>
                    IllegalArgumentException if
                      c is not in the Base64 Alphabet.                    
                </throws>
            </javadoc>
            <method name="base64toInt" type="int" line="1345">
                <params>
                    <param name="c" type="char"/>
                </params>
                <declaration name="result" type="int" line="1346"/>
            </method>
            <declaration name="base64ToInt" type="byte" line="1352"/>
            <javadoc line="1352">
                This array is a lookup table that translates unicode characters
                  drawn from the &quot;Base64 Alphabet&quot; (as specified in Table 1 of RFC 2045)
                  into their 6-bit positive integer equivalents.  Characters that
                  are not in the Base64 alphabet but fall within the bounds of the
                  array are translated to -1.                
            </javadoc>
            <method name="pushDefaultClassLoader" type="ClassLoader" line="1360">
                <declaration name="t" type="Thread" line="1361"/>
                <declaration name="old" type="ClassLoader" line="1362"/>
                <anonymous_class line="1363">
                    <method name="run" type="Void" line="1364"/>
                </anonymous_class>
            </method>
            <method name="popDefaultClassLoader" type="void" line="1372">
                <params>
                    <param name="old" type="ClassLoader"/>
                </params>
                <anonymous_class line="1373">
                    <method name="run" type="Void" line="1374"/>
                </anonymous_class>
            </method>
            <declaration name="rmiServer" type="RMIServer" line="1381"/>
            <javadoc line="1381">
                @serial The RMIServer stub of the RMI JMX Connector server to
                  which this client connector is (or will be) connected. This
                  field can be null when &lt;var&gt;jmxServiceURL&lt;/var&gt; is not
                  null. This includes the case where &lt;var&gt;jmxServiceURL&lt;/var&gt;
                  contains a serialized RMIServer stub. If both
                  &lt;var&gt;rmiServer&lt;/var&gt; and &lt;var&gt;jmxServiceURL&lt;/var&gt; are null then
                  serialization will fail.                
                <see>
                    #RMIConnector(RMIServer,Map)                    
                </see>
            </javadoc>
            <declaration name="jmxServiceURL" type="JMXServiceURL" line="1392"/>
            <javadoc line="1392">
                @serial The JMXServiceURL of the RMI JMX Connector server to
                  which this client connector will be connected. This field can
                  be null when &lt;var&gt;rmiServer&lt;/var&gt; is not null. If both
                  &lt;var&gt;rmiServer&lt;/var&gt; and &lt;var&gt;jmxServiceURL&lt;/var&gt; are null then
                  serialization will fail.                
                <see>
                    #RMIConnector(JMXServiceURL,Map)                    
                </see>
            </javadoc>
            <declaration name="env" type="Map&lt;String,Object&gt;" line="1401"/>
            <declaration name="defaultClassLoader" type="ClassLoader" line="1402"/>
            <declaration name="connection" type="RMIConnection" line="1403"/>
            <declaration name="connectionId" type="String" line="1404"/>
            <declaration name="clientNotifSeqNo" type="long" line="1405"/>
            <declaration name="rmbscMap" type="WeakHashMap&lt;Subject,MBeanServerConnection&gt;" line="1406"/>
            <declaration name="rmiNotifClient" type="RMINotifClient" line="1407"/>
            <declaration name="clientNotifCounter" type="long" line="1408"/>
            <declaration name="connected" type="boolean" line="1409"/>
            <declaration name="terminated" type="boolean" line="1410"/>
            <declaration name="closeException" type="Exception" line="1411"/>
            <declaration name="connectionBroadcaster" type="NotificationBroadcasterSupport" line="1412"/>
            <declaration name="communicatorAdmin" type="ClientCommunicatorAdmin" line="1413"/>
            <declaration name="orb" type="WeakReference&lt;Object&gt;" line="1414"/>
            <javadoc line="1414">
                A static WeakReference to an {@link org.omg.CORBA.ORB ORB} to
                  connect unconnected stubs.                
            </javadoc>
            <method name="objects" type="String" line="1419">
                <params>
                    <param name="objs" type="Object[]"/>
                </params>
            </method>
            <method name="strings" type="String" line="1423">
                <params>
                    <param name="strs" type="String[]"/>
                </params>
            </method>
        </class>
    </source>