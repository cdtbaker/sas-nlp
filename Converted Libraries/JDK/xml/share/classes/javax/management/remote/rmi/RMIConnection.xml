<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote.rmi">
        <import package="java.io.Closeable"/>
        <import package="java.io.IOException"/>
        <import package="java.rmi.MarshalledObject"/>
        <import package="java.rmi.Remote"/>
        <import package="java.util.Set"/>
        <import package="javax.management.AttributeList"/>
        <import package="javax.management.AttributeNotFoundException"/>
        <import package="javax.management.InstanceAlreadyExistsException"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.IntrospectionException"/>
        <import package="javax.management.InvalidAttributeValueException"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanException"/>
        <import package="javax.management.MBeanInfo"/>
        <import package="javax.management.MBeanRegistrationException"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.NotCompliantMBeanException"/>
        <import package="javax.management.ObjectInstance"/>
        <import package="javax.management.ObjectName"/>
        <import package="javax.management.ReflectionException"/>
        <import package="javax.management.RuntimeMBeanException"/>
        <import package="javax.management.RuntimeOperationsException"/>
        <import package="javax.management.remote.NotificationResult"/>
        <import package="javax.security.auth.Subject"/>
        <interface name="RMIConnection">
            <implements interface="Closeable"/>
            <implements interface="Remote"/>
            <javadoc line="26">
                &lt;p&gt;RMI object used to forward an MBeanServer request from a client
                  to its MBeanServer implementation on the server side.  There is one
                  Remote object implementing this interface for each remote client
                  connected to an RMI connector.&lt;/p&gt;
                  &lt;p&gt;User code does not usually refer to this interface.  It is
                  specified as part of the public API so that different
                  implementations of that API will interoperate.&lt;/p&gt;
                  &lt;p&gt;To ensure that client parameters will be deserialized at the
                  server side with the correct classloader, client parameters such as
                  parameters used to invoke a method are wrapped in a {@link MarshalledObject}.  An implementation of this interface must first
                  get the appropriate class loader for the operation and its target,
                  then deserialize the marshalled parameters with this classloader.
                  Except as noted, a parameter that is a
                  &lt;code&gt;MarshalledObject&lt;/code&gt; or &lt;code&gt;MarshalledObject[]&lt;/code&gt;
                  must not be null; the behavior is unspecified if it is.&lt;/p&gt;
                  &lt;p&gt;Class loading aspects are detailed in the
                  &lt;a href=&quot;{@docRoot}/../technotes/guides/jmx/JMX_1_4_specification.pdf&quot;&gt;
                  JMX Specification, version 1.4&lt;/a&gt; PDF document.&lt;/p&gt;
                  &lt;p&gt;Most methods in this interface parallel methods in the {@link MBeanServerConnection} interface.  Where an aspect of the behavior
                  of a method is not specified here, it is the same as in the
                  corresponding &lt;code&gt;MBeanServerConnection&lt;/code&gt; method.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getConnectionId" type="String" line="51"/>
            <javadoc line="51">
                &lt;p&gt;Returns the connection ID.  This string is different for
                  every open connection to a given RMI connector server.&lt;/p&gt;                
                <return>
                    the connection ID                    
                </return>
                <see>
                    RMIConnector#connect RMIConnector.connect                    
                </see>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="close" type="void" line="59"/>
            <javadoc line="59">
                &lt;p&gt;Closes this connection.  On return from this method, the RMI
                  object implementing this interface is unexported, so further
                  remote calls to it will fail.&lt;/p&gt;                
                <throws>
                    IOException if the connection could not be closed,
                      or the Remote object could not be unexported, or there was a
                      communication failure when transmitting the remote close
                      request.                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="69"/>
            <javadoc line="69">
                Handles the method {@link javax.management.MBeanServerConnection#createMBean(String,ObjectName)}.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the
                      &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly
                      instantiated MBean.  If the contained &lt;code&gt;ObjectName&lt;/code&gt;
                      is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is
                      &lt;code&gt;{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code&gt;.                    
                </return>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.ClassNotFoundException&lt;/code&gt; or a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; that occurred
                      when trying to invoke the MBean&apos;s constructor.                    
                </throws>
                <throws>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </throws>
                <throws>
                    MBeanRegistrationException The
                      &lt;code&gt;preRegister&lt;/code&gt; (&lt;code&gt;MBeanRegistration&lt;/code&gt;
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </throws>
                <throws>
                    MBeanException The constructor of the MBean has
                      thrown an exception.                    
                </throws>
                <throws>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The className
                      passed in parameter is null, the &lt;code&gt;ObjectName&lt;/code&gt; passed
                      in parameter contains a pattern or no &lt;code&gt;ObjectName&lt;/code&gt;
                      is specified for the MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="105"/>
            <javadoc line="105">
                Handles the method {@link javax.management.MBeanServerConnection#createMBean(String,ObjectName,ObjectName)}.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the
                      &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly
                      instantiated MBean.  If the contained &lt;code&gt;ObjectName&lt;/code&gt;
                      is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is
                      &lt;code&gt;{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code&gt;.                    
                </return>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.ClassNotFoundException&lt;/code&gt; or a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; that occurred when trying to
                      invoke the MBean&apos;s constructor.                    
                </throws>
                <throws>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </throws>
                <throws>
                    MBeanRegistrationException The
                      &lt;code&gt;preRegister&lt;/code&gt; (&lt;code&gt;MBeanRegistration&lt;/code&gt;
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </throws>
                <throws>
                    MBeanException The constructor of the MBean has
                      thrown an exception.                    
                </throws>
                <throws>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean.                    
                </throws>
                <throws>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The className
                      passed in parameter is null, the &lt;code&gt;ObjectName&lt;/code&gt; passed
                      in parameter contains a pattern or no &lt;code&gt;ObjectName&lt;/code&gt;
                      is specified for the MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="144"/>
            <javadoc line="144">
                Handles the method {@link javax.management.MBeanServerConnection#createMBean(String,ObjectName,Object[],String[])}.  The &lt;code&gt;Object[]&lt;/code&gt;
                  parameter is wrapped in a &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    params An array containing the parameters of the
                      constructor to be invoked, encapsulated into a
                      &lt;code&gt;MarshalledObject&lt;/code&gt;.  The encapsulated array can be
                      null, equivalent to an empty array.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.  Can be null, equivalent to an empty
                      array.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the
                      &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly
                      instantiated MBean.  If the contained &lt;code&gt;ObjectName&lt;/code&gt;
                      is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is
                      &lt;code&gt;{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code&gt;.                    
                </return>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.ClassNotFoundException&lt;/code&gt; or a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; that occurred when trying to
                      invoke the MBean&apos;s constructor.                    
                </throws>
                <throws>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </throws>
                <throws>
                    MBeanRegistrationException The
                      &lt;code&gt;preRegister&lt;/code&gt; (&lt;code&gt;MBeanRegistration&lt;/code&gt;
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </throws>
                <throws>
                    MBeanException The constructor of the MBean has
                      thrown an exception.                    
                </throws>
                <throws>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The className
                      passed in parameter is null, the &lt;code&gt;ObjectName&lt;/code&gt; passed
                      in parameter contains a pattern, or no &lt;code&gt;ObjectName&lt;/code&gt;
                      is specified for the MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="createMBean" type="ObjectInstance" line="188"/>
            <javadoc line="188">
                Handles the method {@link javax.management.MBeanServerConnection#createMBean(String,ObjectName,ObjectName,Object[],String[])}.  The
                  &lt;code&gt;Object[]&lt;/code&gt; parameter is wrapped in a
                  &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    className The class name of the MBean to be instantiated.                    
                </param>
                <param>
                    name The object name of the MBean. May be null.                    
                </param>
                <param>
                    loaderName The object name of the class loader to be used.                    
                </param>
                <param>
                    params An array containing the parameters of the
                      constructor to be invoked, encapsulated into a
                      &lt;code&gt;MarshalledObject&lt;/code&gt;.  The encapsulated array can be
                      null, equivalent to an empty array.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      constructor to be invoked.  Can be null, equivalent to an empty
                      array.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the
                      &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly
                      instantiated MBean.  If the contained &lt;code&gt;ObjectName&lt;/code&gt;
                      is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is
                      &lt;code&gt;{@link #getMBeanInfo getMBeanInfo(n)}.getClassName()&lt;/code&gt;.                    
                </return>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.ClassNotFoundException&lt;/code&gt; or a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; that occurred when trying to
                      invoke the MBean&apos;s constructor.                    
                </throws>
                <throws>
                    InstanceAlreadyExistsException The MBean is already
                      under the control of the MBean server.                    
                </throws>
                <throws>
                    MBeanRegistrationException The
                      &lt;code&gt;preRegister&lt;/code&gt; (&lt;code&gt;MBeanRegistration&lt;/code&gt;
                      interface) method of the MBean has thrown an exception. The
                      MBean will not be registered.                    
                </throws>
                <throws>
                    MBeanException The constructor of the MBean has
                      thrown an exception.                    
                </throws>
                <throws>
                    NotCompliantMBeanException This class is not a JMX
                      compliant MBean.                    
                </throws>
                <throws>
                    InstanceNotFoundException The specified class loader
                      is not registered in the MBean server.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The className
                      passed in parameter is null, the &lt;code&gt;ObjectName&lt;/code&gt; passed
                      in parameter contains a pattern, or no &lt;code&gt;ObjectName&lt;/code&gt;
                      is specified for the MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="unregisterMBean" type="void" line="236"/>
            <javadoc line="236">
                Handles the method{@link javax.management.MBeanServerConnection#unregisterMBean(ObjectName)}.                
                <param>
                    name The object name of the MBean to be unregistered.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    MBeanRegistrationException The preDeregister
                      ((&lt;code&gt;MBeanRegistration&lt;/code&gt; interface) method of the MBean
                      has thrown an exception.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null or the MBean you are when trying to
                      unregister is the {@link javax.management.MBeanServerDelegateMBeanServerDelegate} MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="getObjectInstance" type="ObjectInstance" line="256"/>
            <javadoc line="256">
                Handles the method{@link javax.management.MBeanServerConnection#getObjectInstance(ObjectName)}.                
                <param>
                    name The object name of the MBean.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean
                      specified by &lt;var&gt;name&lt;/var&gt;.  The contained &lt;code&gt;ObjectName&lt;/code&gt;
                      is &lt;code&gt;name&lt;/code&gt; and the contained class name is
                      &lt;code&gt;{@link #getMBeanInfo getMBeanInfo(name)}.getClassName()&lt;/code&gt;.                    
                </return>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="queryMBeans" type="Set&lt;ObjectInstance&gt;" line="276"/>
            <javadoc line="276">
                Handles the method {@link javax.management.MBeanServerConnection#queryMBeans(ObjectName,QueryExp)}.  The &lt;code&gt;QueryExp&lt;/code&gt; is wrapped in a
                  &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The object name pattern identifying the MBeans to
                      be retrieved. If null or no domain and key properties are
                      specified, all the MBeans registered will be retrieved.                    
                </param>
                <param>
                    query The query expression to be applied for selecting
                      MBeans, encapsulated into a &lt;code&gt;MarshalledObject&lt;/code&gt;. If
                      the &lt;code&gt;MarshalledObject&lt;/code&gt; encapsulates a null value no
                      query expression will be applied for selecting MBeans.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    A set containing the &lt;code&gt;ObjectInstance&lt;/code&gt;
                      objects for the selected MBeans.  If no MBean satisfies the
                      query an empty list is returned.                    
                </return>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="queryNames" type="Set&lt;ObjectName&gt;" line="297"/>
            <javadoc line="297">
                Handles the method {@link javax.management.MBeanServerConnection#queryNames(ObjectName,QueryExp)}.  The &lt;code&gt;QueryExp&lt;/code&gt; is wrapped in a
                  &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The object name pattern identifying the MBean names
                      to be retrieved. If null or no domain and key properties are
                      specified, the name of all registered MBeans will be retrieved.                    
                </param>
                <param>
                    query The query expression to be applied for selecting
                      MBeans, encapsulated into a &lt;code&gt;MarshalledObject&lt;/code&gt;. If
                      the &lt;code&gt;MarshalledObject&lt;/code&gt; encapsulates a null value no
                      query expression will be applied for selecting MBeans.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    A set containing the ObjectNames for the MBeans
                      selected.  If no MBean satisfies the query, an empty list is
                      returned.                    
                </return>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="isRegistered" type="boolean" line="318"/>
            <javadoc line="318">
                Handles the method{@link javax.management.MBeanServerConnection#isRegistered(ObjectName)}.                
                <param>
                    name The object name of the MBean to be checked.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    True if the MBean is already registered in the MBean
                      server, false otherwise.                    
                </return>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="getMBeanCount" type="Integer" line="334"/>
            <javadoc line="334">
                Handles the method{@link javax.management.MBeanServerConnection#getMBeanCount()}.                
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    the number of MBeans registered.                    
                </return>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="getAttribute" type="Object" line="345"/>
            <javadoc line="345">
                Handles the method {@link javax.management.MBeanServerConnection#getAttribute(ObjectName,String)}.                
                <param>
                    name The object name of the MBean from which the
                      attribute is to be retrieved.                    
                </param>
                <param>
                    attribute A String specifying the name of the attribute
                      to be retrieved.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    The value of the retrieved attribute.                    
                </return>
                <throws>
                    AttributeNotFoundException The attribute specified
                      is not accessible in the MBean.                    
                </throws>
                <throws>
                    MBeanException Wraps an exception thrown by the
                      MBean&apos;s getter.                    
                </throws>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; thrown when trying to invoke
                      the getter.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null or the attribute in parameter is
                      null.                    
                </throws>
                <throws>
                    RuntimeMBeanException Wraps a runtime exception thrown
                      by the MBean&apos;s getter.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <see>
                    #setAttribute                    
                </see>
            </javadoc>
            <method name="getAttributes" type="AttributeList" line="376"/>
            <javadoc line="376">
                Handles the method {@link javax.management.MBeanServerConnection#getAttributes(ObjectName,String[])}.                
                <param>
                    name The object name of the MBean from which the
                      attributes are retrieved.                    
                </param>
                <param>
                    attributes A list of the attributes to be retrieved.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    The list of the retrieved attributes.                    
                </return>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    ReflectionException An exception occurred when
                      trying to invoke the getAttributes method of a Dynamic MBean.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wrap a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null or attributes in parameter is null.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <see>
                    #setAttributes                    
                </see>
            </javadoc>
            <method name="setAttribute" type="void" line="398"/>
            <javadoc line="398">
                Handles the method {@link javax.management.MBeanServerConnection#setAttribute(ObjectName,Attribute)}.  The &lt;code&gt;Attribute&lt;/code&gt; parameter is wrapped
                  in a &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The name of the MBean within which the attribute is
                      to be set.                    
                </param>
                <param>
                    attribute The identification of the attribute to be set
                      and the value it is to be set to, encapsulated into a
                      &lt;code&gt;MarshalledObject&lt;/code&gt;.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    AttributeNotFoundException The attribute specified
                      is not accessible in the MBean.                    
                </throws>
                <throws>
                    InvalidAttributeValueException The value specified
                      for the attribute is not valid.                    
                </throws>
                <throws>
                    MBeanException Wraps an exception thrown by the
                      MBean&apos;s setter.                    
                </throws>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; thrown when trying to invoke
                      the setter.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null or the attribute in parameter is
                      null.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <see>
                    #getAttribute                    
                </see>
            </javadoc>
            <method name="setAttributes" type="AttributeList" line="430"/>
            <javadoc line="430">
                Handles the method {@link javax.management.MBeanServerConnection#setAttributes(ObjectName,AttributeList)}.  The &lt;code&gt;AttributeList&lt;/code&gt; parameter is
                  wrapped in a &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The object name of the MBean within which the
                      attributes are to be set.                    
                </param>
                <param>
                    attributes A list of attributes: The identification of
                      the attributes to be set and the values they are to be set to,
                      encapsulated into a &lt;code&gt;MarshalledObject&lt;/code&gt;.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    The list of attributes that were set, with their new
                      values.                    
                </return>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    ReflectionException An exception occurred when
                      trying to invoke the getAttributes method of a Dynamic MBean.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null or attributes in parameter is null.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <see>
                    #getAttributes                    
                </see>
            </javadoc>
            <method name="invoke" type="Object" line="456"/>
            <javadoc line="456">
                Handles the method {@link javax.management.MBeanServerConnection#invoke(ObjectName,String,Object[],String[])}.  The &lt;code&gt;Object[]&lt;/code&gt;
                  parameter is wrapped in a &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The object name of the MBean on which the method is
                      to be invoked.                    
                </param>
                <param>
                    operationName The name of the operation to be invoked.                    
                </param>
                <param>
                    params An array containing the parameters to be set when
                      the operation is invoked, encapsulated into a
                      &lt;code&gt;MarshalledObject&lt;/code&gt;.  The encapsulated array can be
                      null, equivalent to an empty array.                    
                </param>
                <param>
                    signature An array containing the signature of the
                      operation. The class objects will be loaded using the same
                      class loader as the one used for loading the MBean on which the
                      operation was invoked.  Can be null, equivalent to an empty
                      array.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    The object returned by the operation, which represents
                      the result of invoking the operation on the MBean specified.                    
                </return>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    MBeanException Wraps an exception thrown by the
                      MBean&apos;s invoked method.                    
                </throws>
                <throws>
                    ReflectionException Wraps a
                      &lt;code&gt;java.lang.Exception&lt;/code&gt; thrown while trying to invoke
                      the method.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps an {@link IllegalArgumentException} when &lt;code&gt;name&lt;/code&gt; or
                      &lt;code&gt;operationName&lt;/code&gt; is null.                    
                </throws>
            </javadoc>
            <method name="getDefaultDomain" type="String" line="490"/>
            <javadoc line="490">
                Handles the method{@link javax.management.MBeanServerConnection#getDefaultDomain()}.                
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    the default domain.                    
                </return>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="getDomains" type="String[]" line="501"/>
            <javadoc line="501">
                Handles the method{@link javax.management.MBeanServerConnection#getDomains()}.                
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    the list of domains.                    
                </return>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="getMBeanInfo" type="MBeanInfo" line="512"/>
            <javadoc line="512">
                Handles the method{@link javax.management.MBeanServerConnection#getMBeanInfo(ObjectName)}.                
                <param>
                    name The name of the MBean to analyze                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    An instance of &lt;code&gt;MBeanInfo&lt;/code&gt; allowing the
                      retrieval of all attributes and operations of this MBean.                    
                </return>
                <throws>
                    IntrospectionException An exception occurred during
                      introspection.                    
                </throws>
                <throws>
                    InstanceNotFoundException The MBean specified was
                      not found.                    
                </throws>
                <throws>
                    ReflectionException An exception occurred when
                      trying to invoke the getMBeanInfo of a Dynamic MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null.                    
                </throws>
            </javadoc>
            <method name="isInstanceOf" type="boolean" line="534"/>
            <javadoc line="534">
                Handles the method {@link javax.management.MBeanServerConnection#isInstanceOf(ObjectName,String)}.                
                <param>
                    name The &lt;code&gt;ObjectName&lt;/code&gt; of the MBean.                    
                </param>
                <param>
                    className The name of the class.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <return>
                    true if the MBean specified is an instance of the
                      specified class according to the rules above, false otherwise.                    
                </return>
                <throws>
                    InstanceNotFoundException The MBean specified is not
                      registered in the MBean server.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps a
                      &lt;code&gt;java.lang.IllegalArgumentException&lt;/code&gt;: The object
                      name in parameter is null.                    
                </throws>
            </javadoc>
            <method name="addNotificationListener" type="void" line="553"/>
            <javadoc line="553">
                Handles the method {@link javax.management.MBeanServerConnection#addNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)}.  The
                  &lt;code&gt;NotificationFilter&lt;/code&gt; parameter is wrapped in a
                  &lt;code&gt;MarshalledObject&lt;/code&gt;.  The &lt;code&gt;Object&lt;/code&gt;
                  (handback) parameter is also wrapped in a
                  &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The name of the MBean on which the listener should
                      be added.                    
                </param>
                <param>
                    listener The object name of the listener which will
                      handle the notifications emitted by the registered MBean.                    
                </param>
                <param>
                    filter The filter object, encapsulated into a
                      &lt;code&gt;MarshalledObject&lt;/code&gt;. If filter encapsulated in the
                      &lt;code&gt;MarshalledObject&lt;/code&gt; has a null value, no filtering
                      will be performed before handling notifications.                    
                </param>
                <param>
                    handback The context to be sent to the listener when a
                      notification is emitted, encapsulated into a
                      &lt;code&gt;MarshalledObject&lt;/code&gt;.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <throws>
                    InstanceNotFoundException The MBean name of the
                      notification listener or of the notification broadcaster does
                      not match any of the registered MBeans.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps an {@link IllegalArgumentException}.  The MBean named by
                      &lt;code&gt;listener&lt;/code&gt; exists but does not implement the{@link javax.management.NotificationListener} interface,
                      or &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;listener&lt;/code&gt; is null.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <see>
                    #removeNotificationListener(ObjectName,ObjectName,Subject)                    
                </see>
                <see>
                    #removeNotificationListener(ObjectName,ObjectName,MarshalledObject,MarshalledObject,Subject)                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="586"/>
            <javadoc line="586">
                Handles the method {@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,ObjectName)}.                
                <param>
                    name The name of the MBean on which the listener should
                      be removed.                    
                </param>
                <param>
                    listener The object name of the listener to be removed.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <throws>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </throws>
                <throws>
                    ListenerNotFoundException The listener is not
                      registered in the MBean.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps an {@link IllegalArgumentException} when &lt;code&gt;name&lt;/code&gt; or
                      &lt;code&gt;listener&lt;/code&gt; is null.                    
                </throws>
                <see>
                    #addNotificationListener                    
                </see>
            </javadoc>
            <method name="removeNotificationListener" type="void" line="606"/>
            <javadoc line="606">
                Handles the method {@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,ObjectName,NotificationFilter,Object)}.  The
                  &lt;code&gt;NotificationFilter&lt;/code&gt; parameter is wrapped in a
                  &lt;code&gt;MarshalledObject&lt;/code&gt;.  The &lt;code&gt;Object&lt;/code&gt;
                  parameter is also wrapped in a &lt;code&gt;MarshalledObject&lt;/code&gt;.                
                <param>
                    name The name of the MBean on which the listener should
                      be removed.                    
                </param>
                <param>
                    listener A listener that was previously added to this
                      MBean.                    
                </param>
                <param>
                    filter The filter that was specified when the listener
                      was added, encapsulated into a &lt;code&gt;MarshalledObject&lt;/code&gt;.                    
                </param>
                <param>
                    handback The handback that was specified when the
                      listener was added, encapsulated into a &lt;code&gt;MarshalledObject&lt;/code&gt;.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <throws>
                    InstanceNotFoundException The MBean name provided
                      does not match any of the registered MBeans.                    
                </throws>
                <throws>
                    ListenerNotFoundException The listener is not
                      registered in the MBean, or it is not registered with the given
                      filter and handback.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to perform this operation.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <throws>
                    RuntimeOperationsException Wraps an {@link IllegalArgumentException} when &lt;code&gt;name&lt;/code&gt; or
                      &lt;code&gt;listener&lt;/code&gt; is null.                    
                </throws>
                <see>
                    #addNotificationListener                    
                </see>
            </javadoc>
            <method name="addNotificationListeners" type="Integer[]" line="635"/>
            <javadoc line="635">
                &lt;p&gt;Handles the method {@link javax.management.MBeanServerConnection#addNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)}.&lt;/p&gt;
                  &lt;p&gt;Register for notifications from the given MBeans that match
                  the given filters.  The remote client can subsequently retrieve
                  the notifications using the {@link #fetchNotificationsfetchNotifications} method.&lt;/p&gt;
                  &lt;p&gt;For each listener, the original
                  &lt;code&gt;NotificationListener&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; are
                  kept on the client side; in order for the client to be able to
                  identify them, the server generates and returns a unique
                  &lt;code&gt;listenerID&lt;/code&gt;.  This &lt;code&gt;listenerID&lt;/code&gt; is
                  forwarded with the &lt;code&gt;Notifications&lt;/code&gt; to the remote
                  client.&lt;/p&gt;
                  &lt;p&gt;If any one of the given (name, filter) pairs cannot be
                  registered, then the operation fails with an exception, and no
                  names or filters are registered.&lt;/p&gt;                
                <param>
                    names the &lt;code&gt;ObjectNames&lt;/code&gt; identifying the
                      MBeans emitting the Notifications.                    
                </param>
                <param>
                    filters an array of marshalled representations of the
                      &lt;code&gt;NotificationFilters&lt;/code&gt;.  Elements of this array can
                      be null.                    
                </param>
                <param>
                    delegationSubjects the &lt;code&gt;Subjects&lt;/code&gt; on behalf
                      of which the listeners are being added.  Elements of this array
                      can be null.  Also, the &lt;code&gt;delegationSubjects&lt;/code&gt;
                      parameter itself can be null, which is equivalent to an array
                      of null values with the same size as the &lt;code&gt;names&lt;/code&gt; and
                      &lt;code&gt;filters&lt;/code&gt; arrays.                    
                </param>
                <return>
                    an array of &lt;code&gt;listenerIDs&lt;/code&gt; identifying the
                      local listeners.  This array has the same number of elements as
                      the parameters.                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;names&lt;/code&gt; or
                      &lt;code&gt;filters&lt;/code&gt; is null, or if &lt;code&gt;names&lt;/code&gt; contains
                      a null element, or if the three arrays do not all have the same
                      size.                    
                </throws>
                <throws>
                    ClassCastException if one of the elements of
                      &lt;code&gt;filters&lt;/code&gt; unmarshalls as a non-null object that is
                      not a &lt;code&gt;NotificationFilter&lt;/code&gt;.                    
                </throws>
                <throws>
                    InstanceNotFoundException if one of the
                      &lt;code&gt;names&lt;/code&gt; does not correspond to any registered MBean.                    
                </throws>
                <throws>
                    SecurityException if, for one of the MBeans, the
                      client, or the delegated Subject if any, does not have
                      permission to add a listener.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
            <method name="removeNotificationListeners" type="void" line="679"/>
            <javadoc line="679">
                &lt;p&gt;Handles the{@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener)removeNotificationListener(ObjectName, NotificationListener)} and{@link javax.management.MBeanServerConnection#removeNotificationListener(ObjectName,NotificationListener,NotificationFilter,Object)removeNotificationListener(ObjectName, NotificationListener, NotificationFilter, Object)} methods.&lt;/p&gt;
                  &lt;p&gt;This method removes one or more
                  &lt;code&gt;NotificationListener&lt;/code&gt;s from a given MBean in the
                  MBean server.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the
                  IDs which were returned by the {@link #addNotificationListeners(ObjectName[],MarshalledObject[],Subject[])} method.&lt;/p&gt;                
                <param>
                    name the &lt;code&gt;ObjectName&lt;/code&gt; identifying the MBean
                      emitting the Notifications.                    
                </param>
                <param>
                    listenerIDs the list of the IDs corresponding to the
                      listeners to remove.                    
                </param>
                <param>
                    delegationSubject The &lt;code&gt;Subject&lt;/code&gt; containing the
                      delegation principals or &lt;code&gt;null&lt;/code&gt; if the authentication
                      principal is used instead.                    
                </param>
                <throws>
                    InstanceNotFoundException if the given
                      &lt;code&gt;name&lt;/code&gt; does not correspond to any registered MBean.                    
                </throws>
                <throws>
                    ListenerNotFoundException if one of the listeners was
                      not found on the server side.  This exception can happen if the
                      MBean discarded a listener for some reason other than a call to
                      &lt;code&gt;MBeanServer.removeNotificationListener&lt;/code&gt;.                    
                </throws>
                <throws>
                    SecurityException if the client, or the delegated Subject
                      if any, does not have permission to remove the listeners.                    
                </throws>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;ObjectName&lt;/code&gt; or
                      &lt;code&gt;listenerIds&lt;/code&gt; is null or if &lt;code&gt;listenerIds&lt;/code&gt;
                      contains a null element.                    
                </throws>
            </javadoc>
            <method name="fetchNotifications" type="NotificationResult" line="707"/>
            <javadoc line="707">
                &lt;p&gt;Retrieves notifications from the connector server.  This
                  method can block until there is at least one notification or
                  until the specified timeout is reached.  The method can also
                  return at any time with zero notifications.&lt;/p&gt;
                  &lt;p&gt;A notification can be included in the result if its sequence
                  number is no less than &lt;code&gt;clientSequenceNumber&lt;/code&gt; and
                  this client has registered at least one listener for the MBean
                  generating the notification, with a filter that accepts the
                  notification.  Each listener that is interested in the
                  notification is identified by an Integer ID that was returned
                  by {@link #addNotificationListeners(ObjectName[],MarshalledObject[],Subject[])}.&lt;/p&gt;                
                <param>
                    clientSequenceNumber the first sequence number that the
                      client is interested in.  If negative, it is interpreted as
                      meaning the sequence number that the next notification will
                      have.                    
                </param>
                <param>
                    maxNotifications the maximum number of different
                      notifications to return.  The &lt;code&gt;TargetedNotification&lt;/code&gt;
                      array in the returned &lt;code&gt;NotificationResult&lt;/code&gt; can have
                      more elements than this if the same notification appears more
                      than once.  The behavior is unspecified if this parameter is
                      negative.                    
                </param>
                <param>
                    timeout the maximum time in milliseconds to wait for a
                      notification to arrive.  This can be 0 to indicate that the
                      method should not wait if there are no notifications, but
                      should return at once.  It can be &lt;code&gt;Long.MAX_VALUE&lt;/code&gt;
                      to indicate that there is no timeout.  The behavior is
                      unspecified if this parameter is negative.                    
                </param>
                <return>
                    A &lt;code&gt;NotificationResult&lt;/code&gt;.                    
                </return>
                <throws>
                    IOException if a general communication exception occurred.                    
                </throws>
            </javadoc>
        </interface>
    </source>