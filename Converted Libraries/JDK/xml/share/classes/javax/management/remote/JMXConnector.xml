<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote">
        <import package="java.io.Closeable"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Map"/>
        <import package="javax.management.ListenerNotFoundException"/>
        <import package="javax.management.MBeanServerConnection"/>
        <import package="javax.management.NotificationFilter"/>
        <import package="javax.management.NotificationListener"/>
        <import package="javax.security.auth.Subject"/>
        <interface name="JMXConnector">
            <implements interface="Closeable"/>
            <javadoc line="37">
                &lt;p&gt;The client end of a JMX API connector.  An object of this type can
                  be used to establish a connection to a connector server.&lt;/p&gt;
                  &lt;p&gt;A newly-created object of this type is unconnected.  Its {@link #connect connect} method must be called before it can be used.
                  However, objects created by {@link JMXConnectorFactory#connect(JMXServiceURL,Map)JMXConnectorFactory.connect} are already connected.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="CREDENTIALS" type="String" line="50"/>
            <javadoc line="50">
                &lt;p&gt;Name of the attribute that specifies the credentials to send
                  to the connector server during connection.  The value
                  associated with this attribute, if any, is a serializable
                  object of an appropriate type for the server&apos;s {@link JMXAuthenticator}.                
            </javadoc>
            <method name="connect" type="void" line="60"/>
            <javadoc line="60">
                &lt;p&gt;Establishes the connection to the connector server.  This
                  method is equivalent to {@link #connect(Map)connect(null)}.&lt;/p&gt;                
                <exception>
                    IOException if the connection could not be made
                      because of a communication problem.                    
                </exception>
                <exception>
                    SecurityException if the connection could not be
                      made for security reasons.                    
                </exception>
            </javadoc>
            <method name="connect" type="void" line="73"/>
            <javadoc line="73">
                &lt;p&gt;Establishes the connection to the connector server.&lt;/p&gt;
                  &lt;p&gt;If &lt;code&gt;connect&lt;/code&gt; has already been called successfully
                  on this object, calling it again has no effect.  If, however,{@link #close} was called after &lt;code&gt;connect&lt;/code&gt;, the new
                  &lt;code&gt;connect&lt;/code&gt; will throw an &lt;code&gt;IOException&lt;/code&gt;.&lt;p&gt;
                  &lt;p&gt;Otherwise, either &lt;code&gt;connect&lt;/code&gt; has never been called
                  on this object, or it has been called but produced an
                  exception.  Then calling &lt;code&gt;connect&lt;/code&gt; will attempt to
                  establish a connection to the connector server.&lt;/p&gt;                
                <param>
                    env the properties of the connection.  Properties in
                      this map override properties in the map specified when the
                      <code>JMXConnector</code> was created, if any.  This parameter
                      can be null, which is equivalent to an empty map.                    
                </param>
                <exception>
                    IOException if the connection could not be made
                      because of a communication problem.                    
                </exception>
                <exception>
                    SecurityException if the connection could not be
                      made for security reasons.                    
                </exception>
            </javadoc>
            <method name="getMBeanServerConnection" type="MBeanServerConnection" line="99"/>
            <javadoc line="99">
                &lt;p&gt;Returns an &lt;code&gt;MBeanServerConnection&lt;/code&gt; object
                  representing a remote MBean server.  For a given
                  &lt;code&gt;JMXConnector&lt;/code&gt;, two successful calls to this method
                  will usually return the same &lt;code&gt;MBeanServerConnection&lt;/code&gt;
                  object, though this is not required.&lt;/p&gt;
                  &lt;p&gt;For each method in the returned
                  &lt;code&gt;MBeanServerConnection&lt;/code&gt;, calling the method causes
                  the corresponding method to be called in the remote MBean
                  server.  The value returned by the MBean server method is the
                  value returned to the client.  If the MBean server method
                  produces an &lt;code&gt;Exception&lt;/code&gt;, the same
                  &lt;code&gt;Exception&lt;/code&gt; is seen by the client.  If the MBean
                  server method, or the attempt to call it, produces an
                  &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Error&lt;/code&gt; is wrapped in a{@link JMXServerErrorException}, which is seen by the
                  client.&lt;/p&gt;
                  &lt;p&gt;Calling this method is equivalent to calling{@link #getMBeanServerConnection(Subject) getMBeanServerConnection(null)}meaning that no delegation subject is specified and that all the
                  operations called on the &lt;code&gt;MBeanServerConnection&lt;/code&gt; must
                  use the authenticated subject, if any.&lt;/p&gt;                
                <return>
                    an object that implements the
                      <code>MBeanServerConnection</code> interface by forwarding its
                      methods to the remote MBean server.                    
                </return>
                <exception>
                    IOException if a valid
                      <code>MBeanServerConnection</code> cannot be created, for
                      instance because the connection to the remote MBean server has
                      not yet been established (with the {@link #connect(Map)connect} method), or it has been closed, or it has broken.                    
                </exception>
            </javadoc>
            <method name="getMBeanServerConnection" type="MBeanServerConnection" line="137"/>
            <javadoc line="137">
                &lt;p&gt;Returns an &lt;code&gt;MBeanServerConnection&lt;/code&gt; object representing
                  a remote MBean server on which operations are performed on behalf of
                  the supplied delegation subject. For a given &lt;code&gt;JMXConnector&lt;/code&gt;
                  and &lt;code&gt;Subject&lt;/code&gt;, two successful calls to this method will
                  usually return the same &lt;code&gt;MBeanServerConnection&lt;/code&gt; object,
                  though this is not required.&lt;/p&gt;
                  &lt;p&gt;For each method in the returned
                  &lt;code&gt;MBeanServerConnection&lt;/code&gt;, calling the method causes
                  the corresponding method to be called in the remote MBean
                  server on behalf of the given delegation subject instead of the
                  authenticated subject. The value returned by the MBean server
                  method is the value returned to the client. If the MBean server
                  method produces an &lt;code&gt;Exception&lt;/code&gt;, the same
                  &lt;code&gt;Exception&lt;/code&gt; is seen by the client. If the MBean
                  server method, or the attempt to call it, produces an
                  &lt;code&gt;Error&lt;/code&gt;, the &lt;code&gt;Error&lt;/code&gt; is wrapped in a{@link JMXServerErrorException}, which is seen by the
                  client.&lt;/p&gt;                
                <param>
                    delegationSubject the <code>Subject</code> on behalf of
                      which requests will be performed.  Can be null, in which case
                      requests will be performed on behalf of the authenticated
                      Subject, if any.                    
                </param>
                <return>
                    an object that implements the <code>MBeanServerConnection</code>
                      interface by forwarding its methods to the remote MBean server on behalf
                      of a given delegation subject.                    
                </return>
                <exception>
                    IOException if a valid <code>MBeanServerConnection</code>
                      cannot be created, for instance because the connection to the remote
                      MBean server has not yet been established (with the {@link #connect(Map)connect} method), or it has been closed, or it has broken.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="176"/>
            <javadoc line="176">
                &lt;p&gt;Closes the client connection to its server.  Any ongoing or new
                  request using the MBeanServerConnection returned by {@link #getMBeanServerConnection()} will get an
                  &lt;code&gt;IOException&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;If &lt;code&gt;close&lt;/code&gt; has already been called successfully
                  on this object, calling it again has no effect.  If
                  &lt;code&gt;close&lt;/code&gt; has never been called, or if it was called
                  but produced an exception, an attempt will be made to close the
                  connection.  This attempt can succeed, in which case
                  &lt;code&gt;close&lt;/code&gt; will return normally, or it can generate an
                  exception.&lt;/p&gt;
                  &lt;p&gt;Closing a connection is a potentially slow operation.  For
                  example, if the server has crashed, the close operation might
                  have to wait for a network protocol timeout.  Callers that do
                  not want to block in a close operation should do it in a
                  separate thread.&lt;/p&gt;                
                <exception>
                    IOException if the connection cannot be closed
                      cleanly.  If this exception is thrown, it is not known whether
                      the server end of the connection has been cleanly closed.                    
                </exception>
            </javadoc>
            <method name="addConnectionNotificationListener" type="void" line="202"/>
            <javadoc line="202">
                &lt;p&gt;Adds a listener to be informed of changes in connection
                  status.  The listener will receive notifications of type {@link JMXConnectionNotification}.  An implementation can send other
                  types of notifications too.&lt;/p&gt;
                  &lt;p&gt;Any number of listeners can be added with this method.  The
                  same listener can be added more than once with the same or
                  different values for the filter and handback.  There is no
                  special treatment of a duplicate entry.  For example, if a
                  listener is registered twice with no filter, then its
                  &lt;code&gt;handleNotification&lt;/code&gt; method will be called twice for
                  each notification.&lt;/p&gt;                
                <param>
                    listener a listener to receive connection status
                      notifications.                    
                </param>
                <param>
                    filter a filter to select which notifications are to be
                      delivered to the listener, or null if all notifications are to
                      be delivered.                    
                </param>
                <param>
                    handback an object to be given to the listener along
                      with each notification.  Can be null.                    
                </param>
                <exception>
                    NullPointerException if <code>listener</code> is
                      null.                    
                </exception>
                <see>
                    #removeConnectionNotificationListener                    
                </see>
                <see>
                    javax.management.NotificationBroadcaster#addNotificationListener                    
                </see>
            </javadoc>
            <method name="removeConnectionNotificationListener" type="void" line="235"/>
            <javadoc line="235">
                &lt;p&gt;Removes a listener from the list to be informed of changes
                  in status.  The listener must previously have been added.  If
                  there is more than one matching listener, all are removed.&lt;/p&gt;                
                <param>
                    listener a listener to receive connection status
                      notifications.                    
                </param>
                <exception>
                    NullPointerException if <code>listener</code> is
                      null.                    
                </exception>
                <exception>
                    ListenerNotFoundException if the listener is not
                      registered with this <code>JMXConnector</code>.                    
                </exception>
                <see>
                    #removeConnectionNotificationListener(NotificationListener,NotificationFilter,Object)                    
                </see>
                <see>
                    #addConnectionNotificationListener                    
                </see>
                <see>
                    javax.management.NotificationEmitter#removeNotificationListener                    
                </see>
            </javadoc>
            <method name="removeConnectionNotificationListener" type="void" line="258"/>
            <javadoc line="258">
                &lt;p&gt;Removes a listener from the list to be informed of changes
                  in status.  The listener must previously have been added with
                  the same three parameters.  If there is more than one matching
                  listener, only one is removed.&lt;/p&gt;                
                <param>
                    l a listener to receive connection status notifications.                    
                </param>
                <param>
                    f a filter to select which notifications are to be
                      delivered to the listener.  Can be null.                    
                </param>
                <param>
                    handback an object to be given to the listener along
                      with each notification.  Can be null.                    
                </param>
                <exception>
                    ListenerNotFoundException if the listener is not
                      registered with this <code>JMXConnector</code>, or is not
                      registered with the given filter and handback.                    
                </exception>
                <see>
                    #removeConnectionNotificationListener(NotificationListener)                    
                </see>
                <see>
                    #addConnectionNotificationListener                    
                </see>
                <see>
                    javax.management.NotificationEmitter#removeNotificationListener                    
                </see>
            </javadoc>
            <method name="getConnectionId" type="String" line="283"/>
            <javadoc line="283">
                &lt;p&gt;Gets this connection&apos;s ID from the connector server.  For a
                  given connector server, every connection will have a unique id
                  which does not change during the lifetime of the
                  connection.&lt;/p&gt;                
                <return>
                    the unique ID of this connection.  This is the same as
                      the ID that the connector server includes in its {@link JMXConnectionNotification}s.  The {@link javax.management.remote package description} describes the
                      conventions for connection IDs.                    
                </return>
                <exception>
                    IOException if the connection ID cannot be obtained,
                      for instance because the connection is closed or broken.                    
                </exception>
            </javadoc>
        </interface>
    </source>