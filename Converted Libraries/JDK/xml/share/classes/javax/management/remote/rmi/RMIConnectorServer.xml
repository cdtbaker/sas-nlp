<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote.rmi">
        <import package="com.sun.jmx.remote.security.MBeanServerFileAccessController"/>
        <import package="com.sun.jmx.remote.internal.IIOPHelper"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <import package="java.io.ByteArrayOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.rmi.server.RMIClientSocketFactory"/>
        <import package="java.rmi.server.RMIServerSocketFactory"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.HashSet"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.InstanceNotFoundException"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.remote.JMXConnectionNotification"/>
        <import package="javax.management.remote.JMXConnector"/>
        <import package="javax.management.remote.JMXConnectorServer"/>
        <import package="javax.management.remote.JMXServiceURL"/>
        <import package="javax.management.remote.MBeanServerForwarder"/>
        <import package="javax.naming.InitialContext"/>
        <import package="javax.naming.NamingException"/>
        <class name="RMIConnectorServer" line="27">
            <extends class="JMXConnectorServer"/>
            <javadoc line="27">
                &lt;p&gt;A JMX API connector server that creates RMI-based connections
                  from remote clients.  Usually, such connector servers are made
                  using {@link javax.management.remote.JMXConnectorServerFactoryJMXConnectorServerFactory}.  However, specialized applications can
                  use this class directly, for example with an {@link RMIServerImpl}object.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="JNDI_REBIND_ATTRIBUTE" type="String" line="35"/>
            <javadoc line="35">
                &lt;p&gt;Name of the attribute that specifies whether the {@link RMIServer} stub that represents an RMI connector server should
                  override an existing stub at the same address.  The value
                  associated with this attribute, if any, should be a string that
                  is equal, ignoring case, to &lt;code&gt;&quot;true&quot;&lt;/code&gt; or
                  &lt;code&gt;&quot;false&quot;&lt;/code&gt;.  The default value is false.&lt;/p&gt;                
            </javadoc>
            <declaration name="RMI_CLIENT_SOCKET_FACTORY_ATTRIBUTE" type="String" line="43"/>
            <javadoc line="43">
                &lt;p&gt;Name of the attribute that specifies the {@link RMIClientSocketFactory} for the RMI objects created in
                  conjunction with this connector. The value associated with this
                  attribute must be of type &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; and can
                  only be specified in the &lt;code&gt;Map&lt;/code&gt; argument supplied when
                  creating a connector server.&lt;/p&gt;                
            </javadoc>
            <declaration name="RMI_SERVER_SOCKET_FACTORY_ATTRIBUTE" type="String" line="51"/>
            <javadoc line="51">
                &lt;p&gt;Name of the attribute that specifies the {@link RMIServerSocketFactory} for the RMI objects created in
                  conjunction with this connector. The value associated with this
                  attribute must be of type &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; and can
                  only be specified in the &lt;code&gt;Map&lt;/code&gt; argument supplied when
                  creating a connector server.&lt;/p&gt;                
            </javadoc>
            <javadoc line="59">
                &lt;p&gt;Makes an &lt;code&gt;RMIConnectorServer&lt;/code&gt;.
                  This is equivalent to calling {@link #RMIConnectorServer(JMXServiceURL,Map,RMIServerImpl,MBeanServer)RMIConnectorServer(directoryURL,environment,null,null)}&lt;/p&gt;                
                <param>
                    url the URL defining how to create the connector server.
                      Cannot be null.                    
                </param>
                <param>
                    environment attributes governing the creation and
                      storing of the RMI object.  Can be null, which is equivalent to
                      an empty Map.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>url</code> is null.                    
                </exception>
                <exception>
                    MalformedURLException if <code>url</code> does not
                      conform to the syntax for an RMI connector, or if its protocol
                      is not recognized by this implementation. Only "rmi" and "iiop"
                      are valid when this constructor is used.                    
                </exception>
                <exception>
                    IOException if the connector server cannot be created
                      for some reason or if it is inevitable that its {@link #start()start} method will fail.                    
                </exception>
            </javadoc>
            <method name="RMIConnectorServer" type="constructor" line="75">
                <params>
                    <param name="url" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
            </method>
            <javadoc line="78">
                &lt;p&gt;Makes an &lt;code&gt;RMIConnectorServer&lt;/code&gt; for the given MBean
                  server.
                  This is equivalent to calling {@link #RMIConnectorServer(JMXServiceURL,Map,RMIServerImpl,MBeanServer)RMIConnectorServer(directoryURL,environment,null,mbeanServer)}&lt;/p&gt;                
                <param>
                    url the URL defining how to create the connector server.
                      Cannot be null.                    
                </param>
                <param>
                    environment attributes governing the creation and
                      storing of the RMI object.  Can be null, which is equivalent to
                      an empty Map.                    
                </param>
                <param>
                    mbeanServer the MBean server to which the new connector
                      server is attached, or null if it will be attached by being
                      registered as an MBean in the MBean server.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>url</code> is null.                    
                </exception>
                <exception>
                    MalformedURLException if <code>url</code> does not
                      conform to the syntax for an RMI connector, or if its protocol
                      is not recognized by this implementation. Only "rmi" and "iiop"
                      are valid when this constructor is used.                    
                </exception>
                <exception>
                    IOException if the connector server cannot be created
                      for some reason or if it is inevitable that its {@link #start()start} method will fail.                    
                </exception>
            </javadoc>
            <method name="RMIConnectorServer" type="constructor" line="98">
                <params>
                    <param name="url" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                    <param name="mbeanServer" type="MBeanServer"/>
                </params>
            </method>
            <javadoc line="101">
                &lt;p&gt;Makes an &lt;code&gt;RMIConnectorServer&lt;/code&gt; for the given MBean
                  server.&lt;/p&gt;                
                <param>
                    url the URL defining how to create the connector server.
                      Cannot be null.                    
                </param>
                <param>
                    environment attributes governing the creation and
                      storing of the RMI object.  Can be null, which is equivalent to
                      an empty Map.                    
                </param>
                <param>
                    rmiServerImpl An implementation of the RMIServer interface,
                      consistent with the protocol type specified in <var>url</var>.
                      If this parameter is non null, the protocol type specified by
                      <var>url</var> is not constrained, and is assumed to be valid.
                      Otherwise, only "rmi" and "iiop" will be recognized.                    
                </param>
                <param>
                    mbeanServer the MBean server to which the new connector
                      server is attached, or null if it will be attached by being
                      registered as an MBean in the MBean server.                    
                </param>
                <exception>
                    IllegalArgumentException if <code>url</code> is null.                    
                </exception>
                <exception>
                    MalformedURLException if <code>url</code> does not
                      conform to the syntax for an RMI connector, or if its protocol
                      is not recognized by this implementation. Only "rmi" and "iiop"
                      are recognized when <var>rmiServerImpl</var> is null.                    
                </exception>
                <exception>
                    IOException if the connector server cannot be created
                      for some reason or if it is inevitable that its {@link #start()start} method will fail.                    
                </exception>
                <see>
                    #start                    
                </see>
            </javadoc>
            <method name="RMIConnectorServer" type="constructor" line="126">
                <params>
                    <param name="url" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                    <param name="rmiServerImpl" type="RMIServerImpl"/>
                    <param name="mbeanServer" type="MBeanServer"/>
                </params>
                <scope line="129">
                    <declaration name="prt" type="String" line="130"/>
                    <scope line="131">
                        <declaration name="msg" type="String" line="132"/>
                    </scope>
                    <declaration name="urlPath" type="String" line="135"/>
                    <scope line="136">
                        <declaration name="msg" type="String" line="137"/>
                    </scope>
                </scope>
                <scope line="142"/>
            </method>
            <javadoc line="149">
                &lt;p&gt;Returns a client stub for this connector server.  A client
                  stub is a serializable object whose {@link JMXConnector#connect(Map) connect} method can be used to make
                  one new connection to this connector server.&lt;/p&gt;                
                <param>
                    env client connection parameters of the same sort that
                      could be provided to {@link JMXConnector#connect(Map)JMXConnector.connect(Map)}.  Can be null, which is equivalent
                      to an empty map.                    
                </param>
                <return>
                    a client stub that can be used to make a new connection
                      to this connector server.                    
                </return>
                <exception>
                    UnsupportedOperationException if this connector
                      server does not support the generation of client stubs.                    
                </exception>
                <exception>
                    IllegalStateException if the JMXConnectorServer is
                      not started (see {@link #isActive()}).                    
                </exception>
                <exception>
                    IOException if a communications problem means that a
                      stub cannot be created.                    
                </exception>
            </javadoc>
            <method name="toJMXConnector" type="JMXConnector" line="165">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <declaration name="usemap" type="Map&lt;String,Object&gt;" line="167"/>
                <scope line="168"/>
                <declaration name="stub" type="RMIServer" line="173"/>
            </method>
            <javadoc line="176">
                &lt;p&gt;Activates the connector server, that is starts listening for
                  client connections.  Calling this method when the connector
                  server is already active has no effect.  Calling this method
                  when the connector server has been stopped will generate an
                  &lt;code&gt;IOException&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;The behavior of this method when called for the first time
                  depends on the parameters that were supplied at construction,
                  as described below.&lt;/p&gt;
                  &lt;p&gt;First, an object of a subclass of {@link RMIServerImpl} is
                  required, to export the connector server through RMI:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;If an &lt;code&gt;RMIServerImpl&lt;/code&gt; was supplied to the
                  constructor, it is used.
                  &lt;li&gt;Otherwise, if the protocol part of the
                  &lt;code&gt;JMXServiceURL&lt;/code&gt; supplied to the constructor was
                  &lt;code&gt;iiop&lt;/code&gt;, an object of type {@link RMIIIOPServerImpl}is created.
                  &lt;li&gt;Otherwise, if the &lt;code&gt;JMXServiceURL&lt;/code&gt;
                  was null, or its protocol part was &lt;code&gt;rmi&lt;/code&gt;, an object
                  of type {@link RMIJRMPServerImpl} is created.
                  &lt;li&gt;Otherwise, the implementation can create an
                  implementation-specific {@link RMIServerImpl} or it can throw{@link MalformedURLException}.
                  &lt;/ul&gt;
                  &lt;p&gt;If the given address includes a JNDI directory URL as
                  specified in the package documentation for {@link javax.management.remote.rmi}, then this
                  &lt;code&gt;RMIConnectorServer&lt;/code&gt; will bootstrap by binding the
                  &lt;code&gt;RMIServerImpl&lt;/code&gt; to the given address.&lt;/p&gt;
                  &lt;p&gt;If the URL path part of the &lt;code&gt;JMXServiceURL&lt;/code&gt; was
                  empty or a single slash (&lt;code&gt;/&lt;/code&gt;), then the RMI object
                  will not be bound to a directory.  Instead, a reference to it
                  will be encoded in the URL path of the RMIConnectorServer
                  address (returned by {@link #getAddress()}).  The encodings for
                  &lt;code&gt;rmi&lt;/code&gt; and &lt;code&gt;iiop&lt;/code&gt; are described in the
                  package documentation for {@link javax.management.remote.rmi}.&lt;/p&gt;
                  &lt;p&gt;The behavior when the URL path is neither empty nor a JNDI
                  directory URL, or when the protocol is neither &lt;code&gt;rmi&lt;/code&gt;
                  nor &lt;code&gt;iiop&lt;/code&gt;, is implementation defined, and may
                  include throwing {@link MalformedURLException} when the
                  connector server is created or when it is started.&lt;/p&gt;                
                <exception>
                    IllegalStateException if the connector server has
                      not been attached to an MBean server.                    
                </exception>
                <exception>
                    IOException if the connector server cannot be
                      started.                    
                </exception>
            </javadoc>
            <method name="start" type="void" line="220">
                <declaration name="tracing" type="boolean" line="221"/>
                <scope line="222"/>
                <scope line="226"/>
                <scope line="231">
                    <declaration name="accessFile" type="String" line="232"/>
                    <scope line="233">
                        <declaration name="mbsf" type="MBeanServerForwarder" line="234"/>
                        <scope line="235"/>
                        <scope line="238"/>
                    </scope>
                </scope>
                <scope line="244"/>
                <scope line="248">
                    <declaration name="x" type="IllegalArgumentException" line="249"/>
                </scope>
                <declaration name="rmiServer" type="RMIServerImpl" line="253"/>
                <scope line="260">
                    <declaration name="objref" type="RMIServer" line="262"/>
                    <scope line="263">
                        <declaration name="jndiUrl" type="String" line="264"/>
                        <declaration name="rebind" type="boolean" line="266"/>
                        <scope line="268">
                            <declaration name="usemap" type="Hashtable&lt;?,?&gt;" line="270"/>
                        </scope>
                        <scope line="274"/>
                    </scope>
                    <scope line="278"/>
                </scope>
                <scope line="284">
                    <scope line="285"/>
                    <scope line="288"/>
                </scope>
                <scope line="295"/>
                <scope line="299"/>
            </method>
            <javadoc line="304">
                &lt;p&gt;Deactivates the connector server, that is, stops listening for
                  client connections.  Calling this method will also close all
                  client connections that were made by this server.  After this
                  method returns, whether normally or with an exception, the
                  connector server will not create any new client
                  connections.&lt;/p&gt;
                  &lt;p&gt;Once a connector server has been stopped, it cannot be started
                  again.&lt;/p&gt;
                  &lt;p&gt;Calling this method when the connector server has already
                  been stopped has no effect.  Calling this method when the
                  connector server has not yet been started will disable the
                  connector server object permanently.&lt;/p&gt;
                  &lt;p&gt;If closing a client connection produces an exception, that
                  exception is not thrown from this method.  A {@link JMXConnectionNotification} is emitted from this MBean with the
                  connection ID of the connection that could not be closed.&lt;/p&gt;
                  &lt;p&gt;Closing a connector server is a potentially slow operation.
                  For example, if a client machine with an open connection has
                  crashed, the close operation might have to wait for a network
                  protocol timeout.  Callers that do not want to block in a close
                  operation should do it in a separate thread.&lt;/p&gt;
                  &lt;p&gt;This method calls the method {@link RMIServerImpl#close()close} on the connector server&apos;s &lt;code&gt;RMIServerImpl&lt;/code&gt;
                  object.&lt;/p&gt;
                  &lt;p&gt;If the &lt;code&gt;RMIServerImpl&lt;/code&gt; was bound to a JNDI
                  directory by the {@link #start() start} method, it is unbound
                  from the directory by this method.&lt;/p&gt;                
                <exception>
                    IOException if the server cannot be closed cleanly,
                      or if the <code>RMIServerImpl</code> cannot be unbound from the
                      directory.  When this exception is thrown, the server has
                      already attempted to close all client connections, if
                      appropriate; to call {@link RMIServerImpl#close()}; and to
                      unbind the <code>RMIServerImpl</code> from its directory, if
                      appropriate.  All client connections are closed except possibly
                      those that generated exceptions when the server attempted to
                      close them.                    
                </exception>
            </javadoc>
            <method name="stop" type="void" line="340">
                <declaration name="tracing" type="boolean" line="341"/>
                <scope line="342">
                    <scope line="343"/>
                    <scope line="347"/>
                </scope>
                <scope line="353"/>
                <declaration name="exception" type="IOException" line="356"/>
                <scope line="357">
                    <scope line="358"/>
                    <scope line="362"/>
                </scope>
                <scope line="368">
                    <scope line="369">
                        <declaration name="usemap" type="Hashtable&lt;?,?&gt;" line="371"/>
                        <declaration name="ctx" type="InitialContext" line="372"/>
                    </scope>
                    <scope line="376"/>
                </scope>
            </method>
            <method name="isActive" type="boolean" line="385"/>
            <method name="getAddress" type="JMXServiceURL" line="388"/>
            <method name="getAttributes" type="Map<String,?>" line="392">
                <declaration name="map" type="Map&lt;String,?&gt;" line="393"/>
            </method>
            <method name="setMBeanServerForwarder" type="void" line="396">
                <params>
                    <param name="mbsf" type="MBeanServerForwarder"/>
                </params>
            </method>
            <method name="connectionOpened" type="void" line="400">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="connectionClosed" type="void" line="403">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <method name="connectionFailed" type="void" line="406">
                <params>
                    <param name="connectionId" type="String"/>
                    <param name="message" type="String"/>
                    <param name="userData" type="Object"/>
                </params>
            </method>
            <javadoc line="409">
                Bind a stub to a registry.                
                <param>
                    jndiUrl URL of the stub in the registry, extracted
                      from the <code>JMXServiceURL</code>.                    
                </param>
                <param>
                    attributes A Hashtable containing environment parameters,
                      built from the Map specified at this object creation.                    
                </param>
                <param>
                    rmiServer The object to bind in the registry                    
                </param>
                <param>
                    rebind true if the object must be rebound.                    
                </param>
            </javadoc>
            <method name="bind" type="void" line="418">
                <params>
                    <param name="jndiUrl" type="String"/>
                    <param name="attributes" type="Hashtable<?,?>"/>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="rebind" type="boolean"/>
                </params>
                <declaration name="ctx" type="InitialContext" line="419"/>
            </method>
            <javadoc line="424">
                Creates a new RMIServerImpl.                
            </javadoc>
            <method name="newServer" type="RMIServerImpl" line="427">
                <declaration name="iiop" type="boolean" line="428"/>
                <declaration name="port" type="int" line="429"/>
            </method>
            <javadoc line="435">
                Encode a stub into the JMXServiceURL.                
                <param>
                    rmiServer The stub object to encode in the URL                    
                </param>
                <param>
                    attributes A Map containing environment parameters,
                      built from the Map specified at this object creation.                    
                </param>
            </javadoc>
            <method name="encodeStubInAddress" type="void" line="441">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="attributes" type="Map<String,?>"/>
                </params>
                <declaration name="protocol" type="String" line="442"/>
                <declaration name="port" type="int" line="443"/>
                <scope line="444"/>
                <scope line="450"/>
                <declaration name="urlPath" type="String" line="455"/>
            </method>
            <method name="isIiopURL" type="boolean" line="458">
                <params>
                    <param name="directoryURL" type="JMXServiceURL"/>
                    <param name="strict" type="boolean"/>
                </params>
                <declaration name="protocol" type="String" line="459"/>
                <scope line="462"/>
            </method>
            <javadoc line="467">
                Returns the IOR of the given rmiServer.                
            </javadoc>
            <method name="encodeStub" type="String" line="470">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <method name="encodeJRMPStub" type="String" line="474">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <declaration name="bout" type="ByteArrayOutputStream" line="475"/>
                <declaration name="oout" type="ObjectOutputStream" line="476"/>
                <declaration name="bytes" type="byte[]" line="479"/>
            </method>
            <method name="encodeIIOPStub" type="String" line="482">
                <params>
                    <param name="rmiServer" type="RMIServer"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <scope line="483">
                    <declaration name="orb" type="Object" line="484"/>
                </scope>
                <scope line="487"/>
            </method>
            <javadoc line="491">
                Object that we will bind to the registry.
                  This object is a stub connected to our RMIServerImpl.                
            </javadoc>
            <method name="objectToBind" type="RMIServer" line="495">
                <params>
                    <param name="rmiServer" type="RMIServerImpl"/>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <method name="newJRMPServer" type="RMIServerImpl" line="498">
                <params>
                    <param name="env" type="Map<String,?>"/>
                    <param name="port" type="int"/>
                </params>
                <declaration name="csf" type="RMIClientSocketFactory" line="499"/>
                <declaration name="ssf" type="RMIServerSocketFactory" line="500"/>
            </method>
            <method name="newIIOPServer" type="RMIServerImpl" line="503">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <method name="byteArrayToBase64" type="String" line="506">
                <params>
                    <param name="a" type="byte[]"/>
                </params>
                <declaration name="aLen" type="int" line="507"/>
                <declaration name="numFullGroups" type="int" line="508"/>
                <declaration name="numBytesInPartialGroup" type="int" line="509"/>
                <declaration name="resultLen" type="int" line="510"/>
                <declaration name="result" type="StringBuilder" line="511"/>
                <declaration name="inCursor" type="int" line="512"/>
                <scope line="513">
                    <declaration name="byte0" type="int" line="514"/>
                    <declaration name="byte1" type="int" line="515"/>
                    <declaration name="byte2" type="int" line="516"/>
                </scope>
                <scope line="522">
                    <declaration name="byte0" type="int" line="523"/>
                    <scope line="525"/>
                    <scope line="529">
                        <declaration name="byte1" type="int" line="530"/>
                    </scope>
                </scope>
            </method>
            <declaration name="intToAlpha" type="char" line="538"/>
            <javadoc line="538">
                This array is a lookup table that translates 6-bit positive integer
                  index values into their &quot;Base64 Alphabet&quot; equivalents as specified
                  in Table 1 of RFC 2045.                
            </javadoc>
            <javadoc line="544">
                Construct a new IOException with a nested exception.
                  The nested exception is set only if JDK &gt;= 1.4                
            </javadoc>
            <method name="newIOException" type="IOException" line="548">
                <params>
                    <param name="message" type="String"/>
                    <param name="cause" type="Throwable"/>
                </params>
                <declaration name="x" type="IOException" line="549"/>
            </method>
            <declaration name="logger" type="ClassLogger" line="552"/>
            <declaration name="address" type="JMXServiceURL" line="553"/>
            <declaration name="rmiServerImpl" type="RMIServerImpl" line="554"/>
            <declaration name="attributes" type="Map&lt;String,?&gt;" line="555"/>
            <declaration name="defaultClassLoader" type="ClassLoader" line="556"/>
            <declaration name="boundJndiUrl" type="String" line="557"/>
            <declaration name="CREATED" type="int" line="558"/>
            <declaration name="STARTED" type="int" line="559"/>
            <declaration name="STOPPED" type="int" line="560"/>
            <declaration name="state" type="int" line="561"/>
            <declaration name="openedServers" type="Set&lt;RMIConnectorServer&gt;" line="562"/>
        </class>
    </source>