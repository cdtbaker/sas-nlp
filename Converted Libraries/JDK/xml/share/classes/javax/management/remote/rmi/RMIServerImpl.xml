<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote.rmi">
        <import package="com.sun.jmx.remote.internal.ArrayNotificationBuffer"/>
        <import package="com.sun.jmx.remote.internal.NotificationBuffer"/>
        <import package="com.sun.jmx.remote.security.JMXPluggableAuthenticator"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="java.io.Closeable"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.rmi.Remote"/>
        <import package="java.rmi.server.RemoteServer"/>
        <import package="java.rmi.server.ServerNotActiveException"/>
        <import package="java.security.Principal"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <import package="javax.management.MBeanServer"/>
        <import package="javax.management.remote.JMXAuthenticator"/>
        <import package="javax.management.remote.JMXConnectorServer"/>
        <import package="javax.security.auth.Subject"/>
        <class name="RMIServerImpl" line="23">
            <implements interface="Closeable"/>
            <implements interface="RMIServer"/>
            <javadoc line="23">
                &lt;p&gt;An RMI object representing a connector server.  Remote clients
                  can make connections using the {@link #newClient(Object)} method.  This
                  method returns an RMI object representing the connection.&lt;/p&gt;
                  &lt;p&gt;User code does not usually reference this class directly.
                  RMI connection servers are usually created with the class {@link RMIConnectorServer}.  Remote clients usually create connections
                  either with {@link javax.management.remote.JMXConnectorFactory}or by instantiating {@link RMIConnector}.&lt;/p&gt;
                  &lt;p&gt;This is an abstract class.  Concrete subclasses define the
                  details of the client connection objects, such as whether they use
                  JRMP or IIOP.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="36">
                &lt;p&gt;Constructs a new &lt;code&gt;RMIServerImpl&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    env the environment containing attributes for the new
                      <code>RMIServerImpl</code>.  Can be null, which is equivalent
                      to an empty Map.                    
                </param>
            </javadoc>
            <method name="RMIServerImpl" type="constructor" line="42">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
            </method>
            <method name="setRMIConnectorServer" type="void" line="45">
                <params>
                    <param name="connServer" type="RMIConnectorServer"/>
                </params>
            </method>
            <method name="export" type="void" line="48"/>
            <javadoc line="48">
                &lt;p&gt;Exports this RMI object.&lt;/p&gt;                
                <exception>
                    IOException if this RMI object cannot be exported.                    
                </exception>
            </javadoc>
            <method name="toStub" type="Remote" line="53"/>
            <javadoc line="53">
                Returns a remotable stub for this server object.                
                <return>
                    a remotable stub.                    
                </return>
                <exception>
                    IOException if the stub cannot be obtained - e.g the
                      RMIServerImpl has not been exported yet.                    
                </exception>
            </javadoc>
            <javadoc line="60">
                &lt;p&gt;Sets the default &lt;code&gt;ClassLoader&lt;/code&gt; for this connector
                  server. New client connections will use this classloader.
                  Existing client connections are unaffected.&lt;/p&gt;                
                <param>
                    cl the new <code>ClassLoader</code> to be used by this
                      connector server.                    
                </param>
                <see>
                    #getDefaultClassLoader                    
                </see>
            </javadoc>
            <method name="setDefaultClassLoader" type="void" line="68">
                <params>
                    <param name="cl" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="71">
                &lt;p&gt;Gets the default &lt;code&gt;ClassLoader&lt;/code&gt; used by this connector
                  server.&lt;/p&gt;                
                <return>
                    the default <code>ClassLoader</code> used by this
                      connector server.</p>                    
                </return>
                <see>
                    #setDefaultClassLoader                    
                </see>
            </javadoc>
            <method name="getDefaultClassLoader" type="ClassLoader" line="78"/>
            <javadoc line="81">
                &lt;p&gt;Sets the &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector
                  server is attached. New client connections will interact
                  with this &lt;code&gt;MBeanServer&lt;/code&gt;. Existing client connections are
                  unaffected.&lt;/p&gt;                
                <param>
                    mbs the new <code>MBeanServer</code>.  Can be null, but
                      new client connections will be refused as long as it is.                    
                </param>
                <see>
                    #getMBeanServer                    
                </see>
            </javadoc>
            <method name="setMBeanServer" type="void" line="90">
                <params>
                    <param name="mbs" type="MBeanServer"/>
                </params>
            </method>
            <javadoc line="93">
                &lt;p&gt;The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server
                  is attached.  This is the last value passed to {@link #setMBeanServer} on this object, or null if that method has
                  never been called.&lt;/p&gt;                
                <return>
                    the <code>MBeanServer</code> to which this connector
                      is attached.                    
                </return>
                <see>
                    #setMBeanServer                    
                </see>
            </javadoc>
            <method name="getMBeanServer" type="MBeanServer" line="101"/>
            <method name="getVersion" type="String" line="104">
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <javadoc line="112">
                &lt;p&gt;Creates a new client connection.  This method calls {@link #makeClient makeClient} and adds the returned client connection
                  object to an internal list.  When this
                  &lt;code&gt;RMIServerImpl&lt;/code&gt; is shut down via its {@link #close()} method, the {@link RMIConnection#close() close()}method of each object remaining in the list is called.&lt;/p&gt;
                  &lt;p&gt;The fact that a client connection object is in this internal
                  list does not prevent it from being garbage collected.&lt;/p&gt;                
                <param>
                    credentials this object specifies the user-defined
                      credentials to be passed in to the server in order to
                      authenticate the caller before creating the
                      <code>RMIConnection</code>.  Can be null.                    
                </param>
                <return>
                    the newly-created <code>RMIConnection</code>.  This is
                      usually the object created by <code>makeClient</code>, though
                      an implementation may choose to wrap that object in another
                      object implementing <code>RMIConnection</code>.                    
                </return>
                <exception>
                    IOException if the new client object cannot be
                      created or exported.                    
                </exception>
                <exception>
                    SecurityException if the given credentials do not allow
                      the server to authenticate the user successfully.                    
                </exception>
                <exception>
                    IllegalStateException if {@link #getMBeanServer()}is null.                    
                </exception>
            </javadoc>
            <method name="newClient" type="RMIConnection" line="132">
                <params>
                    <param name="credentials" type="Object"/>
                </params>
            </method>
            <javadoc line="135">
                This method could be overridden by subclasses defined in this package
                  to perform additional operations specific to the underlying transport
                  before creating the new client connection.                
            </javadoc>
            <method name="doNewClient" type="RMIConnection" line="140">
                <params>
                    <param name="credentials" type="Object"/>
                </params>
                <declaration name="tracing" type="boolean" line="141"/>
                <declaration name="subject" type="Subject" line="144"/>
                <declaration name="authenticator" type="JMXAuthenticator" line="145"/>
                <scope line="146">
                    <scope line="147"/>
                </scope>
                <scope line="151">
                    <scope line="153"/>
                    <scope line="156"/>
                </scope>
                <scope line="161"/>
                <declaration name="connectionId" type="String" line="165"/>
                <declaration name="client" type="RMIConnection" line="167"/>
                <declaration name="wr" type="WeakReference&lt;RMIConnection&gt;" line="169"/>
                <scope line="170"/>
                <scope line="174">
                    <scope line="175"/>
                </scope>
            </method>
            <method name="makeClient" type="RMIConnection" line="182"/>
            <javadoc line="182">
                &lt;p&gt;Creates a new client connection.  This method is called by
                  the public method {@link #newClient(Object)}.&lt;/p&gt;                
                <param>
                    connectionId the ID of the new connection.  Every
                      connection opened by this connector server will have a
                      different ID.  The behavior is unspecified if this parameter is
                      null.                    
                </param>
                <param>
                    subject the authenticated subject.  Can be null.                    
                </param>
                <return>
                    the newly-created <code>RMIConnection</code>.                    
                </return>
                <exception>
                    IOException if the new client object cannot be
                      created or exported.                    
                </exception>
            </javadoc>
            <method name="closeClient" type="void" line="195"/>
            <javadoc line="195">
                &lt;p&gt;Closes a client connection made by {@link #makeClient makeClient}.                
                <param>
                    client a connection previously returned by
                      <code>makeClient</code> on which the <code>closeClient</code>
                      method has not previously been called.  The behavior is
                      unspecified if these conditions are violated, including the
                      case where <code>client</code> is null.                    
                </param>
                <exception>
                    IOException if the client connection cannot be
                      closed.                    
                </exception>
            </javadoc>
            <method name="getProtocol" type="String" line="206"/>
            <javadoc line="206">
                &lt;p&gt;Returns the protocol string for this object.  The string is
                  &lt;code&gt;rmi&lt;/code&gt; for RMI/JRMP and &lt;code&gt;iiop&lt;/code&gt; for RMI/IIOP.                
                <return>
                    the protocol string for this object.                    
                </return>
            </javadoc>
            <javadoc line="212">
                &lt;p&gt;Method called when a client connection created by {@link #makeClient makeClient} is closed.  A subclass that defines
                  &lt;code&gt;makeClient&lt;/code&gt; must arrange for this method to be
                  called when the resultant object&apos;s {@link RMIConnection#close()close} method is called.  This enables it to be removed from
                  the &lt;code&gt;RMIServerImpl&lt;/code&gt;&apos;s list of connections.  It is
                  not an error for &lt;code&gt;client&lt;/code&gt; not to be in that
                  list.&lt;/p&gt;
                  &lt;p&gt;After removing &lt;code&gt;client&lt;/code&gt; from the list of
                  connections, this method calls {@link #closeClientcloseClient(client)}.&lt;/p&gt;                
                <param>
                    client the client connection that has been closed.                    
                </param>
                <exception>
                    IOException if {@link #closeClient} throws this
                      exception.                    
                </exception>
                <exception>
                    NullPointerException if <code>client</code> is null.                    
                </exception>
            </javadoc>
            <method name="clientClosed" type="void" line="226">
                <params>
                    <param name="client" type="RMIConnection"/>
                </params>
                <declaration name="debug" type="boolean" line="227"/>
                <scope line="230">
                    <scope line="232">
                        <declaration name="wr" type="WeakReference&lt;RMIConnection&gt;" line="233"/>
                        <scope line="234"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="246">
                &lt;p&gt;Closes this connection server.  This method first calls the{@link #closeServer()} method so that no new client connections
                  will be accepted.  Then, for each remaining {@link RMIConnection} object returned by {@link #makeClientmakeClient}, its {@link RMIConnection#close() close} method is
                  called.&lt;/p&gt;
                  &lt;p&gt;The behavior when this method is called more than once is
                  unspecified.&lt;/p&gt;
                  &lt;p&gt;If {@link #closeServer()} throws an
                  &lt;code&gt;IOException&lt;/code&gt;, the individual connections are
                  nevertheless closed, and then the &lt;code&gt;IOException&lt;/code&gt; is
                  thrown from this method.&lt;/p&gt;
                  &lt;p&gt;If {@link #closeServer()} returns normally but one or more
                  of the individual connections throws an
                  &lt;code&gt;IOException&lt;/code&gt;, then, after closing all the
                  connections, one of those &lt;code&gt;IOException&lt;/code&gt;s is thrown
                  from this method.  If more than one connection throws an
                  &lt;code&gt;IOException&lt;/code&gt;, it is unspecified which one is thrown
                  from this method.&lt;/p&gt;                
                <exception>
                    IOException if {@link #closeServer()} or one of the{@link RMIConnection#close()} calls threw
                      <code>IOException</code>.                    
                </exception>
            </javadoc>
            <method name="close" type="void" line="266">
                <declaration name="tracing" type="boolean" line="267"/>
                <declaration name="debug" type="boolean" line="268"/>
                <declaration name="ioException" type="IOException" line="270"/>
                <scope line="271"/>
                <scope line="275"/>
                <scope line="281">
                    <scope line="282">
                        <scope line="287">
                            <declaration name="wr" type="WeakReference&lt;RMIConnection&gt;" line="288"/>
                            <declaration name="client" type="RMIConnection" line="289"/>
                            <scope line="291">
                                <scope line="292"/>
                                <scope line="295"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="306"/>
            </method>
            <method name="closeServer" type="void" line="312"/>
            <javadoc line="312">
                &lt;p&gt;Called by {@link #close()} to close the connector server.
                  After returning from this method, the connector server must
                  not accept any new connections.&lt;/p&gt;                
                <exception>
                    IOException if the attempt to close the connector
                      server failed.                    
                </exception>
            </javadoc>
            <method name="makeConnectionId" type="String" line="320">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="subject" type="Subject"/>
                </params>
                <declaration name="clientHost" type="String" line="322"/>
                <scope line="323"/>
                <scope line="326"/>
                <declaration name="buf" type="StringBuilder" line="329"/>
                <scope line="333">
                    <declaration name="principals" type="Set&lt;Principal&gt;" line="334"/>
                    <declaration name="sep" type="String" line="335"/>
                    <scope line="336">
                        <declaration name="p" type="Principal" line="337"/>
                        <declaration name="name" type="String" line="338"/>
                    </scope>
                </scope>
            </method>
            <method name="dropDeadReferences" type="void" line="347">
                <scope line="348">
                    <scope line="349">
                        <declaration name="wr" type="WeakReference&lt;RMIConnection&gt;" line="350"/>
                    </scope>
                </scope>
            </method>
            <method name="getNotifBuffer" type="NotificationBuffer" line="355"/>
            <declaration name="logger" type="ClassLogger" line="359"/>
            <declaration name="clientList" type="List&lt;WeakReference&lt;RMIConnection&gt;&gt;" line="360"/>
            <javadoc line="360">
                List of WeakReference values.  Each one references an
                  RMIConnection created by this object, or null if the
                  RMIConnection has been garbage-collected.                
            </javadoc>
            <declaration name="cl" type="ClassLoader" line="366"/>
            <declaration name="mbeanServer" type="MBeanServer" line="367"/>
            <declaration name="env" type="Map&lt;String,?&gt;" line="368"/>
            <declaration name="connServer" type="RMIConnectorServer" line="369"/>
            <declaration name="connectionIdNumber" type="int" line="370"/>
            <declaration name="notifBuffer" type="NotificationBuffer" line="371"/>
        </class>
    </source>