<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.management.remote">
        <import package="com.sun.jmx.mbeanserver.Util"/>
        <import package="java.io.IOException"/>
        <import package="java.net.MalformedURLException"/>
        <import package="java.util.Collections"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="com.sun.jmx.remote.util.ClassLogger"/>
        <import package="com.sun.jmx.remote.util.EnvHelp"/>
        <class name="JMXConnectorFactory" line="44">
            <javadoc line="44">
                &lt;p&gt;Factory to create JMX API connector clients.  There
                  are no instances of this class.&lt;/p&gt;
                  &lt;p&gt;Connections are usually made using the {@link #connect(JMXServiceURL) connect} method of this class.  More
                  advanced applications can separate the creation of the connector
                  client, using {@link #newJMXConnector(JMXServiceURL,Map)newJMXConnector} and the establishment of the connection itself, using{@link JMXConnector#connect(Map)}.&lt;/p&gt;
                  &lt;p&gt;Each client is created by an instance of {@link JMXConnectorProvider}.  This instance is found as follows.  Suppose
                  the given {@link JMXServiceURL} looks like
                  &lt;code&gt;&quot;service:jmx:&lt;em&gt;protocol&lt;/em&gt;:&lt;em&gt;remainder&lt;/em&gt;&quot;&lt;/code&gt;.
                  Then the factory will attempt to find the appropriate {@link JMXConnectorProvider} for &lt;code&gt;&lt;em&gt;protocol&lt;/em&gt;&lt;/code&gt;.  Each
                  occurrence of the character &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt; in
                  &lt;code&gt;&lt;em&gt;protocol&lt;/em&gt;&lt;/code&gt; is replaced by &lt;code&gt;.&lt;/code&gt; or
                  &lt;code&gt;_&lt;/code&gt;, respectively.&lt;/p&gt;
                  &lt;p&gt;A &lt;em&gt;provider package list&lt;/em&gt; is searched for as follows:&lt;/p&gt;
                  &lt;ol&gt;
                  &lt;li&gt;If the &lt;code&gt;environment&lt;/code&gt; parameter to {@link #newJMXConnector(JMXServiceURL,Map) newJMXConnector} contains the
                  key &lt;code&gt;jmx.remote.protocol.provider.pkgs&lt;/code&gt; then the
                  associated value is the provider package list.
                  &lt;li&gt;Otherwise, if the system property
                  &lt;code&gt;jmx.remote.protocol.provider.pkgs&lt;/code&gt; exists, then its value
                  is the provider package list.
                  &lt;li&gt;Otherwise, there is no provider package list.
                  &lt;/ol&gt;
                  &lt;p&gt;The provider package list is a string that is interpreted as a
                  list of non-empty Java package names separated by vertical bars
                  (&lt;code&gt;|&lt;/code&gt;).  If the string is empty, then so is the provider
                  package list.  If the provider package list is not a String, or if
                  it contains an element that is an empty string, a {@link JMXProviderException} is thrown.&lt;/p&gt;
                  &lt;p&gt;If the provider package list exists and is not empty, then for
                  each element &lt;code&gt;&lt;em&gt;pkg&lt;/em&gt;&lt;/code&gt; of the list, the factory
                  will attempt to load the class
                  &lt;blockquote&gt;
                  &lt;code&gt;&lt;em&gt;pkg&lt;/em&gt;.&lt;em&gt;protocol&lt;/em&gt;.ClientProvider&lt;/code&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;If the &lt;code&gt;environment&lt;/code&gt; parameter to {@link #newJMXConnector(JMXServiceURL,Map) newJMXConnector} contains the
                  key &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; then the
                  associated value is the class loader to use to load the provider.
                  If the associated value is not an instance of {@link java.lang.ClassLoader}, an {@link java.lang.IllegalArgumentException} is thrown.&lt;/p&gt;
                  &lt;p&gt;If the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt;
                  key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, the
                  calling thread&apos;s context class loader is used.&lt;/p&gt;
                  &lt;p&gt;If the attempt to load this class produces a {@link ClassNotFoundException}, the search for a handler continues with
                  the next element of the list.&lt;/p&gt;
                  &lt;p&gt;Otherwise, a problem with the provider found is signalled by a{@link JMXProviderException} whose {@link JMXProviderException#getCause() &lt;em&gt;cause&lt;/em&gt;} indicates the underlying
                  exception, as follows:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;if the attempt to load the class produces an exception other
                  than &lt;code&gt;ClassNotFoundException&lt;/code&gt;, that is the
                  &lt;em&gt;cause&lt;/em&gt;;
                  &lt;li&gt;if {@link Class#newInstance()} for the class produces an
                  exception, that is the &lt;em&gt;cause&lt;/em&gt;.
                  &lt;/ul&gt;
                  &lt;p&gt;If no provider is found by the above steps, including the
                  default case where there is no provider package list, then the
                  implementation will use its own provider for
                  &lt;code&gt;&lt;em&gt;protocol&lt;/em&gt;&lt;/code&gt;, or it will throw a
                  &lt;code&gt;MalformedURLException&lt;/code&gt; if there is none.  An
                  implementation may choose to find providers by other means.  For
                  example, it may support the &lt;a
                  href=&quot;{@docRoot}/../technotes/guides/jar/jar.html#Service Provider&quot;&gt;
                  JAR conventions for service providers&lt;/a&gt;, where the service
                  interface is &lt;code&gt;JMXConnectorProvider&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;Every implementation must support the RMI connector protocols,
                  specified with the string &lt;code&gt;rmi&lt;/code&gt; or
                  &lt;code&gt;iiop&lt;/code&gt;.&lt;/p&gt;
                  &lt;p&gt;Once a provider is found, the result of the
                  &lt;code&gt;newJMXConnector&lt;/code&gt; method is the result of calling {@link JMXConnectorProvider#newJMXConnector(JMXServiceURL,Map) newJMXConnector}on the provider.&lt;/p&gt;
                  &lt;p&gt;The &lt;code&gt;Map&lt;/code&gt; parameter passed to the
                  &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only
                  &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the
                  &lt;code&gt;environment&lt;/code&gt; parameter to {@link #newJMXConnector(JMXServiceURL,Map)JMXConnectorFactory.newJMXConnector}, if there was one.
                  Additionally, if the
                  &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not
                  present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to
                  the new read-only &lt;code&gt;Map&lt;/code&gt;.  The associated value is the
                  calling thread&apos;s context class loader.&lt;/p&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="DEFAULT_CLASS_LOADER" type="String" line="165"/>
            <javadoc line="165">
                &lt;p&gt;Name of the attribute that specifies the default class
                  loader. This class loader is used to deserialize return values and
                  exceptions from remote &lt;code&gt;MBeanServerConnection&lt;/code&gt;
                  calls.  The value associated with this attribute is an instance
                  of {@link ClassLoader}.&lt;/p&gt;                
            </javadoc>
            <declaration name="PROTOCOL_PROVIDER_PACKAGES" type="String" line="175"/>
            <javadoc line="175">
                &lt;p&gt;Name of the attribute that specifies the provider packages
                  that are consulted when looking for the handler for a protocol.
                  The value associated with this attribute is a string with
                  package names separated by vertical bars (&lt;code&gt;|&lt;/code&gt;).&lt;/p&gt;                
            </javadoc>
            <declaration name="PROTOCOL_PROVIDER_CLASS_LOADER" type="String" line="184"/>
            <javadoc line="184">
                &lt;p&gt;Name of the attribute that specifies the class
                  loader for loading protocol providers.
                  The value associated with this attribute is an instance
                  of {@link ClassLoader}.&lt;/p&gt;                
            </javadoc>
            <declaration name="PROTOCOL_PROVIDER_DEFAULT_PACKAGE" type="String" line="193"/>
            <declaration name="logger" type="ClassLogger" line="196"/>
            <javadoc line="199">
                There are no instances of this class.                
            </javadoc>
            <method name="JMXConnectorFactory" type="constructor" line="200"/>
            <javadoc line="203">
                &lt;p&gt;Creates a connection to the connector server at the given
                  address.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to {@link #connect(JMXServiceURL,Map) connect(serviceURL, null)}.&lt;/p&gt;                
                <param>
                    serviceURL the address of the connector server to
                      connect to.                    
                </param>
                <return>
                    a <code>JMXConnector</code> whose {@link JMXConnector#connect connect} method has been called.                    
                </return>
                <exception>
                    NullPointerException if <code>serviceURL</code> is null.                    
                </exception>
                <exception>
                    IOException if the connector client or the
                      connection cannot be made because of a communication problem.                    
                </exception>
                <exception>
                    SecurityException if the connection cannot be made
                      for security reasons.                    
                </exception>
            </javadoc>
            <method name="connect" type="JMXConnector" line="225">
                <params>
                    <param name="serviceURL" type="JMXServiceURL"/>
                </params>
            </method>
            <javadoc line="229">
                &lt;p&gt;Creates a connection to the connector server at the given
                  address.&lt;/p&gt;
                  &lt;p&gt;This method is equivalent to:&lt;/p&gt;
                  &lt;pre&gt;
                  JMXConnector conn = JMXConnectorFactory.newJMXConnector(serviceURL,
                  environment);
                  conn.connect(environment);
                  &lt;/pre&gt;                
                <param>
                    serviceURL the address of the connector server to connect to.                    
                </param>
                <param>
                    environment a set of attributes to determine how the
                      connection is made.  This parameter can be null.  Keys in this
                      map must be Strings.  The appropriate type of each associated
                      value depends on the attribute.  The contents of
                      <code>environment</code> are not changed by this call.                    
                </param>
                <return>
                    a <code>JMXConnector</code> representing the newly-made
                      connection.  Each successful call to this method produces a
                      different object.                    
                </return>
                <exception>
                    NullPointerException if <code>serviceURL</code> is null.                    
                </exception>
                <exception>
                    IOException if the connector client or the
                      connection cannot be made because of a communication problem.                    
                </exception>
                <exception>
                    SecurityException if the connection cannot be made
                      for security reasons.                    
                </exception>
            </javadoc>
            <method name="connect" type="JMXConnector" line="263">
                <params>
                    <param name="serviceURL" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <declaration name="conn" type="JMXConnector" line="266"/>
            </method>
            <method name="newHashMap" type="Map<K,V>" line="271"/>
            <method name="newHashMap" type="Map<K,Object>" line="275">
                <params>
                    <param name="map" type="Map<K,?>"/>
                </params>
            </method>
            <javadoc line="279">
                &lt;p&gt;Creates a connector client for the connector server at the
                  given address.  The resultant client is not connected until its{@link JMXConnector#connect(Map) connect} method is called.&lt;/p&gt;                
                <param>
                    serviceURL the address of the connector server to connect to.                    
                </param>
                <param>
                    environment a set of attributes to determine how the
                      connection is made.  This parameter can be null.  Keys in this
                      map must be Strings.  The appropriate type of each associated
                      value depends on the attribute.  The contents of
                      <code>environment</code> are not changed by this call.                    
                </param>
                <return>
                    a <code>JMXConnector</code> representing the new
                      connector client.  Each successful call to this method produces
                      a different object.                    
                </return>
                <exception>
                    NullPointerException if <code>serviceURL</code> is null.                    
                </exception>
                <exception>
                    IOException if the connector client cannot be made
                      because of a communication problem.                    
                </exception>
                <exception>
                    MalformedURLException if there is no provider for the
                      protocol in <code>serviceURL</code>.                    
                </exception>
                <exception>
                    JMXProviderException if there is a provider for the
                      protocol in <code>serviceURL</code> but it cannot be used for
                      some reason.                    
                </exception>
            </javadoc>
            <method name="newJMXConnector" type="JMXConnector" line="310">
                <params>
                    <param name="serviceURL" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <comment line="334">
                    Loader is null when context class loader is set to null                    
                </comment>
                <comment line="335">
                    and no loader has been provided in map.                    
                </comment>
                <comment line="336">
                    com.sun.jmx.remote.util.Service class extracted from j2se                    
                </comment>
                <comment line="337">
                    provider search algorithm doesn&apos;t handle well null classloader.                    
                </comment>
                <declaration name="envcopy" type="Map&lt;String,Object&gt;" line="312"/>
                <scope line="315"/>
                <declaration name="loader" type="ClassLoader" line="320"/>
                <declaration name="targetInterface" type="Class&lt;JMXConnectorProvider&gt;" line="321"/>
                <declaration name="protocol" type="String" line="323"/>
                <declaration name="providerClassName" type="String" line="324"/>
                <declaration name="providerURL" type="JMXServiceURL" line="325"/>
                <declaration name="provider" type="JMXConnectorProvider" line="327"/>
                <declaration name="exception" type="IOException" line="332"/>
                <scope line="333">
                    <scope line="338">
                        <scope line="339">
                            <declaration name="connection" type="JMXConnector" line="340"/>
                        </scope>
                        <scope line="344"/>
                        <scope line="346"/>
                    </scope>
                </scope>
                <scope line="355">
                    <declaration name="e" type="MalformedURLException" line="356"/>
                    <scope line="358"/>
                    <scope line="360"/>
                </scope>
                <declaration name="fixedenv" type="Map&lt;String,Object&gt;" line="365"/>
            </method>
            <method name="resolvePkgs" type="String" line="372">
                <params>
                    <param name="env" type="Map<String,?>"/>
                </params>
                <comment line="401">
                    pkgs may not contain an empty element                    
                </comment>
                <declaration name="pkgsObject" type="Object" line="374"/>
                <anonymous_class line="381">
                    <method name="run" type="String" line="382"/>
                </anonymous_class>
                <scope line="390">
                    <declaration name="msg" type="String" line="391"/>
                </scope>
                <declaration name="pkgs" type="String" line="397"/>
                <scope line="403">
                    <declaration name="msg" type="String" line="404"/>
                </scope>
            </method>
            <method name="getProvider" type="T" line="417">
                <params>
                    <param name="serviceURL" type="JMXServiceURL"/>
                    <param name="environment" type="Map<String,Object>"/>
                    <param name="providerClassName" type="String"/>
                    <param name="targetInterface" type="Class<T>"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="protocol" type="String" line="419"/>
                <declaration name="pkgs" type="String" line="421"/>
                <declaration name="instance" type="T" line="423"/>
                <scope line="425"/>
            </method>
            <method name="getProviderIterator" type="Iterator<T>" line="437">
                <params>
                    <param name="providerClass" type="Class<T>"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="serviceLoader" type="ServiceLoader&lt;T&gt;" line="438"/>
            </method>
            <method name="getConnectorAsService" type="JMXConnector" line="446">
                <params>
                    <param name="loader" type="ClassLoader"/>
                    <param name="url" type="JMXServiceURL"/>
                    <param name="map" type="Map<String,?>"/>
                </params>
                <declaration name="providers" type="Iterator&lt;JMXConnectorProvider&gt;" line="448"/>
                <declaration name="connection" type="JMXConnector" line="450"/>
                <declaration name="exception" type="IOException" line="451"/>
                <scope line="452">
                    <declaration name="provider" type="JMXConnectorProvider" line="453"/>
                    <scope line="454"/>
                    <scope line="457"/>
                    <scope line="459">
                        <scope line="464">
                            <scope line="465">
                                <scope line="466"/>
                                <scope line="468"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getProvider" type="T" line="488">
                <params>
                    <param name="protocol" type="String"/>
                    <param name="pkgs" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                    <param name="providerClassName" type="String"/>
                    <param name="targetInterface" type="Class<T>"/>
                </params>
                <comment line="500">
                    Add trace.                    
                </comment>
                <comment line="512">
                    We have just proved that this cast is correct                    
                </comment>
                <declaration name="tokenizer" type="StringTokenizer" line="490"/>
                <scope line="492">
                    <declaration name="pkg" type="String" line="493"/>
                    <declaration name="className" type="String" line="494"/>
                    <declaration name="providerClass" type="Class&lt;?&gt;" line="496"/>
                    <scope line="497"/>
                    <scope line="499"/>
                    <scope line="504">
                        <declaration name="msg" type="String" line="505"/>
                    </scope>
                    <declaration name="providerClassT" type="Class&lt;? extends T&gt;" line="513"/>
                    <scope line="514"/>
                    <scope line="516">
                        <declaration name="msg" type="String" line="517"/>
                    </scope>
                </scope>
            </method>
            <method name="resolveClassLoader" type="ClassLoader" line="527">
                <params>
                    <param name="environment" type="Map<String,?>"/>
                </params>
                <declaration name="loader" type="ClassLoader" line="528"/>
                <scope line="530">
                    <scope line="531"/>
                    <scope line="534">
                        <declaration name="msg" type="String" line="535"/>
                    </scope>
                </scope>
                <anonymous_class line="545">
                    <method name="run" type="ClassLoader" line="546"/>
                </anonymous_class>
            </method>
            <method name="protocol2package" type="String" line="555">
                <params>
                    <param name="protocol" type="String"/>
                </params>
            </method>
        </class>
    </source>