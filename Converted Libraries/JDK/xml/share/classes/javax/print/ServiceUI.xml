<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print">
        <import package="java.awt.GraphicsConfiguration"/>
        <import package="java.awt.GraphicsDevice"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.AttributeSet"/>
        <import package="javax.print.attribute.PrintRequestAttributeSet"/>
        <import package="javax.print.attribute.standard.Destination"/>
        <import package="javax.print.attribute.standard.Fidelity"/>
        <import package="sun.print.ServiceDialog"/>
        <import package="sun.print.SunAlternateMedia"/>
        <class name="ServiceUI" line="47">
            <comment line="263">
                POSSIBLE FUTURE API: This method may be used down the road if we
                 decide to allow developers to explicitly display a &quot;page setup&quot; dialog.
                 Currently we use that functionality internally for the AWT print model.                
            </comment>
            <comment line="268">
                public static void pageDialog(GraphicsConfiguration gc,
                int x, int y,
                PrintService service,
                DocFlavor flavor,
                PrintRequestAttributeSet attributes)
                throws HeadlessException
                {
                if (GraphicsEnvironment.isHeadless()) {
                throw new HeadlessException();
                } else if (service == null) {
                throw new IllegalArgumentException(&quot;service must be non-null&quot;);
                } else if (attributes == null) {
                throw new IllegalArgumentException(&quot;attributes must be non-null&quot;);
                }
                
                ServiceDialog dialog = new ServiceDialog(gc, x, y, service,
                flavor, attributes);
                dialog.show();
                
                if (dialog.getStatus() == ServiceDialog.APPROVE) {
                PrintRequestAttributeSet newas = dialog.getAttributes();
                Class amCategory = SunAlternateMedia.class;
                
                if (attributes.containsKey(amCategory) &amp;&amp;
                !newas.containsKey(amCategory))
                {
                attributes.remove(amCategory);
                }
                
                attributes.addAll(newas.values());
                }
                
                dialog.getOwner().dispose();
                }                
            </comment>
            <javadoc line="47">
                This class is a collection of UI convenience methods which provide a
                  graphical user dialog for browsing print services looked up through the Java
                  Print Service API.
                  &lt;p&gt;
                  The dialogs follow a standard pattern of acting as a continue/cancel option
                  for a user as well as allowing the user to select the print service to use
                  and specify choices such as paper size and number of copies.
                  &lt;p&gt;
                  &lt;p&gt;
                  The dialogs are designed to work with pluggable print services though the
                  public APIs of those print services.
                  &lt;p&gt;
                  If a print service provides any vendor extensions these may be made
                  accessible to the user through a vendor supplied tab panel Component.
                  Such a vendor extension is encouraged to use Swing! and to support its
                  accessibility APIs.
                  The vendor extensions should return the settings as part of the
                  AttributeSet.
                  Applications which want to preserve the user settings should use those
                  settings to specify the print job.
                  Note that this class is not referenced by any other part of the Java
                  Print Service and may not be included in profiles which cannot depend
                  on the presence of the AWT packages.                
            </javadoc>
            <javadoc line="75">
                Presents a dialog to the user for selecting a print service (printer).
                  It is displayed at the location specified by the application and
                  is modal.
                  If the specification is invalid or would make the dialog not visible it
                  will be displayed at a location determined by the implementation.
                  The dialog blocks its calling thread and is application modal.
                  &lt;p&gt;
                  The dialog may include a tab panel with custom UI lazily obtained from
                  the PrintService&apos;s ServiceUIFactory when the PrintService is browsed.
                  The dialog will attempt to locate a MAIN_UIROLE first as a JComponent,
                  then as a Panel. If there is no ServiceUIFactory or no matching role
                  the custom tab will be empty or not visible.
                  &lt;p&gt;
                  The dialog returns the print service selected by the user if the user
                  OK&apos;s the dialog and null if the user cancels the dialog.
                  &lt;p&gt;
                  An application must pass in an array of print services to browse.
                  The array must be non-null and non-empty.
                  Typically an application will pass in only PrintServices capable
                  of printing a particular document flavor.
                  &lt;p&gt;
                  An application may pass in a PrintService to be initially displayed.
                  A non-null parameter must be included in the array of browsable
                  services.
                  If this parameter is null a service is chosen by the implementation.
                  &lt;p&gt;
                  An application may optionally pass in the flavor to be printed.
                  If this is non-null choices presented to the user can be better
                  validated against those supported by the services.
                  An application must pass in a PrintRequestAttributeSet for returning
                  user choices.
                  On calling the PrintRequestAttributeSet may be empty, or may contain
                  application-specified values.
                  &lt;p&gt;
                  These are used to set the initial settings for the initially
                  displayed print service. Values which are not supported by the print
                  service are ignored. As the user browses print services, attributes
                  and values are copied to the new display. If a user browses a
                  print service which does not support a particular attribute-value, the
                  default for that service is used as the new value to be copied.
                  &lt;p&gt;
                  If the user cancels the dialog, the returned attributes will not reflect
                  any changes made by the user.
                  A typical basic usage of this method may be :
                  &lt;pre&gt;
                  PrintService[] services = PrintServiceLookup.lookupPrintServices(
                  DocFlavor.INPUT_STREAM.JPEG, null);
                  PrintRequestAttributeSet attributes = new HashPrintRequestAttributeSet();
                  if (services.length &gt; 0) {
                  PrintService service =  ServiceUI.printDialog(null, 50, 50,
                  services, services[0],
                  null,
                  attributes);
                  if (service != null) {
                  ... print ...
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;                
                <param>
                    gc used to select screen. null means primary or default screen.                    
                </param>
                <param>
                    x location of dialog including border in screen coordinates                    
                </param>
                <param>
                    y location of dialog including border in screen coordinates                    
                </param>
                <param>
                    services to be browsable, must be non-null.                    
                </param>
                <param>
                    defaultService - initial PrintService to display.                    
                </param>
                <param>
                    flavor - the flavor to be printed, or null.                    
                </param>
                <param>
                    attributes on input is the initial application supplied
                      preferences. This cannot be null but may be empty.
                      On output the attributes reflect changes made by the user.                    
                </param>
                <return>
                    print service selected by the user, or null if the user
                      cancelled the dialog.                    
                </return>
                <throws>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </throws>
                <throws>
                    IllegalArgumentException if services is null or empty,
                      or attributes is null, or the initial PrintService is not in the
                      list of browsable services.                    
                </throws>
            </javadoc>
            <method name="printDialog" type="PrintService" line="161">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="services" type="PrintService[]"/>
                    <param name="defaultService" type="PrintService"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="PrintRequestAttributeSet"/>
                </params>
                <comment line="190">
                    For now we set owner to null. In the future, it may be passed
                     as an argument.                    
                </comment>
                <comment line="216">
                    get union of all GC bounds                    
                </comment>
                <comment line="224">
                    if portion of dialog is not within the gc boundary                    
                </comment>
                <comment line="226">
                    put in the center relative to parent frame/dialog                    
                </comment>
                <declaration name="defaultIndex" type="int" line="162"/>
                <scope line="164"/>
                <scope line="166"/>
                <scope line="169"/>
                <scope line="173">
                    <scope line="174">
                        <scope line="175"/>
                    </scope>
                    <scope line="181"/>
                </scope>
                <scope line="185"/>
                <declaration name="owner" type="Window" line="191"/>
                <declaration name="gcBounds" type="Rectangle" line="193"/>
                <declaration name="dialog" type="ServiceDialog" line="197"/>
                <scope line="198"/>
                <scope line="205"/>
                <declaration name="dlgBounds" type="Rectangle" line="213"/>
                <declaration name="ge" type="GraphicsEnvironment" line="216"/>
                <declaration name="gs" type="GraphicsDevice[]" line="217"/>
                <scope line="218"/>
                <scope line="224"/>
                <scope line="230">
                    <declaration name="newas" type="PrintRequestAttributeSet" line="231"/>
                    <declaration name="dstCategory" type="Class" line="232"/>
                    <declaration name="amCategory" type="Class" line="233"/>
                    <declaration name="fdCategory" type="Class" line="234"/>
                    <scope line="238"/>
                    <scope line="244"/>
                    <declaration name="fd" type="Fidelity" line="250"/>
                    <scope line="251">
                        <scope line="252"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="304">
                Removes any attributes from the given AttributeSet that are
                  unsupported by the given PrintService/DocFlavor combination.                
            </javadoc>
            <method name="removeUnsupportedAttributes" type="void" line="311">
                <params>
                    <param name="ps" type="PrintService"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="aset" type="AttributeSet"/>
                </params>
                <declaration name="asUnsupported" type="AttributeSet" line="312"/>
                <scope line="315">
                    <declaration name="usAttrs" type="Attribute[]" line="316"/>
                    <scope line="318">
                        <declaration name="category" type="Class" line="319"/>
                        <scope line="321">
                            <declaration name="attr" type="Attribute" line="322"/>
                            <scope line="325"/>
                            <scope line="327"/>
                        </scope>
                        <scope line="330"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>