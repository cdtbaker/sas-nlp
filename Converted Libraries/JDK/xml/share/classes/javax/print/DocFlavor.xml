<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <class name="DocFlavor" line="6">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="6">
                Class &lt;code&gt;DocFlavor&lt;/code&gt; encapsulates an object that specifies the
                  format in which print data is supplied to a {@link DocPrintJob}.
                  &quot;Doc&quot; is a short, easy-to-pronounce term that means &quot;a piece of print data.&quot;
                  The print data format, or &quot;doc flavor&quot;, consists of two things:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  &lt;B&gt;MIME type.&lt;/B&gt; This is a Multipurpose Internet Mail Extensions (MIME)
                  media type (as defined in &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2045.txt&quot;&gt;RFC
                  2045&lt;/A&gt; and &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;&gt;RFC 2046&lt;/A&gt;)
                  that specifies how the print data is to be interpreted.
                  The charset of text data should be the IANA MIME-preferred name, or its
                  canonical name if no preferred name is specified. Additionally a few
                  historical names supported by earlier versions of the Java platform may
                  be recognized.
                  See &lt;a href=&quot;../../java/lang/package-summary.html#charenc&quot;&gt;
                  character encodings&lt;/a&gt; for more information on the character encodings
                  supported on the Java platform.
                  &lt;P&gt;
                  &lt;LI&gt;
                  &lt;B&gt;Representation class name.&lt;/B&gt; This specifies the fully-qualified name of
                  the class of the object from which the actual print data comes, as returned
                  by the {@link java.lang.Class#getName() &lt;CODE&gt;Class.getName()&lt;/CODE&gt;} method.
                  (Thus the class name for &lt;CODE&gt;byte[]&lt;/CODE&gt; is &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt;, for
                  &lt;CODE&gt;char[]&lt;/CODE&gt; it is &lt;CODE&gt;&quot;[C&quot;&lt;/CODE&gt;.)
                  &lt;/UL&gt;
                  &lt;P&gt;
                  A &lt;code&gt;DocPrintJob&lt;/code&gt; obtains its print data by means of interface{@link Doc Doc}. A &lt;code&gt;Doc&lt;/code&gt; object lets the &lt;code&gt;DocPrintJob&lt;/code&gt;
                  determine the doc flavor the client can supply.  A &lt;code&gt;Doc&lt;/code&gt; object
                  also lets the &lt;code&gt;DocPrintJob&lt;/code&gt; obtain an instance of the doc flavor&apos;s
                  representation class, from which the &lt;code&gt;DocPrintJob&lt;/code&gt; then obtains
                  the actual print data.
                  &lt;P&gt;
                  &lt;HR&gt;
                  &lt;H3&gt;Client Formatted Print Data&lt;/H3&gt;
                  There are two broad categories of print data, client formatted print data
                  and service formatted print data.
                  &lt;P&gt;
                  For &lt;B&gt;client formatted print data&lt;/B&gt;, the client determines or knows the
                  print data format.
                  For example the client may have a JPEG encoded image, a URL for
                  HTML code, or a disk file containing plain text in some encoding,
                  possibly obtained from an external source, and
                  requires a way to describe the data format to the print service.
                  &lt;p&gt;
                  The doc flavor&apos;s representation class is a conduit for the JPS
                  &lt;code&gt;DocPrintJob&lt;/code&gt; to obtain a sequence of characters or
                  bytes from the client. The
                  doc flavor&apos;s MIME type is one of the standard media types telling how to
                  interpret the sequence of characters or bytes. For a list of standard media
                  types, see the Internet Assigned Numbers Authority&apos;s (IANA&apos;s) &lt;A
                  HREF=&quot;http://www.iana.org/assignments/media-types/&quot;&gt;Media Types
                  Directory&lt;/A&gt;. Interface {@link Doc Doc} provides two utility operations,{@link Doc#getReaderForText() getReaderForText} and{@link Doc#getStreamForBytes() getStreamForBytes()}, to help a
                  &lt;code&gt;Doc&lt;/code&gt; object&apos;s client extract client formatted print data.
                  &lt;P&gt;
                  For client formatted print data, the print data representation class is
                  typically one of the following (although other representation classes are
                  permitted):
                  &lt;UL&gt;
                  &lt;LI&gt;
                  Character array (&lt;CODE&gt;char[]&lt;/CODE&gt;) -- The print data consists of the
                  Unicde characters in the array.
                  &lt;P&gt;
                  &lt;LI&gt;
                  &lt;code&gt;String&lt;/code&gt;  --
                  The print data consists of the Unicode characters in the string.
                  &lt;P&gt;
                  &lt;LI&gt;
                  Character stream ({@link java.io.Reader java.io.Reader})
                  -- The print data consists of the Unicode characters read from the stream
                  up to the end-of-stream.
                  &lt;P&gt;
                  &lt;LI&gt;
                  Byte array (&lt;CODE&gt;byte[]&lt;/CODE&gt;) -- The print data consists of the bytes in
                  the array. The bytes are encoded in the character set specified by the doc
                  flavor&apos;s MIME type. If the MIME type does not specify a character set, the
                  default character set is US-ASCII.
                  &lt;P&gt;
                  &lt;LI&gt;
                  Byte stream ({@link java.io.InputStream java.io.InputStream}) --
                  The print data consists of the bytes read from the stream up to the
                  end-of-stream. The bytes are encoded in the character set specified by the
                  doc flavor&apos;s MIME type. If the MIME type does not specify a character set,
                  the default character set is US-ASCII.
                  &lt;LI&gt;
                  Uniform Resource Locator ({@link java.net.URL URL})
                  -- The print data consists of the bytes read from the URL location.
                  The bytes are encoded in the character set specified by the doc flavor&apos;s
                  MIME type. If the MIME type does not specify a character set, the default
                  character set is US-ASCII.
                  &lt;P&gt;
                  When the representation class is a URL, the print service itself accesses
                  and downloads the document directly from its URL address, without involving
                  the client. The service may be some form of network print service which
                  is executing in a different environment.
                  This means you should not use a URL print data flavor to print a
                  document at a restricted URL that the client can see but the printer cannot
                  see. This also means you should not use a URL print data flavor to print a
                  document stored in a local file that is not available at a URL
                  accessible independently of the client.
                  For example, a file that is not served up by an HTTP server or FTP server.
                  To print such documents, let the client open an input stream on the URL
                  or file and use an input stream data flavor.
                  &lt;/UL&gt;
                  &lt;p&gt;
                  &lt;HR&gt;
                  &lt;h3&gt;Default and Platform Encodings&lt;/h3&gt;
                  &lt;P&gt;
                  For byte print data where the doc flavor&apos;s MIME type does not include a
                  &lt;CODE&gt;charset&lt;/CODE&gt; parameter, the Java Print Service instance assumes the
                  US-ASCII character set by default. This is in accordance with
                  &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;&gt;RFC 2046&lt;/A&gt;, which says the
                  default character set is US-ASCII. Note that US-ASCII is a subset of
                  UTF-8, so in the future this may be widened if a future RFC endorses
                  UTF-8 as the default in a compatible manner.
                  &lt;p&gt;
                  Also note that this is different than the behaviour of the Java runtime
                  when interpreting a stream of bytes as text data. That assumes the
                  default encoding for the user&apos;s locale. Thus, when spooling a file in local
                  encoding to a Java Print Service it is important to correctly specify
                  the encoding. Developers working in the English locales should
                  be particularly conscious of this, as their platform encoding corresponds
                  to the default mime charset. By this coincidence that particular
                  case may work without specifying the encoding of platform data.
                  &lt;p&gt;
                  Every instance of the Java virtual machine has a default character encoding
                  determined during virtual-machine startup and typically depends upon the
                  locale and charset being used by the underlying operating system.
                  In a distributed environment there is no gurantee that two VM&apos;s share
                  the same default encoding. Thus clients which want to stream platform
                  encoded text data from the host platform to a Java Print Service instance
                  must explicitly declare the charset and not rely on defaults.
                  &lt;p&gt;
                  The preferred form is the official IANA primary name for an encoding.
                  Applications which stream text data should always specify the charset
                  in the mime type, which necessitates obtaining the encoding of the host
                  platform for data (eg files) stored in that platform&apos;s encoding.
                  A CharSet which corresponds to this and is suitable for use in a
                  mime-type for a DocFlavor can be obtained
                  from {@link DocFlavor#hostEncoding &lt;CODE&gt;DocFlavor.hostEncoding&lt;/CODE&gt;}This may not always be the primary IANA name but is guaranteed to be
                  understood by this VM.
                  For common flavors, the pre-defined HOST DocFlavors may be used.
                  &lt;p&gt;
                  &lt;p&gt;
                  See &lt;a href=&quot;../../java/lang/package-summary.html#charenc&quot;&gt;
                  character encodings&lt;/a&gt; for more information on the character encodings
                  supported on the Java platform.
                  &lt;p&gt;
                  &lt;HR&gt;
                  &lt;h3&gt;Recommended DocFlavors&lt;/h3&gt;
                  &lt;P&gt;
                  The Java Print Service API does not define any mandatorily supported
                  DocFlavors.
                  However, here are some examples of MIME types that a Java Print Service
                  instance might support for client formatted print data.
                  Nested classes inside class DocFlavor declare predefined static
                  constant DocFlavor objects for these example doc flavors; class DocFlavor&apos;s
                  constructor can be used to create an arbitrary doc flavor.
                  &lt;UL&gt;
                  &lt;LI&gt;Preformatted text
                  &lt;P&gt;
                  &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;&gt;
                  &lt;TR&gt;
                  &lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;text/plain&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Plain text in the default character set (US-ASCII)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;text/plain; charset=&lt;I&gt;xxx&lt;/I&gt;&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Plain text in character set &lt;I&gt;xxx&lt;/I&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;text/html&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;HyperText Markup Language in the default character set (US-ASCII)&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;text/html; charset=&lt;I&gt;xxx&lt;/I&gt;&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;HyperText Markup Language in character set &lt;I&gt;xxx&lt;/I&gt;&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  In general, preformatted text print data is provided either in a character
                  oriented representation class (character array, String, Reader) or in a
                  byte oriented representation class (byte array, InputStream, URL).
                  &lt;P&gt;
                  &lt;LI&gt;Preformatted page description language (PDL) documents
                  &lt;P&gt;
                  &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;&gt;
                  &lt;TR&gt;
                  &lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;application/pdf&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Portable Document Format document&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;application/postscript&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;PostScript document&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;application/vnd.hp-PCL&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Printer Control Language document&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  In general, preformatted PDL print data is provided in a byte oriented
                  representation class (byte array, InputStream, URL).
                  &lt;P&gt;
                  &lt;LI&gt;Preformatted images
                  &lt;P&gt;
                  &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;&gt;
                  &lt;TR&gt;
                  &lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;image/gif&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Graphics Interchange Format image&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;image/jpeg&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Joint Photographic Experts Group image&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;image/png&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;Portable Network Graphics image&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  In general, preformatted image print data is provided in a byte oriented
                  representation class (byte array, InputStream, URL).
                  &lt;P&gt;
                  &lt;LI&gt;Preformatted autosense print data
                  &lt;P&gt;
                  &lt;TABLE BORDER=1 CELLPADDING=0 CELLSPACING=0 SUMMARY=&quot;MIME-Types and their descriptions&quot;&gt;
                  &lt;TR&gt;
                  &lt;TH&gt;MIME-Type&lt;/TH&gt;&lt;TH&gt;Description&lt;/TH&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;&lt;CODE&gt;&quot;application/octet-stream&quot;&lt;/CODE&gt;&lt;/TD&gt;
                  &lt;TD&gt;The print data format is unspecified (just an octet stream)&lt;/TD&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  The printer decides how to interpret the print data; the way this
                  &quot;autosensing&quot; works is implementation dependent. In general, preformatted
                  autosense print data is provided in a byte oriented representation class
                  (byte array, InputStream, URL).
                  &lt;P&gt;
                  &lt;HR&gt;
                  &lt;H3&gt;Service Formatted Print Data&lt;/H3&gt;
                  &lt;P&gt;
                  For &lt;B&gt;service formatted print data&lt;/B&gt;, the Java Print Service instance
                  determines the print data format. The doc flavor&apos;s representation class
                  denotes an interface whose methods the &lt;code&gt;DocPrintJob&lt;/code&gt; invokes to
                  determine the content to be printed -- such as a renderable image
                  interface or a Java printable interface.
                  The doc flavor&apos;s MIME type is the special value
                  &lt;CODE&gt;&quot;application/x-java-jvm-local-objectref&quot;&lt;/CODE&gt; indicating the client
                  will supply a reference to a Java object that implements the interface
                  named as the representation class.
                  This MIME type is just a placeholder; what&apos;s
                  important is the print data representation class.
                  &lt;P&gt;
                  For service formatted print data, the print data representation class is
                  typically one of the following (although other representation classes are
                  permitted). Nested classes inside class DocFlavor declare predefined static
                  constant DocFlavor objects for these example doc flavors; class DocFlavor&apos;s
                  constructor can be used to create an arbitrary doc flavor.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  Renderable image object -- The client supplies an object that implements
                  interface{@link java.awt.image.renderable.RenderableImage RenderableImage}. The
                  printer calls methods
                  in that interface to obtain the image to be printed.
                  &lt;P&gt;
                  &lt;LI&gt;
                  Printable object -- The client supplies an object that implements interface{@link java.awt.print.Printable Printable}.
                  The printer calls methods in that interface to obtain the pages to be
                  printed, one by one.
                  For each page, the printer supplies a graphics context, and whatever the
                  client draws in that graphics context gets printed.
                  &lt;P&gt;
                  &lt;LI&gt;
                  Pageable object -- The client supplies an object that implements interface{@link java.awt.print.Pageable Pageable}. The printer calls
                  methods in that interface to obtain the pages to be printed, one by one.
                  For each page, the printer supplies a graphics context, and whatever
                  the client draws in that graphics context gets printed.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;HR&gt;
                  &lt;P&gt;
                  &lt;HR&gt;
                  &lt;H3&gt;Pre-defined Doc Flavors&lt;/H3&gt;
                  A Java Print Service instance is not &lt;B&gt;&lt;I&gt;required&lt;/I&gt;&lt;/B&gt; to support the
                  following print data formats and print data representation classes.  In
                  fact, a developer using this class should &lt;b&gt;never&lt;/b&gt; assume that a
                  particular print service supports the document types corresponding to
                  these pre-defined doc flavors.  Always query the print service
                  to determine what doc flavors it supports.  However,
                  developers who have print services that support these doc flavors are
                  encouraged to refer to the predefined singleton instances created here.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  Plain text print data provided through a byte stream. Specifically, the
                  following doc flavors are recommended to be supported:
                  &lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
                  &lt;CODE&gt;(&quot;text/plain&quot;, &quot;java.io.InputStream&quot;)&lt;/CODE&gt;
                  &lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
                  &lt;CODE&gt;(&quot;text/plain; charset=us-ascii&quot;, &quot;java.io.InputStream&quot;)&lt;/CODE&gt;
                  &lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
                  &lt;CODE&gt;(&quot;text/plain; charset=utf-8&quot;, &quot;java.io.InputStream&quot;)&lt;/CODE&gt;
                  &lt;P&gt;
                  &lt;LI&gt;
                  Renderable image objects. Specifically, the following doc flavor is
                  recommended to be supported:
                  &lt;BR&gt;&amp;#183;&amp;nbsp;&amp;nbsp;
                  &lt;CODE&gt;(&quot;application/x-java-jvm-local-objectref&quot;, &quot;java.awt.image.renderable.RenderableImage&quot;)&lt;/CODE&gt;
                  &lt;/UL&gt;
                  &lt;P&gt;
                  A Java Print Service instance is allowed to support any other doc flavors
                  (or none) in addition to the above mandatory ones, at the implementation&apos;s
                  choice.
                  &lt;P&gt;
                  Support for the above doc flavors is desirable so a printing client can rely
                  on being able to print on any JPS printer, regardless of which doc flavors
                  the printer supports. If the printer doesn&apos;t support the client&apos;s preferred
                  doc flavor, the client can at least print plain text, or the client can
                  convert its data to a renderable image and print the image.
                  &lt;P&gt;
                  Furthermore, every Java Print Service instance must fulfill these
                  requirements for processing plain text print data:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  The character pair carriage return-line feed (CR-LF) means
                  &quot;go to column 1 of the next line.&quot;
                  &lt;LI&gt;
                  A carriage return (CR) character standing by itself means
                  &quot;go to column 1 of the next line.&quot;
                  &lt;LI&gt;
                  A line feed (LF) character standing by itself means
                  &quot;go to column 1 of the next line.&quot;
                  &lt;LI&gt;
                  &lt;/UL&gt;
                  &lt;P&gt;
                  The client must itself perform all plain text print data formatting not
                  addressed by the above requirements.
                  &lt;P&gt;
                  &lt;H3&gt;Design Rationale&lt;/H3&gt;
                  &lt;P&gt;
                  Class DocFlavor in package javax.print.data is similar to class{@link java.awt.datatransfer.DataFlavor DataFlavor}. Class
                  &lt;code&gt;DataFlavor&lt;/code&gt;
                  is not used in the Java Print Service (JPS) API
                  for three reasons which are all rooted in allowing the JPS API to be
                  shared by other print services APIs which may need to run on Java profiles
                  which do not include all of the Java Platform, Standard Edition.
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  The JPS API is designed to be used in Java profiles which do not support
                  AWT.
                  &lt;P&gt;
                  &lt;LI&gt;
                  The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt;
                  does not guarantee that equivalent data flavors will have the same
                  serialized representation. DocFlavor does, and can be used in services
                  which need this.
                  &lt;P&gt;
                  &lt;LI&gt;
                  The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt;
                  includes a human presentable name as part of the serialized representation.
                  This is not appropriate as part of a service matching constraint.
                  &lt;/OL&gt;
                  &lt;P&gt;
                  Class DocFlavor&apos;s serialized representation uses the following
                  canonical form of a MIME type string. Thus, two doc flavors with MIME types
                  that are not identical but that are equivalent (that have the same
                  canonical form) may be considered equal.
                  &lt;UL&gt;
                  &lt;LI&gt; The media type, media subtype, and parameters are retained, but all
                  comments and whitespace characters are discarded.
                  &lt;LI&gt; The media type, media subtype, and parameter names are converted to
                  lowercase.
                  &lt;LI&gt; The parameter values retain their original case, except a charset
                  parameter value for a text media type is converted to lowercase.
                  &lt;LI&gt; Quote characters surrounding parameter values are removed.
                  &lt;LI&gt; Quoting backslash characters inside parameter values are removed.
                  &lt;LI&gt; The parameters are arranged in ascending order of parameter name.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  Class DocFlavor&apos;s serialized representation also contains the
                  fully-qualified class &lt;I&gt;name&lt;/I&gt; of the representation class
                  (a String object), rather than the representation class itself
                  (a Class object). This allows a client to examine the doc flavors a
                  Java Print Service instance supports without having
                  to load the representation classes, which may be problematic for
                  limited-resource clients.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="406"/>
            <declaration name="hostEncoding" type="String" line="407"/>
            <javadoc line="407">
                A String representing the host operating system encoding.
                  This will follow the conventions documented in
                  &lt;a href=&quot;http://www.ietf.org/rfc/rfc2278.txt&quot;&gt;
                  &lt;i&gt;RFC&amp;nbsp;2278:&amp;nbsp;IANA Charset Registration Procedures&lt;/i&gt;&lt;/a&gt;
                  except where historical names are returned for compatibility with
                  previous versions of the Java platform.
                  The value returned from method is valid only for the VM which
                  returns it, for use in a DocFlavor.
                  This is the charset for all the &quot;HOST&quot; pre-defined DocFlavors in
                  the executing VM.                
            </javadoc>
            <scope line="420"/>
            <declaration name="myMimeType" type="MimeType" line="423"/>
            <javadoc line="423">
                MIME type.                
            </javadoc>
            <declaration name="myClassName" type="String" line="427"/>
            <javadoc line="427">
                Representation class name.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="myStringValue" type="String" line="432"/>
            <javadoc line="432">
                String value for this doc flavor. Computed when needed and cached.                
            </javadoc>
            <javadoc line="436">
                Constructs a new doc flavor object from the given MIME type and
                  representation class name. The given MIME type is converted into
                  canonical form and stored internally.                
                <param>
                    mimeType   MIME media type string.                    
                </param>
                <param>
                    className  Fully-qualified representation class name.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null or
                      &lt;CODE&gt;className&lt;/CODE&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                      obey the syntax for a MIME media type string.                    
                </exception>
            </javadoc>
            <method name="DocFlavor" type="constructor" line="447">
                <params>
                    <param name="mimeType" type="String"/>
                    <param name="className" type="String"/>
                </params>
                <scope line="448"/>
            </method>
            <javadoc line="454">
                Returns this doc flavor object&apos;s MIME type string based on the
                  canonical form. Each parameter value is enclosed in quotes.                
                <return>
                    the mime type                    
                </return>
            </javadoc>
            <method name="getMimeType" type="String" line="459"/>
            <javadoc line="462">
                Returns this doc flavor object&apos;s media type (from the MIME type).                
                <return>
                    the media type                    
                </return>
            </javadoc>
            <method name="getMediaType" type="String" line="466"/>
            <javadoc line="469">
                Returns this doc flavor object&apos;s media subtype (from the MIME type).                
                <return>
                    the media sub-type                    
                </return>
            </javadoc>
            <method name="getMediaSubtype" type="String" line="473"/>
            <javadoc line="476">
                Returns a &lt;code&gt;String&lt;/code&gt; representing a MIME
                  parameter.
                  Mime types may include parameters which are usually optional.
                  The charset for text types is a commonly useful example.
                  This convenience method will return the value of the specified
                  parameter if one was specified in the mime type for this flavor.
                  &lt;p&gt;                
                <param>
                    paramName the name of the paramater. This name is internally
                      converted to the canonical lower case format before performing
                      the match.                    
                </param>
                <return>
                    String representing a mime parameter, or
                      null if that parameter is not in the mime type string.                    
                </return>
                <exception>
                    throws NullPointerException if paramName is null.                    
                </exception>
            </javadoc>
            <method name="getParameter" type="String" line="491">
                <params>
                    <param name="paramName" type="String"/>
                </params>
            </method>
            <javadoc line="494">
                Returns the name of this doc flavor object&apos;s representation class.                
                <return>
                    the name of the representation class.                    
                </return>
            </javadoc>
            <method name="getRepresentationClassName" type="String" line="498"/>
            <javadoc line="501">
                Converts this &lt;code&gt;DocFlavor&lt;/code&gt; to a string.                
                <return>
                    MIME type string based on the canonical form. Each parameter
                      value is enclosed in quotes.
                      A &quot;class=&quot; parameter is appended to the
                      MIME type string to indicate the representation class name.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="508"/>
            <javadoc line="511">
                Returns a hash code for this doc flavor object.                
            </javadoc>
            <method name="hashCode" type="int" line="514"/>
            <javadoc line="517">
                Determines if this doc flavor object is equal to the given object.
                  The two are equal if the given object is not null, is an instance
                  of &lt;code&gt;DocFlavor&lt;/code&gt;, has a MIME type equivalent to this doc
                  flavor object&apos;s MIME type (that is, the MIME types have the same media
                  type, media subtype, and parameters), and has the same representation
                  class name as this doc flavor object. Thus, if two doc flavor objects&apos;
                  MIME types are the same except for comments, they are considered equal.
                  However, two doc flavor objects with MIME types of &quot;text/plain&quot; and
                  &quot;text/plain; charset=US-ASCII&quot; are not considered equal, even though
                  they represent the same media type (because the default character
                  set for plain text is US-ASCII).                
                <param>
                    obj  Object to test.                    
                </param>
                <return>
                    True if this doc flavor object equals &lt;CODE&gt;obj&lt;/CODE&gt;, false
                      otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="533">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="536">
                Returns this doc flavor object&apos;s string value.                
            </javadoc>
            <method name="getStringValue" type="String" line="539">
                <scope line="540"/>
            </method>
            <javadoc line="545">
                Write the instance to a stream (ie serialize the object).                
            </javadoc>
            <method name="writeObject" type="void" line="548">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <javadoc line="552">
                Reconstitute an instance from a stream (that is, deserialize it).                
                <serialDataThe>
                    serialised form of a DocFlavor is the String naming the
                      representation class followed by the String representing the canonical
                      form of the mime type.                    
                </serialDataThe>
            </javadoc>
            <method name="readObject" type="void" line="558">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
            </method>
            <class name="BYTE_ARRAY" line="562">
                <extends class="DocFlavor"/>
                <javadoc line="562">
                    Class DocFlavor.BYTE_ARRAY provides predefined static constant
                      DocFlavor objects for example doc flavors using a byte array
                      (&lt;CODE&gt;byte[]&lt;/CODE&gt;) as the print data representation class.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="570"/>
                <javadoc line="571">
                    Constructs a new doc flavor with the given MIME type and a print
                      data representation class name of &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                    <param>
                        mimeType   MIME media type string.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null.                        
                    </exception>
                    <exception>
                        IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                          obey the syntax for a MIME media type string.                        
                    </exception>
                </javadoc>
                <method name="BYTE_ARRAY" type="constructor" line="579">
                    <params>
                        <param name="mimeType" type="String"/>
                    </params>
                </method>
                <declaration name="TEXT_PLAIN_HOST" type="BYTE_ARRAY" line="582"/>
                <javadoc line="582">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/plain&quot;&lt;/CODE&gt;,
                      encoded in the host platform encoding.
                      See {@link DocFlavor#hostEncoding &lt;CODE&gt;hostEncoding&lt;/CODE&gt;}Print data representation class name =
                      &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_8" type="BYTE_ARRAY" line="589"/>
                <javadoc line="589">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-8&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16" type="BYTE_ARRAY" line="596"/>
                <javadoc line="596">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16BE" type="BYTE_ARRAY" line="603"/>
                <javadoc line="603">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16be&quot;&lt;/CODE&gt;
                      (big-endian byte ordering),
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16LE" type="BYTE_ARRAY" line="611"/>
                <javadoc line="611">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16le&quot;&lt;/CODE&gt;
                      (little-endian byte ordering),
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_US_ASCII" type="BYTE_ARRAY" line="619"/>
                <javadoc line="619">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=us-ascii&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="TEXT_HTML_HOST" type="BYTE_ARRAY" line="626"/>
                <javadoc line="626">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/html&quot;&lt;/CODE&gt;,
                      encoded in the host platform encoding.
                      See {@link DocFlavor#hostEncoding &lt;CODE&gt;hostEncoding&lt;/CODE&gt;}Print data representation class name =
                      &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_8" type="BYTE_ARRAY" line="633"/>
                <javadoc line="633">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-8&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16" type="BYTE_ARRAY" line="640"/>
                <javadoc line="640">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16BE" type="BYTE_ARRAY" line="647"/>
                <javadoc line="647">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16be&quot;&lt;/CODE&gt;
                      (big-endian byte ordering),
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16LE" type="BYTE_ARRAY" line="655"/>
                <javadoc line="655">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16le&quot;&lt;/CODE&gt;
                      (little-endian byte ordering),
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="TEXT_HTML_US_ASCII" type="BYTE_ARRAY" line="663"/>
                <javadoc line="663">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=us-ascii&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="PDF" type="BYTE_ARRAY" line="670"/>
                <javadoc line="670">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/pdf&quot;&lt;/CODE&gt;, print
                      data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="POSTSCRIPT" type="BYTE_ARRAY" line="675"/>
                <javadoc line="675">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/postscript&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="PCL" type="BYTE_ARRAY" line="681"/>
                <javadoc line="681">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/vnd.hp-PCL&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array).                    
                </javadoc>
                <declaration name="GIF" type="BYTE_ARRAY" line="687"/>
                <javadoc line="687">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/gif&quot;&lt;/CODE&gt;, print data
                      representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="JPEG" type="BYTE_ARRAY" line="692"/>
                <javadoc line="692">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/jpeg&quot;&lt;/CODE&gt;, print data
                      representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="PNG" type="BYTE_ARRAY" line="697"/>
                <javadoc line="697">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/png&quot;&lt;/CODE&gt;, print data
                      representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte array).                    
                </javadoc>
                <declaration name="AUTOSENSE" type="BYTE_ARRAY" line="702"/>
                <javadoc line="702">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;application/octet-stream&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;[B&quot;&lt;/CODE&gt; (byte
                      array). The client must determine that data described
                      using this DocFlavor is valid for the printer.                    
                </javadoc>
            </class>
            <class name="INPUT_STREAM" line="711">
                <extends class="DocFlavor"/>
                <javadoc line="711">
                    Class DocFlavor.INPUT_STREAM provides predefined static constant
                      DocFlavor objects for example doc flavors using a byte stream ({@link java.io.InputStream &lt;CODE&gt;java.io.InputStream&lt;/CODE&gt;}) as the print
                      data representation class.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="719"/>
                <javadoc line="720">
                    Constructs a new doc flavor with the given MIME type and a print
                      data representation class name of
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                    <param>
                        mimeType   MIME media type string.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null.                        
                    </exception>
                    <exception>
                        IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                          obey the syntax for a MIME media type string.                        
                    </exception>
                </javadoc>
                <method name="INPUT_STREAM" type="constructor" line="729">
                    <params>
                        <param name="mimeType" type="String"/>
                    </params>
                </method>
                <declaration name="TEXT_PLAIN_HOST" type="INPUT_STREAM" line="732"/>
                <javadoc line="732">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/plain&quot;&lt;/CODE&gt;,
                      encoded in the host platform encoding.
                      See {@link DocFlavor#hostEncoding &lt;CODE&gt;hostEncoding&lt;/CODE&gt;}Print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_8" type="INPUT_STREAM" line="739"/>
                <javadoc line="739">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-8&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16" type="INPUT_STREAM" line="746"/>
                <javadoc line="746">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16BE" type="INPUT_STREAM" line="753"/>
                <javadoc line="753">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16be&quot;&lt;/CODE&gt;
                      (big-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16LE" type="INPUT_STREAM" line="761"/>
                <javadoc line="761">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16le&quot;&lt;/CODE&gt;
                      (little-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_US_ASCII" type="INPUT_STREAM" line="769"/>
                <javadoc line="769">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=us-ascii&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_HOST" type="INPUT_STREAM" line="776"/>
                <javadoc line="776">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/html&quot;&lt;/CODE&gt;,
                      encoded in the host platform encoding.
                      See {@link DocFlavor#hostEncoding &lt;CODE&gt;hostEncoding&lt;/CODE&gt;}Print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_8" type="INPUT_STREAM" line="783"/>
                <javadoc line="783">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-8&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16" type="INPUT_STREAM" line="790"/>
                <javadoc line="790">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16BE" type="INPUT_STREAM" line="797"/>
                <javadoc line="797">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16be&quot;&lt;/CODE&gt;
                      (big-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16LE" type="INPUT_STREAM" line="805"/>
                <javadoc line="805">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16le&quot;&lt;/CODE&gt;
                      (little-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_US_ASCII" type="INPUT_STREAM" line="813"/>
                <javadoc line="813">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=us-ascii&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="PDF" type="INPUT_STREAM" line="820"/>
                <javadoc line="820">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/pdf&quot;&lt;/CODE&gt;, print
                      data representation class name = &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt;
                      (byte stream).                    
                </javadoc>
                <declaration name="POSTSCRIPT" type="INPUT_STREAM" line="826"/>
                <javadoc line="826">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/postscript&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="PCL" type="INPUT_STREAM" line="832"/>
                <javadoc line="832">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/vnd.hp-PCL&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="GIF" type="INPUT_STREAM" line="838"/>
                <javadoc line="838">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/gif&quot;&lt;/CODE&gt;, print data
                      representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="JPEG" type="INPUT_STREAM" line="844"/>
                <javadoc line="844">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/jpeg&quot;&lt;/CODE&gt;, print data
                      representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="PNG" type="INPUT_STREAM" line="850"/>
                <javadoc line="850">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/png&quot;&lt;/CODE&gt;, print data
                      representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="AUTOSENSE" type="INPUT_STREAM" line="856"/>
                <javadoc line="856">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;application/octet-stream&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.io.InputStream&quot;&lt;/CODE&gt; (byte stream).
                      The client must determine that data described
                      using this DocFlavor is valid for the printer.                    
                </javadoc>
            </class>
            <class name="URL" line="866">
                <extends class="DocFlavor"/>
                <javadoc line="866">
                    Class DocFlavor.URL provides predefined static constant DocFlavor
                      objects.
                      For example doc flavors using a Uniform Resource Locator ({@link java.net.URL &lt;CODE&gt;java.net.URL&lt;/CODE&gt;}) as the print data
                      representation  class.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <javadoc line="875">
                    Constructs a new doc flavor with the given MIME type and a print
                      data representation class name of &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                    <param>
                        mimeType   MIME media type string.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null.                        
                    </exception>
                    <exception>
                        IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                          obey the syntax for a MIME media type string.                        
                    </exception>
                </javadoc>
                <method name="URL" type="constructor" line="883">
                    <params>
                        <param name="mimeType" type="String"/>
                    </params>
                </method>
                <declaration name="TEXT_PLAIN_HOST" type="URL" line="886"/>
                <javadoc line="886">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/plain&quot;&lt;/CODE&gt;,
                      encoded in the host platform encoding.
                      See {@link DocFlavor#hostEncoding &lt;CODE&gt;hostEncoding&lt;/CODE&gt;}Print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_8" type="URL" line="893"/>
                <javadoc line="893">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-8&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16" type="URL" line="900"/>
                <javadoc line="900">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;java.net.URL&quot;&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16BE" type="URL" line="907"/>
                <javadoc line="907">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16be&quot;&lt;/CODE&gt;
                      (big-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_UTF_16LE" type="URL" line="915"/>
                <javadoc line="915">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=utf-16le&quot;&lt;/CODE&gt;
                      (little-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_PLAIN_US_ASCII" type="URL" line="923"/>
                <javadoc line="923">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/plain; charset=us-ascii&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_HOST" type="URL" line="930"/>
                <javadoc line="930">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/html&quot;&lt;/CODE&gt;,
                      encoded in the host platform encoding.
                      See {@link DocFlavor#hostEncoding &lt;CODE&gt;hostEncoding&lt;/CODE&gt;}Print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_8" type="URL" line="937"/>
                <javadoc line="937">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-8&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16" type="URL" line="944"/>
                <javadoc line="944">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16BE" type="URL" line="951"/>
                <javadoc line="951">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16be&quot;&lt;/CODE&gt;
                      (big-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_UTF_16LE" type="URL" line="959"/>
                <javadoc line="959">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=utf-16le&quot;&lt;/CODE&gt;
                      (little-endian byte ordering),
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="TEXT_HTML_US_ASCII" type="URL" line="967"/>
                <javadoc line="967">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;text/html; charset=us-ascii&quot;&lt;/CODE&gt;,
                      print data representation class name =
                      &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt; (byte stream).                    
                </javadoc>
                <declaration name="PDF" type="URL" line="974"/>
                <javadoc line="974">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/pdf&quot;&lt;/CODE&gt;, print
                      data representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="POSTSCRIPT" type="URL" line="979"/>
                <javadoc line="979">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/postscript&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="PCL" type="URL" line="984"/>
                <javadoc line="984">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;application/vnd.hp-PCL&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="GIF" type="URL" line="989"/>
                <javadoc line="989">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/gif&quot;&lt;/CODE&gt;, print data
                      representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="JPEG" type="URL" line="994"/>
                <javadoc line="994">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/jpeg&quot;&lt;/CODE&gt;, print data
                      representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="PNG" type="URL" line="999"/>
                <javadoc line="999">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;image/png&quot;&lt;/CODE&gt;, print data
                      representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="AUTOSENSE" type="URL" line="1004"/>
                <javadoc line="1004">
                    Doc flavor with MIME type =
                      &lt;CODE&gt;&quot;application/octet-stream&quot;&lt;/CODE&gt;,
                      print data representation class name = &lt;CODE&gt;&quot;java.net.URL&quot;&lt;/CODE&gt;.
                      The client must determine that data described
                      using this DocFlavor is valid for the printer.                    
                </javadoc>
            </class>
            <class name="CHAR_ARRAY" line="1013">
                <extends class="DocFlavor"/>
                <javadoc line="1013">
                    Class DocFlavor.CHAR_ARRAY provides predefined static constant
                      DocFlavor objects for example doc flavors using a character array
                      (&lt;CODE&gt;char[]&lt;/CODE&gt;) as the print data representation class. As such,
                      the character set is Unicode.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1022"/>
                <javadoc line="1023">
                    Constructs a new doc flavor with the given MIME type and a print
                      data representation class name of
                      &lt;CODE&gt;&quot;[C&quot;&lt;/CODE&gt; (character array).                    
                    <param>
                        mimeType  MIME media type string. If it is a text media
                          type, it is assumed to contain a
                          &lt;CODE&gt;&quot;charset=utf-16&quot;&lt;/CODE&gt; parameter.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null.                        
                    </exception>
                    <exception>
                        IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                          obey the syntax for a MIME media type string.                        
                    </exception>
                </javadoc>
                <method name="CHAR_ARRAY" type="constructor" line="1034">
                    <params>
                        <param name="mimeType" type="String"/>
                    </params>
                </method>
                <declaration name="TEXT_PLAIN" type="CHAR_ARRAY" line="1037"/>
                <javadoc line="1037">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/plain;
                      charset=utf-16&quot;&lt;/CODE&gt;, print data representation class name =
                      &lt;CODE&gt;&quot;[C&quot;&lt;/CODE&gt; (character array).                    
                </javadoc>
                <declaration name="TEXT_HTML" type="CHAR_ARRAY" line="1043"/>
                <javadoc line="1043">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/html;
                      charset=utf-16&quot;&lt;/CODE&gt;, print data representation class name =
                      &lt;CODE&gt;&quot;[C&quot;&lt;/CODE&gt; (character array).                    
                </javadoc>
            </class>
            <class name="STRING" line="1050">
                <extends class="DocFlavor"/>
                <javadoc line="1050">
                    Class DocFlavor.STRING provides predefined static constant DocFlavor
                      objects for example doc flavors using a string ({@link java.lang.String&lt;CODE&gt;java.lang.String&lt;/CODE&gt;}) as the print data representation class.
                      As such, the character set is Unicode.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1058"/>
                <javadoc line="1059">
                    Constructs a new doc flavor with the given MIME type and a print
                      data representation class name of &lt;CODE&gt;&quot;java.lang.String&quot;&lt;/CODE&gt;.                    
                    <param>
                        mimeType  MIME media type string. If it is a text media
                          type, it is assumed to contain a
                          &lt;CODE&gt;&quot;charset=utf-16&quot;&lt;/CODE&gt; parameter.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null.                        
                    </exception>
                    <exception>
                        IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                          obey the syntax for a MIME media type string.                        
                    </exception>
                </javadoc>
                <method name="STRING" type="constructor" line="1069">
                    <params>
                        <param name="mimeType" type="String"/>
                    </params>
                </method>
                <declaration name="TEXT_PLAIN" type="STRING" line="1072"/>
                <javadoc line="1072">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/plain;
                      charset=utf-16&quot;&lt;/CODE&gt;, print data representation class name =
                      &lt;CODE&gt;&quot;java.lang.String&quot;&lt;/CODE&gt;.                    
                </javadoc>
                <declaration name="TEXT_HTML" type="STRING" line="1078"/>
                <javadoc line="1078">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/html;
                      charset=utf-16&quot;&lt;/CODE&gt;, print data representation class name =
                      &lt;CODE&gt;&quot;java.lang.String&quot;&lt;/CODE&gt;.                    
                </javadoc>
            </class>
            <class name="READER" line="1085">
                <extends class="DocFlavor"/>
                <javadoc line="1085">
                    Class DocFlavor.READER provides predefined static constant DocFlavor
                      objects for example doc flavors using a character stream ({@link java.io.Reader &lt;CODE&gt;java.io.Reader&lt;/CODE&gt;}) as the print data
                      representation class. As such, the character set is Unicode.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1093"/>
                <javadoc line="1094">
                    Constructs a new doc flavor with the given MIME type and a print
                      data representation class name of\
                      &lt;CODE&gt;&quot;java.io.Reader&quot;&lt;/CODE&gt; (character stream).                    
                    <param>
                        mimeType  MIME media type string. If it is a text media
                          type, it is assumed to contain a
                          &lt;CODE&gt;&quot;charset=utf-16&quot;&lt;/CODE&gt; parameter.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; is null.                        
                    </exception>
                    <exception>
                        IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;mimeType&lt;/CODE&gt; does not
                          obey the syntax for a MIME media type string.                        
                    </exception>
                </javadoc>
                <method name="READER" type="constructor" line="1105">
                    <params>
                        <param name="mimeType" type="String"/>
                    </params>
                </method>
                <declaration name="TEXT_PLAIN" type="READER" line="1108"/>
                <javadoc line="1108">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/plain;
                      charset=utf-16&quot;&lt;/CODE&gt;, print data representation class name =
                      &lt;CODE&gt;&quot;java.io.Reader&quot;&lt;/CODE&gt; (character stream).                    
                </javadoc>
                <declaration name="TEXT_HTML" type="READER" line="1114"/>
                <javadoc line="1114">
                    Doc flavor with MIME type = &lt;CODE&gt;&quot;text/html;
                      charset=utf-16&quot;&lt;/CODE&gt;, print data representation class name =
                      &lt;CODE&gt;&quot;java.io.Reader&quot;&lt;/CODE&gt; (character stream).                    
                </javadoc>
            </class>
            <class name="SERVICE_FORMATTED" line="1121">
                <extends class="DocFlavor"/>
                <javadoc line="1121">
                    Class DocFlavor.SERVICE_FORMATTED provides predefined static constant
                      DocFlavor objects for example doc flavors for service formatted print
                      data.
                      &lt;P&gt;                    
                    <author>
                        Alan Kaminsky                        
                    </author>
                </javadoc>
                <declaration name="serialVersionUID" type="long" line="1129"/>
                <javadoc line="1130">
                    Constructs a new doc flavor with a MIME type of
                      &lt;CODE&gt;&quot;application/x-java-jvm-local-objectref&quot;&lt;/CODE&gt; indicating
                      service formatted print data and the given print data
                      representation class name.                    
                    <param>
                        className  Fully-qualified representation class name.                        
                    </param>
                    <exception>
                        NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;className&lt;/CODE&gt; is
                          null.                        
                    </exception>
                </javadoc>
                <method name="SERVICE_FORMATTED" type="constructor" line="1139">
                    <params>
                        <param name="className" type="String"/>
                    </params>
                </method>
                <declaration name="RENDERABLE_IMAGE" type="SERVICE_FORMATTED" line="1142"/>
                <javadoc line="1142">
                    Service formatted print data doc flavor with print data
                      representation class name =
                      &lt;CODE&gt;&quot;java.awt.image.renderable.RenderableImage&quot;&lt;/CODE&gt;
                      (renderable image object).                    
                </javadoc>
                <declaration name="PRINTABLE" type="SERVICE_FORMATTED" line="1149"/>
                <javadoc line="1149">
                    Service formatted print data doc flavor with print data
                      representation class name = &lt;CODE&gt;&quot;java.awt.print.Printable&quot;&lt;/CODE&gt;
                      (printable object).                    
                </javadoc>
                <declaration name="PAGEABLE" type="SERVICE_FORMATTED" line="1155"/>
                <javadoc line="1155">
                    Service formatted print data doc flavor with print data
                      representation class name = &lt;CODE&gt;&quot;java.awt.print.Pageable&quot;&lt;/CODE&gt;
                      (pageable object).                    
                </javadoc>
            </class>
        </class>
    </source>