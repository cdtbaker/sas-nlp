<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.event">
        <import package="javax.print.DocPrintJob"/>
        <class name="PrintJobEvent" line="3">
            <extends class="PrintEvent"/>
            <javadoc line="3">
                Class &lt;code&gt;PrintJobEvent&lt;/code&gt; encapsulates common events a print job
                  reports to let a listener know of progress in the processing of the{@link DocPrintJob}.                
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="8"/>
            <declaration name="reason" type="int" line="9"/>
            <declaration name="JOB_CANCELED" type="int" line="10"/>
            <javadoc line="10">
                The job was canceled by the {@link javax.print.PrintService PrintService}.                
            </javadoc>
            <declaration name="JOB_COMPLETE" type="int" line="14"/>
            <javadoc line="14">
                The document cis completely printed.                
            </javadoc>
            <declaration name="JOB_FAILED" type="int" line="18"/>
            <javadoc line="18">
                The print service reports that the job cannot be completed.
                  The application must resubmit the job.                
            </javadoc>
            <declaration name="REQUIRES_ATTENTION" type="int" line="23"/>
            <javadoc line="23">
                The print service indicates that a - possibly transient - problem
                  may require external intervention before the print service can
                  continue.  One example of an event that can
                  generate this message is when the printer runs out of paper.                
            </javadoc>
            <declaration name="NO_MORE_EVENTS" type="int" line="30"/>
            <javadoc line="30">
                Not all print services may be capable of delivering interesting
                  events, or even telling when a job is complete. This message indicates
                  the print job has no further information or communication
                  with the print service. This message should always be delivered
                  if a terminal event (completed/failed/canceled) is not delivered.
                  For example, if messages such as JOB_COMPLETE have NOT been received
                  before receiving this message, the only inference that should be drawn
                  is that the print service does not support delivering such an event.                
            </javadoc>
            <declaration name="DATA_TRANSFER_COMPLETE" type="int" line="41"/>
            <javadoc line="41">
                The job is not necessarily printed yet, but the data has been transferred
                  successfully from the client to the print service. The client may
                  free data resources.                
            </javadoc>
            <javadoc line="47">
                Constructs a &lt;code&gt;PrintJobEvent&lt;/code&gt; object.                
                <param>
                    source  a <code>DocPrintJob</code> object                    
                </param>
                <param>
                    reason  an int specifying the reason.                    
                </param>
                <throws>
                    IllegalArgumentException if <code>source</code> is
                      <code>null</code>.                    
                </throws>
            </javadoc>
            <method name="PrintJobEvent" type="constructor" line="54">
                <params>
                    <param name="source" type="DocPrintJob"/>
                    <param name="reason" type="int"/>
                </params>
            </method>
            <javadoc line="58">
                Gets the reason for this event.                
                <return>
                    reason int.                    
                </return>
            </javadoc>
            <method name="getPrintEventType" type="int" line="62"/>
            <javadoc line="65">
                Determines the &lt;code&gt;DocPrintJob&lt;/code&gt; to which this print job
                  event pertains.                
                <return>
                    the <code>DocPrintJob</code> object that represents the
                      print job that reports the events encapsulated by this
                      <code>PrintJobEvent</code>.                    
                </return>
            </javadoc>
            <method name="getPrintJob" type="DocPrintJob" line="72"/>
        </class>
    </source>