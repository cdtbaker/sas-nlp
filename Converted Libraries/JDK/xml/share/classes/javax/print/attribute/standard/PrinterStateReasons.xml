<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="java.util.AbstractSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.PrintServiceAttribute"/>
        <class name="PrinterStateReasons" line="10">
            <extends class="HashMap">
                <type_params>
                    <type_param name="PrinterStateReason"/>
                    <type_param name="Severity"/>
                </type_params>
            </extends>
            <implements interface="PrintServiceAttribute"/>
            <javadoc line="10">
                Class PrinterStateReasons is a printing attribute class, a set of
                  enumeration values, that provides additional information about the
                  printer&apos;s current state, i.e., information that augments the value of the
                  printer&apos;s {@link PrinterState PrinterState} attribute.
                  &lt;P&gt;
                  Instances of {@link PrinterStateReason PrinterStateReason} do not appear in
                  a Print Service&apos;s attribute set directly. Rather, a PrinterStateReasons
                  attribute appears in the Print Service&apos;s attribute set. The
                  PrinterStateReasons attribute contains zero, one, or more than one {@link PrinterStateReason PrinterStateReason} objects which pertain to the Print
                  Service&apos;s status, and each {@link PrinterStateReason PrinterStateReason}object is associated with a {@link Severity Severity} level of REPORT
                  (least severe), WARNING, or ERROR (most severe). The printer adds a {@link PrinterStateReason PrinterStateReason} object to the Print Service&apos;s
                  PrinterStateReasons attribute when the corresponding condition becomes true
                  of the printer, and the printer removes the {@link PrinterStateReasonPrinterStateReason} object again when the corresponding condition becomes
                  false, regardless of whether the Print Service&apos;s overall{@link PrinterState PrinterState} also changed.
                  &lt;P&gt;
                  Class PrinterStateReasons inherits its implementation from class {@link java.util.HashMap java.util.HashMap}. Each entry in the map consists of a{@link PrinterStateReason PrinterStateReason} object (key) mapping to a{@link Severity Severity} object (value):
                  &lt;P&gt;
                  Unlike most printing attributes which are immutable once constructed, class
                  PrinterStateReasons is designed to be mutable; you can add {@link PrinterStateReason PrinterStateReason} objects to an existing
                  PrinterStateReasons object and remove them again. However, like class{@link java.util.HashMap java.util.HashMap}, class PrinterStateReasons is
                  not multiple thread safe. If a PrinterStateReasons object will be used by
                  multiple threads, be sure to synchronize its operations (e.g., using a
                  synchronized map view obtained from class {@link java.util.Collectionsjava.util.Collections}).
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The string values returned by each individual{@link PrinterStateReason PrinterStateReason} object&apos;s and the associated{@link Severity Severity} object&apos;s &lt;CODE&gt;toString()&lt;/CODE&gt; methods,
                  concatenated
                  together with a hyphen (&lt;CODE&gt;&quot;-&quot;&lt;/CODE&gt;) in between, gives the IPP keyword
                  value. The category name returned by &lt;CODE&gt;getName()&lt;/CODE&gt; gives the IPP
                  attribute name.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="44"/>
            <javadoc line="45">
                Construct a new, empty printer state reasons attribute; the underlying
                  hash map has the default initial capacity and load factor.                
            </javadoc>
            <method name="PrinterStateReasons" type="constructor" line="49"/>
            <javadoc line="52">
                super a new, empty printer state reasons attribute; the underlying
                  hash map has the given initial capacity and the default load factor.                
                <param>
                    initialCapacity  Initial capacity.                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero.                    
                </throws>
            </javadoc>
            <method name="PrinterStateReasons" type="constructor" line="59">
                <params>
                    <param name="initialCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="62">
                Construct a new, empty printer state reasons attribute; the underlying
                  hash map has the given initial capacity and load factor.                
                <param>
                    initialCapacity  Initial capacity.                    
                </param>
                <param>
                    loadFactor       Load factor.                    
                </param>
                <throws>
                    IllegalArgumentException if the initial capacity is less
                      than zero.                    
                </throws>
            </javadoc>
            <method name="PrinterStateReasons" type="constructor" line="70">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="73">
                Construct a new printer state reasons attribute that contains the same{@link PrinterStateReason PrinterStateReason}-to-{@link SeveritySeverity} mappings as the given map. The underlying hash map&apos;s initial
                  capacity and load factor are as specified in the superclass constructor{@link java.util.HashMap#HashMap(java.util.Map)&lt;CODE&gt;HashMap(Map)&lt;/CODE&gt;}.                
                <param>
                    map  Map to copy.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if <CODE>map</CODE> is null or if any
                      key or value in <CODE>map</CODE> is null.                    
                </exception>
                <throws>
                    ClassCastException(unchecked exception) Thrown if any key in <CODE>map</CODE> is not
                      an instance of class {@link PrinterStateReason PrinterStateReason} or
                      if any value in <CODE>map</CODE> is not an instance of class{@link Severity Severity}.                    
                </throws>
            </javadoc>
            <method name="PrinterStateReasons" type="constructor" line="83">
                <params>
                    <param name="map" type="Map<PrinterStateReason,Severity>"/>
                </params>
            </method>
            <javadoc line="87">
                Adds the given printer state reason to this printer state reasons
                  attribute, associating it with the given severity level. If this
                  printer state reasons attribute previously contained a mapping for the
                  given printer state reason, the old value is replaced.                
                <param>
                    reason    Printer state reason. This must be an instance of
                      class {@link PrinterStateReason PrinterStateReason}.                    
                </param>
                <param>
                    severity  Severity of the printer state reason. This must be
                      an instance of class {@link Severity Severity}.                    
                </param>
                <return>
                    Previous severity associated with the given printer state
                      reason, or <tt>null</tt> if the given printer state reason was
                      not present.                    
                </return>
                <throws>
                    NullPointerException(unchecked exception) Thrown if <CODE>reason</CODE> is null or
                      <CODE>severity</CODE> is null.                    
                </throws>
                <throws>
                    ClassCastException(unchecked exception) Thrown if <CODE>reason</CODE> is not an
                      instance of class {@link PrinterStateReason PrinterStateReason} or if
                      <CODE>severity</CODE> is not an instance of class {@link SeveritySeverity}.                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="put" type="Severity" line="106">
                <params>
                    <param name="reason" type="PrinterStateReason"/>
                    <param name="severity" type="Severity"/>
                </params>
                <scope line="107"/>
                <scope line="110"/>
            </method>
            <javadoc line="115">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class PrinterStateReasons, the
                  category is class PrinterStateReasons itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="123"/>
            <javadoc line="126">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class PrinterStateReasons, the
                  category name is &lt;CODE&gt;&quot;printer-state-reasons&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="134"/>
            <javadoc line="137">
                Obtain an unmodifiable set view of the individual printer state reason
                  attributes at the given severity level in this PrinterStateReasons
                  attribute. Each element in the set view is a {@link PrinterStateReasonPrinterStateReason} object. The only elements in the set view are the{@link PrinterStateReason PrinterStateReason} objects that map to the
                  given severity value. The set view is backed by this
                  PrinterStateReasons attribute, so changes to this PrinterStateReasons
                  attribute are reflected  in the set view.
                  The set view does not support element insertion or
                  removal. The set view&apos;s iterator does not support element removal.                
                <param>
                    severity  Severity level.                    
                </param>
                <return>
                    Set view of the individual {@link PrinterStateReasonPrinterStateReason} attributes at the given {@link SeveritySeverity} level.                    
                </return>
                <exception>
                    NullPointerException(unchecked exception) Thrown if <CODE>severity</CODE> is null.                    
                </exception>
            </javadoc>
            <method name="printerStateReasonSet" type="Set<PrinterStateReason>" line="150">
                <params>
                    <param name="severity" type="Severity"/>
                </params>
                <scope line="151"/>
            </method>
            <class name="PrinterStateReasonSet" line="156">
                <extends class="AbstractSet">
                    <type_params>
                        <type_param name="PrinterStateReason"/>
                    </type_params>
                </extends>
                <declaration name="mySeverity" type="Severity" line="157"/>
                <declaration name="myEntrySet" type="Set" line="158"/>
                <method name="PrinterStateReasonSet" type="constructor" line="159">
                    <params>
                        <param name="severity" type="Severity"/>
                        <param name="entrySet" type="Set"/>
                    </params>
                </method>
                <method name="size" type="int" line="163">
                    <declaration name="result" type="int" line="164"/>
                    <declaration name="iter" type="Iterator" line="165"/>
                    <scope line="166"/>
                </method>
                <method name="iterator" type="Iterator" line="172"/>
            </class>
            <class name="PrinterStateReasonSetIterator" line="176">
                <implements interface="Iterator"/>
                <declaration name="mySeverity" type="Severity" line="177"/>
                <declaration name="myIterator" type="Iterator" line="178"/>
                <declaration name="myEntry" type="Map.Entry" line="179"/>
                <method name="PrinterStateReasonSetIterator" type="constructor" line="180">
                    <params>
                        <param name="severity" type="Severity"/>
                        <param name="iterator" type="Iterator"/>
                    </params>
                </method>
                <method name="goToNext" type="void" line="185">
                    <scope line="187">
                        <scope line="189"/>
                    </scope>
                </method>
                <method name="hasNext" type="boolean" line="194"/>
                <method name="next" type="Object" line="197">
                    <scope line="198"/>
                    <declaration name="result" type="Object" line="201"/>
                </method>
                <method name="remove" type="void" line="205"/>
            </class>
        </class>
    </source>