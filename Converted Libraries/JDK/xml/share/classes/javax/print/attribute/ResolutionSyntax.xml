<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.Serializable"/>
        <class name="ResolutionSyntax" line="3">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="3">
                Class ResolutionSyntax is an abstract base class providing the common
                  implementation of all attributes denoting a printer resolution.
                  &lt;P&gt;
                  A resolution attribute&apos;s value consists of two items, the cross feed
                  direction resolution and the feed direction resolution. A resolution
                  attribute may be constructed by supplying the two values and indicating the
                  units in which the values are measured. Methods are provided to return a
                  resolution attribute&apos;s values, indicating the units in which the values are
                  to be returned. The two most common resolution units are dots per inch (dpi)
                  and dots per centimeter (dpcm), and exported constants {@link #DPI&lt;CODE&gt;DPI&lt;/CODE&gt;} and {@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;} are provided for
                  indicating those units.
                  &lt;P&gt;
                  Once constructed, a resolution attribute&apos;s value is immutable.
                  &lt;P&gt;
                  &lt;B&gt;Design&lt;/B&gt;
                  &lt;P&gt;
                  A resolution attribute&apos;s cross feed direction resolution and feed direction
                  resolution values are stored internally using units of dots per 100 inches
                  (dphi). Storing the values in dphi rather than, say, metric units allows
                  precise integer arithmetic conversions between dpi and dphi and between dpcm
                  and dphi: 1 dpi = 100 dphi, 1 dpcm = 254 dphi. Thus, the values can be stored
                  into and retrieved back from a resolution attribute in either units with no
                  loss of precision. This would not be guaranteed if a floating point
                  representation were used. However, roundoff error will in general occur if a
                  resolution attribute&apos;s values are created in one units and retrieved in
                  different units; for example, 600 dpi will be rounded to 236 dpcm, whereas
                  the true value (to five figures) is 236.22 dpcm.
                  &lt;P&gt;
                  Storing the values internally in common units of dphi lets two resolution
                  attributes be compared without regard to the units in which they were
                  created; for example, 300 dpcm will compare equal to 762 dpi, as they both
                  are stored as 76200 dphi. In particular, a lookup service can
                  match resolution attributes based on equality of their serialized
                  representations regardless of the units in which they were created. Again,
                  using integers for internal storage allows precise equality comparisons to be
                  done, which would not be guaranteed if a floating point representation were
                  used.
                  &lt;P&gt;
                  The exported constant {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} is actually the
                  conversion factor by which to multiply a value in dpi to get the value in
                  dphi. Likewise, the exported constant {@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;} is the
                  conversion factor by which to multiply a value in dpcm to get the value in
                  dphi. A client can specify a resolution value in units other than dpi or dpcm
                  by supplying its own conversion factor. However, since the internal units of
                  dphi was chosen with supporting only the external units of dpi and dpcm in
                  mind, there is no guarantee that the conversion factor for the client&apos;s units
                  will be an exact integer. If the conversion factor isn&apos;t an exact integer,
                  resolution values in the client&apos;s units won&apos;t be stored precisely.
                  &lt;P&gt;                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="57"/>
            <declaration name="crossFeedResolution" type="int" line="58"/>
            <javadoc line="58">
                Cross feed direction resolution in units of dots per 100 inches (dphi).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="feedResolution" type="int" line="63"/>
            <javadoc line="63">
                Feed direction resolution in units of dots per 100 inches (dphi).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="DPI" type="int" line="68"/>
            <javadoc line="68">
                Value to indicate units of dots per inch (dpi). It is actually the
                  conversion factor by which to multiply dpi to yield dphi (100).                
            </javadoc>
            <declaration name="DPCM" type="int" line="73"/>
            <javadoc line="73">
                Value to indicate units of dots per centimeter (dpcm). It is actually
                  the conversion factor by which to multiply dpcm to yield dphi (254).                
            </javadoc>
            <javadoc line="78">
                Construct a new resolution attribute from the given items.                
                <param>
                    crossFeedResolutionCross feed direction resolution.                    
                </param>
                <param>
                    feedResolutionFeed direction resolution.                    
                </param>
                <param>
                    unitsUnit conversion factor, e.g. {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} or{@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;}.                    
                </param>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;crossFeedResolution&lt;/CODE&gt; &lt;
                      1 or &lt;CODE&gt;feedResolution&lt;/CODE&gt; &lt; 1 or &lt;CODE&gt;units&lt;/CODE&gt; &lt; 1.                    
                </exception>
            </javadoc>
            <method name="ResolutionSyntax" type="constructor" line="86">
                <params>
                    <param name="crossFeedResolution" type="int"/>
                    <param name="feedResolution" type="int"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="87"/>
                <scope line="90"/>
                <scope line="93"/>
            </method>
            <javadoc line="99">
                Convert a value from dphi to some other units. The result is rounded to
                  the nearest integer.                
                <param>
                    dphiValue (dphi) to convert.                    
                </param>
                <param>
                    unitsUnit conversion factor, e.g. {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} or{@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;}.                    
                </param>
                <return>
                    The value of &lt;CODE&gt;dphi&lt;/CODE&gt; converted to the desired units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;units&lt;/CODE&gt; &lt; 1.                    
                </exception>
            </javadoc>
            <method name="convertFromDphi" type="int" line="107">
                <params>
                    <param name="dphi" type="int"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="108"/>
                <declaration name="round" type="int" line="111"/>
            </method>
            <javadoc line="114">
                Get this resolution attribute&apos;s resolution values in the given units.
                  The values are rounded to the nearest integer.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} or{@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;}.                    
                </param>
                <return>
                    A two-element array with the cross feed direction resolution
                      at index 0 and the feed direction resolution at index 1.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;units&lt;/CODE&gt; &lt; 1.                    
                </exception>
            </javadoc>
            <method name="getResolution" type="int[]" line="122">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                Returns this resolution attribute&apos;s cross feed direction resolution in
                  the given units. The value is rounded to the nearest integer.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} or{@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;}.                    
                </param>
                <return>
                    Cross feed direction resolution.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;units&lt;/CODE&gt; &lt; 1.                    
                </exception>
            </javadoc>
            <method name="getCrossFeedResolution" type="int" line="132">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="135">
                Returns this resolution attribute&apos;s feed direction resolution in the
                  given units. The value is rounded to the nearest integer.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} or {@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;}.                    
                </param>
                <return>
                    Feed direction resolution.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;units&lt;/CODE&gt; &lt; 1.                    
                </exception>
            </javadoc>
            <method name="getFeedResolution" type="int" line="142">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Returns a string version of this resolution attribute in the given units.
                  The string takes the form &lt;CODE&gt;&quot;&lt;I&gt;C&lt;/I&gt;x&lt;I&gt;F&lt;/I&gt; &lt;I&gt;U&lt;/I&gt;&quot;&lt;/CODE&gt;,
                  where &lt;I&gt;C&lt;/I&gt; is the cross feed direction resolution, &lt;I&gt;F&lt;/I&gt; is the
                  feed direction resolution, and &lt;I&gt;U&lt;/I&gt; is the units name. The values are
                  rounded to the nearest integer.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #DPI &lt;CODE&gt;DPI&lt;/CODE&gt;} or {@link #DPCM &lt;CODE&gt;DPCM&lt;/CODE&gt;}.                    
                </param>
                <param>
                    unitsNameUnits name string, e.g. &lt;CODE&gt;&quot;dpi&quot;&lt;/CODE&gt; or &lt;CODE&gt;&quot;dpcm&quot;&lt;/CODE&gt;. If
                      null, no units name is appended to the result.                    
                </param>
                <return>
                    String version of this resolution attribute.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;units&lt;/CODE&gt; &lt; 1.                    
                </exception>
            </javadoc>
            <method name="toString" type="String" line="157">
                <params>
                    <param name="units" type="int"/>
                    <param name="unitsName" type="String"/>
                </params>
                <declaration name="result" type="StringBuffer" line="158"/>
                <scope line="162"/>
            </method>
            <javadoc line="168">
                Determine whether this resolution attribute&apos;s value is less than or
                  equal to the given resolution attribute&apos;s value. This is true if all
                  of the following conditions are true:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  This attribute&apos;s cross feed direction resolution is less than or equal to
                  the &lt;CODE&gt;other&lt;/CODE&gt; attribute&apos;s cross feed direction resolution.
                  &lt;LI&gt;
                  This attribute&apos;s feed direction resolution is less than or equal to the
                  &lt;CODE&gt;other&lt;/CODE&gt; attribute&apos;s feed direction resolution.
                  &lt;/UL&gt;                
                <param>
                    other  Resolution attribute to compare with.                    
                </param>
                <return>
                    True if this resolution attribute is less than or equal to the
                      &lt;CODE&gt;other&lt;/CODE&gt; resolution attribute, false otherwise.                    
                </return>
                <exception>
                    NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;other&lt;/CODE&gt; is null.                    
                </exception>
            </javadoc>
            <method name="lessThanOrEquals" type="boolean" line="185">
                <params>
                    <param name="other" type="ResolutionSyntax"/>
                </params>
            </method>
            <javadoc line="188">
                Returns whether this resolution attribute is equivalent to the passed in
                  object. To be equivalent, all of the following conditions must be true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class ResolutionSyntax.
                  &lt;LI&gt;
                  This attribute&apos;s cross feed direction resolution is equal to
                  &lt;CODE&gt;object&lt;/CODE&gt;&apos;s cross feed direction resolution.
                  &lt;LI&gt;
                  This attribute&apos;s feed direction resolution is equal to
                  &lt;CODE&gt;object&lt;/CODE&gt;&apos;s feed direction resolution.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if &lt;CODE&gt;object&lt;/CODE&gt; is equivalent to this resolution
                      attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="207">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="210">
                Returns a hash code value for this resolution attribute.                
            </javadoc>
            <method name="hashCode" type="int" line="213"/>
            <javadoc line="216">
                Returns a string version of this resolution attribute. The string takes
                  the form &lt;CODE&gt;&quot;&lt;I&gt;C&lt;/I&gt;x&lt;I&gt;F&lt;/I&gt; dphi&quot;&lt;/CODE&gt;, where &lt;I&gt;C&lt;/I&gt; is the
                  cross feed direction resolution and &lt;I&gt;F&lt;/I&gt; is the feed direction
                  resolution. The values are reported in the internal units of dphi.                
            </javadoc>
            <method name="toString" type="String" line="222">
                <declaration name="result" type="StringBuffer" line="223"/>
            </method>
            <javadoc line="230">
                Returns this resolution attribute&apos;s cross feed direction resolution in
                  units of dphi. (For use in a subclass.)                
                <return>
                    Cross feed direction resolution.                    
                </return>
            </javadoc>
            <method name="getCrossFeedResolutionDphi" type="int" line="235"/>
            <javadoc line="238">
                Returns this resolution attribute&apos;s feed direction resolution in units
                  of dphi. (For use in a subclass.)                
                <return>
                    Feed direction resolution.                    
                </return>
            </javadoc>
            <method name="getFeedResolutionDphi" type="int" line="243"/>
        </class>
    </source>