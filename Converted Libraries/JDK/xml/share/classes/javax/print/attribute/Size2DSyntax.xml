<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.Serializable"/>
        <class name="Size2DSyntax" line="3">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="3">
                Class Size2DSyntax is an abstract base class providing the common
                  implementation of all attributes denoting a size in two dimensions.
                  &lt;P&gt;
                  A two-dimensional size attribute&apos;s value consists of two items, the X
                  dimension and the Y dimension. A two-dimensional size attribute may be
                  constructed by supplying the two values and indicating the units in which the
                  values are measured. Methods are provided to return a two-dimensional size
                  attribute&apos;s values, indicating the units in which the values are to be
                  returned. The two most common size units are inches (in) and millimeters
                  (mm), and exported constants {@link #INCH &lt;CODE&gt;INCH&lt;/CODE&gt;} and {@link #MM&lt;CODE&gt;MM&lt;/CODE&gt;} are provided for indicating those units.
                  &lt;P&gt;
                  Once constructed, a two-dimensional size attribute&apos;s value is immutable.
                  &lt;P&gt;
                  &lt;B&gt;Design&lt;/B&gt;
                  &lt;P&gt;
                  A two-dimensional size attribute&apos;s X and Y dimension values are stored
                  internally as integers in units of micrometers (&amp;#181;m), where 1 micrometer
                  = 10&lt;SUP&gt;-6&lt;/SUP&gt; meter = 1/1000 millimeter = 1/25400 inch. This permits
                  dimensions to be represented exactly to a precision of 1/1000 mm (= 1
                  &amp;#181;m) or 1/100 inch (= 254 &amp;#181;m). If fractional inches are expressed in
                  negative powers of two, this permits dimensions to be represented exactly to
                  a precision of 1/8 inch (= 3175 &amp;#181;m) but not 1/16 inch (because 1/16 inch
                  does not equal an integral number of &amp;#181;m).
                  &lt;P&gt;
                  Storing the dimensions internally in common units of &amp;#181;m lets two size
                  attributes be compared without regard to the units in which they were
                  created; for example, 8.5 in will compare equal to 215.9 mm, as they both are
                  stored as 215900 &amp;#181;m. For example, a lookup service can
                  match resolution attributes based on equality of their serialized
                  representations regardless of the units in which they were created. Using
                  integers for internal storage allows precise equality comparisons to be done,
                  which would not be guaranteed if an internal floating point representation
                  were used. Note that if you&apos;re looking for U.S. letter sized media in metric
                  units, you have to search for a media size of 215.9 x 279.4 mm; rounding off
                  to an integral 216 x 279 mm will not match.
                  &lt;P&gt;
                  The exported constant {@link #INCH &lt;CODE&gt;INCH&lt;/CODE&gt;} is actually the
                  conversion factor by which to multiply a value in inches to get the value in
                  &amp;#181;m. Likewise, the exported constant {@link #MM &lt;CODE&gt;MM&lt;/CODE&gt;} is the
                  conversion factor by which to multiply a value in mm to get the value in
                  &amp;#181;m. A client can specify a resolution value in units other than inches
                  or mm by supplying its own conversion factor. However, since the internal
                  units of &amp;#181;m was chosen with supporting only the external units of inch
                  and mm in mind, there is no guarantee that the conversion factor for the
                  client&apos;s units will be an exact integer. If the conversion factor isn&apos;t an
                  exact integer, resolution values in the client&apos;s units won&apos;t be stored
                  precisely.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="x" type="int" line="56"/>
            <javadoc line="56">
                X dimension in units of micrometers (&amp;#181;m).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="y" type="int" line="61"/>
            <javadoc line="61">
                Y dimension in units of micrometers (&amp;#181;m).                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="INCH" type="int" line="66"/>
            <javadoc line="66">
                Value to indicate units of inches (in). It is actually the conversion
                  factor by which to multiply inches to yield &amp;#181;m (25400).                
            </javadoc>
            <declaration name="MM" type="int" line="71"/>
            <javadoc line="71">
                Value to indicate units of millimeters (mm). It is actually the
                  conversion factor by which to multiply mm to yield &amp;#181;m (1000).                
            </javadoc>
            <javadoc line="76">
                Construct a new two-dimensional size attribute from the given
                  floating-point values.                
                <param>
                    x  X dimension.                    
                </param>
                <param>
                    y  Y dimension.                    
                </param>
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>x</CODE> < 0 or <CODE>y</CODE>
                      < 0 or <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="Size2DSyntax" type="constructor" line="85">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="86"/>
                <scope line="89"/>
                <scope line="92"/>
            </method>
            <javadoc line="98">
                Construct a new two-dimensional size attribute from the given integer
                  values.                
                <param>
                    x  X dimension.                    
                </param>
                <param>
                    y  Y dimension.                    
                </param>
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>x</CODE> < 0 or <CODE>y</CODE>
                      < 0 or <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="Size2DSyntax" type="constructor" line="107">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="108"/>
                <scope line="111"/>
                <scope line="114"/>
            </method>
            <javadoc line="120">
                Convert a value from micrometers to some other units. The result is
                  returned as a floating-point number.                
                <param>
                    xValue (micrometers) to convert.                    
                </param>
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    The value of <CODE>x</CODE> converted to the desired units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="convertFromMicrometers" type="float" line="128">
                <params>
                    <param name="x" type="int"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="129"/>
            </method>
            <javadoc line="134">
                Get this two-dimensional size attribute&apos;s dimensions in the given units
                  as floating-point values.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    A two-element array with the X dimension at index 0 and the Y
                      dimension at index 1.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getSize" type="float[]" line="142">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Returns this two-dimensional size attribute&apos;s X dimension in the given
                  units as a floating-point value.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    X dimension.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getX" type="float" line="152">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Returns this two-dimensional size attribute&apos;s Y dimension in the given
                  units as a floating-point value.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    Y dimension.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getY" type="float" line="162">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="165">
                Returns a string version of this two-dimensional size attribute in the
                  given units. The string takes the form &lt;CODE&gt;&quot;&lt;I&gt;X&lt;/I&gt;x&lt;I&gt;Y&lt;/I&gt;
                  &lt;I&gt;U&lt;/I&gt;&quot;&lt;/CODE&gt;, where &lt;I&gt;X&lt;/I&gt; is the X dimension, &lt;I&gt;Y&lt;/I&gt; is the Y
                  dimension, and &lt;I&gt;U&lt;/I&gt; is the units name. The values are displayed in
                  floating point.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <param>
                    unitsNameUnits name string, e.g. <CODE>"in"</CODE> or <CODE>"mm"</CODE>. If
                      null, no units name is appended to the result.                    
                </param>
                <return>
                    String version of this two-dimensional size attribute.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="toString" type="String" line="177">
                <params>
                    <param name="units" type="int"/>
                    <param name="unitsName" type="String"/>
                </params>
                <declaration name="result" type="StringBuffer" line="178"/>
                <scope line="182"/>
            </method>
            <javadoc line="188">
                Returns whether this two-dimensional size attribute is equivalent to the
                  passed in object. To be equivalent, all of the following conditions must
                  be true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class Size2DSyntax.
                  &lt;LI&gt;
                  This attribute&apos;s X dimension is equal to &lt;CODE&gt;object&lt;/CODE&gt;&apos;s X
                  dimension.
                  &lt;LI&gt;
                  This attribute&apos;s Y dimension is equal to &lt;CODE&gt;object&lt;/CODE&gt;&apos;s Y
                  dimension.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if <CODE>object</CODE> is equivalent to this
                      two-dimensional size attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="208">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="211">
                Returns a hash code value for this two-dimensional size attribute.                
            </javadoc>
            <method name="hashCode" type="int" line="214"/>
            <javadoc line="217">
                Returns a string version of this two-dimensional size attribute. The
                  string takes the form &lt;CODE&gt;&quot;&lt;I&gt;X&lt;/I&gt;x&lt;I&gt;Y&lt;/I&gt; um&quot;&lt;/CODE&gt;, where
                  &lt;I&gt;X&lt;/I&gt; is the X dimension and &lt;I&gt;Y&lt;/I&gt; is the Y dimension.
                  The values are reported in the internal units of micrometers.                
            </javadoc>
            <method name="toString" type="String" line="223">
                <declaration name="result" type="StringBuffer" line="224"/>
            </method>
            <javadoc line="231">
                Returns this two-dimensional size attribute&apos;s X dimension in units of
                  micrometers (&amp;#181;m). (For use in a subclass.)                
                <return>
                    X dimension (&#181;m).                    
                </return>
            </javadoc>
            <method name="getXMicrometers" type="int" line="236"/>
            <javadoc line="239">
                Returns this two-dimensional size attribute&apos;s Y dimension in units of
                  micrometers (&amp;#181;m). (For use in a subclass.)                
                <return>
                    Y dimension (&#181;m).                    
                </return>
            </javadoc>
            <method name="getYMicrometers" type="int" line="244"/>
        </class>
    </source>