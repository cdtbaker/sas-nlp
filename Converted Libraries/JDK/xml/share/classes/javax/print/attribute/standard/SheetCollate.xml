<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.DocAttribute"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="SheetCollate" line="33">
            <extends class="EnumSyntax"/>
            <implements interface="DocAttribute"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="33">
                Class SheetCollate is a printing attribute class, an enumeration, that
                  specifies whether or not the media sheets of each copy of each printed
                  document in a job are to be in sequence, when multiple copies of the document
                  are specified by the {@link Copies Copies} attribute. When SheetCollate is
                  COLLATED, each copy of each document is printed with the print-stream sheets
                  in sequence. When SheetCollate is UNCOLLATED, each print-stream sheet is
                  printed a number of times equal to the value of the {@link Copies Copies}attribute in succession. For example, suppose a document produces two media
                  sheets as output, {@link Copies Copies} is 6, and SheetCollate is UNCOLLATED;
                  in this case six copies of the first media sheet are printed followed by
                  six copies of the second media sheet.
                  &lt;P&gt;
                  Whether the effect of sheet collation is achieved by placing copies of a
                  document in multiple output bins or in the same output bin with
                  implementation defined document separation is implementation dependent.
                  Also whether it is achieved by making multiple passes over the job or by
                  using an output sorter is implementation dependent.
                  &lt;P&gt;
                  If a printer does not support the SheetCollate attribute (meaning the client
                  cannot specify any particular sheet collation), the printer must behave as
                  though SheetCollate were always set to COLLATED.
                  &lt;P&gt;
                  The SheetCollate attribute interacts with the {@link MultipleDocumentHandlingMultipleDocumentHandling} attribute. The {@link MultipleDocumentHandlingMultipleDocumentHandling} attribute describes the collation of entire
                  documents, and the SheetCollate attribute describes the semantics of
                  collating individual pages within a document.
                  &lt;P&gt;
                  The effect of a SheetCollate attribute on a multidoc print job (a job with
                  multiple documents) depends on whether all the docs have the same sheet
                  collation specified or whether different docs have different sheet
                  collations specified, and on the (perhaps defaulted) value of the {@link MultipleDocumentHandling MultipleDocumentHandling} attribute.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  If all the docs have the same sheet collation specified, then the following
                  combinations of SheetCollate and {@link MultipleDocumentHandlingMultipleDocumentHandling} are permitted, and the printer reports an error
                  when the job is submitted if any other combination is specified:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SheetCollate = COLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SINGLE_DOCUMENT -- All the input docs will be
                  combined into one output document. Multiple copies of the output document
                  will be produced with pages in collated order, i.e. pages 1, 2, 3, . . .,
                  1, 2, 3, . . .
                  &lt;P&gt;
                  &lt;LI&gt;
                  SheetCollate = COLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SINGLE_DOCUMENT_NEW_SHEET -- All the input docs
                  will be combined into one output document, and the first impression of each
                  input doc will always start on a new media sheet. Multiple copies of the
                  output document will be produced with pages in collated order, i.e. pages
                  1, 2, 3, . . ., 1, 2, 3, . . .
                  &lt;P&gt;
                  &lt;LI&gt;
                  SheetCollate = COLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each
                  input doc will remain a separate output document. Multiple copies of each
                  output document (call them A, B, . . .) will be produced with each document&apos;s
                  pages in collated order, but the documents themselves in uncollated order,
                  i.e. pages A1, A2, A3, . . ., A1, A2, A3, . . ., B1, B2, B3, . . ., B1, B2,
                  B3, . . .
                  &lt;P&gt;
                  &lt;LI&gt;
                  SheetCollate = COLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SEPARATE_DOCUMENTS_COLLATED_COPIES -- Each input
                  doc will remain a separate output document. Multiple copies of each output
                  document (call them A, B, . . .) will be produced with each document&apos;s pages
                  in collated order, with the documents themselves also in collated order, i.e.
                  pages A1, A2, A3, . . ., B1, B2, B3, . . ., A1, A2, A3, . . ., B1, B2, B3,
                  . . .
                  &lt;P&gt;
                  &lt;LI&gt;
                  SheetCollate = UNCOLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SINGLE_DOCUMENT -- All the input docs will be
                  combined into one output document. Multiple copies of the output document
                  will be produced with pages in uncollated order, i.e. pages 1, 1, . . .,
                  2, 2, . . ., 3, 3, . . .
                  &lt;P&gt;
                  &lt;LI&gt;
                  SheetCollate = UNCOLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SINGLE_DOCUMENT_NEW_SHEET -- All the input docs
                  will be combined into one output document, and the first impression of each
                  input doc will always start on a new media sheet. Multiple copies of the
                  output document will be produced with pages in uncollated order, i.e. pages
                  1, 1, . . ., 2, 2, . . ., 3, 3, . . .
                  &lt;P&gt;
                  &lt;LI&gt;
                  SheetCollate = UNCOLLATED, {@link MultipleDocumentHandlingMultipleDocumentHandling} = SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each
                  input doc will remain a separate output document. Multiple copies of each
                  output document (call them A, B, . . .) will be produced with each document&apos;s
                  pages in uncollated order, with the documents themselves also in uncollated
                  order, i.e. pages A1, A1, . . ., A2, A2, . . ., A3, A3, . . ., B1, B1, . . .,
                  B2, B2, . . ., B3, B3, . . .
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;LI&gt;
                  If different docs have different sheet collations specified, then only one
                  value of {@link MultipleDocumentHandling MultipleDocumentHandling} is
                  permitted, and the printer reports an error when the job is submitted if any
                  other value is specified:
                  &lt;UL&gt;
                  &lt;LI&gt;{@link MultipleDocumentHandling MultipleDocumentHandling} =
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each input doc will remain a separate
                  output document. Multiple copies of each output document (call them A, B,
                  . . .) will be produced with each document&apos;s pages in collated or uncollated
                  order as the corresponding input doc&apos;s SheetCollate attribute specifies, and
                  with the documents themselves in uncollated order. If document A had
                  SheetCollate = UNCOLLATED and document B had SheetCollate = COLLATED, the
                  following pages would be produced: A1, A1, . . ., A2, A2, . . ., A3, A3,
                  . . ., B1, B2, B3, . . ., B1, B2, B3, . . .
                  &lt;/UL&gt;
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; SheetCollate is not an IPP attribute at present.
                  &lt;P&gt;                
                <see>
                    MultipleDocumentHandling                    
                </see>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="161"/>
            <declaration name="UNCOLLATED" type="SheetCollate" line="163"/>
            <javadoc line="163">
                Sheets within a document appear in uncollated order when multiple
                  copies are printed.                
            </javadoc>
            <declaration name="COLLATED" type="SheetCollate" line="169"/>
            <javadoc line="169">
                Sheets within a document appear in collated order when multiple copies
                  are printed.                
            </javadoc>
            <javadoc line="175">
                Construct a new sheet collate enumeration value with the given integer
                  value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="SheetCollate" type="constructor" line="181">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="185"/>
            <declaration name="myEnumValueTable" type="SheetCollate[]" line="190"/>
            <javadoc line="195">
                Returns the string table for class SheetCollate.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="198"/>
            <javadoc line="202">
                Returns the enumeration value table for class SheetCollate.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="205"/>
            <javadoc line="209">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class SheetCollate, the category is class SheetCollate itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="218"/>
            <javadoc line="222">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class SheetCollate, the category name is &lt;CODE&gt;&quot;sheet-collate&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="230"/>
        </class>
    </source>