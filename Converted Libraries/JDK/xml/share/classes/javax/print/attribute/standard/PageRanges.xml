<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.SetOfIntegerSyntax"/>
        <import package="javax.print.attribute.DocAttribute"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="PageRanges" line="7">
            <extends class="SetOfIntegerSyntax"/>
            <implements interface="DocAttribute"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="7">
                Class PageRanges is a printing attribute class, a set of integers, that
                  identifies the range(s) of print-stream pages that the Printer object uses
                  for each copy of each document which are to be printed. Nothing is printed
                  for any pages identified that do not exist in the document(s). The attribute
                  is associated with &lt;I&gt;print-stream&lt;/I&gt; pages, not application-numbered pages
                  (for example, the page numbers found in the headers and or footers for
                  certain word processing applications).
                  &lt;P&gt;
                  In most cases, the exact pages to be printed will be generated by a device
                  driver and this attribute would not be required. However, when printing an
                  archived document which has already been formatted, the end user may elect to
                  print just a subset of the pages contained in the document. In this case, if
                  a page range of &lt;CODE&gt;&quot;&lt;I&gt;n&lt;/I&gt;-&lt;I&gt;m&lt;/I&gt;&quot;&lt;/CODE&gt; is specified, the first page
                  to be printed will be page &lt;I&gt;n.&lt;/I&gt; All subsequent pages of the document
                  will be printed through and including page &lt;I&gt;m.&lt;/I&gt;
                  &lt;P&gt;
                  If a PageRanges attribute is not specified for a print job, all pages of
                  the document will be printed. In other words, the default value for the
                  PageRanges attribute is always &lt;CODE&gt;{{1, Integer.MAX_VALUE}}&lt;/CODE&gt;.
                  &lt;P&gt;
                  The effect of a PageRanges attribute on a multidoc print job (a job with
                  multiple documents) depends on whether all the docs have the same page ranges
                  specified or whether different docs have different page ranges specified, and
                  on the (perhaps defaulted) value of the {@link MultipleDocumentHandlingMultipleDocumentHandling} attribute.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  If all the docs have the same page ranges specified, then any value of {@link MultipleDocumentHandling MultipleDocumentHandling} makes sense, and the
                  printer&apos;s processing depends on the {@link MultipleDocumentHandlingMultipleDocumentHandling} value:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT -- All the input docs will be combined together into one
                  output document. The specified page ranges of that output document will be
                  printed.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together
                  into one output document, and the first impression of each input doc will
                  always start on a new media sheet. The specified page ranges of that output
                  document will be printed.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- For each separate input doc, the
                  specified page ranges will be printed.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- For each separate input doc, the
                  specified page ranges will be printed.
                  &lt;/UL&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- For each separate input doc, its own
                  specified page ranges will be printed..
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- For each separate input doc, its own
                  specified page ranges will be printed..
                  &lt;/UL&gt;
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The PageRanges attribute&apos;s canonical array form
                  gives the lower and upper bound for each range of pages to be included in
                  and IPP &quot;page-ranges&quot; attribute. See class {@link javax.print.attribute.SetOfIntegerSyntax SetOfIntegerSyntax} for an
                  explanation of canonical array form. The category name returned by
                  &lt;CODE&gt;getName()&lt;/CODE&gt; gives the IPP attribute name.
                  &lt;P&gt;                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="77"/>
            <javadoc line="78">
                Construct a new page ranges attribute with the given members. The
                  members are specified in &quot;array form;&quot; see class {@link javax.print.attribute.SetOfIntegerSyntax SetOfIntegerSyntax} for an
                  explanation of array form.                
                <param>
                    members  Set members in array form.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if <CODE>members</CODE> is null or
                      any element of <CODE>members</CODE> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if any element of
                      <CODE>members</CODE> is not a length-one or length-two array. Also
                      thrown if <CODE>members</CODE> is a zero-length array or if any
                      member of the set is less than 1.                    
                </exception>
            </javadoc>
            <method name="PageRanges" type="constructor" line="90">
                <params>
                    <param name="members" type="int[][]"/>
                </params>
                <scope line="92"/>
            </method>
            <javadoc line="97">
                Construct a new  page ranges attribute with the given members in
                  string form.
                  See class {@link javax.print.attribute.SetOfIntegerSyntaxSetOfIntegerSyntax}for explanation of the syntax.                
                <param>
                    members  Set members in string form.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if <CODE>members</CODE> is null or
                      any element of <CODE>members</CODE> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>members</CODE> does not
                      obey  the proper syntax.  Also
                      thrown if the constructed set-of-integer is a
                      zero-length array or if any
                      member of the set is less than 1.                    
                </exception>
            </javadoc>
            <method name="PageRanges" type="constructor" line="110">
                <params>
                    <param name="members" type="String"/>
                </params>
                <scope line="112"/>
            </method>
            <method name="myPageRanges" type="void" line="117">
                <declaration name="myMembers" type="int[][]" line="118"/>
                <declaration name="n" type="int" line="119"/>
                <scope line="120"/>
                <declaration name="i" type="int" line="123"/>
                <scope line="124">
                    <scope line="125"/>
                </scope>
            </method>
            <javadoc line="130">
                Construct a new page ranges attribute containing a single integer. That
                  is, only the one page is to be printed.                
                <param>
                    member  Set member.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>member</CODE> is less than
                      1.                    
                </exception>
            </javadoc>
            <method name="PageRanges" type="constructor" line="137">
                <params>
                    <param name="member" type="int"/>
                </params>
                <scope line="139"/>
            </method>
            <javadoc line="143">
                Construct a new page ranges attribute containing a single range of
                  integers. That is, only those pages in the one range are to be printed.                
                <param>
                    lowerBound  Lower bound of the range.                    
                </param>
                <param>
                    upperBound  Upper bound of the range.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if a null range is specified or if a
                      non-null range is specified with <CODE>lowerBound</CODE> less than
                      1.                    
                </exception>
            </javadoc>
            <method name="PageRanges" type="constructor" line="152">
                <params>
                    <param name="lowerBound" type="int"/>
                    <param name="upperBound" type="int"/>
                </params>
                <scope line="154"/>
                <scope line="157"/>
            </method>
            <javadoc line="161">
                Returns whether this page ranges attribute is equivalent to the passed
                  in object. To be equivalent, all of the following conditions must be
                  true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class PageRanges.
                  &lt;LI&gt;
                  This page ranges attribute&apos;s members and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s members
                  are the same.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if <CODE>object</CODE> is equivalent to this page ranges
                      attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="178">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="181">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class PageRanges, the category is class PageRanges itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="188"/>
            <javadoc line="191">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class PageRanges, the category name is &lt;CODE&gt;&quot;page-ranges&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="198"/>
        </class>
    </source>