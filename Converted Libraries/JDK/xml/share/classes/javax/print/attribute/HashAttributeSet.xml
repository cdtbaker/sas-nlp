<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.HashMap"/>
        <class name="HashAttributeSet" line="34">
            <comment line="54">
                A HashMap used by the implementation.
                 The serialised form doesn&apos;t include this instance variable.                
            </comment>
            <implements interface="AttributeSet"/>
            <implements interface="Serializable"/>
            <javadoc line="34">
                Class HashAttributeSet provides an &lt;code&gt;AttributeSet&lt;/code&gt;
                  implementation with characteristics of a hash map.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="43"/>
            <declaration name="myInterface" type="Class" line="45"/>
            <javadoc line="45">
                The interface of which all members of this attribute set must be an
                  instance. It is assumed to be interface {@link Attribute Attribute}or a subinterface thereof.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="attrMap" type="HashMap" line="57"/>
            <javadoc line="59">
                Write the instance to a stream (ie serialize the object)                
                <serialData>
                    The serialized form of an attribute set explicitly writes the
                      number of attributes in the set, and each of the attributes.
                      This does not guarantee equality of serialized forms since
                      the order in which the attributes are written is not defined.                    
                </serialData>
            </javadoc>
            <method name="writeObject" type="void" line="68">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="attrs" type="Attribute[]" line="71"/>
                <scope line="73"/>
            </method>
            <javadoc line="78">
                Reconstitute an instance from a stream that is, deserialize it).                
            </javadoc>
            <method name="readObject" type="void" line="82">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="count" type="int" line="86"/>
                <declaration name="attr" type="Attribute" line="87"/>
                <scope line="88"/>
            </method>
            <javadoc line="94">
                Construct a new, empty attribute set.                
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="97"/>
            <javadoc line="101">
                Construct a new attribute set,
                  initially populated with the given attribute.                
                <param>
                    attribute  Attribute value to add to the set.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;attribute&lt;/CODE&gt; is null.                    
                </exception>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="110">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
            </method>
            <javadoc line="114">
                Construct a new attribute set,
                  initially populated with the values from the
                  given array. The new attribute set is populated by
                  adding the elements of &lt;CODE&gt;attributes&lt;/CODE&gt; array to the set in
                  sequence, starting at index 0. Thus, later array elements may replace
                  earlier array elements if the array contains duplicate attribute
                  values or attribute categories.                
                <param>
                    attributes  Array of attribute values to add to the set.
                      If null, an empty attribute set is constructed.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if any element of
                      &lt;CODE&gt;attributes&lt;/CODE&gt; is null.                    
                </exception>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="130">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                </params>
            </method>
            <javadoc line="134">
                Construct a new attribute set,
                  initially populated with the values from the  given set.                
                <param>
                    attributes Set of attributes from which to initialise this set.
                      If null, an empty attribute set is constructed.                    
                </param>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="142">
                <params>
                    <param name="attributes" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="146">
                Construct a new, empty attribute set, where the members of
                  the attribute set are restricted to the given interface.                
                <param>
                    interfaceName  The interface of which all members of this
                      attribute set must be an instance. It is assumed to
                      be interface {@link Attribute Attribute} or a
                      subinterface thereof.                    
                </param>
                <exception>
                    NullPointerException if interfaceName is null.                    
                </exception>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="156">
                <params>
                    <param name="interfaceName" type="Class<?>"/>
                </params>
                <scope line="157"/>
            </method>
            <javadoc line="163">
                Construct a new attribute set, initially populated with the given
                  attribute, where the members of the attribute set are restricted to the
                  given interface.                
                <param>
                    attribute      Attribute value to add to the set.                    
                </param>
                <param>
                    interfaceName  The interface of which all members of this
                      attribute set must be an instance. It is assumed to
                      be interface {@link Attribute Attribute} or a
                      subinterface thereof.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;attribute&lt;/CODE&gt; is null.                    
                </exception>
                <exception>
                    NullPointerException if interfaceName is null.                    
                </exception>
                <exception>
                    ClassCastException(unchecked exception) Thrown if &lt;CODE&gt;attribute&lt;/CODE&gt; is not an
                      instance of &lt;CODE&gt;interfaceName&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="181">
                <params>
                    <param name="attribute" type="Attribute"/>
                    <param name="interfaceName" type="Class<?>"/>
                </params>
                <scope line="182"/>
            </method>
            <javadoc line="189">
                Construct a new attribute set, where the members of the attribute
                  set are restricted to the given interface.
                  The new attribute set is populated
                  by adding the elements of &lt;CODE&gt;attributes&lt;/CODE&gt; array to the set in
                  sequence, starting at index 0. Thus, later array elements may replace
                  earlier array elements if the array contains duplicate attribute
                  values or attribute categories.                
                <param>
                    attributes Array of attribute values to add to the set. If
                      null, an empty attribute set is constructed.                    
                </param>
                <param>
                    interfaceName  The interface of which all members of this
                      attribute set must be an instance. It is assumed to
                      be interface {@link Attribute Attribute} or a
                      subinterface thereof.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if any element of
                      &lt;CODE&gt;attributes&lt;/CODE&gt; is null.                    
                </exception>
                <exception>
                    NullPointerException if interfaceName is null.                    
                </exception>
                <exception>
                    ClassCastException(unchecked exception) Thrown if any element of
                      &lt;CODE&gt;attributes&lt;/CODE&gt; is not an instance of
                      &lt;CODE&gt;interfaceName&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="214">
                <params>
                    <param name="attributes" type="Attribute[]"/>
                    <param name="interfaceName" type="Class<?>"/>
                </params>
                <scope line="215"/>
                <declaration name="n" type="int" line="219"/>
                <scope line="220"/>
            </method>
            <javadoc line="225">
                Construct a new attribute set, initially populated with the
                  values from the  given set where the members of the attribute
                  set are restricted to the given interface.                
                <param>
                    attributes set of attribute values to initialise the set. If
                      null, an empty attribute set is constructed.                    
                </param>
                <param>
                    interfaceName  The interface of which all members of this
                      attribute set must be an instance. It is assumed to
                      be interface {@link Attribute Attribute} or a
                      subinterface thereof.                    
                </param>
                <exception>
                    ClassCastException(unchecked exception) Thrown if any element of
                      &lt;CODE&gt;attributes&lt;/CODE&gt; is not an instance of
                      &lt;CODE&gt;interfaceName&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="HashAttributeSet" type="constructor" line="242">
                <params>
                    <param name="attributes" type="AttributeSet"/>
                    <param name="interfaceName" type="Class<?>"/>
                </params>
                <scope line="244">
                    <declaration name="attribArray" type="Attribute[]" line="245"/>
                    <declaration name="n" type="int" line="246"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="253">
                Returns the attribute value which this attribute set contains in the
                  given attribute category. Returns &lt;tt&gt;null&lt;/tt&gt; if this attribute set
                  does not contain any attribute value in the given attribute category.                
                <param>
                    category  Attribute category whose associated attribute value
                      is to be returned. It must be a{@link java.lang.Class Class}that implements interface {@link AttributeAttribute}.                    
                </param>
                <return>
                    The attribute value in the given attribute category contained
                      in this attribute set, or &lt;tt&gt;null&lt;/tt&gt; if this attribute set
                      does not contain any attribute value in the given attribute
                      category.                    
                </return>
                <throws>
                    NullPointerException(unchecked exception) Thrown if the &lt;CODE&gt;category&lt;/CODE&gt; is null.                    
                </throws>
                <throws>
                    ClassCastException(unchecked exception) Thrown if the &lt;CODE&gt;category&lt;/CODE&gt; is not a{@link java.lang.Class Class} that implements interface {@link Attribute Attribute}.                    
                </throws>
            </javadoc>
            <method name="get" type="Attribute" line="276">
                <params>
                    <param name="category" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="283">
                Adds the specified attribute to this attribute set if it is not
                  already present, first removing any existing in the same
                  attribute category as the specified attribute value.                
                <param>
                    attribute  Attribute value to be added to this attribute set.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this attribute set changed as a result of the
                      call, i.e., the given attribute value was not already a
                      member of this attribute set.                    
                </return>
                <throws>
                    NullPointerException(unchecked exception) Thrown if the &lt;CODE&gt;attribute&lt;/CODE&gt; is null.                    
                </throws>
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not support
                      the &lt;CODE&gt;add()&lt;/CODE&gt; operation.                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="300">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
                <declaration name="oldAttribute" type="Object" line="301"/>
            </method>
            <javadoc line="308">
                Removes any attribute for this category from this attribute set if
                  present. If &lt;CODE&gt;category&lt;/CODE&gt; is null, then
                  &lt;CODE&gt;remove()&lt;/CODE&gt; does nothing and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    category Attribute category to be removed from this
                      attribute set.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this attribute set changed as a result of the
                      call, i.e., the given attribute category had been a member of
                      this attribute set.                    
                </return>
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not
                      support the &lt;CODE&gt;remove()&lt;/CODE&gt; operation.                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="324">
                <params>
                    <param name="category" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="332">
                Removes the specified attribute from this attribute set if
                  present. If &lt;CODE&gt;attribute&lt;/CODE&gt; is null, then
                  &lt;CODE&gt;remove()&lt;/CODE&gt; does nothing and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    attribute Attribute value to be removed from this attribute set.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this attribute set changed as a result of the
                      call, i.e., the given attribute value had been a member of
                      this attribute set.                    
                </return>
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not
                      support the &lt;CODE&gt;remove()&lt;/CODE&gt; operation.                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="347">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
            </method>
            <javadoc line="353">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this attribute set contains an
                  attribute for the specified category.                
                <param>
                    category whose presence in this attribute set is
                      to be tested.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this attribute set contains an attribute
                      value for the specified category.                    
                </return>
            </javadoc>
            <method name="containsKey" type="boolean" line="363">
                <params>
                    <param name="category" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="371">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this attribute set contains the given
                  attribute.                
                <param>
                    attribute  value whose presence in this attribute set is
                      to be tested.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this attribute set contains the given
                      attribute    value.                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="381">
                <params>
                    <param name="attribute" type="Attribute"/>
                </params>
            </method>
            <javadoc line="388">
                Adds all of the elements in the specified set to this attribute.
                  The outcome is the same as if the{@link #add(Attribute) &lt;CODE&gt;add(Attribute)&lt;/CODE&gt;}operation had been applied to this attribute set successively with
                  each element from the specified set.
                  The behavior of the &lt;CODE&gt;addAll(AttributeSet)&lt;/CODE&gt;
                  operation is unspecified if the specified set is modified while
                  the operation is in progress.
                  &lt;P&gt;
                  If the &lt;CODE&gt;addAll(AttributeSet)&lt;/CODE&gt; operation throws an exception,
                  the effect on this attribute set&apos;s state is implementation dependent;
                  elements from the specified set before the point of the exception may
                  or may not have been added to this attribute set.                
                <param>
                    attributes  whose elements are to be added to this attribute
                      set.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this attribute set changed as a result of the
                      call.                    
                </return>
                <throws>
                    UnmodifiableSetException(Unchecked exception) Thrown if this attribute set does not
                      support the &lt;tt&gt;addAll(AttributeSet)&lt;/tt&gt; method.                    
                </throws>
                <throws>
                    NullPointerException(Unchecked exception) Thrown if some element in the specified
                      set is null, or the set is null.                    
                </throws>
                <see>
                    #add(Attribute)                    
                </see>
            </javadoc>
            <method name="addAll" type="boolean" line="418">
                <params>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="attrs" type="Attribute[]" line="420"/>
                <declaration name="result" type="boolean" line="421"/>
                <scope line="422">
                    <declaration name="newValue" type="Attribute" line="423"/>
                    <declaration name="oldValue" type="Object" line="426"/>
                </scope>
            </method>
            <javadoc line="432">
                Returns the number of attributes in this attribute set. If this
                  attribute set contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements,
                  returns  &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.                
                <return>
                    The number of attributes in this attribute set.                    
                </return>
            </javadoc>
            <method name="size" type="int" line="439"/>
            <javadoc line="443">
                @return the Attributes contained in this set as an array, zero length
                  if the AttributeSet is empty.                
            </javadoc>
            <method name="toArray" type="Attribute[]" line="448">
                <declaration name="attrs" type="Attribute[]" line="449"/>
            </method>
            <javadoc line="455">
                Removes all attributes from this attribute set.                
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not support
                      the &lt;CODE&gt;clear()&lt;/CODE&gt; operation.                    
                </throws>
            </javadoc>
            <method name="clear" type="void" line="462"/>
            <javadoc line="466">
                Returns true if this attribute set contains no attributes.                
                <return>
                    true if this attribute set contains no attributes.                    
                </return>
            </javadoc>
            <method name="isEmpty" type="boolean" line="471"/>
            <javadoc line="475">
                Compares the specified object with this attribute set for equality.
                  Returns &lt;tt&gt;true&lt;/tt&gt; if the given object is also an attribute set and
                  the two attribute sets contain the same attribute category-attribute
                  value mappings. This ensures that the
                  &lt;tt&gt;equals()&lt;/tt&gt; method works properly across different
                  implementations of the AttributeSet interface.                
                <param>
                    object to be compared for equality with this attribute set.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if the specified object is equal to this
                      attribute   set.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="489">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="490"/>
                <declaration name="aset" type="AttributeSet" line="494"/>
                <scope line="495"/>
                <declaration name="attrs" type="Attribute[]" line="499"/>
                <scope line="500">
                    <scope line="501"/>
                </scope>
            </method>
            <javadoc line="508">
                Returns the hash code value for this attribute set.
                  The hash code of an attribute set is defined to be the sum
                  of the hash codes of each entry in the AttributeSet.
                  This ensures that &lt;tt&gt;t1.equals(t2)&lt;/tt&gt; implies that
                  &lt;tt&gt;t1.hashCode()==t2.hashCode()&lt;/tt&gt; for any two attribute sets
                  &lt;tt&gt;t1&lt;/tt&gt; and &lt;tt&gt;t2&lt;/tt&gt;, as required by the general contract of{@link java.lang.Object#hashCode() &lt;CODE&gt;Object.hashCode()&lt;/CODE&gt;}.                
                <return>
                    The hash code value for this attribute set.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="519">
                <declaration name="hcode" type="int" line="520"/>
                <declaration name="attrs" type="Attribute[]" line="521"/>
                <scope line="522"/>
            </method>
        </class>
    </source>