<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="MultipleDocumentHandling" line="6">
            <extends class="EnumSyntax"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="6">
                Class MultipleDocumentHandling is a printing attribute class, an enumeration,
                  that controls finishing operations and the placement of one or more
                  print-stream pages into impressions and onto media sheets. When the value of
                  the {@link Copies Copies} attribute exceeds 1, MultipleDocumentHandling also
                  controls the order in which the copies that result from processing the
                  documents are produced. This attribute is relevant only for a multidoc print
                  job consisting of two or more individual docs.
                  &lt;P&gt;
                  Briefly, MultipleDocumentHandling determines the relationship between the
                  multiple input (electronic) documents fed into a multidoc print job and the
                  output (physical) document or documents produced by the multidoc print job.
                  There are two possibilities:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  The multiple input documents are combined into a single output document.
                  Finishing operations ({@link Finishings Finishings}),
                  are performed on this single output
                  document. The {@link Copies Copies} attribute tells how many copies of this
                  single output document to produce. The MultipleDocumentHandling values
                  SINGLE_DOCUMENT and SINGLE_DOCUMENT_NEW_SHEET specify two variations of
                  this  possibility.
                  &lt;P&gt;
                  &lt;LI&gt;
                  The multiple input documents remain separate output documents. Finishing
                  operations ({@link Finishings Finishings}),
                  are performed on each output document
                  separately. The {@link Copies Copies} attribute tells how many copies of each
                  separate output document to produce. The MultipleDocumentHandling values
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES and SEPARATE_DOCUMENTS_COLLATED_COPIES
                  specify two variations of this possibility.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  In the detailed explanations below, if &quot;&lt;CODE&gt;a&lt;/CODE&gt;&quot; represents an
                  instance of document data, then the result of processing the data in
                  document &quot;&lt;CODE&gt;a&lt;/CODE&gt;&quot; is a sequence of media sheets represented by
                  &quot;&lt;CODE&gt;a()&lt;/CODE&gt;&quot;.
                  &lt;P&gt;
                  The standard MultipleDocumentHandling values are:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  &lt;A NAME=&quot;sdfi&quot;&gt;{@link #SINGLE_DOCUMENT&lt;B&gt;&lt;CODE&gt;SINGLE_DOCUMENT&lt;/CODE&gt;&lt;/B&gt;}&lt;/A&gt;. If a print job has multiple
                  documents -- say, the document data is called &lt;CODE&gt;a&lt;/CODE&gt; and
                  &lt;CODE&gt;b&lt;/CODE&gt; -- then the result of processing all the document data
                  (&lt;CODE&gt;a&lt;/CODE&gt; and then &lt;CODE&gt;b&lt;/CODE&gt;) must be treated as a single sequence
                  of media sheets for finishing operations; that is, finishing would be
                  performed on the concatenation of the sequences &lt;CODE&gt;a(),b()&lt;/CODE&gt;. The
                  printer must not force the data in each document instance to be formatted
                  onto a new print-stream page, nor to start a new impression on a new media
                  sheet. If more than one copy is made, the ordering of the sets of media
                  sheets resulting from processing the document data must be
                  &lt;CODE&gt;a(),b(),a(),b(),...&lt;/CODE&gt;, and the printer object must force
                  each copy (&lt;CODE&gt;a(),b()&lt;/CODE&gt;) to start on a new media sheet.
                  &lt;P&gt;
                  &lt;LI&gt;
                  &lt;A NAME=&quot;sducfi&quot;&gt;{@link #SEPARATE_DOCUMENTS_UNCOLLATED_COPIES&lt;B&gt;&lt;CODE&gt;SEPARATE_DOCUMENTS_UNCOLLATED_COPIES&lt;/CODE&gt;&lt;/B&gt;}&lt;/A&gt;. If a print job
                  has multiple documents -- say, the document data is called &lt;CODE&gt;a&lt;/CODE&gt; and
                  &lt;CODE&gt;b&lt;/CODE&gt; -- then the result of processing the data in each document
                  instance must be treated as a single sequence of media sheets for finishing
                  operations; that is, the sets &lt;CODE&gt;a()&lt;/CODE&gt; and &lt;CODE&gt;b()&lt;/CODE&gt; would
                  each be finished separately. The printer must force each copy of the result
                  of processing the data in a single document to start on a new media sheet.
                  If more than one copy is made, the ordering of the sets of media sheets
                  resulting from processing the document data must be
                  &lt;CODE&gt;a(),a(),...,b(),b()...&lt;/CODE&gt;.
                  &lt;P&gt;
                  &lt;LI&gt;
                  &lt;A NAME=&quot;sdccfi&quot;&gt;{@link #SEPARATE_DOCUMENTS_COLLATED_COPIES&lt;B&gt;&lt;CODE&gt;SEPARATE_DOCUMENTS_COLLATED_COPIES&lt;/CODE&gt;&lt;/B&gt;}&lt;/A&gt;. If a print job
                  has multiple documents -- say, the document data is called &lt;CODE&gt;a&lt;/CODE&gt; and
                  &lt;CODE&gt;b&lt;/CODE&gt; -- then the result of processing the data in each document
                  instance must be treated as a single sequence of media sheets for finishing
                  operations; that is, the sets &lt;CODE&gt;a()&lt;/CODE&gt; and &lt;CODE&gt;b()&lt;/CODE&gt; would
                  each be finished separately. The printer must force each copy of the result
                  of processing the data in a single document to start on a new media sheet.
                  If more than one copy is made, the ordering of the sets of media sheets
                  resulting from processing the document data must be
                  &lt;CODE&gt;a(),b(),a(),b(),...&lt;/CODE&gt;.
                  &lt;P&gt;
                  &lt;LI&gt;
                  &lt;A NAME=&quot;sdnsfi&quot;&gt;{@link #SINGLE_DOCUMENT_NEW_SHEET&lt;B&gt;&lt;CODE&gt;SINGLE_DOCUMENT_NEW_SHEET&lt;/CODE&gt;&lt;/B&gt;}&lt;/A&gt;. Same as SINGLE_DOCUMENT,
                  except that the printer must ensure that the first impression of each
                  document instance in the job is placed on a new media sheet. This value
                  allows multiple documents to be stapled together with a single staple where
                  each document starts on a new sheet.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  SINGLE_DOCUMENT is the same as SEPARATE_DOCUMENTS_COLLATED_COPIES with
                  respect to ordering of print-stream pages, but not media sheet generation,
                  since SINGLE_DOCUMENT will put the first page of the next document on the
                  back side of a sheet if an odd number of pages have been produced so far
                  for the job, while SEPARATE_DOCUMENTS_COLLATED_COPIES always forces the
                  next document or document copy on to a new sheet.
                  &lt;P&gt;
                  In addition, if a {@link Finishings Finishings} attribute of{@link Finishings#STAPLE &lt;CODE&gt;STAPLE&lt;/CODE&gt;} is specified, then:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  With SINGLE_DOCUMENT, documents &lt;CODE&gt;a&lt;/CODE&gt; and &lt;CODE&gt;b&lt;/CODE&gt; are
                  stapled together as a single document with no regard to new sheets.
                  &lt;P&gt;
                  &lt;LI&gt;
                  With SINGLE_DOCUMENT_NEW_SHEET, documents &lt;CODE&gt;a&lt;/CODE&gt; and &lt;CODE&gt;b&lt;/CODE&gt;
                  are stapled together as a single document, but document &lt;CODE&gt;b&lt;/CODE&gt;
                  starts on a new sheet.
                  &lt;P&gt;
                  &lt;LI&gt;
                  With SEPARATE_DOCUMENTS_UNCOLLATED_COPIES and
                  SEPARATE_DOCUMENTS_COLLATED_COPIES, documents &lt;CODE&gt;a&lt;/CODE&gt; and
                  &lt;CODE&gt;b&lt;/CODE&gt; are stapled separately.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;I&gt;Note:&lt;/I&gt; None of these values provide means to produce uncollated
                  sheets within a document, i.e., where multiple copies of sheet &lt;I&gt;n&lt;/I&gt;
                  are produced before sheet &lt;I&gt;n&lt;/I&gt;+1 of the same document.
                  To specify that, see the {@link SheetCollate SheetCollate} attribute.
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The category name returned by
                  &lt;CODE&gt;getName()&lt;/CODE&gt; is the IPP attribute name.  The enumeration&apos;s
                  integer value is the IPP enum value.  The &lt;code&gt;toString()&lt;/code&gt; method
                  returns the IPP string representation of the attribute value.
                  &lt;P&gt;                
                <see>
                    Copies                    
                </see>
                <see>
                    Finishings                    
                </see>
                <see>
                    NumberUp                    
                </see>
                <see>
                    PageRanges                    
                </see>
                <see>
                    SheetCollate                    
                </see>
                <see>
                    Sides                    
                </see>
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="136"/>
            <declaration name="SINGLE_DOCUMENT" type="MultipleDocumentHandling" line="137"/>
            <javadoc line="137">
                Single document -- see above for &lt;A HREF=&quot;#sdfi&quot;&gt;further
                  information&lt;/A&gt;.                
            </javadoc>
            <declaration name="SEPARATE_DOCUMENTS_UNCOLLATED_COPIES" type="MultipleDocumentHandling" line="142"/>
            <javadoc line="142">
                Separate documents uncollated copies -- see above for
                  &lt;A HREF=&quot;#sducfi&quot;&gt;further information&lt;/A&gt;.                
            </javadoc>
            <declaration name="SEPARATE_DOCUMENTS_COLLATED_COPIES" type="MultipleDocumentHandling" line="147"/>
            <javadoc line="147">
                Separate documents collated copies -- see above for
                  &lt;A HREF=&quot;#sdccfi&quot;&gt;further information&lt;/A&gt;.                
            </javadoc>
            <declaration name="SINGLE_DOCUMENT_NEW_SHEET" type="MultipleDocumentHandling" line="152"/>
            <javadoc line="152">
                Single document new sheet -- see above for
                  &lt;A HREF=&quot;#sdnsfi&quot;&gt;further information&lt;/A&gt;.                
            </javadoc>
            <javadoc line="157">
                Construct a new multiple document handling enumeration value with the
                  given integer value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="MultipleDocumentHandling" type="constructor" line="162">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="165"/>
            <declaration name="myEnumValueTable" type="MultipleDocumentHandling[]" line="166"/>
            <javadoc line="167">
                Returns the string table for class MultipleDocumentHandling.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="170"/>
            <javadoc line="173">
                Returns the enumeration value table for class MultipleDocumentHandling.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="176"/>
            <javadoc line="179">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class MultipleDocumentHandling and any vendor-defined subclasses,
                  the category is class MultipleDocumentHandling itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="187"/>
            <javadoc line="190">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class MultipleDocumentHandling and any vendor-defined subclasses,
                  the category name is &lt;CODE&gt;&quot;multiple-document-handling&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="198"/>
        </class>
    </source>