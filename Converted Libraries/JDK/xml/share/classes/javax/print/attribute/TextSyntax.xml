<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.Serializable"/>
        <import package="java.util.Locale"/>
        <class name="TextSyntax" line="32">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="32">
                Class TextSyntax is an abstract base class providing the common
                  implementation of all attributes whose value is a string. The text attribute
                  includes a locale to indicate the natural language. Thus, a text attribute
                  always represents a localized string. Once constructed, a text attribute&apos;s
                  value is immutable.
                  &lt;P&gt;                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="45"/>
            <declaration name="value" type="String" line="47"/>
            <javadoc line="47">
                String value of this text attribute.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="locale" type="Locale" line="53"/>
            <javadoc line="53">
                Locale of this text attribute.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="59">
                Constructs a TextAttribute with the specified string and locale.                
                <param>
                    value   Text string.                    
                </param>
                <param>
                    locale  Natural language of the text string. null
                      is interpreted to mean the default locale for as returned
                      by <code>Locale.getDefault()</code>                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if <CODE>value</CODE> is null.                    
                </exception>
            </javadoc>
            <method name="TextSyntax" type="constructor" line="70">
                <params>
                    <param name="value" type="String"/>
                    <param name="locale" type="Locale"/>
                </params>
            </method>
            <method name="verify" type="String" line="75">
                <params>
                    <param name="value" type="String"/>
                </params>
                <scope line="76"/>
            </method>
            <method name="verify" type="Locale" line="82">
                <params>
                    <param name="locale" type="Locale"/>
                </params>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Returns this text attribute&apos;s text string.                
                <return>
                    the text string.                    
                </return>
            </javadoc>
            <method name="getValue" type="String" line="93"/>
            <javadoc line="97">
                Returns this text attribute&apos;s text string&apos;s natural language (locale).                
                <return>
                    the locale                    
                </return>
            </javadoc>
            <method name="getLocale" type="Locale" line="101"/>
            <javadoc line="105">
                Returns a hashcode for this text attribute.                
                <return>
                    A hashcode value for this object.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="110"/>
            <javadoc line="114">
                Returns whether this text attribute is equivalent to the passed in
                  object. To be equivalent, all of the following conditions must be true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class TextSyntax.
                  &lt;LI&gt;
                  This text attribute&apos;s underlying string and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s
                  underlying string are equal.
                  &lt;LI&gt;
                  This text attribute&apos;s locale and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s locale are
                  equal.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if <CODE>object</CODE> is equivalent to this text
                      attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="135">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="142">
                Returns a String identifying this text attribute. The String is
                  the attribute&apos;s underlying text string.                
                <return>
                    A String identifying this object.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="148"/>
        </class>
    </source>