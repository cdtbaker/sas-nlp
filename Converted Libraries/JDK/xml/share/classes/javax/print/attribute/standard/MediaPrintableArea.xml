<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.DocAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <class name="MediaPrintableArea" line="6">
            <implements interface="DocAttribute"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="6">
                Class MediaPrintableArea is a printing attribute used to distinguish
                  the printable and non-printable areas of media.
                  &lt;p&gt;
                  The printable area is specified to be a rectangle, within the overall
                  dimensions of a media.
                  &lt;p&gt;
                  Most printers cannot print on the entire surface of the media, due
                  to printer hardware limitations. This class can be used to query
                  the acceptable values for a supposed print job, and to request an area
                  within the constraints of the printable area to be used in a print job.
                  &lt;p&gt;
                  To query for the printable area, a client must supply a suitable context.
                  Without specifying at the very least the size of the media being used
                  no meaningful value for printable area can be obtained.
                  &lt;p&gt;
                  The attribute is not described in terms of the distance from the edge
                  of the paper, in part to emphasise that this attribute is not independent
                  of a particular media, but must be described within the context of a
                  choice of other attributes. Additionally it is usually more convenient
                  for a client to use the printable area.
                  &lt;p&gt;
                  The hardware&apos;s minimum margins is not just a property of the printer,
                  but may be a function of the media size, orientation, media type, and
                  any specified finishings.
                  &lt;code&gt;PrintService&lt;/code&gt; provides the method to query the supported
                  values of an attribute in a suitable context :
                  See  {@link javax.print.PrintService#getSupportedAttributeValues(Class,DocFlavor,AttributeSet) &lt;code&gt;PrintService.getSupportedAttributeValues()&lt;/code&gt;}&lt;p&gt;
                  The rectangular printable area is defined thus:
                  The (x,y) origin is positioned at the top-left of the paper in portrait
                  mode regardless of the orientation specified in the requesting context.
                  For example a printable area for A4 paper in portrait or landscape
                  orientation will have height &gt; width.
                  &lt;p&gt;
                  A printable area attribute&apos;s values are stored
                  internally as integers in units of micrometers (&amp;#181;m), where 1 micrometer
                  = 10&lt;SUP&gt;-6&lt;/SUP&gt; meter = 1/1000 millimeter = 1/25400 inch. This permits
                  dimensions to be represented exactly to a precision of 1/1000 mm (= 1
                  &amp;#181;m) or 1/100 inch (= 254 &amp;#181;m). If fractional inches are expressed in
                  negative powers of two, this permits dimensions to be represented exactly to
                  a precision of 1/8 inch (= 3175 &amp;#181;m) but not 1/16 inch (because 1/16 inch
                  does not equal an integral number of &amp;#181;m).
                  &lt;p&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; MediaPrintableArea is not an IPP attribute.                
            </javadoc>
            <declaration name="x" type="int" line="52"/>
            <declaration name="units" type="int" line="53"/>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <declaration name="INCH" type="int" line="55"/>
            <javadoc line="55">
                Value to indicate units of inches (in). It is actually the conversion
                  factor by which to multiply inches to yield &amp;#181;m (25400).                
            </javadoc>
            <declaration name="MM" type="int" line="60"/>
            <javadoc line="60">
                Value to indicate units of millimeters (mm). It is actually the
                  conversion factor by which to multiply mm to yield &amp;#181;m (1000).                
            </javadoc>
            <javadoc line="65">
                Constructs a MediaPrintableArea object from floating point values.                
                <param>
                    x      printable x                    
                </param>
                <param>
                    y      printable y                    
                </param>
                <param>
                    w      printable width                    
                </param>
                <param>
                    h      printable height                    
                </param>
                <param>
                    units  in which the values are expressed.                    
                </param>
                <exception>
                    IllegalArgumentExceptionThrown if <CODE>x</CODE> < 0 or <CODE>y</CODE> < 0
                      or <CODE>w</CODE> <= 0 or <CODE>h</CODE> <= 0 or
                      <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="MediaPrintableArea" type="constructor" line="76">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="w" type="float"/>
                    <param name="h" type="float"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="77"/>
            </method>
            <javadoc line="85">
                Constructs a MediaPrintableArea object from integer values.                
                <param>
                    x      printable x                    
                </param>
                <param>
                    y      printable y                    
                </param>
                <param>
                    w      printable width                    
                </param>
                <param>
                    h      printable height                    
                </param>
                <param>
                    units  in which the values are expressed.                    
                </param>
                <exception>
                    IllegalArgumentExceptionThrown if <CODE>x</CODE> < 0 or <CODE>y</CODE> < 0
                      or <CODE>w</CODE> <= 0 or <CODE>h</CODE> <= 0 or
                      <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="MediaPrintableArea" type="constructor" line="96">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="97"/>
            </method>
            <javadoc line="105">
                Get the printable area as an array of 4 values in the order
                  x, y, w, h. The values returned are in the given units.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    printable area as array of x, y, w, h in the specified units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getPrintableArea" type="float[]" line="112">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="115">
                Get the x location of the origin of the printable area in the
                  specified units.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    x location of the origin of the printable area in the
                      specified units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getX" type="float" line="123">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="126">
                Get the y location of the origin of the printable area in the
                  specified units.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    y location of the origin of the printable area in the
                      specified units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getY" type="float" line="134">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Get the width of the printable area in the specified units.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    width of the printable area in the specified units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getWidth" type="float" line="143">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="146">
                Get the height of the printable area in the specified units.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <return>
                    height of the printable area in the specified units.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="getHeight" type="float" line="152">
                <params>
                    <param name="units" type="int"/>
                </params>
            </method>
            <javadoc line="155">
                Returns whether this media margins attribute is equivalent to the passed
                  in object.
                  To be equivalent, all of the following conditions must be true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class MediaPrintableArea.
                  &lt;LI&gt;
                  The origin and dimensions are the same.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if <CODE>object</CODE> is equivalent to this media margins
                      attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="171">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <declaration name="ret" type="boolean" line="172"/>
                <scope line="173">
                    <declaration name="mm" type="MediaPrintableArea" line="174"/>
                    <scope line="175"/>
                </scope>
            </method>
            <javadoc line="181">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class MediaPrintableArea, the category is
                  class MediaPrintableArea itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="189"/>
            <javadoc line="192">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class MediaPrintableArea,
                  the category name is &lt;CODE&gt;&quot;media-printable-area&quot;&lt;/CODE&gt;.
                  &lt;p&gt;This is not an IPP V1.1 attribute.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="201"/>
            <javadoc line="204">
                Returns a string version of this rectangular size attribute in the
                  given units.                
                <param>
                    unitsUnit conversion factor, e.g. {@link #INCH <CODE>INCH</CODE>} or{@link #MM <CODE>MM</CODE>}.                    
                </param>
                <param>
                    unitsNameUnits name string, e.g. <CODE>"in"</CODE> or <CODE>"mm"</CODE>. If
                      null, no units name is appended to the result.                    
                </param>
                <return>
                    String version of this two-dimensional size attribute.                    
                </return>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if <CODE>units</CODE> < 1.                    
                </exception>
            </javadoc>
            <method name="toString" type="String" line="213">
                <params>
                    <param name="units" type="int"/>
                    <param name="unitsName" type="String"/>
                </params>
                <scope line="214"/>
                <declaration name="vals" type="float[]" line="217"/>
                <declaration name="str" type="String" line="218"/>
            </method>
            <javadoc line="221">
                Returns a string version of this rectangular size attribute in mm.                
            </javadoc>
            <method name="toString" type="String" line="224"/>
            <javadoc line="227">
                Returns a hash code value for this attribute.                
            </javadoc>
            <method name="hashCode" type="int" line="230"/>
            <method name="convertFromMicrometers" type="float" line="233">
                <params>
                    <param name="x" type="int"/>
                    <param name="units" type="int"/>
                </params>
                <scope line="234"/>
            </method>
        </class>
    </source>