<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.DocAttribute"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="Sides" line="7">
            <extends class="EnumSyntax"/>
            <implements interface="DocAttribute"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="7">
                Class Sides is a printing attribute class, an enumeration, that specifies
                  how print-stream pages are to be imposed upon the sides of an instance of a
                  selected medium, i.e., an impression.
                  &lt;P&gt;
                  The effect of a Sides attribute on a multidoc print job (a job with multiple
                  documents) depends on whether all the docs have the same sides values
                  specified or whether different docs have different sides values specified,
                  and on the (perhaps defaulted) value of the {@link MultipleDocumentHandlingMultipleDocumentHandling} attribute.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  If all the docs have the same sides value &lt;I&gt;n&lt;/I&gt; specified, then any value
                  of {@link MultipleDocumentHandling MultipleDocumentHandling} makes sense,
                  and the printer&apos;s processing depends on the {@link MultipleDocumentHandlingMultipleDocumentHandling} value:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT -- All the input docs will be combined together into one
                  output document. Each media sheet will consist of &lt;I&gt;n&lt;/I&gt; impressions from
                  the output document.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together
                  into one output document. Each media sheet will consist of &lt;I&gt;n&lt;/I&gt;
                  impressions from the output document. However, the first impression of each
                  input doc will always start on a new media sheet; this means the last media
                  sheet of an input doc may have only one impression on it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The input docs will remain separate.
                  Each media sheet will consist of &lt;I&gt;n&lt;/I&gt; impressions from the input doc.
                  Since the input docs are separate, the first impression of each input doc
                  will always start on a new media sheet; this means the last media sheet of
                  an input doc may have only one impression on it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- The input docs will remain separate.
                  Each media sheet will consist of &lt;I&gt;n&lt;/I&gt; impressions from the input doc.
                  Since the input docs are separate, the first impression of each input doc
                  will always start on a new media sheet; this means the last media sheet of
                  an input doc may have only one impression on it.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT -- All the input docs will be combined together into one
                  output document. Each media sheet will consist of &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt;
                  impressions from the output document, where &lt;I&gt;i&lt;/I&gt; is the number of the
                  input doc corresponding to that point in the output document. When the next
                  input doc has a different sides value from the previous input doc, the first
                  print-stream page of the next input doc goes at the start of the next media
                  sheet, possibly leaving only one impression on the previous media sheet.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together
                  into one output document. Each media sheet will consist of &lt;I&gt;n&lt;/I&gt;
                  impressions from the output document. However, the first impression of each
                  input doc will always start on a new media sheet; this means the last
                  impression of an input doc may have only one impression on it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The input docs will remain separate.
                  For input doc &lt;I&gt;i,&lt;/I&gt; each media sheet will consist of &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt;
                  impressions from the input doc. Since the input docs are separate, the first
                  impression of each input doc will always start on a new media sheet; this
                  means the last media sheet of an input doc may have only one impression on
                  it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- The input docs will remain separate.
                  For input doc &lt;I&gt;i,&lt;/I&gt; each media sheet will consist of &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt;
                  impressions from the input doc. Since the input docs are separate, the first
                  impression of each input doc will always start on a new media sheet; this
                  means the last media sheet of an input doc may have only one impression on
                  it.
                  &lt;/UL&gt;
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The category name returned by
                  &lt;CODE&gt;getName()&lt;/CODE&gt; is the IPP attribute name.  The enumeration&apos;s
                  integer value is the IPP enum value.  The &lt;code&gt;toString()&lt;/code&gt; method
                  returns the IPP string representation of the attribute value.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="92"/>
            <declaration name="ONE_SIDED" type="Sides" line="93"/>
            <javadoc line="93">
                Imposes each consecutive print-stream page upon the same side of
                  consecutive media sheets.                
            </javadoc>
            <declaration name="TWO_SIDED_LONG_EDGE" type="Sides" line="98"/>
            <javadoc line="98">
                Imposes each consecutive pair of print-stream pages upon front and back
                  sides of consecutive media sheets, such that the orientation of each
                  pair of print-stream pages on the medium would be correct for the
                  reader as if for binding on the long edge. This imposition is also
                  known as &quot;duplex&quot; (see {@link #DUPLEX &lt;CODE&gt;DUPLEX&lt;/CODE&gt;}).                
            </javadoc>
            <declaration name="TWO_SIDED_SHORT_EDGE" type="Sides" line="106"/>
            <javadoc line="106">
                Imposes each consecutive pair of print-stream pages upon front and back
                  sides of consecutive media sheets, such that the orientation of each
                  pair of print-stream pages on the medium would be correct for the
                  reader as if for binding on the short edge. This imposition is also
                  known as &quot;tumble&quot; (see {@link #TUMBLE &lt;CODE&gt;TUMBLE&lt;/CODE&gt;}).                
            </javadoc>
            <declaration name="DUPLEX" type="Sides" line="114"/>
            <javadoc line="114">
                An alias for &quot;two sided long edge&quot; (see {@link #TWO_SIDED_LONG_EDGE&lt;CODE&gt;TWO_SIDED_LONG_EDGE&lt;/CODE&gt;}).                
            </javadoc>
            <declaration name="TUMBLE" type="Sides" line="118"/>
            <javadoc line="118">
                An alias for &quot;two sided short edge&quot; (see {@link #TWO_SIDED_SHORT_EDGE&lt;CODE&gt;TWO_SIDED_SHORT_EDGE&lt;/CODE&gt;}).                
            </javadoc>
            <javadoc line="122">
                Construct a new sides enumeration value with the given integer value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="Sides" type="constructor" line="126">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="129"/>
            <declaration name="myEnumValueTable" type="Sides[]" line="130"/>
            <javadoc line="131">
                Returns the string table for class Sides.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="134"/>
            <javadoc line="137">
                Returns the enumeration value table for class Sides.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="140"/>
            <javadoc line="143">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class Sides, the category is class Sides itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="150"/>
            <javadoc line="153">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class Sides, the category name is &lt;CODE&gt;&quot;sides&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="160"/>
        </class>
    </source>