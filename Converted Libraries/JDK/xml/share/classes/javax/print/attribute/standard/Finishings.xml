<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.DocAttribute"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="Finishings" line="7">
            <extends class="EnumSyntax"/>
            <implements interface="DocAttribute"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="7">
                Class Finishings is a printing attribute class, an enumeration, that
                  identifies whether the printer applies a finishing operation of some kind
                  of binding to each copy of each printed document in the job. For multidoc
                  print jobs (jobs with multiple documents), the{@link MultipleDocumentHandlingMultipleDocumentHandling} attribute determines what constitutes a &quot;copy&quot;
                  for purposes of finishing.
                  &lt;P&gt;
                  Standard Finishings values are:
                  &lt;TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100% SUMMARY=&quot;layout&quot;&gt;
                  &lt;TR&gt;
                  &lt;TD WIDTH=10%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #NONE &lt;CODE&gt;NONE&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE &lt;CODE&gt;STAPLE&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=36%&gt;{@link #EDGE_STITCH &lt;CODE&gt;EDGE_STITCH&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;TD&gt;{@link #BIND &lt;CODE&gt;BIND&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD&gt;{@link #SADDLE_STITCH &lt;CODE&gt;SADDLE_STITCH&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD&gt;{@link #COVER &lt;CODE&gt;COVER&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  The following Finishings values are more specific; they indicate a
                  corner or an edge as if the document were a portrait document:
                  &lt;TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0 WIDTH=100% SUMMARY=&quot;layout&quot;&gt;
                  &lt;TR&gt;
                  &lt;TD WIDTH=10%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_TOP_LEFT &lt;CODE&gt;STAPLE_TOP_LEFT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #EDGE_STITCH_LEFT &lt;CODE&gt;EDGE_STITCH_LEFT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_DUAL_LEFT &lt;CODE&gt;STAPLE_DUAL_LEFT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=9%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD WIDTH=10%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_BOTTOM_LEFT &lt;CODE&gt;STAPLE_BOTTOM_LEFT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #EDGE_STITCH_TOP &lt;CODE&gt;EDGE_STITCH_TOP&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_DUAL_TOP &lt;CODE&gt;STAPLE_DUAL_TOP&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=9%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD WIDTH=10%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_TOP_RIGHT &lt;CODE&gt;STAPLE_TOP_RIGHT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #EDGE_STITCH_RIGHT &lt;CODE&gt;EDGE_STITCH_RIGHT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_DUAL_RIGHT &lt;CODE&gt;STAPLE_DUAL_RIGHT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=9%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;TR&gt;
                  &lt;TD WIDTH=10%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_BOTTOM_RIGHT &lt;CODE&gt;STAPLE_BOTTOM_RIGHT&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #EDGE_STITCH_BOTTOM &lt;CODE&gt;EDGE_STITCH_BOTTOM&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=27%&gt;{@link #STAPLE_DUAL_BOTTOM &lt;CODE&gt;STAPLE_DUAL_BOTTOM&lt;/CODE&gt;}&lt;/TD&gt;
                  &lt;TD WIDTH=9%&gt;
                  &amp;nbsp;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;P&gt;
                  The &lt;CODE&gt;STAPLE_&lt;I&gt;XXX&lt;/I&gt;&lt;/CODE&gt; values are specified with respect to the
                  document as if the document were a portrait document. If the document is
                  actually a landscape or a reverse-landscape document, the client supplies the
                  appropriate transformed value. For example, to position a staple in the upper
                  left hand corner of a landscape document when held for reading, the client
                  supplies the &lt;CODE&gt;STAPLE_BOTTOM_LEFT&lt;/CODE&gt; value (since landscape is
                  defined as a +90 degree rotation from portrait, i.e., anti-clockwise). On the
                  other hand, to position a staple in the upper left hand corner of a
                  reverse-landscape document when held for reading, the client supplies the
                  &lt;CODE&gt;STAPLE_TOP_RIGHT&lt;/CODE&gt; value (since reverse-landscape is defined as a
                  -90 degree rotation from portrait, i.e., clockwise).
                  &lt;P&gt;
                  The angle (vertical, horizontal, angled) of each staple with respect to the
                  document depends on the implementation which may in turn depend on the value
                  of the attribute.
                  &lt;P&gt;
                  The effect of a Finishings attribute on a multidoc print job (a job
                  with multiple documents) depends on whether all the docs have the same
                  binding specified or whether different docs have different bindings
                  specified, and on the (perhaps defaulted) value of the {@link MultipleDocumentHandling MultipleDocumentHandling} attribute.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  If all the docs have the same binding specified, then any value of {@link MultipleDocumentHandling MultipleDocumentHandling} makes sense, and the
                  printer&apos;s processing depends on the {@link MultipleDocumentHandlingMultipleDocumentHandling} value:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT -- All the input docs will be bound together as one output
                  document with the specified binding.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be bound together as one
                  output document with the specified binding, and the first impression of each
                  input doc will always start on a new media sheet.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each input doc will be bound
                  separately with the specified binding.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- Each input doc will be bound separately
                  with the specified binding.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;LI&gt;
                  If different docs have different bindings specified, then only two values of{@link MultipleDocumentHandling MultipleDocumentHandling} make sense, and the
                  printer reports an error when the job is submitted if any other value is
                  specified:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- Each input doc will be bound
                  separately with its own specified binding.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- Each input doc will be bound separately
                  with its own specified binding.
                  &lt;/UL&gt;
                  &lt;/UL&gt;
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; Class Finishings encapsulates some of the
                  IPP enum values that can be included in an IPP &quot;finishings&quot; attribute, which
                  is a set of enums. The category name returned by
                  &lt;CODE&gt;getName()&lt;/CODE&gt; is the IPP attribute name.  The enumeration&apos;s
                  integer value is the IPP enum value.  The &lt;code&gt;toString()&lt;/code&gt; method
                  returns the IPP string representation of the attribute value.
                  In IPP Finishings is a multi-value attribute, this API currently allows
                  only one binding to be specified.                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="155"/>
            <declaration name="NONE" type="Finishings" line="156"/>
            <javadoc line="156">
                Perform no binding.                
            </javadoc>
            <declaration name="STAPLE" type="Finishings" line="160"/>
            <javadoc line="160">
                Bind the document(s) with one or more staples. The exact number and
                  placement of the staples is site-defined.                
            </javadoc>
            <declaration name="COVER" type="Finishings" line="165"/>
            <javadoc line="165">
                This value is specified when it is desired to select a non-printed (or
                  pre-printed) cover for the document. This does not supplant the
                  specification of a printed cover (on cover stock medium) by the
                  document  itself.                
            </javadoc>
            <declaration name="BIND" type="Finishings" line="172"/>
            <javadoc line="172">
                This value indicates that a binding is to be applied to the document;
                  the type and placement of the binding is site-defined.                
            </javadoc>
            <declaration name="SADDLE_STITCH" type="Finishings" line="177"/>
            <javadoc line="177">
                Bind the document(s) with one or more staples (wire stitches) along the
                  middle fold. The exact number and placement of the staples and the
                  middle fold is implementation- and/or site-defined.                
            </javadoc>
            <declaration name="EDGE_STITCH" type="Finishings" line="183"/>
            <javadoc line="183">
                Bind the document(s) with one or more staples (wire stitches) along one
                  edge. The exact number and placement of the staples is implementation-
                  and/or site- defined.                
            </javadoc>
            <declaration name="STAPLE_TOP_LEFT" type="Finishings" line="189"/>
            <javadoc line="189">
                Bind the document(s) with one or more staples in the top left corner.                
            </javadoc>
            <declaration name="STAPLE_BOTTOM_LEFT" type="Finishings" line="193"/>
            <javadoc line="193">
                Bind the document(s) with one or more staples in the bottom left
                  corner.                
            </javadoc>
            <declaration name="STAPLE_TOP_RIGHT" type="Finishings" line="198"/>
            <javadoc line="198">
                Bind the document(s) with one or more staples in the top right corner.                
            </javadoc>
            <declaration name="STAPLE_BOTTOM_RIGHT" type="Finishings" line="202"/>
            <javadoc line="202">
                Bind the document(s) with one or more staples in the bottom right
                  corner.                
            </javadoc>
            <declaration name="EDGE_STITCH_LEFT" type="Finishings" line="207"/>
            <javadoc line="207">
                Bind the document(s) with one or more staples (wire stitches) along the
                  left edge. The exact number and placement of the staples is
                  implementation- and/or site-defined.                
            </javadoc>
            <declaration name="EDGE_STITCH_TOP" type="Finishings" line="213"/>
            <javadoc line="213">
                Bind the document(s) with one or more staples (wire stitches) along the
                  top edge. The exact number and placement of the staples is
                  implementation- and/or site-defined.                
            </javadoc>
            <declaration name="EDGE_STITCH_RIGHT" type="Finishings" line="219"/>
            <javadoc line="219">
                Bind the document(s) with one or more staples (wire stitches) along the
                  right edge. The exact number and placement of the staples is
                  implementation- and/or site-defined.                
            </javadoc>
            <declaration name="EDGE_STITCH_BOTTOM" type="Finishings" line="225"/>
            <javadoc line="225">
                Bind the document(s) with one or more staples (wire stitches) along the
                  bottom edge. The exact number and placement of the staples is
                  implementation- and/or site-defined.                
            </javadoc>
            <declaration name="STAPLE_DUAL_LEFT" type="Finishings" line="231"/>
            <javadoc line="231">
                Bind the document(s) with two staples (wire stitches) along the left
                  edge assuming a portrait document (see above).                
            </javadoc>
            <declaration name="STAPLE_DUAL_TOP" type="Finishings" line="236"/>
            <javadoc line="236">
                Bind the document(s) with two staples (wire stitches) along the top
                  edge assuming a portrait document (see above).                
            </javadoc>
            <declaration name="STAPLE_DUAL_RIGHT" type="Finishings" line="241"/>
            <javadoc line="241">
                Bind the document(s) with two staples (wire stitches) along the right
                  edge assuming a portrait document (see above).                
            </javadoc>
            <declaration name="STAPLE_DUAL_BOTTOM" type="Finishings" line="246"/>
            <javadoc line="246">
                Bind the document(s) with two staples (wire stitches) along the bottom
                  edge assuming a portrait document (see above).                
            </javadoc>
            <javadoc line="251">
                Construct a new finishings binding enumeration value with the given
                  integer value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="Finishings" type="constructor" line="256">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="259"/>
            <declaration name="myEnumValueTable" type="Finishings[]" line="260"/>
            <javadoc line="261">
                Returns the string table for class Finishings.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="264"/>
            <javadoc line="267">
                Returns the enumeration value table for class Finishings.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="270"/>
            <javadoc line="273">
                Returns the lowest integer value used by class Finishings.                
            </javadoc>
            <method name="getOffset" type="int" line="276"/>
            <javadoc line="279">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class Finishings and any vendor-defined subclasses, the
                  category is class Finishings itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="287"/>
            <javadoc line="290">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class Finishings and any vendor-defined subclasses, the
                  category name is &lt;CODE&gt;&quot;finishings&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="298"/>
        </class>
    </source>