<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <class name="SetOfIntegerSyntax" line="4">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="4">
                Class SetOfIntegerSyntax is an abstract base class providing the common
                  implementation of all attributes whose value is a set of nonnegative
                  integers. This includes attributes whose value is a single range of integers
                  and attributes whose value is a set of ranges of integers.
                  &lt;P&gt;
                  You can construct an instance of SetOfIntegerSyntax by giving it in &quot;string
                  form.&quot; The string consists of zero or more comma-separated integer groups.
                  Each integer group consists of either one integer, two integers separated by
                  a hyphen (&lt;CODE&gt;-&lt;/CODE&gt;), or two integers separated by a colon
                  (&lt;CODE&gt;:&lt;/CODE&gt;). Each integer consists of one or more decimal digits
                  (&lt;CODE&gt;0&lt;/CODE&gt; through &lt;CODE&gt;9&lt;/CODE&gt;). Whitespace characters cannot
                  appear within an integer but are otherwise ignored. For example:
                  &lt;CODE&gt;&quot;&quot;&lt;/CODE&gt;, &lt;CODE&gt;&quot;1&quot;&lt;/CODE&gt;, &lt;CODE&gt;&quot;5-10&quot;&lt;/CODE&gt;, &lt;CODE&gt;&quot;1:2,
                  4&quot;&lt;/CODE&gt;.
                  &lt;P&gt;
                  You can also construct an instance of SetOfIntegerSyntax by giving it in
                  &quot;array form.&quot; Array form consists of an array of zero or more integer groups
                  where each integer group is a length-1 or length-2 array of
                  &lt;CODE&gt;int&lt;/CODE&gt;s; for example, &lt;CODE&gt;int[0][]&lt;/CODE&gt;,
                  &lt;CODE&gt;int[][]{{1}}&lt;/CODE&gt;, &lt;CODE&gt;int[][]{{5,10}}&lt;/CODE&gt;,
                  &lt;CODE&gt;int[][]{{1,2},{4}}&lt;/CODE&gt;.
                  &lt;P&gt;
                  In both string form and array form, each successive integer group gives a
                  range of integers to be included in the set. The first integer in each group
                  gives the lower bound of the range; the second integer in each group gives
                  the upper bound of the range; if there is only one integer in the group, the
                  upper bound is the same as the lower bound. If the upper bound is less than
                  the lower bound, it denotes a null range (no values). If the upper bound is
                  equal to the lower bound, it denotes a range consisting of a single value. If
                  the upper bound is greater than the lower bound, it denotes a range
                  consisting of more than one value. The ranges may appear in any order and are
                  allowed to overlap. The union of all the ranges gives the set&apos;s contents.
                  Once a SetOfIntegerSyntax instance is constructed, its value is immutable.
                  &lt;P&gt;
                  The SetOfIntegerSyntax object&apos;s value is actually stored in &quot;&lt;I&gt;canonical&lt;/I&gt;
                  array form.&quot; This is the same as array form, except there are no null ranges;
                  the members of the set are represented in as few ranges as possible (i.e.,
                  overlapping ranges are coalesced); the ranges appear in ascending order; and
                  each range is always represented as a length-two array of &lt;CODE&gt;int&lt;/CODE&gt;s
                  in the form {lower bound, upper bound}. An empty set is represented as a
                  zero-length array.
                  &lt;P&gt;
                  Class SetOfIntegerSyntax has operations to return the set&apos;s members in
                  canonical array form, to test whether a given integer is a member of the
                  set, and to iterate through the members of the set.
                  &lt;P&gt;                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="members" type="int[][]" line="56"/>
            <javadoc line="56">
                This set&apos;s members in canonical array form.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="61">
                Construct a new set-of-integer attribute with the given members in
                  string form.                
                <param>
                    members  Set members in string form. If null, an empty set is
                      constructed.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>members</CODE> does not
                      obey  the proper syntax.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="69">
                <params>
                    <param name="members" type="String"/>
                </params>
            </method>
            <javadoc line="72">
                Parse the given string, returning canonical array form.                
            </javadoc>
            <method name="parse" type="int[][]" line="75">
                <params>
                    <param name="members" type="String"/>
                </params>
                <declaration name="theRanges" type="Vector" line="76"/>
                <declaration name="n" type="int" line="77"/>
                <declaration name="i" type="int" line="78"/>
                <declaration name="state" type="int" line="79"/>
                <declaration name="lb" type="int" line="80"/>
                <declaration name="ub" type="int" line="81"/>
                <declaration name="c" type="char" line="82"/>
                <declaration name="digit" type="int" line="83"/>
                <scope line="84">
                    <scope line="88"/>
                    <scope line="91"/>
                    <scope line="95"/>
                    <scope line="100"/>
                    <scope line="103"/>
                    <scope line="107"/>
                    <scope line="110"/>
                    <scope line="114"/>
                    <scope line="119"/>
                    <scope line="122"/>
                    <scope line="125"/>
                    <scope line="129"/>
                    <scope line="134"/>
                    <scope line="137"/>
                    <scope line="141"/>
                    <scope line="146"/>
                    <scope line="149"/>
                    <scope line="153"/>
                    <scope line="157"/>
                    <scope line="162"/>
                    <scope line="165"/>
                    <scope line="169"/>
                    <scope line="174"/>
                    <scope line="177"/>
                    <scope line="181"/>
                </scope>
            </method>
            <javadoc line="204">
                Accumulate the given range (lb .. ub) into the canonical array form
                  into the given vector of int[] objects.                
            </javadoc>
            <method name="accumulate" type="void" line="208">
                <params>
                    <param name="ranges" type="Vector"/>
                    <param name="lb" type="int"/>
                    <param name="ub" type="int"/>
                </params>
                <scope line="209">
                    <scope line="211">
                        <declaration name="rangea" type="int[]" line="212"/>
                        <declaration name="lba" type="int" line="213"/>
                        <declaration name="uba" type="int" line="214"/>
                        <declaration name="rangeb" type="int[]" line="215"/>
                        <declaration name="lbb" type="int" line="216"/>
                        <declaration name="ubb" type="int" line="217"/>
                        <scope line="218"/>
                        <scope line="222"/>
                        <scope line="226"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="232">
                Convert the given vector of int[] objects to canonical array form.                
            </javadoc>
            <method name="canonicalArrayForm" type="int[][]" line="235">
                <params>
                    <param name="ranges" type="Vector"/>
                </params>
            </method>
            <javadoc line="238">
                Construct a new set-of-integer attribute with the given members in
                  array form.                
                <param>
                    members  Set members in array form. If null, an empty set is
                      constructed.                    
                </param>
                <exception>
                    NullPointerException(Unchecked exception) Thrown if any element of
                      <CODE>members</CODE> is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if any element of
                      <CODE>members</CODE> is not a length-one or length-two array or if
                      any non-null range in <CODE>members</CODE> has a lower bound less
                      than zero.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="250">
                <params>
                    <param name="members" type="int[][]"/>
                </params>
            </method>
            <javadoc line="253">
                Parse the given array form, returning canonical array form.                
            </javadoc>
            <method name="parse" type="int[][]" line="256">
                <params>
                    <param name="members" type="int[][]"/>
                </params>
                <declaration name="ranges" type="Vector" line="257"/>
                <declaration name="n" type="int" line="258"/>
                <scope line="259">
                    <declaration name="lb" type="int" line="260"/>
                    <scope line="261"/>
                    <scope line="264"/>
                    <scope line="268"/>
                    <scope line="271"/>
                </scope>
            </method>
            <javadoc line="278">
                Construct a new set-of-integer attribute containing a single integer.                
                <param>
                    member  Set member.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>member</CODE> is less than
                      zero.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="284">
                <params>
                    <param name="member" type="int"/>
                </params>
                <scope line="285"/>
            </method>
            <javadoc line="290">
                Construct a new set-of-integer attribute containing a single range of
                  integers. If the lower bound is greater than the upper bound (a null
                  range), an empty set is constructed.                
                <param>
                    lowerBound  Lower bound of the range.                    
                </param>
                <param>
                    upperBound  Upper bound of the range.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if the range is non-null and
                      <CODE>lowerBound</CODE> is less than zero.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="299">
                <params>
                    <param name="lowerBound" type="int"/>
                    <param name="upperBound" type="int"/>
                </params>
                <scope line="300"/>
            </method>
            <javadoc line="305">
                Obtain this set-of-integer attribute&apos;s members in canonical array form.
                  The returned array is &quot;safe;&quot; the client may alter it without affecting
                  this set-of-integer attribute.                
                <return>
                    This set-of-integer attribute's members in canonical array form.                    
                </return>
            </javadoc>
            <method name="getMembers" type="int[][]" line="311">
                <declaration name="n" type="int" line="312"/>
                <declaration name="result" type="int[][]" line="313"/>
                <scope line="314"/>
            </method>
            <javadoc line="319">
                Determine if this set-of-integer attribute contains the given value.                
                <param>
                    x  Integer value.                    
                </param>
                <return>
                    True if this set-of-integer attribute contains the value
                      <CODE>x</CODE>, false otherwise.                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="325">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="n" type="int" line="326"/>
                <scope line="327">
                    <scope line="328"/>
                    <scope line="331"/>
                </scope>
            </method>
            <javadoc line="337">
                Determine if this set-of-integer attribute contains the given integer
                  attribute&apos;s value.                
                <param>
                    attribute  Integer attribute.                    
                </param>
                <return>
                    True if this set-of-integer attribute contains
                      <CODE>theAttribute</CODE>'s value, false otherwise.                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="344">
                <params>
                    <param name="attribute" type="IntegerSyntax"/>
                </params>
            </method>
            <javadoc line="347">
                Determine the smallest integer in this set-of-integer attribute that is
                  greater than the given value. If there are no integers in this
                  set-of-integer attribute greater than the given value, &lt;CODE&gt;-1&lt;/CODE&gt; is
                  returned. (Since a set-of-integer attribute can only contain nonnegative
                  values, &lt;CODE&gt;-1&lt;/CODE&gt; will never appear in the set.) You can use the
                  &lt;CODE&gt;next()&lt;/CODE&gt; method to iterate through the integer values in a
                  set-of-integer attribute in ascending order, like this:
                  &lt;PRE&gt;
                  SetOfIntegerSyntax attribute = . . .;
                  int i = -1;
                  while ((i = attribute.next (i)) != -1)
                  {
                  foo (i);
                  }
                  &lt;/PRE&gt;                
                <param>
                    x  Integer value.                    
                </param>
                <return>
                    The smallest integer in this set-of-integer attribute that is
                      greater than <CODE>x</CODE>, or <CODE>-1</CODE> if no integer in
                      this set-of-integer attribute is greater than <CODE>x</CODE>.                    
                </return>
            </javadoc>
            <method name="next" type="int" line="368">
                <params>
                    <param name="x" type="int"/>
                </params>
                <declaration name="n" type="int" line="369"/>
                <scope line="370">
                    <scope line="371"/>
                    <scope line="374"/>
                </scope>
            </method>
            <javadoc line="380">
                Returns whether this set-of-integer attribute is equivalent to the passed
                  in object. To be equivalent, all of the following conditions must be
                  true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class SetOfIntegerSyntax.
                  &lt;LI&gt;
                  This set-of-integer attribute&apos;s members and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s
                  members are the same.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if <CODE>object</CODE> is equivalent to this
                      set-of-integer attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="397">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="398">
                    <declaration name="myMembers" type="int[][]" line="399"/>
                    <declaration name="otherMembers" type="int[][]" line="400"/>
                    <declaration name="m" type="int" line="401"/>
                    <declaration name="n" type="int" line="402"/>
                    <scope line="403">
                        <scope line="404">
                            <scope line="405"/>
                        </scope>
                    </scope>
                    <scope line="411"/>
                </scope>
                <scope line="415"/>
            </method>
            <javadoc line="419">
                Returns a hash code value for this set-of-integer attribute. The hash
                  code is the sum of the lower and upper bounds of the ranges in the
                  canonical array form, or 0 for an empty set.                
            </javadoc>
            <method name="hashCode" type="int" line="424">
                <declaration name="result" type="int" line="425"/>
                <declaration name="n" type="int" line="426"/>
                <scope line="427"/>
            </method>
            <javadoc line="432">
                Returns a string value corresponding to this set-of-integer attribute.
                  The string value is a zero-length string if this set is empty. Otherwise,
                  the string value is a comma-separated list of the ranges in the canonical
                  array form, where each range is represented as &lt;CODE&gt;&quot;&lt;I&gt;i&lt;/I&gt;&quot;&lt;/CODE&gt; if
                  the lower bound equals the upper bound or
                  &lt;CODE&gt;&quot;&lt;I&gt;i&lt;/I&gt;-&lt;I&gt;j&lt;/I&gt;&quot;&lt;/CODE&gt; otherwise.                
            </javadoc>
            <method name="toString" type="String" line="440">
                <declaration name="result" type="StringBuffer" line="441"/>
                <declaration name="n" type="int" line="442"/>
                <scope line="443">
                    <scope line="444"/>
                    <scope line="448"/>
                </scope>
            </method>
        </class>
    </source>