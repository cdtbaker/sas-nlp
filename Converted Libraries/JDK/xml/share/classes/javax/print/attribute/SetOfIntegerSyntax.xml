<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <class name="SetOfIntegerSyntax" line="32">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="32">
                Class SetOfIntegerSyntax is an abstract base class providing the common
                  implementation of all attributes whose value is a set of nonnegative
                  integers. This includes attributes whose value is a single range of integers
                  and attributes whose value is a set of ranges of integers.
                  &lt;P&gt;
                  You can construct an instance of SetOfIntegerSyntax by giving it in &quot;string
                  form.&quot; The string consists of zero or more comma-separated integer groups.
                  Each integer group consists of either one integer, two integers separated by
                  a hyphen (&lt;CODE&gt;-&lt;/CODE&gt;), or two integers separated by a colon
                  (&lt;CODE&gt;:&lt;/CODE&gt;). Each integer consists of one or more decimal digits
                  (&lt;CODE&gt;0&lt;/CODE&gt; through &lt;CODE&gt;9&lt;/CODE&gt;). Whitespace characters cannot
                  appear within an integer but are otherwise ignored. For example:
                  &lt;CODE&gt;&quot;&quot;&lt;/CODE&gt;, &lt;CODE&gt;&quot;1&quot;&lt;/CODE&gt;, &lt;CODE&gt;&quot;5-10&quot;&lt;/CODE&gt;, &lt;CODE&gt;&quot;1:2,
                  4&quot;&lt;/CODE&gt;.
                  &lt;P&gt;
                  You can also construct an instance of SetOfIntegerSyntax by giving it in
                  &quot;array form.&quot; Array form consists of an array of zero or more integer groups
                  where each integer group is a length-1 or length-2 array of
                  &lt;CODE&gt;int&lt;/CODE&gt;s; for example, &lt;CODE&gt;int[0][]&lt;/CODE&gt;,
                  &lt;CODE&gt;int[][]{{1}}&lt;/CODE&gt;, &lt;CODE&gt;int[][]{{5,10}}&lt;/CODE&gt;,
                  &lt;CODE&gt;int[][]{{1,2},{4}}&lt;/CODE&gt;.
                  &lt;P&gt;
                  In both string form and array form, each successive integer group gives a
                  range of integers to be included in the set. The first integer in each group
                  gives the lower bound of the range; the second integer in each group gives
                  the upper bound of the range; if there is only one integer in the group, the
                  upper bound is the same as the lower bound. If the upper bound is less than
                  the lower bound, it denotes a null range (no values). If the upper bound is
                  equal to the lower bound, it denotes a range consisting of a single value. If
                  the upper bound is greater than the lower bound, it denotes a range
                  consisting of more than one value. The ranges may appear in any order and are
                  allowed to overlap. The union of all the ranges gives the set&apos;s contents.
                  Once a SetOfIntegerSyntax instance is constructed, its value is immutable.
                  &lt;P&gt;
                  The SetOfIntegerSyntax object&apos;s value is actually stored in &quot;&lt;I&gt;canonical&lt;/I&gt;
                  array form.&quot; This is the same as array form, except there are no null ranges;
                  the members of the set are represented in as few ranges as possible (i.e.,
                  overlapping ranges are coalesced); the ranges appear in ascending order; and
                  each range is always represented as a length-two array of &lt;CODE&gt;int&lt;/CODE&gt;s
                  in the form {lower bound, upper bound}. An empty set is represented as a
                  zero-length array.
                  &lt;P&gt;
                  Class SetOfIntegerSyntax has operations to return the set&apos;s members in
                  canonical array form, to test whether a given integer is a member of the
                  set, and to iterate through the members of the set.
                  &lt;P&gt;                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="85"/>
            <declaration name="members" type="int[][]" line="87"/>
            <javadoc line="87">
                This set&apos;s members in canonical array form.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="94">
                Construct a new set-of-integer attribute with the given members in
                  string form.                
                <param>
                    members  Set members in string form. If null, an empty set is
                      constructed.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if &lt;CODE&gt;members&lt;/CODE&gt; does not
                      obey  the proper syntax.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="105">
                <params>
                    <param name="members" type="String"/>
                </params>
            </method>
            <javadoc line="109">
                Parse the given string, returning canonical array form.                
            </javadoc>
            <method name="parse" type="int[][]" line="112">
                <params>
                    <param name="members" type="String"/>
                </params>
                <comment line="114">
                    Create vector to hold int[] elements, each element being one range
                     parsed out of members.                    
                </comment>
                <comment line="118">
                    Run state machine over members.                    
                </comment>
                <comment line="130">
                    Before first integer in first group                    
                </comment>
                <comment line="142">
                    In first integer in a group                    
                </comment>
                <comment line="158">
                    After first integer in a group                    
                </comment>
                <comment line="173">
                    Before second integer in a group                    
                </comment>
                <comment line="184">
                    In second integer in a group                    
                </comment>
                <comment line="198">
                    After second integer in a group                    
                </comment>
                <comment line="209">
                    Before first integer in second or later group                    
                </comment>
                <comment line="222">
                    Finish off the state machine.                    
                </comment>
                <comment line="224">
                    Before first integer in first group                    
                </comment>
                <comment line="226">
                    In first integer in a group                    
                </comment>
                <comment line="227">
                    After first integer in a group                    
                </comment>
                <comment line="230">
                    In second integer in a group                    
                </comment>
                <comment line="231">
                    After second integer in a group                    
                </comment>
                <comment line="234">
                    Before second integer in a group                    
                </comment>
                <comment line="235">
                    Before first integer in second or later group                    
                </comment>
                <comment line="239">
                    Return canonical array form.                    
                </comment>
                <declaration name="theRanges" type="Vector" line="115"/>
                <declaration name="n" type="int" line="118"/>
                <declaration name="i" type="int" line="119"/>
                <declaration name="state" type="int" line="120"/>
                <declaration name="lb" type="int" line="121"/>
                <declaration name="ub" type="int" line="122"/>
                <declaration name="c" type="char" line="123"/>
                <declaration name="digit" type="int" line="124"/>
                <scope line="125">
                    <scope line="130"/>
                    <scope line="133"/>
                    <scope line="136"/>
                    <scope line="142"/>
                    <scope line="144"/>
                    <scope line="147"/>
                    <scope line="149"/>
                    <scope line="152"/>
                    <scope line="158"/>
                    <scope line="161"/>
                    <scope line="164"/>
                    <scope line="167"/>
                    <scope line="173"/>
                    <scope line="175"/>
                    <scope line="178"/>
                    <scope line="184"/>
                    <scope line="186"/>
                    <scope line="189"/>
                    <scope line="192"/>
                    <scope line="198"/>
                    <scope line="200"/>
                    <scope line="203"/>
                    <scope line="209"/>
                    <scope line="211"/>
                    <scope line="214"/>
                </scope>
            </method>
            <javadoc line="242">
                Accumulate the given range (lb .. ub) into the canonical array form
                  into the given vector of int[] objects.                
            </javadoc>
            <method name="accumulate" type="void" line="246">
                <params>
                    <param name="ranges" type="Vector"/>
                    <param name="lb" type="int"/>
                    <param name="ub" type="int"/>
                </params>
                <comment line="248">
                    Make sure range is non-null.                    
                </comment>
                <comment line="250">
                    Stick range at the back of the vector.                    
                </comment>
                <comment line="253">
                    Work towards the front of the vector to integrate the new range
                     with the existing ranges.                    
                </comment>
                <comment line="256">
                    Get lower and upper bounds of the two ranges being compared.                    
                </comment>
                <comment line="264">
                    If the two ranges overlap or are adjacent, coalesce them.
                     The two ranges overlap if the larger lower bound is less
                     than or equal to the smaller upper bound. The two ranges
                     are adjacent if the larger lower bound is one greater
                     than the smaller upper bound.                    
                </comment>
                <comment line="271">
                    The coalesced range is from the smaller lower bound to
                     the larger upper bound.                    
                </comment>
                <comment line="279">
                    If the two ranges don&apos;t overlap and aren&apos;t adjacent but
                     are out of order, swap them.                    
                </comment>
                <comment line="285">
                    If the two ranges don&apos;t overlap and aren&apos;t adjacent and
                     aren&apos;t out of order, we&apos;re done early.                    
                </comment>
                <scope line="248">
                    <scope line="254">
                        <declaration name="rangea" type="int[]" line="256"/>
                        <declaration name="lba" type="int" line="257"/>
                        <declaration name="uba" type="int" line="258"/>
                        <declaration name="rangeb" type="int[]" line="259"/>
                        <declaration name="lbb" type="int" line="260"/>
                        <declaration name="ubb" type="int" line="261"/>
                        <scope line="269"/>
                        <scope line="276"/>
                        <scope line="283"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="293">
                Convert the given vector of int[] objects to canonical array form.                
            </javadoc>
            <method name="canonicalArrayForm" type="int[][]" line="296">
                <params>
                    <param name="ranges" type="Vector"/>
                </params>
            </method>
            <javadoc line="300">
                Construct a new set-of-integer attribute with the given members in
                  array form.                
                <param>
                    members  Set members in array form. If null, an empty set is
                      constructed.                    
                </param>
                <exception>
                    NullPointerException(Unchecked exception) Thrown if any element of
                      &lt;CODE&gt;members&lt;/CODE&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if any element of
                      &lt;CODE&gt;members&lt;/CODE&gt; is not a length-one or length-two array or if
                      any non-null range in &lt;CODE&gt;members&lt;/CODE&gt; has a lower bound less
                      than zero.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="316">
                <params>
                    <param name="members" type="int[][]"/>
                </params>
            </method>
            <javadoc line="320">
                Parse the given array form, returning canonical array form.                
            </javadoc>
            <method name="parse" type="int[][]" line="323">
                <params>
                    <param name="members" type="int[][]"/>
                </params>
                <comment line="325">
                    Create vector to hold int[] elements, each element being one range
                     parsed out of members.                    
                </comment>
                <comment line="329">
                    Process all integer groups in members.                    
                </comment>
                <comment line="332">
                    Get lower and upper bounds of the range.                    
                </comment>
                <comment line="343">
                    Verify valid bounds.                    
                </comment>
                <comment line="348">
                    Accumulate the range.                    
                </comment>
                <comment line="352">
                    Return canonical array form.                    
                </comment>
                <declaration name="ranges" type="Vector" line="326"/>
                <declaration name="n" type="int" line="329"/>
                <scope line="330">
                    <declaration name="lb" type="int" line="332"/>
                    <scope line="333"/>
                    <scope line="335"/>
                    <scope line="338"/>
                    <scope line="343"/>
                </scope>
            </method>
            <javadoc line="355">
                Construct a new set-of-integer attribute containing a single integer.                
                <param>
                    member  Set member.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if &lt;CODE&gt;member&lt;/CODE&gt; is less than
                      zero.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="364">
                <params>
                    <param name="member" type="int"/>
                </params>
                <scope line="365"/>
            </method>
            <javadoc line="371">
                Construct a new set-of-integer attribute containing a single range of
                  integers. If the lower bound is greater than the upper bound (a null
                  range), an empty set is constructed.                
                <param>
                    lowerBound  Lower bound of the range.                    
                </param>
                <param>
                    upperBound  Upper bound of the range.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if the range is non-null and
                      &lt;CODE&gt;lowerBound&lt;/CODE&gt; is less than zero.                    
                </exception>
            </javadoc>
            <method name="SetOfIntegerSyntax" type="constructor" line="383">
                <params>
                    <param name="lowerBound" type="int"/>
                    <param name="upperBound" type="int"/>
                </params>
                <scope line="384"/>
            </method>
            <javadoc line="393">
                Obtain this set-of-integer attribute&apos;s members in canonical array form.
                  The returned array is &quot;safe;&quot; the client may alter it without affecting
                  this set-of-integer attribute.                
                <return>
                    This set-of-integer attribute&apos;s members in canonical array form.                    
                </return>
            </javadoc>
            <method name="getMembers" type="int[][]" line="400">
                <declaration name="n" type="int" line="401"/>
                <declaration name="result" type="int[][]" line="402"/>
                <scope line="403"/>
            </method>
            <javadoc line="409">
                Determine if this set-of-integer attribute contains the given value.                
                <param>
                    x  Integer value.                    
                </param>
                <return>
                    True if this set-of-integer attribute contains the value
                      &lt;CODE&gt;x&lt;/CODE&gt;, false otherwise.                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="417">
                <params>
                    <param name="x" type="int"/>
                </params>
                <comment line="419">
                    Do a linear search to find the range that contains x, if any.                    
                </comment>
                <declaration name="n" type="int" line="419"/>
                <scope line="420">
                    <scope line="421"/>
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="430">
                Determine if this set-of-integer attribute contains the given integer
                  attribute&apos;s value.                
                <param>
                    attribute  Integer attribute.                    
                </param>
                <return>
                    True if this set-of-integer attribute contains
                      &lt;CODE&gt;theAttribute&lt;/CODE&gt;&apos;s value, false otherwise.                    
                </return>
            </javadoc>
            <method name="contains" type="boolean" line="439">
                <params>
                    <param name="attribute" type="IntegerSyntax"/>
                </params>
            </method>
            <javadoc line="443">
                Determine the smallest integer in this set-of-integer attribute that is
                  greater than the given value. If there are no integers in this
                  set-of-integer attribute greater than the given value, &lt;CODE&gt;-1&lt;/CODE&gt; is
                  returned. (Since a set-of-integer attribute can only contain nonnegative
                  values, &lt;CODE&gt;-1&lt;/CODE&gt; will never appear in the set.) You can use the
                  &lt;CODE&gt;next()&lt;/CODE&gt; method to iterate through the integer values in a
                  set-of-integer attribute in ascending order, like this:
                  &lt;PRE&gt;
                  SetOfIntegerSyntax attribute = . . .;
                  int i = -1;
                  while ((i = attribute.next (i)) != -1)
                  {
                  foo (i);
                  }
                  &lt;/PRE&gt;                
                <param>
                    x  Integer value.                    
                </param>
                <return>
                    The smallest integer in this set-of-integer attribute that is
                      greater than &lt;CODE&gt;x&lt;/CODE&gt;, or &lt;CODE&gt;-1&lt;/CODE&gt; if no integer in
                      this set-of-integer attribute is greater than &lt;CODE&gt;x&lt;/CODE&gt;.                    
                </return>
            </javadoc>
            <method name="next" type="int" line="466">
                <params>
                    <param name="x" type="int"/>
                </params>
                <comment line="468">
                    Do a linear search to find the range that contains x, if any.                    
                </comment>
                <declaration name="n" type="int" line="468"/>
                <scope line="469">
                    <scope line="470"/>
                    <scope line="472"/>
                </scope>
            </method>
            <javadoc line="479">
                Returns whether this set-of-integer attribute is equivalent to the passed
                  in object. To be equivalent, all of the following conditions must be
                  true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class SetOfIntegerSyntax.
                  &lt;LI&gt;
                  This set-of-integer attribute&apos;s members and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s
                  members are the same.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if &lt;CODE&gt;object&lt;/CODE&gt; is equivalent to this
                      set-of-integer attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="498">
                <params>
                    <param name="object" type="Object"/>
                </params>
                <scope line="499">
                    <declaration name="myMembers" type="int[][]" line="500"/>
                    <declaration name="otherMembers" type="int[][]" line="501"/>
                    <declaration name="m" type="int" line="502"/>
                    <declaration name="n" type="int" line="503"/>
                    <scope line="504">
                        <scope line="505">
                            <scope line="507"/>
                        </scope>
                    </scope>
                    <scope line="512"/>
                </scope>
                <scope line="515"/>
            </method>
            <javadoc line="520">
                Returns a hash code value for this set-of-integer attribute. The hash
                  code is the sum of the lower and upper bounds of the ranges in the
                  canonical array form, or 0 for an empty set.                
            </javadoc>
            <method name="hashCode" type="int" line="525">
                <declaration name="result" type="int" line="526"/>
                <declaration name="n" type="int" line="527"/>
                <scope line="528"/>
            </method>
            <javadoc line="534">
                Returns a string value corresponding to this set-of-integer attribute.
                  The string value is a zero-length string if this set is empty. Otherwise,
                  the string value is a comma-separated list of the ranges in the canonical
                  array form, where each range is represented as &lt;CODE&gt;&quot;&lt;I&gt;i&lt;/I&gt;&quot;&lt;/CODE&gt; if
                  the lower bound equals the upper bound or
                  &lt;CODE&gt;&quot;&lt;I&gt;i&lt;/I&gt;-&lt;I&gt;j&lt;/I&gt;&quot;&lt;/CODE&gt; otherwise.                
            </javadoc>
            <method name="toString" type="String" line="542">
                <declaration name="result" type="StringBuffer" line="543"/>
                <declaration name="n" type="int" line="544"/>
                <scope line="545">
                    <scope line="546"/>
                    <scope line="550"/>
                </scope>
            </method>
        </class>
    </source>