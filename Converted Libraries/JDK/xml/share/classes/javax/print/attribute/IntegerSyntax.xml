<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <import package="java.io.Serializable"/>
        <class name="IntegerSyntax" line="3">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="3">
                Class IntegerSyntax is an abstract base class providing the common
                  implementation of all attributes with integer values.
                  &lt;P&gt;
                  Under the hood, an integer attribute is just an integer. You can get an
                  integer attribute&apos;s integer value by calling {@link #getValue()&lt;CODE&gt;getValue()&lt;/CODE&gt;}. An integer attribute&apos;s integer value is
                  established when it is constructed (see {@link #IntegerSyntax(int)&lt;CODE&gt;IntegerSyntax(int)&lt;/CODE&gt;}). Once constructed, an integer attribute&apos;s
                  value is immutable.
                  &lt;P&gt;                
                <author>
                    David Mendenhall                    
                </author>
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="16"/>
            <declaration name="value" type="int" line="17"/>
            <javadoc line="17">
                This integer attribute&apos;s integer value.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="22">
                Construct a new integer attribute with the given integer value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="IntegerSyntax" type="constructor" line="26">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="29">
                Construct a new integer attribute with the given integer value, which
                  must lie within the given range.                
                <param>
                    value       Integer value.                    
                </param>
                <param>
                    lowerBound  Lower bound.                    
                </param>
                <param>
                    upperBound  Upper bound.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if &lt;CODE&gt;value&lt;/CODE&gt; is less than
                      &lt;CODE&gt;lowerBound&lt;/CODE&gt; or greater than
                      &lt;CODE&gt;upperBound&lt;/CODE&gt;.                    
                </exception>
            </javadoc>
            <method name="IntegerSyntax" type="constructor" line="39">
                <params>
                    <param name="value" type="int"/>
                    <param name="lowerBound" type="int"/>
                    <param name="upperBound" type="int"/>
                </params>
                <scope line="40"/>
            </method>
            <javadoc line="45">
                Returns this integer attribute&apos;s integer value.                
                <return>
                    the integer value                    
                </return>
            </javadoc>
            <method name="getValue" type="int" line="49"/>
            <javadoc line="52">
                Returns whether this integer attribute is equivalent to the passed in
                  object. To be equivalent, all of the following conditions must be true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class IntegerSyntax.
                  &lt;LI&gt;
                  This integer attribute&apos;s value and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s value are
                  equal.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if &lt;CODE&gt;object&lt;/CODE&gt; is equivalent to this integer
                      attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="68">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="71">
                Returns a hash code value for this integer attribute. The hash code is
                  just this integer attribute&apos;s integer value.                
            </javadoc>
            <method name="hashCode" type="int" line="75"/>
            <javadoc line="78">
                Returns a string value corresponding to this integer attribute. The
                  string value is just this integer attribute&apos;s integer value converted to
                  a string.                
            </javadoc>
            <method name="toString" type="String" line="83"/>
        </class>
    </source>