<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.IntegerSyntax"/>
        <import package="javax.print.attribute.DocAttribute"/>
        <import package="javax.print.attribute.PrintRequestAttribute"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="NumberUp" line="33">
            <extends class="IntegerSyntax"/>
            <implements interface="DocAttribute"/>
            <implements interface="PrintRequestAttribute"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="33">
                Class NumberUp is an integer valued printing attribute class that specifies
                  the number of print-stream pages to impose upon a single side of an
                  instance of a selected medium. That is, if the NumberUp value is &lt;I&gt;n,&lt;/I&gt;
                  the printer must place &lt;I&gt;n&lt;/I&gt; print-stream pages on a single side of
                  an instance of the
                  selected medium. To accomplish this, the printer may add some sort of
                  translation, scaling, or rotation. This attribute primarily controls the
                  translation, scaling and rotation of print-stream pages.
                  &lt;P&gt;
                  The effect of a NumberUp attribute on a multidoc print job (a job with
                  multiple documents) depends on whether all the docs have the same number up
                  values specified or whether different docs have different number up values
                  specified, and on the (perhaps defaulted) value of the {@link MultipleDocumentHandling MultipleDocumentHandling} attribute.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  If all the docs have the same number up value &lt;I&gt;n&lt;/I&gt; specified, then any
                  value of {@link MultipleDocumentHandling MultipleDocumentHandling} makes
                  sense, and the printer&apos;s processing depends on the {@link MultipleDocumentHandling MultipleDocumentHandling} value:
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT -- All the input docs will be combined together into one
                  output document. Each media impression will consist of &lt;I&gt;n&lt;/I&gt;m
                  print-stream pages from the output document.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together
                  into one output document. Each media impression will consist of &lt;I&gt;n&lt;/I&gt;
                  print-stream pages from the output document. However, the first impression of
                  each input doc will always start on a new media sheet; this means the last
                  impression of an input doc may have fewer than &lt;I&gt;n&lt;/I&gt; print-stream pages
                  on it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The input docs will remain separate.
                  Each media impression will consist of &lt;I&gt;n&lt;/I&gt; print-stream pages from the
                  input doc. Since the input docs are separate, the first impression of each
                  input doc will always start on a new media sheet; this means the last
                  impression of an input doc may have fewer than &lt;I&gt;n&lt;/I&gt; print-stream pages on
                  it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- The input docs will remain separate.
                  Each media impression will consist of &lt;I&gt;n&lt;/I&gt; print-stream pages from the
                  input doc. Since the input docs are separate, the first impression of each
                  input doc will always start on a new media sheet; this means the last
                  impression of an input doc may have fewer than &lt;I&gt;n&lt;/I&gt; print-stream pages
                  on it.
                  &lt;/UL&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT -- All the input docs will be combined together into one
                  output document. Each media impression will consist of &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt;
                  print-stream pages from the output document, where &lt;I&gt;i&lt;/I&gt; is the number of
                  the input doc corresponding to that point in the output document. When the
                  next input doc has a different number up value from the previous input doc,
                  the first print-stream page of the next input doc goes at the start of the
                  next media impression, possibly leaving fewer than the full number of
                  print-stream pages on the previous media impression.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SINGLE_DOCUMENT_NEW_SHEET -- All the input docs will be combined together
                  into one output document. Each media impression will consist of &lt;I&gt;n&lt;/I&gt;
                  print-stream pages from the output document. However, the first impression of
                  each input doc will always start on a new media sheet; this means the last
                  impression of an input doc may have fewer than &lt;I&gt;n&lt;/I&gt; print-stream pages
                  on it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- The input docs will remain separate.
                  For input doc &lt;I&gt;i,&lt;/I&gt; each media impression will consist of
                  &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt; print-stream pages from the input doc. Since the input
                  docs are separate, the first impression of each input doc will always start
                  on a new media sheet; this means the last impression of an input doc may have
                  fewer than &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt; print-stream pages on it.
                  &lt;P&gt;
                  &lt;LI&gt;
                  SEPARATE_DOCUMENTS_COLLATED_COPIES -- The input docs will remain separate.
                  For input doc &lt;I&gt;i,&lt;/I&gt; each media impression will consist of
                  &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt; print-stream pages from the input doc. Since the input
                  docs are separate, the first impression of each input doc will always start
                  on a new media sheet; this means the last impression of an input doc may
                  have fewer than &lt;I&gt;n&lt;SUB&gt;i&lt;/SUB&gt;&lt;/I&gt; print-stream pages on it.
                  &lt;/UL&gt;
                  &lt;/UL&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The integer value gives the IPP integer value.
                  The category name returned by &lt;CODE&gt;getName()&lt;/CODE&gt; gives the IPP
                  attribute name.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="130"/>
            <javadoc line="133">
                Construct a new number up attribute with the given integer value.                
                <param>
                    value  Integer value.                    
                </param>
                <exception>
                    IllegalArgumentException(Unchecked exception) Thrown if <CODE>value</CODE> is less than 1.                    
                </exception>
            </javadoc>
            <method name="NumberUp" type="constructor" line="141">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Returns whether this number up attribute is equivalent to the passed in
                  object. To be equivalent, all of the following conditions must be true:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is not null.
                  &lt;LI&gt;
                  &lt;CODE&gt;object&lt;/CODE&gt; is an instance of class NumberUp.
                  &lt;LI&gt;
                  This number up attribute&apos;s value and &lt;CODE&gt;object&lt;/CODE&gt;&apos;s value are
                  equal.
                  &lt;/OL&gt;                
                <param>
                    object  Object to compare to.                    
                </param>
                <return>
                    True if <CODE>object</CODE> is equivalent to this number up
                      attribute, false otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="163">
                <params>
                    <param name="object" type="Object"/>
                </params>
            </method>
            <javadoc line="167">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class NumberUp, the category is class NumberUp itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="176"/>
            <javadoc line="180">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class NumberUp, the category name is &lt;CODE&gt;&quot;number-up&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="188"/>
        </class>
    </source>