<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute">
        <interface name="AttributeSet">
            <javadoc line="2">
                Interface AttributeSet specifies the interface for a set of printing
                  attributes. A printing attribute is an object whose class implements
                  interface {@link Attribute Attribute}.
                  &lt;P&gt;
                  An attribute set contains a group of &lt;I&gt;attribute values,&lt;/I&gt;
                  where duplicate values are not allowed in the set.
                  Furthermore, each value in an attribute set is
                  a member of some &lt;I&gt;category,&lt;/I&gt; and at most one value in any particular
                  category is allowed in the set. For an attribute set, the values are {@link Attribute Attribute} objects, and the categories are {@link java.lang.ClassClass} objects. An attribute&apos;s category is the class (or interface) at the
                  root of the class hierarchy for that kind of attribute. Note that an
                  attribute object&apos;s category may be a superclass of the attribute object&apos;s
                  class rather than the attribute object&apos;s class itself. An attribute
                  object&apos;s
                  category is determined by calling the {@link Attribute#getCategory()&lt;CODE&gt;getCategory()&lt;/CODE&gt;} method defined in interface {@link AttributeAttribute}.
                  &lt;P&gt;
                  The interfaces of an AttributeSet resemble those of the Java Collections
                  API&apos;s java.util.Map interface, but is more restrictive in the types
                  it will accept, and combines keys and values into an Attribute.
                  &lt;P&gt;
                  Attribute sets are used in several places in the Print Service API. In
                  each context, only certain kinds of attributes are allowed to appear in the
                  attribute set, as determined by the tagging interfaces which the attribute
                  class implements -- {@link DocAttribute DocAttribute}, {@link PrintRequestAttribute PrintRequestAttribute}, {@link PrintJobAttributePrintJobAttribute}, and {@link PrintServiceAttributePrintServiceAttribute}.
                  There are four specializations of an attribute set that are restricted to
                  contain just one of the four kinds of attribute -- {@link DocAttributeSetDocAttributeSet}, {@link PrintRequestAttributeSetPrintRequestAttributeSet},{@link PrintJobAttributeSet PrintJobAttributeSet}, and {@link PrintServiceAttributeSet PrintServiceAttributeSet}, respectively. Note that
                  many attribute classes implement more than one tagging interface and so may
                  appear in more than one context.
                  &lt;UL&gt;
                  &lt;LI&gt;
                  A {@link DocAttributeSet DocAttributeSet}, containing {@link DocAttributeDocAttribute}s, specifies the characteristics of an individual doc and the
                  print job settings to be applied to an individual doc.
                  &lt;P&gt;
                  &lt;LI&gt;
                  A {@link PrintRequestAttributeSet PrintRequestAttributeSet}, containing{@link PrintRequestAttribute PrintRequestAttribute}s, specifies the
                  settings
                  to be applied to a whole print job and to all the docs in the print job.
                  &lt;P&gt;
                  &lt;LI&gt;
                  A {@link PrintJobAttributeSet PrintJobAttributeSet}, containing {@link PrintJobAttribute PrintJobAttribute}s, reports the status of a print job.
                  &lt;P&gt;
                  &lt;LI&gt;
                  A {@link PrintServiceAttributeSet PrintServiceAttributeSet}, containing{@link PrintServiceAttribute PrintServiceAttribute}s, reports the status of
                  a Print Service instance.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  In some contexts, the client is only allowed to examine an attribute set&apos;s
                  contents but not change them (the set is read-only). In other places, the
                  client is allowed both to examine and to change an attribute set&apos;s contents
                  (the set is read-write). For a read-only attribute set, calling a mutating
                  operation throws an UnmodifiableSetException.
                  &lt;P&gt;
                  The Print Service API provides one implementation of interface
                  AttributeSet, class {@link HashAttributeSet HashAttributeSet}.
                  A client can use class {@link HashAttributeSet HashAttributeSet} or provide its own implementation of
                  interface AttributeSet. The Print Service API also provides
                  implementations of interface AttributeSet&apos;s subinterfaces -- classes {@link HashDocAttributeSet HashDocAttributeSet},{@link HashPrintRequestAttributeSetHashPrintRequestAttributeSet}, {@link HashPrintJobAttributeSetHashPrintJobAttributeSet}, and {@link HashPrintServiceAttributeSetHashPrintServiceAttributeSet}.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <method name="get" type="Attribute" line="63"/>
            <javadoc line="63">
                Returns the attribute value which this attribute set contains in the
                  given attribute category. Returns &lt;tt&gt;null&lt;/tt&gt; if this attribute set
                  does not contain any attribute value in the given attribute category.                
                <param>
                    category  Attribute category whose associated attribute value
                      is to be returned. It must be a{@link java.lang.Class Class}that implements interface {@link AttributeAttribute}.                    
                </param>
                <return>
                    The attribute value in the given attribute category contained
                      in this attribute set, or <tt>null</tt> if this attribute set
                      does not contain any attribute value in the given attribute
                      category.                    
                </return>
                <throws>
                    NullPointerException(unchecked exception) Thrown if the <CODE>category</CODE> is null.                    
                </throws>
                <throws>
                    ClassCastException(unchecked exception) Thrown if the <CODE>category</CODE> is not a{@link java.lang.Class Class} that implements interface {@link Attribute Attribute}.                    
                </throws>
            </javadoc>
            <method name="add" type="boolean" line="77"/>
            <javadoc line="77">
                Adds the specified attribute to this attribute set if it is not
                  already present, first removing any existing value in the same
                  attribute category as the specified attribute value.                
                <param>
                    attribute  Attribute value to be added to this attribute set.                    
                </param>
                <return>
                    <tt>true</tt> if this attribute set changed as a result of the
                      call, i.e., the given attribute value was not already a member
                      of this attribute set.                    
                </return>
                <throws>
                    NullPointerException(unchecked exception) Thrown if the <CODE>attribute</CODE> is null.                    
                </throws>
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not support
                      the <CODE>add()</CODE> operation.                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="90"/>
            <javadoc line="90">
                Removes any attribute for this category from this attribute set if
                  present. If &lt;CODE&gt;category&lt;/CODE&gt; is null, then
                  &lt;CODE&gt;remove()&lt;/CODE&gt; does nothing and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    category Attribute category to be removed from this
                      attribute set.                    
                </param>
                <return>
                    <tt>true</tt> if this attribute set changed as a result of the
                      call, i.e., the given attribute value had been a member of this
                      attribute set.                    
                </return>
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not support
                      the <CODE>remove()</CODE> operation.                    
                </throws>
            </javadoc>
            <method name="remove" type="boolean" line="103"/>
            <javadoc line="103">
                Removes the specified attribute from this attribute set if
                  present. If &lt;CODE&gt;attribute&lt;/CODE&gt; is null, then
                  &lt;CODE&gt;remove()&lt;/CODE&gt; does nothing and returns &lt;tt&gt;false&lt;/tt&gt;.                
                <param>
                    attribute Attribute value to be removed from this attribute set.                    
                </param>
                <return>
                    <tt>true</tt> if this attribute set changed as a result of the
                      call, i.e., the given attribute value had been a member of this
                      attribute set.                    
                </return>
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not support
                      the <CODE>remove()</CODE> operation.                    
                </throws>
            </javadoc>
            <method name="containsKey" type="boolean" line="115"/>
            <javadoc line="115">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this attribute set contains an
                  attribute for the specified category.                
                <param>
                    category whose presence in this attribute set is
                      to be tested.                    
                </param>
                <return>
                    <tt>true</tt> if this attribute set contains an attribute
                      value for the specified category.                    
                </return>
            </javadoc>
            <method name="containsValue" type="boolean" line="124"/>
            <javadoc line="124">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this attribute set contains the given
                  attribute value.                
                <param>
                    attribute  Attribute value whose presence in this
                      attribute set is to be tested.                    
                </param>
                <return>
                    <tt>true</tt> if this attribute set contains the given
                      attribute  value.                    
                </return>
            </javadoc>
            <method name="addAll" type="boolean" line="133"/>
            <javadoc line="133">
                Adds all of the elements in the specified set to this attribute.
                  The outcome is the same as if the ={@link #add(Attribute) &lt;CODE&gt;add(Attribute)&lt;/CODE&gt;}operation had been applied to this attribute set successively with each
                  element from the specified set.
                  The behavior of the &lt;CODE&gt;addAll(AttributeSet)&lt;/CODE&gt;
                  operation is unspecified if the specified set is modified while
                  the operation is in progress.
                  &lt;P&gt;
                  If the &lt;CODE&gt;addAll(AttributeSet)&lt;/CODE&gt; operation throws an exception,
                  the effect on this attribute set&apos;s state is implementation dependent;
                  elements from the specified set before the point of the exception may
                  or may not have been added to this attribute set.                
                <param>
                    attributes  whose elements are to be added to this attribute
                      set.                    
                </param>
                <return>
                    <tt>true</tt> if this attribute set changed as a result of the
                      call.                    
                </return>
                <throws>
                    UnmodifiableSetException(Unchecked exception) Thrown if this attribute set does not support
                      the <tt>addAll(AttributeSet)</tt> method.                    
                </throws>
                <throws>
                    NullPointerException(Unchecked exception) Thrown if some element in the specified
                      set is null.                    
                </throws>
                <see>
                    #add(Attribute)                    
                </see>
            </javadoc>
            <method name="size" type="int" line="156"/>
            <javadoc line="156">
                Returns the number of attributes in this attribute set. If this
                  attribute set contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; elements,
                  returns  &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt;.                
                <return>
                    The number of attributes in this attribute set.                    
                </return>
            </javadoc>
            <method name="toArray" type="Attribute[]" line="163"/>
            <javadoc line="163">
                Returns an array of the attributes contained in this set.                
                <return>
                    the Attributes contained in this set as an array, zero length
                      if the AttributeSet is empty.                    
                </return>
            </javadoc>
            <method name="clear" type="void" line="169"/>
            <javadoc line="169">
                Removes all attributes from this attribute set.                
                <throws>
                    UnmodifiableSetException(unchecked exception) Thrown if this attribute set does not support
                      the <CODE>clear()</CODE> operation.                    
                </throws>
            </javadoc>
            <method name="isEmpty" type="boolean" line="175"/>
            <javadoc line="175">
                Returns true if this attribute set contains no attributes.                
                <return>
                    true if this attribute set contains no attributes.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="180"/>
            <javadoc line="180">
                Compares the specified object with this attribute set for equality.
                  Returns &lt;tt&gt;true&lt;/tt&gt; if the given object is also an attribute set and
                  the two attribute sets contain the same attribute category-attribute
                  value mappings. This ensures that the
                  &lt;tt&gt;equals()&lt;/tt&gt; method works properly across different
                  implementations of the AttributeSet interface.                
                <param>
                    object to be compared for equality with this attribute set.                    
                </param>
                <return>
                    <tt>true</tt> if the specified object is equal to this
                      attribute   set.                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="192"/>
            <javadoc line="192">
                Returns the hash code value for this attribute set. The hash code of an
                  attribute set is defined to be the sum of the hash codes of each entry
                  in the AttributeSet.
                  This ensures that &lt;tt&gt;t1.equals(t2)&lt;/tt&gt; implies that
                  &lt;tt&gt;t1.hashCode()==t2.hashCode()&lt;/tt&gt; for any two attribute sets
                  &lt;tt&gt;t1&lt;/tt&gt; and &lt;tt&gt;t2&lt;/tt&gt;, as required by the general contract of{@link java.lang.Object#hashCode() &lt;CODE&gt;Object.hashCode()&lt;/CODE&gt;}.                
                <return>
                    The hash code value for this attribute set.                    
                </return>
            </javadoc>
        </interface>
    </source>