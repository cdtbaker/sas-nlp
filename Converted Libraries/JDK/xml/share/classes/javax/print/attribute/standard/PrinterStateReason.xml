<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.Attribute"/>
        <class name="PrinterStateReason" line="30">
            <extends class="EnumSyntax"/>
            <implements interface="Attribute"/>
            <javadoc line="30">
                Class PrinterStateReason is a printing attribute class, an enumeration,
                  that provides additional information about the printer&apos;s current state,
                  i.e., information that augments the value of the printer&apos;s{@link PrinterState PrinterState} attribute.
                  Class PrinterStateReason defines standard printer
                  state reason values. A Print Service implementation only needs to report
                  those printer state reasons which are appropriate for the particular
                  implementation; it does not have to report every defined printer state
                  reason.
                  &lt;P&gt;
                  Instances of PrinterStateReason do not appear in a Print Service&apos;s
                  attribute set directly.
                  Rather, a {@link PrinterStateReasons PrinterStateReasons}attribute appears in the Print Service&apos;s attribute set. The {@link PrinterStateReasons PrinterStateReasons} attribute contains zero, one, or
                  more than one PrinterStateReason objects which pertain to the
                  Print Service&apos;s status, and each PrinterStateReason object is
                  associated with a {@link Severity Severity} level of REPORT (least severe),
                  WARNING, or ERROR (most severe). The printer adds a PrinterStateReason
                  object to the Print Service&apos;s{@link PrinterStateReasons PrinterStateReasons} attribute when the
                  corresponding condition becomes true of the printer, and the printer
                  removesthe PrinterStateReason object again when the corresponding
                  condition becomes false, regardless of whether the Print Service&apos;s overall{@link PrinterState PrinterState} also changed.
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt;
                  The string values returned by each individual {@link PrinterStateReason} and
                  associated {@link Severity} object&apos;s &lt;CODE&gt;toString()&lt;/CODE&gt;
                  methods, concatenated together with a hyphen (&lt;CODE&gt;&quot;-&quot;&lt;/CODE&gt;) in
                  between, gives the IPP keyword value for a {@link PrinterStateReasons}.
                  The category name returned by &lt;CODE&gt;getName()&lt;/CODE&gt; gives the IPP
                  attribute name.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="70"/>
            <declaration name="OTHER" type="PrinterStateReason" line="72"/>
            <javadoc line="72">
                The printer has detected an error other than ones listed below.                
            </javadoc>
            <declaration name="MEDIA_NEEDED" type="PrinterStateReason" line="77"/>
            <javadoc line="77">
                A tray has run out of media.                
            </javadoc>
            <declaration name="MEDIA_JAM" type="PrinterStateReason" line="83"/>
            <javadoc line="83">
                The device has a media jam.                
            </javadoc>
            <declaration name="MOVING_TO_PAUSED" type="PrinterStateReason" line="89"/>
            <javadoc line="89">
                Someone has paused the printer, but the device(s) are taking an
                  appreciable time to stop. Later, when all output has stopped,
                  the {@link PrinterState PrinterState} becomes STOPPED,
                  and the PAUSED value replaces
                  the MOVING_TO_PAUSED value in the {@link PrinterStateReasonsPrinterStateReasons} attribute. This value must be supported if the
                  printer can be paused and the implementation takes significant time to
                  pause a device in certain circumstances.                
            </javadoc>
            <declaration name="PAUSED" type="PrinterStateReason" line="102"/>
            <javadoc line="102">
                Someone has paused the printer and the printer&apos;s {@link PrinterStatePrinterState} is STOPPED. In this state, a printer must not produce
                  printed output, but it must perform other operations requested by a
                  client. If a printer had been printing a job when the printer was
                  paused,
                  the Printer must resume printing that job when the printer is no longer
                  paused and leave no evidence in the printed output of such a pause.
                  This value must be supported if the printer can be paused.                
            </javadoc>
            <declaration name="SHUTDOWN" type="PrinterStateReason" line="115"/>
            <javadoc line="115">
                Someone has removed a printer from service, and the device may be
                  powered down or physically removed.
                  In this state, a printer must not produce
                  printed output, and unless the printer is realized by a print server
                  that is still active, the printer must perform no other operations
                  requested by a client.
                  If a printer had been printing a job when it was shut down,
                  the printer need not resume printing that job when the printer is no
                  longer shut down. If the printer resumes printing such a job, it may
                  leave evidence in the printed output of such a shutdown, e.g. the part
                  printed before the shutdown may be printed a second time after the
                  shutdown.                
            </javadoc>
            <declaration name="CONNECTING_TO_DEVICE" type="PrinterStateReason" line="132"/>
            <javadoc line="132">
                The printer has scheduled a job on the output device and is in the
                  process of connecting to a shared network output device (and might not
                  be able to actually start printing the job for an arbitrarily long time
                  depending on the usage of the output device by other servers on the
                  network).                
            </javadoc>
            <declaration name="TIMED_OUT" type="PrinterStateReason" line="142"/>
            <javadoc line="142">
                The server was able to connect to the output device (or is always
                  connected), but was unable to get a response from the output device.                
            </javadoc>
            <declaration name="STOPPING" type="PrinterStateReason" line="149"/>
            <javadoc line="149">
                The printer is in the process of stopping the device and will be
                  stopped in a while.
                  When the device is stopped, the printer will change the{@link PrinterState PrinterState} to STOPPED. The STOPPING reason is
                  never an error, even for a printer with a single output device. When an
                  output device ceases accepting jobs, the printer&apos;s {@link PrinterStateReasons PrinterStateReasons} will have this reason while
                  the output device completes printing.                
            </javadoc>
            <declaration name="STOPPED_PARTLY" type="PrinterStateReason" line="162"/>
            <javadoc line="162">
                When a printer controls more than one output device, this reason
                  indicates that one or more output devices are stopped. If the reason&apos;s
                  severity is a report, fewer than half of the output devices are
                  stopped.
                  If the reason&apos;s severity is a warning, half or more but fewer than
                  all of the output devices are stopped.                
            </javadoc>
            <declaration name="TONER_LOW" type="PrinterStateReason" line="173"/>
            <javadoc line="173">
                The device is low on toner.                
            </javadoc>
            <declaration name="TONER_EMPTY" type="PrinterStateReason" line="179"/>
            <javadoc line="179">
                The device is out of toner.                
            </javadoc>
            <declaration name="SPOOL_AREA_FULL" type="PrinterStateReason" line="185"/>
            <javadoc line="185">
                The limit of persistent storage allocated for spooling has been
                  reached.
                  The printer is temporarily unable to accept more jobs. The printer will
                  remove this reason when it is able to accept more jobs.
                  This value should  be used by a non-spooling printer that only
                  accepts one or a small number
                  jobs at a time or a spooling printer that has filled the spool space.                
            </javadoc>
            <declaration name="COVER_OPEN" type="PrinterStateReason" line="197"/>
            <javadoc line="197">
                One or more covers on the device are open.                
            </javadoc>
            <declaration name="INTERLOCK_OPEN" type="PrinterStateReason" line="203"/>
            <javadoc line="203">
                One or more interlock devices on the printer are unlocked.                
            </javadoc>
            <declaration name="DOOR_OPEN" type="PrinterStateReason" line="209"/>
            <javadoc line="209">
                One or more doors on the device are open.                
            </javadoc>
            <declaration name="INPUT_TRAY_MISSING" type="PrinterStateReason" line="215"/>
            <javadoc line="215">
                One or more input trays are not in the device.                
            </javadoc>
            <declaration name="MEDIA_LOW" type="PrinterStateReason" line="221"/>
            <javadoc line="221">
                At least one input tray is low on media.                
            </javadoc>
            <declaration name="MEDIA_EMPTY" type="PrinterStateReason" line="227"/>
            <javadoc line="227">
                At least one input tray is empty.                
            </javadoc>
            <declaration name="OUTPUT_TRAY_MISSING" type="PrinterStateReason" line="233"/>
            <javadoc line="233">
                One or more output trays are not in the device.                
            </javadoc>
            <declaration name="OUTPUT_AREA_ALMOST_FULL" type="PrinterStateReason" line="239"/>
            <javadoc line="239">
                One or more output areas are almost full
                  (e.g. tray, stacker, collator).                
            </javadoc>
            <declaration name="OUTPUT_AREA_FULL" type="PrinterStateReason" line="246"/>
            <javadoc line="246">
                One or more output areas are full (e.g. tray, stacker, collator).                
            </javadoc>
            <declaration name="MARKER_SUPPLY_LOW" type="PrinterStateReason" line="252"/>
            <javadoc line="252">
                The device is low on at least one marker supply (e.g. toner, ink,
                  ribbon).                
            </javadoc>
            <declaration name="MARKER_SUPPLY_EMPTY" type="PrinterStateReason" line="259"/>
            <javadoc line="259">
                The device is out of at least one marker supply (e.g. toner, ink,
                  ribbon).                
            </javadoc>
            <declaration name="MARKER_WASTE_ALMOST_FULL" type="PrinterStateReason" line="266"/>
            <javadoc line="266">
                The device marker supply waste receptacle is almost full.                
            </javadoc>
            <declaration name="MARKER_WASTE_FULL" type="PrinterStateReason" line="272"/>
            <javadoc line="272">
                The device marker supply waste receptacle is full.                
            </javadoc>
            <declaration name="FUSER_OVER_TEMP" type="PrinterStateReason" line="278"/>
            <javadoc line="278">
                The fuser temperature is above normal.                
            </javadoc>
            <declaration name="FUSER_UNDER_TEMP" type="PrinterStateReason" line="284"/>
            <javadoc line="284">
                The fuser temperature is below normal.                
            </javadoc>
            <declaration name="OPC_NEAR_EOL" type="PrinterStateReason" line="290"/>
            <javadoc line="290">
                The optical photo conductor is near end of life.                
            </javadoc>
            <declaration name="OPC_LIFE_OVER" type="PrinterStateReason" line="296"/>
            <javadoc line="296">
                The optical photo conductor is no longer functioning.                
            </javadoc>
            <declaration name="DEVELOPER_LOW" type="PrinterStateReason" line="302"/>
            <javadoc line="302">
                The device is low on developer.                
            </javadoc>
            <declaration name="DEVELOPER_EMPTY" type="PrinterStateReason" line="308"/>
            <javadoc line="308">
                The device is out of developer.                
            </javadoc>
            <declaration name="INTERPRETER_RESOURCE_UNAVAILABLE" type="PrinterStateReason" line="314"/>
            <javadoc line="314">
                An interpreter resource is unavailable (e.g., font, form).                
            </javadoc>
            <javadoc line="320">
                Construct a new printer state reason enumeration value with
                  the given integer value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="PrinterStateReason" type="constructor" line="326">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="330"/>
            <declaration name="myEnumValueTable" type="PrinterStateReason[]" line="366"/>
            <javadoc line="402">
                Returns the string table for class PrinterStateReason.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="405"/>
            <javadoc line="409">
                Returns the enumeration value table for class PrinterStateReason.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="412"/>
            <javadoc line="417">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class PrinterStateReason and any vendor-defined subclasses, the
                  category is class PrinterStateReason itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="427"/>
            <javadoc line="431">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class PrinterStateReason and any vendor-defined subclasses, the
                  category name is &lt;CODE&gt;&quot;printer-state-reason&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="440"/>
        </class>
    </source>