<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.Attribute"/>
        <class name="JobStateReason" line="4">
            <extends class="EnumSyntax"/>
            <implements interface="Attribute"/>
            <javadoc line="4">
                Class JobStateReason is a printing attribute class, an enumeration, that
                  provides additional information about the job&apos;s current state, i.e.,
                  information that augments the value of the job&apos;s {@link JobState JobState}attribute. Class JobStateReason defines standard job state reason values. A
                  Print Service implementation only needs to report those job state
                  reasons which are appropriate for the particular implementation; it does not
                  have to report every defined job state reason.
                  &lt;P&gt;
                  Instances of JobStateReason do not appear in a Print Job&apos;s attribute set
                  directly. Rather, a {@link JobStateReasons JobStateReasons} attribute appears
                  in the Print Job&apos;s attribute set. The {@link JobStateReasons JobStateReasons}attribute contains zero, one, or more than one JobStateReason objects which
                  pertain to the Print Job&apos;s status. The printer adds a JobStateReason object
                  to the Print Job&apos;s {@link JobStateReasons JobStateReasons} attribute when the
                  corresponding condition becomes true of the Print Job, and the printer
                  removes the JobStateReason object again when the corresponding condition
                  becomes false, regardless of whether the Print Job&apos;s overall {@link JobStateJobState} also changed.
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The category name returned by
                  &lt;CODE&gt;getName()&lt;/CODE&gt; is the IPP attribute name.  The enumeration&apos;s
                  integer value is the IPP enum value.  The &lt;code&gt;toString()&lt;/code&gt; method
                  returns the IPP string representation of the attribute value.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="29"/>
            <declaration name="JOB_INCOMING" type="JobStateReason" line="30"/>
            <javadoc line="30">
                The printer has created the Print Job, but the printer has not finished
                  accessing or accepting all the print data yet.                
            </javadoc>
            <declaration name="JOB_DATA_INSUFFICIENT" type="JobStateReason" line="35"/>
            <javadoc line="35">
                The printer has created the Print Job, but the printer is expecting
                  additional print data before it can move the job into the PROCESSING
                  state. If a printer starts processing before it has received all data,
                  the printer removes the JOB_DATA_INSUFFICIENT reason, but the
                  JOB_INCOMING reason remains. If a printer starts processing after it
                  has received all data, the printer removes the JOB_DATA_INSUFFICIENT
                  and JOB_INCOMING reasons at the same time.                
            </javadoc>
            <declaration name="DOCUMENT_ACCESS_ERROR" type="JobStateReason" line="45"/>
            <javadoc line="45">
                The Printer could not access one or more documents passed by reference
                  (i.e., the print data representation object is a URL). This reason is
                  intended to cover any file access problem,including file does not exist
                  and access denied because of an access control problem. Whether the
                  printer aborts the job and moves the job to the ABORTED job state or
                  prints all documents that are accessible and moves the job to the
                  COMPLETED job state and adds the COMPLETED_WITH_ERRORS reason to the
                  job&apos;s {@link JobStateReasons JobStateReasons} attribute depends on
                  implementation and/or site policy. This value should be supported if
                  the printer supports doc flavors with URL print data representation
                  objects.                
            </javadoc>
            <declaration name="SUBMISSION_INTERRUPTED" type="JobStateReason" line="59"/>
            <javadoc line="59">
                The job was not completely submitted for some unforeseen reason.
                  Possibilities include (1) the printer has crashed before the job was
                  fully submitted by the client, (2) the printer or the document transfer
                  method has crashed in some non-recoverable way before the document data
                  was entirely transferred to the printer, (3) the client crashed before
                  the job was fully submitted.                
            </javadoc>
            <declaration name="JOB_OUTGOING" type="JobStateReason" line="68"/>
            <javadoc line="68">
                The printer is transmitting the job to the output device.                
            </javadoc>
            <declaration name="JOB_HOLD_UNTIL_SPECIFIED" type="JobStateReason" line="72"/>
            <javadoc line="72">
                The value of the job&apos;s {@link JobHoldUntil JobHoldUntil} attribute was
                  specified with a date-time that is still in the future. The job must
                  not be a candidate for processing until this reason is removed and
                  there are
                  no other reasons to hold the job. This value should be supported if the{@link JobHoldUntil JobHoldUntil} job template attribute is supported.                
            </javadoc>
            <declaration name="RESOURCES_ARE_NOT_READY" type="JobStateReason" line="80"/>
            <javadoc line="80">
                At least one of the resources needed by the job, such as media, fonts,
                  resource objects, etc., is not ready on any of the physical printers
                  for which the job is a candidate. This condition may be detected
                  when the job is accepted, or subsequently while the job is pending
                  or processing, depending on implementation.
                  The job may remain in its current state or
                  be moved to the PENDING_HELD state, depending on implementation and/or
                  job scheduling policy.                
            </javadoc>
            <declaration name="PRINTER_STOPPED_PARTLY" type="JobStateReason" line="91"/>
            <javadoc line="91">
                The value of the printer&apos;s {@link PrinterStateReasonsPrinterStateReasons} attribute contains a {@link PrinterStateReasonPrinterStateReason} value of STOPPED_PARTLY.                
            </javadoc>
            <declaration name="PRINTER_STOPPED" type="JobStateReason" line="95"/>
            <javadoc line="95">
                The value of the printer&apos;s {@link PrinterState PrinterState} attribute
                  ia STOPPED.                
            </javadoc>
            <declaration name="JOB_INTERPRETING" type="JobStateReason" line="100"/>
            <javadoc line="100">
                The job is in the PROCESSING state, but more specifically, the printer
                  ia interpreting the document data.                
            </javadoc>
            <declaration name="JOB_QUEUED" type="JobStateReason" line="105"/>
            <javadoc line="105">
                The job is in the PROCESSING state, but more specifically, the printer
                  has queued the document data.                
            </javadoc>
            <declaration name="JOB_TRANSFORMING" type="JobStateReason" line="110"/>
            <javadoc line="110">
                The job is in the PROCESSING state, but more specifically, the printer
                  is interpreting document data and producing another electronic
                  representation.                
            </javadoc>
            <declaration name="JOB_QUEUED_FOR_MARKER" type="JobStateReason" line="116"/>
            <javadoc line="116">
                The job is in the PENDING_HELD, PENDING, or PROCESSING state, but more
                  specifically, the printer has completed enough processing of the document
                  to be able to start marking and the job is waiting for the marker.
                  Systems that require human intervention to release jobs put the job into
                  the PENDING_HELD job state. Systems that automatically select a job to
                  use the marker put the job into the PENDING job state or keep the job
                  in the PROCESSING job state while waiting for the marker, depending on
                  implementation. All implementations put the job into (or back into) the
                  PROCESSING state when marking does begin.                
            </javadoc>
            <declaration name="JOB_PRINTING" type="JobStateReason" line="128"/>
            <javadoc line="128">
                The output device is marking media. This value is useful for printers
                  which spend a great deal of time processing (1) when no marking is
                  happening and then want to show that marking is now happening or (2) when
                  the job is in the process of being canceled or aborted while the job
                  remains in the PROCESSING state, but the marking has not yet stopped so
                  that impression or sheet counts are still increasing for the job.                
            </javadoc>
            <declaration name="JOB_CANCELED_BY_USER" type="JobStateReason" line="137"/>
            <javadoc line="137">
                The job was canceled by the owner of the job, i.e., by a user whose
                  authenticated identity is the same as the value of the originating user
                  that created the Print Job, or by some other authorized end-user, such as
                  a member of the job owner&apos;s security group. This value should be
                  supported.                
            </javadoc>
            <declaration name="JOB_CANCELED_BY_OPERATOR" type="JobStateReason" line="145"/>
            <javadoc line="145">
                The job was canceled by the operator, i.e., by a user who has been
                  authenticated as having operator privileges (whether local or remote). If
                  the security policy is to allow anyone to cancel anyone&apos;s job, then this
                  value may be used when the job is canceled by someone other than the
                  owner of the job. For such a security policy, in effect, everyone is an
                  operator as far as canceling jobs is concerned. This value should be
                  supported if the implementation permits canceling by someone other than
                  the owner of the job.                
            </javadoc>
            <declaration name="JOB_CANCELED_AT_DEVICE" type="JobStateReason" line="156"/>
            <javadoc line="156">
                The job was canceled by an unidentified local user, i.e., a user at a
                  console at the device. This value should be supported if the
                  implementation supports canceling jobs at the console.                
            </javadoc>
            <declaration name="ABORTED_BY_SYSTEM" type="JobStateReason" line="162"/>
            <javadoc line="162">
                The job was aborted by the system. Either the job (1) is in the process
                  of being aborted, (2) has been aborted by the system and placed in the
                  ABORTED state, or (3) has been aborted by the system and placed in the
                  PENDING_HELD state, so that a user or operator can manually try the job
                  again. This value should be supported.                
            </javadoc>
            <declaration name="UNSUPPORTED_COMPRESSION" type="JobStateReason" line="170"/>
            <javadoc line="170">
                The job was aborted by the system because the printer determined while
                  attempting to decompress the document&apos;s data that the compression is
                  actually not among those supported by the printer. This value must be
                  supported, since {@link Compression Compression} is a required doc
                  description attribute.                
            </javadoc>
            <declaration name="COMPRESSION_ERROR" type="JobStateReason" line="178"/>
            <javadoc line="178">
                The job was aborted by the system because the printer encountered an
                  error in the document data while decompressing it. If the printer posts
                  this reason, the document data has already passed any tests that would
                  have led to the UNSUPPORTED_COMPRESSION job state reason.                
            </javadoc>
            <declaration name="UNSUPPORTED_DOCUMENT_FORMAT" type="JobStateReason" line="185"/>
            <javadoc line="185">
                The job was aborted by the system because the document data&apos;s document
                  format (doc flavor) is not among those supported by the printer. If the
                  client specifies a doc flavor with a MIME type of
                  &lt;CODE&gt;&quot;application/octet-stream&quot;&lt;/CODE&gt;, the printer may abort the job if
                  the printer cannot determine the document data&apos;s actual format through
                  auto-sensing (even if the printer supports the document format if
                  specified explicitly). This value must be supported, since a doc flavor
                  is required to be specified for each doc.                
            </javadoc>
            <declaration name="DOCUMENT_FORMAT_ERROR" type="JobStateReason" line="196"/>
            <javadoc line="196">
                The job was aborted by the system because the printer encountered an
                  error in the document data while processing it. If the printer posts this
                  reason, the document data has already passed any tests that would have
                  led to the UNSUPPORTED_DOCUMENT_FORMAT job state reason.                
            </javadoc>
            <declaration name="PROCESSING_TO_STOP_POINT" type="JobStateReason" line="203"/>
            <javadoc line="203">
                The requester has canceled the job or the printer has aborted the job,
                  but the printer is still performing some actions on the job until a
                  specified stop point occurs or job termination/cleanup is completed.
                  &lt;P&gt;
                  If the implementation requires some measurable time to cancel the job in
                  the PROCESSING or PROCESSING_STOPPED job states, the printer must use
                  this reason to indicate that the printer is still performing some actions
                  on the job while the job remains in the PROCESSING or PROCESSING_STOPPED
                  state. After all the job&apos;s job description attributes have stopped
                  incrementing, the printer moves the job from the PROCESSING state to the
                  CANCELED or ABORTED job states.                
            </javadoc>
            <declaration name="SERVICE_OFF_LINE" type="JobStateReason" line="217"/>
            <javadoc line="217">
                The printer is off-line and accepting no jobs. All PENDING jobs are put
                  into the PENDING_HELD state. This situation could be true if the
                  service&apos;s or document transform&apos;s input is impaired or broken.                
            </javadoc>
            <declaration name="JOB_COMPLETED_SUCCESSFULLY" type="JobStateReason" line="223"/>
            <javadoc line="223">
                The job completed successfully. This value should be supported.                
            </javadoc>
            <declaration name="JOB_COMPLETED_WITH_WARNINGS" type="JobStateReason" line="227"/>
            <javadoc line="227">
                The job completed with warnings. This value should be supported if the
                  implementation detects warnings.                
            </javadoc>
            <declaration name="JOB_COMPLETED_WITH_ERRORS" type="JobStateReason" line="232"/>
            <javadoc line="232">
                The job completed with errors (and possibly warnings too). This value
                  should be supported if the implementation detects errors.                
            </javadoc>
            <declaration name="JOB_RESTARTABLE" type="JobStateReason" line="237"/>
            <javadoc line="237">
                This job is retained and is currently able to be restarted. If
                  JOB_RESTARTABLE is contained in the job&apos;s {@link JobStateReasonsJobStateReasons} attribute, then the printer must accept a request to
                  restart that job. This value should be supported if restarting jobs is
                  supported. &lt;I&gt;[The capability for restarting jobs is not in the Java
                  Print Service API at present.]&lt;/I&gt;                
            </javadoc>
            <declaration name="QUEUED_IN_DEVICE" type="JobStateReason" line="245"/>
            <javadoc line="245">
                The job has been forwarded to a device or print system that is unable to
                  send back status. The printer sets the job&apos;s {@link JobState JobState}attribute to COMPLETED and adds the QUEUED_IN_DEVICE reason to the job&apos;s{@link JobStateReasons JobStateReasons} attribute to indicate that the
                  printer has no additional information about the job and never will have
                  any better information.                
            </javadoc>
            <javadoc line="252">
                Construct a new job state reason enumeration value with the given
                  integer  value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="JobStateReason" type="constructor" line="257">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="260"/>
            <declaration name="myEnumValueTable" type="JobStateReason[]" line="261"/>
            <javadoc line="262">
                Returns the string table for class JobStateReason.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="265"/>
            <javadoc line="268">
                Returns the enumeration value table for class JobStateReason.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="271"/>
            <javadoc line="274">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class JobStateReason and any vendor-defined subclasses, the
                  category  is class JobStateReason itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class&lt;? extends Attribute&gt;" line="282"/>
            <javadoc line="285">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class JobStateReason and any vendor-defined subclasses, the
                  category name is &lt;CODE&gt;&quot;job-state-reason&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="293"/>
        </class>
    </source>