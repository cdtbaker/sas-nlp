<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print.attribute.standard">
        <import package="javax.print.attribute.Attribute"/>
        <import package="javax.print.attribute.EnumSyntax"/>
        <import package="javax.print.attribute.PrintJobAttribute"/>
        <class name="JobState" line="5">
            <extends class="EnumSyntax"/>
            <implements interface="PrintJobAttribute"/>
            <javadoc line="5">
                JobState is a printing attribute class, an enumeration, that identifies
                  the current state of a print job. Class JobState defines standard job state
                  values. A  Print Service implementation only needs to report those job
                  states which are appropriate for the particular implementation; it does not
                  have to report every defined job state. The {@link JobStateReasonsJobStateReasons} attribute augments the JobState attribute to give more
                  detailed information about the job in the given job state.
                  &lt;P&gt;
                  &lt;B&gt;IPP Compatibility:&lt;/B&gt; The category name returned by
                  &lt;CODE&gt;getName()&lt;/CODE&gt; is the IPP attribute name.  The enumeration&apos;s
                  integer value is the IPP enum value.  The &lt;code&gt;toString()&lt;/code&gt; method
                  returns the IPP string representation of the attribute value.
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="21"/>
            <declaration name="UNKNOWN" type="JobState" line="22"/>
            <javadoc line="22">
                The job state is unknown.                
            </javadoc>
            <declaration name="PENDING" type="JobState" line="26"/>
            <javadoc line="26">
                The job is a candidate to start processing, but is not yet processing.                
            </javadoc>
            <declaration name="PENDING_HELD" type="JobState" line="30"/>
            <javadoc line="30">
                The job is not a candidate for processing for any number of reasons but
                  will return to the PENDING state as soon as the reasons are no longer
                  present. The job&apos;s {@link JobStateReasons JobStateReasons} attribute must
                  indicate why the job is no longer a candidate for processing.                
            </javadoc>
            <declaration name="PROCESSING" type="JobState" line="37"/>
            <javadoc line="37">
                The job is processing. One or more of the following activities is
                  occurring:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  The job is using, or is attempting to use, one or more purely software
                  processes that are analyzing, creating, or interpreting a PDL, etc.
                  &lt;P&gt;
                  &lt;LI&gt;
                  The job is using, or is attempting to use, one or more hardware
                  devices that are interpreting a PDL, making marks on a medium, and/or
                  performing finishing, such as stapling, etc.
                  &lt;P&gt;
                  &lt;LI&gt;
                  The printer has made the job ready for printing, but the output
                  device is not yet printing it, either because the job hasn&apos;t reached the
                  output device or because the job is queued in the output device or some
                  other spooler, awaiting the output device to print it.
                  &lt;/OL&gt;
                  &lt;P&gt;
                  When the job is in the PROCESSING state, the entire job state includes
                  the detailed status represented in the printer&apos;s {@link PrinterStatePrinterState} and {@link PrinterStateReasons PrinterStateReasons}attributes.
                  &lt;P&gt;
                  Implementations may, though they need not, include additional values in
                  the job&apos;s {@link JobStateReasons JobStateReasons} attribute to indicate
                  the progress of the job, such as adding the JOB_PRINTING value to
                  indicate when the output device is actually making marks on paper and/or
                  the PROCESSING_TO_STOP_POINT value to indicate that the printer is in the
                  process of canceling or aborting the job.                
            </javadoc>
            <declaration name="PROCESSING_STOPPED" type="JobState" line="68"/>
            <javadoc line="68">
                The job has stopped while processing for any number of reasons and will
                  return to the PROCESSING state as soon as the reasons are no longer
                  present.
                  &lt;P&gt;
                  The job&apos;s {@link JobStateReasons JobStateReasons} attribute may indicate
                  why the job has stopped processing. For example, if the output device is
                  stopped, the PRINTER_STOPPED value may be included in the job&apos;s {@link JobStateReasons JobStateReasons} attribute.
                  &lt;P&gt;
                  &lt;I&gt;Note:&lt;/I&gt; When an output device is stopped, the device usually
                  indicates its condition in human readable form locally at the device. A
                  client can obtain more complete device status remotely by querying the
                  printer&apos;s {@link PrinterState PrinterState} and {@link PrinterStateReasons PrinterStateReasons} attributes.                
            </javadoc>
            <declaration name="CANCELED" type="JobState" line="83"/>
            <javadoc line="83">
                The job has been canceled by some human agency, the printer has completed
                  canceling the job, and all job status attributes have reached their final
                  values for the job. While the printer is canceling the job, the job
                  remains in its current state, but the job&apos;s {@link JobStateReasonsJobStateReasons} attribute should contain the PROCESSING_TO_STOP_POINT
                  value and one of the CANCELED_BY_USER, CANCELED_BY_OPERATOR, or
                  CANCELED_AT_DEVICE values. When the job moves to the CANCELED state, the
                  PROCESSING_TO_STOP_POINT value, if present, must be removed, but the
                  CANCELED_BY_&lt;I&gt;xxx&lt;/I&gt; value, if present, must remain.                
            </javadoc>
            <declaration name="ABORTED" type="JobState" line="94"/>
            <javadoc line="94">
                The job has been aborted by the system (usually while the job was in the
                  PROCESSING or PROCESSING_STOPPED state), the printer has completed
                  aborting the job, and all job status attributes have reached their final
                  values for the job. While the printer is aborting the job, the job
                  remains in its current state, but the job&apos;s {@link JobStateReasonsJobStateReasons} attribute should contain the PROCESSING_TO_STOP_POINT
                  and ABORTED_BY_SYSTEM values. When the job moves to the ABORTED state,
                  the PROCESSING_TO_STOP_POINT value, if present, must be removed, but the
                  ABORTED_BY_SYSTEM value, if present, must remain.                
            </javadoc>
            <declaration name="COMPLETED" type="JobState" line="105"/>
            <javadoc line="105">
                The job has completed successfully or with warnings or errors after
                  processing, all of the job media sheets have been successfully stacked in
                  the appropriate output bin(s), and all job status attributes have reached
                  their final values for the job. The job&apos;s {@link JobStateReasonsJobStateReasons} attribute should contain one of these values:
                  COMPLETED_SUCCESSFULLY, COMPLETED_WITH_WARNINGS, or
                  COMPLETED_WITH_ERRORS.                
            </javadoc>
            <javadoc line="114">
                Construct a new job state enumeration value with the given integer value.                
                <param>
                    value  Integer value.                    
                </param>
            </javadoc>
            <method name="JobState" type="constructor" line="118">
                <params>
                    <param name="value" type="int"/>
                </params>
            </method>
            <declaration name="myStringTable" type="String[]" line="121"/>
            <declaration name="myEnumValueTable" type="JobState[]" line="122"/>
            <javadoc line="123">
                Returns the string table for class JobState.                
            </javadoc>
            <method name="getStringTable" type="String[]" line="126"/>
            <javadoc line="129">
                Returns the enumeration value table for class JobState.                
            </javadoc>
            <method name="getEnumValueTable" type="EnumSyntax[]" line="132"/>
            <javadoc line="135">
                Get the printing attribute class which is to be used as the &quot;category&quot;
                  for this printing attribute value.
                  &lt;P&gt;
                  For class JobState and any vendor-defined subclasses, the category is
                  class JobState itself.                
                <return>
                    Printing attribute class (category), an instance of class{@link java.lang.Class java.lang.Class}.                    
                </return>
            </javadoc>
            <method name="getCategory" type="Class<? extends Attribute>" line="143"/>
            <javadoc line="146">
                Get the name of the category of which this attribute value is an
                  instance.
                  &lt;P&gt;
                  For class JobState and any vendor-defined subclasses, the category
                  name is &lt;CODE&gt;&quot;job-state&quot;&lt;/CODE&gt;.                
                <return>
                    Attribute category name.                    
                </return>
            </javadoc>
            <method name="getName" type="String" line="154"/>
        </class>
    </source>