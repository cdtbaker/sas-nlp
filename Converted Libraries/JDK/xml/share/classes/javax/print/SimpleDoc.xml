<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print">
        <import package="java.io.ByteArrayInputStream"/>
        <import package="java.io.CharArrayReader"/>
        <import package="java.io.StringReader"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Reader"/>
        <import package="javax.print.attribute.AttributeSetUtilities"/>
        <import package="javax.print.attribute.DocAttributeSet"/>
        <class name="SimpleDoc" line="37">
            <comment line="141">
                Obtains the print data representation object that contains this doc
                 object&apos;s piece of print data in the format corresponding to the
                 supported doc flavor.
                 The &lt;CODE&gt;getPrintData()&lt;CODE&gt; method returns an instance of
                 the representation class whose name is given by
                 {@link DocFlavor#getRepresentationClassName() getRepresentationClassName},
                 and the return value can be cast
                 from class Object to that representation class.
                
                 @return  Print data representation object.
                
                 @exception  IOException if the representation class is a stream and
                     there was an IO error while constructing the stream.                
            </comment>
            <implements interface="Doc"/>
            <javadoc line="37">
                This class is an implementation of interface &lt;code&gt;Doc&lt;/code&gt; that can
                  be used in many common printing requests.
                  It can handle all of the presently defined &quot;pre-defined&quot; doc flavors
                  defined as static variables in the DocFlavor class.
                  &lt;p&gt;
                  In particular this class implements certain required semantics of the
                  Doc specification as follows:
                  &lt;ul&gt;
                  &lt;li&gt;constructs a stream for the service if requested and appropriate.
                  &lt;li&gt;ensures the same object is returned for each call on a method.
                  &lt;li&gt;ensures multiple threads can access the Doc
                  &lt;li&gt;performs some validation of that the data matches the doc flavor.
                  &lt;/ul&gt;
                  Clients who want to re-use the doc object in other jobs,
                  or need a MultiDoc will not want to use this class.
                  &lt;p&gt;
                  If the print data is a stream, or a print job requests data as a
                  stream, then &lt;code&gt;SimpleDoc&lt;/code&gt; does not monitor if the service
                  properly closes the stream after data transfer completion or job
                  termination.
                  Clients may prefer to use provide their own implementation of doc that
                  adds a listener to monitor job completion and to validate that
                  resources such as streams are freed (ie closed).                
            </javadoc>
            <declaration name="flavor" type="DocFlavor" line="65"/>
            <declaration name="attributes" type="DocAttributeSet" line="66"/>
            <declaration name="printData" type="Object" line="67"/>
            <declaration name="reader" type="Reader" line="68"/>
            <declaration name="inStream" type="InputStream" line="69"/>
            <javadoc line="71">
                Constructs a &lt;code&gt;SimpleDoc&lt;/code&gt; with the specified
                  print data, doc flavor and doc attribute set.                
                <param>
                    printData the print data object                    
                </param>
                <param>
                    flavor the &lt;code&gt;DocFlavor&lt;/code&gt; object                    
                </param>
                <param>
                    attributes a &lt;code&gt;DocAttributeSet&lt;/code&gt;, which can
                      be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;flavor&lt;/code&gt; or
                      &lt;code&gt;printData&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, or the
                      &lt;code&gt;printData&lt;/code&gt; does not correspond
                      to the specified doc flavor--for example, the data is
                      not of the type specified as the representation in the
                      &lt;code&gt;DocFlavor&lt;/code&gt;.                    
                </throws>
            </javadoc>
            <method name="SimpleDoc" type="constructor" line="86">
                <params>
                    <param name="printData" type="Object"/>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="DocAttributeSet"/>
                </params>
                <scope line="88"/>
                <declaration name="repClass" type="Class" line="92"/>
                <scope line="93"/>
                <scope line="95"/>
                <scope line="99"/>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                Determines the doc flavor in which this doc object will supply its
                  piece of print data.                
                <return>
                    Doc flavor.                    
                </return>
            </javadoc>
            <method name="getDocFlavor" type="DocFlavor" line="116"/>
            <javadoc line="120">
                Obtains the set of printing attributes for this doc object. If the
                  returned attribute set includes an instance of a particular attribute
                  &lt;I&gt;X,&lt;/I&gt; the printer must use that attribute value for this doc,
                  overriding any value of attribute &lt;I&gt;X&lt;/I&gt; in the job&apos;s attribute set.
                  If the returned attribute set does not include an instance
                  of a particular attribute &lt;I&gt;X&lt;/I&gt; or if null is returned, the printer
                  must consult the job&apos;s attribute set to obtain the value for
                  attribute &lt;I&gt;X,&lt;/I&gt; and if not found there, the printer must use an
                  implementation-dependent default value. The returned attribute set is
                  unmodifiable.                
                <return>
                    Unmodifiable set of printing attributes for this doc, or null
                      to obtain all attribute values from the job&apos;s attribute
                      set.                    
                </return>
            </javadoc>
            <method name="getAttributes" type="DocAttributeSet" line="136"/>
            <method name="getPrintData" type="Object" line="155"/>
            <javadoc line="159">
                Obtains a reader for extracting character print data from this doc.
                  The &lt;code&gt;Doc&lt;/code&gt; implementation is required to support this
                  method if the &lt;code&gt;DocFlavor&lt;/code&gt; has one of the following print
                  data representation classes, and return &lt;code&gt;null&lt;/code&gt;
                  otherwise:
                  &lt;UL&gt;
                  &lt;LI&gt; &lt;code&gt;char[]&lt;/code&gt;
                  &lt;LI&gt; &lt;code&gt;java.lang.String&lt;/code&gt;
                  &lt;LI&gt; &lt;code&gt;java.io.Reader&lt;/code&gt;
                  &lt;/UL&gt;
                  The doc&apos;s print data representation object is used to construct and
                  return a &lt;code&gt;Reader&lt;/code&gt; for reading the print data as a stream
                  of characters from the print data representation object.
                  However, if the print data representation object is itself a
                  &lt;code&gt;Reader&lt;/code&gt; then the print data representation object is
                  simply returned.
                  &lt;P&gt;                
                <return>
                    a &lt;code&gt;Reader&lt;/code&gt; for reading the print data
                      characters from this doc.
                      If a reader cannot be provided because this doc does not meet
                      the criteria stated above, &lt;code&gt;null&lt;/code&gt; is returned.                    
                </return>
                <exception>
                    IOException if there was an I/O error while creating
                      the reader.                    
                </exception>
            </javadoc>
            <method name="getReaderForText" type="Reader" line="185">
                <scope line="187"/>
                <scope line="191">
                    <scope line="192"/>
                    <scope line="196"/>
                    <scope line="199"/>
                </scope>
            </method>
            <javadoc line="206">
                Obtains an input stream for extracting byte print data from
                  this doc.
                  The &lt;code&gt;Doc&lt;/code&gt; implementation is required to support this
                  method if the &lt;code&gt;DocFlavor&lt;/code&gt; has one of the following print
                  data representation classes; otherwise this method
                  returns &lt;code&gt;null&lt;/code&gt;:
                  &lt;UL&gt;
                  &lt;LI&gt; &lt;code&gt;byte[]&lt;/code&gt;
                  &lt;LI&gt; &lt;code&gt;java.io.InputStream&lt;/code&gt;
                  &lt;/UL&gt;
                  The doc&apos;s print data representation object is obtained.  Then, an
                  input stream for reading the print data
                  from the print data representation object as a stream of bytes is
                  created and returned.
                  However, if the print data representation object is itself an
                  input stream then the print data representation object is simply
                  returned.
                  &lt;P&gt;                
                <return>
                    an &lt;code&gt;InputStream&lt;/code&gt; for reading the print data
                      bytes from this doc.  If an input stream cannot be
                      provided because this doc does not meet
                      the criteria stated above, &lt;code&gt;null&lt;/code&gt; is returned.                    
                </return>
                <exception>
                    IOExceptionif there was an I/O error while creating the input stream.                    
                </exception>
            </javadoc>
            <method name="getStreamForBytes" type="InputStream" line="233">
                <scope line="235"/>
                <scope line="239">
                    <scope line="240"/>
                    <scope line="244"/>
                </scope>
            </method>
        </class>
    </source>