<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print">
        <import package="java.io.Serializable"/>
        <import package="java.util.AbstractMap"/>
        <import package="java.util.AbstractSet"/>
        <import package="java.util.Iterator"/>
        <import package="java.util.Map"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Set"/>
        <import package="java.util.Vector"/>
        <class name="MimeType" line="10">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="10">
                Class MimeType encapsulates a Multipurpose Internet Mail Extensions (MIME)
                  media type as defined in &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2045.txt&quot;&gt;RFC
                  2045&lt;/A&gt; and &lt;A HREF=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;&gt;RFC 2046&lt;/A&gt;. A
                  MIME type object is part of a {@link DocFlavor DocFlavor} object and
                  specifies the format of the print data.
                  &lt;P&gt;
                  Class MimeType is similar to the like-named
                  class in package {@link java.awt.datatransfer java.awt.datatransfer}. Class
                  java.awt.datatransfer.MimeType is not used in the Jini Print Service API
                  for two reasons:
                  &lt;OL TYPE=1&gt;
                  &lt;LI&gt;
                  Since not all Java profiles include the AWT, the Jini Print Service should
                  not depend on an AWT class.
                  &lt;P&gt;
                  &lt;LI&gt;
                  The implementation of class java.awt.datatransfer.MimeType does not
                  guarantee
                  that equivalent MIME types will have the same serialized representation.
                  Thus, since the Jini Lookup Service (JLUS) matches service attributes based
                  on equality of serialized representations, JLUS searches involving MIME
                  types encapsulated in class java.awt.datatransfer.MimeType may incorrectly
                  fail to match.
                  &lt;/OL&gt;
                  &lt;P&gt;
                  Class MimeType&apos;s serialized representation is based on the following
                  canonical form of a MIME type string. Thus, two MIME types that are not
                  identical but that are equivalent (that have the same canonical form) will
                  be considered equal by the JLUS&apos;s matching algorithm.
                  &lt;UL&gt;
                  &lt;LI&gt; The media type, media subtype, and parameters are retained, but all
                  comments and whitespace characters are discarded.
                  &lt;LI&gt; The media type, media subtype, and parameter names are converted to
                  lowercase.
                  &lt;LI&gt; The parameter values retain their original case, except a charset
                  parameter value for a text media type is converted to lowercase.
                  &lt;LI&gt; Quote characters surrounding parameter values are removed.
                  &lt;LI&gt; Quoting backslash characters inside parameter values are removed.
                  &lt;LI&gt; The parameters are arranged in ascending order of parameter name.
                  &lt;/UL&gt;
                  &lt;P&gt;                
                <author>
                    Alan Kaminsky                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="55"/>
            <declaration name="myPieces" type="String[]" line="56"/>
            <javadoc line="56">
                Array of strings that hold pieces of this MIME type&apos;s canonical form.
                  If the MIME type has &lt;I&gt;n&lt;/I&gt; parameters, &lt;I&gt;n&lt;/I&gt; &amp;gt;= 0, then the
                  strings in the array are:
                  &lt;BR&gt;Index 0 -- Media type.
                  &lt;BR&gt;Index 1 -- Media subtype.
                  &lt;BR&gt;Index 2&lt;I&gt;i&lt;/I&gt;+2 -- Name of parameter &lt;I&gt;i&lt;/I&gt;,
                  &lt;I&gt;i&lt;/I&gt;=0,1,...,&lt;I&gt;n&lt;/I&gt;-1.
                  &lt;BR&gt;Index 2&lt;I&gt;i&lt;/I&gt;+3 -- Value of parameter &lt;I&gt;i&lt;/I&gt;,
                  &lt;I&gt;i&lt;/I&gt;=0,1,...,&lt;I&gt;n&lt;/I&gt;-1.
                  &lt;BR&gt;Parameters are arranged in ascending order of parameter name.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="myStringValue" type="String" line="70"/>
            <javadoc line="70">
                String value for this MIME type. Computed when needed and cached.                
            </javadoc>
            <declaration name="myEntrySet" type="ParameterMapEntrySet" line="74"/>
            <javadoc line="74">
                Parameter map entry set. Computed when needed and cached.                
            </javadoc>
            <declaration name="myParameterMap" type="ParameterMap" line="78"/>
            <javadoc line="78">
                Parameter map. Computed when needed and cached.                
            </javadoc>
            <class name="ParameterMapEntry" line="82">
                <implements interface="Map.Entry"/>
                <javadoc line="82">
                    Parameter map entry.                    
                </javadoc>
                <declaration name="myIndex" type="int" line="86"/>
                <method name="ParameterMapEntry" type="constructor" line="87">
                    <params>
                        <param name="theIndex" type="int"/>
                    </params>
                </method>
                <method name="getKey" type="Object" line="90"/>
                <method name="getValue" type="Object" line="93"/>
                <method name="setValue" type="Object" line="96">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="99">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                </method>
                <method name="hashCode" type="int" line="102"/>
            </class>
            <class name="ParameterMapEntrySetIterator" line="106">
                <implements interface="Iterator"/>
                <javadoc line="106">
                    Parameter map entry set iterator.                    
                </javadoc>
                <declaration name="myIndex" type="int" line="110"/>
                <method name="hasNext" type="boolean" line="111"/>
                <method name="next" type="Object" line="114">
                    <scope line="115">
                        <declaration name="result" type="ParameterMapEntry" line="116"/>
                    </scope>
                    <scope line="120"/>
                </method>
                <method name="remove" type="void" line="124"/>
            </class>
            <class name="ParameterMapEntrySet" line="128">
                <extends class="AbstractSet"/>
                <javadoc line="128">
                    Parameter map entry set.                    
                </javadoc>
                <method name="iterator" type="Iterator" line="132"/>
                <method name="size" type="int" line="135"/>
            </class>
            <class name="ParameterMap" line="139">
                <extends class="AbstractMap"/>
                <javadoc line="139">
                    Parameter map.                    
                </javadoc>
                <method name="entrySet" type="Set" line="143">
                    <scope line="144"/>
                </method>
            </class>
            <javadoc line="150">
                Construct a new MIME type object from the given string. The given
                  string is converted into canonical form and stored internally.                
                <param>
                    s  MIME media type string.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;s&lt;/CODE&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;s&lt;/CODE&gt; does not obey the
                      syntax for a MIME media type string.                    
                </exception>
            </javadoc>
            <method name="MimeType" type="constructor" line="158">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="161">
                Returns this MIME type object&apos;s MIME type string based on the canonical
                  form. Each parameter value is enclosed in quotes.                
            </javadoc>
            <method name="getMimeType" type="String" line="165"/>
            <javadoc line="168">
                Returns this MIME type object&apos;s media type.                
            </javadoc>
            <method name="getMediaType" type="String" line="171"/>
            <javadoc line="174">
                Returns this MIME type object&apos;s media subtype.                
            </javadoc>
            <method name="getMediaSubtype" type="String" line="177"/>
            <javadoc line="180">
                Returns an unmodifiable map view of the parameters in this MIME type
                  object. Each entry in the parameter map view consists of a parameter
                  name String (key) mapping to a parameter value String. If this MIME
                  type object has no parameters, an empty map is returned.                
                <return>
                    Parameter map for this MIME type object.                    
                </return>
            </javadoc>
            <method name="getParameterMap" type="Map" line="187">
                <scope line="188"/>
            </method>
            <javadoc line="193">
                Converts this MIME type object to a string.                
                <return>
                    MIME type string based on the canonical form. Each parameter
                      value is enclosed in quotes.                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="198"/>
            <javadoc line="201">
                Returns a hash code for this MIME type object.                
            </javadoc>
            <method name="hashCode" type="int" line="204"/>
            <javadoc line="207">
                Determine if this MIME type object is equal to the given object. The two
                  are equal if the given object is not null, is an instance of class
                  net.jini.print.data.MimeType, and has the same canonical form as this
                  MIME type object (that is, has the same type, subtype, and parameters).
                  Thus, if two MIME type objects are the same except for comments, they are
                  considered equal. However, &quot;text/plain&quot; and &quot;text/plain;
                  charset=us-ascii&quot; are not considered equal, even though they represent
                  the same media type (because the default character set for plain text is
                  US-ASCII).                
                <param>
                    obj  Object to test.                    
                </param>
                <return>
                    True if this MIME type object equals &lt;CODE&gt;obj&lt;/CODE&gt;, false
                      otherwise.                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="221">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <javadoc line="224">
                Returns this MIME type&apos;s string value in canonical form.                
            </javadoc>
            <method name="getStringValue" type="String" line="227">
                <scope line="228">
                    <declaration name="result" type="StringBuffer" line="229"/>
                    <declaration name="n" type="int" line="233"/>
                    <scope line="234"/>
                </scope>
            </method>
            <declaration name="TOKEN_LEXEME" type="int" line="245"/>
            <declaration name="QUOTED_STRING_LEXEME" type="int" line="246"/>
            <declaration name="TSPECIAL_LEXEME" type="int" line="247"/>
            <declaration name="EOF_LEXEME" type="int" line="248"/>
            <declaration name="ILLEGAL_LEXEME" type="int" line="249"/>
            <class name="LexicalAnalyzer" line="250">
                <declaration name="mySource" type="String" line="251"/>
                <declaration name="mySourceLength" type="int" line="252"/>
                <declaration name="myCurrentIndex" type="int" line="253"/>
                <declaration name="myLexemeType" type="int" line="254"/>
                <declaration name="myLexemeBeginIndex" type="int" line="255"/>
                <declaration name="myLexemeEndIndex" type="int" line="256"/>
                <method name="LexicalAnalyzer" type="constructor" line="257">
                    <params>
                        <param name="theSource" type="String"/>
                    </params>
                </method>
                <method name="getLexemeType" type="int" line="263"/>
                <method name="getLexeme" type="String" line="266"/>
                <method name="getLexemeFirstCharacter" type="char" line="269"/>
                <method name="nextLexeme" type="void" line="272">
                    <declaration name="state" type="int" line="273"/>
                    <declaration name="commentLevel" type="int" line="274"/>
                    <declaration name="c" type="char" line="275"/>
                    <scope line="276">
                        <scope line="279"/>
                        <scope line="285"/>
                        <scope line="288"/>
                        <scope line="293"/>
                        <scope line="297"/>
                        <scope line="303"/>
                        <scope line="310"/>
                        <scope line="316"/>
                        <scope line="320"/>
                        <scope line="323"/>
                        <scope line="328"/>
                        <scope line="334"/>
                        <scope line="340"/>
                        <scope line="346"/>
                        <scope line="350"/>
                        <scope line="354"/>
                        <scope line="357"/>
                        <scope line="362"/>
                        <scope line="368"/>
                        <scope line="374"/>
                        <scope line="378"/>
                        <scope line="382"/>
                        <scope line="387"/>
                    </scope>
                </method>
            </class>
            <javadoc line="395">
                Returns a lowercase version of the given string. The lowercase version
                  is constructed by applying Character.toLowerCase() to each character of
                  the given string, which maps characters to lowercase using the rules of
                  Unicode. This mapping is the same regardless of locale, whereas the
                  mapping of String.toLowerCase() may be different depending on the
                  default locale.                
            </javadoc>
            <method name="toUnicodeLowerCase" type="String" line="403">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="n" type="int" line="404"/>
                <declaration name="result" type="char[]" line="405"/>
                <scope line="406"/>
            </method>
            <javadoc line="411">
                Returns a version of the given string with backslashes removed.                
            </javadoc>
            <method name="removeBackslashes" type="String" line="414">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="n" type="int" line="415"/>
                <declaration name="result" type="char[]" line="416"/>
                <declaration name="i" type="int" line="417"/>
                <declaration name="j" type="int" line="418"/>
                <declaration name="c" type="char" line="419"/>
                <scope line="420">
                    <scope line="422"/>
                </scope>
            </method>
            <javadoc line="429">
                Returns a version of the string surrounded by quotes and with interior
                  quotes preceded by a backslash.                
            </javadoc>
            <method name="addQuotes" type="String" line="433">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="n" type="int" line="434"/>
                <declaration name="i" type="int" line="435"/>
                <declaration name="c" type="char" line="436"/>
                <declaration name="result" type="StringBuffer" line="437"/>
                <scope line="439">
                    <scope line="441"/>
                </scope>
            </method>
            <javadoc line="449">
                Parses the given string into canonical pieces and stores the pieces in{@link #myPieces &lt;CODE&gt;myPieces&lt;/CODE&gt;}.
                  &lt;P&gt;
                  Special rules applied:
                  &lt;UL&gt;
                  &lt;LI&gt; If the media type is text, the value of a charset parameter is
                  converted to lowercase.
                  &lt;/UL&gt;                
                <param>
                    s  MIME media type string.                    
                </param>
                <exception>
                    NullPointerException(unchecked exception) Thrown if &lt;CODE&gt;s&lt;/CODE&gt; is null.                    
                </exception>
                <exception>
                    IllegalArgumentException(unchecked exception) Thrown if &lt;CODE&gt;s&lt;/CODE&gt; does not obey the
                      syntax for a MIME media type string.                    
                </exception>
            </javadoc>
            <method name="parse" type="void" line="462">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="463"/>
                <declaration name="theLexer" type="LexicalAnalyzer" line="466"/>
                <declaration name="theLexemeType" type="int" line="467"/>
                <declaration name="thePieces" type="Vector" line="468"/>
                <declaration name="mediaTypeIsText" type="boolean" line="469"/>
                <declaration name="parameterNameIsCharset" type="boolean" line="470"/>
                <scope line="471">
                    <declaration name="mt" type="String" line="472"/>
                </scope>
                <scope line="477"/>
                <scope line="480"/>
                <scope line="483"/>
                <scope line="486"/>
                <scope line="490"/>
                <scope line="493">
                    <scope line="495">
                        <declaration name="pn" type="String" line="496"/>
                    </scope>
                    <scope line="501"/>
                    <scope line="504"/>
                    <scope line="507"/>
                    <scope line="510">
                        <declaration name="pv" type="String" line="511"/>
                    </scope>
                    <scope line="515">
                        <declaration name="pv" type="String" line="516"/>
                    </scope>
                    <scope line="520"/>
                </scope>
                <scope line="524"/>
                <declaration name="n" type="int" line="527"/>
                <declaration name="i" type="int" line="529"/>
                <declaration name="temp" type="String" line="530"/>
                <scope line="531">
                    <scope line="533"/>
                    <scope line="536"/>
                </scope>
            </method>
        </class>
    </source>