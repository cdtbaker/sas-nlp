<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.print">
        <import package="java.util.ArrayList"/>
        <import package="java.util.Iterator"/>
        <import package="javax.print.attribute.AttributeSet"/>
        <import package="sun.awt.AppContext"/>
        <import package="java.util.ServiceLoader"/>
        <import package="java.util.ServiceConfigurationError"/>
        <class name="PrintServiceLookup" line="8">
            <javadoc line="8">
                Implementations of this class provide lookup services for
                  print services (typically equivalent to printers) of a particular type.
                  &lt;p&gt;
                  Multiple implementations may be installed concurrently.
                  All implementations must be able to describe the located printers
                  as instances of a PrintService.
                  Typically implementations of this service class are located
                  automatically in JAR files (see the SPI JAR file specification).
                  These classes must be instantiable using a default constructor.
                  Alternatively applications may explicitly register instances
                  at runtime.
                  &lt;p&gt;
                  Applications use only the static methods of this abstract class.
                  The instance methods are implemented by a service provider in a subclass
                  and the unification of the results from all installed lookup classes
                  are reported by the static methods of this class when called by
                  the application.
                  &lt;p&gt;
                  A PrintServiceLookup implementor is recommended to check for the
                  SecurityManager.checkPrintJobAccess() to deny access to untrusted code.
                  Following this recommended policy means that untrusted code may not
                  be able to locate any print services. Downloaded applets are the most
                  common example of untrusted code.
                  &lt;p&gt;
                  This check is made on a per lookup service basis to allow flexibility in
                  the policy to reflect the needs of different lookup services.
                  &lt;p&gt;
                  Services which are registered by registerService(PrintService)
                  will not be included in lookup results if a security manager is
                  installed and its checkPrintJobAccess() method denies access.                
            </javadoc>
            <class name="Services" line="41">
                <declaration name="listOfLookupServices" type="ArrayList" line="42"/>
                <declaration name="registeredServices" type="ArrayList" line="43"/>
            </class>
            <method name="getServicesForContext" type="Services" line="45">
                <declaration name="services" type="Services" line="46"/>
                <scope line="47"/>
            </method>
            <method name="getListOfLookupServices" type="ArrayList" line="53"/>
            <method name="initListOfLookupServices" type="ArrayList" line="56">
                <declaration name="listOfLookupServices" type="ArrayList" line="57"/>
            </method>
            <method name="getRegisteredServices" type="ArrayList" line="61"/>
            <method name="initRegisteredServices" type="ArrayList" line="64">
                <declaration name="registeredServices" type="ArrayList" line="65"/>
            </method>
            <javadoc line="69">
                Locates print services capable of printing the specified{@link DocFlavor}.                
                <param>
                    flavor the flavor to print. If null, this constraint is not
                      used.                    
                </param>
                <param>
                    attributes attributes that the print service must support.
                      If null this constraint is not used.                    
                </param>
                <return>
                    array of matching &lt;code&gt;PrintService&lt;/code&gt; objects
                      representing print services that support the specified flavor
                      attributes.  If no services match, the array is zero-length.                    
                </return>
            </javadoc>
            <method name="lookupPrintServices" type="PrintService[]" line="79">
                <params>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="list" type="ArrayList" line="80"/>
            </method>
            <javadoc line="83">
                Locates MultiDoc print Services capable of printing MultiDocs
                  containing all the specified doc flavors.
                  &lt;P&gt; This method is useful to help locate a service that can print
                  a &lt;code&gt;MultiDoc&lt;/code&gt; in which the elements may be different
                  flavors. An application could perform this itself by multiple lookups
                  on each &lt;code&gt;DocFlavor&lt;/code&gt; in turn and collating the results,
                  but the lookup service may be able to do this more efficiently.                
                <param>
                    flavors the flavors to print. If null or empty this
                      constraint is not used.
                      Otherwise return only multidoc print services that can print all
                      specified doc flavors.                    
                </param>
                <param>
                    attributes attributes that the print service must
                      support.  If null this constraint is not used.                    
                </param>
                <return>
                    array of matching {@link MultiDocPrintService} objects.
                      If no services match, the array is zero-length.                    
                </return>
            </javadoc>
            <method name="lookupMultiDocPrintServices" type="MultiDocPrintService[]" line="100">
                <params>
                    <param name="flavors" type="DocFlavor[]"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="list" type="ArrayList" line="101"/>
            </method>
            <javadoc line="104">
                Locates the default print service for this environment.
                  This may return null.
                  If multiple lookup services each specify a default, the
                  chosen service is not precisely defined, but a
                  platform native service, rather than an installed service,
                  is usually returned as the default.  If there is no clearly
                  identifiable
                  platform native default print service, the default is the first
                  to be located in an implementation-dependent manner.
                  &lt;p&gt;
                  This may include making use of any preferences API that is available
                  as part of the Java or native platform.
                  This algorithm may be overridden by a user setting the property
                  javax.print.defaultPrinter.
                  A service specified must be discovered to be valid and currently
                  available to be returned as the default.                
                <return>
                    the default PrintService.                    
                </return>
            </javadoc>
            <method name="lookupDefaultPrintService" type="PrintService" line="123">
                <declaration name="psIterator" type="Iterator" line="124"/>
                <scope line="125">
                    <scope line="126">
                        <declaration name="lus" type="PrintServiceLookup" line="127"/>
                        <declaration name="service" type="PrintService" line="128"/>
                        <scope line="129"/>
                    </scope>
                    <scope line="133"/>
                </scope>
            </method>
            <javadoc line="138">
                Allows an application to explicitly register a class that
                  implements lookup services. The registration will not persist
                  across VM invocations.
                  This is useful if an application needs to make a new service
                  available that is not part of the installation.
                  If the lookup service is already registered, or cannot be registered,
                  the method returns false.
                  &lt;p&gt;                
                <param>
                    sp an implementation of a lookup service.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the new lookup service is newly
                      registered; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="registerServiceProvider" type="boolean" line="151">
                <params>
                    <param name="sp" type="PrintServiceLookup"/>
                </params>
                <scope line="152">
                    <declaration name="psIterator" type="Iterator" line="153"/>
                    <scope line="154">
                        <scope line="155">
                            <declaration name="lus" type="Object" line="156"/>
                            <scope line="157"/>
                        </scope>
                        <scope line="161"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="168">
                Allows an application to directly register an instance of a
                  class which implements a print service.
                  The lookup operations for this service will be
                  performed by the PrintServiceLookup class using the attribute
                  values and classes reported by the service.
                  This may be less efficient than a lookup
                  service tuned for that service.
                  Therefore registering a &lt;code&gt;PrintServiceLookup&lt;/code&gt; instance
                  instead is recommended.
                  The method returns true if this service is not previously
                  registered and is now successfully registered.
                  This method should not be called with StreamPrintService instances.
                  They will always fail to register and the method will return false.                
                <param>
                    service an implementation of a print service.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the service is newly
                      registered; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </return>
            </javadoc>
            <method name="registerService" type="boolean" line="186">
                <params>
                    <param name="service" type="PrintService"/>
                </params>
                <scope line="187">
                    <scope line="188"/>
                    <declaration name="registeredServices" type="ArrayList" line="191"/>
                    <scope line="192"/>
                    <scope line="195">
                        <scope line="196"/>
                    </scope>
                </scope>
            </method>
            <method name="getPrintServices" type="PrintService[]" line="204"/>
            <javadoc line="204">
                Locates services that can be positively confirmed to support
                  the combination of attributes and DocFlavors specified.
                  This method is not called directly by applications.
                  &lt;p&gt;
                  Implemented by a service provider, used by the static methods
                  of this class.
                  &lt;p&gt;
                  The results should be the same as obtaining all the PrintServices
                  and querying each one individually on its support for the
                  specified attributes and flavors, but the process can be more
                  efficient by taking advantage of the capabilities of lookup services
                  for the print services.                
                <param>
                    flavor of document required.  If null it is ignored.                    
                </param>
                <param>
                    attributes required to be supported. If null this
                      constraint is not used.                    
                </param>
                <return>
                    array of matching PrintServices. If no services match, the
                      array is zero-length.                    
                </return>
            </javadoc>
            <method name="getPrintServices" type="PrintService[]" line="224"/>
            <javadoc line="224">
                Not called directly by applications.
                  Implemented by a service provider, used by the static methods
                  of this class.                
                <return>
                    array of all PrintServices known to this lookup service
                      class. If none are found, the array is zero-length.                    
                </return>
            </javadoc>
            <method name="getMultiDocPrintServices" type="MultiDocPrintService[]" line="232"/>
            <javadoc line="232">
                Not called directly by applications.
                  &lt;p&gt;
                  Implemented by a service provider, used by the static methods
                  of this class.
                  &lt;p&gt;
                  Locates MultiDoc print services which can be positively confirmed
                  to support the combination of attributes and DocFlavors specified.
                  &lt;p&gt;                
                <param>
                    flavors of documents required. If null or empty it is ignored.                    
                </param>
                <param>
                    attributes required to be supported. If null this
                      constraint is not used.                    
                </param>
                <return>
                    array of matching PrintServices. If no services match, the
                      array is zero-length.                    
                </return>
            </javadoc>
            <method name="getDefaultPrintService" type="PrintService" line="248"/>
            <javadoc line="248">
                Not called directly by applications.
                  Implemented by a service provider, and called by the print lookup
                  service                
                <return>
                    the default PrintService for this lookup service.
                      If there is no default, returns null.                    
                </return>
            </javadoc>
            <method name="getAllLookupServices" type="ArrayList" line="256">
                <scope line="257">
                    <declaration name="listOfLookupServices" type="ArrayList" line="258"/>
                    <scope line="259"/>
                    <scope line="262"/>
                    <scope line="265">
                        <anonymous_class line="266">
                            <method name="run" type="Object" line="267">
                                <declaration name="iterator" type="Iterator&amp;lt;PrintServiceLookup&amp;gt;" line="268"/>
                                <declaration name="los" type="ArrayList" line="269"/>
                                <scope line="270">
                                    <scope line="271"/>
                                    <scope line="274">
                                        <scope line="275"/>
                                        <scope line="278"/>
                                    </scope>
                                </scope>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="288"/>
                </scope>
            </method>
            <method name="getServices" type="ArrayList" line="293">
                <params>
                    <param name="flavor" type="DocFlavor"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="listOfServices" type="ArrayList" line="294"/>
                <declaration name="psIterator" type="Iterator" line="295"/>
                <scope line="296">
                    <scope line="297">
                        <declaration name="lus" type="PrintServiceLookup" line="298"/>
                        <declaration name="services" type="PrintService[]" line="299"/>
                        <scope line="300">
                            <scope line="301"/>
                            <scope line="304"/>
                        </scope>
                        <scope line="307"/>
                        <scope line="310"/>
                        <scope line="313"/>
                    </scope>
                    <scope line="317"/>
                </scope>
                <declaration name="registeredServices" type="ArrayList" line="320"/>
                <scope line="321">
                    <declaration name="security" type="SecurityManager" line="322"/>
                    <scope line="323"/>
                </scope>
                <scope line="328"/>
                <scope line="330">
                    <declaration name="services" type="PrintService[]" line="331"/>
                    <scope line="332">
                        <scope line="333">
                            <scope line="334"/>
                            <scope line="337"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getMultiDocServices" type="ArrayList" line="345">
                <params>
                    <param name="flavors" type="DocFlavor[]"/>
                    <param name="attributes" type="AttributeSet"/>
                </params>
                <declaration name="listOfServices" type="ArrayList" line="346"/>
                <declaration name="psIterator" type="Iterator" line="347"/>
                <scope line="348">
                    <scope line="349">
                        <declaration name="lus" type="PrintServiceLookup" line="350"/>
                        <declaration name="services" type="MultiDocPrintService[]" line="351"/>
                        <scope line="352"/>
                        <scope line="355"/>
                    </scope>
                    <scope line="359"/>
                </scope>
                <declaration name="registeredServices" type="ArrayList" line="362"/>
                <scope line="363">
                    <declaration name="security" type="SecurityManager" line="364"/>
                    <scope line="365"/>
                </scope>
                <scope line="370"/>
                <scope line="372">
                    <declaration name="services" type="PrintService[]" line="373"/>
                    <scope line="374">
                        <scope line="375">
                            <scope line="376"/>
                            <scope line="379">
                                <declaration name="supported" type="boolean" line="380"/>
                                <scope line="381">
                                    <scope line="382">
                                        <scope line="383"/>
                                    </scope>
                                    <scope line="388"/>
                                </scope>
                                <scope line="393"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
        </class>
    </source>