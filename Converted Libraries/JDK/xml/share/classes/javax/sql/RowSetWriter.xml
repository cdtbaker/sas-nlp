<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql">
        <import package="java.sql"/>
        <interface name="RowSetWriter">
            <javadoc line="3">
                An object that implements the &lt;code&gt;RowSetWriter&lt;/code&gt; interface,
                  called a &lt;i&gt;writer&lt;/i&gt;. A writer may be registered with a &lt;code&gt;RowSet&lt;/code&gt;
                  object that supports the reader/writer paradigm.
                  &lt;P&gt;
                  If a disconnected &lt;code&gt;RowSet&lt;/code&gt; object modifies some of its data,
                  and it has a writer associated with it, it may be implemented so that it
                  calls on the writer&apos;s &lt;code&gt;writeData&lt;/code&gt; method internally
                  to write the updates back to the data source. In order to do this, the writer
                  must first establish a connection with the rowset&apos;s data source.
                  &lt;P&gt;
                  If the data to be updated has already been changed in the data source, there
                  is a conflict, in which case the writer will not write
                  the changes to the data source.  The algorithm the writer uses for preventing
                  or limiting conflicts depends entirely on its implementation.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="writeData" type="boolean" line="21"/>
            <javadoc line="21">
                Writes the changes in this &lt;code&gt;RowSetWriter&lt;/code&gt; object&apos;s
                  rowset back to the data source from which it got its data.                
                <param>
                    caller the &lt;code&gt;RowSet&lt;/code&gt; object (1) that has implemented the
                      &lt;code&gt;RowSetInternal&lt;/code&gt; interface, (2) with which this writer is
                      registered, and (3) that called this method internally                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the modified data was written; &lt;code&gt;false&lt;/code&gt;
                      if not, which will be the case if there is a conflict                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
        </interface>
    </source>