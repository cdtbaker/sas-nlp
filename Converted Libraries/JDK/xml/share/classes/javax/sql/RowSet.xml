<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql">
        <import package="java.sql"/>
        <import package="java.io"/>
        <import package="java.math"/>
        <import package="java.util"/>
        <interface name="RowSet">
            <implements interface="ResultSet"/>
            <comment line="90">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="91">
                Properties                
            </comment>
            <comment line="92">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="94">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="95">
                The following properties may be used to create a Connection.                
            </comment>
            <comment line="96">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="250">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="251">
                The following properties may be used to create a Statement.                
            </comment>
            <comment line="252">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="437">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="438">
                Parameters                
            </comment>
            <comment line="439">
                -----------------------------------------------------------------------                
            </comment>
            <comment line="441">
                The &lt;code&gt;RowSet&lt;code&gt; setter methods are used to set any input parameters
                 needed by the &lt;code&gt;RowSet&lt;code&gt; object&apos;s command.
                 Parameters are set at run time, as opposed to design time.                
            </comment>
            <comment line="1841">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1842">
                Reading and writing data                
            </comment>
            <comment line="1843">
                ---------------------------------------------------------------------                
            </comment>
            <comment line="1875">
                --------------------------------------------------------------------                
            </comment>
            <comment line="1876">
                Events                
            </comment>
            <comment line="1877">
                --------------------------------------------------------------------                
            </comment>
            <javadoc line="33">
                The interface that adds support to the JDBC API for the
                  JavaBeans&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; component model.
                  A rowset, which can be used as a JavaBeans component in
                  a visual Bean development environment, can be created and
                  configured at design time and executed at run time.
                  &lt;P&gt;
                  The &lt;code&gt;RowSet&lt;/code&gt;
                  interface provides a set of JavaBeans properties that allow a &lt;code&gt;RowSet&lt;/code&gt;
                  instance to be configured to connect to a JDBC data source and read
                  some data from the data source.  A group of setter methods (&lt;code&gt;setInt&lt;/code&gt;,
                  &lt;code&gt;setBytes&lt;/code&gt;, &lt;code&gt;setString&lt;/code&gt;, and so on)
                  provide a way to pass input parameters to a rowset&apos;s command property.
                  This command is the SQL query the rowset uses when it gets its data from
                  a relational database, which is generally the case.
                  &lt;P&gt;
                  The &lt;code&gt;RowSet&lt;/code&gt;
                  interface supports JavaBeans events, allowing other components in an
                  application to be notified when an event occurs on a rowset,
                  such as a change in its value.
                  &lt;P&gt;The &lt;code&gt;RowSet&lt;/code&gt; interface is unique in that it is intended to be
                  implemented using the rest of the JDBC API.  In other words, a
                  &lt;code&gt;RowSet&lt;/code&gt; implementation is a layer of software that executes &quot;on top&quot;
                  of a JDBC driver.  Implementations of the &lt;code&gt;RowSet&lt;/code&gt; interface can
                  be provided by anyone, including JDBC driver vendors who want to
                  provide a &lt;code&gt;RowSet&lt;/code&gt; implementation as part of their JDBC products.
                  &lt;P&gt;
                  A &lt;code&gt;RowSet&lt;/code&gt; object may make a connection with a data source and
                  maintain that connection throughout its life cycle, in which case it is
                  called a &lt;i&gt;connected&lt;/i&gt; rowset.  A rowset may also make a connection with
                  a data source, get data from it, and then close the connection. Such a rowset
                  is called a &lt;i&gt;disconnected&lt;/i&gt; rowset.  A disconnected rowset may make
                  changes to its data while it is disconnected and then send the changes back
                  to the original source of the data, but it must reestablish a connection to do so.
                  &lt;P&gt;
                  A disconnected rowset may have a reader (a &lt;code&gt;RowSetReader&lt;/code&gt; object)
                  and a writer (a &lt;code&gt;RowSetWriter&lt;/code&gt; object) associated with it.
                  The reader may be implemented in many different ways to populate a rowset
                  with data, including getting data from a non-relational data source. The
                  writer can also be implemented in many different ways to propagate changes
                  made to the rowset&apos;s data back to the underlying data source.
                  &lt;P&gt;
                  Rowsets are easy to use.  The &lt;code&gt;RowSet&lt;/code&gt; interface extends the standard
                  &lt;code&gt;java.sql.ResultSet&lt;/code&gt; interface.  The &lt;code&gt;RowSetMetaData&lt;/code&gt;
                  interface extends the &lt;code&gt;java.sql.ResultSetMetaData&lt;/code&gt; interface.
                  Thus, developers familiar
                  with the JDBC API will have to learn a minimal number of new APIs to
                  use rowsets.  In addition, third-party software tools that work with
                  JDBC &lt;code&gt;ResultSet&lt;/code&gt; objects will also easily be made to work with rowsets.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getUrl" type="String" line="97"/>
            <javadoc line="97">
                Retrieves the url property this &lt;code&gt;RowSet&lt;/code&gt; object will use to
                  create a connection if it uses the &lt;code&gt;DriverManager&lt;/code&gt;
                  instead of a &lt;code&gt;DataSource&lt;/code&gt; object to establish the connection.
                  The default value is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string url                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setUrl                    
                </see>
            </javadoc>
            <method name="setUrl" type="void" line="109"/>
            <javadoc line="109">
                Sets the URL this &lt;code&gt;RowSet&lt;/code&gt; object will use when it uses the
                  &lt;code&gt;DriverManager&lt;/code&gt; to create a connection.
                  Setting this property is optional.  If a URL is used, a JDBC driver
                  that accepts the URL must be loaded before the
                  rowset is used to connect to a database.  The rowset will use the URL
                  internally to create a database connection when reading or writing
                  data.  Either a URL or a data source name is used to create a
                  connection, whichever was set to non null value most recently.                
                <param>
                    url a string value; may be <code>null</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getUrl                    
                </see>
            </javadoc>
            <method name="getDataSourceName" type="String" line="126"/>
            <javadoc line="126">
                Retrieves the logical name that identifies the data source for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.                
                <return>
                    a data source name                    
                </return>
                <see>
                    #setDataSourceName                    
                </see>
                <see>
                    #setUrl                    
                </see>
            </javadoc>
            <method name="setDataSourceName" type="void" line="136"/>
            <javadoc line="136">
                Sets the data source name property for this &lt;code&gt;RowSet&lt;/code&gt; object to the
                  given &lt;code&gt;String&lt;/code&gt;.
                  &lt;P&gt;
                  The value of the data source name property can be used to do a lookup of
                  a &lt;code&gt;DataSource&lt;/code&gt; object that has been registered with a naming
                  service.  After being retrieved, the &lt;code&gt;DataSource&lt;/code&gt; object can be
                  used to create a connection to the data source that it represents.                
                <param>
                    name the logical name of the data source for this <code>RowSet</code>
                      object; may be <code>null</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getDataSourceName                    
                </see>
            </javadoc>
            <method name="getUsername" type="String" line="152"/>
            <javadoc line="152">
                Retrieves the username used to create a database connection for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.
                  The username property is set at run time before calling the method
                  &lt;code&gt;execute&lt;/code&gt;.  It is
                  not usually part of the serialized state of a &lt;code&gt;RowSet&lt;/code&gt; object.                
                <return>
                    the username property                    
                </return>
                <see>
                    #setUsername                    
                </see>
            </javadoc>
            <method name="setUsername" type="void" line="164"/>
            <javadoc line="164">
                Sets the username property for this &lt;code&gt;RowSet&lt;/code&gt; object to the
                  given &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    name a user name                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getUsername                    
                </see>
            </javadoc>
            <method name="getPassword" type="String" line="174"/>
            <javadoc line="174">
                Retrieves the password used to create a database connection.
                  The password property is set at run time before calling the method
                  &lt;code&gt;execute&lt;/code&gt;.  It is not usually part of the serialized state
                  of a &lt;code&gt;RowSet&lt;/code&gt; object.                
                <return>
                    the password for making a database connection                    
                </return>
                <see>
                    #setPassword                    
                </see>
            </javadoc>
            <method name="setPassword" type="void" line="185"/>
            <javadoc line="185">
                Sets the database password for this &lt;code&gt;RowSet&lt;/code&gt; object to
                  the given &lt;code&gt;String&lt;/code&gt;.                
                <param>
                    password the password string                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getPassword                    
                </see>
            </javadoc>
            <method name="getTransactionIsolation" type="int" line="195"/>
            <javadoc line="195">
                Retrieves the transaction isolation level set for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.                
                <return>
                    the transaction isolation level; one of
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>                    
                </return>
                <see>
                    #setTransactionIsolation                    
                </see>
            </javadoc>
            <method name="setTransactionIsolation" type="void" line="208"/>
            <javadoc line="208">
                Sets the transaction isolation level for this &lt;code&gt;RowSet&lt;/code&gt; obejct.                
                <param>
                    level the transaction isolation level; one of
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getTransactionIsolation                    
                </see>
            </javadoc>
            <method name="getTypeMap" type="java.util.Map<String,Class<?>>" line="221"/>
            <javadoc line="221">
                Retrieves the &lt;code&gt;Map&lt;/code&gt; object associated with this
                  &lt;code&gt;RowSet&lt;/code&gt; object, which specifies the custom mapping
                  of SQL user-defined types, if any.  The default is for the
                  type map to be empty.                
                <return>
                    a <code>java.util.Map</code> object containing the names of
                      SQL user-defined types and the Java classes to which they are
                      to be mapped                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setTypeMap                    
                </see>
            </javadoc>
            <method name="setTypeMap" type="void" line="236"/>
            <javadoc line="236">
                Installs the given &lt;code&gt;java.util.Map&lt;/code&gt; object as the default
                  type map for this &lt;code&gt;RowSet&lt;/code&gt; object. This type map will be
                  used unless another type map is supplied as a method parameter.                
                <param>
                    map  a <code>java.util.Map</code> object containing the names of
                      SQL user-defined types and the Java classes to which they are
                      to be mapped                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getTypeMap                    
                </see>
            </javadoc>
            <method name="getCommand" type="String" line="253"/>
            <javadoc line="253">
                Retrieves this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command property.
                  The command property contains a command string, which must be an SQL
                  query, that can be executed to fill the rowset with data.
                  The default value is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the command string; may be <code>null</code>                    
                </return>
                <see>
                    #setCommand                    
                </see>
            </javadoc>
            <method name="setCommand" type="void" line="265"/>
            <javadoc line="265">
                Sets this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command property to the given
                  SQL query.
                  This property is optional
                  when a rowset gets its data from a data source that does not support
                  commands, such as a spreadsheet.                
                <param>
                    cmd the SQL query that will be used to get the data for this
                      <code>RowSet</code> object; may be <code>null</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getCommand                    
                </see>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="280"/>
            <javadoc line="280">
                Retrieves whether this &lt;code&gt;RowSet&lt;/code&gt; object is read-only.
                  If updates are possible, the default is for a rowset to be
                  updatable.
                  &lt;P&gt;
                  Attempts to update a read-only rowset will result in an
                  &lt;code&gt;SQLException&lt;/code&gt; being thrown.                
                <return>
                    <code>true</code> if this <code>RowSet</code> object is
                      read-only; <code>false</code> if it is updatable                    
                </return>
                <see>
                    #setReadOnly                    
                </see>
            </javadoc>
            <method name="setReadOnly" type="void" line="294"/>
            <javadoc line="294">
                Sets whether this &lt;code&gt;RowSet&lt;/code&gt; object is read-only to the
                  given &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    value <code>true</code> if read-only; <code>false</code> if
                      updatable                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #isReadOnly                    
                </see>
            </javadoc>
            <method name="getMaxFieldSize" type="int" line="305"/>
            <javadoc line="305">
                Retrieves the maximum number of bytes that may be returned
                  for certain column values.
                  This limit applies only to &lt;code&gt;BINARY&lt;/code&gt;,
                  &lt;code&gt;VARBINARY&lt;/code&gt;, &lt;code&gt;LONGVARBINARYBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;,
                  &lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;LONGVARCHAR&lt;/code&gt;, &lt;code&gt;NCHAR&lt;/code&gt;
                  and &lt;code&gt;NVARCHAR&lt;/code&gt; columns.
                  If the limit is exceeded, the excess data is silently discarded.                
                <return>
                    the current maximum column size limit; zero means that there
                      is no limit                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setMaxFieldSize                    
                </see>
            </javadoc>
            <method name="setMaxFieldSize" type="void" line="321"/>
            <javadoc line="321">
                Sets the maximum number of bytes that can be returned for a column
                  value to the given number of bytes.
                  This limit applies only to &lt;code&gt;BINARY&lt;/code&gt;,
                  &lt;code&gt;VARBINARY&lt;/code&gt;, &lt;code&gt;LONGVARBINARYBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;,
                  &lt;code&gt;VARCHAR&lt;/code&gt;, &lt;code&gt;LONGVARCHAR&lt;/code&gt;, &lt;code&gt;NCHAR&lt;/code&gt;
                  and &lt;code&gt;NVARCHAR&lt;/code&gt; columns.
                  If the limit is exceeded, the excess data is silently discarded.
                  For maximum portability, use values greater than 256.                
                <param>
                    max the new max column size limit in bytes; zero means unlimited                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getMaxFieldSize                    
                </see>
            </javadoc>
            <method name="getMaxRows" type="int" line="337"/>
            <javadoc line="337">
                Retrieves the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt;
                  object can contain.
                  If the limit is exceeded, the excess rows are silently dropped.                
                <return>
                    the current maximum number of rows that this <code>RowSet</code>
                      object can contain; zero means unlimited                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setMaxRows                    
                </see>
            </javadoc>
            <method name="setMaxRows" type="void" line="349"/>
            <javadoc line="349">
                Sets the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt;
                  object can contain to the specified number.
                  If the limit is exceeded, the excess rows are silently dropped.                
                <param>
                    max the new maximum number of rows; zero means unlimited                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getMaxRows                    
                </see>
            </javadoc>
            <method name="getEscapeProcessing" type="boolean" line="360"/>
            <javadoc line="360">
                Retrieves whether escape processing is enabled for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.
                  If escape scanning is enabled, which is the default, the driver will do
                  escape substitution before sending an SQL statement to the database.                
                <return>
                    <code>true</code> if escape processing is enabled;
                      <code>false</code> if it is disabled                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setEscapeProcessing                    
                </see>
            </javadoc>
            <method name="setEscapeProcessing" type="void" line="373"/>
            <javadoc line="373">
                Sets escape processing for this &lt;code&gt;RowSet&lt;/code&gt; object on or
                  off. If escape scanning is on (the default), the driver will do
                  escape substitution before sending an SQL statement to the database.                
                <param>
                    enable <code>true</code> to enable escape processing;
                      <code>false</code> to disable it                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getEscapeProcessing                    
                </see>
            </javadoc>
            <method name="getQueryTimeout" type="int" line="385"/>
            <javadoc line="385">
                Retrieves the maximum number of seconds the driver will wait for
                  a statement to execute.
                  If this limit is exceeded, an &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <return>
                    the current query timeout limit in seconds; zero means
                      unlimited                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setQueryTimeout                    
                </see>
            </javadoc>
            <method name="setQueryTimeout" type="void" line="397"/>
            <javadoc line="397">
                Sets the maximum time the driver will wait for
                  a statement to execute to the given number of seconds.
                  If this limit is exceeded, an &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <param>
                    seconds the new query timeout limit in seconds; zero means
                      that there is no limit                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getQueryTimeout                    
                </see>
            </javadoc>
            <method name="setType" type="void" line="409"/>
            <javadoc line="409">
                Sets the type of this &lt;code&gt;RowSet&lt;/code&gt; object to the given type.
                  This method is used to change the type of a rowset, which is by
                  default read-only and non-scrollable.                
                <param>
                    type one of the <code>ResultSet</code> constants specifying a type:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    java.sql.ResultSet#getType                    
                </see>
            </javadoc>
            <method name="setConcurrency" type="void" line="423"/>
            <javadoc line="423">
                Sets the concurrency of this &lt;code&gt;RowSet&lt;/code&gt; object to the given
                  concurrency level. This method is used to change the concurrency level
                  of a rowset, which is by default &lt;code&gt;ResultSet.CONCUR_READ_ONLY&lt;/code&gt;                
                <param>
                    concurrency one of the <code>ResultSet</code> constants specifying a
                      concurrency level:  <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    ResultSet#getConcurrency                    
                </see>
            </javadoc>
            <method name="setNull" type="void" line="446"/>
            <javadoc line="446">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s SQL
                  command to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    sqlType a SQL type code defined by <code>java.sql.Types</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setNull" type="void" line="458"/>
            <javadoc line="458">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType the SQL type code defined in <code>java.sql.Types</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="473"/>
            <javadoc line="473">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s SQL
                  command to SQL &lt;code&gt;NULL&lt;/code&gt;. This version of the method &lt;code&gt;setNull&lt;/code&gt;
                  should  be used for SQL user-defined types (UDTs) and &lt;code&gt;REF&lt;/code&gt; type
                  parameters.  Examples of UDTs include: &lt;code&gt;STRUCT&lt;/code&gt;, &lt;code&gt;DISTINCT&lt;/code&gt;,
                  &lt;code&gt;JAVA_OBJECT&lt;/code&gt;, and named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully qualified SQL type name when specifying
                  a NULL UDT or &lt;code&gt;REF&lt;/code&gt; parameter.  In the case of a UDT,
                  the name is the type name of the parameter itself.  For a &lt;code&gt;REF&lt;/code&gt;
                  parameter, the name is the type name of the referenced type.  If
                  a JDBC driver does not need the type code or type name information,
                  it may ignore it.
                  Although it is intended for UDT and &lt;code&gt;REF&lt;/code&gt; parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or &lt;code&gt;REF&lt;/code&gt; type,
                  the typeName parameter is ignored.                
                <param>
                    paramIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully qualified name of an SQL UDT or the type
                      name of the SQL structured type being referenced by a <code>REF</code>
                      type; ignored if the parameter is not a UDT or <code>REF</code> type                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setNull" type="void" line="504"/>
            <javadoc line="504">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  This version of the method &lt;code&gt;setNull&lt;/code&gt; should
                  be used for user-defined types and REF type parameters.  Examples
                  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully-qualified SQL type name when specifying
                  a NULL user-defined or REF parameter.  In the case of a user-defined type
                  the name is the type name of the parameter itself.  For a REF
                  parameter, the name is the type name of the referenced type.  If
                  a JDBC driver does not need the type code or type name information,
                  it may ignore it.
                  Although it is intended for user-defined and Ref parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or REF type, the given
                  typeName is ignored.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL user-defined type;
                      ignored if the parameter is not a user-defined type or
                      SQL <code>REF</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBoolean" type="void" line="539"/>
            <javadoc line="539">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;boolean&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;BIT&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setBoolean" type="void" line="550"/>
            <javadoc line="550">
                Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <see>
                    #getBoolean                    
                </see>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setByte" type="void" line="566"/>
            <javadoc line="566">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;byte&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;TINYINT&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setByte" type="void" line="577"/>
            <javadoc line="577">
                Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getByte                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setShort" type="void" line="593"/>
            <javadoc line="593">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;short&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setShort" type="void" line="604"/>
            <javadoc line="604">
                Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getShort                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setInt" type="void" line="620"/>
            <javadoc line="620">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;int&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;INTEGER&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setInt" type="void" line="631"/>
            <javadoc line="631">
                Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getInt                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLong" type="void" line="647"/>
            <javadoc line="647">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;long&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;BIGINT&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setLong" type="void" line="658"/>
            <javadoc line="658">
                Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getLong                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFloat" type="void" line="674"/>
            <javadoc line="674">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;float&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;REAL&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setFloat" type="void" line="685"/>
            <javadoc line="685">
                Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getFloat                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDouble" type="void" line="701"/>
            <javadoc line="701">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;double&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setDouble" type="void" line="712"/>
            <javadoc line="712">
                Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDouble                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBigDecimal" type="void" line="728"/>
            <javadoc line="728">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.math.BigDeciaml&lt;/code&gt; value.
                  The driver converts this to
                  an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setBigDecimal" type="void" line="740"/>
            <javadoc line="740">
                Sets the designated parameter to the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBigDecimal                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setString" type="void" line="757"/>
            <javadoc line="757">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java &lt;code&gt;String&lt;/code&gt; value. Before sending it to the
                  database, the driver converts this to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or
                  &lt;code&gt;LONGVARCHAR&lt;/code&gt; value, depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setString" type="void" line="770"/>
            <javadoc line="770">
                Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getString                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBytes" type="void" line="789"/>
            <javadoc line="789">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given Java array of &lt;code&gt;byte&lt;/code&gt; values. Before sending it to the
                  database, the driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; value, depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARBINARY&lt;/code&gt; values.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setBytes" type="void" line="802"/>
            <javadoc line="802">
                Sets the designated parameter to the given Java array of bytes.
                  The driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; (depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends
                  it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getBytes                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="820"/>
            <javadoc line="820">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;DATE&lt;/code&gt; value before sending it to the database, using the
                  default &lt;code&gt;java.util.Calendar&lt;/code&gt; to calculate the date.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setTime" type="void" line="832"/>
            <javadoc line="832">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;TIME&lt;/code&gt; value before sending it to the database, using the
                  default &lt;code&gt;java.util.Calendar&lt;/code&gt; to calculate it.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setTimestamp" type="void" line="844"/>
            <javadoc line="844">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value. The driver converts this to
                  an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value before sending it to the database, using the
                  default &lt;code&gt;java.util.Calendar&lt;/code&gt; to calculate it.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setTimestamp" type="void" line="857"/>
            <javadoc line="857">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver
                  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="875"/>
            <javadoc line="875">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.io.InputStream&lt;/code&gt; value.
                  It may be more practical to send a very large ASCII value via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; rather than as a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter. The driver will read the data from the stream
                  as needed until it reaches end-of-file.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setAsciiStream" type="void" line="895"/>
            <javadoc line="895">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="920"/>
            <javadoc line="920">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.io.InputStream&lt;/code&gt; value.
                  It may be more practical to send a very large binary value via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; rather than as a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter. The driver will read the data from the stream
                  as needed until it reaches end-of-file.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setBinaryStream" type="void" line="940"/>
            <javadoc line="940">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="964"/>
            <javadoc line="964">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;java.io.Reader&lt;/code&gt; value.
                  It may be more practical to send a very large UNICODE value via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; rather than as a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter. The driver will read the data from the stream
                  as needed until it reaches end-of-file.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader the <code>Reader</code> object that contains the UNICODE data
                      to be set                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setCharacterStream" type="void" line="986"/>
            <javadoc line="986">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that
                      contains the UNICODE data used as the designated parameter                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="1013"/>
            <javadoc line="1013">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="1039"/>
            <javadoc line="1039">
                Sets the designated parameter to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="1064"/>
            <javadoc line="1064">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="1089"/>
            <javadoc line="1089">
                Sets the designated parameter to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="1113"/>
            <javadoc line="1113">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="1141"/>
            <javadoc line="1141">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="1168"/>
            <javadoc line="1168">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1195"/>
            <javadoc line="1195">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given Java &lt;code&gt;Object&lt;/code&gt;.  For integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used (for example,
                  an instance of the class &lt;code&gt;Integer&lt;/code&gt; for an &lt;code&gt;int&lt;/code&gt;).
                  If the second argument is an &lt;code&gt;InputStream&lt;/code&gt; then the stream must contain
                  the number of bytes specified by scaleOrLength.  If the second argument is a
                  &lt;code&gt;Reader&lt;/code&gt; then the reader must contain the number of characters specified     by scaleOrLength. If these conditions are not true the driver will generate a
                  &lt;code&gt;SQLException&lt;/code&gt; when the prepared statement is executed.
                  &lt;p&gt;The given Java object will be converted to the targetSqlType
                  before being sent to the database.
                  &lt;P&gt;
                  If the object is of a class implementing &lt;code&gt;SQLData&lt;/code&gt;,
                  the rowset should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write the object to an &lt;code&gt;SQLOutput&lt;/code&gt; data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  &lt;p&gt;Note that this method may be used to pass datatabase-specific
                  abstract data types.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
                      to be sent to the database. The scale argument may further qualify this
                      type.                    
                </param>
                <param>
                    scaleOrLength for <code>java.sql.Types.DECIMAL</code>
                      or <code>java.sql.Types.NUMERIC types</code>,
                      this is the number of digits after the decimal point. For
                      Java Object types <code>InputStream</code> and <code>Reader</code>,
                      this is the length
                      of the data in the stream or reader.  For all other types,
                      this value will be ignored.                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    java.sql.Types                    
                </see>
            </javadoc>
            <method name="setObject" type="void" line="1240"/>
            <javadoc line="1240">
                Sets the value of the designated parameter with the given object. The second
                  argument must be an object type; for integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  &lt;p&gt;The given Java object will be converted to the given targetSqlType
                  before being sent to the database.
                  If the object has a custom mapping (is of a class implementing the
                  interface &lt;code&gt;SQLData&lt;/code&gt;),
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it
                  to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  Note that this method may be used to pass datatabase-
                  specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database. The scale argument may further qualify this type.                    
                </param>
                <param>
                    scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
                      this is the number of digits after the decimal point.  For all other
                      types, this value will be ignored.                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1284"/>
            <javadoc line="1284">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with a Java &lt;code&gt;Object&lt;/code&gt;.  For integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  This method is like &lt;code&gt;setObject&lt;/code&gt; above, but the scale used is the scale
                  of the second parameter.  Scalar values have a scale of zero.  Literal
                  values have the scale present in the literal.
                  &lt;P&gt;
                  Even though it is supported, it is not recommended that this method
                  be called with floating point input values.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
                      to be sent to the database                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setObject" type="void" line="1304"/>
            <javadoc line="1304">
                Sets the value of the designated parameter with the given object.
                  This method is like the method &lt;code&gt;setObject&lt;/code&gt;
                  above, except that it assumes a scale of zero.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1328"/>
            <javadoc line="1328">
                Sets the value of the designated parameter with the given object.
                  The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.
                  &lt;p&gt;The JDBC specification specifies a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument
                  will be converted to the corresponding SQL type before being
                  sent to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-
                  specific abstract data types, by using a driver-specific Java
                  type.
                  If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  This method throws an exception if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of the interfaces named above.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code> or if the given
                      <code>Object</code> parameter is ambiguous                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getObject                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="1366"/>
            <javadoc line="1366">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with a Java &lt;code&gt;Object&lt;/code&gt;.  For integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  &lt;p&gt;The JDBC specification provides a standard mapping from
                  Java Object types to SQL types.  The driver will convert the
                  given Java object to its standard SQL mapping before sending it
                  to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-specific
                  abstract data types by using a driver-specific Java type.
                  If the object is of a class implementing &lt;code&gt;SQLData&lt;/code&gt;,
                  the rowset should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write the object to an &lt;code&gt;SQLOutput&lt;/code&gt; data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  &lt;P&gt;
                  An exception is thrown if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of these interfaces.                
                <param>
                    parameterIndex The first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x The object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setRef" type="void" line="1399"/>
            <javadoc line="1399">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;Ref&lt;/code&gt; value.  The driver will convert this
                  to the appropriate &lt;code&gt;REF(&amp;lt;structured-type&amp;gt;)&lt;/code&gt; value.                
                <param>
                    i the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x an object representing data of an SQL <code>REF</code> type                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setBlob" type="void" line="1410"/>
            <javadoc line="1410">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;Blob&lt;/code&gt; value.  The driver will convert this
                  to the &lt;code&gt;BLOB&lt;/code&gt; value that the &lt;code&gt;Blob&lt;/code&gt; object
                  represents before sending it to the database.                
                <param>
                    i the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x an object representing a BLOB                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setBlob" type="void" line="1422"/>
            <javadoc line="1422">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The inputstream must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code>,
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  if the length specified
                      is less than zero or if the number of bytes in the inputstream does not match
                      the specfied length.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="1449"/>
            <javadoc line="1449">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code> or
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="1476"/>
            <javadoc line="1476">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The &lt;code&gt;inputstream&lt;/code&gt; must contain  the number
                  of characters specified by length, otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException  if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  or if the length specified
                      is less than zero; if the number of bytes in the inputstream does not match
                      the specfied length; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="1505"/>
            <javadoc line="1505">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Blob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="1520"/>
            <javadoc line="1520">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="1544"/>
            <javadoc line="1544">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;Clob&lt;/code&gt; value.  The driver will convert this
                  to the &lt;code&gt;CLOB&lt;/code&gt; value that the &lt;code&gt;Clob&lt;/code&gt; object
                  represents before sending it to the database.                
                <param>
                    i the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x an object representing a CLOB                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setClob" type="void" line="1556"/>
            <javadoc line="1556">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter
                      marker in the SQL statement, or if the length specified is less than zero.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="1578"/>
            <javadoc line="1578">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
                      marker in the SQL statement                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="1602"/>
            <javadoc line="1602">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="1626"/>
            <javadoc line="1626">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Clob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="1641"/>
            <javadoc line="1641">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or this method is called on
                      a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setArray" type="void" line="1664"/>
            <javadoc line="1664">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;Array&lt;/code&gt; value.  The driver will convert this
                  to the &lt;code&gt;ARRAY&lt;/code&gt; value that the &lt;code&gt;Array&lt;/code&gt; object
                  represents before sending it to the database.                
                <param>
                    i the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x an object representing an SQL array                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setDate" type="void" line="1676"/>
            <javadoc line="1676">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;java.sql.Date&lt;/code&gt; value.  The driver will convert this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value, using the given &lt;code&gt;java.util.Calendar&lt;/code&gt;
                  object to calculate the date.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use for calculating the date                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setDate" type="void" line="1690"/>
            <javadoc line="1690">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value
                  using the default time zone of the virtual machine that is running
                  the application.
                  The driver converts this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="1709"/>
            <javadoc line="1709">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getDate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="1733"/>
            <javadoc line="1733">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;java.sql.Time&lt;/code&gt; value.  The driver will convert this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value, using the given &lt;code&gt;java.util.Calendar&lt;/code&gt;
                  object to calculate it, before sending it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use for calculating the time                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setTime" type="void" line="1747"/>
            <javadoc line="1747">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="1764"/>
            <javadoc line="1764">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTime                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="1788"/>
            <javadoc line="1788">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  with the given  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.  The driver will
                  convert this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value, using the given
                  &lt;code&gt;java.util.Calendar&lt;/code&gt; object to calculate it, before sending it to the
                  database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object to use for calculating the
                      timestamp                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="setTimestamp" type="void" line="1804"/>
            <javadoc line="1804">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getTimestamp                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="clearParameters" type="void" line="1828"/>
            <javadoc line="1828">
                Clears the parameters set for this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command.
                  &lt;P&gt;In general, parameter values remain in force for repeated use of a
                  &lt;code&gt;RowSet&lt;/code&gt; object. Setting a parameter value automatically clears its
                  previous value.  However, in some cases it is useful to immediately
                  release the resources used by the current parameter values, which can
                  be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt;.                
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
            </javadoc>
            <method name="execute" type="void" line="1844"/>
            <javadoc line="1844">
                Fills this &lt;code&gt;RowSet&lt;/code&gt; object with data.
                  &lt;P&gt;
                  The &lt;code&gt;execute&lt;/code&gt; method may use the following properties
                  to create a connection for reading data: url, data source name,
                  user name, password, transaction isolation, and type map.
                  The &lt;code&gt;execute&lt;/code&gt; method  may use the following properties
                  to create a statement to execute a command:
                  command, read only, maximum field size,
                  maximum rows, escape processing, and query timeout.
                  &lt;P&gt;
                  If the required properties have not been set, an exception is
                  thrown.  If this method is successful, the current contents of the rowset are
                  discarded and the rowset&apos;s metadata is also (re)set.  If there are
                  outstanding updates, they are ignored.
                  &lt;P&gt;
                  If this &lt;code&gt;RowSet&lt;/code&gt; object does not maintain a continuous connection
                  with its source of data, it may use a reader (a &lt;code&gt;RowSetReader&lt;/code&gt;
                  object) to fill itself with data.  In this case, a reader will have been
                  registered with this &lt;code&gt;RowSet&lt;/code&gt; object, and the method
                  &lt;code&gt;execute&lt;/code&gt; will call on the reader&apos;s &lt;code&gt;readData&lt;/code&gt;
                  method as part of its implementation.                
                <exception>
                    SQLException if a database access error occurs or any of the
                      properties necessary for making a connection and creating
                      a statement have not been set                    
                </exception>
            </javadoc>
            <method name="addRowSetListener" type="void" line="1878"/>
            <javadoc line="1878">
                Registers the given listener so that it will be notified of events
                  that occur on this &lt;code&gt;RowSet&lt;/code&gt; object.                
                <param>
                    listener a component that has implemented the <code>RowSetListener</code>
                      interface and wants to be notified when events occur on this
                      <code>RowSet</code> object                    
                </param>
                <see>
                    #removeRowSetListener                    
                </see>
            </javadoc>
            <method name="removeRowSetListener" type="void" line="1889"/>
            <javadoc line="1889">
                Removes the specified listener from the list of components that will be
                  notified when an event occurs on this &lt;code&gt;RowSet&lt;/code&gt; object.                
                <param>
                    listener a component that has been registered as a listener for this
                      <code>RowSet</code> object                    
                </param>
                <see>
                    #addRowSetListener                    
                </see>
            </javadoc>
            <method name="setSQLXML" type="void" line="1899"/>
            <javadoc line="1899">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  SQL &lt;code&gt;XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method
                      is called on a closed result set,
                      the <code>java.xml.transform.Result</code>,
                      <code>Writer</code> or <code>OutputStream</code> has not been closed
                      for the <code>SQLXML</code> object  or
                      if there is an error processing the XML value.  The <code>getCause</code> method
                      of the exception may provide a more detailed exception, for example, if the
                      stream does not contain valid XML.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="1916"/>
            <javadoc line="1916">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  &lt;code&gt;SQL XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method
                      is called on a closed result set,
                      the <code>java.xml.transform.Result</code>,
                      <code>Writer</code> or <code>OutputStream</code> has not been closed
                      for the <code>SQLXML</code> object  or
                      if there is an error processing the XML value.  The <code>getCause</code> method
                      of the exception may provide a more detailed exception, for example, if the
                      stream does not contain valid XML.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="1933"/>
            <javadoc line="1933">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; value when it sends it
                  to the database                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="1946"/>
            <javadoc line="1946">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="1958"/>
            <javadoc line="1958">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;NVARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="1975"/>
            <javadoc line="1975">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt;                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="1989"/>
            <javadoc line="1989">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="2004"/>
            <javadoc line="2004">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="2020"/>
            <javadoc line="2020">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2044"/>
            <javadoc line="2044">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The object
                  implements the &lt;code&gt;java.sql.NClob&lt;/code&gt; interface. This &lt;code&gt;NClob&lt;/code&gt;
                  object maps to a SQL &lt;code&gt;NCLOB&lt;/code&gt;.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2057"/>
            <javadoc line="2057">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2083"/>
            <javadoc line="2083">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2107"/>
            <javadoc line="2107">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2132"/>
            <javadoc line="2132">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The driver converts this to a
                  SQL &lt;code&gt;NCLOB&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="2144"/>
            <javadoc line="2144">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="2170"/>
            <javadoc line="2170">
                Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value
                  when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the <code>java.net.URL</code> object to be set                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
        </interface>
    </source>