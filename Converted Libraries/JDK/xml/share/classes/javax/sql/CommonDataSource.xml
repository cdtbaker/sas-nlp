<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql">
        <import package="java.sql.SQLException"/>
        <import package="java.io.PrintWriter"/>
        <import package="java.sql.SQLFeatureNotSupportedException"/>
        <import package="java.util.logging.Logger"/>
        <interface name="CommonDataSource">
            <javadoc line="6">
                Interface that defines the methods which are common between &lt;code&gt;DataSource&lt;/code&gt;,
                  &lt;code&gt;XADataSource&lt;/code&gt; and &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt;.
                  &lt;p&gt;                
            </javadoc>
            <method name="getLogWriter" type="java.io.PrintWriter" line="12"/>
            <javadoc line="12">
                &lt;p&gt;Retrieves the log writer for this &lt;code&gt;DataSource&lt;/code&gt;
                  object.
                  &lt;p&gt;The log writer is a character output stream to which all logging
                  and tracing messages for this data source will be
                  printed.  This includes messages printed by the methods of this
                  object, messages printed by methods of other objects manufactured
                  by this object, and so on.  Messages printed to a data source
                  specific log writer are not printed to the log writer associated
                  with the &lt;code&gt;java.sql.DriverManager&lt;/code&gt; class.  When a
                  &lt;code&gt;DataSource&lt;/code&gt; object is
                  created, the log writer is initially null; in other words, the
                  default is for logging to be disabled.                
                <return>
                    the log writer for this data source or null if
                      logging is disabled                    
                </return>
                <exception>
                    java.sql.SQLException if a database access error occurs                    
                </exception>
                <see>
                    #setLogWriter                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLogWriter" type="void" line="32"/>
            <javadoc line="32">
                &lt;p&gt;Sets the log writer for this &lt;code&gt;DataSource&lt;/code&gt;
                  object to the given &lt;code&gt;java.io.PrintWriter&lt;/code&gt; object.
                  &lt;p&gt;The log writer is a character output stream to which all logging
                  and tracing messages for this data source will be
                  printed.  This includes messages printed by the methods of this
                  object, messages printed by methods of other objects manufactured
                  by this object, and so on.  Messages printed to a data source-
                  specific log writer are not printed to the log writer associated
                  with the &lt;code&gt;java.sql.DriverManager&lt;/code&gt; class. When a
                  &lt;code&gt;DataSource&lt;/code&gt; object is created the log writer is
                  initially null; in other words, the default is for logging to be
                  disabled.                
                <param>
                    out the new log writer; to disable logging, set to null                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <see>
                    #getLogWriter                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLoginTimeout" type="void" line="51"/>
            <javadoc line="51">
                &lt;p&gt;Sets the maximum time in seconds that this data source will wait
                  while attempting to connect to a database.  A value of zero
                  specifies that the timeout is the default system timeout
                  if there is one; otherwise, it specifies that there is no timeout.
                  When a &lt;code&gt;DataSource&lt;/code&gt; object is created, the login timeout is
                  initially zero.                
                <param>
                    seconds the data source login time limit                    
                </param>
                <exception>
                    SQLException if a database access error occurs.                    
                </exception>
                <see>
                    #getLoginTimeout                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLoginTimeout" type="int" line="64"/>
            <javadoc line="64">
                Gets the maximum time in seconds that this data source can wait
                  while attempting to connect to a database.  A value of zero
                  means that the timeout is the default system timeout
                  if there is one; otherwise, it means that there is no timeout.
                  When a &lt;code&gt;DataSource&lt;/code&gt; object is created, the login timeout is
                  initially zero.                
                <return>
                    the data source login time limit                    
                </return>
                <exception>
                    SQLException if a database access error occurs.                    
                </exception>
                <see>
                    #setLoginTimeout                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getParentLogger" type="Logger" line="77"/>
            <javadoc line="77">
                Return the parent Logger of all the Loggers used by this data source. This
                  should be the Logger farthest from the root Logger that is
                  still an ancestor of all of the Loggers used by this data source. Configuring
                  this Logger will affect all of the log messages generated by the data source.
                  In the worst case, this may be the root Logger.                
                <return>
                    the parent Logger for this data source                    
                </return>
                <throws>
                    SQLFeatureNotSupportedException if the data source does not use &lt;code&gt;java.util.logging&lt;code&gt;.                    
                </throws>
                <since>
                    1.7                    
                </since>
            </javadoc>
        </interface>
    </source>