<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset">
        <import package="java.sql.SQLException"/>
        <interface name="Joinable">
            <javadoc line="3">
                &lt;h3&gt;1.0 Background&lt;/h3&gt;
                  The &lt;code&gt;Joinable&lt;/code&gt; interface provides the methods for getting and
                  setting a match column, which is the basis for forming the SQL &lt;code&gt;JOIN&lt;/code&gt;
                  formed by adding &lt;code&gt;RowSet&lt;/code&gt; objects to a &lt;code&gt;JoinRowSet&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  Any standard &lt;code&gt;RowSet&lt;/code&gt; implementation &lt;b&gt;may&lt;/b&gt; implement
                  the &lt;code&gt;Joinable&lt;/code&gt; interface in order to be
                  added to a &lt;code&gt;JoinRowSet&lt;/code&gt; object. Implementing this interface gives
                  a &lt;code&gt;RowSet&lt;/code&gt; object the ability to use &lt;code&gt;Joinable&lt;/code&gt; methods,
                  which set, retrieve, and get information about match columns.  An
                  application may add a
                  &lt;code&gt;RowSet&lt;/code&gt; object that has not implemented the &lt;code&gt;Joinable&lt;/code&gt;
                  interface to a &lt;code&gt;JoinRowSet&lt;/code&gt; object, but to do so it must use one
                  of the &lt;code&gt;JoinRowSet.addRowSet&lt;/code&gt; methods that takes both a
                  &lt;code&gt;RowSet&lt;/code&gt; object and a match column or an array of &lt;code&gt;RowSet&lt;/code&gt;
                  objects and an array of match columns.
                  &lt;P&gt;
                  To get access to the methods in the &lt;code&gt;Joinable&lt;/code&gt; interface, a
                  &lt;code&gt;RowSet&lt;/code&gt; object implements at least one of the
                  five standard &lt;code&gt;RowSet&lt;/code&gt; interfaces and also implements the
                  &lt;code&gt;Joinable&lt;/code&gt; interface.  In addition, most &lt;code&gt;RowSet&lt;/code&gt;
                  objects extend the &lt;code&gt;BaseRowSet&lt;/code&gt; class.  For example:
                  &lt;pre&gt;
                  class MyRowSetImpl extends BaseRowSet implements CachedRowSet, Joinable {
                  :
                  :
                  }
                  &lt;/pre&gt;
                  &lt;P&gt;
                  &lt;h3&gt;2.0 Usage Guidelines&lt;/h3&gt;
                  &lt;P&gt;
                  The methods in the &lt;code&gt;Joinable&lt;/code&gt; interface allow a &lt;code&gt;RowSet&lt;/code&gt; object
                  to set a match column, retrieve a match column, or unset a match column, which is
                  the column upon which an SQL &lt;code&gt;JOIN&lt;/code&gt; can be based.
                  An instance of a class that implements these methods can be added to a
                  &lt;code&gt;JoinRowSet&lt;/code&gt; object to allow an SQL &lt;code&gt;JOIN&lt;/code&gt; relationship to
                  be established.
                  &lt;p&gt;
                  &lt;pre&gt;
                  CachedRowSet crs = new MyRowSetImpl();
                  crs.populate((ResultSet)rs);
                  (Joinable)crs.setMatchColumnIndex(1);
                  JoinRowSet jrs = new JoinRowSetImpl();
                  jrs.addRowSet(crs);
                  &lt;/pre&gt;
                  In the previous example, &lt;i&gt;crs&lt;/i&gt; is a &lt;code&gt;CachedRowSet&lt;/code&gt; object that
                  has emplemented the &lt;code&gt;Joinable&lt;/code&gt; interface.  In the following example,
                  &lt;i&gt;crs2&lt;/i&gt; has not, so it must supply the match column as an argument to the
                  &lt;code&gt;addRowSet&lt;/code&gt; method. This example assumes that column 1 is the match
                  column.
                  &lt;PRE&gt;
                  CachedRowSet crs2 = new MyRowSetImpl();
                  crs2.populate((ResultSet)rs);
                  JoinRowSet jrs2 = new JoinRowSetImpl();
                  jrs2.addRowSet(crs2, 1);
                  &lt;/PRE&gt;
                  &lt;p&gt;
                  The &lt;code&gt;JoinRowSet&lt;/code&gt; interface makes it possible to get data from one or
                  more &lt;code&gt;RowSet&lt;/code&gt; objects consolidated into one table without having to incur
                  the expense of creating a connection to a database. It is therefore ideally suited
                  for use by disconnected &lt;code&gt;RowSet&lt;/code&gt; objects. Nevertheless, any
                  &lt;code&gt;RowSet&lt;/code&gt; object &lt;b&gt;may&lt;/b&gt; implement this interface
                  regardless of whether it is connected or disconnected. Note that a
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; object, being always connected to its data source, can
                  become part of an SQL &lt;code&gt;JOIN&lt;/code&gt; directly without having to become part
                  of a &lt;code&gt;JoinRowSet&lt;/code&gt; object.
                  &lt;P&gt;
                  &lt;h3&gt;3.0 Managing Multiple Match Columns&lt;/h3&gt;
                  The index array passed into the &lt;code&gt;setMatchColumn&lt;/code&gt; methods indicates
                  how many match columns are being set (the length of the array) in addition to
                  which columns will be used for the match. For example:
                  &lt;pre&gt;
                  int[] i = {1, 2, 4, 7}; // indicates four match columns, with column
                  // indexes 1, 2, 4, 7 participating in the JOIN.
                  Joinable.setMatchColumn(i);
                  &lt;/pre&gt;
                  Subsequent match columns may be added as follows to a different &lt;code&gt;Joinable&lt;/code&gt;
                  object (a &lt;code&gt;RowSet&lt;/code&gt; object that has implemented the &lt;code&gt;Joinable&lt;/code&gt;
                  interface).
                  &lt;pre&gt;
                  int[] w = {3, 2, 5, 3};
                  Joinable2.setMatchColumn(w);
                  &lt;/pre&gt;
                  When an application adds two or more &lt;code&gt;RowSet&lt;/code&gt; objects to a
                  &lt;code&gt;JoinRowSet&lt;/code&gt; object, the order of the indexes in the array is
                  particularly important. Each index of
                  the array maps directly to the corresponding index of the previously added
                  &lt;code&gt;RowSet&lt;/code&gt; object. If overlap or underlap occurs, the match column
                  data is maintained in the event an additional &lt;code&gt;Joinable&lt;/code&gt; RowSet is
                  added and needs to relate to the match column data. Therefore, applications
                  can set multiple match columns in any order, but
                  this order has a direct effect on the outcome of the &lt;code&gt;SQL&lt;/code&gt; JOIN.
                  &lt;p&gt;
                  This assertion applies in exactly the same manner when column names are used
                  rather than column indexes to indicate match columns.                
                <see>
                    JoinRowSet                    
                </see>
                <author>
                    Jonathan Bruce                    
                </author>
            </javadoc>
            <method name="setMatchColumn" type="void" line="104"/>
            <javadoc line="104">
                Sets the designated column as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object. A &lt;code&gt;JoinRowSet&lt;/code&gt; object can now add this &lt;code&gt;RowSet&lt;/code&gt;
                  object based on the match column.
                  &lt;p&gt;
                  Sub-interfaces such as the &lt;code&gt;CachedRowSet&lt;/code&gt;&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  interface define the method &lt;code&gt;CachedRowSet.setKeyColumns&lt;/code&gt;, which allows
                  primary key semantics to be enforced on specific columns.
                  Implementations of the &lt;code&gt;setMatchColumn(int columnIdx)&lt;/code&gt; method
                  should ensure that the constraints on the key columns are maintained when
                  a &lt;code&gt;CachedRowSet&lt;/code&gt; object sets a primary key column as a match column.                
                <param>
                    columnIdx an &lt;code&gt;int&lt;/code&gt; identifying the index of the column to be
                      set as the match column                    
                </param>
                <throws>
                    SQLException if an invalid column index is set                    
                </throws>
                <see>
                    #setMatchColumn(int[])                    
                </see>
                <see>
                    #unsetMatchColumn(int)                    
                </see>
            </javadoc>
            <method name="setMatchColumn" type="void" line="122"/>
            <javadoc line="122">
                Sets the designated columns as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object. A &lt;code&gt;JoinRowSet&lt;/code&gt; object can now add this &lt;code&gt;RowSet&lt;/code&gt;
                  object based on the match column.                
                <param>
                    columnIdxes an array of &lt;code&gt;int&lt;/code&gt; identifying the indexes of the
                      columns to be set as the match columns                    
                </param>
                <throws>
                    SQLException if an invalid column index is set                    
                </throws>
                <see>
                    #setMatchColumn(int[])                    
                </see>
                <see>
                    #unsetMatchColumn(int[])                    
                </see>
            </javadoc>
            <method name="setMatchColumn" type="void" line="133"/>
            <javadoc line="133">
                Sets the designated column as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object. A &lt;code&gt;JoinRowSet&lt;/code&gt; object can now add this &lt;code&gt;RowSet&lt;/code&gt;
                  object based on the match column.
                  &lt;p&gt;
                  Subinterfaces such as the &lt;code&gt;CachedRowSet&lt;/code&gt; interface define
                  the method &lt;code&gt;CachedRowSet.setKeyColumns&lt;/code&gt;, which allows
                  primary key semantics to be enforced on specific columns.
                  Implementations of the &lt;code&gt;setMatchColumn(String columnIdx)&lt;/code&gt; method
                  should ensure that the constraints on the key columns are maintained when
                  a &lt;code&gt;CachedRowSet&lt;/code&gt; object sets a primary key column as a match column.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      to be set as the match column                    
                </param>
                <throws>
                    SQLException if an invalid column name is set, the column name
                      is a null, or the column name is an empty string                    
                </throws>
                <see>
                    #unsetMatchColumn                    
                </see>
                <see>
                    #setMatchColumn(int[])                    
                </see>
            </javadoc>
            <method name="setMatchColumn" type="void" line="152"/>
            <javadoc line="152">
                Sets the designated columns as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object. A &lt;code&gt;JoinRowSet&lt;/code&gt; object can now add this &lt;code&gt;RowSet&lt;/code&gt;
                  object based on the match column.                
                <param>
                    columnNames an array of &lt;code&gt;String&lt;/code&gt; objects giving the names
                      of the column to be set as the match columns                    
                </param>
                <throws>
                    SQLException if an invalid column name is set, the column name
                      is a null, or the column name is an empty string                    
                </throws>
                <see>
                    #unsetMatchColumn                    
                </see>
                <see>
                    #setMatchColumn(int[])                    
                </see>
            </javadoc>
            <method name="getMatchColumnIndexes" type="int[]" line="164"/>
            <javadoc line="164">
                Retrieves the indexes of the match columns that were set for this
                  &lt;code&gt;RowSet&lt;/code&gt; object with the method
                  &lt;code&gt;setMatchColumn(int[] columnIdxes)&lt;/code&gt;.                
                <return>
                    an &lt;code&gt;int&lt;/code&gt; array identifying the indexes of the columns
                      that were set as the match columns for this &lt;code&gt;RowSet&lt;/code&gt; object                    
                </return>
                <throws>
                    SQLException if no match column has been set                    
                </throws>
                <see>
                    #setMatchColumn                    
                </see>
                <see>
                    #unsetMatchColumn                    
                </see>
            </javadoc>
            <method name="getMatchColumnNames" type="String[]" line="175"/>
            <javadoc line="175">
                Retrieves the names of the match columns that were set for this
                  &lt;code&gt;RowSet&lt;/code&gt; object with the method
                  &lt;code&gt;setMatchColumn(String [] columnNames)&lt;/code&gt;.                
                <return>
                    an array of &lt;code&gt;String&lt;/code&gt; objects giving the names of the columns
                      set as the match columns for this &lt;code&gt;RowSet&lt;/code&gt; object                    
                </return>
                <throws>
                    SQLException if no match column has been set                    
                </throws>
                <see>
                    #setMatchColumn                    
                </see>
                <see>
                    #unsetMatchColumn                    
                </see>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="186"/>
            <javadoc line="186">
                Unsets the designated column as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  &lt;code&gt;RowSet&lt;/code&gt; objects that implement the &lt;code&gt;Joinable&lt;/code&gt; interface
                  must ensure that a key-like constraint continues to be enforced until the
                  method &lt;code&gt;CachedRowSet.unsetKeyColumns&lt;/code&gt; has been called on the
                  designated column.                
                <param>
                    columnIdx an &lt;code&gt;int&lt;/code&gt; that identifies the index of the column
                      that is to be unset as a match column                    
                </param>
                <throws>
                    SQLException if an invalid column index is designated or if
                      the designated column was not previously set as a match
                      column                    
                </throws>
                <see>
                    #setMatchColumn                    
                </see>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="202"/>
            <javadoc line="202">
                Unsets the designated columns as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object.                
                <param>
                    columnIdxes an arrary of &lt;code&gt;int&lt;/code&gt; that identifies the indexes
                      of the columns that are to be unset as match columns                    
                </param>
                <throws>
                    SQLException if an invalid column index is designated or if
                      the designated column was not previously set as a match
                      column                    
                </throws>
                <see>
                    #setMatchColumn                    
                </see>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="213"/>
            <javadoc line="213">
                Unsets the designated column as the match column for this &lt;code&gt;RowSet&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  &lt;code&gt;RowSet&lt;/code&gt; objects that implement the &lt;code&gt;Joinable&lt;/code&gt; interface
                  must ensure that a key-like constraint continues to be enforced until the
                  method &lt;code&gt;CachedRowSet.unsetKeyColumns&lt;/code&gt; has been called on the
                  designated column.                
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object giving the name of the column
                      that is to be unset as a match column                    
                </param>
                <throws>
                    SQLException if an invalid column name is designated or
                      the designated column was not previously set as a match
                      column                    
                </throws>
                <see>
                    #setMatchColumn                    
                </see>
            </javadoc>
            <method name="unsetMatchColumn" type="void" line="229"/>
            <javadoc line="229">
                Unsets the designated columns as the match columns for this &lt;code&gt;RowSet&lt;/code&gt;
                  object.                
                <param>
                    columnName an array of &lt;code&gt;String&lt;/code&gt; objects giving the names of
                      the columns that are to be unset as the match columns                    
                </param>
                <throws>
                    SQLException if an invalid column name is designated or the
                      designated column was not previously set as a match column                    
                </throws>
                <see>
                    #setMatchColumn                    
                </see>
            </javadoc>
        </interface>
    </source>