<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset.serial">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.io"/>
        <import package="java.lang.String"/>
        <import package="java.math"/>
        <import package="java.util.Map"/>
        <import package="java.util.Vector"/>
        <class name="SQLOutputImpl" line="36">
            <comment line="108">
                ================================================================
                 Methods for writing attributes to the stream of SQL data.
                 These methods correspond to the column-accessor methods of
                 java.sql.ResultSet.
                ================================================================                
            </comment>
            <comment line="387">
                ================================================================
                 Methods for writing items of SQL user-defined types to the stream.
                 These methods pass objects to the database as values of SQL
                 Structured Types, Distinct Types, Constructed Types, and Locator
                 Types.  They decompose the Java object(s) and write leaf data
                 items using the methods above.
                ================================================================                
            </comment>
            <implements interface="SQLOutput"/>
            <javadoc line="36">
                The output stream for writing the attributes of a
                  custom-mapped user-defined type (UDT) back to the database.
                  The driver uses this interface internally, and its
                  methods are never directly invoked by an application programmer.
                  &lt;p&gt;
                  When an application calls the
                  method &lt;code&gt;PreparedStatement.setObject&lt;/code&gt;, the driver
                  checks to see whether the value to be written is a UDT with
                  a custom mapping.  If it is, there will be an entry in a
                  type map containing the &lt;code&gt;Class&lt;/code&gt; object for the
                  class that implements &lt;code&gt;SQLData&lt;/code&gt; for this UDT.
                  If the value to be written is an instance of &lt;code&gt;SQLData&lt;/code&gt;,
                  the driver will create an instance of &lt;code&gt;SQLOutputImpl&lt;/code&gt;
                  and pass it to the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;.
                  The method &lt;code&gt;writeSQL&lt;/code&gt; in turn calls the
                  appropriate &lt;code&gt;SQLOutputImpl.writeXXX&lt;/code&gt; methods
                  to write data from the &lt;code&gt;SQLData&lt;/code&gt; object to
                  the &lt;code&gt;SQLOutputImpl&lt;/code&gt; output stream as the
                  representation of an SQL user-defined type.                
            </javadoc>
            <declaration name="attribs" type="Vector" line="59"/>
            <javadoc line="59">
                A reference to an existing vector that
                  contains the attributes of a &lt;code&gt;Struct&lt;/code&gt; object.                
            </javadoc>
            <declaration name="map" type="Map" line="65"/>
            <javadoc line="65">
                The type map the driver supplies to a newly created
                  &lt;code&gt;SQLOutputImpl&lt;/code&gt; object.  This type map
                  indicates the &lt;code&gt;SQLData&lt;/code&gt; class whose
                  &lt;code&gt;writeSQL&lt;/code&gt; method will be called.  This
                  method will in turn call the appropriate
                  &lt;code&gt;SQLOutputImpl&lt;/code&gt; writer methods.                
            </javadoc>
            <javadoc line="75">
                Creates a new &lt;code&gt;SQLOutputImpl&lt;/code&gt; object
                  initialized with the given vector of attributes and
                  type map.  The driver will use the type map to determine
                  which &lt;code&gt;SQLData.writeSQL&lt;/code&gt; method to invoke.
                  This method will then call the appropriate
                  &lt;code&gt;SQLOutputImpl&lt;/code&gt; writer methods in order and
                  thereby write the attributes to the new output stream.                
                <param>
                    attributes a &lt;code&gt;Vector&lt;/code&gt; object containing the attributes of
                      the UDT to be mapped to one or more objects in the Java
                      programming language                    
                </param>
                <param>
                    map a &lt;code&gt;java.util.Map&lt;/code&gt; object containing zero or
                      more entries, with each entry consisting of 1) a &lt;code&gt;String&lt;/code&gt;
                      giving the fully qualified name of a UDT and 2) the
                      &lt;code&gt;Class&lt;/code&gt; object for the &lt;code&gt;SQLData&lt;/code&gt; implementation
                      that defines how the UDT is to be mapped                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;attributes&lt;/code&gt; or the &lt;code&gt;map&lt;/code&gt;
                      is a &lt;code&gt;null&lt;/code&gt; value                    
                </throws>
            </javadoc>
            <method name="SQLOutputImpl" type="constructor" line="98">
                <params>
                    <param name="attributes" type="Vector<?>"/>
                    <param name="map" type="Map<String,?>"/>
                </params>
                <scope line="99"/>
            </method>
            <javadoc line="113">
                Writes a &lt;code&gt;String&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;, or
                  &lt;code&gt;LONGVARCHAR&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeString" type="void" line="124">
                <params>
                    <param name="x" type="String"/>
                </params>
                <comment line="126">
                    System.out.println(&quot;Adding :&quot;+x);                    
                </comment>
            </method>
            <javadoc line="129">
                Writes a &lt;code&gt;boolean&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;BIT&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeBoolean" type="void" line="139">
                <params>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="143">
                Writes a &lt;code&gt;byte&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;BIT&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeByte" type="void" line="153">
                <params>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="157">
                Writes a &lt;code&gt;short&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeShort" type="void" line="167">
                <params>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="171">
                Writes an &lt;code&gt;int&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;INTEGER&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeInt" type="void" line="181">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="185">
                Writes a &lt;code&gt;long&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;BIGINT&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeLong" type="void" line="195">
                <params>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="199">
                Writes a &lt;code&gt;float&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;REAL&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeFloat" type="void" line="209">
                <params>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="213">
                Writes a &lt;code&gt;double&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeDouble" type="void" line="223">
                <params>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="227">
                Writes a &lt;code&gt;java.math.BigDecimal&lt;/code&gt; object in the Java programming
                  language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeBigDecimal" type="void" line="237">
                <params>
                    <param name="x" type="java.math.BigDecimal"/>
                </params>
            </method>
            <javadoc line="241">
                Writes an array of &lt;code&gt;bytes&lt;/code&gt; in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeBytes" type="void" line="252">
                <params>
                    <param name="x" type="byte[]"/>
                </params>
            </method>
            <javadoc line="256">
                Writes a &lt;code&gt;java.sql.Date&lt;/code&gt; object in the Java programming
                  language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;DATE&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeDate" type="void" line="266">
                <params>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="270">
                Writes a &lt;code&gt;java.sql.Time&lt;/code&gt; object in the Java programming
                  language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;TIME&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeTime" type="void" line="280">
                <params>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="284">
                Writes a &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object in the Java programming
                  language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver converts
                  it to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; before returning it to the database.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeTimestamp" type="void" line="294">
                <params>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="298">
                Writes a stream of Unicode characters to this
                  &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver will do any necessary
                  conversion from Unicode to the database &lt;code&gt;CHAR&lt;/code&gt; format.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeCharacterStream" type="void" line="308">
                <params>
                    <param name="x" type="java.io.Reader"/>
                </params>
                <declaration name="bufReader" type="BufferedReader" line="309"/>
                <scope line="310">
                    <declaration name="i" type="int" line="311"/>
                    <scope line="312">
                        <declaration name="ch" type="char" line="313"/>
                        <declaration name="strBuf" type="StringBuffer" line="314"/>
                        <declaration name="str" type="String" line="317"/>
                        <declaration name="strLine" type="String" line="318"/>
                    </scope>
                </scope>
                <scope line="322"/>
            </method>
            <javadoc line="327">
                Writes a stream of ASCII characters to this
                  &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The driver will do any necessary
                  conversion from ASCII to the database &lt;code&gt;CHAR&lt;/code&gt; format.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeAsciiStream" type="void" line="337">
                <params>
                    <param name="x" type="java.io.InputStream"/>
                </params>
                <declaration name="bufReader" type="BufferedReader" line="338"/>
                <scope line="339">
                    <declaration name="i" type="int" line="340"/>
                    <scope line="341">
                        <declaration name="ch" type="char" line="342"/>
                        <declaration name="strBuf" type="StringBuffer" line="344"/>
                        <declaration name="str" type="String" line="347"/>
                        <declaration name="strLine" type="String" line="348"/>
                    </scope>
                </scope>
                <scope line="352"/>
            </method>
            <javadoc line="357">
                Writes a stream of uninterpreted bytes to this &lt;code&gt;SQLOutputImpl&lt;/code&gt;
                  object.                
                <param>
                    x the value to pass to the database                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeBinaryStream" type="void" line="366">
                <params>
                    <param name="x" type="java.io.InputStream"/>
                </params>
                <declaration name="bufReader" type="BufferedReader" line="367"/>
                <scope line="368">
                    <declaration name="i" type="int" line="369"/>
                    <scope line="370">
                        <declaration name="ch" type="char" line="371"/>
                        <declaration name="strBuf" type="StringBuffer" line="373"/>
                        <declaration name="str" type="String" line="376"/>
                        <declaration name="strLine" type="String" line="377"/>
                    </scope>
                </scope>
                <scope line="381"/>
            </method>
            <javadoc line="394">
                Writes to the stream the data contained in the given
                  &lt;code&gt;SQLData&lt;/code&gt; object.
                  When the &lt;code&gt;SQLData&lt;/code&gt; object is &lt;code&gt;null&lt;/code&gt;, this
                  method writes an SQL &lt;code&gt;NULL&lt;/code&gt; to the stream.
                  Otherwise, it calls the &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  method of the given object, which
                  writes the object&apos;s attributes to the stream.
                  &lt;P&gt;
                  The implementation of the method &lt;code&gt;SQLData.writeSQ&lt;/code&gt;
                  calls the appropriate &lt;code&gt;SQLOutputImpl.writeXXX&lt;/code&gt; method(s)
                  for writing each of the object&apos;s attributes in order.
                  The attributes must be read from an &lt;code&gt;SQLInput&lt;/code&gt;
                  input stream and written to an &lt;code&gt;SQLOutputImpl&lt;/code&gt;
                  output stream in the same order in which they were
                  listed in the SQL definition of the user-defined type.                
                <param>
                    x the object representing data of an SQL structured or
                      distinct type                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeObject" type="void" line="417">
                <params>
                    <param name="x" type="SQLData"/>
                </params>
                <comment line="420">
                    Except for the types that are passed as objects
                     this seems to be the only way for an object to
                     get a null value for a field in a structure.
                    
                     Note: this means that the class defining SQLData
                     will need to track if a field is SQL null for itself                    
                </comment>
                <comment line="433">
                    We have to write out a SerialStruct that contains
                     the name of this class otherwise we don&apos;t know
                     what to re-instantiate during readSQL()                    
                </comment>
                <scope line="427"/>
            </method>
            <javadoc line="440">
                Writes a &lt;code&gt;Ref&lt;/code&gt; object in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object.  The driver converts
                  it to a serializable &lt;code&gt;SerialRef&lt;/code&gt; SQL &lt;code&gt;REF&lt;/code&gt; value
                  before returning it to the database.                
                <param>
                    x an object representing an SQL &lt;code&gt;REF&lt;/code&gt; value                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeRef" type="void" line="451">
                <params>
                    <param name="x" type="Ref"/>
                </params>
                <scope line="452"/>
            </method>
            <javadoc line="459">
                Writes a &lt;code&gt;Blob&lt;/code&gt; object in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object.  The driver converts
                  it to a serializable &lt;code&gt;SerialBlob&lt;/code&gt; SQL &lt;code&gt;BLOB&lt;/code&gt; value
                  before returning it to the database.                
                <param>
                    x an object representing an SQL &lt;code&gt;BLOB&lt;/code&gt; value                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeBlob" type="void" line="470">
                <params>
                    <param name="x" type="Blob"/>
                </params>
                <scope line="471"/>
            </method>
            <javadoc line="478">
                Writes a &lt;code&gt;Clob&lt;/code&gt; object in the Java programming language
                  to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object.  The driver converts
                  it to a serializable &lt;code&gt;SerialClob&lt;/code&gt; SQL &lt;code&gt;CLOB&lt;/code&gt; value
                  before returning it to the database.                
                <param>
                    x an object representing an SQL &lt;code&gt;CLOB&lt;/code&gt; value                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeClob" type="void" line="489">
                <params>
                    <param name="x" type="Clob"/>
                </params>
                <scope line="490"/>
            </method>
            <javadoc line="497">
                Writes a &lt;code&gt;Struct&lt;/code&gt; object in the Java
                  programming language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt;
                  object. The driver converts this value to an SQL structured type
                  before returning it to the database.
                  &lt;P&gt;
                  This method should be used when an SQL structured type has been
                  mapped to a &lt;code&gt;Struct&lt;/code&gt; object in the Java programming
                  language (the standard mapping).  The method
                  &lt;code&gt;writeObject&lt;/code&gt; should be used if an SQL structured type
                  has been custom mapped to a class in the Java programming language.                
                <param>
                    x an object representing the attributes of an SQL structured type                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeStruct" type="void" line="514">
                <params>
                    <param name="x" type="Struct"/>
                </params>
                <declaration name="s" type="SerialStruct" line="515"/>
            </method>
            <javadoc line="519">
                Writes an &lt;code&gt;Array&lt;/code&gt; object in the Java
                  programming language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt;
                  object. The driver converts this value to a serializable
                  &lt;code&gt;SerialArray&lt;/code&gt; SQL &lt;code&gt;ARRAY&lt;/code&gt;
                  value before returning it to the database.                
                <param>
                    x an object representing an SQL &lt;code&gt;ARRAY&lt;/code&gt; value                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeArray" type="void" line="531">
                <params>
                    <param name="x" type="Array"/>
                </params>
                <scope line="532"/>
            </method>
            <javadoc line="539">
                Writes an &lt;code&gt;java.sql.Type.DATALINK&lt;/code&gt; object in the Java
                  programming language to this &lt;code&gt;SQLOutputImpl&lt;/code&gt; object. The
                  driver converts this value to a serializable &lt;code&gt;SerialDatalink&lt;/code&gt;
                  SQL &lt;code&gt;DATALINK&lt;/code&gt; value before return it to the database.                
                <param>
                    url an object representing a SQL &lt;code&gt;DATALINK&lt;/code&gt; value                    
                </param>
                <throws>
                    SQLException if the &lt;code&gt;SQLOutputImpl&lt;/code&gt; object is in
                      use by a &lt;code&gt;SQLData&lt;/code&gt; object attempting to write the attribute
                      values of a UDT to the database.                    
                </throws>
            </javadoc>
            <method name="writeURL" type="void" line="550">
                <params>
                    <param name="url" type="java.net.URL"/>
                </params>
                <scope line="551"/>
            </method>
            <javadoc line="560">
                Writes the next attribute to the stream as a &lt;code&gt;String&lt;/code&gt;
                  in the Java programming language. The driver converts this to a
                  SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;NVARCHAR&lt;/code&gt; values)
                  when it sends it to the stream.                
                <param>
                    x the value to pass to the database                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeNString" type="void" line="573">
                <params>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="577">
                Writes an SQL &lt;code&gt;NCLOB&lt;/code&gt; value to the stream.                
                <param>
                    x a &lt;code&gt;NClob&lt;/code&gt; object representing data of an SQL
                      &lt;code&gt;NCLOB&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeNClob" type="void" line="586">
                <params>
                    <param name="x" type="NClob"/>
                </params>
            </method>
            <javadoc line="591">
                Writes an SQL &lt;code&gt;ROWID&lt;/code&gt; value to the stream.                
                <param>
                    x a &lt;code&gt;RowId&lt;/code&gt; object representing data of an SQL
                      &lt;code&gt;ROWID&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeRowId" type="void" line="600">
                <params>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="605">
                Writes an SQL &lt;code&gt;XML&lt;/code&gt; value to the stream.                
                <param>
                    x a &lt;code&gt;SQLXML&lt;/code&gt; object representing data of an SQL
                      &lt;code&gt;XML&lt;/code&gt; value                    
                </param>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="writeSQLXML" type="void" line="614">
                <params>
                    <param name="x" type="SQLXML"/>
                </params>
            </method>
        </class>
    </source>