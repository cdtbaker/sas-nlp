<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset">
        <import package="javax.sql"/>
        <import package="java.sql"/>
        <interface name="Predicate">
            <javadoc line="4">
                The standard interface that provides the framework for all
                  &lt;code&gt;FilteredRowSet&lt;/code&gt; objects to describe their filters.
                  &lt;p&gt;
                  &lt;h3&gt;1.0 Background&lt;/h3&gt;
                  The &lt;code&gt;Predicate&lt;/code&gt; interface is a standard interface that
                  applications can implement to define the filter they wish to apply to a
                  a &lt;code&gt;FilteredRowSet&lt;/code&gt; object. A &lt;code&gt;FilteredRowSet&lt;/code&gt;
                  object consumes implementations of this interface and enforces the
                  constraints defined in the implementation of the method &lt;code&gt;evaluate&lt;/code&gt;.
                  A &lt;code&gt;FilteredRowSet&lt;/code&gt; object enforces the filter constraints in a
                  bi-directional manner: It outputs only rows that are within
                  the constraints of the filter; and conversely, it inserts, modifies, or updates
                  only rows that are within the constraints of the filter.
                  &lt;h3&gt;2.0 Implementation Guidelines&lt;/h3&gt;
                  In order to supply a predicate for the &lt;code&gt;FilteredRowSet&lt;/code&gt;.
                  this interface must be implemented.  At this time, the JDBC RowSet
                  Implementations (JSR-114) does not specify any standard filters definitions.
                  By specifying a standard means and mechanism for a range of filters to be
                  defined and deployed with both the reference and vendor implementations
                  of the &lt;code&gt;FilteredRowSet&lt;/code&gt; interface, this allows for a flexible
                  and application motivated implementations of &lt;code&gt;Predicate&lt;/code&gt; to emerge.
                  &lt;p&gt;
                  A sample implementation would look something like this:
                  &lt;pre&gt;
                  &lt;code&gt;
                  public class Range implements Predicate {
                  private Object lo[];
                  private Object hi[];
                  private int idx[];
                  public Range(Object[] lo, Object[] hi, int[] idx) {
                  this.lo = lo;
                  this.hi = hi;
                  this.idx = idx;
                  }
                  public boolean evaluate(RowSet rs) {
                  CachedRowSet crs = (CachedRowSet)rs;
                  boolean bool1,bool2;
                  // Check the present row determine if it lies
                  // within the filtering criteria.
                  for (int i = 0; i &lt; idx.length; i++) {
                  if ((rs.getObject(idx[i]) &gt;= lo[i]) &amp;&amp;
                  (rs.getObject(idx[i]) &gt;= hi[i]) {
                  bool1 = true; // within filter constraints
                  } else {
                  bool2 = true; // outside of filter constraints
                  }
                  }
                  if (bool2) {
                  return false;
                  } else {
                  return true;
                  }
                  }
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;P&gt;
                  The example above implements a simple range predicate. Note, that
                  implementations should but are not required to provider &lt;code&gt;String&lt;/code&gt;
                  and integer index based constructors to provide for JDBC RowSet Implementation
                  applications that use both column identification conventions.                
                <author>
                    Jonathan Bruce, Amit Handa                    
                </author>
            </javadoc>
            <method name="evaluate" type="boolean" line="68"/>
            <javadoc line="68">
                This method is typically called a &lt;code&gt;FilteredRowSet&lt;/code&gt; object
                  internal methods (not public) that control the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s
                  cursor moving  from row to the next. In addition, if this internal method
                  moves the cursor onto a row that has been deleted, the internal method will
                  continue to ove the cursor until a valid row is found.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if there are more rows in the filter;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="evaluate" type="boolean" line="78"/>
            <javadoc line="78">
                This method is called by a &lt;code&gt;FilteredRowSet&lt;/code&gt; object
                  to check whether the value lies between the filtering criterion (or criteria
                  if multiple constraints exist) set using the &lt;code&gt;setFilter()&lt;/code&gt; method.
                  &lt;P&gt;
                  The &lt;code&gt;FilteredRowSet&lt;/code&gt; object will use this method internally
                  while inserting new rows to a &lt;code&gt;FilteredRowSet&lt;/code&gt; instance.                
                <param>
                    value An &lt;code&gt;Object&lt;/code&gt; value which needs to be checked,
                      whether it can be part of this &lt;code&gt;FilterRowSet&lt;/code&gt; object.                    
                </param>
                <param>
                    column a &lt;code&gt;int&lt;/code&gt; object that must match the
                      SQL index of a column in this &lt;code&gt;RowSet&lt;/code&gt; object. This must
                      have been passed to &lt;code&gt;Predicate&lt;/code&gt; as one of the columns
                      for filtering while initializing a &lt;code&gt;Predicate&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; ifrow value lies within the filter;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if the column is not part of filtering criteria                    
                </throws>
            </javadoc>
            <method name="evaluate" type="boolean" line="96"/>
            <javadoc line="96">
                This method is called by the &lt;code&gt;FilteredRowSet&lt;/code&gt; object
                  to check whether the value lies between the filtering criteria set
                  using the setFilter method.
                  &lt;P&gt;
                  The &lt;code&gt;FilteredRowSet&lt;/code&gt; object will use this method internally
                  while inserting new rows to a &lt;code&gt;FilteredRowSet&lt;/code&gt; instance.                
                <param>
                    value An &lt;code&gt;Object&lt;/code&gt; value which needs to be checked,
                      whether it can be part of this &lt;code&gt;FilterRowSet&lt;/code&gt;.                    
                </param>
                <param>
                    columnName a &lt;code&gt;String&lt;/code&gt; object that must match the
                      SQL name of a column in this &lt;code&gt;RowSet&lt;/code&gt;, ignoring case. This must
                      have been passed to &lt;code&gt;Predicate&lt;/code&gt; as one of the columns for filtering
                      while initializing a &lt;code&gt;Predicate&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if value lies within the filter; &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    SQLException if the column is not part of filtering criteria                    
                </throws>
            </javadoc>
        </interface>
    </source>