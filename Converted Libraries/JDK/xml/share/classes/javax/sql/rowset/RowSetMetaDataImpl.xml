<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <class name="RowSetMetaDataImpl" line="34">
            <implements interface="RowSetMetaData"/>
            <implements interface="Serializable"/>
            <javadoc line="34">
                Provides implementations for the methods that set and get
                  metadata information about a &lt;code&gt;RowSet&lt;/code&gt; object&apos;s columns.
                  A &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object keeps track of the
                  number of columns in the rowset and maintains an internal array
                  of column attributes for each column.
                  &lt;P&gt;
                  A &lt;code&gt;RowSet&lt;/code&gt; object creates a &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt;
                  object internally in order to set and retrieve information about
                  its columns.
                  &lt;P&gt;
                  NOTE: All metadata in a &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object
                  should be considered as unavailable until the &lt;code&gt;RowSet&lt;/code&gt; object
                  that it describes is populated.
                  Therefore, any &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; method that retrieves information
                  is defined as having unspecified behavior when it is called
                  before the &lt;code&gt;RowSet&lt;/code&gt; object contains data.                
            </javadoc>
            <declaration name="colCount" type="int" line="54"/>
            <javadoc line="54">
                The number of columns in the &lt;code&gt;RowSet&lt;/code&gt; object that created
                  this &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="colInfo" type="ColInfo[]" line="61"/>
            <javadoc line="61">
                An array of &lt;code&gt;ColInfo&lt;/code&gt; objects used to store information
                  about each column in the &lt;code&gt;RowSet&lt;/code&gt; object for which
                  this &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object was created. The first
                  &lt;code&gt;ColInfo&lt;/code&gt; object in this array contains information about
                  the first column in the &lt;code&gt;RowSet&lt;/code&gt; object, the second element
                  contains information about the second column, and so on.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="72">
                Checks to see that the designated column is a valid column number for
                  the &lt;code&gt;RowSet&lt;/code&gt; object for which this &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt;
                  was created. To be valid, a column number must be greater than
                  &lt;code&gt;0&lt;/code&gt; and less than or equal to the number of columns in a row.                
                <throws>
                    <code>SQLException</code> with the message "Invalid column index"
                      if the given column number is out of the range of valid column
                      numbers for the <code>RowSet</code> object                    
                </throws>
            </javadoc>
            <method name="checkColRange" type="void" line="81">
                <params>
                    <param name="col" type="int"/>
                </params>
                <scope line="82"/>
            </method>
            <javadoc line="87">
                Checks to see that the given SQL type is a valid column type and throws an
                  &lt;code&gt;SQLException&lt;/code&gt; object if it is not.
                  To be valid, a SQL type must be one of the constant values
                  in the &lt;code&gt;&lt;a href=&quot;../../sql/Types.html&quot;&gt;java.sql.Types&lt;/a&gt;&lt;/code&gt;
                  class.                
                <param>
                    SQLType an <code>int</code> defined in the class <code>java.sql.Types</code>                    
                </param>
                <throws>
                    SQLException if the given <code>int</code> is not a constant defined in the
                      class <code>java.sql.Types</code>                    
                </throws>
            </javadoc>
            <method name="checkColType" type="void" line="98">
                <params>
                    <param name="SQLType" type="int"/>
                </params>
                <scope line="99">
                    <declaration name="c" type="Class" line="100"/>
                    <declaration name="publicFields" type="Field[]" line="101"/>
                    <declaration name="fieldValue" type="int" line="102"/>
                    <scope line="103">
                        <scope line="105"/>
                    </scope>
                </scope>
                <scope line="109"/>
            </method>
            <javadoc line="115">
                Sets to the given number the number of columns in the &lt;code&gt;RowSet&lt;/code&gt;
                  object for which this &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object was created.                
                <param>
                    columnCount an <code>int</code> giving the number of columns in the
                      <code>RowSet</code> object                    
                </param>
                <throws>
                    SQLException if the given number is equal to or less than zero                    
                </throws>
            </javadoc>
            <method name="setColumnCount" type="void" line="123">
                <params>
                    <param name="columnCount" type="int"/>
                </params>
                <comment line="132">
                    If the colCount is Integer.MAX_VALUE,                    
                </comment>
                <comment line="133">
                    we do not initialize the colInfo object.                    
                </comment>
                <comment line="134">
                    even if we try to initialize the colCount with                    
                </comment>
                <comment line="135">
                    colCount = Integer.MAx_VALUE-1, the colInfo                    
                </comment>
                <comment line="136">
                    initialization fails throwing an ERROR                    
                </comment>
                <comment line="137">
                    OutOfMemory Exception. So we do not initialize                    
                </comment>
                <comment line="138">
                    colInfo at Integer.MAX_VALUE. This is to pass TCK.                    
                </comment>
                <scope line="125"/>
                <scope line="140">
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="151">
                Sets whether the designated column is automatically
                  numbered, thus read-only, to the given &lt;code&gt;boolean&lt;/code&gt;
                  value.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns
                      in the rowset, inclusive                    
                </param>
                <param>
                    property <code>true</code> if the given column is
                      automatically incremented; <code>false</code>
                      otherwise                    
                </param>
                <throws>
                    <code>SQLException</code> if a database access error occurs or
                      the given index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setAutoIncrement" type="void" line="165">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="property" type="boolean"/>
                </params>
            </method>
            <javadoc line="170">
                Sets whether the name of the designated column is case sensitive to
                  the given &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns
                      in the rowset, inclusive                    
                </param>
                <param>
                    property <code>true</code> to indicate that the column
                      name is case sensitive; <code>false</code> otherwise                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setCaseSensitive" type="void" line="182">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="property" type="boolean"/>
                </params>
            </method>
            <javadoc line="187">
                Sets whether a value stored in the designated column can be used
                  in a &lt;code&gt;WHERE&lt;/code&gt; clause to the given &lt;code&gt;boolean&lt;/code&gt; value.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number
                      of columns in the rowset, inclusive                    
                </param>
                <param>
                    property <code>true</code> to indicate that a column
                      value can be used in a <code>WHERE</code> clause;
                      <code>false</code> otherwise                    
                </param>
                <throws>
                    <code>SQLException</code> if a database access error occurs or
                      the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setSearchable" type="void" line="202">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="property" type="boolean"/>
                </params>
            </method>
            <javadoc line="207">
                Sets whether a value stored in the designated column is a cash
                  value to the given &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns,
                      inclusive between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    property true if the value is a cash value; false otherwise.                    
                </param>
                <throws>
                    <code>SQLException</code> if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setCurrency" type="void" line="219">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="property" type="boolean"/>
                </params>
            </method>
            <javadoc line="224">
                Sets whether a value stored in the designated column can be set
                  to &lt;code&gt;NULL&lt;/code&gt; to the given constant from the interface
                  &lt;code&gt;ResultSetMetaData&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    property one of the following <code>ResultSetMetaData</code> constants:
                      <code>columnNoNulls</code>,
                      <code>columnNullable</code>, or
                      <code>columnNullableUnknown</code>                    
                </param>
                <throws>
                    <code>SQLException</code> if a database access error occurs,
                      the given column number is out of bounds, or the value supplied
                      for the <i>property</i> parameter is not one of the following
                      constants:
                      <code>ResultSetMetaData.columnNoNulls</code>,
                      <code>ResultSetMetaData.columnNullable</code>, or
                      <code>ResultSetMetaData.columnNullableUnknown</code>                    
                </throws>
            </javadoc>
            <method name="setNullable" type="void" line="244">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="property" type="int"/>
                </params>
                <scope line="246"/>
            </method>
            <javadoc line="254">
                Sets whether a value stored in the designated column is a signed
                  number to the given &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    property <code>true</code> to indicate that a column
                      value is a signed number;
                      <code>false</code> to indicate that it is not                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setSigned" type="void" line="266">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="property" type="boolean"/>
                </params>
            </method>
            <javadoc line="271">
                Sets the normal maximum number of chars in the designated column
                  to the given number.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    size the maximum size of the column in chars; must be
                      <code>0</code> or more                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      the given column number is out of bounds, or <i>size</i> is
                      less than <code>0</code>                    
                </throws>
            </javadoc>
            <method name="setColumnDisplaySize" type="void" line="283">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="284"/>
            </method>
            <javadoc line="292">
                Sets the suggested column label for use in printouts and
                  displays, if any, to &lt;i&gt;label&lt;/i&gt;. If &lt;i&gt;label&lt;/i&gt; is
                  &lt;code&gt;null&lt;/code&gt;, the column label is set to an empty string
                  (&quot;&quot;).                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    label the column label to be used in printouts and displays; if the
                      column label is <code>null</code>, an empty <code>String</code> is
                      set                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or the given column index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setColumnLabel" type="void" line="306">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="label" type="String"/>
                </params>
                <scope line="308"/>
                <scope line="310"/>
            </method>
            <javadoc line="315">
                Sets the column name of the designated column to the given name.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    columnName a <code>String</code> object indicating the column name;
                      if the given name is <code>null</code>, an empty <code>String</code>
                      is set                    
                </param>
                <throws>
                    SQLException if a database access error occurs or the given column
                      index is out of bounds                    
                </throws>
            </javadoc>
            <method name="setColumnName" type="void" line="326">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="columnName" type="String"/>
                </params>
                <scope line="328"/>
                <scope line="330"/>
            </method>
            <javadoc line="335">
                Sets the designated column&apos;s table&apos;s schema name, if any, to
                  &lt;i&gt;schemaName&lt;/i&gt;. If &lt;i&gt;schemaName&lt;/i&gt; is &lt;code&gt;null&lt;/code&gt;,
                  the schema name is set to an empty string (&quot;&quot;).                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    schemaName the schema name for the table from which a value in the
                      designated column was derived; may be an empty <code>String</code>
                      or <code>null</code>                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setSchemaName" type="void" line="348">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="schemaName" type="String"/>
                </params>
                <scope line="350"/>
                <scope line="352"/>
            </method>
            <javadoc line="357">
                Sets the total number of decimal digits in a value stored in the
                  designated column to the given number.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    precision the total number of decimal digits; must be <code>0</code>
                      or more                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      <i>columnIndex</i> is out of bounds, or <i>precision</i>
                      is less than <code>0</code>                    
                </throws>
            </javadoc>
            <method name="setPrecision" type="void" line="369">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="precision" type="int"/>
                </params>
                <scope line="371"/>
            </method>
            <javadoc line="379">
                Sets the number of digits to the right of the decimal point in a value
                  stored in the designated column to the given number.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    scale the number of digits to the right of the decimal point; must be
                      zero or greater                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      <i>columnIndex</i> is out of bounds, or <i>scale</i>
                      is less than <code>0</code>                    
                </throws>
            </javadoc>
            <method name="setScale" type="void" line="391">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="scale" type="int"/>
                </params>
                <scope line="392"/>
            </method>
            <javadoc line="400">
                Sets the name of the table from which the designated column
                  was derived to the given table name.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    tableName the column's table name; may be <code>null</code> or an
                      empty string                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setTableName" type="void" line="411">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="tableName" type="String"/>
                </params>
                <scope line="413"/>
                <scope line="415"/>
            </method>
            <javadoc line="420">
                Sets the catalog name of the table from which the designated
                  column was derived to &lt;i&gt;catalogName&lt;/i&gt;. If &lt;i&gt;catalogName&lt;/i&gt;
                  is &lt;code&gt;null&lt;/code&gt;, the catalog name is set to an empty string.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    catalogName the column's table's catalog name; if the catalogName
                      is <code>null</code>, an empty <code>String</code> is set                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setCatalogName" type="void" line="432">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="catalogName" type="String"/>
                </params>
            </method>
            <javadoc line="440">
                Sets the SQL type code for values stored in the designated column
                  to the given type code from the class &lt;code&gt;java.sql.Types&lt;/code&gt;.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    SQLType the designated column's SQL type, which must be one of the
                      constants in the class <code>java.sql.Types</code>                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      the given column number is out of bounds, or the column type
                      specified is not one of the constants in
                      <code>java.sql.Types</code>                    
                </throws>
                <see>
                    java.sql.Types                    
                </see>
            </javadoc>
            <method name="setColumnType" type="void" line="454">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="SQLType" type="int"/>
                </params>
                <comment line="455">
                    examine java.sql.Type reflectively, loop on the fields and check                    
                </comment>
                <comment line="456">
                    this. Separate out into a private method                    
                </comment>
            </method>
            <javadoc line="462">
                Sets the type name used by the data source for values stored in the
                  designated column to the given type name.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <param>
                    typeName the data source-specific type name; if <i>typeName</i> is
                      <code>null</code>, an empty <code>String</code> is set                    
                </param>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="setColumnTypeName" type="void" line="474">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="typeName" type="String"/>
                </params>
                <scope line="476"/>
                <scope line="478"/>
            </method>
            <javadoc line="483">
                Retrieves the number of columns in the &lt;code&gt;RowSet&lt;/code&gt; object
                  for which this &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object was created.                
                <return>
                    the number of columns                    
                </return>
                <throws>
                    SQLException if an error occurs determining the column count                    
                </throws>
            </javadoc>
            <method name="getColumnCount" type="int" line="490"/>
            <javadoc line="494">
                Retrieves whether a value stored in the designated column is
                  automatically numbered, and thus readonly.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if the column is automatically numbered;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isAutoIncrement" type="boolean" line="505">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="510">
                Indicates whether the case of the designated column&apos;s name
                  matters.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if the column name is case sensitive;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isCaseSensitive" type="boolean" line="521">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="526">
                Indicates whether a value stored in the designated column
                  can be used in a &lt;code&gt;WHERE&lt;/code&gt; clause.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if a value in the designated column can be used in a
                      <code>WHERE</code> clause; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isSearchable" type="boolean" line="537">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="542">
                Indicates whether a value stored in the designated column
                  is a cash value.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if a value in the designated column is a cash value;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isCurrency" type="boolean" line="553">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="558">
                Retrieves a constant indicating whether it is possible
                  to store a &lt;code&gt;NULL&lt;/code&gt; value in the designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    a constant from the <code>ResultSetMetaData</code> interface;
                      either <code>columnNoNulls</code>,
                      <code>columnNullable</code>, or
                      <code>columnNullableUnknown</code>                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isNullable" type="int" line="571">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="576">
                Indicates whether a value stored in the designated column is
                  a signed number.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if if a value in the designated column is a signed
                      number; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isSigned" type="boolean" line="587">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="592">
                Retrieves the normal maximum width in chars of the designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the maximum number of chars that can be displayed in the designated
                      column                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getColumnDisplaySize" type="int" line="602">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="607">
                Retrieves the the suggested column title for the designated
                  column for use in printouts and displays.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the suggested column name to use in printouts and displays                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getColumnLabel" type="String" line="617">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="622">
                Retrieves the name of the designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the column name of the designated column                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getColumnName" type="String" line="631">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="636">
                Retrieves the schema name of the table from which the value
                  in the designated column was derived.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns,
                      inclusive                    
                </param>
                <return>
                    the schema name or an empty <code>String</code> if no schema
                      name is available                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getSchemaName" type="String" line="648">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <declaration name="str" type="String" line="650"/>
                <scope line="651"/>
                <scope line="652"/>
            </method>
            <javadoc line="658">
                Retrieves the total number of digits for values stored in
                  the designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the precision for values stored in the designated column                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getPrecision" type="int" line="668">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="673">
                Retrieves the number of digits to the right of the decimal point
                  for values stored in the designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the scale for values stored in the designated column                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getScale" type="int" line="683">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="688">
                Retrieves the name of the table from which the value
                  in the designated column was derived.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the table name or an empty <code>String</code> if no table name
                      is available                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getTableName" type="String" line="699">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="704">
                Retrieves the catalog name of the table from which the value
                  in the designated column was derived.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the catalog name of the column's table or an empty
                      <code>String</code> if no catalog name is available                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getCatalogName" type="String" line="715">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <declaration name="str" type="String" line="717"/>
                <scope line="718"/>
                <scope line="719"/>
            </method>
            <javadoc line="725">
                Retrieves the type code (one of the &lt;code&gt;java.sql.Types&lt;/code&gt;
                  constants) for the SQL type of the value stored in the
                  designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    an <code>int</code> representing the SQL type of values
                      stored in the designated column                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
                <see>
                    java.sql.Types                    
                </see>
            </javadoc>
            <method name="getColumnType" type="int" line="738">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="743">
                Retrieves the DBMS-specific type name for values stored in the
                  designated column.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the type name used by the data source                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getColumnTypeName" type="String" line="753">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="759">
                Indicates whether the designated column is definitely
                  not writable, thus readonly.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if this <code>RowSet</code> object is read-Only
                      and thus not updatable; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="770">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="775">
                Indicates whether it is possible for a write operation on
                  the designated column to succeed. A return value of
                  &lt;code&gt;true&lt;/code&gt; means that a write operation may or may
                  not succeed.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if a write operation on the designated column may
                      will succeed; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isWritable" type="boolean" line="788">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="793">
                Indicates whether a write operation on the designated column
                  will definitely succeed.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    <code>true</code> if a write operation on the designated column will
                      definitely succeed; <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="isDefinitelyWritable" type="boolean" line="805">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="807">
                Retrieves the fully-qualified name of the class in the Java
                  programming language to which a value in the designated column
                  will be mapped.  For example, if the value is an &lt;code&gt;int&lt;/code&gt;,
                  the class name returned by this method will be
                  &lt;code&gt;java.lang.Integer&lt;/code&gt;.
                  &lt;P&gt;
                  If the value in the designated column has a custom mapping,
                  this method returns the name of the class that implements
                  &lt;code&gt;SQLData&lt;/code&gt;. When the method &lt;code&gt;ResultSet.getObject&lt;/code&gt;
                  is called to retrieve a value from the designated column, it will
                  create an instance of this class or one of its subclasses.                
                <param>
                    columnIndex the first column is 1, the second is 2, and so on;
                      must be between <code>1</code> and the number of columns, inclusive                    
                </param>
                <return>
                    the fully-qualified name of the class in the Java programming
                      language that would be used by the method <code>RowSet.getObject</code> to
                      retrieve the value in the specified column. This is the class
                      name used for custom mapping when there is a custom mapping.                    
                </return>
                <throws>
                    SQLException if a database access error occurs
                      or the given column number is out of bounds                    
                </throws>
            </javadoc>
            <method name="getColumnClassName" type="String" line="829">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
                <declaration name="className" type="String" line="830"/>
                <declaration name="sqlType" type="int" line="832"/>
            </method>
            <javadoc line="900">
                Returns an object that implements the given interface to allow access to non-standard methods,
                  or standard methods not exposed by the proxy.
                  The result may be either the object found to implement the interface or a proxy for that object.
                  If the receiver implements the interface then that is the object. If the receiver is a wrapper
                  and the wrapped object implements the interface then that is the object. Otherwise the object is
                  the result of calling &lt;code&gt;unwrap&lt;/code&gt; recursively on the wrapped object. If the receiver is not a
                  wrapper and does not implement the interface, then an &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <param>
                    iface A Class defining an interface that the result must implement.                    
                </param>
                <return>
                    an object that implements the interface. May be a proxy for the actual implementing object.                    
                </return>
                <throws>
                    java.sql.SQLException If no object found that implements the interface                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="unwrap" type="T" line="914">
                <params>
                    <param name="iface" type="java.lang.Class<T>"/>
                </params>
                <scope line="916"/>
                <scope line="918"/>
            </method>
            <javadoc line="923">
                Returns true if this either implements the interface argument or is directly or indirectly a wrapper
                  for an object that does. Returns false otherwise. If this implements the interface then return true,
                  else if this is a wrapper then return the result of recursively calling &lt;code&gt;isWrapperFor&lt;/code&gt; on the wrapped
                  object. If this does not implement the interface and is not a wrapper, return false.
                  This method should be implemented as a low-cost operation compared to &lt;code&gt;unwrap&lt;/code&gt; so that
                  callers can use this method to avoid expensive &lt;code&gt;unwrap&lt;/code&gt; calls that may fail. If this method
                  returns true then calling &lt;code&gt;unwrap&lt;/code&gt; with the same argument should succeed.                
                <param>
                    interfaces a Class defining an interface.                    
                </param>
                <return>
                    true if this implements the interface or directly or indirectly wraps an object that does.                    
                </return>
                <throws>
                    java.sql.SQLException  if an error occurs while determining whether this is a wrapper
                      for an object with the given interface.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="isWrapperFor" type="boolean" line="938">
                <params>
                    <param name="interfaces" type="Class<?>"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="942"/>
            <class name="ColInfo" line="944">
                <implements interface="Serializable"/>
                <declaration name="autoIncrement" type="boolean" line="945"/>
                <javadoc line="945">
                    The field that indicates whether the value in this column is a number
                      that is incremented automatically, which makes the value read-only.
                      &lt;code&gt;true&lt;/code&gt; means that the value in this column
                      is automatically numbered; &lt;code&gt;false&lt;/code&gt; means that it is not.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="caseSensitive" type="boolean" line="955"/>
                <javadoc line="955">
                    The field that indicates whether the value in this column is case sensitive.
                      &lt;code&gt;true&lt;/code&gt; means that it is; &lt;code&gt;false&lt;/code&gt; that it is not.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="currency" type="boolean" line="963"/>
                <javadoc line="963">
                    The field that indicates whether the value in this column is a cash value
                      &lt;code&gt;true&lt;/code&gt; means that it is; &lt;code&gt;false&lt;/code&gt; that it is not.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="nullable" type="int" line="971"/>
                <javadoc line="971">
                    The field that indicates whether the value in this column is nullable.
                      The possible values are the &lt;code&gt;ResultSet&lt;/code&gt; constants
                      &lt;code&gt;columnNoNulls&lt;/code&gt;, &lt;code&gt;columnNullable&lt;/code&gt;, and
                      &lt;code&gt;columnNullableUnknown&lt;/code&gt;.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="signed" type="boolean" line="981"/>
                <javadoc line="981">
                    The field that indicates whether the value in this column is a signed number.
                      &lt;code&gt;true&lt;/code&gt; means that it is; &lt;code&gt;false&lt;/code&gt; that it is not.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="searchable" type="boolean" line="989"/>
                <javadoc line="989">
                    The field that indicates whether the value in this column can be used in
                      a &lt;code&gt;WHERE&lt;/code&gt; clause.
                      &lt;code&gt;true&lt;/code&gt; means that it can; &lt;code&gt;false&lt;/code&gt; that it cannot.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="columnDisplaySize" type="int" line="998"/>
                <javadoc line="998">
                    The field that indicates the normal maximum width in characters for
                      this column.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="columnLabel" type="String" line="1006"/>
                <javadoc line="1006">
                    The field that holds the suggested column title for this column, to be
                      used in printing and displays.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="columnName" type="String" line="1014"/>
                <javadoc line="1014">
                    The field that holds the name of this column.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="schemaName" type="String" line="1021"/>
                <javadoc line="1021">
                    The field that holds the schema name for the table from which this column
                      was derived.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="colPrecision" type="int" line="1029"/>
                <javadoc line="1029">
                    The field that holds the precision of the value in this column.  For number
                      types, the precision is the total number of decimal digits; for character types,
                      it is the maximum number of characters; for binary types, it is the maximum
                      length in bytes.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="colScale" type="int" line="1039"/>
                <javadoc line="1039">
                    The field that holds the scale (number of digits to the right of the decimal
                      point) of the value in this column.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="tableName" type="String" line="1047"/>
                <javadoc line="1047">
                    The field that holds the name of the table from which this column
                      was derived.  This value may be the empty string if there is no
                      table name, such as when this column is produced by a join.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="catName" type="String" line="1056"/>
                <javadoc line="1056">
                    The field that holds the catalog name for the table from which this column
                      was derived.  If the DBMS does not support catalogs, the value may be the
                      empty string.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="colType" type="int" line="1065"/>
                <javadoc line="1065">
                    The field that holds the type code from the class &lt;code&gt;java.sql.Types&lt;/code&gt;
                      indicating the type of the value in this column.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="colTypeName" type="String" line="1073"/>
                <javadoc line="1073">
                    The field that holds the the type name used by this particular data source
                      for the value stored in this column.                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="readOnly" type="boolean" line="1081"/>
                <javadoc line="1081">
                    The field that holds the updatablity boolean per column of a RowSet                    
                    <serial>
                                                
                    </serial>
                </javadoc>
                <declaration name="writable" type="boolean" line="1088"/>
                <javadoc line="1088">
                    The field that hold the writable boolean per column of a RowSet                    
                    <serial>
                                                
                    </serial>
                </javadoc>
            </class>
        </class>
    </source>