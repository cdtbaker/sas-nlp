<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset">
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.sql.SQLException"/>
        <import package="java.util.ServiceConfigurationError"/>
        <import package="java.util.ServiceLoader"/>
        <class name="RowSetProvider" line="34">
            <comment line="202">
                Returns the class loader to be used.
                 @return The ClassLoader to use.                
            </comment>
            <javadoc line="34">
                A factory API that enables applications to obtain a{@code RowSetFactory} implementation  that can be used to create different
                  types of {@code RowSet} implementations.
                  &lt;p&gt;
                  Example:
                  &lt;/p&gt;
                  &lt;pre&gt;
                  RowSetFactory aFactory = RowSetProvider.newFactory();
                  CachedRowSet crs = aFactory.createCachedRowSet();
                  ...
                  RowSetFactory rsf = RowSetProvider.newFactory(&quot;com.sun.rowset.RowSetFactoryImpl&quot;, null);
                  WebRowSet wrs = rsf.createWebRowSet();
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Tracing of this class may be enabled by setting the System property{@code javax.sql.rowset.RowSetFactory.debug} to any value but {@code false}.
                  &lt;/p&gt;                
                <author>
                    Lance Andersen                    
                </author>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <declaration name="ROWSET_DEBUG_PROPERTY" type="String" line="58"/>
            <declaration name="ROWSET_FACTORY_IMPL" type="String" line="59"/>
            <declaration name="ROWSET_FACTORY_NAME" type="String" line="60"/>
            <declaration name="debug" type="boolean" line="61"/>
            <javadoc line="61">
                Internal debug flag.                
            </javadoc>
            <scope line="67">
                <declaration name="val" type="String" line="69"/>
            </scope>
            <method name="RowSetProvider" type="constructor" line="75"/>
            <javadoc line="78">
                &lt;p&gt;Creates a new instance of a &lt;code&gt;RowSetFactory&lt;/code&gt;
                  implementation.  This method uses the following
                  look up order to determine
                  the &lt;code&gt;RowSetFactory&lt;/code&gt; implementation class to load:&lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;
                  The System property {@code javax.sql.rowset.RowSetFactory}.  For example:
                  &lt;ul&gt;
                  &lt;li&gt;
                  -Djavax.sql.rowset.RowSetFactory=com.sun.rowset.RowSetFactoryImpl
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;li&gt;
                  The {@link ServiceLoader} API. The {@code ServiceLoader} API will look
                  for a class name in the file{@code META-INF/services/javax.sql.rowset.RowSetFactory}in jars available to the runtime. For example, to have the the RowSetFactory
                  implementation {@code com.sun.rowset.RowSetFactoryImpl } loaded, the
                  entry in {@code META-INF/services/javax.sql.rowset.RowSetFactory} would be:
                  &lt;ul&gt;
                  &lt;li&gt;{@code com.sun.rowset.RowSetFactoryImpl }&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                  Platform default &lt;code&gt;RowSetFactory&lt;/code&gt; instance.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;Once an application has obtained a reference to a {@code RowSetFactory},
                  it can use the factory to obtain RowSet instances.&lt;/p&gt;                
                <return>
                    New instance of a <code>RowSetFactory</code>                    
                </return>
                <throws>
                    SQLException if the default factory class cannot be loaded,
                      instantiated. The cause will be set to actual Exception                    
                </throws>
                <see>
                    ServiceLoader                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="newFactory" type="RowSetFactory" line="121">
                <comment line="122">
                    Use the system property first                    
                </comment>
                <comment line="141">
                    Check to see if we found the RowSetFactory via a System property                    
                </comment>
                <comment line="143">
                    If the RowSetFactory is not found via a System Property, now                    
                </comment>
                <comment line="144">
                    look it up via the ServiceLoader API and if not found, use the                    
                </comment>
                <comment line="145">
                    Java SE default.                    
                </comment>
                <declaration name="factory" type="RowSetFactory" line="123"/>
                <declaration name="factoryClassName" type="String" line="124"/>
                <scope line="125">
                    <scope line="128"/>
                </scope>
                <scope line="132"/>
                <scope line="135"/>
                <scope line="142"/>
            </method>
            <javadoc line="153">
                &lt;p&gt;Creates  a new instance of a &lt;code&gt;RowSetFactory&lt;/code&gt; from the
                  specified factory class name.
                  This function is useful when there are multiple providers in the classpath.
                  It gives more control to the application as it can specify which provider
                  should be loaded.&lt;/p&gt;
                  &lt;p&gt;Once an application has obtained a reference to a &lt;code&gt;RowSetFactory&lt;/code&gt;
                  it can use the factory to obtain RowSet instances.&lt;/p&gt;                
                <param>
                    factoryClassName fully qualified factory class name that
                      provides  an implementation of <code>javax.sql.rowset.RowSetFactory</code>.                    
                </param>
                <param>
                    cl <code>ClassLoader</code> used to load the factory
                      class. If <code>null</code> current <code>Thread</code>'s context
                      classLoader is used to load the factory class.                    
                </param>
                <return>
                    New instance of a <code>RowSetFactory</code>                    
                </return>
                <throws>
                    SQLException if <code>factoryClassName</code> is
                      <code>null</code>, or the factory class cannot be loaded, instantiated.                    
                </throws>
                <see>
                    #newFactory()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="newFactory" type="RowSetFactory" line="180">
                <params>
                    <param name="factoryClassName" type="String"/>
                    <param name="cl" type="ClassLoader"/>
                </params>
                <scope line="183">
                    <declaration name="providerClass" type="Class" line="184"/>
                    <declaration name="instance" type="RowSetFactory" line="185"/>
                    <scope line="186"/>
                </scope>
                <scope line="191"/>
                <scope line="194"/>
            </method>
            <method name="getContextClassLoader" type="ClassLoader" line="206">
                <anonymous_class line="207">
                    <method name="run" type="ClassLoader" line="209">
                        <declaration name="cl" type="ClassLoader" line="210"/>
                        <scope line="214"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="223">
                Attempt to load a class using the class loader supplied. If that fails
                  and fall back is enabled, the current (i.e. bootstrap) class loader is
                  tried.
                  If the class loader supplied is &lt;code&gt;null&lt;/code&gt;, first try using the
                  context class loader followed by the current class loader.                
                <return>
                    The class which was loaded                    
                </return>
            </javadoc>
            <method name="getFactoryClass" type="Class" line="233">
                <params>
                    <param name="factoryClassName" type="String"/>
                    <param name="cl" type="ClassLoader"/>
                    <param name="doFallback" type="boolean"/>
                </params>
                <comment line="247">
                    Use current class loader                    
                </comment>
                <scope line="234">
                    <scope line="235">
                        <scope line="237"/>
                        <scope line="239"/>
                    </scope>
                    <scope line="242"/>
                </scope>
                <scope line="245">
                    <scope line="246"/>
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="255">
                Use the ServiceLoader mechanism to load  the default RowSetFactory                
                <return>
                    default RowSetFactory Implementation                    
                </return>
            </javadoc>
            <method name="loadViaServiceLoader" type="RowSetFactory" line="259">
                <declaration name="theFactory" type="RowSetFactory" line="260"/>
                <scope line="261">
                    <scope line="263"/>
                </scope>
                <scope line="268"/>
            </method>
            <javadoc line="277">
                Returns the requested System Property.  If a {@code SecurityException}occurs, just return NULL                
                <param>
                    propName - System property to retrieve                    
                </param>
                <return>
                    The System property value or NULL if the property does not exist
                      or a {@code SecurityException} occurs.                    
                </return>
            </javadoc>
            <method name="getSystemProperty" type="String" line="284">
                <params>
                    <param name="propName" type="String"/>
                </params>
                <declaration name="property" type="String" line="285"/>
                <scope line="286">
                    <anonymous_class line="287">
                        <method name="run" type="String" line="289"/>
                    </anonymous_class>
                </scope>
                <scope line="293">
                    <scope line="294"/>
                </scope>
            </method>
            <javadoc line="301">
                Debug routine which will output tracing if the System Property
                  -Djavax.sql.rowset.RowSetFactory.debug is set                
                <param>
                    msg - The debug message to display                    
                </param>
            </javadoc>
            <method name="trace" type="void" line="306">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="307"/>
            </method>
        </class>
    </source>