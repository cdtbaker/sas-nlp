<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset.serial">
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <import package="javax.sql.rowset.RowSetWarning"/>
        <class name="SerialJavaObject" line="32">
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="32">
                A serializable mapping in the Java programming language of an SQL
                  &lt;code&gt;JAVA_OBJECT&lt;/code&gt; value. Assuming the Java object
                  implements the &lt;code&gt;Serializable&lt;/code&gt; interface, this class simply wraps the
                  serialization process.
                  &lt;P&gt;
                  If however, the serialization is not possible because
                  the Java object is not immediately serializable, this class will
                  attempt to serialize all non-static members to permit the object
                  state to be serialized.
                  Static or transient fields cannot be serialized; an attempt to serialize
                  them will result in a &lt;code&gt;SerialException&lt;/code&gt; object being thrown.                
                <author>
                    Jonathan Bruce                    
                </author>
            </javadoc>
            <declaration name="obj" type="Object" line="49"/>
            <javadoc line="49">
                Placeholder for object to be serialized.                
            </javadoc>
            <declaration name="fields" type="Field[]" line="55"/>
            <javadoc line="55">
                Placeholder for all fields in the &lt;code&gt;JavaObject&lt;/code&gt; being serialized.                
            </javadoc>
            <javadoc line="60">
                Constructor for &lt;code&gt;SerialJavaObject&lt;/code&gt; helper class.
                  &lt;p&gt;                
                <param>
                    obj the Java &lt;code&gt;Object&lt;/code&gt; to be serialized                    
                </param>
                <throws>
                    SerialException if the object is found not to be serializable                    
                </throws>
            </javadoc>
            <method name="SerialJavaObject" type="constructor" line="67">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <comment line="70">
                    if any static fields are found, an exception
                     should be thrown                    
                </comment>
                <comment line="74">
                    get Class. Object instance should always be available                    
                </comment>
                <comment line="77">
                    determine if object implements Serializable i/f                    
                </comment>
                <comment line="82">
                    can only determine public fields (obviously). If
                     any of these are static, this should invalidate
                     the action of attempting to persist these fields
                     in a serialized form                    
                </comment>
                <declaration name="c" type="Class&lt;?&gt;" line="74"/>
                <scope line="77"/>
                <declaration name="anyStaticFields" type="boolean" line="86"/>
                <scope line="89">
                    <scope line="90"/>
                </scope>
                <scope line="96"/>
            </method>
            <javadoc line="104">
                Returns an &lt;code&gt;Object&lt;/code&gt; that is a copy of this &lt;code&gt;SerialJavaObject&lt;/code&gt;
                  object.                
                <return>
                    a copy of this &lt;code&gt;SerialJavaObject&lt;/code&gt; object as an
                      &lt;code&gt;Object&lt;/code&gt; in the Java programming language                    
                </return>
                <throws>
                    SerialException if the instance is corrupt                    
                </throws>
            </javadoc>
            <method name="getObject" type="Object" line="112"/>
            <javadoc line="116">
                Returns an array of &lt;code&gt;Field&lt;/code&gt; objects that contains each
                  field of the object that this helper class is serializing.                
                <return>
                    an array of &lt;code&gt;Field&lt;/code&gt; objects                    
                </return>
                <throws>
                    SerialException if an error is encountered accessing
                      the serialized object                    
                </throws>
            </javadoc>
            <method name="getFields" type="Field[]" line="124">
                <scope line="125">
                    <declaration name="c" type="Class&lt;?&gt;" line="126"/>
                </scope>
                <scope line="128"/>
            </method>
            <declaration name="serialVersionUID" type="long" line="134"/>
            <javadoc line="134">
                The identifier that assists in the serialization of this
                  &lt;code&gt;SerialJavaObject&lt;/code&gt; object.                
            </javadoc>
            <declaration name="chain" type="java.util.Vector" line="140"/>
            <javadoc line="140">
                A container for the warnings issued on this &lt;code&gt;SerialJavaObject&lt;/code&gt;
                  object. When there are multiple warnings, each warning is chained to the
                  previous warning.                
            </javadoc>
            <javadoc line="147">
                Registers the given warning.                
            </javadoc>
            <method name="setWarning" type="void" line="150">
                <params>
                    <param name="e" type="RowSetWarning"/>
                </params>
                <scope line="151"/>
            </method>
        </class>
    </source>