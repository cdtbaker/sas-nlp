<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset.spi">
        <import package="java.util.logging"/>
        <import package="java.util"/>
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.io.InputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="javax.naming"/>
        <class name="SyncFactory" line="11">
            <javadoc line="11">
                The Service Provider Interface (SPI) mechanism that generates &lt;code&gt;SyncProvider&lt;/code&gt;
                  instances to be used by disconnected &lt;code&gt;RowSet&lt;/code&gt; objects.
                  The &lt;code&gt;SyncProvider&lt;/code&gt; instances in turn provide the
                  &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; object the &lt;code&gt;RowSet&lt;/code&gt; object
                  needs to populate itself with data and the
                  &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; object it needs to
                  propagate changes to its
                  data back to the underlying data source.
                  &lt;P&gt;
                  Because the methods in the &lt;code&gt;SyncFactory&lt;/code&gt; class are all static,
                  there is only one &lt;code&gt;SyncFactory&lt;/code&gt; object
                  per Java VM at any one time. This ensures that there is a single source from which a
                  &lt;code&gt;RowSet&lt;/code&gt; implementation can obtain its &lt;code&gt;SyncProvider&lt;/code&gt;
                  implementation.
                  &lt;p&gt;
                  &lt;h3&gt;1.0 Overview&lt;/h3&gt;
                  The &lt;code&gt;SyncFactory&lt;/code&gt; class provides an internal registry of available
                  synchronization provider implementations (&lt;code&gt;SyncProvider&lt;/code&gt; objects).
                  This registry may be queried to determine which
                  synchronization providers are available.
                  The following line of code gets an enumeration of the providers currently registered.
                  &lt;PRE&gt;
                  java.util.Enumeration e = SyncFactory.getRegisteredProviders();
                  &lt;/PRE&gt;
                  All standard &lt;code&gt;RowSet&lt;/code&gt; implementations must provide at least two providers:
                  &lt;UL&gt;
                  &lt;LI&gt;an optimistic provider for use with a &lt;code&gt;CachedRowSet&lt;/code&gt; implementation
                  or an implementation derived from it
                  &lt;LI&gt;an XML provider, which is used for reading and writing XML, such as with
                  &lt;code&gt;WebRowSet&lt;/code&gt; objects
                  &lt;/UL&gt;
                  Note that the JDBC RowSet Implementations include the &lt;code&gt;SyncProvider&lt;/code&gt;
                  implemtations &lt;code&gt;RIOptimisticProvider&lt;/code&gt; and &lt;code&gt;RIXmlProvider&lt;/code&gt;,
                  which satisfy this requirement.
                  &lt;P&gt;
                  The &lt;code&gt;SyncFactory&lt;/code&gt; class provides accessor methods to assist
                  applications in determining which synchronization providers are currently
                  registered with the &lt;code&gt;SyncFactory&lt;/code&gt;.
                  &lt;p&gt;
                  Other methods let &lt;code&gt;RowSet&lt;/code&gt; persistence providers be
                  registered or de-registered with the factory mechanism. This
                  allows additional synchronization provider implementations to be made
                  available to &lt;code&gt;RowSet&lt;/code&gt; objects at run time.
                  &lt;p&gt;
                  Applications can apply a degree of filtering to determine the level of
                  synchronization that a &lt;code&gt;SyncProvider&lt;/code&gt; implementation offers.
                  The following criteria determine whether a provider is
                  made available to a &lt;code&gt;RowSet&lt;/code&gt; object:
                  &lt;ol&gt;
                  &lt;li&gt;If a particular provider is specified by a &lt;code&gt;RowSet&lt;/code&gt; object, and
                  the &lt;code&gt;SyncFactory&lt;/code&gt; does not contain a reference to this provider,
                  a &lt;code&gt;SyncFactoryException&lt;/code&gt; is thrown stating that the synchronization
                  provider could not be found.
                  &lt;p&gt;
                  &lt;li&gt;If a &lt;code&gt;RowSet&lt;/code&gt; implementation is instantiated with a specified
                  provider and the specified provider has been properly registered, the
                  requested provider is supplied. Otherwise a &lt;code&gt;SyncFactoryException&lt;/code&gt;
                  is thrown.
                  &lt;p&gt;
                  &lt;li&gt;If a &lt;code&gt;RowSet&lt;/code&gt; object does not specify a
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementation and no additional
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementations are available, the reference
                  implementation providers are supplied.
                  &lt;/ol&gt;
                  &lt;h3&gt;2.0 Registering &lt;code&gt;SyncProvider&lt;/code&gt; Implementations&lt;/h3&gt;
                  &lt;p&gt;
                  Both vendors and developers can register &lt;code&gt;SyncProvider&lt;/code&gt;
                  implementations using one of the following mechanisms.
                  &lt;ul&gt;
                  &lt;LI&gt;&lt;B&gt;Using the command line&lt;/B&gt;&lt;BR&gt;
                  The name of the provider is supplied on the command line, which will add
                  the provider to the system properties.
                  For example:
                  &lt;PRE&gt;
                  -Drowset.provider.classname=com.fred.providers.HighAvailabilityProvider
                  &lt;/PRE&gt;
                  &lt;li&gt;&lt;b&gt;Using the Standard Properties File&lt;/b&gt;&lt;BR&gt;
                  The reference implementation is targeted
                  to ship with J2SE 1.5, which will include an additional resource file
                  that may be edited by hand. Here is an example of the properties file
                  included in the reference implementation:
                  &lt;PRE&gt;
                  #Default JDBC RowSet sync providers listing
                  #
                  # Optimistic synchronization provider
                  rowset.provider.classname.0=com.sun.rowset.providers.RIOptimisticProvider
                  rowset.provider.vendor.0=Oracle Corporation
                  rowset.provider.version.0=1.0
                  # XML Provider using standard XML schema
                  rowset.provider.classname.1=com.sun.rowset.providers.RIXMLProvider
                  rowset.provider.vendor.1=Oracle Corporation
                  rowset.provider.version.1=1.0
                  &lt;/PRE&gt;
                  The &lt;code&gt;SyncFactory&lt;/code&gt; checks this file and registers the
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementations that it contains. A
                  developer or vendor can add other implementations to this file.
                  For example, here is a possible addition:
                  &lt;PRE&gt;
                  rowset.provider.classname.2=com.fred.providers.HighAvailabilityProvider
                  rowset.provider.vendor.2=Fred, Inc.
                  rowset.provider.version.2=1.0
                  &lt;/PRE&gt;
                  &lt;p&gt;
                  &lt;li&gt;&lt;b&gt;Using a JNDI Context&lt;/b&gt;&lt;BR&gt;
                  Available providers can be registered on a JNDI
                  context, and the &lt;code&gt;SyncFactory&lt;/code&gt; will attempt to load
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementations from that JNDI context.
                  For example, the following code fragment registers a provider implementation
                  on a JNDI context.  This is something a deployer would normally do. In this
                  example, &lt;code&gt;MyProvider&lt;/code&gt; is being registered on a CosNaming
                  namespace, which is the namespace used by J2EE resources.
                  &lt;PRE&gt;
                  import javax.naming.;
                  Hashtable svrEnv = new  Hashtable();
                  srvEnv.put(Context.INITIAL_CONTEXT_FACTORY, &quot;CosNaming&quot;);
                  Context ctx = new InitialContext(svrEnv);
                  com.fred.providers.MyProvider = new MyProvider();
                  ctx.rebind(&quot;providers/MyProvider&quot;, syncProvider);
                  &lt;/PRE&gt;
                  &lt;/ul&gt;
                  Next, an application will register the JNDI context with the
                  &lt;code&gt;SyncFactory&lt;/code&gt; instance.  This allows the &lt;code&gt;SyncFactory&lt;/code&gt;
                  to browse within the JNDI context looking for &lt;code&gt;SyncProvider&lt;/code&gt;
                  implementations.
                  &lt;PRE&gt;
                  Hashtable appEnv = new Hashtable();
                  appEnv.put(Context.INITIAL_CONTEXT_FACTORY, &quot;CosNaming&quot;);
                  appEnv.put(Context.PROVIDER_URL, &quot;iiop://hostname/providers&quot;);
                  Context ctx = new InitialContext(appEnv);
                  SyncFactory.registerJNDIContext(ctx);
                  &lt;/PRE&gt;
                  If a &lt;code&gt;RowSet&lt;/code&gt; object attempts to obtain a &lt;code&gt;MyProvider&lt;/code&gt;
                  object, the &lt;code&gt;SyncFactory&lt;/code&gt; will try to locate it. First it searches
                  for it in the system properties, then it looks in the resource files, and
                  finally it checks the JNDI context that has been set. The &lt;code&gt;SyncFactory&lt;/code&gt;
                  instance verifies that the requested provider is a valid extension of the
                  &lt;code&gt;SyncProvider&lt;/code&gt; abstract class and then gives it to the
                  &lt;code&gt;RowSet&lt;/code&gt; object. In the following code fragment, a new
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object is created and initialized with
                  &lt;i&gt;env&lt;/i&gt;, which contains the binding to &lt;code&gt;MyProvider&lt;/code&gt;.
                  &lt;PRE&gt;
                  Hashtable env = new Hashtable();
                  env.put(SyncFactory.ROWSET_SYNC_PROVIDER, &quot;com.fred.providers.MyProvider&quot;);
                  CachedRowSet crs = new com.sun.rowset.CachedRowSetImpl(env);
                  &lt;/PRE&gt;
                  Further details on these mechanisms are available in the
                  &lt;code&gt;javax.sql.rowset.spi&lt;/code&gt; package specification.                
                <author>
                    Jonathan Bruce                    
                </author>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncFactoryException                    
                </see>
            </javadoc>
            <javadoc line="164">
                Creates a new &lt;code&gt;SyncFactory&lt;/code&gt; object, which is the singleton
                  instance.
                  Having a private constructor guarantees that no more than
                  one &lt;code&gt;SyncProvider&lt;/code&gt; object can exist at a time.                
            </javadoc>
            <method name="SyncFactory" type="constructor" line="170"/>
            <declaration name="ROWSET_SYNC_PROVIDER" type="String" line="172"/>
            <javadoc line="172">
                The standard property-id for a synchronization provider implementation
                  name.                
            </javadoc>
            <declaration name="ROWSET_SYNC_VENDOR" type="String" line="177"/>
            <javadoc line="177">
                The standard property-id for a synchronization provider implementation
                  vendor name.                
            </javadoc>
            <declaration name="ROWSET_SYNC_PROVIDER_VERSION" type="String" line="182"/>
            <javadoc line="182">
                The standard property-id for a synchronization provider implementation
                  version tag.                
            </javadoc>
            <declaration name="ROWSET_PROPERTIES" type="String" line="187"/>
            <javadoc line="187">
                The standard resource file name.                
            </javadoc>
            <declaration name="default_provider" type="String" line="191"/>
            <javadoc line="191">
                The RI Optimistic Provider.                
            </javadoc>
            <declaration name="SET_SYNCFACTORY_PERMISSION" type="SQLPermission" line="195"/>
            <javadoc line="195">
                Permission required to invoke setJNDIContext and setLogger                
            </javadoc>
            <declaration name="ic" type="Context" line="199"/>
            <javadoc line="199">
                The initial JNDI context where &lt;code&gt;SyncProvider&lt;/code&gt; implementations can
                  be stored and from which they can be invoked.                
            </javadoc>
            <declaration name="rsLogger" type="Logger" line="204"/>
            <javadoc line="204">
                The &lt;code&gt;Logger&lt;/code&gt; object to be used by the &lt;code&gt;SyncFactory&lt;/code&gt;.                
            </javadoc>
            <declaration name="rsLevel" type="Level" line="208"/>
            <javadoc line="208">
                                
            </javadoc>
            <declaration name="implementations" type="Hashtable" line="211"/>
            <javadoc line="211">
                The registry of available &lt;code&gt;SyncProvider&lt;/code&gt; implementations.
                  See section 2.0 of the class comment for &lt;code&gt;SyncFactory&lt;/code&gt; for an
                  explanation of how a provider can be added to this registry.                
            </javadoc>
            <declaration name="logSync" type="Object" line="217"/>
            <javadoc line="217">
                Internal sync object used to maintain the SPI as a singleton                
            </javadoc>
            <declaration name="logWriter" type="java.io.PrintWriter" line="221"/>
            <javadoc line="221">
                Internal PrintWriter field for logging facility                
            </javadoc>
            <javadoc line="225">
                Adds the the given synchronization provider to the factory register. Guidelines
                  are provided in the &lt;code&gt;SyncProvider&lt;/code&gt; specification for the
                  required naming conventions for &lt;code&gt;SyncProvider&lt;/code&gt;
                  implementations.
                  &lt;p&gt;
                  Synchronization providers bound to a JNDI context can be
                  registered by binding a SyncProvider instance to a JNDI namespace.
                  &lt;ul&gt;
                  &lt;pre&gt;
                  SyncProvider p = new MySyncProvider();
                  InitialContext ic = new InitialContext();
                  ic.bind (&quot;jdbc/rowset/MySyncProvider&quot;, p);
                  &lt;/pre&gt;
                  &lt;/ul&gt;
                  Furthermore, an initial JNDI context should be set with the
                  &lt;code&gt;SyncFactory&lt;/code&gt; using the &lt;code&gt;setJNDIContext&lt;/code&gt; method.
                  The &lt;code&gt;SyncFactory&lt;/code&gt; leverages this context to search for
                  available &lt;code&gt;SyncProvider&lt;/code&gt; objects bound to the JNDI
                  context and its child nodes.                
                <param>
                    providerID A <code>String</code> object with the unique ID of the
                      synchronization provider being registered                    
                </param>
                <throws>
                    SyncFactoryException if an attempt is made to supply an empty
                      or null provider name                    
                </throws>
                <see>
                    #setJNDIContext                    
                </see>
            </javadoc>
            <method name="registerProvider" type="void" line="251">
                <params>
                    <param name="providerID" type="String"/>
                </params>
                <declaration name="impl" type="ProviderImpl" line="252"/>
            </method>
            <javadoc line="257">
                Returns the &lt;code&gt;SyncFactory&lt;/code&gt; singleton.                
                <return>
                    the <code>SyncFactory</code> instance                    
                </return>
            </javadoc>
            <method name="getSyncFactory" type="SyncFactory" line="261"/>
            <javadoc line="264">
                Removes the designated currently registered synchronization provider from the
                  Factory SPI register.                
                <param>
                    providerID The unique-id of the synchronization provider                    
                </param>
                <throws>
                    SyncFactoryException If an attempt is made to
                      unregister a SyncProvider implementation that was not registered.                    
                </throws>
            </javadoc>
            <method name="unregisterProvider" type="void" line="271">
                <params>
                    <param name="providerID" type="String"/>
                </params>
                <scope line="273"/>
            </method>
            <declaration name="colon" type="String" line="277"/>
            <declaration name="strFileSep" type="String" line="278"/>
            <method name="initMapIfNecessary" type="void" line="279"/>
            <declaration name="debug" type="boolean" line="326"/>
            <javadoc line="326">
                The internal debug switch.                
            </javadoc>
            <declaration name="providerImplIndex" type="int" line="330"/>
            <javadoc line="330">
                Internal registry count for the number of providers contained in the
                  registry.                
            </javadoc>
            <javadoc line="335">
                Internal handler for all standard property parsing. Parses standard
                  ROWSET properties and stores lazy references into the the internal registry.                
            </javadoc>
            <method name="parseProperties" type="void" line="339">
                <params>
                    <param name="p" type="Properties"/>
                </params>
                <declaration name="impl" type="ProviderImpl" line="340"/>
                <declaration name="key" type="String" line="341"/>
                <declaration name="propertyNames" type="String[]" line="342"/>
                <scope line="343">
                    <declaration name="str" type="String" line="344"/>
                    <declaration name="w" type="int" line="345"/>
                    <scope line="346">
                        <scope line="349"/>
                        <scope line="352"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="363">
                Used by the parseProperties methods to disassemble each property tuple.                
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="366">
                <params>
                    <param name="append" type="boolean"/>
                </params>
            </method>
            <javadoc line="369">
                Disassembles each property and its associated value. Also handles
                  overloaded property names that contain indexes.                
            </javadoc>
            <method name="getPropertyNames" type="String[]" line="373">
                <params>
                    <param name="append" type="boolean"/>
                    <param name="propertyIndex" type="String"/>
                </params>
                <declaration name="dot" type="String" line="374"/>
                <declaration name="propertyNames" type="String[]" line="375"/>
                <scope line="376">
                    <scope line="377"/>
                </scope>
                <scope line="382"/>
            </method>
            <javadoc line="386">
                Internal debug method that outputs the registry contents.                
            </javadoc>
            <method name="showImpl" type="void" line="389">
                <params>
                    <param name="impl" type="ProviderImpl"/>
                </params>
            </method>
            <javadoc line="396">
                Returns the &lt;code&gt;SyncProvider&lt;/code&gt; instance identified by &lt;i&gt;providerID&lt;/i&gt;.                
                <param>
                    providerID the unique identifier of the provider                    
                </param>
                <return>
                    a <code>SyncProvider</code> implementation                    
                </return>
                <throws>
                    SyncFactoryException If the SyncProvider cannot be found,
                      the providerID is {@code null}, or
                      some error was encountered when trying to invoke this provider.                    
                </throws>
            </javadoc>
            <method name="getInstance" type="SyncProvider" line="404">
                <params>
                    <param name="providerID" type="String"/>
                </params>
                <scope line="405"/>
                <declaration name="impl" type="ProviderImpl" line="410"/>
                <scope line="411"/>
                <declaration name="c" type="Class" line="414"/>
                <scope line="415">
                    <declaration name="cl" type="ClassLoader" line="416"/>
                    <scope line="418"/>
                    <scope line="421"/>
                </scope>
                <scope line="425"/>
                <scope line="428"/>
                <scope line="431"/>
            </method>
            <javadoc line="435">
                Returns an Enumeration of currently registered synchronization
                  providers.  A &lt;code&gt;RowSet&lt;/code&gt; implementation may use any provider in
                  the enumeration as its &lt;code&gt;SyncProvider&lt;/code&gt; object.
                  &lt;p&gt;
                  At a minimum, the reference synchronization provider allowing
                  RowSet content data to be stored using a JDBC driver should be
                  possible.                
                <return>
                    Enumeration  A enumeration of available synchronization
                      providers that are registered with this Factory                    
                </return>
            </javadoc>
            <method name="getRegisteredProviders" type="Enumeration<SyncProvider>" line="446"/>
            <javadoc line="450">
                Sets the logging object to be used by the &lt;code&gt;SyncProvider&lt;/code&gt;
                  implementation provided by the &lt;code&gt;SyncFactory&lt;/code&gt;. All
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementations can log their events to
                  this object and the application can retrieve a handle to this
                  object using the &lt;code&gt;getLogger&lt;/code&gt; method.
                  &lt;p&gt;
                  This method checks to see that there is an {@code SQLPermission}object  which grants the permission {@code setSyncFactory}before allowing the method to succeed.  If a{@code SecurityManager} exists and its{@code checkPermission} method denies calling {@code setLogger},
                  this method throws a{@code java.lang.SecurityException}.                
                <param>
                    logger A Logger object instance                    
                </param>
                <throws>
                    java.lang.SecurityException if a security manager exists and its{@code checkPermission} method denies calling {@code setLogger}                    
                </throws>
                <throws>
                    NullPointerException if the logger is null                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
            </javadoc>
            <method name="setLogger" type="void" line="464">
                <params>
                    <param name="logger" type="Logger"/>
                </params>
                <declaration name="sec" type="SecurityManager" line="465"/>
                <scope line="466"/>
                <scope line="469"/>
            </method>
            <javadoc line="474">
                Sets the logging object that is used by &lt;code&gt;SyncProvider&lt;/code&gt;
                  implementations provided by the &lt;code&gt;SyncFactory&lt;/code&gt; SPI. All
                  &lt;code&gt;SyncProvider&lt;/code&gt; implementations can log their events
                  to this object and the application can retrieve a handle to this
                  object using the &lt;code&gt;getLogger&lt;/code&gt; method.
                  &lt;p&gt;
                  This method checks to see that there is an {@code SQLPermission}object  which grants the permission {@code setSyncFactory}before allowing the method to succeed.  If a{@code SecurityManager} exists and its{@code checkPermission} method denies calling {@code setLogger},
                  this method throws a{@code java.lang.SecurityException}.                
                <param>
                    logger a Logger object instance                    
                </param>
                <param>
                    level a Level object instance indicating the degree of logging
                      required                    
                </param>
                <throws>
                    java.lang.SecurityException if a security manager exists and its{@code checkPermission} method denies calling {@code setLogger}                    
                </throws>
                <throws>
                    java.util.logging.LoggingPermission if a security manager exists and its{@code checkPermission} method denies calling {@code setLevel}                    
                </throws>
                <throws>
                    NullPointerException if the logger is null                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
                <see>
                    LoggingPermission                    
                </see>
            </javadoc>
            <method name="setLogger" type="void" line="492">
                <params>
                    <param name="logger" type="Logger"/>
                    <param name="level" type="Level"/>
                </params>
                <declaration name="sec" type="SecurityManager" line="493"/>
                <scope line="494"/>
                <scope line="497"/>
            </method>
            <javadoc line="503">
                Returns the logging object for applications to retrieve
                  synchronization events posted by SyncProvider implementations.                
                <throws>
                    SyncFactoryException if no logging object has been set.                    
                </throws>
            </javadoc>
            <method name="getLogger" type="Logger" line="508">
                <declaration name="result" type="Logger" line="509"/>
                <scope line="510"/>
            </method>
            <javadoc line="515">
                Sets the initial JNDI context from which SyncProvider implementations
                  can be retrieved from a JNDI namespace
                  &lt;p&gt;
                  This method checks to see that there is an {@code SQLPermission}object  which grants the permission {@code setSyncFactory}before allowing the method to succeed.  If a{@code SecurityManager} exists and its{@code checkPermission} method denies calling {@code setJNDIContext},
                  this method throws a{@code java.lang.SecurityException}.                
                <param>
                    ctx a valid JNDI context                    
                </param>
                <throws>
                    SyncFactoryException if the supplied JNDI context is null                    
                </throws>
                <throws>
                    java.lang.SecurityException if a security manager exists and its{@code checkPermission} method denies calling {@code setJNDIContext}                    
                </throws>
                <see>
                    SecurityManager#checkPermission                    
                </see>
            </javadoc>
            <method name="setJNDIContext" type="void" line="526">
                <params>
                    <param name="ctx" type="javax.naming.Context"/>
                </params>
                <declaration name="sec" type="SecurityManager" line="527"/>
                <scope line="528"/>
                <scope line="531"/>
            </method>
            <javadoc line="536">
                Controls JNDI context initialization.                
                <throws>
                    SyncFactoryException if an error occurs parsing the JNDI context                    
                </throws>
            </javadoc>
            <method name="initJNDIContext" type="void" line="540">
                <scope line="541">
                    <scope line="542"/>
                    <scope line="546"/>
                    <scope line="550"/>
                </scope>
            </method>
            <declaration name="lazyJNDICtxRefresh" type="boolean" line="556"/>
            <javadoc line="556">
                Internal switch indicating whether the JNDI namespace should be re-read.                
            </javadoc>
            <javadoc line="560">
                Parses the set JNDI Context and passes bindings to the enumerateBindings
                  method when complete.                
            </javadoc>
            <method name="parseJNDIContext" type="Properties" line="564">
                <declaration name="bindings" type="NamingEnumeration" line="565"/>
                <declaration name="properties" type="Properties" line="566"/>
            </method>
            <javadoc line="570">
                Scans each binding on JNDI context and determines if any binding is an
                  instance of SyncProvider, if so, add this to the registry and continue to
                  scan the current context using a re-entrant call to this method until all
                  bindings have been enumerated.                
            </javadoc>
            <method name="enumerateBindings" type="void" line="576">
                <params>
                    <param name="bindings" type="NamingEnumeration"/>
                    <param name="properties" type="Properties"/>
                </params>
                <declaration name="syncProviderObj" type="boolean" line="577"/>
                <scope line="578">
                    <declaration name="bd" type="Binding" line="579"/>
                    <declaration name="elementObj" type="Object" line="580"/>
                    <declaration name="element" type="String" line="581"/>
                    <scope line="582">
                        <scope line="586">
                            <scope line="587"/>
                        </scope>
                        <scope line="591">
                            <declaration name="sync" type="SyncProvider" line="592"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="598"/>
            </method>
            <class name="SyncFactoryHolder" line="603">
                <javadoc line="603">
                    Lazy initialization Holder class used by {@code getSyncFactory}                    
                </javadoc>
                <declaration name="factory" type="SyncFactory" line="607"/>
            </class>
        </class>
        <class name="ProviderImpl" line="610">
            <extends class="SyncProvider"/>
            <javadoc line="610">
                Internal class that defines the lazy reference construct for each registered
                  SyncProvider implementation.                
            </javadoc>
            <declaration name="className" type="String" line="615"/>
            <declaration name="vendorName" type="String" line="616"/>
            <declaration name="ver" type="String" line="617"/>
            <declaration name="index" type="int" line="618"/>
            <method name="setClassname" type="void" line="619">
                <params>
                    <param name="classname" type="String"/>
                </params>
            </method>
            <method name="getClassname" type="String" line="622"/>
            <method name="setVendor" type="void" line="625">
                <params>
                    <param name="vendor" type="String"/>
                </params>
            </method>
            <method name="getVendor" type="String" line="628"/>
            <method name="setVersion" type="void" line="631">
                <params>
                    <param name="providerVer" type="String"/>
                </params>
            </method>
            <method name="getVersion" type="String" line="634"/>
            <method name="setIndex" type="void" line="637">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="getIndex" type="int" line="640"/>
            <method name="getDataSourceLock" type="int" line="643">
                <declaration name="dsLock" type="int" line="644"/>
                <scope line="645"/>
                <scope line="648"/>
            </method>
            <method name="getProviderGrade" type="int" line="653">
                <declaration name="grade" type="int" line="654"/>
                <scope line="655"/>
                <scope line="658"/>
            </method>
            <method name="getProviderID" type="String" line="662"/>
            <method name="getRowSetReader" type="javax.sql.RowSetReader" line="665">
                <declaration name="rsReader" type="RowSetReader" line="666"/>
                <scope line="667"/>
                <scope line="670"/>
            </method>
            <method name="getRowSetWriter" type="javax.sql.RowSetWriter" line="674">
                <declaration name="rsWriter" type="RowSetWriter" line="675"/>
                <scope line="676"/>
                <scope line="679"/>
            </method>
            <method name="setDataSourceLock" type="void" line="683">
                <params>
                    <param name="param" type="int"/>
                </params>
                <scope line="684"/>
                <scope line="687"/>
            </method>
            <method name="supportsUpdatableView" type="int" line="691">
                <declaration name="view" type="int" line="692"/>
                <scope line="693"/>
                <scope line="696"/>
            </method>
        </class>
    </source>