<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset.serial">
        <import package="java.sql"/>
        <import package="java.io"/>
        <import package="java.util.Map"/>
        <import package="java.net.URL"/>
        <class name="SerialArray" line="34">
            <comment line="314">
                [if an error occurstype map used??]                
            </comment>
            <implements interface="Array"/>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="34">
                A serialized version of an &lt;code&gt;Array&lt;/code&gt;
                  object, which is the mapping in the Java programming language of an SQL
                  &lt;code&gt;ARRAY&lt;/code&gt; value.
                  &lt;P&gt;
                  The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating
                  a &lt;code&gt;SerialArray&lt;/code&gt; instance from an &lt;code&gt;Array&lt;/code&gt; object,
                  methods for getting the base type and the SQL name for the base type, and
                  methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.
                  &lt;P&gt;
                  Note: In order for this class to function correctly, a connection to the
                  data source
                  must be available in order for the SQL &lt;code&gt;Array&lt;/code&gt; object to be
                  materialized (have all of its elements brought to the client server)
                  if necessary. At this time, logical pointers to the data in the data source,
                  such as locators, are not currently supported.                
            </javadoc>
            <declaration name="elements" type="Object[]" line="53"/>
            <javadoc line="53">
                A serialized array in which each element is an &lt;code&gt;Object&lt;/code&gt;
                  in the Java programming language that represents an element
                  in the SQL &lt;code&gt;ARRAY&lt;/code&gt; value.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="baseType" type="int" line="61"/>
            <javadoc line="61">
                The SQL type of the elements in this &lt;code&gt;SerialArray&lt;/code&gt; object.  The
                  type is expressed as one of the constants from the class
                  &lt;code&gt;java.sql.Types&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="baseTypeName" type="String" line="69"/>
            <javadoc line="69">
                The type name used by the DBMS for the elements in the SQL &lt;code&gt;ARRAY&lt;/code&gt;
                  value that this &lt;code&gt;SerialArray&lt;/code&gt; object represents.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="len" type="int" line="76"/>
            <javadoc line="76">
                The number of elements in this &lt;code&gt;SerialArray&lt;/code&gt; object, which
                  is also the number of elements in the SQL &lt;code&gt;ARRAY&lt;/code&gt; value
                  that this &lt;code&gt;SerialArray&lt;/code&gt; object represents.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="84">
                Constructs a new &lt;code&gt;SerialArray&lt;/code&gt; object from the given
                  &lt;code&gt;Array&lt;/code&gt; object, using the given type map for the custom
                  mapping of each element when the elements are SQL UDTs.
                  &lt;P&gt;
                  This method does custom mapping if the array elements are a UDT
                  and the given type map has an entry for that UDT.
                  Custom mapping is recursive,
                  meaning that if, for instance, an element of an SQL structured type
                  is an SQL structured type that itself has an element that is an SQL
                  structured type, each structured type that has a custom mapping will be
                  mapped according to the given type map.
                  &lt;P&gt;
                  The new &lt;code&gt;SerialArray&lt;/code&gt;
                  object contains the same elements as the &lt;code&gt;Array&lt;/code&gt; object
                  from which it is built, except when the base type is the SQL type
                  &lt;code&gt;STRUCT&lt;/code&gt;, &lt;code&gt;ARRAY&lt;/code&gt;, &lt;code&gt;BLOB&lt;/code&gt;,
                  &lt;code&gt;CLOB&lt;/code&gt;, &lt;code&gt;DATALINK&lt;/code&gt; or &lt;code&gt;JAVA_OBJECT&lt;/code&gt;.
                  In this case, each element in the new
                  &lt;code&gt;SerialArray&lt;/code&gt; object is the appropriate serialized form,
                  that is, a &lt;code&gt;SerialStruct&lt;/code&gt;, &lt;code&gt;SerialArray&lt;/code&gt;,
                  &lt;code&gt;SerialBlob&lt;/code&gt;, &lt;code&gt;SerialClob&lt;/code&gt;,
                  &lt;code&gt;SerialDatalink&lt;/code&gt;, or &lt;code&gt;SerialJavaObject&lt;/code&gt; object.
                  &lt;P&gt;
                  Note: (1) The &lt;code&gt;Array&lt;/code&gt; object from which a &lt;code&gt;SerialArray&lt;/code&gt;
                  object is created must have materialized the SQL &lt;code&gt;ARRAY&lt;/code&gt; value&apos;s
                  data on the client before it is passed to the constructor.  Otherwise,
                  the new &lt;code&gt;SerialArray&lt;/code&gt; object will contain no data.
                  &lt;p&gt;
                  Note: (2) If the &lt;code&gt;Array&lt;/code&gt; contains &lt;code&gt;java.sql.Types.JAVA_OBJECT&lt;/code&gt;
                  types, the &lt;code&gt;SerialJavaObject&lt;/code&gt; constructor is called where checks
                  are made to ensure this object is serializable.
                  &lt;p&gt;
                  Note: (3) The &lt;code&gt;Array&lt;/code&gt; object supplied to this constructor cannot
                  return &lt;code&gt;null&lt;/code&gt; for any &lt;code&gt;Array.getArray()&lt;/code&gt; methods.
                  &lt;code&gt;SerialArray&lt;/code&gt; cannot serialize null array values.                
                <param>
                    array the <code>Array</code> object to be serialized                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object in which
                      each entry consists of 1) a <code>String</code> object
                      giving the fully qualified name of a UDT (an SQL structured type or
                      distinct type) and 2) the
                      <code>Class</code> object for the <code>SQLData</code> implementation
                      that defines how the UDT is to be mapped. The <i>map</i>
                      parameter does not have any effect for <code>Blob</code>,
                      <code>Clob</code>, <code>DATALINK</code>, or
                      <code>JAVA_OBJECT</code> types.                    
                </param>
                <throws>
                    SerialException if an error occurs serializing the
                      <code>Array</code> object                    
                </throws>
                <throws>
                    SQLException if a database access error occurs or if the
                      <i>array</i> or the <i>map</i> values are <code>null</code>                    
                </throws>
            </javadoc>
            <method name="SerialArray" type="constructor" line="139">
                <params>
                    <param name="array" type="Array"/>
                    <param name="map" type="Map<String,Class<?>>"/>
                </params>
                <scope line="141"/>
                <scope line="146"/>
                <scope line="158"/>
                <scope line="164"/>
                <scope line="170"/>
                <scope line="176"/>
                <scope line="182"/>
                <scope line="188"/>
            </method>
            <javadoc line="196">
                This method frees the &lt;code&gt;Array&lt;/code&gt; object and releases the resources that
                  it holds. The object is invalid once the &lt;code&gt;free&lt;/code&gt;
                  method is called.
                  &lt;p&gt;
                  After &lt;code&gt;free&lt;/code&gt; has been called, any attempt to invoke a
                  method other than &lt;code&gt;free&lt;/code&gt; will result in a &lt;code&gt;SQLException&lt;/code&gt;
                  being thrown.  If &lt;code&gt;free&lt;/code&gt; is called multiple times, the subsequent
                  calls to &lt;code&gt;free&lt;/code&gt; are treated as a no-op.
                  &lt;p&gt;                
                <throws>
                    SQLException if an error occurs releasing
                      the Array's resources                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="free" type="void" line="213"/>
            <javadoc line="217">
                Constructs a new &lt;code&gt;SerialArray&lt;/code&gt; object from the given
                  &lt;code&gt;Array&lt;/code&gt; object.
                  &lt;P&gt;
                  This constructor does not do custom mapping.  If the base type of the array
                  is an SQL structured type and custom mapping is desired, the constructor
                  &lt;code&gt;SerialArray(Array array, Map map)&lt;/code&gt; should be used.
                  &lt;P&gt;
                  The new &lt;code&gt;SerialArray&lt;/code&gt;
                  object contains the same elements as the &lt;code&gt;Array&lt;/code&gt; object
                  from which it is built, except when the base type is the SQL type
                  &lt;code&gt;BLOB&lt;/code&gt;,
                  &lt;code&gt;CLOB&lt;/code&gt;, &lt;code&gt;DATALINK&lt;/code&gt; or &lt;code&gt;JAVA_OBJECT&lt;/code&gt;.
                  In this case, each element in the new
                  &lt;code&gt;SerialArray&lt;/code&gt; object is the appropriate serialized form,
                  that is, a &lt;code&gt;SerialBlob&lt;/code&gt;, &lt;code&gt;SerialClob&lt;/code&gt;,
                  &lt;code&gt;SerialDatalink&lt;/code&gt;, or &lt;code&gt;SerialJavaObject&lt;/code&gt; object.
                  &lt;P&gt;
                  Note: (1) The &lt;code&gt;Array&lt;/code&gt; object from which a &lt;code&gt;SerialArray&lt;/code&gt;
                  object is created must have materialized the SQL &lt;code&gt;ARRAY&lt;/code&gt; value&apos;s
                  data on the client before it is passed to the constructor.  Otherwise,
                  the new &lt;code&gt;SerialArray&lt;/code&gt; object will contain no data.
                  &lt;p&gt;
                  Note: (2) The &lt;code&gt;Array&lt;/code&gt; object supplied to this constructor cannot
                  return &lt;code&gt;null&lt;/code&gt; for any &lt;code&gt;Array.getArray()&lt;/code&gt; methods.
                  &lt;code&gt;SerialArray&lt;/code&gt; cannot serialize &lt;code&gt;null&lt;/code&gt; array values.                
                <param>
                    array the <code>Array</code> object to be serialized                    
                </param>
                <throws>
                    SerialException if an error occurs serializing the
                      <code>Array</code> object                    
                </throws>
                <throws>
                    SQLException if a database access error occurs or the
                      <i>array</i> parameter is <code>null</code>.                    
                </throws>
            </javadoc>
            <method name="SerialArray" type="constructor" line="250">
                <params>
                    <param name="array" type="Array"/>
                </params>
                <comment line="261">
                    elements = (Object[])array.getArray();                    
                </comment>
                <scope line="251"/>
                <scope line="256"/>
                <scope line="269"/>
                <scope line="275"/>
                <scope line="281"/>
                <scope line="287"/>
            </method>
            <javadoc line="298">
                Returns a new array that is a copy of this &lt;code&gt;SerialArray&lt;/code&gt;
                  object.                
                <return>
                    a copy of this <code>SerialArray</code> object as an
                      <code>Object</code> in the Java programming language                    
                </return>
                <throws>
                    SerialException if an error occurs retrieving a copy of
                      this <code>SerialArray</code> object                    
                </throws>
            </javadoc>
            <method name="getArray" type="Object" line="307">
                <declaration name="dst" type="Object" line="308"/>
            </method>
            <javadoc line="314">
                Returns a new array that is a copy of this &lt;code&gt;SerialArray&lt;/code&gt;
                  object, using the given type map for the custom
                  mapping of each element when the elements are SQL UDTs.
                  &lt;P&gt;
                  This method does custom mapping if the array elements are a UDT
                  and the given type map has an entry for that UDT.
                  Custom mapping is recursive,
                  meaning that if, for instance, an element of an SQL structured type
                  is an SQL structured type that itself has an element that is an SQL
                  structured type, each structured type that has a custom mapping will be
                  mapped according to the given type map.                
                <param>
                    map a <code>java.util.Map</code> object in which
                      each entry consists of 1) a <code>String</code> object
                      giving the fully qualified name of a UDT and 2) the
                      <code>Class</code> object for the <code>SQLData</code> implementation
                      that defines how the UDT is to be mapped                    
                </param>
                <return>
                    a copy of this <code>SerialArray</code> object as an
                      <code>Object</code> in the Java programming language                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getArray" type="Object" line="336">
                <params>
                    <param name="map" type="Map<String,Class<?>>"/>
                </params>
                <declaration name="dst" type="Object" line="337"/>
            </method>
            <javadoc line="342">
                Returns a new array that is a copy of a slice
                  of this &lt;code&gt;SerialArray&lt;/code&gt; object, starting with the
                  element at the given index and containing the given number
                  of consecutive elements.                
                <param>
                    index the index into this <code>SerialArray</code> object
                      of the first element to be copied;
                      the index of the first element is <code>0</code>                    
                </param>
                <param>
                    count the number of consecutive elements to be copied, starting
                      at the given index                    
                </param>
                <return>
                    a copy of the designated elements in this <code>SerialArray</code>
                      object as an <code>Object</code> in the Java programming language                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getArray" type="Object" line="357">
                <params>
                    <param name="index" type="long"/>
                    <param name="count" type="int"/>
                </params>
                <declaration name="dst" type="Object" line="358"/>
            </method>
            <javadoc line="363">
                Returns a new array that is a copy of a slice
                  of this &lt;code&gt;SerialArray&lt;/code&gt; object, starting with the
                  element at the given index and containing the given number
                  of consecutive elements.
                  &lt;P&gt;
                  This method does custom mapping if the array elements are a UDT
                  and the given type map has an entry for that UDT.
                  Custom mapping is recursive,
                  meaning that if, for instance, an element of an SQL structured type
                  is an SQL structured type that itself has an element that is an SQL
                  structured type, each structured type that has a custom mapping will be
                  mapped according to the given type map.                
                <param>
                    index the index into this <code>SerialArray</code> object
                      of the first element to be copied; the index of the
                      first element in the array is <code>0</code>                    
                </param>
                <param>
                    count the number of consecutive elements to be copied, starting
                      at the given index                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object in which
                      each entry consists of 1) a <code>String</code> object
                      giving the fully qualified name of a UDT and 2) the
                      <code>Class</code> object for the <code>SQLData</code> implementation
                      that defines how the UDT is to be mapped                    
                </param>
                <return>
                    a copy of the designated elements in this <code>SerialArray</code>
                      object as an <code>Object</code> in the Java programming language                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getArray" type="Object" line="393">
                <params>
                    <param name="index" type="long"/>
                    <param name="count" type="int"/>
                    <param name="map" type="Map<String,Class<?>>"/>
                </params>
                <declaration name="dst" type="Object" line="394"/>
            </method>
            <javadoc line="399">
                Retrieves the SQL type of the elements in this &lt;code&gt;SerialArray&lt;/code&gt;
                  object.  The &lt;code&gt;int&lt;/code&gt; returned is one of the constants in the class
                  &lt;code&gt;java.sql.Types&lt;/code&gt;.                
                <return>
                    one of the constants in <code>java.sql.Types</code>, indicating
                      the SQL type of the elements in this <code>SerialArray</code> object                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getBaseType" type="int" line="408"/>
            <javadoc line="412">
                Retrieves the DBMS-specific type name for the elements in this
                  &lt;code&gt;SerialArray&lt;/code&gt; object.                
                <return>
                    the SQL type name used by the DBMS for the base type of this
                      <code>SerialArray</code> object                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
            </javadoc>
            <method name="getBaseTypeName" type="String" line="420"/>
            <javadoc line="424">
                Retrieves a &lt;code&gt;ResultSet&lt;/code&gt; object holding the elements of
                  the subarray that starts at
                  index &lt;i&gt;index&lt;/i&gt; and contains up to &lt;i&gt;count&lt;/i&gt; successive elements.
                  This method uses the connection&apos;s type map to map the elements of
                  the array if the map contains
                  an entry for the base type. Otherwise, the standard mapping is used.                
                <param>
                    index the index into this <code>SerialArray</code> object
                      of the first element to be copied; the index of the
                      first element in the array is <code>0</code>                    
                </param>
                <param>
                    count the number of consecutive elements to be copied, starting
                      at the given index                    
                </param>
                <return>
                    a <code>ResultSet</code> object containing the designated
                      elements in this <code>SerialArray</code> object, with a
                      separate row for each element                    
                </return>
                <throws>
                    SerialException, which in turn throws an
                      <code>UnsupportedOperationException</code>, if this method is called                    
                </throws>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="443">
                <params>
                    <param name="index" type="long"/>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="447">
                Retrieves a &lt;code&gt;ResultSet&lt;/code&gt; object that contains all of
                  the elements of the SQL &lt;code&gt;ARRAY&lt;/code&gt;
                  value represented by this &lt;code&gt;SerialArray&lt;/code&gt; object. This method uses
                  the specified map for type map customizations unless the base type of the
                  array does not match a user-defined type (UDT) in &lt;i&gt;map&lt;/i&gt;, in
                  which case it uses the
                  standard mapping. This version of the method &lt;code&gt;getResultSet&lt;/code&gt;
                  uses either the given type map or the standard mapping; it never uses the
                  type map associated with the connection.                
                <param>
                    map a <code>java.util.Map</code> object in which
                      each entry consists of 1) a <code>String</code> object
                      giving the fully qualified name of a UDT and 2) the
                      <code>Class</code> object for the <code>SQLData</code> implementation
                      that defines how the UDT is to be mapped                    
                </param>
                <return>
                    a <code>ResultSet</code> object containing all of the
                      elements in this <code>SerialArray</code> object, with a
                      separate row for each element                    
                </return>
                <throws>
                    SerialException, which in turn throws an
                      <code>UnsupportedOperationException</code>, if this method is called                    
                </throws>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="472">
                <params>
                    <param name="map" type="Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="476">
                Retrieves a &lt;code&gt;ResultSet&lt;/code&gt; object that contains all of
                  the elements in the &lt;code&gt;ARRAY&lt;/code&gt; value that this
                  &lt;code&gt;SerialArray&lt;/code&gt; object represents.
                  If appropriate, the elements of the array are mapped using the connection&apos;s
                  type map; otherwise, the standard mapping is used.                
                <return>
                    a <code>ResultSet</code> object containing all of the
                      elements in this <code>SerialArray</code> object, with a
                      separate row for each element                    
                </return>
                <throws>
                    SerialException if called, which in turn throws an
                      <code>UnsupportedOperationException</code>, if this method is called                    
                </throws>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="489"/>
            <javadoc line="494">
                Retrieves a result set holding the elements of the subarray that starts at
                  Retrieves a &lt;code&gt;ResultSet&lt;/code&gt; object that contains a subarray of the
                  elements in this &lt;code&gt;SerialArray&lt;/code&gt; object, starting at
                  index &lt;i&gt;index&lt;/i&gt; and containing up to &lt;i&gt;count&lt;/i&gt; successive
                  elements. This method uses
                  the specified map for type map customizations unless the base type of the
                  array does not match a user-defined type (UDT) in &lt;i&gt;map&lt;/i&gt;, in
                  which case it uses the
                  standard mapping. This version of the method &lt;code&gt;getResultSet&lt;/code&gt; uses
                  either the given type map or the standard mapping; it never uses the type
                  map associated with the connection.                
                <param>
                    index the index into this <code>SerialArray</code> object
                      of the first element to be copied; the index of the
                      first element in the array is <code>0</code>                    
                </param>
                <param>
                    count the number of consecutive elements to be copied, starting
                      at the given index                    
                </param>
                <param>
                    map a <code>java.util.Map</code> object in which
                      each entry consists of 1) a <code>String</code> object
                      giving the fully qualified name of a UDT and 2) the
                      <code>Class</code> object for the <code>SQLData</code> implementation
                      that defines how the UDT is to be mapped                    
                </param>
                <return>
                    a <code>ResultSet</code> object containing the designated
                      elements in this <code>SerialArray</code> object, with a
                      separate row for each element                    
                </return>
                <throws>
                    SerialException if called, which in turn throws an
                      <code>UnsupportedOperationException</code>                    
                </throws>
            </javadoc>
            <method name="getResultSet" type="ResultSet" line="526">
                <params>
                    <param name="index" type="long"/>
                    <param name="count" type="int"/>
                    <param name="map" type="Map<String,Class<?>>"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="530"/>
            <javadoc line="530">
                The identifier that assists in the serialization of this &lt;code&gt;SerialArray&lt;/code&gt;
                  object.                
            </javadoc>
        </class>
    </source>