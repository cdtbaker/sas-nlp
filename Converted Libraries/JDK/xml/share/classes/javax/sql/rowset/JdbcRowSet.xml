<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="javax.naming"/>
        <import package="java.io"/>
        <import package="java.math"/>
        <import package="java.io"/>
        <interface name="JdbcRowSet">
            <implements interface="RowSet"/>
            <implements interface="Joinable"/>
            <javadoc line="8">
                The standard interface that all standard implementations of
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; must implement.
                  &lt;h3&gt;1.0 Overview&lt;/h3&gt;
                  A wrapper around a &lt;code&gt;ResultSet&lt;/code&gt; object that makes it possible
                  to use the result set as a JavaBeans&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  component.  Thus, a &lt;code&gt;JdbcRowSet&lt;/code&gt; object can be one of the Beans that
                  a tool makes available for composing an application.  Because
                  a &lt;code&gt;JdbcRowSet&lt;/code&gt; is a connected rowset, that is, it continually
                  maintains its connection to a database using a JDBC technology-enabled
                  driver, it also effectively makes the driver a JavaBeans component.
                  &lt;P&gt;
                  Because it is always connected to its database, an instance of
                  &lt;code&gt;JdbcRowSet&lt;/code&gt;
                  can simply take calls invoked on it and in turn call them on its
                  &lt;code&gt;ResultSet&lt;/code&gt; object. As a consequence, a result set can, for
                  example, be a component in a Swing application.
                  &lt;P&gt;
                  Another advantage of a &lt;code&gt;JdbcRowSet&lt;/code&gt; object is that it can be
                  used to make a &lt;code&gt;ResultSet&lt;/code&gt; object scrollable and updatable.  All
                  &lt;code&gt;RowSet&lt;/code&gt; objects are by default scrollable and updatable. If
                  the driver and database being used do not support scrolling and/or updating
                  of result sets, an application can populate a &lt;code&gt;JdbcRowSet&lt;/code&gt; object
                  with the data of a &lt;code&gt;ResultSet&lt;/code&gt; object and then operate on the
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; object as if it were the &lt;code&gt;ResultSet&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  &lt;h3&gt;2.0 Creating a &lt;code&gt;JdbcRowSet&lt;/code&gt; Object&lt;/h3&gt;
                  The reference implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface,
                  &lt;code&gt;JdbcRowSetImpl&lt;/code&gt;, provides an implementation of
                  the default constructor.  A new instance is initialized with
                  default values, which can be set with new values as needed. A
                  new instance is not really functional until its &lt;code&gt;execute&lt;/code&gt;
                  method is called. In general, this method does the following:
                  &lt;UL&gt;
                  &lt;LI&gt; establishes a connection with a database
                  &lt;LI&gt; creates a &lt;code&gt;PreparedStatement&lt;/code&gt; object and sets any of its
                  placeholder parameters
                  &lt;LI&gt; executes the statement to create a &lt;code&gt;ResultSet&lt;/code&gt; object
                  &lt;/UL&gt;
                  If the &lt;code&gt;execute&lt;/code&gt; method is successful, it will set the
                  appropriate private &lt;code&gt;JdbcRowSet&lt;/code&gt; fields with the following:
                  &lt;UL&gt;
                  &lt;LI&gt; a &lt;code&gt;Connection&lt;/code&gt; object -- the connection between the rowset
                  and the database
                  &lt;LI&gt; a &lt;code&gt;PreparedStatement&lt;/code&gt; object -- the query that produces
                  the result set
                  &lt;LI&gt; a &lt;code&gt;ResultSet&lt;/code&gt; object -- the result set that the rowset&apos;s
                  command produced and that is being made, in effect, a JavaBeans
                  component
                  &lt;/UL&gt;
                  If these fields have not been set, meaning that the &lt;code&gt;execute&lt;/code&gt;
                  method has not executed successfully, no methods other than
                  &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;close&lt;/code&gt; may be called on the
                  rowset.  All other public methods will throw an exception.
                  &lt;P&gt;
                  Before calling the &lt;code&gt;execute&lt;/code&gt; method, however, the command
                  and properties needed for establishing a connection must be set.
                  The following code fragment creates a &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; object,
                  sets the command and connection properties, sets the placeholder parameter,
                  and then invokes the method &lt;code&gt;execute&lt;/code&gt;.
                  &lt;PRE&gt;
                  JdbcRowSetImpl jrs = new JdbcRowSetImpl();
                  jrs.setCommand(&quot;SELECT  FROM TITLES WHERE TYPE = ?&quot;);
                  jrs.setURL(&quot;jdbc:myDriver:myAttribute&quot;);
                  jrs.setUsername(&quot;cervantes&quot;);
                  jrs.setPassword(&quot;sancho&quot;);
                  jrs.setString(1, &quot;BIOGRAPHY&quot;);
                  jrs.execute();
                  &lt;/PRE&gt;
                  The variable &lt;code&gt;jrs&lt;/code&gt; now represents an instance of
                  &lt;code&gt;JdbcRowSetImpl&lt;/code&gt; that is a thin wrapper around the
                  &lt;code&gt;ResultSet&lt;/code&gt; object containing all the rows in the
                  table &lt;code&gt;TITLES&lt;/code&gt; where the type of book is biography.
                  At this point, operations called on &lt;code&gt;jrs&lt;/code&gt; will
                  affect the rows in the result set, which is effectively a JavaBeans
                  component.
                  &lt;P&gt;
                  The implementation of the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;execute&lt;/code&gt; in the
                  &lt;code&gt;JdbcRowSet&lt;/code&gt; reference implementation differs from that in the
                  &lt;code&gt;CachedRowSet&lt;/code&gt;&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  reference implementation to account for the different
                  requirements of connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects.
                  &lt;p&gt;                
                <author>
                    Jonathan Bruce                    
                </author>
            </javadoc>
            <method name="getShowDeleted" type="boolean" line="95"/>
            <javadoc line="95">
                Retrieves a &lt;code&gt;boolean&lt;/code&gt; indicating whether rows marked
                  for deletion appear in the set of current rows. If &lt;code&gt;true&lt;/code&gt; is
                  returned, deleted rows are visible with the current rows. If
                  &lt;code&gt;false&lt;/code&gt; is returned, rows are not visible with the set of
                  current rows. The default value is &lt;code&gt;false&lt;/code&gt;.
                  &lt;P&gt;
                  Standard rowset implementations may choose to restrict this behavior
                  for security considerations or for certain deployment
                  scenarios. The visibility of deleted rows is implementation-defined
                  and does not represent standard behavior.
                  &lt;P&gt;
                  Note: Allowing deleted rows to remain visible complicates the behavior
                  of some standard JDBC &lt;code&gt;RowSet&lt;/code&gt; implementations methods.
                  However, most rowset users can simply ignore this extra detail because
                  only very specialized applications will likely want to take advantage of
                  this feature.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if deleted rows are visible;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <exception>
                    SQLException if a rowset implementation is unable to
                      to determine whether rows marked for deletion remain visible                    
                </exception>
                <see>
                    #setShowDeleted                    
                </see>
            </javadoc>
            <method name="setShowDeleted" type="void" line="119"/>
            <javadoc line="119">
                Sets the property &lt;code&gt;showDeleted&lt;/code&gt; to the given
                  &lt;code&gt;boolean&lt;/code&gt; value. This property determines whether
                  rows marked for deletion continue to appear in the set of current rows.
                  If the value is set to &lt;code&gt;true&lt;/code&gt;, deleted rows are immediately
                  visible with the set of current rows. If the value is set to
                  &lt;code&gt;false&lt;/code&gt;, the deleted rows are set as invisible with the
                  current set of rows.
                  &lt;P&gt;
                  Standard rowset implementations may choose to restrict this behavior
                  for security considerations or for certain deployment
                  scenarios. This is left as implementation-defined and does not
                  represent standard behavior.                
                <param>
                    b &lt;code&gt;true&lt;/code&gt; if deleted rows should be shown;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </param>
                <exception>
                    SQLException if a rowset implementation is unable to
                      to reset whether deleted rows should be visible                    
                </exception>
                <see>
                    #getShowDeleted                    
                </see>
            </javadoc>
            <method name="getRowSetWarnings" type="RowSetWarning" line="139"/>
            <javadoc line="139">
                Retrieves the first warning reported by calls on this &lt;code&gt;JdbcRowSet&lt;/code&gt;
                  object.
                  If a second warning was reported on this &lt;code&gt;JdbcRowSet&lt;/code&gt; object,
                  it will be chained to the first warning and can be retrieved by
                  calling the method &lt;code&gt;RowSetWarning.getNextWarning&lt;/code&gt; on the
                  first warning. Subsequent warnings on this &lt;code&gt;JdbcRowSet&lt;/code&gt;
                  object will be chained to the &lt;code&gt;RowSetWarning&lt;/code&gt; objects
                  returned by the method &lt;code&gt;RowSetWarning.getNextWarning&lt;/code&gt;.
                  The warning chain is automatically cleared each time a new row is read.
                  This method may not be called on a &lt;code&gt;RowSet&lt;/code&gt; object
                  that has been closed;
                  doing so will cause an &lt;code&gt;SQLException&lt;/code&gt; to be thrown.
                  &lt;P&gt;
                  Because it is always connected to its data source, a &lt;code&gt;JdbcRowSet&lt;/code&gt;
                  object can rely on the presence of active
                  &lt;code&gt;Statement&lt;/code&gt;, &lt;code&gt;Connection&lt;/code&gt;, and &lt;code&gt;ResultSet&lt;/code&gt;
                  instances. This means that  applications can obtain additional
                  &lt;code&gt;SQLWarning&lt;/code&gt;
                  notifications by calling the &lt;code&gt;getNextWarning&lt;/code&gt; methods that
                  they provide.
                  Disconnected &lt;code&gt;Rowset&lt;/code&gt; objects, such as a
                  &lt;code&gt;CachedRowSet&lt;/code&gt; object, do not have access to
                  these &lt;code&gt;getNextWarning&lt;/code&gt; methods.                
                <return>
                    the first &lt;code&gt;RowSetWarning&lt;/code&gt;
                      object reported on this &lt;code&gt;JdbcRowSet&lt;/code&gt; object
                      or &lt;code&gt;null&lt;/code&gt; if there are none                    
                </return>
                <throws>
                    SQLException if this method is called on a closed
                      &lt;code&gt;JdbcRowSet&lt;/code&gt; object                    
                </throws>
                <see>
                    RowSetWarning                    
                </see>
            </javadoc>
            <method name="commit" type="void" line="171"/>
            <javadoc line="171">
                Each &lt;code&gt;JdbcRowSet&lt;/code&gt; contains a &lt;code&gt;Connection&lt;/code&gt; object from
                  the &lt;code&gt;ResultSet&lt;/code&gt; or JDBC properties passed to it&apos;s constructors.
                  This method wraps the &lt;code&gt;Connection&lt;/code&gt; commit method to allow flexible
                  auto commit or non auto commit transactional control support.
                  &lt;p&gt;
                  Makes all changes made since the previous commit/rollback permanent
                  and releases any database locks currently held by this Connection
                  object. This method should be used only when auto-commit mode has
                  been disabled.                
                <throws>
                    SQLException if a database access error occurs or this
                      Connection object within this &lt;code&gt;JdbcRowSet&lt;/code&gt; is in auto-commit mode                    
                </throws>
                <see>
                    java.sql.Connection#setAutoCommit                    
                </see>
            </javadoc>
            <method name="getAutoCommit" type="boolean" line="186"/>
            <javadoc line="186">
                Each &lt;code&gt;JdbcRowSet&lt;/code&gt; contains a &lt;code&gt;Connection&lt;/code&gt; object from
                  the original &lt;code&gt;ResultSet&lt;/code&gt; or JDBC properties passed to it. This
                  method wraps the &lt;code&gt;Connection&lt;/code&gt;&apos;s &lt;code&gt;getAutoCommit&lt;/code&gt; method
                  to allow an application to determine the &lt;code&gt;JdbcRowSet&lt;/code&gt; transaction
                  behavior.
                  &lt;p&gt;
                  Sets this connection&apos;s auto-commit mode to the given state. If a
                  connection is in auto-commit mode, then all its SQL statements will
                  be executed and committed as individual transactions. Otherwise, its
                  SQL statements are grouped into transactions that are terminated by a
                  call to either the method commit or the method rollback. By default,
                  new connections are in auto-commit mode.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <see>
                    java.sql.Connection#getAutoCommit()                    
                </see>
            </javadoc>
            <method name="setAutoCommit" type="void" line="203"/>
            <javadoc line="203">
                Each &lt;code&gt;JdbcRowSet&lt;/code&gt; contains a &lt;code&gt;Connection&lt;/code&gt; object from
                  the original &lt;code&gt;ResultSet&lt;/code&gt; or JDBC properties passed to it. This
                  method wraps the &lt;code&gt;Connection&lt;/code&gt;&apos;s &lt;code&gt;getAutoCommit&lt;/code&gt; method
                  to allow an application to set the &lt;code&gt;JdbcRowSet&lt;/code&gt; transaction behavior.
                  &lt;p&gt;
                  Sets the current auto-commit mode for this &lt;code&gt;Connection&lt;/code&gt; object.                
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <see>
                    java.sql.Connection#setAutoCommit(boolean)                    
                </see>
            </javadoc>
            <method name="rollback" type="void" line="214"/>
            <javadoc line="214">
                Each &lt;code&gt;JdbcRowSet&lt;/code&gt; contains a &lt;code&gt;Connection&lt;/code&gt; object from
                  the original &lt;code&gt;ResultSet&lt;/code&gt; or JDBC properties passed to it.
                  Undoes all changes made in the current transaction and releases any
                  database locks currently held by this &lt;code&gt;Connection&lt;/code&gt; object. This method
                  should be used only when auto-commit mode has been disabled.                
                <throws>
                    SQLException if a database access error occurs or this &lt;code&gt;Connection&lt;/code&gt;
                      object within this &lt;code&gt;JdbcRowSet&lt;/code&gt; is in auto-commit mode.                    
                </throws>
                <see>
                    #rollback(Savepoint)                    
                </see>
            </javadoc>
            <method name="rollback" type="void" line="225"/>
            <javadoc line="225">
                Each &lt;code&gt;JdbcRowSet&lt;/code&gt; contains a &lt;code&gt;Connection&lt;/code&gt; object from
                  the original &lt;code&gt;ResultSet&lt;/code&gt; or JDBC properties passed to it.
                  Undoes all changes made in the current transaction to the last set savepoint
                  and releases any database locks currently held by this &lt;code&gt;Connection&lt;/code&gt;
                  object. This method should be used only when auto-commit mode has been disabled.                
                <throws>
                    SQLException if a database access error occurs or this &lt;code&gt;Connection&lt;/code&gt;
                      object within this &lt;code&gt;JdbcRowSet&lt;/code&gt; is in auto-commit mode.                    
                </throws>
                <see>
                    #rollback                    
                </see>
            </javadoc>
        </interface>
    </source>