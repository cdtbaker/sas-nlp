<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset">
        <import package="java.sql"/>
        <import package="javax.sql"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.math"/>
        <import package="java.io.Serializable"/>
        <import package="javax.sql.rowset.serial"/>
        <class name="BaseRowSet" line="37">
            <comment line="417">
                default is false                
            </comment>
            <comment line="427">
                default is no timeout                
            </comment>
            <comment line="433">
                default is no limit                
            </comment>
            <comment line="439">
                default is no limit                
            </comment>
            <comment line="492">
                default fetch direction                
            </comment>
            <comment line="501">
                default fetchSize                
            </comment>
            <comment line="523">
                could be transient?                
            </comment>
            <comment line="549">
                --------------------------------------------------------------------
                 Events
                --------------------------------------------------------------------                
            </comment>
            <comment line="1484">
                -----------------------------------------------------------------------
                 Parameters
                -----------------------------------------------------------------------                
            </comment>
            <comment line="1505">
                ---------------------------------------------------------------------
                 setter methods for setting the parameters in a &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                ---------------------------------------------------------------------                
            </comment>
            <comment line="3194">
                end getParams                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="37">
                An abstract class providing a &lt;code&gt;RowSet&lt;/code&gt; object with its basic functionality.
                  The basic functions include having properties and sending event notifications,
                  which all JavaBeans&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; components must implement.
                  &lt;P&gt;
                  &lt;h3&gt;1.0 Overview&lt;/h3&gt;
                  The &lt;code&gt;BaseRowSet&lt;/code&gt; class provides the core functionality
                  for all &lt;code&gt;RowSet&lt;/code&gt; implementations,
                  and all standard implementations &lt;b&gt;may&lt;/b&gt; use this class in combination with
                  one or more &lt;code&gt;RowSet&lt;/code&gt; interfaces in order to provide a standard
                  vendor-specific implementation.  To clarify, all implementations must implement
                  at least one of the &lt;code&gt;RowSet&lt;/code&gt; interfaces (&lt;code&gt;JdbcRowSet&lt;/code&gt;,
                  &lt;code&gt;CachedRowSet&lt;/code&gt;, &lt;code&gt;JoinRowSet&lt;/code&gt;, &lt;code&gt;FilteredRowSet&lt;/code&gt;,
                  or &lt;code&gt;WebRowSet&lt;/code&gt;). This means that any implementation that extends
                  the &lt;code&gt;BaseRowSet&lt;/code&gt; class must also implement one of the &lt;code&gt;RowSet&lt;/code&gt;
                  interfaces.
                  &lt;p&gt;
                  The &lt;code&gt;BaseRowSet&lt;/code&gt; class provides the following:
                  &lt;p&gt;
                  &lt;UL&gt;
                  &lt;LI&gt;&lt;b&gt;Properties&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Fields for storing current properties
                  &lt;li&gt;Methods for getting and setting properties
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;LI&gt;&lt;b&gt;Event notification&lt;/b&gt;
                  &lt;P&gt;
                  &lt;LI&gt;&lt;b&gt;A complete set of setter methods&lt;/b&gt; for setting the parameters in a
                  &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  &lt;p&gt;
                  &lt;LI&gt; &lt;b&gt;Streams&lt;/b&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Fields for storing stream instances
                  &lt;li&gt;Constants for indicating the type of a stream
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;/UL&gt;
                  &lt;h3&gt;2.0 Setting Properties&lt;/h3&gt;
                  All rowsets maintain a set of properties, which will usually be set using
                  a tool.  The number and kinds of properties a rowset has will vary,
                  depending on what the &lt;code&gt;RowSet&lt;/code&gt; implementation does and how it gets
                  its data.  For example,
                  rowsets that get their data from a &lt;code&gt;ResultSet&lt;/code&gt; object need to
                  set the properties that are required for making a database connection.
                  If a &lt;code&gt;RowSet&lt;/code&gt; object uses the &lt;code&gt;DriverManager&lt;/code&gt; facility to make a
                  connection, it needs to set a property for the JDBC URL that identifies the
                  appropriate driver, and it needs to set the properties that give the
                  user name and password.
                  If, on the other hand, the rowset uses a &lt;code&gt;DataSource&lt;/code&gt; object
                  to make the connection, which is the preferred method, it does not need to
                  set the property for the JDBC URL.  Instead, it needs to set the property
                  for the logical name of the data source along with the properties for
                  the user name and password.
                  &lt;P&gt;
                  NOTE:  In order to use a &lt;code&gt;DataSource&lt;/code&gt; object for making a
                  connection, the &lt;code&gt;DataSource&lt;/code&gt; object must have been registered
                  with a naming service that uses the Java Naming and Directory
                  Interface&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt; (JNDI) API.  This registration
                  is usually done by a person acting in the capacity of a system administrator.
                  &lt;P&gt;
                  &lt;h3&gt;3.0 Setting the Command and Its Parameters&lt;/h3&gt;
                  When a rowset gets its data from a relational database, it executes a command (a query)
                  that produces a &lt;code&gt;ResultSet&lt;/code&gt; object.  This query is the command that is set
                  for the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command property.  The rowset populates itself with data by reading the
                  data from the &lt;code&gt;ResultSet&lt;/code&gt; object into itself. If the query
                  contains placeholders for values to be set, the &lt;code&gt;BaseRowSet&lt;/code&gt; setter methods
                  are used to set these values. All setter methods allow these values to be set
                  to &lt;code&gt;null&lt;/code&gt; if required.
                  &lt;P&gt;
                  The following code fragment illustrates how the
                  &lt;code&gt;CachedRowSet&lt;/code&gt;&lt;sup&gt;&lt;font size=-2&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  object &lt;code&gt;crs&lt;/code&gt; might have its command property set.  Note that if a
                  tool is used to set properties, this is the code that the tool would use.
                  &lt;PRE&gt;
                  crs.setCommand(&quot;SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS&quot; +
                  &quot;WHERE CREDIT_LIMIT &gt; ? AND REGION = ?&quot;);
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  In this example, the values for &lt;code&gt;CREDIT_LIMIT&lt;/code&gt; and
                  &lt;code&gt;REGION&lt;/code&gt; are placeholder parameters, which are indicated with a
                  question mark (?).  The first question mark is placeholder parameter number
                  &lt;code&gt;1&lt;/code&gt;, the second question mark is placeholder parameter number
                  &lt;code&gt;2&lt;/code&gt;, and so on.  Any placeholder parameters must be set with
                  values before the query can be executed. To set these
                  placeholder parameters, the &lt;code&gt;BaseRowSet&lt;/code&gt; class provides a set of setter
                  methods, similar to those provided by the &lt;code&gt;PreparedStatement&lt;/code&gt;
                  interface, for setting values of each data type.  A &lt;code&gt;RowSet&lt;/code&gt; object stores the
                  parameter values internally, and its &lt;code&gt;execute&lt;/code&gt; method uses them internally
                  to set values for the placeholder parameters
                  before it sends the command to the DBMS to be executed.
                  &lt;P&gt;
                  The following code fragment demonstrates
                  setting the two parameters in the query from the previous example.
                  &lt;PRE&gt;
                  crs.setInt(1, 5000);
                  crs.setString(2, &quot;West&quot;);
                  &lt;/PRE&gt;
                  If the &lt;code&gt;execute&lt;/code&gt; method is called at this point, the query
                  sent to the DBMS will be:
                  &lt;PRE&gt;
                  &quot;SELECT FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMERS&quot; +
                  &quot;WHERE CREDIT_LIMIT &gt; 5000 AND REGION = &apos;West&apos;&quot;
                  &lt;/PRE&gt;
                  NOTE: Setting &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt; and
                  &lt;code&gt;Ref&lt;/code&gt; objects as a command parameter, stores these values as
                  &lt;code&gt;SerialArray&lt;/code&gt;, &lt;code&gt;SerialClob&lt;/code&gt;, &lt;code&gt;SerialBlob&lt;/code&gt;
                  and &lt;code&gt;SerialRef&lt;/code&gt; objects respectively.
                  &lt;h3&gt;4.0 Handling of Parameters Behind the Scenes&lt;/h3&gt;
                  NOTE: The &lt;code&gt;BaseRowSet&lt;/code&gt; class provides two kinds of setter methods,
                  those that set properties and those that set placeholder parameters. The setter
                  methods discussed in this section are those that set placeholder parameters.
                  &lt;P&gt;
                  The placeholder parameters set with the &lt;code&gt;BaseRowSet&lt;/code&gt; setter methods
                  are stored as objects in an internal &lt;code&gt;Hashtable&lt;/code&gt; object.
                  Primitives are stored as their &lt;code&gt;Object&lt;/code&gt; type. For example, &lt;code&gt;byte&lt;/code&gt;
                  is stored as &lt;code&gt;Byte&lt;/code&gt; object, and &lt;code&gt;int&lt;/code&gt; is stored as
                  an &lt;code&gt;Integer&lt;/code&gt; object.
                  When the method &lt;code&gt;execute&lt;/code&gt; is called, the values in the
                  &lt;code&gt;Hashtable&lt;/code&gt; object are substituted for the appropriate placeholder
                  parameters in the command.
                  &lt;P)&gt;
                  A call to the method &lt;code&gt;getParams&lt;/code&gt; returns the values stored in the
                  &lt;code&gt;Hashtable&lt;/code&gt; object as an array of &lt;code&gt;Object&lt;/code&gt; instances.
                  An element in this array may be a simple &lt;code&gt;Object&lt;/code&gt; instance or an
                  array (which is a type of &lt;code&gt;Object&lt;/code&gt;). The particular setter method used
                  determines whether an element in this array is an &lt;code&gt;Object&lt;/code&gt; or an array.
                  &lt;P&gt;
                  The majority of methods for setting placeholder parameters take two parameters,
                  with the first parameter
                  indicating which placeholder parameter is to be set, and the second parameter
                  giving the value to be set.  Methods such as &lt;code&gt;setInt&lt;/code&gt;,
                  &lt;code&gt;setString&lt;/code&gt;, &lt;code&gt;setBoolean&lt;/code&gt;, and &lt;code&gt;setLong&lt;/code&gt; fall into
                  this category.  After these methods have been called, a call to the method
                  &lt;code&gt;getParams&lt;/code&gt; will return an array with the values that have been set. Each
                  element in the array is an &lt;code&gt;Object&lt;/code&gt; instance representing the
                  values that have been set. The order of these values in the array is determined by the
                  &lt;code&gt;int&lt;/code&gt; (the first parameter) passed to the setter method. The values in the
                  array are the values (the second parameter) passed to the setter method.
                  In other words, the first element in the array is the value
                  to be set for the first placeholder parameter in the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s
                  command. The second element is the value to
                  be set for the second placeholder parameter, and so on.
                  &lt;P&gt;
                  Several setter methods send the driver and DBMS information beyond the value to be set.
                  When the method &lt;code&gt;getParams&lt;/code&gt; is called after one of these setter methods has
                  been used, the elements in the array will themselves be arrays to accommodate the
                  additional information. In this category, the method &lt;code&gt;setNull&lt;/code&gt; is a special case
                  because one version takes only
                  two parameters (&lt;code&gt;setNull(int parameterIndex, int SqlType)&lt;/code&gt;). Nevertheless,
                  it requires
                  an array to contain the information that will be passed to the driver and DBMS.  The first
                  element in this array is the value to be set, which is &lt;code&gt;null&lt;/code&gt;, and the
                  second element is the &lt;code&gt;int&lt;/code&gt; supplied for &lt;i&gt;sqlType&lt;/i&gt;, which
                  indicates the type of SQL value that is being set to &lt;code&gt;null&lt;/code&gt;. This information
                  is needed by some DBMSs and is therefore required in order to ensure that applications
                  are portable.
                  The other version is intended to be used when the value to be set to &lt;code&gt;null&lt;/code&gt;
                  is a user-defined type. It takes three parameters
                  (&lt;code&gt;setNull(int parameterIndex, int sqlType, String typeName)&lt;/code&gt;) and also
                  requires an array to contain the information to be passed to the driver and DBMS.
                  The first two elements in this array are the same as for the first version of
                  &lt;code&gt;setNull&lt;/code&gt;.  The third element, &lt;i&gt;typeName&lt;/i&gt;, gives the SQL name of
                  the user-defined type. As is true with the other setter methods, the number of the
                  placeholder parameter to be set is indicated by an element&apos;s position in the array
                  returned by &lt;code&gt;getParams&lt;/code&gt;.  So, for example, if the parameter
                  supplied to &lt;code&gt;setNull&lt;/code&gt; is &lt;code&gt;2&lt;/code&gt;, the second element in the array
                  returned by &lt;code&gt;getParams&lt;/code&gt; will be an array of two or three elements.
                  &lt;P&gt;
                  Some methods, such as &lt;code&gt;setObject&lt;/code&gt; and &lt;code&gt;setDate&lt;/code&gt; have versions
                  that take more than two parameters, with the extra parameters giving information
                  to the driver or the DBMS. For example, the methods &lt;code&gt;setDate&lt;/code&gt;,
                  &lt;code&gt;setTime&lt;/code&gt;, and &lt;code&gt;setTimestamp&lt;/code&gt; can take a &lt;code&gt;Calendar&lt;/code&gt;
                  object as their third parameter.  If the DBMS does not store time zone information,
                  the drivern uses the &lt;code&gt;Calendar&lt;/code&gt; object to construct the &lt;code&gt;Date&lt;/code&gt;,
                  &lt;code&gt;Time&lt;/code&gt;, or &lt;code&gt;Timestamp&lt;/code&gt; object being set. As is true with other
                  methods that provide additional information, the element in the array returned
                  by &lt;code&gt;getParams&lt;/code&gt; is an array instead of a simple &lt;code&gt;Object&lt;/code&gt; instance.
                  &lt;P&gt;
                  The methods &lt;code&gt;setAsciiStream&lt;/code&gt;, &lt;code&gt;setBinaryStream&lt;/code&gt;,
                  &lt;code&gt;setCharacterStream&lt;/code&gt;, and &lt;code&gt;setUnicodeStream&lt;/code&gt; (which is
                  deprecated, so applications should use &lt;code&gt;getCharacterStream&lt;/code&gt; instead)
                  take three parameters, so for them, the element in the array returned by
                  &lt;code&gt;getParams&lt;/code&gt; is also an array.  What is different about these setter
                  methods is that in addition to the information provided by parameters, the array contains
                  one of the &lt;code&gt;BaseRowSet&lt;/code&gt; constants indicating the type of stream being set.
                  &lt;p&gt;
                  NOTE: The method &lt;code&gt;getParams&lt;/code&gt; is called internally by
                  &lt;code&gt;RowSet&lt;/code&gt; implementations extending this class; it is not normally called by an
                  application programmer directly.
                  &lt;h3&gt;5.0 Event Notification&lt;/h3&gt;
                  The &lt;code&gt;BaseRowSet&lt;/code&gt; class provides the event notification
                  mechanism for rowsets.  It contains the field
                  &lt;code&gt;listeners&lt;/code&gt;, methods for adding and removing listeners, and
                  methods for notifying listeners of changes.
                  &lt;P&gt;
                  A listener is an object that has implemented the &lt;code&gt;RowSetListener&lt;/code&gt; interface.
                  If it has been added to a &lt;code&gt;RowSet&lt;/code&gt; object&apos;s list of listeners, it will be notified
                  when an event occurs on that &lt;code&gt;RowSet&lt;/code&gt; object.  Each listener&apos;s
                  implementation of the &lt;code&gt;RowSetListener&lt;/code&gt; methods defines what that object
                  will do when it is notified that an event has occurred.
                  &lt;P&gt;
                  There are three possible events for a &lt;code&gt;RowSet&lt;/code&gt; object:
                  &lt;OL&gt;
                  &lt;LI&gt;the cursor moves
                  &lt;LI&gt;an individual row is changed (updated, deleted, or inserted)
                  &lt;LI&gt;the contents of the entire &lt;code&gt;RowSet&lt;/code&gt; object  are changed
                  &lt;/OL&gt;
                  &lt;P&gt;
                  The &lt;code&gt;BaseRowSet&lt;/code&gt; method used for the notification indicates the
                  type of event that has occurred.  For example, the method
                  &lt;code&gt;notifyRowChanged&lt;/code&gt; indicates that a row has been updated,
                  deleted, or inserted.  Each of the notification methods creates a
                  &lt;code&gt;RowSetEvent&lt;/code&gt; object, which is supplied to the listener in order to
                  identify the &lt;code&gt;RowSet&lt;/code&gt; object on which the event occurred.
                  What the listener does with this information, which may be nothing, depends on how it was
                  implemented.
                  &lt;p&gt;
                  &lt;h3&gt;6.0 Default Behavior&lt;/h3&gt;
                  A default &lt;code&gt;BaseRowSet&lt;/code&gt; object is initialized with many starting values.
                  The following is true of a default &lt;code&gt;RowSet&lt;/code&gt; instance that extends
                  the &lt;code&gt;BaseRowSet&lt;/code&gt; class:
                  &lt;UL&gt;
                  &lt;LI&gt;Has a scrollable cursor and does not show changes
                  made by others.
                  &lt;LI&gt;Is updatable.
                  &lt;LI&gt;Does not show rows that have been deleted.
                  &lt;LI&gt;Has no time limit for how long a driver may take to
                  execute the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command.
                  &lt;LI&gt;Has no limit for the number of rows it may contain.
                  &lt;LI&gt;Has no limit for the number of bytes a column may contain. NOTE: This
                  limit applies only to columns that hold values of the
                  following types:  &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;,
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,
                  and &lt;code&gt;LONGVARCHAR&lt;/code&gt;.
                  &lt;LI&gt;Will not see uncommitted data (make &quot;dirty&quot; reads).
                  &lt;LI&gt;Has escape processing turned on.
                  &lt;LI&gt;Has its connection&apos;s type map set to &lt;code&gt;null&lt;/code&gt;.
                  &lt;LI&gt;Has an empty &lt;code&gt;Vector&lt;/code&gt; object for storing the values set
                  for the placeholder parameters in the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command.
                  &lt;/UL&gt;
                  &lt;p&gt;
                  If other values are desired, an application must set the property values
                  explicitly. For example, the following line of code sets the maximum number
                  of rows for the &lt;code&gt;CachedRowSet&lt;/code&gt; object &lt;i&gt;crs&lt;/i&gt; to 500.
                  &lt;PRE&gt;
                  crs.setMaxRows(500);
                  &lt;/PRE&gt;
                  Methods implemented in extensions of this &lt;code&gt;BaseRowSet&lt;/code&gt; class &lt;b&gt;must&lt;/b&gt; throw an
                  &lt;code&gt;SQLException&lt;/code&gt; object for any violation of the defined assertions.  Also, if the
                  extending class overrides and reimplements any &lt;code&gt;BaseRowSet&lt;/code&gt; method and encounters
                  connectivity or underlying data source issues, that method &lt;b&gt;may&lt;/b&gt; in addition throw an
                  &lt;code&gt;SQLException&lt;/code&gt; object for that reason.                
            </javadoc>
            <declaration name="UNICODE_STREAM_PARAM" type="int" line="299"/>
            <javadoc line="299">
                A constant indicating to a &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object
                  that a given parameter is a Unicode stream. This
                  &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object is provided as an extension of the
                  &lt;code&gt;SyncProvider&lt;/code&gt; abstract class defined in the
                  &lt;code&gt;SyncFactory&lt;/code&gt; static factory SPI mechanism.                
            </javadoc>
            <declaration name="BINARY_STREAM_PARAM" type="int" line="308"/>
            <javadoc line="308">
                A constant indicating to a &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object
                  that a given parameter is a binary stream. A
                  &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object is provided as an extension of the
                  &lt;code&gt;SyncProvider&lt;/code&gt; abstract class defined in the
                  &lt;code&gt;SyncFactory&lt;/code&gt; static factory SPI mechanism.                
            </javadoc>
            <declaration name="ASCII_STREAM_PARAM" type="int" line="317"/>
            <javadoc line="317">
                A constant indicating to a &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object
                  that a given parameter is an ASCII stream. A
                  &lt;code&gt;RowSetReaderImpl&lt;/code&gt; object is provided as an extension of the
                  &lt;code&gt;SyncProvider&lt;/code&gt; abstract class defined in the
                  &lt;code&gt;SyncFactory&lt;/code&gt; static factory SPI mechanism.                
            </javadoc>
            <declaration name="binaryStream" type="java.io.InputStream" line="326"/>
            <javadoc line="326">
                The &lt;code&gt;InputStream&lt;/code&gt; object that will be
                  returned by the method &lt;code&gt;getBinaryStream&lt;/code&gt;, which is
                  specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="unicodeStream" type="java.io.InputStream" line="334"/>
            <javadoc line="334">
                The &lt;code&gt;InputStream&lt;/code&gt; object that will be
                  returned by the method &lt;code&gt;getUnicodeStream&lt;/code&gt;,
                  which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="asciiStream" type="java.io.InputStream" line="342"/>
            <javadoc line="342">
                The &lt;code&gt;InputStream&lt;/code&gt; object that will be
                  returned by the method &lt;code&gt;getAsciiStream&lt;/code&gt;,
                  which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="charStream" type="java.io.Reader" line="350"/>
            <javadoc line="350">
                The &lt;code&gt;Reader&lt;/code&gt; object that will be
                  returned by the method &lt;code&gt;getCharacterStream&lt;/code&gt;,
                  which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="command" type="String" line="358"/>
            <javadoc line="358">
                The query that will be sent to the DBMS for execution when the
                  method &lt;code&gt;execute&lt;/code&gt; is called.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="URL" type="String" line="365"/>
            <javadoc line="365">
                The JDBC URL the reader, writer, or both supply to the method
                  &lt;code&gt;DriverManager.getConnection&lt;/code&gt; when the
                  &lt;code&gt;DriverManager&lt;/code&gt; is used to get a connection.
                  &lt;P&gt;
                  The JDBC URL identifies the driver to be used to make the conndection.
                  This URL can be found in the documentation supplied by the driver
                  vendor.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="dataSource" type="String" line="377"/>
            <javadoc line="377">
                The logical name of the data source that the reader/writer should use
                  in order to retrieve a &lt;code&gt;DataSource&lt;/code&gt; object from a Java
                  Directory and Naming Interface (JNDI) naming service.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="username" type="String" line="385"/>
            <javadoc line="385">
                The user name the reader, writer, or both supply to the method
                  &lt;code&gt;DriverManager.getConnection&lt;/code&gt; when the
                  &lt;code&gt;DriverManager&lt;/code&gt; is used to get a connection.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="password" type="String" line="393"/>
            <javadoc line="393">
                The password the reader, writer, or both supply to the method
                  &lt;code&gt;DriverManager.getConnection&lt;/code&gt; when the
                  &lt;code&gt;DriverManager&lt;/code&gt; is used to get a connection.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="rowSetType" type="int" line="401"/>
            <javadoc line="401">
                A constant indicating the type of this JDBC &lt;code&gt;RowSet&lt;/code&gt;
                  object. It must be one of the following &lt;code&gt;ResultSet&lt;/code&gt;
                  constants:  &lt;code&gt;TYPE_FORWARD_ONLY&lt;/code&gt;,
                  &lt;code&gt;TYPE_SCROLL_INSENSITIVE&lt;/code&gt;, or
                  &lt;code&gt;TYPE_SCROLL_SENSITIVE&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="showDeleted" type="boolean" line="411"/>
            <javadoc line="411">
                A &lt;code&gt;boolean&lt;/code&gt; indicating whether deleted rows are visible in this
                  JDBC &lt;code&gt;RowSet&lt;/code&gt; object .                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="queryTimeout" type="int" line="418"/>
            <javadoc line="418">
                The maximum number of seconds the driver
                  will wait for a command to execute.  This limit applies while
                  this JDBC &lt;code&gt;RowSet&lt;/code&gt; object is connected to its data
                  source, that is, while it is populating itself with
                  data and while it is writing data back to the data source.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="maxRows" type="int" line="428"/>
            <javadoc line="428">
                The maximum number of rows the reader should read.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="maxFieldSize" type="int" line="434"/>
            <javadoc line="434">
                The maximum field size the reader should read.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="concurrency" type="int" line="440"/>
            <javadoc line="440">
                A constant indicating the concurrency of this JDBC &lt;code&gt;RowSet&lt;/code&gt;
                  object. It must be one of the following &lt;code&gt;ResultSet&lt;/code&gt;
                  constants: &lt;code&gt;CONCUR_READ_ONLY&lt;/code&gt; or
                  &lt;code&gt;CONCUR_UPDATABLE&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="readOnly" type="boolean" line="449"/>
            <javadoc line="449">
                A &lt;code&gt;boolean&lt;/code&gt; indicating whether this JDBC &lt;code&gt;RowSet&lt;/code&gt;
                  object is read-only.  &lt;code&gt;true&lt;/code&gt; indicates that it is read-only;
                  &lt;code&gt;false&lt;/code&gt; that it is writable.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="escapeProcessing" type="boolean" line="457"/>
            <javadoc line="457">
                A &lt;code&gt;boolean&lt;/code&gt; indicating whether the reader for this
                  JDBC &lt;code&gt;RowSet&lt;/code&gt; object should perform escape processing.
                  &lt;code&gt;true&lt;/code&gt; means that escape processing is turned on;
                  &lt;code&gt;false&lt;/code&gt; that it is not. The default is &lt;code&gt;true&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="isolation" type="int" line="466"/>
            <javadoc line="466">
                A constant indicating the isolation level of the connection
                  for this JDBC &lt;code&gt;RowSet&lt;/code&gt; object . It must be one of
                  the following &lt;code&gt;Connection&lt;/code&gt; constants:
                  &lt;code&gt;TRANSACTION_NONE&lt;/code&gt;,
                  &lt;code&gt;TRANSACTION_READ_UNCOMMITTED&lt;/code&gt;,
                  &lt;code&gt;TRANSACTION_READ_COMMITTED&lt;/code&gt;,
                  &lt;code&gt;TRANSACTION_REPEATABLE_READ&lt;/code&gt; or
                  &lt;code&gt;TRANSACTION_SERIALIZABLE&lt;/code&gt;.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="fetchDir" type="int" line="479"/>
            <javadoc line="479">
                A constant used as a hint to the driver that indicates the direction in
                  which data from this JDBC &lt;code&gt;RowSet&lt;/code&gt; object  is going
                  to be fetched. The following &lt;code&gt;ResultSet&lt;/code&gt; constants are
                  possible values:
                  &lt;code&gt;FETCH_FORWARD&lt;/code&gt;,
                  &lt;code&gt;FETCH_REVERSE&lt;/code&gt;,
                  &lt;code&gt;FETCH_UNKNOWN&lt;/code&gt;.
                  &lt;P&gt;
                  Unused at this time.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="fetchSize" type="int" line="493"/>
            <javadoc line="493">
                A hint to the driver that indicates the expected number of rows
                  in this JDBC &lt;code&gt;RowSet&lt;/code&gt; object .
                  &lt;P&gt;
                  Unused at this time.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="map" type="Map&lt;String,Class&lt;?&gt;&gt;" line="502"/>
            <javadoc line="502">
                The &lt;code&gt;java.util.Map&lt;/code&gt; object that contains entries mapping
                  SQL type names to classes in the Java programming language for the
                  custom mapping of user-defined types.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="listeners" type="Vector&lt;RowSetListener&gt;" line="510"/>
            <javadoc line="510">
                A &lt;code&gt;Vector&lt;/code&gt; object that holds the list of listeners
                  that have registered with this &lt;code&gt;RowSet&lt;/code&gt; object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="params" type="Hashtable&lt;Integer,Object&gt;" line="517"/>
            <javadoc line="517">
                A &lt;code&gt;Vector&lt;/code&gt; object that holds the parameters set
                  for this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s current command.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="524">
                Constructs a new &lt;code&gt;BaseRowSet&lt;/code&gt; object initialized with
                  a default &lt;code&gt;Vector&lt;/code&gt; object for its &lt;code&gt;listeners&lt;/code&gt;
                  field. The other default values with which it is initialized are listed
                  in Section 6.0 of the class comment for this class.                
            </javadoc>
            <method name="BaseRowSet" type="constructor" line="530">
                <comment line="532">
                    allocate the listeners collection                    
                </comment>
            </method>
            <javadoc line="535">
                Performs the necessary internal configurations and initializations
                  to allow any JDBC &lt;code&gt;RowSet&lt;/code&gt; implementation to start using
                  the standard facilities provided by a &lt;code&gt;BaseRowSet&lt;/code&gt;
                  instance. This method &lt;b&gt;should&lt;/b&gt; be called after the &lt;code&gt;RowSet&lt;/code&gt; object
                  has been instantiated to correctly initialize all parameters. This method
                  &lt;b&gt;should&lt;/b&gt; never be called by an application, but is called from with
                  a &lt;code&gt;RowSet&lt;/code&gt; implementation extending this class.                
            </javadoc>
            <method name="initParams" type="void" line="544"/>
            <javadoc line="552">
                The listener will be notified whenever an event occurs on this &lt;code&gt;RowSet&lt;/code&gt;
                  object.
                  &lt;P&gt;
                  A listener might, for example, be a table or graph that needs to
                  be updated in order to accurately reflect the current state of
                  the &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: if the &lt;code&gt;RowSetListener&lt;/code&gt; object is
                  &lt;code&gt;null&lt;/code&gt;, this method silently discards the &lt;code&gt;null&lt;/code&gt;
                  value and does not add a null reference to the set of listeners.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: if the listener is already set, and the new &lt;code&gt;RowSetListerner&lt;/code&gt;
                  instance is added to the set of listeners already registered to receive
                  event notifications from this &lt;code&gt;RowSet&lt;/code&gt;.                
                <param>
                    listener an object that has implemented the
                      <code>javax.sql.RowSetListener</code> interface and wants to be notified
                      of any events that occur on this <code>RowSet</code> object; May be
                      null.                    
                </param>
                <see>
                    #removeRowSetListener                    
                </see>
            </javadoc>
            <method name="addRowSetListener" type="void" line="574">
                <params>
                    <param name="listener" type="RowSetListener"/>
                </params>
            </method>
            <javadoc line="578">
                Removes the designated object from this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s list of listeners.
                  If the given argument is not a registered listener, this method
                  does nothing.
                  &lt;b&gt;Note&lt;/b&gt;: if the &lt;code&gt;RowSetListener&lt;/code&gt; object is
                  &lt;code&gt;null&lt;/code&gt;, this method silently discards the &lt;code&gt;null&lt;/code&gt;
                  value.                
                <param>
                    listener a <code>RowSetListener</code> object that is on the list
                      of listeners for this <code>RowSet</code> object                    
                </param>
                <see>
                    #addRowSetListener                    
                </see>
            </javadoc>
            <method name="removeRowSetListener" type="void" line="591">
                <params>
                    <param name="listener" type="RowSetListener"/>
                </params>
            </method>
            <javadoc line="595">
                Determine if instance of this class extends the RowSet interface.                
            </javadoc>
            <method name="checkforRowSetInterface" type="void" line="598">
                <scope line="599"/>
            </method>
            <javadoc line="605">
                Notifies all of the listeners registered with this
                  &lt;code&gt;RowSet&lt;/code&gt; object that its cursor has moved.
                  &lt;P&gt;
                  When an application calls a method to move the cursor,
                  that method moves the cursor and then calls this method
                  internally. An application &lt;b&gt;should&lt;/b&gt; never invoke
                  this method directly.                
                <throws>
                    SQLException if the class extending the <code>BaseRowSet</code>
                      abstract class does not implement the <code>RowSet</code> interface or
                      one of it's sub-interfaces.                    
                </throws>
            </javadoc>
            <method name="notifyCursorMoved" type="void" line="618">
                <scope line="620">
                    <declaration name="event" type="RowSetEvent" line="621"/>
                    <scope line="622"/>
                </scope>
            </method>
            <javadoc line="628">
                Notifies all of the listeners registered with this &lt;code&gt;RowSet&lt;/code&gt; object that
                  one of its rows has changed.
                  &lt;P&gt;
                  When an application calls a method that changes a row, such as
                  the &lt;code&gt;CachedRowSet&lt;/code&gt; methods &lt;code&gt;insertRow&lt;/code&gt;,
                  &lt;code&gt;updateRow&lt;/code&gt;, or &lt;code&gt;deleteRow&lt;/code&gt;,
                  that method calls &lt;code&gt;notifyRowChanged&lt;/code&gt;
                  internally. An application &lt;b&gt;should&lt;/b&gt; never invoke
                  this method directly.                
                <throws>
                    SQLException if the class extending the <code>BaseRowSet</code>
                      abstract class does not implement the <code>RowSet</code> interface or
                      one of it's sub-interfaces.                    
                </throws>
            </javadoc>
            <method name="notifyRowChanged" type="void" line="643">
                <scope line="645">
                    <declaration name="event" type="RowSetEvent" line="646"/>
                    <scope line="647"/>
                </scope>
            </method>
            <javadoc line="653">
                Notifies all of the listeners registered with this &lt;code&gt;RowSet&lt;/code&gt;
                  object that its entire contents have changed.
                  &lt;P&gt;
                  When an application calls methods that change the entire contents
                  of the &lt;code&gt;RowSet&lt;/code&gt; object, such as the &lt;code&gt;CachedRowSet&lt;/code&gt; methods
                  &lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;populate&lt;/code&gt;, &lt;code&gt;restoreOriginal&lt;/code&gt;,
                  or &lt;code&gt;release&lt;/code&gt;, that method calls &lt;code&gt;notifyRowSetChanged&lt;/code&gt;
                  internally (either directly or indirectly). An application &lt;b&gt;should&lt;/b&gt;
                  never invoke this method directly.                
                <throws>
                    SQLException if the class extending the <code>BaseRowSet</code>
                      abstract class does not implement the <code>RowSet</code> interface or
                      one of it's sub-interfaces.                    
                </throws>
            </javadoc>
            <method name="notifyRowSetChanged" type="void" line="668">
                <scope line="670">
                    <declaration name="event" type="RowSetEvent" line="671"/>
                    <scope line="672"/>
                </scope>
            </method>
            <javadoc line="678">
                Retrieves the SQL query that is the command for this
                  &lt;code&gt;RowSet&lt;/code&gt; object. The command property contains the query that
                  will be executed to populate this &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;P&gt;
                  The SQL query returned by this method is used by &lt;code&gt;RowSet&lt;/code&gt; methods
                  such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt;, which may be implemented
                  by any class that extends the &lt;code&gt;BaseRowSet&lt;/code&gt; abstract class and
                  implements one or more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt;
                  interfaces.
                  &lt;P&gt;
                  The command is used by the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s
                  reader to obtain a &lt;code&gt;ResultSet&lt;/code&gt; object.  The reader then
                  reads the data from the &lt;code&gt;ResultSet&lt;/code&gt; object and uses it to
                  to populate this &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;P&gt;
                  The default value for the &lt;code&gt;command&lt;/code&gt; property is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>String</code> that is the value for this
                      <code>RowSet</code> object's <code>command</code> property;
                      may be <code>null</code>                    
                </return>
                <see>
                    #setCommand                    
                </see>
            </javadoc>
            <method name="getCommand" type="String" line="701"/>
            <javadoc line="705">
                Sets this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s &lt;code&gt;command&lt;/code&gt; property to
                  the given &lt;code&gt;String&lt;/code&gt; object and clears the parameters, if any,
                  that were set for the previous command.
                  &lt;P&gt;
                  The &lt;code&gt;command&lt;/code&gt; property may not be needed if the &lt;code&gt;RowSet&lt;/code&gt;
                  object gets its data from a source that does not support commands,
                  such as a spreadsheet or other tabular file.
                  Thus, this property is optional and may be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    cmd a <code>String</code> object containing an SQL query
                      that will be set as this <code>RowSet</code> object's command
                      property; may be <code>null</code> but may not be an empty string                    
                </param>
                <throws>
                    SQLException if an empty string is provided as the command value                    
                </throws>
                <see>
                    #getCommand                    
                </see>
            </javadoc>
            <method name="setCommand" type="void" line="721">
                <params>
                    <param name="cmd" type="String"/>
                </params>
                <comment line="723">
                    cmd equal to null or
                     cmd with length 0 (implies url ==&quot;&quot;)
                     are not independent events.                    
                </comment>
                <comment line="733">
                    &quot;unbind&quot; any parameters from any previous command.                    
                </comment>
                <scope line="726"/>
                <scope line="728"/>
                <scope line="731">
                    <scope line="733"/>
                </scope>
            </method>
            <javadoc line="742">
                Retrieves the JDBC URL that this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s
                  &lt;code&gt;javax.sql.Reader&lt;/code&gt; object uses to make a connection
                  with a relational database using a JDBC technology-enabled driver.
                  &lt;P&gt;
                  The &lt;code&gt;Url&lt;/code&gt; property will be &lt;code&gt;null&lt;/code&gt; if the underlying data
                  source is a non-SQL data source, such as a spreadsheet or an XML
                  data source.                
                <return>
                    a <code>String</code> object that contains the JDBC URL
                      used to establish the connection for this <code>RowSet</code>
                      object; may be <code>null</code> (default value) if not set                    
                </return>
                <throws>
                    SQLException if an error occurs retrieving the URL value                    
                </throws>
                <see>
                    #setUrl                    
                </see>
            </javadoc>
            <method name="getUrl" type="String" line="757"/>
            <javadoc line="761">
                Sets the Url property for this &lt;code&gt;RowSet&lt;/code&gt; object
                  to the given &lt;code&gt;String&lt;/code&gt; object and sets the dataSource name
                  property to &lt;code&gt;null&lt;/code&gt;. The Url property is a
                  JDBC URL that is used when
                  the connection is created using a JDBC technology-enabled driver
                  (&quot;JDBC driver&quot;) and the &lt;code&gt;DriverManager&lt;/code&gt;.
                  The correct JDBC URL for the specific driver to be used can be found
                  in the driver documentation.  Although there are guidelines for for how
                  a JDBC URL is formed,
                  a driver vendor can specify any &lt;code&gt;String&lt;/code&gt; object except
                  one with a length of &lt;code&gt;0&lt;/code&gt; (an empty string).
                  &lt;P&gt;
                  Setting the Url property is optional if connections are established using
                  a &lt;code&gt;DataSource&lt;/code&gt; object instead of the &lt;code&gt;DriverManager&lt;/code&gt;.
                  The driver will use either the URL property or the
                  dataSourceName property to create a connection, whichever was
                  specified most recently. If an application uses a JDBC URL, it
                  must load a JDBC driver that accepts the JDBC URL before it uses the
                  &lt;code&gt;RowSet&lt;/code&gt; object to connect to a database.  The &lt;code&gt;RowSet&lt;/code&gt;
                  object will use the URL internally to create a database connection in order
                  to read or write data.                
                <param>
                    url a <code>String</code> object that contains the JDBC URL
                      that will be used to establish the connection to a database for this
                      <code>RowSet</code> object; may be <code>null</code> but must not
                      be an empty string                    
                </param>
                <throws>
                    SQLException if an error occurs setting the Url property or the
                      parameter supplied is a string with a length of <code>0</code> (an
                      empty string)                    
                </throws>
                <see>
                    #getUrl                    
                </see>
            </javadoc>
            <method name="setUrl" type="void" line="793">
                <params>
                    <param name="url" type="String"/>
                </params>
                <scope line="794"/>
                <scope line="796"/>
                <scope line="799"/>
            </method>
            <javadoc line="807">
                Returns the logical name that when supplied to a naming service
                  that uses the Java Naming and Directory Interface (JNDI) API, will
                  retrieve a &lt;code&gt;javax.sql.DataSource&lt;/code&gt; object. This
                  &lt;code&gt;DataSource&lt;/code&gt; object can be used to establish a connection
                  to the data source that it represents.
                  &lt;P&gt;
                  Users should set either the url or the data source name property.
                  The driver will use the property set most recently to establish a
                  connection.                
                <return>
                    a <code>String</code> object that identifies the
                      <code>DataSource</code> object to be used for making a
                      connection; if no logical name has been set, <code>null</code>
                      is returned.                    
                </return>
                <see>
                    #setDataSourceName                    
                </see>
            </javadoc>
            <method name="getDataSourceName" type="String" line="824"/>
            <javadoc line="829">
                Sets the &lt;code&gt;DataSource&lt;/code&gt; name property for this &lt;code&gt;RowSet&lt;/code&gt;
                  object to the given logical name and sets this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s
                  Url property to &lt;code&gt;null&lt;/code&gt;. The name must have been bound to a
                  &lt;code&gt;DataSource&lt;/code&gt; object in a JNDI naming service so that an
                  application can do a lookup using that name to retrieve the
                  &lt;code&gt;DataSource&lt;/code&gt; object bound to it. The &lt;code&gt;DataSource&lt;/code&gt;
                  object can then be used to establish a connection to the data source it
                  represents.
                  &lt;P&gt;
                  Users should set either the Url property or the dataSourceName property.
                  If both properties are set, the driver will use the property set most recently.                
                <param>
                    name a <code>String</code> object with the name that can be supplied
                      to a naming service based on JNDI technology to retrieve the
                      <code>DataSource</code> object that can be used to get a connection;
                      may be <code>null</code> but must not be an empty string                    
                </param>
                <throws>
                    SQLException if an empty string is provided as the <code>DataSource</code>
                      name                    
                </throws>
                <see>
                    #getDataSourceName                    
                </see>
            </javadoc>
            <method name="setDataSourceName" type="void" line="850">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="852"/>
                <scope line="854"/>
                <scope line="856"/>
            </method>
            <javadoc line="863">
                Returns the user name used to create a database connection.  Because it
                  is not serialized, the username property is set at runtime before
                  calling the method &lt;code&gt;execute&lt;/code&gt;.                
                <return>
                    the <code>String</code> object containing the user name that
                      is supplied to the data source to create a connection; may be
                      <code>null</code> (default value) if not set                    
                </return>
                <see>
                    #setUsername                    
                </see>
            </javadoc>
            <method name="getUsername" type="String" line="873"/>
            <javadoc line="877">
                Sets the username property for this &lt;code&gt;RowSet&lt;/code&gt; object
                  to the given user name. Because it
                  is not serialized, the username property is set at run time before
                  calling the method &lt;code&gt;execute&lt;/code&gt;.                
                <param>
                    name the <code>String</code> object containing the user name that
                      is supplied to the data source to create a connection. It may be null.                    
                </param>
                <see>
                    #getUsername                    
                </see>
            </javadoc>
            <method name="setUsername" type="void" line="887">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="889"/>
                <scope line="891"/>
            </method>
            <javadoc line="896">
                Returns the password used to create a database connection for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.  Because the password property is not
                  serialized, it is set at run time before calling the method
                  &lt;code&gt;execute&lt;/code&gt;. The default value is &lt;code&gt;null&lt;/code&gt;                
                <return>
                    the <code>String</code> object that represents the password
                      that must be supplied to the database to create a connection                    
                </return>
                <see>
                    #setPassword                    
                </see>
            </javadoc>
            <method name="getPassword" type="String" line="906"/>
            <javadoc line="910">
                Sets the password used to create a database connection for this
                  &lt;code&gt;RowSet&lt;/code&gt; object to the given &lt;code&gt;String&lt;/code&gt;
                  object.  Because the password property is not
                  serialized, it is set at run time before calling the method
                  &lt;code&gt;execute&lt;/code&gt;.                
                <param>
                    pass the <code>String</code> object that represents the password
                      that is supplied to the database to create a connection. It may be
                      null.                    
                </param>
                <see>
                    #getPassword                    
                </see>
            </javadoc>
            <method name="setPassword" type="void" line="922">
                <params>
                    <param name="pass" type="String"/>
                </params>
                <scope line="924"/>
                <scope line="926"/>
            </method>
            <javadoc line="931">
                Sets the type for this &lt;code&gt;RowSet&lt;/code&gt; object to the specified type.
                  The default type is &lt;code&gt;ResultSet.TYPE_SCROLL_INSENSITIVE&lt;/code&gt;.                
                <param>
                    type one of the following constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </param>
                <throws>
                    SQLException if the parameter supplied is not one of the
                      following constants:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code> or
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </throws>
                <see>
                    #getConcurrency                    
                </see>
                <see>
                    #getType                    
                </see>
            </javadoc>
            <method name="setType" type="void" line="947">
                <params>
                    <param name="type" type="int"/>
                </params>
                <scope line="951"/>
            </method>
            <javadoc line="959">
                Returns the type of this &lt;code&gt;RowSet&lt;/code&gt; object. The type is initially
                  determined by the statement that created the &lt;code&gt;RowSet&lt;/code&gt; object.
                  The &lt;code&gt;RowSet&lt;/code&gt; object can call the method
                  &lt;code&gt;setType&lt;/code&gt; at any time to change its
                  type.  The default is &lt;code&gt;TYPE_SCROLL_INSENSITIVE&lt;/code&gt;.                
                <return>
                    the type of this JDBC <code>RowSet</code>
                      object, which must be one of the following:
                      <code>ResultSet.TYPE_FORWARD_ONLY</code>,
                      <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or
                      <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>                    
                </return>
                <throws>
                    SQLException if an error occurs getting the type of
                      of this <code>RowSet</code> object                    
                </throws>
                <see>
                    #setType                    
                </see>
            </javadoc>
            <method name="getType" type="int" line="975"/>
            <javadoc line="979">
                Sets the concurrency for this &lt;code&gt;RowSet&lt;/code&gt; object to
                  the specified concurrency. The default concurrency for any &lt;code&gt;RowSet&lt;/code&gt;
                  object (connected or disconnected) is &lt;code&gt;ResultSet.CONCUR_UPDATABLE&lt;/code&gt;,
                  but this method may be called at any time to change the concurrency.
                  &lt;P&gt;                
                <param>
                    concurrency one of the following constants:
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </param>
                <throws>
                    SQLException if the parameter supplied is not one of the
                      following constants:
                      <code>ResultSet.CONCUR_UPDATABLE</code> or
                      <code>ResultSet.CONCUR_READ_ONLY</code>                    
                </throws>
                <see>
                    #getConcurrency                    
                </see>
                <see>
                    #isReadOnly                    
                </see>
            </javadoc>
            <method name="setConcurrency" type="void" line="995">
                <params>
                    <param name="concurrency" type="int"/>
                </params>
                <scope line="998"/>
            </method>
            <javadoc line="1005">
                Returns a &lt;code&gt;boolean&lt;/code&gt; indicating whether this
                  &lt;code&gt;RowSet&lt;/code&gt; object is read-only.
                  Any attempts to update a read-only &lt;code&gt;RowSet&lt;/code&gt; object will result in an
                  &lt;code&gt;SQLException&lt;/code&gt; being thrown. By default,
                  rowsets are updatable if updates are possible.                
                <return>
                    <code>true</code> if this <code>RowSet</code> object
                      cannot be updated; <code>false</code> otherwise                    
                </return>
                <see>
                    #setConcurrency                    
                </see>
                <see>
                    #setReadOnly                    
                </see>
            </javadoc>
            <method name="isReadOnly" type="boolean" line="1017"/>
            <javadoc line="1021">
                Sets this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s readOnly  property to the given &lt;code&gt;boolean&lt;/code&gt;.                
                <param>
                    value <code>true</code> to indicate that this
                      <code>RowSet</code> object is read-only;
                      <code>false</code> to indicate that it is updatable                    
                </param>
            </javadoc>
            <method name="setReadOnly" type="void" line="1028">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="1032">
                Returns the transaction isolation property for this
                  &lt;code&gt;RowSet&lt;/code&gt; object&apos;s connection. This property represents
                  the transaction isolation level requested for use in transactions.
                  &lt;P&gt;
                  For &lt;code&gt;RowSet&lt;/code&gt; implementations such as
                  the &lt;code&gt;CachedRowSet&lt;/code&gt; that operate in a disconnected environment,
                  the &lt;code&gt;SyncProvider&lt;/code&gt; object
                  offers complementary locking and data integrity options. The
                  options described below are pertinent only to connected &lt;code&gt;RowSet&lt;/code&gt;
                  objects (&lt;code&gt;JdbcRowSet&lt;/code&gt; objects).                
                <return>
                    one of the following constants:
                      <code>Connection.TRANSACTION_NONE</code>,
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>                    
                </return>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    #setTransactionIsolation                    
                </see>
            </javadoc>
            <method name="getTransactionIsolation" type="int" line="1055"/>
            <javadoc line="1059">
                Sets the transaction isolation property for this JDBC &lt;code&gt;RowSet&lt;/code&gt; object to the given
                  constant. The DBMS will use this transaction isolation level for
                  transactions if it can.
                  &lt;p&gt;
                  For &lt;code&gt;RowSet&lt;/code&gt; implementations such as
                  the &lt;code&gt;CachedRowSet&lt;/code&gt; that operate in a disconnected environment,
                  the &lt;code&gt;SyncProvider&lt;/code&gt; object being used
                  offers complementary locking and data integrity options. The
                  options described below are pertinent only to connected &lt;code&gt;RowSet&lt;/code&gt;
                  objects (&lt;code&gt;JdbcRowSet&lt;/code&gt; objects).                
                <param>
                    level one of the following constants, listed in ascending order:
                      <code>Connection.TRANSACTION_NONE</code>,
                      <code>Connection.TRANSACTION_READ_UNCOMMITTED</code>,
                      <code>Connection.TRANSACTION_READ_COMMITTED</code>,
                      <code>Connection.TRANSACTION_REPEATABLE_READ</code>, or
                      <code>Connection.TRANSACTION_SERIALIZABLE</code>                    
                </param>
                <throws>
                    SQLException if the given parameter is not one of the Connection
                      constants                    
                </throws>
                <see>
                    javax.sql.rowset.spi.SyncFactory                    
                </see>
                <see>
                    javax.sql.rowset.spi.SyncProvider                    
                </see>
                <see>
                    #getTransactionIsolation                    
                </see>
            </javadoc>
            <method name="setTransactionIsolation" type="void" line="1083">
                <params>
                    <param name="level" type="int"/>
                </params>
                <scope line="1089"/>
            </method>
            <javadoc line="1101">
                Retrieves the type map associated with the &lt;code&gt;Connection&lt;/code&gt;
                  object for this &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;P&gt;
                  Drivers that support the JDBC 3.0 API will create
                  &lt;code&gt;Connection&lt;/code&gt; objects with an associated type map.
                  This type map, which is initially empty, can contain one or more
                  fully-qualified SQL names and &lt;code&gt;Class&lt;/code&gt; objects indicating
                  the class to which the named SQL value will be mapped. The type mapping
                  specified in the connection&apos;s type map is used for custom type mapping
                  when no other type map supersedes it.
                  &lt;p&gt;
                  If a type map is explicitly supplied to a method that can perform
                  custom mapping, that type map supersedes the connection&apos;s type map.                
                <return>
                    the <code>java.util.Map</code> object that is the type map
                      for this <code>RowSet</code> object's connection                    
                </return>
            </javadoc>
            <method name="getTypeMap" type="java.util.Map<String,Class<?>>" line="1119"/>
            <javadoc line="1123">
                Installs the given &lt;code&gt;java.util.Map&lt;/code&gt; object as the type map
                  associated with the &lt;code&gt;Connection&lt;/code&gt; object for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.  The custom mapping indicated in
                  this type map will be used unless a different type map is explicitly
                  supplied to a method, in which case the type map supplied will be used.                
                <param>
                    map a <code>java.util.Map</code> object that contains the
                      mapping from SQL type names for user defined types (UDT) to classes in
                      the Java programming language.  Each entry in the <code>Map</code>
                      object consists of the fully qualified SQL name of a UDT and the
                      <code>Class</code> object for the <code>SQLData</code> implementation
                      of that UDT. May be <code>null</code>.                    
                </param>
            </javadoc>
            <method name="setTypeMap" type="void" line="1137">
                <params>
                    <param name="map" type="java.util.Map<String,Class<?>>"/>
                </params>
            </method>
            <javadoc line="1141">
                Retrieves the maximum number of bytes that can be used for a column
                  value in this &lt;code&gt;RowSet&lt;/code&gt; object.
                  This limit applies only to columns that hold values of the
                  following types:  &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;,
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,
                  and &lt;code&gt;LONGVARCHAR&lt;/code&gt;.  If the limit is exceeded, the excess
                  data is silently discarded.                
                <return>
                    an <code>int</code> indicating the current maximum column size
                      limit; zero means that there is no limit                    
                </return>
                <throws>
                    SQLException if an error occurs internally determining the
                      maximum limit of the column size                    
                </throws>
            </javadoc>
            <method name="getMaxFieldSize" type="int" line="1155"/>
            <javadoc line="1159">
                Sets the maximum number of bytes that can be used for a column
                  value in this &lt;code&gt;RowSet&lt;/code&gt; object to the given number.
                  This limit applies only to columns that hold values of the
                  following types:  &lt;code&gt;BINARY&lt;/code&gt;, &lt;code&gt;VARBINARY&lt;/code&gt;,
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt;, &lt;code&gt;CHAR&lt;/code&gt;, &lt;code&gt;VARCHAR&lt;/code&gt;,
                  and &lt;code&gt;LONGVARCHAR&lt;/code&gt;.  If the limit is exceeded, the excess
                  data is silently discarded. For maximum portability, it is advisable to
                  use values greater than 256.                
                <param>
                    max an <code>int</code> indicating the new maximum column size
                      limit; zero means that there is no limit                    
                </param>
                <throws>
                    SQLException if (1) an error occurs internally setting the
                      maximum limit of the column size or (2) a size of less than 0 is set                    
                </throws>
            </javadoc>
            <method name="setMaxFieldSize" type="void" line="1174">
                <params>
                    <param name="max" type="int"/>
                </params>
                <scope line="1175"/>
            </method>
            <javadoc line="1182">
                Retrieves the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt; object may contain. If
                  this limit is exceeded, the excess rows are silently dropped.                
                <return>
                    an <code>int</code> indicating the current maximum number of
                      rows; zero means that there is no limit                    
                </return>
                <throws>
                    SQLException if an error occurs internally determining the
                      maximum limit of rows that a <code>Rowset</code> object can contain                    
                </throws>
            </javadoc>
            <method name="getMaxRows" type="int" line="1191"/>
            <javadoc line="1195">
                Sets the maximum number of rows that this &lt;code&gt;RowSet&lt;/code&gt; object may contain to
                  the given number. If this limit is exceeded, the excess rows are
                  silently dropped.                
                <param>
                    max an <code>int</code> indicating the current maximum number
                      of rows; zero means that there is no limit                    
                </param>
                <throws>
                    SQLException if an error occurs internally setting the
                      maximum limit on the number of rows that a JDBC <code>RowSet</code> object
                      can contain; or if <i>max</i> is less than <code>0</code>; or
                      if <i>max</i> is less than the <code>fetchSize</code> of the
                      <code>RowSet</code>                    
                </throws>
            </javadoc>
            <method name="setMaxRows" type="void" line="1208">
                <params>
                    <param name="max" type="int"/>
                </params>
                <scope line="1209"/>
                <scope line="1212"/>
            </method>
            <javadoc line="1219">
                Sets to the given &lt;code&gt;boolean&lt;/code&gt; whether or not the driver will
                  scan for escape syntax and do escape substitution before sending SQL
                  statements to the database. The default is for the driver to do escape
                  processing.
                  &lt;P&gt;
                  Note: Since &lt;code&gt;PreparedStatement&lt;/code&gt; objects have usually been
                  parsed prior to making this call, disabling escape processing for
                  prepared statements will likely have no effect.                
                <param>
                    enable <code>true</code> to enable escape processing;
                      <code>false</code> to disable it                    
                </param>
                <throws>
                    SQLException if an error occurs setting the underlying JDBC
                      technology-enabled driver to process the escape syntax                    
                </throws>
            </javadoc>
            <method name="setEscapeProcessing" type="void" line="1234">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <javadoc line="1238">
                Retrieves the maximum number of seconds the driver will wait for a
                  query to execute. If the limit is exceeded, an &lt;code&gt;SQLException&lt;/code&gt;
                  is thrown.                
                <return>
                    the current query timeout limit in seconds; zero means that
                      there is no limit                    
                </return>
                <throws>
                    SQLException if an error occurs in determining the query
                      time-out value                    
                </throws>
            </javadoc>
            <method name="getQueryTimeout" type="int" line="1248"/>
            <javadoc line="1252">
                Sets to the given number the maximum number of seconds the driver will
                  wait for a query to execute. If the limit is exceeded, an
                  &lt;code&gt;SQLException&lt;/code&gt; is thrown.                
                <param>
                    seconds the new query time-out limit in seconds; zero means that
                      there is no limit; must not be less than zero                    
                </param>
                <throws>
                    SQLException if an error occurs setting the query
                      time-out or if the query time-out value is less than 0                    
                </throws>
            </javadoc>
            <method name="setQueryTimeout" type="void" line="1262">
                <params>
                    <param name="seconds" type="int"/>
                </params>
                <scope line="1263"/>
            </method>
            <javadoc line="1270">
                Retrieves a &lt;code&gt;boolean&lt;/code&gt; indicating whether rows marked
                  for deletion appear in the set of current rows.
                  The default value is &lt;code&gt;false&lt;/code&gt;.
                  &lt;P&gt;
                  Note: Allowing deleted rows to remain visible complicates the behavior
                  of some of the methods.  However, most &lt;code&gt;RowSet&lt;/code&gt; object users
                  can simply ignore this extra detail because only sophisticated
                  applications will likely want to take advantage of this feature.                
                <return>
                    <code>true</code> if deleted rows are visible;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if an error occurs determining if deleted rows
                      are visible or not                    
                </throws>
                <see>
                    #setShowDeleted                    
                </see>
            </javadoc>
            <method name="getShowDeleted" type="boolean" line="1286"/>
            <javadoc line="1290">
                Sets the property &lt;code&gt;showDeleted&lt;/code&gt; to the given
                  &lt;code&gt;boolean&lt;/code&gt; value, which determines whether
                  rows marked for deletion appear in the set of current rows.                
                <param>
                    value <code>true</code> if deleted rows should be shown;
                      <code>false</code> otherwise                    
                </param>
                <throws>
                    SQLException if an error occurs setting whether deleted
                      rows are visible or not                    
                </throws>
                <see>
                    #getShowDeleted                    
                </see>
            </javadoc>
            <method name="setShowDeleted" type="void" line="1301">
                <params>
                    <param name="value" type="boolean"/>
                </params>
            </method>
            <javadoc line="1305">
                Ascertains whether escape processing is enabled for this
                  &lt;code&gt;RowSet&lt;/code&gt; object.                
                <return>
                    <code>true</code> if escape processing is turned on;
                      <code>false</code> otherwise                    
                </return>
                <throws>
                    SQLException if an error occurs determining if escape
                      processing is enabled or not or if the internal escape
                      processing trigger has not been enabled                    
                </throws>
            </javadoc>
            <method name="getEscapeProcessing" type="boolean" line="1315"/>
            <javadoc line="1319">
                Gives the driver a performance hint as to the direction in
                  which the rows in this &lt;code&gt;RowSet&lt;/code&gt; object will be
                  processed.  The driver may ignore this hint.
                  &lt;P&gt;
                  A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the
                  &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data.  That
                  &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s default fetch direction is set by
                  the &lt;code&gt;Statement&lt;/code&gt; object that created it.
                  &lt;P&gt;
                  This method applies to a &lt;code&gt;RowSet&lt;/code&gt; object only while it is
                  connected to a database using a JDBC driver.
                  &lt;p&gt;
                  A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change
                  its setting for the fetch direction.                
                <param>
                    direction one of <code>ResultSet.FETCH_FORWARD</code>,
                      <code>ResultSet.FETCH_REVERSE</code>, or
                      <code>ResultSet.FETCH_UNKNOWN</code>                    
                </param>
                <throws>
                    SQLException if (1) the <code>RowSet</code> type is
                      <code>TYPE_FORWARD_ONLY</code> and the given fetch direction is not
                      <code>FETCH_FORWARD</code> or (2) the given fetch direction is not
                      one of the following:
                      ResultSet.FETCH_FORWARD,
                      ResultSet.FETCH_REVERSE, or
                      ResultSet.FETCH_UNKNOWN                    
                </throws>
                <see>
                    #getFetchDirection                    
                </see>
            </javadoc>
            <method name="setFetchDirection" type="void" line="1347">
                <params>
                    <param name="direction" type="int"/>
                </params>
                <comment line="1349">
                    Changed the condition checking to the below as there were two
                     conditions that had to be checked
                     1. RowSet is TYPE_FORWARD_ONLY and direction is not FETCH_FORWARD
                     2. Direction is not one of the valid values                    
                </comment>
                <scope line="1356"/>
            </method>
            <javadoc line="1362">
                Retrieves this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s current setting for the
                  fetch direction. The default type is &lt;code&gt;ResultSet.FETCH_FORWARD&lt;/code&gt;                
                <return>
                    one of <code>ResultSet.FETCH_FORWARD</code>,
                      <code>ResultSet.FETCH_REVERSE</code>, or
                      <code>ResultSet.FETCH_UNKNOWN</code>                    
                </return>
                <throws>
                    SQLException if an error occurs in determining the
                      current fetch direction for fetching rows                    
                </throws>
                <see>
                    #setFetchDirection                    
                </see>
            </javadoc>
            <method name="getFetchDirection" type="int" line="1373">
                <comment line="1376">
                    Added the following code to throw a
                    SQL Exception if the fetchDir is not
                    set properly.Bug id:4914155                    
                </comment>
                <comment line="1380">
                    This checking is not necessary!                    
                </comment>
                <comment line="1382">
                    if((fetchDir != ResultSet.FETCH_FORWARD) &amp;&amp;
                    (fetchDir != ResultSet.FETCH_REVERSE) &amp;&amp;
                    (fetchDir != ResultSet.FETCH_UNKNOWN)) {
                    throw new SQLException(&quot;Fetch Direction Invalid&quot;);
                    }                    
                </comment>
            </method>
            <javadoc line="1391">
                Sets the fetch size for this &lt;code&gt;RowSet&lt;/code&gt; object to the given number of
                  rows.  The fetch size gives a JDBC technology-enabled driver (&quot;JDBC driver&quot;)
                  a hint as to the
                  number of rows that should be fetched from the database when more rows
                  are needed for this &lt;code&gt;RowSet&lt;/code&gt; object. If the fetch size specified
                  is zero, the driver ignores the value and is free to make its own best guess
                  as to what the fetch size should be.
                  &lt;P&gt;
                  A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the
                  &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data.  That
                  &lt;code&gt;ResultSet&lt;/code&gt; object&apos;s default fetch size is set by
                  the &lt;code&gt;Statement&lt;/code&gt; object that created it.
                  &lt;P&gt;
                  This method applies to a &lt;code&gt;RowSet&lt;/code&gt; object only while it is
                  connected to a database using a JDBC driver.
                  For connected &lt;code&gt;RowSet&lt;/code&gt; implementations such as
                  &lt;code&gt;JdbcRowSet&lt;/code&gt;, this method has a direct and immediate effect
                  on the underlying JDBC driver.
                  &lt;P&gt;
                  A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change
                  its setting for the fetch size.
                  &lt;p&gt;
                  For &lt;code&gt;RowSet&lt;/code&gt; implementations such as
                  &lt;code&gt;CachedRowSet&lt;/code&gt;, which operate in a disconnected environment,
                  the &lt;code&gt;SyncProvider&lt;/code&gt; object being used
                  may leverage the fetch size to poll the data source and
                  retrieve a number of rows that do not exceed the fetch size and that may
                  form a subset of the actual rows returned by the original query. This is
                  an implementation variance determined by the specific &lt;code&gt;SyncProvider&lt;/code&gt;
                  object employed by the disconnected &lt;code&gt;RowSet&lt;/code&gt; object.
                  &lt;P&gt;                
                <param>
                    rows the number of rows to fetch; <code>0</code> to let the
                      driver decide what the best fetch size is; must not be less
                      than <code>0</code> or more than the maximum number of rows
                      allowed for this <code>RowSet</code> object (the number returned
                      by a call to the method {@link #getMaxRows})                    
                </param>
                <throws>
                    SQLException if the specified fetch size is less than <code>0</code>
                      or more than the limit for the maximum number of rows                    
                </throws>
                <see>
                    #getFetchSize                    
                </see>
            </javadoc>
            <method name="setFetchSize" type="void" line="1433">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <comment line="1435">
                    Added this checking as maxRows can be 0 when this function is called
                    maxRows = 0 means rowset can hold any number of rows, os this checking
                     is needed to take care of this condition.                    
                </comment>
                <scope line="1437"/>
                <scope line="1441"/>
            </method>
            <javadoc line="1448">
                Returns the fetch size for this &lt;code&gt;RowSet&lt;/code&gt; object. The default
                  value is zero.                
                <return>
                    the number of rows suggested as the fetch size when this <code>RowSet</code> object
                      needs more rows from the database                    
                </return>
                <throws>
                    SQLException if an error occurs determining the number of rows in the
                      current fetch size                    
                </throws>
                <see>
                    #setFetchSize                    
                </see>
            </javadoc>
            <method name="getFetchSize" type="int" line="1458"/>
            <javadoc line="1462">
                Returns the concurrency for this &lt;code&gt;RowSet&lt;/code&gt; object.
                  The default is &lt;code&gt;CONCUR_UPDATABLE&lt;/code&gt; for both connected and
                  disconnected &lt;code&gt;RowSet&lt;/code&gt; objects.
                  &lt;P&gt;
                  An application can call the method &lt;code&gt;setConcurrency&lt;/code&gt; at any time
                  to change a &lt;code&gt;RowSet&lt;/code&gt; object&apos;s concurrency.
                  &lt;p&gt;                
                <return>
                    the concurrency type for this <code>RowSet</code>
                      object, which must be one of the following:
                      <code>ResultSet.CONCUR_READ_ONLY</code> or
                      <code>ResultSet.CONCUR_UPDATABLE</code>                    
                </return>
                <throws>
                    SQLException if an error occurs getting the concurrency
                      of this <code>RowSet</code> object                    
                </throws>
                <see>
                    #setConcurrency                    
                </see>
                <see>
                    #isReadOnly                    
                </see>
            </javadoc>
            <method name="getConcurrency" type="int" line="1479"/>
            <javadoc line="1487">
                Checks the given index to see whether it is less than &lt;code&gt;1&lt;/code&gt; and
                  throws an &lt;code&gt;SQLException&lt;/code&gt; object if it is.
                  &lt;P&gt;
                  This method is called by many methods internally; it is never
                  called by an application directly.                
                <param>
                    idx an <code>int</code> indicating which parameter is to be
                      checked; the first parameter is <code>1</code>                    
                </param>
                <throws>
                    SQLException if the parameter is less than <code>1</code>                    
                </throws>
            </javadoc>
            <method name="checkParamIndex" type="void" line="1498">
                <params>
                    <param name="idx" type="int"/>
                </params>
                <scope line="1499"/>
            </method>
            <javadoc line="1508">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  Note that the parameter&apos;s SQL type must be specified using one of the
                  type codes defined in &lt;code&gt;java.sql.Types&lt;/code&gt;.  This SQL type is
                  specified in the second parameter.
                  &lt;p&gt;
                  Note that the second parameter tells the DBMS the data type of the value being
                  set to &lt;code&gt;NULL&lt;/code&gt;. Some DBMSs require this information, so it is required
                  in order to make code more portable.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setNull&lt;/code&gt;
                  has been called will return an &lt;code&gt;Object&lt;/code&gt; array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is &lt;code&gt;null&lt;/code&gt;.
                  The second element is the value set for &lt;i&gt;sqlType&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the second placeholder parameter is being set to
                  &lt;code&gt;null&lt;/code&gt;, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    sqlType an <code>int</code> that is one of the SQL type codes
                      defined in the class {@link java.sql.Types}. If a non-standard
                      <i>sqlType</i> is supplied, this method will not throw a
                      <code>SQLException</code>. This allows implicit support for
                      non-standard SQL types.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or the given
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setNull" type="void" line="1560">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="sqlType" type="int"/>
                </params>
                <declaration name="nullVal" type="Object" line="1561"/>
                <scope line="1568"/>
            </method>
            <javadoc line="1575">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  Although this version of the  method &lt;code&gt;setNull&lt;/code&gt; is intended
                  for user-defined
                  and &lt;code&gt;REF&lt;/code&gt; parameters, this method may be used to set a null
                  parameter for any JDBC type. The following are user-defined types:
                  &lt;code&gt;STRUCT&lt;/code&gt;, &lt;code&gt;DISTINCT&lt;/code&gt;, and &lt;code&gt;JAVA_OBJECT&lt;/code&gt;,
                  and named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully qualified SQL type name when specifying
                  a &lt;code&gt;NULL&lt;/code&gt; user-defined or &lt;code&gt;REF&lt;/code&gt; parameter.
                  In the case of a user-defined type, the name is the type name of
                  the parameter itself.  For a &lt;code&gt;REF&lt;/code&gt; parameter, the name is
                  the type name of the referenced type.  If a JDBC technology-enabled
                  driver does not need the type code or type name information,
                  it may ignore it.
                  &lt;P&gt;
                  If the parameter does not have a user-defined or &lt;code&gt;REF&lt;/code&gt; type,
                  the given &lt;code&gt;typeName&lt;/code&gt; parameter is ignored.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setNull&lt;/code&gt;
                  has been called will return an &lt;code&gt;Object&lt;/code&gt; array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is &lt;code&gt;null&lt;/code&gt;.
                  The second element is the value set for &lt;i&gt;sqlType&lt;/i&gt;, and the third
                  element is the value set for &lt;i&gt;typeName&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the second placeholder parameter is being set to
                  &lt;code&gt;null&lt;/code&gt;, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully qualified name of an SQL user-defined type,
                      which is ignored if the parameter is not a user-defined
                      type or <code>REF</code> value                    
                </param>
                <throws>
                    SQLException if an error occurs or the given parameter index
                      is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setNull" type="void" line="1640">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="sqlType" type="int"/>
                    <param name="typeName" type="String"/>
                </params>
                <declaration name="nullVal" type="Object" line="1642"/>
                <scope line="1650"/>
            </method>
            <javadoc line="1658">
                Sets the designated parameter to the given &lt;code&gt;boolean&lt;/code&gt; in the
                  Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;BIT&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt;, &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setBoolean" type="void" line="1682">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="boolean"/>
                </params>
                <scope line="1685"/>
            </method>
            <javadoc line="1692">
                Sets the designated parameter to the given &lt;code&gt;byte&lt;/code&gt; in the Java
                  programming language.  The driver converts this to an SQL
                  &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setByte" type="void" line="1716">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
                <scope line="1719"/>
            </method>
            <javadoc line="1726">
                Sets the designated parameter to the given &lt;code&gt;short&lt;/code&gt; in the
                  Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;p&gt;                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setShort" type="void" line="1750">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="short"/>
                </params>
                <scope line="1753"/>
            </method>
            <javadoc line="1760">
                Sets the designated parameter to an &lt;code&gt;int&lt;/code&gt; in the Java
                  programming language.  The driver converts this to an SQL
                  &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setInt" type="void" line="1784">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <scope line="1786"/>
            </method>
            <javadoc line="1792">
                Sets the designated parameter to the given &lt;code&gt;long&lt;/code&gt; in the Java
                  programming language.  The driver converts this to an SQL
                  &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setLong" type="void" line="1816">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="long"/>
                </params>
                <scope line="1818"/>
            </method>
            <javadoc line="1824">
                Sets the designated parameter to the given &lt;code&gt;float&lt;/code&gt; in the
                  Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setFloat" type="void" line="1848">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="float"/>
                </params>
                <scope line="1850"/>
            </method>
            <javadoc line="1856">
                Sets the designated parameter to the given &lt;code&gt;double&lt;/code&gt; in the
                  Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  S                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setDouble" type="void" line="1880">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="double"/>
                </params>
                <scope line="1882"/>
            </method>
            <javadoc line="1888">
                Sets the designated parameter to the given
                  &lt;code&gt;java.lang.BigDecimal&lt;/code&gt; value.  The driver converts this to
                  an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  Note: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setBigDecimal" type="void" line="1912">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.math.BigDecimal"/>
                </params>
                <scope line="1914"/>
            </method>
            <javadoc line="1920">
                Sets the designated parameter to the given &lt;code&gt;String&lt;/code&gt;
                  value.  The driver converts this to an SQL
                  &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s size relative to the driver&apos;s limits
                  on &lt;code&gt;VARCHAR&lt;/code&gt; values) when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;p&gt;                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setString" type="void" line="1946">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="String"/>
                </params>
                <scope line="1948"/>
            </method>
            <javadoc line="1954">
                Sets the designated parameter to the given array of bytes.
                  The driver converts this to an SQL
                  &lt;code&gt;VARBINARY&lt;/code&gt; or &lt;code&gt;LONGVARBINARY&lt;/code&gt; value
                  (depending on the argument&apos;s size relative to the driver&apos;s limits
                  on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setBytes" type="void" line="1980">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="byte"/>
                </params>
                <scope line="1982"/>
            </method>
            <javadoc line="1988">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt;
                  value. The driver converts this to an SQL
                  &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version
                  of &lt;code&gt;setDate&lt;/code&gt;
                  has been called will return an array with the value to be set for
                  placeholder parameter number &lt;i&gt;parameterIndex&lt;/i&gt; being the &lt;code&gt;Date&lt;/code&gt;
                  object supplied as the second parameter.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setDate" type="void" line="2021">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
                <scope line="2024"/>
            </method>
            <javadoc line="2030">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt;
                  value.  The driver converts this to an SQL &lt;code&gt;TIME&lt;/code&gt; value
                  when it sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version
                  of the method &lt;code&gt;setTime&lt;/code&gt;
                  has been called will return an array of the parameters that have been set.
                  The parameter to be set for parameter placeholder number &lt;i&gt;parameterIndex&lt;/i&gt;
                  will be the &lt;code&gt;Time&lt;/code&gt; object that was set as the second parameter
                  to this method.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>java.sql.Time</code> object, which is to be set as the value
                      for placeholder parameter <i>parameterIndex</i>                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setTime" type="void" line="2066">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
                <scope line="2068"/>
            </method>
            <javadoc line="2075">
                Sets the designated parameter to the given
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it
                  sends it to the database.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setTimestamp&lt;/code&gt;
                  has been called will return an array with the value for parameter placeholder
                  number &lt;i&gt;parameterIndex&lt;/i&gt; being the &lt;code&gt;Timestamp&lt;/code&gt; object that was
                  supplied as the second parameter to this method.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>java.sql.Timestamp</code> object                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setTimestamp" type="void" line="2109">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
                <scope line="2111"/>
            </method>
            <javadoc line="2118">
                Sets the designated parameter to the given
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object,
                  which will have the specified number of bytes.
                  The contents of the stream will be read and sent to the database.
                  This method throws an &lt;code&gt;SQLException&lt;/code&gt; object if the number of bytes
                  read and sent to the database is not equal to &lt;i&gt;length&lt;/i&gt;.
                  &lt;P&gt;
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. A JDBC technology-enabled
                  driver will read the data from the stream as needed until it reaches
                  end-of-file. The driver will do any necessary conversion from ASCII to
                  the database &lt;code&gt;CHAR&lt;/code&gt; format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can be either a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  Note: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after &lt;code&gt;setAsciiStream&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  The element in the array that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;length&lt;/i&gt;.
                  The third element is an internal &lt;code&gt;BaseRowSet&lt;/code&gt; constant
                  specifying that the stream passed to this method is an ASCII stream.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the input stream being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream. This is the number of bytes
                      the driver will send to the DBMS; lengths of 0 or less are
                      are undefined but will cause an invalid length exception to be
                      thrown in the underlying JDBC driver.                    
                </param>
                <throws>
                    SQLException if an error occurs, the parameter index is out of bounds,
                      or when connected to a data source, the number of bytes the driver reads
                      and sends to the database is not equal to the number of bytes specified
                      in <i>length</i>                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setAsciiStream" type="void" line="2182">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="asciiStream" type="Object" line="2183"/>
                <scope line="2191"/>
            </method>
            <javadoc line="2198">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="2222">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="2226">
                Sets the designated parameter to the given &lt;code&gt;java.io.InputStream&lt;/code&gt;
                  object, which will have the specified number of bytes.
                  The contents of the stream will be read and sent to the database.
                  This method throws an &lt;code&gt;SQLException&lt;/code&gt; object if the number of bytes
                  read and sent to the database is not equal to &lt;i&gt;length&lt;/i&gt;.
                  &lt;P&gt;
                  When a very large binary value is input to a
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; parameter, it may be more practical
                  to send it via a &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  A JDBC technology-enabled driver will read the data from the
                  stream as needed until it reaches end-of-file.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can be either a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after &lt;code&gt;setBinaryStream&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;length&lt;/i&gt;.
                  The third element is an internal &lt;code&gt;BaseRowSet&lt;/code&gt; constant
                  specifying that the stream passed to this method is a binary stream.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the input stream being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the input stream that contains the binary value to be set                    
                </param>
                <param>
                    length the number of bytes in the stream; lengths of 0 or less are
                      are undefined but will cause an invalid length exception to be
                      thrown in the underlying JDBC driver.                    
                </param>
                <throws>
                    SQLException if an error occurs, the parameter index is out of bounds,
                      or when connected to a data source, the number of bytes the driver
                      reads and sends to the database is not equal to the number of bytes
                      specified in <i>length</i>                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setBinaryStream" type="void" line="2287">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="binaryStream" type="Object" line="2288"/>
                <scope line="2295"/>
            </method>
            <javadoc line="2303">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="2326">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="2331">
                Sets the designated parameter to the given
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object, which will have the specified
                  number of bytes. The contents of the stream will be read and sent
                  to the database.
                  This method throws an &lt;code&gt;SQLException&lt;/code&gt; if the number of bytes
                  read and sent to the database is not equal to &lt;i&gt;length&lt;/i&gt;.
                  &lt;P&gt;
                  When a very large Unicode value is input to a
                  &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter, it may be more practical
                  to send it via a &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  A JDBC technology-enabled driver will read the data from the
                  stream as needed, until it reaches end-of-file.
                  The driver will do any necessary conversion from Unicode to the
                  database &lt;code&gt;CHAR&lt;/code&gt; format.
                  The byte format of the Unicode stream must be Java UTF-8, as
                  defined in the Java Virtual Machine Specification.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can be either a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;
                  This method is deprecated; the method &lt;code&gt;getCharacterStream&lt;/code&gt;
                  should be used in its place.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after &lt;code&gt;setUnicodeStream&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.io.InputStream&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;length&lt;/i&gt;.
                  The third element is an internal &lt;code&gt;BaseRowSet&lt;/code&gt; constant
                  specifying that the stream passed to this method is a Unicode stream.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the input stream being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the <code>java.io.InputStream</code> object that contains the
                      UNICODE parameter value                    
                </param>
                <param>
                    length the number of bytes in the input stream                    
                </param>
                <throws>
                    SQLException if an error occurs, the parameter index is out of bounds,
                      or the number of bytes the driver reads and sends to the database is
                      not equal to the number of bytes specified in <i>length</i>                    
                </throws>
                <deprecated>
                    getCharacterStream should be used in its place                    
                </deprecated>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setUnicodeStream" type="void" line="2393">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="unicodeStream" type="Object" line="2394"/>
                <scope line="2401"/>
            </method>
            <javadoc line="2407">
                Sets the designated parameter to the given &lt;code&gt;java.io.Reader&lt;/code&gt;
                  object, which will have the specified number of characters. The
                  contents of the reader will be read and sent to the database.
                  This method throws an &lt;code&gt;SQLException&lt;/code&gt; if the number of bytes
                  read and sent to the database is not equal to &lt;i&gt;length&lt;/i&gt;.
                  &lt;P&gt;
                  When a very large Unicode value is input to a
                  &lt;code&gt;LONGVARCHAR&lt;/code&gt; parameter, it may be more practical
                  to send it via a &lt;code&gt;Reader&lt;/code&gt; object.
                  A JDBC technology-enabled driver will read the data from the
                  stream as needed until it reaches end-of-file.
                  The driver will do any necessary conversion from Unicode to the
                  database &lt;code&gt;CHAR&lt;/code&gt; format.
                  The byte format of the Unicode stream must be Java UTF-8, as
                  defined in the Java Virtual Machine Specification.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can be either a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after
                  &lt;code&gt;setCharacterStream&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.io.Reader&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;length&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the reader being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    reader the <code>Reader</code> object that contains the
                      Unicode data                    
                </param>
                <param>
                    length the number of characters in the stream; lengths of 0 or
                      less are undefined but will cause an invalid length exception to
                      be thrown in the underlying JDBC driver.                    
                </param>
                <throws>
                    SQLException if an error occurs, the parameter index is out of bounds,
                      or when connected to a data source, the number of bytes the driver
                      reads and sends to the database is not equal to the number of bytes
                      specified in <i>length</i>                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setCharacterStream" type="void" line="2472">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="charStream" type="Object" line="2473"/>
                <scope line="2479"/>
            </method>
            <javadoc line="2485">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="2511">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="2515">
                Sets the designated parameter to an &lt;code&gt;Object&lt;/code&gt; in the Java
                  programming language. The second parameter must be an
                  &lt;code&gt;Object&lt;/code&gt; type.  For integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent
                  objects should be used. For example, use the class &lt;code&gt;Integer&lt;/code&gt;
                  for an &lt;code&gt;int&lt;/code&gt;.
                  &lt;P&gt;
                  The driver converts this object to the specified
                  target SQL type before sending it to the database.
                  If the object has a custom mapping (is of a class implementing
                  &lt;code&gt;SQLData&lt;/code&gt;), the driver should call the method
                  &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write the object to the SQL
                  data stream. If, on the other hand, the object is of a class
                  implementing &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, or &lt;code&gt;Array&lt;/code&gt;,
                  the driver should pass it to the database as a value of the
                  corresponding SQL type.
                  &lt;P&gt;
                  &lt;p&gt;Note that this method may be used to pass database-
                  specific abstract data types.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setObject&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;Object&lt;/code&gt; instance, and the
                  second element is the value set for &lt;i&gt;targetSqlType&lt;/i&gt;.  The
                  third element is the value set for &lt;i&gt;scale&lt;/i&gt;, which the driver will
                  ignore if the type of the object being set is not
                  &lt;code&gt;java.sql.Types.NUMERIC&lt;/code&gt; or &lt;code&gt;java.sql.Types.DECIMAL&lt;/code&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the object being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the <code>Object</code> containing the input parameter value;
                      must be an <code>Object</code> type                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
                      to be sent to the database. The <code>scale</code> argument may
                      further qualify this type. If a non-standard <i>targetSqlType</i>
                      is supplied, this method will not throw a <code>SQLException</code>.
                      This allows implicit support for non-standard SQL types.                    
                </param>
                <param>
                    scale for the types <code>java.sql.Types.DECIMAL</code> and
                      <code>java.sql.Types.NUMERIC</code>, this is the number
                      of digits after the decimal point.  For all other types, this
                      value will be ignored.                    
                </param>
                <throws>
                    SQLException if an error occurs or the parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setObject" type="void" line="2588">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                    <param name="scale" type="int"/>
                </params>
                <declaration name="obj" type="Object" line="2589"/>
                <scope line="2596"/>
            </method>
            <javadoc line="2602">
                Sets the value of the designated parameter with the given
                  &lt;code&gt;Object&lt;/code&gt; value.
                  This method is like &lt;code&gt;setObject(int parameterIndex, Object x, int
                  targetSqlType, int scale)&lt;/code&gt; except that it assumes a scale of zero.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setObject&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;Object&lt;/code&gt; instance.
                  The second element is the value set for &lt;i&gt;targetSqlType&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the object being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the <code>Object</code> containing the input parameter value;
                      must be an <code>Object</code> type                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in <code>java.sql.Types</code>)
                      to be sent to the database. If a non-standard <i>targetSqlType</i>
                      is supplied, this method will not throw a <code>SQLException</code>.
                      This allows implicit support for non-standard SQL types.                    
                </param>
                <throws>
                    SQLException if an error occurs or the parameter index
                      is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setObject" type="void" line="2651">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                </params>
                <declaration name="obj" type="Object" line="2652"/>
                <scope line="2658"/>
            </method>
            <javadoc line="2664">
                Sets the designated parameter to an &lt;code&gt;Object&lt;/code&gt; in the Java
                  programming language. The second parameter must be an
                  &lt;code&gt;Object&lt;/code&gt;
                  type.  For integral values, the &lt;code&gt;java.lang&lt;/code&gt; equivalent
                  objects should be used. For example, use the class &lt;code&gt;Integer&lt;/code&gt;
                  for an &lt;code&gt;int&lt;/code&gt;.
                  &lt;P&gt;
                  The JDBC specification defines a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The driver will
                  use this standard mapping to  convert the given object
                  to its corresponding SQL type before sending it to the database.
                  If the object has a custom mapping (is of a class implementing
                  &lt;code&gt;SQLData&lt;/code&gt;), the driver should call the method
                  &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write the object to the SQL
                  data stream.
                  &lt;P&gt;
                  If, on the other hand, the object is of a class
                  implementing &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, or &lt;code&gt;Array&lt;/code&gt;,
                  the driver should pass it to the database as a value of the
                  corresponding SQL type.
                  &lt;P&gt;
                  This method throws an exception if there
                  is an ambiguity, for example, if the object is of a class
                  implementing more than one interface.
                  &lt;P&gt;
                  Note that this method may be used to pass database-specific
                  abstract data types.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  After this method has been called, a call to the
                  method &lt;code&gt;getParams&lt;/code&gt;
                  will return an object array of the current command parameters, which will
                  include the &lt;code&gt;Object&lt;/code&gt; set for placeholder parameter number
                  &lt;code&gt;parameterIndex&lt;/code&gt;.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <throws>
                    SQLException if an error occurs the
                      parameter index is out of bounds, or there
                      is ambiguity in the implementation of the
                      object being set                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setObject" type="void" line="2724">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="Object"/>
                </params>
                <scope line="2726"/>
            </method>
            <javadoc line="2732">
                Sets the designated parameter to the given &lt;code&gt;Ref&lt;/code&gt; object in
                  the Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;REF&lt;/code&gt; value when it sends it to the database. Internally, the
                  &lt;code&gt;Ref&lt;/code&gt; is represented as a &lt;code&gt;SerialRef&lt;/code&gt; to ensure
                  serializability.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;p&gt;
                  After this method has been called, a call to the
                  method &lt;code&gt;getParams&lt;/code&gt;
                  will return an object array of the current command parameters, which will
                  include the &lt;code&gt;Ref&lt;/code&gt; object set for placeholder parameter number
                  &lt;code&gt;parameterIndex&lt;/code&gt;.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    ref a <code>Ref</code> object representing an SQL <code>REF</code>
                      value; cannot be null                    
                </param>
                <throws>
                    SQLException if an error occurs; the parameter index is out of
                      bounds or the <code>Ref</code> object is <code>null</code>; or
                      the <code>Ref</code> object returns a <code>null</code> base type
                      name.                    
                </throws>
                <see>
                    #getParams                    
                </see>
                <see>
                    javax.sql.rowset.serial.SerialRef                    
                </see>
            </javadoc>
            <method name="setRef" type="void" line="2771">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="ref" type="Ref"/>
                </params>
                <scope line="2773"/>
            </method>
            <javadoc line="2779">
                Sets the designated parameter to the given &lt;code&gt;Blob&lt;/code&gt; object in
                  the Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;BLOB&lt;/code&gt; value when it sends it to the database. Internally,
                  the &lt;code&gt;Blob&lt;/code&gt; is represented as a &lt;code&gt;SerialBlob&lt;/code&gt;
                  to ensure serializability.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;p&gt;
                  After this method has been called, a call to the
                  method &lt;code&gt;getParams&lt;/code&gt;
                  will return an object array of the current command parameters, which will
                  include the &lt;code&gt;Blob&lt;/code&gt; object set for placeholder parameter number
                  &lt;code&gt;parameterIndex&lt;/code&gt;.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>Blob</code> object representing an SQL
                      <code>BLOB</code> value                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
                <see>
                    javax.sql.rowset.serial.SerialBlob                    
                </see>
            </javadoc>
            <method name="setBlob" type="void" line="2815">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="Blob"/>
                </params>
                <scope line="2817"/>
            </method>
            <javadoc line="2823">
                Sets the designated parameter to the given &lt;code&gt;Clob&lt;/code&gt; object in
                  the Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;CLOB&lt;/code&gt; value when it sends it to the database. Internally, the
                  &lt;code&gt;Clob&lt;/code&gt; is represented as a &lt;code&gt;SerialClob&lt;/code&gt; to ensure
                  serializability.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;p&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;p&gt;
                  After this method has been called, a call to the
                  method &lt;code&gt;getParams&lt;/code&gt;
                  will return an object array of the current command parameters, which will
                  include the &lt;code&gt;Clob&lt;/code&gt; object set for placeholder parameter number
                  &lt;code&gt;parameterIndex&lt;/code&gt;.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>Clob</code> object representing an SQL
                      <code>CLOB</code> value; cannot be null                    
                </param>
                <throws>
                    SQLException if an error occurs; the parameter index is out of
                      bounds or the <code>Clob</code> is null                    
                </throws>
                <see>
                    #getParams                    
                </see>
                <see>
                    javax.sql.rowset.serial.SerialBlob                    
                </see>
            </javadoc>
            <method name="setClob" type="void" line="2860">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="Clob"/>
                </params>
                <scope line="2862"/>
            </method>
            <javadoc line="2868">
                Sets the designated parameter to an &lt;code&gt;Array&lt;/code&gt; object in the
                  Java programming language.  The driver converts this to an SQL
                  &lt;code&gt;ARRAY&lt;/code&gt; value when it sends it to the database. Internally,
                  the &lt;code&gt;Array&lt;/code&gt; is represented as a &lt;code&gt;SerialArray&lt;/code&gt;
                  to ensure serializability.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  Note: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;p&gt;
                  After this method has been called, a call to the
                  method &lt;code&gt;getParams&lt;/code&gt;
                  will return an object array of the current command parameters, which will
                  include the &lt;code&gt;Array&lt;/code&gt; object set for placeholder parameter number
                  &lt;code&gt;parameterIndex&lt;/code&gt;.
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is element number &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    array an <code>Array</code> object representing an SQL
                      <code>ARRAY</code> value; cannot be null. The <code>Array</code> object
                      passed to this method must return a non-null Object for all
                      <code>getArray()</code> method calls. A null value will cause a
                      <code>SQLException</code> to be thrown.                    
                </param>
                <throws>
                    SQLException if an error occurs; the parameter index is out of
                      bounds or the <code>ARRAY</code> is null                    
                </throws>
                <see>
                    #getParams                    
                </see>
                <see>
                    javax.sql.rowset.serial.SerialArray                    
                </see>
            </javadoc>
            <method name="setArray" type="void" line="2908">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="array" type="Array"/>
                </params>
                <scope line="2910"/>
            </method>
            <javadoc line="2916">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt;
                  object.
                  When the DBMS does not store time zone information, the driver will use
                  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct the SQL &lt;code&gt;DATE&lt;/code&gt;
                  value to send to the database. With a
                  &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom time zone.  If no &lt;code&gt;Calendar&lt;/code&gt;
                  object is specified, the driver uses the time zone of the Virtual Machine
                  that is running the application.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setDate&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.sql.Date&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;cal&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the date being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>java.sql.Date</code> object representing an SQL
                      <code>DATE</code> value                    
                </param>
                <param>
                    cal a <code>java.util.Calendar</code> object to use when
                      when constructing the date                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setDate" type="void" line="2968">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.sql.Date"/>
                    <param name="cal" type="Calendar"/>
                </params>
                <declaration name="date" type="Object" line="2969"/>
                <scope line="2975"/>
            </method>
            <javadoc line="2981">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt;
                  object.  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  When the DBMS does not store time zone information, the driver will use
                  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct the SQL &lt;code&gt;TIME&lt;/code&gt;
                  value to send to the database. With a
                  &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom time zone.  If no &lt;code&gt;Calendar&lt;/code&gt;
                  object is specified, the driver uses the time zone of the Virtual Machine
                  that is running the application.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setTime&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.sql.Time&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;cal&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the time being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>java.sql.Time</code> object                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object the driver can use to
                      construct the time                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setTime" type="void" line="3034">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.sql.Time"/>
                    <param name="cal" type="Calendar"/>
                </params>
                <declaration name="time" type="Object" line="3035"/>
                <scope line="3041"/>
            </method>
            <javadoc line="3047">
                Sets the designated parameter to the given
                  &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.  The driver converts this
                  to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the database.
                  &lt;P&gt;
                  When the DBMS does not store time zone information, the driver will use
                  the given &lt;code&gt;Calendar&lt;/code&gt; object to construct the SQL &lt;code&gt;TIMESTAMP&lt;/code&gt;
                  value to send to the database. With a
                  &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom time zone.  If no &lt;code&gt;Calendar&lt;/code&gt;
                  object is specified, the driver uses the time zone of the Virtual Machine
                  that is running the application.
                  &lt;P&gt;
                  The parameter value set by this method is stored internally and
                  will be supplied as the appropriate parameter in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s command when the method &lt;code&gt;execute&lt;/code&gt; is called.
                  Methods such as &lt;code&gt;execute&lt;/code&gt; and &lt;code&gt;populate&lt;/code&gt; must be
                  provided in any class that extends this class and implements one or
                  more of the standard JSR-114 &lt;code&gt;RowSet&lt;/code&gt; interfaces.
                  &lt;P&gt;
                  NOTE: &lt;code&gt;JdbcRowSet&lt;/code&gt; does not require the &lt;code&gt;populate&lt;/code&gt; method
                  as it is undefined in this class.
                  &lt;P&gt;
                  Calls made to the method &lt;code&gt;getParams&lt;/code&gt; after this version of
                  &lt;code&gt;setTimestamp&lt;/code&gt;
                  has been called will return an array containing the parameter values that
                  have been set.  In that array, the element that represents the values
                  set with this method will itself be an array. The first element of that array
                  is the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; object.
                  The second element is the value set for &lt;i&gt;cal&lt;/i&gt;.
                  The parameter number is indicated by an element&apos;s position in the array
                  returned by the method &lt;code&gt;getParams&lt;/code&gt;,
                  with the first element being the value for the first placeholder parameter, the
                  second element being the value for the second placeholder parameter, and so on.
                  In other words, if the timestamp being set is the value for the second
                  placeholder parameter, the array containing it will be the second element in
                  the array returned by &lt;code&gt;getParams&lt;/code&gt;.
                  &lt;P&gt;
                  Note that because the numbering of elements in an array starts at zero,
                  the array element that corresponds to placeholder parameter number
                  &lt;i&gt;parameterIndex&lt;/i&gt; is &lt;i&gt;parameterIndex&lt;/i&gt; -1.                
                <param>
                    parameterIndex the ordinal number of the placeholder parameter
                      in this <code>RowSet</code> object's command that is to be set.
                      The first parameter is 1, the second is 2, and so on; must be
                      <code>1</code> or greater                    
                </param>
                <param>
                    x a <code>java.sql.Timestamp</code> object                    
                </param>
                <param>
                    cal the <code>java.util.Calendar</code> object the driver can use to
                      construct the timestamp                    
                </param>
                <throws>
                    SQLException if an error occurs or the
                      parameter index is out of bounds                    
                </throws>
                <see>
                    #getParams                    
                </see>
            </javadoc>
            <method name="setTimestamp" type="void" line="3100">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.sql.Timestamp"/>
                    <param name="cal" type="Calendar"/>
                </params>
                <declaration name="timestamp" type="Object" line="3101"/>
                <scope line="3107"/>
            </method>
            <javadoc line="3113">
                Clears all of the current parameter values in this &lt;code&gt;RowSet&lt;/code&gt;
                  object&apos;s internal representation of the parameters to be set in
                  this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command when it is executed.
                  &lt;P&gt;
                  In general, parameter values remain in force for repeated use in
                  this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command. Setting a parameter value with the
                  setter methods automatically clears the value of the
                  designated parameter and replaces it with the new specified value.
                  &lt;P&gt;
                  This method is called internally by the &lt;code&gt;setCommand&lt;/code&gt;
                  method to clear all of the parameters set for the previous command.
                  &lt;P&gt;
                  Furthermore, this method differs from the &lt;code&gt;initParams&lt;/code&gt;
                  method in that it maintains the schema of the &lt;code&gt;RowSet&lt;/code&gt; object.                
                <throws>
                    SQLException if an error occurs clearing the parameters                    
                </throws>
            </javadoc>
            <method name="clearParameters" type="void" line="3131"/>
            <javadoc line="3135">
                Retrieves an array containing the parameter values (both Objects and
                  primitives) that have been set for this
                  &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command and throws an &lt;code&gt;SQLException&lt;/code&gt; object
                  if all parameters have not been set.   Before the command is sent to the
                  DBMS to be executed, these parameters will be substituted
                  for placeholder parameters in the  &lt;code&gt;PreparedStatement&lt;/code&gt; object
                  that is the command for a &lt;code&gt;RowSet&lt;/code&gt; implementation extending
                  the &lt;code&gt;BaseRowSet&lt;/code&gt; class.
                  &lt;P&gt;
                  Each element in the array that is returned is an &lt;code&gt;Object&lt;/code&gt; instance
                  that contains the values of the parameters supplied to a setter method.
                  The order of the elements is determined by the value supplied for
                  &lt;i&gt;parameterIndex&lt;/i&gt;.  If the setter method takes only the parameter index
                  and the value to be set (possibly null), the array element will contain the value to be set
                  (which will be expressed as an &lt;code&gt;Object&lt;/code&gt;).  If there are additional
                  parameters, the array element will itself be an array containing the value to be set
                  plus any additional parameter values supplied to the setter method. If the method
                  sets a stream, the array element includes the type of stream being supplied to the
                  method. These additional parameters are for the use of the driver or the DBMS and may or
                  may not be used.
                  &lt;P&gt;
                  NOTE: Stored parameter values of types &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;,
                  &lt;code&gt;Clob&lt;/code&gt; and &lt;code&gt;Ref&lt;/code&gt; are returned as &lt;code&gt;SerialArray&lt;/code&gt;,
                  &lt;code&gt;SerialBlob&lt;/code&gt;, &lt;code&gt;SerialClob&lt;/code&gt; and &lt;code&gt;SerialRef&lt;/code&gt;
                  respectively.                
                <return>
                    an array of <code>Object</code> instances that includes the
                      parameter values that may be set in this <code>RowSet</code> object's
                      command; an empty array if no parameters have been set                    
                </return>
                <throws>
                    SQLException if an error occurs retrieveing the object array of
                      parameters of this <code>RowSet</code> object or if not all parameters have
                      been set                    
                </throws>
            </javadoc>
            <method name="getParams" type="Object[]" line="3169">
                <comment line="3178">
                    The parameters may be set in random order
                     but all must be set, check to verify all
                     have been set till the last parameter
                     else throw exception.                    
                </comment>
                <comment line="3188">
                    end if                    
                </comment>
                <comment line="3189">
                    end for                    
                </comment>
                <comment line="3192">
                    end if                    
                </comment>
                <scope line="3170">
                    <declaration name="paramsArray" type="Object[]" line="3173"/>
                </scope>
                <scope line="3176">
                    <declaration name="paramsArray" type="Object[]" line="3182"/>
                    <scope line="3183">
                        <scope line="3185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3196">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; You must specify the parameter&apos;s SQL type.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType the SQL type code defined in <code>java.sql.Types</code>                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="3209">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="sqlType" type="int"/>
                </params>
            </method>
            <javadoc line="3214">
                Sets the designated parameter to SQL &lt;code&gt;NULL&lt;/code&gt;.
                  This version of the method &lt;code&gt;setNull&lt;/code&gt; should
                  be used for user-defined types and REF type parameters.  Examples
                  of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and
                  named array types.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; To be portable, applications must give the
                  SQL type code and the fully-qualified SQL type name when specifying
                  a NULL user-defined or REF parameter.  In the case of a user-defined type
                  the name is the type name of the parameter itself.  For a REF
                  parameter, the name is the type name of the referenced type.  If
                  a JDBC driver does not need the type code or type name information,
                  it may ignore it.
                  Although it is intended for user-defined and Ref parameters,
                  this method may be used to set a null parameter of any JDBC type.
                  If the parameter does not have a user-defined or REF type, the given
                  typeName is ignored.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    sqlType a value from <code>java.sql.Types</code>                    
                </param>
                <param>
                    typeName the fully-qualified name of an SQL user-defined type;
                      ignored if the parameter is not a user-defined type or
                      SQL <code>REF</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setNull" type="void" line="3247">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="sqlType" type="int"/>
                    <param name="typeName" type="String"/>
                </params>
            </method>
            <javadoc line="3253">
                Sets the designated parameter to the given Java &lt;code&gt;boolean&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIT&lt;/code&gt; or &lt;code&gt;BOOLEAN&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBoolean" type="void" line="3267">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="boolean"/>
                </params>
            </method>
            <javadoc line="3273">
                Sets the designated parameter to the given Java &lt;code&gt;byte&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TINYINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setByte" type="void" line="3287">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="3293">
                Sets the designated parameter to the given Java &lt;code&gt;short&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;SMALLINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setShort" type="void" line="3307">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="short"/>
                </params>
            </method>
            <javadoc line="3312">
                Sets the designated parameter to the given Java &lt;code&gt;int&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;INTEGER&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setInt" type="void" line="3326">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="3331">
                Sets the designated parameter to the given Java &lt;code&gt;long&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;BIGINT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setLong" type="void" line="3345">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="long"/>
                </params>
            </method>
            <javadoc line="3350">
                Sets the designated parameter to the given Java &lt;code&gt;float&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;FLOAT&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFloat" type="void" line="3364">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="float"/>
                </params>
            </method>
            <javadoc line="3369">
                Sets the designated parameter to the given Java &lt;code&gt;double&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;DOUBLE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDouble" type="void" line="3383">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="double"/>
                </params>
            </method>
            <javadoc line="3389">
                Sets the designated parameter to the given
                  &lt;code&gt;java.math.BigDecimal&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;NUMERIC&lt;/code&gt; value when
                  it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBigDecimal" type="void" line="3404">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="BigDecimal"/>
                </params>
            </method>
            <javadoc line="3410">
                Sets the designated parameter to the given Java &lt;code&gt;String&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;LONGVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;VARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setString" type="void" line="3427">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="String"/>
                </params>
            </method>
            <javadoc line="3433">
                Sets the designated parameter to the given Java array of bytes.
                  The driver converts this to an SQL &lt;code&gt;VARBINARY&lt;/code&gt; or
                  &lt;code&gt;LONGVARBINARY&lt;/code&gt; (depending on the argument&apos;s size relative
                  to the driver&apos;s limits on &lt;code&gt;VARBINARY&lt;/code&gt; values) when it sends
                  it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBytes" type="void" line="3449">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="byte"/>
                </params>
            </method>
            <javadoc line="3455">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value.
                  The driver
                  converts this to an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="3471">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                </params>
            </method>
            <javadoc line="3477">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="3500">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="3505">
                Sets the designated parameter to the given input stream, which will have
                  the specified number of bytes.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <param>
                    length the number of bytes in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="3527">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="3532">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object, which is the given number of characters long.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that
                      contains the UNICODE data used as the designated parameter                    
                </param>
                <param>
                    length the number of characters in the stream                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="3557">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                    <param name="length" type="int"/>
                </params>
            </method>
            <javadoc line="3562">
                Sets the designated parameter to the given input stream.
                  When a very large ASCII value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt;. Data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from ASCII to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setAsciiStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the Java input stream that contains the ASCII parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setAsciiStream" type="void" line="3585">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="3590">
                Sets the designated parameter to the given input stream.
                  When a very large binary value is input to a &lt;code&gt;LONGVARBINARY&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.InputStream&lt;/code&gt; object. The data will be read from the
                  stream as needed until end-of-file is reached.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBinaryStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the java input stream which contains the binary parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBinaryStream" type="void" line="3612">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.io.InputStream"/>
                </params>
            </method>
            <javadoc line="3618">
                Sets the designated parameter to the given &lt;code&gt;Reader&lt;/code&gt;
                  object.
                  When a very large UNICODE value is input to a &lt;code&gt;LONGVARCHAR&lt;/code&gt;
                  parameter, it may be more practical to send it via a
                  &lt;code&gt;java.io.Reader&lt;/code&gt; object. The data will be read from the stream
                  as needed until end-of-file is reached.  The JDBC driver will
                  do any necessary conversion from UNICODE to the database char format.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader the <code>java.io.Reader</code> object that contains the
                      Unicode data                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCharacterStream" type="void" line="3643">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="java.io.Reader"/>
                </params>
            </method>
            <javadoc line="3648">
                Sets the designated parameter in this &lt;code&gt;RowSet&lt;/code&gt; object&apos;s command
                  to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="3671">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="Reader"/>
                </params>
            </method>
            <javadoc line="3677">
                Sets the value of the designated parameter with the given object. The second
                  argument must be an object type; for integral values, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used.
                  &lt;p&gt;The given Java object will be converted to the given targetSqlType
                  before being sent to the database.
                  If the object has a custom mapping (is of a class implementing the
                  interface &lt;code&gt;SQLData&lt;/code&gt;),
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it
                  to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  Note that this method may be used to pass datatabase-
                  specific abstract data types.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database. The scale argument may further qualify this type.                    
                </param>
                <param>
                    scale for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types,
                      this is the number of digits after the decimal point.  For all other
                      types, this value will be ignored.                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    Types                    
                </see>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="3719">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                    <param name="scale" type="int"/>
                </params>
            </method>
            <javadoc line="3725">
                Sets the value of the designated parameter with the given object.
                  This method is like the method &lt;code&gt;setObject&lt;/code&gt;
                  above, except that it assumes a scale of zero.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <param>
                    targetSqlType the SQL type (as defined in java.sql.Types) to be
                      sent to the database                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if <code>targetSqlType</code> is
                      a <code>ARRAY</code>, <code>BLOB</code>, <code>CLOB</code>,
                      <code>DATALINK</code>, <code>JAVA_OBJECT</code>, <code>NCHAR</code>,
                      <code>NCLOB</code>, <code>NVARCHAR</code>, <code>LONGNVARCHAR</code>,
                      <code>REF</code>, <code>ROWID</code>, <code>SQLXML</code>
                      or  <code>STRUCT</code> data type and the JDBC driver does not support
                      this data type                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="3747">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                    <param name="targetSqlType" type="int"/>
                </params>
            </method>
            <javadoc line="3752">
                Sets the value of the designated parameter with the given object.
                  The second parameter must be of type &lt;code&gt;Object&lt;/code&gt;; therefore, the
                  &lt;code&gt;java.lang&lt;/code&gt; equivalent objects should be used for built-in types.
                  &lt;p&gt;The JDBC specification specifies a standard mapping from
                  Java &lt;code&gt;Object&lt;/code&gt; types to SQL types.  The given argument
                  will be converted to the corresponding SQL type before being
                  sent to the database.
                  &lt;p&gt;Note that this method may be used to pass datatabase-
                  specific abstract data types, by using a driver-specific Java
                  type.
                  If the object is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;,
                  the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt;
                  to write it to the SQL data stream.
                  If, on the other hand, the object is of a class implementing
                  &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;,  &lt;code&gt;NClob&lt;/code&gt;,
                  &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;,
                  or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a
                  value of the corresponding SQL type.
                  &lt;P&gt;
                  This method throws an exception if there is an ambiguity, for example, if the
                  object is of a class implementing more than one of the interfaces named above.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the object containing the input parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>CallableStatement</code> or if the given
                      <code>Object</code> parameter is ambiguous                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setObject" type="void" line="3788">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Object"/>
                </params>
            </method>
            <javadoc line="3794">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The inputstream must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code>,
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  if the length specified
                      is less than zero or if the number of bytes in the inputstream does not match
                      the specfied length.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="3819">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="3824">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1,
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs,
                      this method is called on a closed <code>PreparedStatement</code> or
                      if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="3849">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="3854">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.  The &lt;code&gt;inputstream&lt;/code&gt; must contain  the number
                  of characters specified by length, otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream, int)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set
                      the second is 2, ...                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <param>
                    length the number of bytes in the parameter data.                    
                </param>
                <throws>
                    SQLException  if parameterIndex does not correspond
                      to a parameter marker in the SQL statement,  or if the length specified
                      is less than zero; if the number of bytes in the inputstream does not match
                      the specfied length; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="3881">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="3886">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Blob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;BLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Blob</code> object that maps an SQL <code>BLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="3899">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Blob"/>
                </params>
            </method>
            <javadoc line="3904">
                Sets the designated parameter to a &lt;code&gt;InputStream&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setBinaryStream (int, InputStream)&lt;/code&gt;
                  method because it informs the driver that the parameter value should be
                  sent to the server as a &lt;code&gt;BLOB&lt;/code&gt;.  When the &lt;code&gt;setBinaryStream&lt;/code&gt; method is used,
                  the driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARBINARY&lt;/code&gt; or a &lt;code&gt;BLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setBlob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    inputStream An object that contains the data to set the parameter
                      value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setBlob" type="void" line="3926">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="inputStream" type="InputStream"/>
                </params>
            </method>
            <javadoc line="3931">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>, if parameterIndex does not correspond to a parameter
                      marker in the SQL statement, or if the length specified is less than zero.                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="3951">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="3956">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method is called on
                      a closed <code>PreparedStatement</code>or if parameterIndex does not correspond to a parameter
                      marker in the SQL statement                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="3978">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="3983">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="4005">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="4010">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Clob&lt;/code&gt; object.
                  The driver converts this to an SQL &lt;code&gt;CLOB&lt;/code&gt; value when it
                  sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x a <code>Clob</code> object that maps an SQL <code>CLOB</code> value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="4023">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="Clob"/>
                </params>
            </method>
            <javadoc line="4028">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;CLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGVARCHAR&lt;/code&gt; or a &lt;code&gt;CLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if a database access error occurs or this method is called on
                      a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setClob" type="void" line="4049">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="4054">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value
                  using the default time zone of the virtual machine that is running
                  the application.
                  The driver converts this
                  to an SQL &lt;code&gt;DATE&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="4071">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                </params>
            </method>
            <javadoc line="4076">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Date&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;DATE&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the date
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the date                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDate" type="void" line="4098">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Date"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="4103">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value.
                  The driver converts this
                  to an SQL &lt;code&gt;TIME&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="4118">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                </params>
            </method>
            <javadoc line="4123">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Time&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIME&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the time
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the time                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTime" type="void" line="4145">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Time"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="4150">
                Sets the designated parameter to the given &lt;code&gt;java.sql.Timestamp&lt;/code&gt; value,
                  using the given &lt;code&gt;Calendar&lt;/code&gt; object.  The driver uses
                  the &lt;code&gt;Calendar&lt;/code&gt; object to construct an SQL &lt;code&gt;TIMESTAMP&lt;/code&gt; value,
                  which the driver then sends to the database.  With a
                  a &lt;code&gt;Calendar&lt;/code&gt; object, the driver can calculate the timestamp
                  taking into account a custom timezone.  If no
                  &lt;code&gt;Calendar&lt;/code&gt; object is specified, the driver uses the default
                  timezone, which is that of the virtual machine running the application.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <param>
                    cal the <code>Calendar</code> object the driver will use
                      to construct the timestamp                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <see>
                    #getParams                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setTimestamp" type="void" line="4172">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="java.sql.Timestamp"/>
                    <param name="cal" type="Calendar"/>
                </params>
            </method>
            <javadoc line="4177">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  SQL &lt;code&gt;XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an SQL <code>XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method
                      is called on a closed result set,
                      the <code>java.xml.transform.Result</code>,
                      <code>Writer</code> or <code>OutputStream</code> has not been closed
                      for the <code>SQLXML</code> object  or
                      if there is an error processing the XML value.  The <code>getCause</code> method
                      of the exception may provide a more detailed exception, for example, if the
                      stream does not contain valid XML.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="4192">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="4197">
                Sets the designated parameter to the given &lt;code&gt;java.sql.SQLXML&lt;/code&gt; object. The driver converts this to an
                  &lt;code&gt;SQL XML&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    xmlObject a <code>SQLXML</code> object that maps an <code>SQL XML</code> value                    
                </param>
                <throws>
                    SQLException if a database access error occurs, this method
                      is called on a closed result set,
                      the <code>java.xml.transform.Result</code>,
                      <code>Writer</code> or <code>OutputStream</code> has not been closed
                      for the <code>SQLXML</code> object  or
                      if there is an error processing the XML value.  The <code>getCause</code> method
                      of the exception may provide a more detailed exception, for example, if the
                      stream does not contain valid XML.                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setSQLXML" type="void" line="4212">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="xmlObject" type="SQLXML"/>
                </params>
            </method>
            <javadoc line="4217">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; value when it sends it
                  to the database                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="4228">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="4233">
                Sets the designated parameter to the given &lt;code&gt;java.sql.RowId&lt;/code&gt; object. The
                  driver converts this to a SQL &lt;code&gt;ROWID&lt;/code&gt; when it sends it to the
                  database.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    x the parameter value                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setRowId" type="void" line="4243">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="x" type="RowId"/>
                </params>
            </method>
            <javadoc line="4247">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt; value
                  (depending on the argument&apos;s
                  size relative to the driver&apos;s limits on &lt;code&gt;NVARCHAR&lt;/code&gt; values)
                  when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="4262">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="4267">
                Sets the designated paramter to the given &lt;code&gt;String&lt;/code&gt; object.
                  The driver converts this to a SQL &lt;code&gt;NCHAR&lt;/code&gt; or
                  &lt;code&gt;NVARCHAR&lt;/code&gt; or &lt;code&gt;LONGNVARCHAR&lt;/code&gt;                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNString" type="void" line="4279">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="4284">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="4297">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="4302">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="4316">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="4321">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object. The
                  &lt;code&gt;Reader&lt;/code&gt; reads the data till end-of-file is reached. The
                  driver does the necessary conversion from Java character format to
                  the national character set in the database.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; This stream object can either be a standard
                  Java stream object or your own subclass that implements the
                  standard interface.
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNCharacterStream&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; if a database access error occurs; or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNCharacterStream" type="void" line="4343">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="Reader"/>
                </params>
            </method>
            <javadoc line="4348">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The object
                  implements the &lt;code&gt;java.sql.NClob&lt;/code&gt; interface. This &lt;code&gt;NClob&lt;/code&gt;
                  object maps to a SQL &lt;code&gt;NCLOB&lt;/code&gt;.                
                <param>
                    parameterName the name of the column to be set                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4359">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="value" type="NClob"/>
                </params>
            </method>
            <javadoc line="4364">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The &lt;code&gt;reader&lt;/code&gt; must contain     the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;CallableStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterName the name of the parameter to be set                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur; if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4388">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="4393">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be send to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterName the name of the parameter                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>CallableStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4415">
                <params>
                    <param name="parameterName" type="String"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="4420">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.  The reader must contain  the number
                  of characters specified by length otherwise a &lt;code&gt;SQLException&lt;/code&gt; will be
                  generated when the &lt;code&gt;PreparedStatement&lt;/code&gt; is executed.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader, int)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <param>
                    length the number of characters in the parameter data.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement; if the length specified is less than zero;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4443">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="4448">
                Sets the designated parameter to a &lt;code&gt;java.sql.NClob&lt;/code&gt; object. The driver converts this oa
                  SQL &lt;code&gt;NCLOB&lt;/code&gt; value when it sends it to the database.                
                <param>
                    parameterIndex of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    value the parameter value                    
                </param>
                <throws>
                    SQLException if the driver does not support national
                      character sets;  if the driver can detect that a data conversion
                      error could occur ; or if a database access error occurs                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4458">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="value" type="NClob"/>
                </params>
            </method>
            <javadoc line="4463">
                Sets the designated parameter to a &lt;code&gt;Reader&lt;/code&gt; object.
                  This method differs from the &lt;code&gt;setCharacterStream (int, Reader)&lt;/code&gt; method
                  because it informs the driver that the parameter value should be sent to
                  the server as a &lt;code&gt;NCLOB&lt;/code&gt;.  When the &lt;code&gt;setCharacterStream&lt;/code&gt; method is used, the
                  driver may have to do extra work to determine whether the parameter
                  data should be sent to the server as a &lt;code&gt;LONGNVARCHAR&lt;/code&gt; or a &lt;code&gt;NCLOB&lt;/code&gt;
                  &lt;P&gt;&lt;B&gt;Note:&lt;/B&gt; Consult your JDBC driver documentation to determine if
                  it might be more efficient to use a version of
                  &lt;code&gt;setNClob&lt;/code&gt; which takes a length parameter.                
                <param>
                    parameterIndex index of the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    reader An object that contains the data to set the parameter value to.                    
                </param>
                <throws>
                    SQLException if parameterIndex does not correspond to a parameter
                      marker in the SQL statement;
                      if the driver does not support national character sets;
                      if the driver can detect that a data conversion
                      error could occur;  if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </throws>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setNClob" type="void" line="4487">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="4492">
                Sets the designated parameter to the given &lt;code&gt;java.net.URL&lt;/code&gt; value.
                  The driver converts this to an SQL &lt;code&gt;DATALINK&lt;/code&gt; value
                  when it sends it to the database.                
                <param>
                    parameterIndex the first parameter is 1, the second is 2, ...                    
                </param>
                <param>
                    x the <code>java.net.URL</code> object to be set                    
                </param>
                <exception>
                    SQLException if a database access error occurs or
                      this method is called on a closed <code>PreparedStatement</code>                    
                </exception>
                <throws>
                    SQLFeatureNotSupportedException  if the JDBC driver does not support this method                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setURL" type="void" line="4504">
                <params>
                    <param name="parameterIndex" type="int"/>
                    <param name="x" type="java.net.URL"/>
                </params>
            </method>
            <declaration name="serialVersionUID" type="long" line="4510"/>
        </class>
    </source>