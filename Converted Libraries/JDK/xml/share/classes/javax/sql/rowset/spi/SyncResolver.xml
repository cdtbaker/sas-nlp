<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset.spi">
        <import package="javax.sql.RowSet"/>
        <import package="java.sql.SQLException"/>
        <interface name="SyncResolver">
            <implements interface="RowSet"/>
            <javadoc line="31">
                Defines a framework that allows applications to use a manual decision tree
                  to decide what should be done when a synchronization conflict occurs.
                  Although it is not mandatory for
                  applications to resolve synchronization conflicts manually, this
                  framework provides the means to delegate to the application when conflicts
                  arise.
                  &lt;p&gt;
                  Note that a conflict is a situation where the &lt;code&gt;RowSet&lt;/code&gt; object&apos;s original
                  values for a row do not match the values in the data source, which indicates that
                  the data source row has been modified since the last synchronization. Note also that
                  a &lt;code&gt;RowSet&lt;/code&gt; object&apos;s original values are the values it had just prior to the
                  the last synchronization, which are not necessarily its initial values.
                  &lt;p&gt;
                  &lt;H2&gt;Description of a &lt;code&gt;SyncResolver&lt;/code&gt; Object&lt;/H2&gt;
                  A &lt;code&gt;SyncResolver&lt;/code&gt; object is a specialized &lt;code&gt;RowSet&lt;/code&gt; object
                  that implements the &lt;code&gt;SyncResolver&lt;/code&gt; interface.
                  It &lt;b&gt;may&lt;/b&gt; operate as either a connected &lt;code&gt;RowSet&lt;/code&gt; object (an
                  implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface) or a connected
                  &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the
                  &lt;code&gt;CachedRowSet&lt;/code&gt; interface or one of its subinterfaces). For information
                  on the subinterfaces, see the
                  &lt;a href=&quot;../package-summary.html&quot;&gt;&lt;code&gt;javax.sql.rowset&lt;/code&gt;&lt;/a&gt; package
                  description. The reference implementation for &lt;code&gt;SyncResolver&lt;/code&gt; implements
                  the &lt;code&gt;CachedRowSet&lt;/code&gt; interface, but other implementations
                  may choose to implement the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface to satisfy
                  particular needs.
                  &lt;P&gt;
                  After an application has attempted to synchronize a &lt;code&gt;RowSet&lt;/code&gt; object with
                  the data source (by calling the &lt;code&gt;CachedRowSet&lt;/code&gt;
                  method &lt;code&gt;acceptChanges&lt;/code&gt;), and one or more conflicts have been found,
                  a rowset&apos;s &lt;code&gt;SyncProvider&lt;/code&gt; object creates an instance of
                  &lt;code&gt;SyncResolver&lt;/code&gt;. This new &lt;code&gt;SyncResolver&lt;/code&gt; object has
                  the same number of rows and columns as the
                  &lt;code&gt;RowSet&lt;/code&gt; object that was attempting the synchronization. The
                  &lt;code&gt;SyncResolver&lt;/code&gt; object contains the values from the data source that caused
                  the conflict(s) and &lt;code&gt;null&lt;/code&gt; for all other values.
                  In addition, it contains information about each conflict.
                  &lt;P&gt;
                  &lt;H2&gt;Getting and Using a &lt;code&gt;SyncResolver&lt;/code&gt; Object&lt;/H2&gt;
                  When the method &lt;code&gt;acceptChanges&lt;/code&gt; encounters conflicts, the
                  &lt;code&gt;SyncProvider&lt;/code&gt; object creates a &lt;code&gt;SyncProviderException&lt;/code&gt;
                  object and sets it with the new &lt;code&gt;SyncResolver&lt;/code&gt; object. The method
                  &lt;code&gt;acceptChanges&lt;/code&gt; will throw this exception, which
                  the application can then catch and use to retrieve the
                  &lt;code&gt;SyncResolver&lt;/code&gt; object it contains. The following code snippet uses the
                  &lt;code&gt;SyncProviderException&lt;/code&gt; method &lt;code&gt;getSyncResolver&lt;/code&gt; to get
                  the &lt;code&gt;SyncResolver&lt;/code&gt; object &lt;i&gt;resolver&lt;/i&gt;.
                  &lt;PRE&gt;
                  } catch (SyncProviderException spe) {
                  SyncResolver resolver = spe.getSyncResolver();
                  ...
                  }
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  With &lt;i&gt;resolver&lt;/i&gt; in hand, an application can use it to get the information
                  it contains about the conflict or conflicts.  A &lt;code&gt;SyncResolver&lt;/code&gt; object
                  such as &lt;i&gt;resolver&lt;/i&gt; keeps
                  track of the conflicts for each row in which there is a conflict.  It also places a
                  lock on the table or tables affected by the rowset&apos;s command so that no more
                  conflicts can occur while the current conflicts are being resolved.
                  &lt;P&gt;
                  The following kinds of information can be obtained from a &lt;code&gt;SyncResolver&lt;/code&gt;
                  object:
                  &lt;P&gt;
                  &lt;LI&gt;What operation was being attempted when a conflict occurred&lt;BR&gt;
                  The &lt;code&gt;SyncProvider&lt;/code&gt; interface defines four constants
                  describing states that may occur. Three
                  constants describe the type of operation (update, delete, or insert) that a
                  &lt;code&gt;RowSet&lt;/code&gt; object was attempting to perform when a conflict was discovered,
                  and the fourth indicates that there is no conflict.
                  These constants are the possible return values when a &lt;code&gt;SyncResolver&lt;/code&gt; object
                  calls the method &lt;code&gt;getStatus&lt;/code&gt;.
                  &lt;PRE&gt;
                  int operation = resolver.getStatus();
                  &lt;/PRE&gt;
                  &lt;P&gt;
                  &lt;LI&gt;The value in the data source that caused a conflict&lt;BR&gt;
                  A conflict exists when a value that a &lt;code&gt;RowSet&lt;/code&gt; object has changed
                  and is attempting to write to the data source
                  has also been changed in the data source since the last synchronization.  An
                  application can call the &lt;code&gt;SyncResolver&lt;/code&gt; method
                  &lt;code&gt;getConflictValue&lt;/code &gt; to retrieve the
                  value in the data source that is the cause of the conflict because the values in a
                  &lt;code&gt;SyncResolver&lt;/code&gt; object are the conflict values from the data source.
                  &lt;PRE&gt;
                  java.lang.Object conflictValue = resolver.getConflictValue(2);
                  &lt;/PRE&gt;
                  Note that the column in &lt;i&gt;resolver&lt;/i&gt; can be designated by the column number,
                  as is done in the preceding line of code, or by the column name.
                  &lt;/UL&gt;
                  &lt;P&gt;
                  With the information retrieved from the methods &lt;code&gt;getStatus&lt;/code&gt; and
                  &lt;code&gt;getConflictValue&lt;/code&gt;, the application may make a determination as to
                  which value should be persisted in the data source. The application then calls the
                  &lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;setResolvedValue&lt;/code&gt;, which sets the value
                  to be persisted in the &lt;code&gt;RowSet&lt;/code&gt; object and also in the data source.
                  &lt;PRE&gt;
                  resolver.setResolvedValue(&quot;DEPT&quot;, 8390426);
                  &lt;/PRE&gt;
                  In the preceding line of code,
                  the column name designates the column in the &lt;code&gt;RowSet&lt;/code&gt; object
                  that is to be set with the given value. The column number can also be used to
                  designate the column.
                  &lt;P&gt;
                  An application calls the method &lt;code&gt;setResolvedValue&lt;/code&gt; after it has
                  resolved all of the conflicts in the current conflict row and repeats this process
                  for each conflict row in the &lt;code&gt;SyncResolver&lt;/code&gt; object.
                  &lt;P&gt;
                  &lt;H2&gt;Navigating a &lt;code&gt;SyncResolver&lt;/code&gt; Object&lt;/H2&gt;
                  Because a &lt;code&gt;SyncResolver&lt;/code&gt; object is a &lt;code&gt;RowSet&lt;/code&gt; object, an
                  application can use all of the &lt;code&gt;RowSet&lt;/code&gt; methods for moving the cursor
                  to navigate a &lt;code&gt;SyncResolver&lt;/code&gt; object. For example, an application can
                  use the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;next&lt;/code&gt; to get to each row and then
                  call the &lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;getStatus&lt;/code&gt; to see if the row
                  contains a conflict.  In a row with one or more conflicts, the application can
                  iterate through the columns to find any non-null values, which will be the values
                  from the data source that are in conflict.
                  &lt;P&gt;
                  To make it easier to navigate a &lt;code&gt;SyncResolver&lt;/code&gt; object, especially when
                  there are large numbers of rows with no conflicts, the &lt;code&gt;SyncResolver&lt;/code&gt;
                  interface defines the methods &lt;code&gt;nextConflict&lt;/code&gt; and
                  &lt;code&gt;previousConflict&lt;/code&gt;, which move only to rows
                  that contain at least one conflict value. Then an application can call the
                  &lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;getConflictValue&lt;/code&gt;, supplying it
                  with the column number, to get the conflict value itself. The code fragment in the
                  next section gives an example.
                  &lt;H2&gt;Code Example&lt;/H2&gt;
                  The following code fragment demonstrates how a disconnected &lt;code&gt;RowSet&lt;/code&gt;
                  object &lt;i&gt;crs&lt;/i&gt; might attempt to synchronize itself with the
                  underlying data source and then resolve the conflicts. In the &lt;code&gt;try&lt;/code&gt;
                  block, &lt;i&gt;crs&lt;/i&gt; calls the method &lt;code&gt;acceptChanges&lt;/code&gt;, passing it the
                  &lt;code&gt;Connection&lt;/code&gt; object &lt;i&gt;con&lt;/i&gt;.  If there are no conflicts, the
                  changes in &lt;i&gt;crs&lt;/i&gt; are simply written to the data source.  However, if there
                  is a conflict, the method &lt;code&gt;acceptChanges&lt;/code&gt; throws a
                  &lt;code&gt;SyncProviderException&lt;/code&gt; object, and the
                  &lt;code&gt;catch&lt;/code&gt; block takes effect.  In this example, which
                  illustrates one of the many ways a &lt;code&gt;SyncResolver&lt;/code&gt; object can be used,
                  the &lt;code&gt;SyncResolver&lt;/code&gt; method &lt;code&gt;nextConflict&lt;/code&gt; is used in a
                  &lt;code&gt;while&lt;/code&gt; loop. The loop will end when &lt;code&gt;nextConflict&lt;/code&gt; returns
                  &lt;code&gt;false&lt;/code&gt;, which will occur when there are no more conflict rows in the
                  &lt;code&gt;SyncResolver&lt;/code&gt; object &lt;i&gt;resolver&lt;/i&gt;. In This particular code fragment,
                  &lt;i&gt;resolver&lt;/i&gt; looks for rows that have update conflicts (rows with the status
                  &lt;code&gt;SyncResolver.UPDATE_ROW_CONFLICT&lt;/code&gt;), and the rest of this code fragment
                  executes only for rows where conflicts occurred because &lt;i&gt;crs&lt;/i&gt; was attempting an
                  update.
                  &lt;P&gt;
                  After the cursor for &lt;i&gt;resolver&lt;/i&gt; has moved to the next conflict row that
                  has an update conflict, the method &lt;code&gt;getRow&lt;/code&gt; indicates the number of the
                  current row, and
                  the cursor for the &lt;code&gt;CachedRowSet&lt;/code&gt; object &lt;i&gt;crs&lt;/i&gt; is moved to
                  the comparable row in &lt;i&gt;crs&lt;/i&gt;. By iterating
                  through the columns of that row in both &lt;i&gt;resolver&lt;/i&gt; and &lt;i&gt;crs&lt;/i&gt;, the conflicting
                  values can be retrieved and compared to decide which one should be persisted. In this
                  code fragment, the value in &lt;i&gt;crs&lt;/i&gt; is the one set as the resolved value, which means
                  that it will be used to overwrite the conflict value in the data source.
                  &lt;PRE&gt;
                  try {
                  crs.acceptChanges(con);
                  } catch (SyncProviderException spe) {
                  SyncResolver resolver = spe.getSyncResolver();
                  Object crsValue;  // value in the &lt;code&gt;RowSet&lt;/code&gt; object
                  Object resolverValue:  // value in the &lt;code&gt;SyncResolver&lt;/code&gt; object
                  Object resolvedValue:  // value to be persisted
                  while(resolver.nextConflict())  {
                  if(resolver.getStatus() == SyncResolver.UPDATE_ROW_CONFLICT)  {
                  int row = resolver.getRow();
                  crs.absolute(row);
                  int colCount = crs.getMetaData().getColumnCount();
                  for(int j = 1; j &lt;= colCount; j++) {
                  if (resolver.getConflictValue(j) != null)  {
                  crsValue = crs.getObject(j);
                  resolverValue = resolver.getConflictValue(j);
                  . . .
                  // compare crsValue and resolverValue to determine
                  // which should be the resolved value (the value to persist)
                  resolvedValue = crsValue;
                  resolver.setResolvedValue(j, resolvedValue);
                  }
                  }
                  }
                  }
                  }
                  &lt;/PRE&gt;                
                <author>
                    Jonathan Bruce                    
                </author>
            </javadoc>
            <declaration name="UPDATE_ROW_CONFLICT" type="int" line="235"/>
            <javadoc line="235">
                Indicates that a conflict occurred while the &lt;code&gt;RowSet&lt;/code&gt; object was
                  attempting to update a row in the data source.
                  The values in the data source row to be updated differ from the
                  &lt;code&gt;RowSet&lt;/code&gt; object&apos;s original values for that row, which means that
                  the row in the data source has been updated or deleted since the last
                  synchronization.                
            </javadoc>
            <declaration name="DELETE_ROW_CONFLICT" type="int" line="245"/>
            <javadoc line="245">
                Indicates that a conflict occurred while the &lt;code&gt;RowSet&lt;/code&gt; object was
                  attempting to delete a row in the data source.
                  The values in the data source row to be updated differ from the
                  &lt;code&gt;RowSet&lt;/code&gt; object&apos;s original values for that row, which means that
                  the row in the data source has been updated or deleted since the last
                  synchronization.                
            </javadoc>
            <declaration name="INSERT_ROW_CONFLICT" type="int" line="255"/>
            <javadoc line="255">
                Indicates that a conflict occurred while the &lt;code&gt;RowSet&lt;/code&gt; object was
                  attempting to insert a row into the data source.  This means that a
                  row with the same primary key as the row to be inserted has been inserted
                  into the data source since the last synchronization.                
            </javadoc>
            <declaration name="NO_ROW_CONFLICT" type="int" line="263"/>
            <javadoc line="263">
                Indicates that &lt;b&gt;no&lt;/b&gt; conflict occured while the &lt;code&gt;RowSet&lt;/code&gt; object
                  was attempting to update, delete or insert a row in the data source. The values in
                  the &lt;code&gt;SyncResolver&lt;/code&gt; will contain &lt;code&gt;null&lt;/code&gt; values only as an indication
                  that no information in pertitent to the conflict resolution in this row.                
            </javadoc>
            <method name="getStatus" type="int" line="271"/>
            <javadoc line="271">
                Retrieves the conflict status of the current row of this &lt;code&gt;SyncResolver&lt;/code&gt;,
                  which indicates the operation
                  the &lt;code&gt;RowSet&lt;/code&gt; object was attempting when the conflict occurred.                
                <return>
                    one of the following constants:
                      <code>SyncResolver.UPDATE_ROW_CONFLICT</code>,
                      <code>SyncResolver.DELETE_ROW_CONFLICT</code>,
                      <code>SyncResolver.INSERT_ROW_CONFLICT</code>, or
                      <code>SyncResolver.NO_ROW_CONFLICT</code>                    
                </return>
            </javadoc>
            <method name="getConflictValue" type="Object" line="284"/>
            <javadoc line="284">
                Retrieves the value in the designated column in the current row of this
                  &lt;code&gt;SyncResolver&lt;/code&gt; object, which is the value in the data source
                  that caused a conflict.                
                <param>
                    index an <code>int</code> designating the column in this row of this
                      <code>SyncResolver</code> object from which to retrieve the value
                      causing a conflict                    
                </param>
                <return>
                    the value of the designated column in the current row of this
                      <code>SyncResolver</code> object                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="getConflictValue" type="Object" line="298"/>
            <javadoc line="298">
                Retrieves the value in the designated column in the current row of this
                  &lt;code&gt;SyncResolver&lt;/code&gt; object, which is the value in the data source
                  that caused a conflict.                
                <param>
                    columnName a <code>String</code> object designating the column in this row of this
                      <code>SyncResolver</code> object from which to retrieve the value
                      causing a conflict                    
                </param>
                <return>
                    the value of the designated column in the current row of this
                      <code>SyncResolver</code> object                    
                </return>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="setResolvedValue" type="void" line="312"/>
            <javadoc line="312">
                Sets &lt;i&gt;obj&lt;/i&gt; as the value in column &lt;i&gt;index&lt;/i&gt; in the current row of the
                  &lt;code&gt;RowSet&lt;/code&gt; object that is being synchronized. &lt;i&gt;obj&lt;/i&gt;
                  is set as the value in the data source internally.                
                <param>
                    index an <code>int</code> giving the number of the column into which to
                      set the value to be persisted                    
                </param>
                <param>
                    obj an <code>Object</code> that is the value to be set in the
                      <code>RowSet</code> object and persisted in the data source                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="setResolvedValue" type="void" line="325"/>
            <javadoc line="325">
                Sets &lt;i&gt;obj&lt;/i&gt; as the value in column &lt;i&gt;columnName&lt;/i&gt; in the current row of the
                  &lt;code&gt;RowSet&lt;/code&gt; object that is being synchronized. &lt;i&gt;obj&lt;/i&gt;
                  is set as the value in the data source internally.                
                <param>
                    columnName a <code>String</code> object giving the name of the column
                      into which to set the value to be persisted                    
                </param>
                <param>
                    obj an <code>Object</code> that is the value to be set in the
                      <code>RowSet</code> object and persisted in the data source                    
                </param>
                <throws>
                    SQLException if a database access error occurs                    
                </throws>
            </javadoc>
            <method name="nextConflict" type="boolean" line="338"/>
            <javadoc line="338">
                Moves the cursor down from its current position to the next row that contains
                  a conflict value. A &lt;code&gt;SyncResolver&lt;/code&gt; object&apos;s
                  cursor is initially positioned before the first conflict row; the first call to the
                  method &lt;code&gt;nextConflict&lt;/code&gt; makes the first conflict row the current row;
                  the second call makes the second conflict row the current row, and so on.
                  &lt;p&gt;
                  A call to the method &lt;code&gt;nextConflict&lt;/code&gt; will implicitly close
                  an input stream if one is open and will clear the &lt;code&gt;SyncResolver&lt;/code&gt;
                  object&apos;s warning chain.                
                <return>
                    <code>true</code> if the new current row is valid; <code>false</code>
                      if there are no more rows                    
                </return>
                <throws>
                    SQLException if a database access error occurs or the result set type
                      is <code>TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
            <method name="previousConflict" type="boolean" line="357"/>
            <javadoc line="357">
                Moves the cursor up from its current position to the previous conflict
                  row in this &lt;code&gt;SyncResolver&lt;/code&gt; object.
                  &lt;p&gt;
                  A call to the method &lt;code&gt;previousConflict&lt;/code&gt; will implicitly close
                  an input stream if one is open and will clear the &lt;code&gt;SyncResolver&lt;/code&gt;
                  object&apos;s warning chain.                
                <return>
                    <code>true</code> if the cursor is on a valid row; <code>false</code>
                      if it is off the result set                    
                </return>
                <throws>
                    SQLException if a database access error occurs or the result set type
                      is <code>TYPE_FORWARD_ONLY</code>                    
                </throws>
            </javadoc>
        </interface>
    </source>