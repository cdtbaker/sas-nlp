<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql.rowset.serial">
        <import package="java.sql"/>
        <import package="java.io"/>
        <import package="java.lang.reflect"/>
        <class name="SerialBlob" line="5">
            <implements interface="Blob"/>
            <implements interface="Serializable"/>
            <implements interface="Cloneable"/>
            <javadoc line="5">
                A serialized mapping in the Java programming language of an SQL
                  &lt;code&gt;BLOB&lt;/code&gt; value.
                  &lt;P&gt;
                  The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating
                  an instance from a &lt;code&gt;Blob&lt;/code&gt; object.  Note that the
                  &lt;code&gt;Blob&lt;/code&gt;
                  object should have brought the SQL &lt;code&gt;BLOB&lt;/code&gt; value&apos;s data over
                  to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object
                  is constructed from it.  The data of an SQL &lt;code&gt;BLOB&lt;/code&gt; value can
                  be materialized on the client as an array of bytes (using the method
                  &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes
                  (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).
                  &lt;P&gt;
                  &lt;code&gt;SerialBlob&lt;/code&gt; methods make it possible to make a copy of a
                  &lt;code&gt;SerialBlob&lt;/code&gt; object as an array of bytes or as a stream.
                  They also make it possible to locate a given pattern of bytes or a
                  &lt;code&gt;Blob&lt;/code&gt; object within a &lt;code&gt;SerialBlob&lt;/code&gt; object
                  and to update or truncate a &lt;code&gt;Blob&lt;/code&gt; object.                
                <author>
                    Jonathan Bruce                    
                </author>
            </javadoc>
            <declaration name="buf" type="byte" line="27"/>
            <javadoc line="27">
                A serialized array of uninterpreted bytes representing the
                  value of this &lt;code&gt;SerialBlob&lt;/code&gt; object.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="blob" type="Blob" line="33"/>
            <javadoc line="33">
                The internal representation of the &lt;code&gt;Blob&lt;/code&gt; object on which this
                  &lt;code&gt;SerialBlob&lt;/code&gt; object is based.                
            </javadoc>
            <declaration name="len" type="long" line="38"/>
            <javadoc line="38">
                The number of bytes in this &lt;code&gt;SerialBlob&lt;/code&gt; object&apos;s
                  array of bytes.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="origLen" type="long" line="44"/>
            <javadoc line="44">
                The orginal number of bytes in this &lt;code&gt;SerialBlob&lt;/code&gt; object&apos;s
                  array of bytes when it was first established.                
                <serial>
                                        
                </serial>
            </javadoc>
            <javadoc line="50">
                Constructs a &lt;code&gt;SerialBlob&lt;/code&gt; object that is a serialized version of
                  the given &lt;code&gt;byte&lt;/code&gt; array.
                  &lt;p&gt;
                  The new &lt;code&gt;SerialBlob&lt;/code&gt; object is initialized with the data from the
                  &lt;code&gt;byte&lt;/code&gt; array, thus allowing disconnected &lt;code&gt;RowSet&lt;/code&gt;
                  objects to establish serialized &lt;code&gt;Blob&lt;/code&gt; objects without
                  touching the data source.                
                <param>
                    b the <code>byte</code> array containing the data for the
                      <code>Blob</code> object to be serialized                    
                </param>
                <throws>
                    SerialException if an error occurs during serialization                    
                </throws>
                <throws>
                    SQLException if a SQL errors occurs                    
                </throws>
            </javadoc>
            <method name="SerialBlob" type="constructor" line="63">
                <params>
                    <param name="b" type="byte[]"/>
                </params>
                <scope line="66"/>
            </method>
            <javadoc line="71">
                Constructs a &lt;code&gt;SerialBlob&lt;/code&gt; object that is a serialized
                  version of the given &lt;code&gt;Blob&lt;/code&gt; object.
                  &lt;P&gt;
                  The new &lt;code&gt;SerialBlob&lt;/code&gt; object is initialized with the
                  data from the &lt;code&gt;Blob&lt;/code&gt; object; therefore, the
                  &lt;code&gt;Blob&lt;/code&gt; object should have previously brought the
                  SQL &lt;code&gt;BLOB&lt;/code&gt; value&apos;s data over to the client from
                  the database. Otherwise, the new &lt;code&gt;SerialBlob&lt;/code&gt; object
                  will contain no data.                
                <param>
                    blob the <code>Blob</code> object from which this
                      <code>SerialBlob</code> object is to be constructed;
                      cannot be null.                    
                </param>
                <throws>
                    SerialException if an error occurs during serialization                    
                </throws>
                <throws>
                    SQLException if the <code>Blob</code> passed to this
                      to this constructor is a <code>null</code>.                    
                </throws>
                <see>
                    java.sql.Blob                    
                </see>
            </javadoc>
            <method name="SerialBlob" type="constructor" line="89">
                <params>
                    <param name="blob" type="Blob"/>
                </params>
                <scope line="90"/>
            </method>
            <javadoc line="98">
                Copies the specified number of bytes, starting at the given
                  position, from this &lt;code&gt;SerialBlob&lt;/code&gt; object to
                  another array of bytes.
                  &lt;P&gt;
                  Note that if the given number of bytes to be copied is larger than
                  the length of this &lt;code&gt;SerialBlob&lt;/code&gt; object&apos;s array of
                  bytes, the given number will be shortened to the array&apos;s length.                
                <param>
                    pos the ordinal position of the first byte in this
                      <code>SerialBlob</code> object to be copied;
                      numbering starts at <code>1</code>; must not be less
                      than <code>1</code> and must be less than or equal
                      to the length of this <code>SerialBlob</code> object                    
                </param>
                <param>
                    length the number of bytes to be copied                    
                </param>
                <return>
                    an array of bytes that is a copy of a region of this
                      <code>SerialBlob</code> object, starting at the given
                      position and containing the given number of consecutive bytes                    
                </return>
                <throws>
                    SerialException if the given starting position is out of bounds                    
                </throws>
            </javadoc>
            <method name="getBytes" type="byte[]" line="117">
                <params>
                    <param name="pos" type="long"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="118"/>
                <scope line="121"/>
                <declaration name="b" type="byte[]" line="125"/>
                <scope line="126"/>
            </method>
            <javadoc line="132">
                Retrieves the number of bytes in this &lt;code&gt;SerialBlob&lt;/code&gt;
                  object&apos;s array of bytes.                
                <return>
                    a <code>long</code> indicating the length in bytes of this
                      <code>SerialBlob</code> object's array of bytes                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
            </javadoc>
            <method name="length" type="long" line="139"/>
            <javadoc line="142">
                Returns this &lt;code&gt;SerialBlob&lt;/code&gt; object as an input stream.
                  Unlike the related method, &lt;code&gt;setBinaryStream&lt;/code&gt;,
                  a stream is produced regardless of whether the &lt;code&gt;SerialBlob&lt;/code&gt;
                  was created with a &lt;code&gt;Blob&lt;/code&gt; object or a &lt;code&gt;byte&lt;/code&gt; array.                
                <return>
                    a <code>java.io.InputStream</code> object that contains
                      this <code>SerialBlob</code> object's array of bytes                    
                </return>
                <throws>
                    SerialException if an error occurs                    
                </throws>
                <see>
                    #setBinaryStream                    
                </see>
            </javadoc>
            <method name="getBinaryStream" type="java.io.InputStream" line="152">
                <declaration name="stream" type="InputStream" line="153"/>
            </method>
            <javadoc line="156">
                Returns the position in this &lt;code&gt;SerialBlob&lt;/code&gt; object where
                  the given pattern of bytes begins, starting the search at the
                  specified position.                
                <param>
                    pattern the pattern of bytes for which to search                    
                </param>
                <param>
                    start the position of the byte in this
                      <code>SerialBlob</code> object from which to begin
                      the search; the first position is <code>1</code>;
                      must not be less than <code>1</code> nor greater than
                      the length of this <code>SerialBlob</code> object                    
                </param>
                <return>
                    the position in this <code>SerialBlob</code> object
                      where the given pattern begins, starting at the specified
                      position; <code>-1</code> if the pattern is not found
                      or the given starting position is out of bounds; position
                      numbering for the return value starts at <code>1</code>                    
                </return>
                <throws>
                    SerialException if an error occurs when serializing the blob                    
                </throws>
                <throws>
                    SQLException if there is an error accessing the <code>BLOB</code>
                      value from the database                    
                </throws>
            </javadoc>
            <method name="position" type="long" line="175">
                <params>
                    <param name="pattern" type="byte[]"/>
                    <param name="start" type="long"/>
                </params>
                <scope line="176"/>
                <declaration name="pos" type="int" line="179"/>
                <declaration name="i" type="int" line="180"/>
                <declaration name="patlen" type="long" line="181"/>
                <scope line="182">
                    <scope line="183">
                        <scope line="184"/>
                    </scope>
                    <scope line="190"/>
                </scope>
            </method>
            <javadoc line="196">
                Returns the position in this &lt;code&gt;SerialBlob&lt;/code&gt; object where
                  the given &lt;code&gt;Blob&lt;/code&gt; object begins, starting the search at the
                  specified position.                
                <param>
                    pattern the <code>Blob</code> object for which to search;                    
                </param>
                <param>
                    start the position of the byte in this
                      <code>SerialBlob</code> object from which to begin
                      the search; the first position is <code>1</code>;
                      must not be less than <code>1</code> nor greater than
                      the length of this <code>SerialBlob</code> object                    
                </param>
                <return>
                    the position in this <code>SerialBlob</code> object
                      where the given <code>Blob</code> object begins, starting
                      at the specified position; <code>-1</code> if the pattern is
                      not found or the given starting position is out of bounds;
                      position numbering for the return value starts at <code>1</code>                    
                </return>
                <throws>
                    SerialException if an error occurs when serializing the blob                    
                </throws>
                <throws>
                    SQLException if there is an error accessing the <code>BLOB</code>
                      value from the database                    
                </throws>
            </javadoc>
            <method name="position" type="long" line="215">
                <params>
                    <param name="pattern" type="Blob"/>
                    <param name="start" type="long"/>
                </params>
            </method>
            <javadoc line="218">
                Writes the given array of bytes to the &lt;code&gt;BLOB&lt;/code&gt; value that
                  this &lt;code&gt;Blob&lt;/code&gt; object represents, starting at position
                  &lt;code&gt;pos&lt;/code&gt;, and returns the number of bytes written.                
                <param>
                    pos the position in the SQL <code>BLOB</code> value at which
                      to start writing. The first position is <code>1</code>;
                      must not be less than <code>1</code> nor greater than
                      the length of this <code>SerialBlob</code> object.                    
                </param>
                <param>
                    bytes the array of bytes to be written to the <code>BLOB</code>
                      value that this <code>Blob</code> object represents                    
                </param>
                <return>
                    the number of bytes written                    
                </return>
                <throws>
                    SerialException if there is an error accessing the
                      <code>BLOB</code> value; or if an invalid position is set; if an
                      invalid offset value is set                    
                </throws>
                <throws>
                    SQLException if there is an error accessing the <code>BLOB</code>
                      value from the database                    
                </throws>
                <see>
                    #getBytes                    
                </see>
            </javadoc>
            <method name="setBytes" type="int" line="236">
                <params>
                    <param name="pos" type="long"/>
                    <param name="bytes" type="byte[]"/>
                </params>
            </method>
            <javadoc line="239">
                Writes all or part of the given &lt;code&gt;byte&lt;/code&gt; array to the
                  &lt;code&gt;BLOB&lt;/code&gt; value that this &lt;code&gt;Blob&lt;/code&gt; object represents
                  and returns the number of bytes written.
                  Writing starts at position &lt;code&gt;pos&lt;/code&gt; in the &lt;code&gt;BLOB&lt;/code&gt;
                  value; &lt;i&gt;len&lt;/i&gt; bytes from the given byte array are written.                
                <param>
                    pos the position in the <code>BLOB</code> object at which
                      to start writing. The first position is <code>1</code>;
                      must not be less than <code>1</code> nor greater than
                      the length of this <code>SerialBlob</code> object.                    
                </param>
                <param>
                    bytes the array of bytes to be written to the <code>BLOB</code>
                      value                    
                </param>
                <param>
                    offset the offset in the <code>byte</code> array at which
                      to start reading the bytes. The first offset position is
                      <code>0</code>; must not be less than <code>0</code> nor greater
                      than the length of the <code>byte</code> array                    
                </param>
                <param>
                    length the number of bytes to be written to the
                      <code>BLOB</code> value from the array of bytes <i>bytes</i>.                    
                </param>
                <return>
                    the number of bytes written                    
                </return>
                <throws>
                    SerialException if there is an error accessing the
                      <code>BLOB</code> value; if an invalid position is set; if an
                      invalid offset value is set; if number of bytes to be written
                      is greater than the <code>SerialBlob</code> length; or the combined
                      values of the length and offset is greater than the Blob buffer                    
                </throws>
                <throws>
                    SQLException if there is an error accessing the <code>BLOB</code>
                      value from the database.                    
                </throws>
                <see>
                    #getBytes                    
                </see>
            </javadoc>
            <method name="setBytes" type="int" line="267">
                <params>
                    <param name="pos" type="long"/>
                    <param name="bytes" type="byte[]"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="268"/>
                <scope line="271"/>
                <scope line="274"/>
                <scope line="277"/>
                <declaration name="i" type="int" line="280"/>
                <scope line="282"/>
            </method>
            <javadoc line="288">
                Retrieves a stream that can be used to write to the &lt;code&gt;BLOB&lt;/code&gt;
                  value that this &lt;code&gt;Blob&lt;/code&gt; object represents.  The stream begins
                  at position &lt;code&gt;pos&lt;/code&gt;. This method forwards the
                  &lt;code&gt;setBinaryStream()&lt;/code&gt; call to the underlying &lt;code&gt;Blob&lt;/code&gt; in
                  the event that this &lt;code&gt;SerialBlob&lt;/code&gt; object is instantiated with a
                  &lt;code&gt;Blob&lt;/code&gt;. If this &lt;code&gt;SerialBlob&lt;/code&gt; is instantiated with
                  a &lt;code&gt;byte&lt;/code&gt; array, a &lt;code&gt;SerialException&lt;/code&gt; is thrown.                
                <param>
                    pos the position in the <code>BLOB</code> value at which
                      to start writing                    
                </param>
                <return>
                    a <code>java.io.OutputStream</code> object to which data can
                      be written                    
                </return>
                <throws>
                    SQLException if there is an error accessing the
                      <code>BLOB</code> value                    
                </throws>
                <throws>
                    SerialException if the SerialBlob in not instantiated with a
                      <code>Blob</code> object that supports <code>setBinaryStream()</code>                    
                </throws>
                <see>
                    #getBinaryStream                    
                </see>
            </javadoc>
            <method name="setBinaryStream" type="java.io.OutputStream" line="306">
                <params>
                    <param name="pos" type="long"/>
                </params>
                <scope line="307"/>
                <scope line="310"/>
            </method>
            <javadoc line="314">
                Truncates the &lt;code&gt;BLOB&lt;/code&gt; value that this &lt;code&gt;Blob&lt;/code&gt;
                  object represents to be &lt;code&gt;len&lt;/code&gt; bytes in length.                
                <param>
                    length the length, in bytes, to which the <code>BLOB</code>
                      value that this <code>Blob</code> object represents should be
                      truncated                    
                </param>
                <throws>
                    SerialException if there is an error accessing the Blob value;
                      or the length to truncate is greater that the SerialBlob length                    
                </throws>
            </javadoc>
            <method name="truncate" type="void" line="323">
                <params>
                    <param name="length" type="long"/>
                </params>
                <scope line="324"/>
                <scope line="327"/>
                <scope line="331"/>
            </method>
            <javadoc line="336">
                Returns an &lt;code&gt;InputStream&lt;/code&gt; object that contains a partial &lt;code&gt;Blob&lt;/code&gt; value,
                  starting  with the byte specified by pos, which is length bytes in length.                
                <param>
                    pos the offset to the first byte of the partial value to be retrieved.
                      The first byte in the <code>Blob</code> is at position 1                    
                </param>
                <param>
                    length the length in bytes of the partial value to be retrieved                    
                </param>
                <return>
                    <code>InputStream</code> through which the partial <code>Blob</code> value can be read.                    
                </return>
                <throws>
                    SQLException if pos is less than 1 or if pos is greater than the number of bytes
                      in the <code>Blob</code> or if pos + length is greater than the number of bytes
                      in the <code>Blob</code>                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBinaryStream" type="InputStream" line="348">
                <params>
                    <param name="pos" type="long"/>
                    <param name="length" type="long"/>
                </params>
            </method>
            <javadoc line="351">
                This method frees the &lt;code&gt;Blob&lt;/code&gt; object and releases the resources that it holds.
                  &lt;code&gt;Blob&lt;/code&gt; object. The object is invalid once the &lt;code&gt;free&lt;/code&gt;
                  method is called. If &lt;code&gt;free&lt;/code&gt; is called multiple times, the subsequent
                  calls to &lt;code&gt;free&lt;/code&gt; are treated as a no-op.                
                <throws>
                    SQLException if an error occurs releasing
                      the Blob's resources                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="free" type="void" line="360"/>
            <declaration name="serialVersionUID" type="long" line="363"/>
            <javadoc line="363">
                The identifier that assists in the serialization of this &lt;code&gt;SerialBlob&lt;/code&gt;
                  object.                
            </javadoc>
        </class>
    </source>