<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql">
        <import package="java.sql.SQLException"/>
        <class name="ConnectionEvent" line="30">
            <extends class="java.util.EventObject"/>
            <javadoc line="30">
                &lt;P&gt;An &lt;code&gt;Event&lt;/code&gt; object that provides information about the
                  source of a connection-related event.  &lt;code&gt;ConnectionEvent&lt;/code&gt;
                  objects are generated when an application closes a pooled connection
                  and when an error occurs.  The &lt;code&gt;ConnectionEvent&lt;/code&gt; object
                  contains two kinds of information:
                  &lt;UL&gt;
                  &lt;LI&gt;The pooled connection closed by the application
                  &lt;LI&gt;In the case of an error event, the &lt;code&gt;SQLException&lt;/code&gt;
                  about to be thrown to the application
                  &lt;/UL&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="47">
                &lt;P&gt;Constructs a &lt;code&gt;ConnectionEvent&lt;/code&gt; object initialized with
                  the given &lt;code&gt;PooledConnection&lt;/code&gt; object. &lt;code&gt;SQLException&lt;/code&gt;
                  defaults to &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    con the pooled connection that is the source of the event                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;con&lt;/code&gt; is null.                    
                </throws>
            </javadoc>
            <method name="ConnectionEvent" type="constructor" line="55">
                <params>
                    <param name="con" type="PooledConnection"/>
                </params>
            </method>
            <javadoc line="59">
                &lt;P&gt;Constructs a &lt;code&gt;ConnectionEvent&lt;/code&gt; object initialized with
                  the given &lt;code&gt;PooledConnection&lt;/code&gt; object and
                  &lt;code&gt;SQLException&lt;/code&gt; object.                
                <param>
                    con the pooled connection that is the source of the event                    
                </param>
                <param>
                    ex the SQLException about to be thrown to the application                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;con&lt;/code&gt; is null.                    
                </throws>
            </javadoc>
            <method name="ConnectionEvent" type="constructor" line="68">
                <params>
                    <param name="con" type="PooledConnection"/>
                    <param name="ex" type="SQLException"/>
                </params>
            </method>
            <javadoc line="73">
                &lt;P&gt;Retrieves the &lt;code&gt;SQLException&lt;/code&gt; for this
                  &lt;code&gt;ConnectionEvent&lt;/code&gt; object. May be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the SQLException about to be thrown or &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getSQLException" type="SQLException" line="79"/>
            <declaration name="ex" type="SQLException" line="81"/>
            <javadoc line="81">
                The &lt;code&gt;SQLException&lt;/code&gt; that the driver will throw to the
                  application when an error occurs and the pooled connection is no
                  longer usable.                
                <serial>
                                        
                </serial>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="89"/>
            <javadoc line="89">
                Private serial version unique ID to ensure serialization
                  compatibility.                
            </javadoc>
        </class>
    </source>