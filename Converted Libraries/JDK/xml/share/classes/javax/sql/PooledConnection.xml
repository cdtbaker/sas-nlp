<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql">
        <import package="java.sql.Connection"/>
        <import package="java.sql.SQLException"/>
        <interface name="PooledConnection">
            <javadoc line="4">
                An object that provides hooks for connection pool management.
                  A &lt;code&gt;PooledConnection&lt;/code&gt; object
                  represents a physical connection to a data source.  The connection
                  can be recycled rather than being closed when an application is
                  finished with it, thus reducing the number of connections that
                  need to be made.
                  &lt;P&gt;
                  An application programmer does not use the &lt;code&gt;PooledConnection&lt;/code&gt;
                  interface directly; rather, it is used by a middle tier infrastructure
                  that manages the pooling of connections.
                  &lt;P&gt;
                  When an application calls the method &lt;code&gt;DataSource.getConnection&lt;/code&gt;,
                  it gets back a &lt;code&gt;Connection&lt;/code&gt; object.  If connection pooling is
                  being done, that &lt;code&gt;Connection&lt;/code&gt; object is actually a handle to
                  a &lt;code&gt;PooledConnection&lt;/code&gt; object, which is a physical connection.
                  &lt;P&gt;
                  The connection pool manager, typically the application server, maintains
                  a pool of &lt;code&gt;PooledConnection&lt;/code&gt; objects.  If there is a
                  &lt;code&gt;PooledConnection&lt;/code&gt; object available in the pool, the
                  connection pool manager returns a &lt;code&gt;Connection&lt;/code&gt; object that
                  is a handle to that physical connection.
                  If no &lt;code&gt;PooledConnection&lt;/code&gt; object is available, the
                  connection pool manager calls the &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt;
                  method &lt;code&gt;getPoolConnection&lt;/code&gt; to create a new physical connection.  The
                  JDBC driver implementing &lt;code&gt;ConnectionPoolDataSource&lt;/code&gt; creates a
                  new &lt;code&gt;PooledConnection&lt;/code&gt; object and returns a handle to it.
                  &lt;P&gt;
                  When an application closes a connection, it calls the &lt;code&gt;Connection&lt;/code&gt;
                  method &lt;code&gt;close&lt;/code&gt;. When connection pooling is being done,
                  the connection pool manager is notified because it has registered itself as
                  a &lt;code&gt;ConnectionEventListener&lt;/code&gt; object using the
                  &lt;code&gt;ConnectionPool&lt;/code&gt; method &lt;code&gt;addConnectionEventListener&lt;/code&gt;.
                  The connection pool manager deactivates the handle to
                  the &lt;code&gt;PooledConnection&lt;/code&gt; object and  returns the
                  &lt;code&gt;PooledConnection&lt;/code&gt; object to the pool of connections so that
                  it can be used again.  Thus, when an application closes its connection,
                  the underlying physical connection is recycled rather than being closed.
                  &lt;P&gt;
                  The physical connection is not closed until the connection pool manager
                  calls the &lt;code&gt;PooledConnection&lt;/code&gt; method &lt;code&gt;close&lt;/code&gt;.
                  This method is generally called to have an orderly shutdown of the server or
                  if a fatal error has made the connection unusable.
                  &lt;p&gt;
                  A connection pool manager is often also a statement pool manager, maintining
                  a pool of &lt;code&gt;PreparedStatement&lt;/code&gt; objects.
                  When an application closes a prepared statement, it calls the
                  &lt;code&gt;PreparedStatement&lt;/code&gt;
                  method &lt;code&gt;close&lt;/code&gt;. When &lt;code&gt;Statement&lt;/code&gt; pooling is being done,
                  the pool manager is notified because it has registered itself as
                  a &lt;code&gt;StatementEventListener&lt;/code&gt; object using the
                  &lt;code&gt;ConnectionPool&lt;/code&gt; method &lt;code&gt;addStatementEventListener&lt;/code&gt;.
                  Thus, when an application closes its  &lt;code&gt;PreparedStatement&lt;/code&gt;,
                  the underlying prepared statement is recycled rather than being closed.
                  &lt;P&gt;                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getConnection" type="Connection" line="62"/>
            <javadoc line="62">
                Creates and returns a &lt;code&gt;Connection&lt;/code&gt; object that is a handle
                  for the physical connection that
                  this &lt;code&gt;PooledConnection&lt;/code&gt; object represents.
                  The connection pool manager calls this method when an application has
                  called the method &lt;code&gt;DataSource.getConnection&lt;/code&gt; and there are
                  no &lt;code&gt;PooledConnection&lt;/code&gt; objects available. See the{@link PooledConnection interface description} for more information.                
                <return>
                    a <code>Connection</code> object that is a handle to
                      this <code>PooledConnection</code> object                    
                </return>
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="close" type="void" line="77"/>
            <javadoc line="77">
                Closes the physical connection that this &lt;code&gt;PooledConnection&lt;/code&gt;
                  object represents.  An application never calls this method directly;
                  it is called by the connection pool module, or manager.
                  &lt;P&gt;
                  See the {@link PooledConnection interface description} for more
                  information.                
                <exception>
                    SQLException if a database access error occurs                    
                </exception>
                <exception>
                    SQLFeatureNotSupportedException if the JDBC driver does not support
                      this method                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addConnectionEventListener" type="void" line="90"/>
            <javadoc line="90">
                Registers the given event listener so that it will be notified
                  when an event occurs on this &lt;code&gt;PooledConnection&lt;/code&gt; object.                
                <param>
                    listener a component, usually the connection pool manager,
                      that has implemented the
                      <code>ConnectionEventListener</code> interface and wants to be
                      notified when the connection is closed or has an error                    
                </param>
                <see>
                    #removeConnectionEventListener                    
                </see>
            </javadoc>
            <method name="removeConnectionEventListener" type="void" line="100"/>
            <javadoc line="100">
                Removes the given event listener from the list of components that
                  will be notified when an event occurs on this
                  &lt;code&gt;PooledConnection&lt;/code&gt; object.                
                <param>
                    listener a component, usually the connection pool manager,
                      that has implemented the
                      <code>ConnectionEventListener</code> interface and
                      been registered with this <code>PooledConnection</code> object as
                      a listener                    
                </param>
                <see>
                    #addConnectionEventListener                    
                </see>
            </javadoc>
            <method name="addStatementEventListener" type="void" line="112"/>
            <javadoc line="112">
                Registers a &lt;code&gt;StatementEventListener&lt;/code&gt; with this &lt;code&gt;PooledConnection&lt;/code&gt; object.  Components that
                  wish to be notified when  &lt;code&gt;PreparedStatement&lt;/code&gt;s created by the
                  connection are closed or are detected to be invalid may use this method
                  to register a &lt;code&gt;StatementEventListener&lt;/code&gt; with this &lt;code&gt;PooledConnection&lt;/code&gt; object.
                  &lt;p&gt;                
                <param>
                    listener      an component which implements the <code>StatementEventListener</code>
                      interface that is to be registered with this <code>PooledConnection</code> object
                      <p>                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="removeStatementEventListener" type="void" line="124"/>
            <javadoc line="124">
                Removes the specified &lt;code&gt;StatementEventListener&lt;/code&gt; from the list of
                  components that will be notified when the driver detects that a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; has been closed or is invalid.
                  &lt;p&gt;                
                <param>
                    listener      the component which implements the
                      <code>StatementEventListener</code> interface that was previously
                      registered with this <code>PooledConnection</code> object
                      <p>                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>