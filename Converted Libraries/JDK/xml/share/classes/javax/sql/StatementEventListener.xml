<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.sql">
        <interface name="StatementEventListener">
            <implements interface="java.util.EventListener"/>
            <javadoc line="2">
                An object that registers to be notified of events that occur on PreparedStatements
                  that are in the Statement pool.
                  &lt;p&gt;
                  The JDBC 3.0 specification added the maxStatements
                  &lt;code&gt;ConnectionPooledDataSource&lt;/code&gt; property to provide a standard mechanism for
                  enabling the pooling of &lt;code&gt;PreparedStatements&lt;/code&gt;
                  and to specify the size of the statement
                  pool.  However, there was no way for a driver to notify an external
                  statement pool when a &lt;code&gt;PreparedStatement&lt;/code&gt; becomes invalid.  For some databases, a
                  statement becomes invalid if a DDL operation is performed that affects the
                  table.  For example an application may create a temporary table to do some work
                  on the table and then destroy it.  It may later recreate the same table when
                  it is needed again.  Some databases will invalidate any prepared statements
                  that reference the temporary table when the table is dropped.
                  &lt;p&gt;
                  Similar to the methods defined in the &lt;code&gt;ConnectionEventListener&lt;/code&gt; interface,
                  the driver will call the &lt;code&gt;StatementEventListener.statementErrorOccurred&lt;/code&gt;
                  method prior to throwing any exceptions when it detects a statement is invalid.
                  The driver will also call the &lt;code&gt;StatementEventListener.statementClosed&lt;/code&gt;
                  method when a &lt;code&gt;PreparedStatement&lt;/code&gt; is closed.
                  &lt;p&gt;
                  Methods which allow a component to register a StatementEventListener with a
                  &lt;code&gt;PooledConnection&lt;/code&gt; have been added to the &lt;code&gt;PooledConnection&lt;/code&gt; interface.
                  &lt;p&gt;                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="statementClosed" type="void" line="30"/>
            <javadoc line="30">
                The driver calls this method on all &lt;code&gt;StatementEventListener&lt;/code&gt;s registered on the connection when it detects that a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; is closed.                
                <param>
                    event an event object describing the source of
                      the event and that the &lt;code&gt;PreparedStatement&lt;/code&gt; was closed.                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="statementErrorOccurred" type="void" line="38"/>
            <javadoc line="38">
                The driver calls this method on all &lt;code&gt;StatementEventListener&lt;/code&gt;s
                  registered on the connection when it detects that a
                  &lt;code&gt;PreparedStatement&lt;/code&gt; is invalid. The driver calls this method
                  just before it throws the &lt;code&gt;SQLException&lt;/code&gt;,
                  contained in the given event, to the application.
                  &lt;p&gt;                
                <param>
                    event         an event object describing the source of the event,
                      the statement that is invalid and the exception the
                      driver is about to throw.  The source of the event is
                      the &lt;code&gt;PooledConnection&lt;/code&gt; which the invalid &lt;code&gt;PreparedStatement&lt;/code&gt;
                      is associated with.
                      &lt;p&gt;                    
                </param>
                <since>
                    1.6                    
                </since>
            </javadoc>
        </interface>
    </source>