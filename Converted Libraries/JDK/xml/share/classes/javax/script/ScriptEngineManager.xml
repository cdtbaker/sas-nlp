<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.util"/>
        <import package="java.net.URL"/>
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="sun.misc.Service"/>
        <import package="sun.misc.ServiceConfigurationError"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="ScriptEngineManager" line="10">
            <javadoc line="10">
                The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation
                  mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a
                  collection of key/value pairs storing state shared by all engines created
                  by the Manager. This class uses the &lt;a href=&quot;../../../technotes/guides/jar/jar.html#Service%20Provider&quot;&gt;service provider&lt;/a&gt; mechanism to enumerate all the
                  implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;. &lt;br&gt;&lt;br&gt;
                  The &lt;code&gt;ScriptEngineManager&lt;/code&gt; provides a method to return an array of all these factories
                  as well as utility methods which look up factories on the basis of language name, file extension
                  and mime type.
                  &lt;p&gt;
                  The &lt;code&gt;Bindings&lt;/code&gt; of key/value pairs, referred to as the &quot;Global Scope&quot;  maintained
                  by the manager is available to all instances of &lt;code&gt;ScriptEngine&lt;/code&gt; created
                  by the &lt;code&gt;ScriptEngineManager&lt;/code&gt;.  The values in the &lt;code&gt;Bindings&lt;/code&gt; are
                  generally exposed in all scripts.                
                <author>
                    Mike Grogan                    
                </author>
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="29"/>
            <javadoc line="30">
                If the thread context ClassLoader can be accessed by the caller,
                  then the effect of calling this constructor is the same as calling
                  &lt;code&gt;ScriptEngineManager(Thread.currentThread().getContextClassLoader())&lt;/code&gt;.
                  Otherwise, the effect is the same as calling &lt;code&gt;ScriptEngineManager(null)&lt;/code&gt;.                
                <see>
                    java.lang.Thread#getContextClassLoader                    
                </see>
            </javadoc>
            <method name="ScriptEngineManager" type="constructor" line="37">
                <declaration name="ctxtLoader" type="ClassLoader" line="38"/>
                <scope line="39"/>
                <scope line="43"/>
            </method>
            <javadoc line="48">
                This constructor loads the implementations of
                  &lt;code&gt;ScriptEngineFactory&lt;/code&gt; visible to the given
                  &lt;code&gt;ClassLoader&lt;/code&gt; using the &lt;a href=&quot;../../../technotes/guides/jar/jar.html#Service%20Provider&quot;&gt;service provider&lt;/a&gt; mechanism.&lt;br&gt;&lt;br&gt;
                  If loader is &lt;code&gt;null&lt;/code&gt;, the script engine factories that are
                  bundled with the platform and that are in the usual extension
                  directories (installed extensions) are loaded. &lt;br&gt;&lt;br&gt;                
                <param>
                    loader ClassLoader used to discover script engine factories.                    
                </param>
            </javadoc>
            <method name="ScriptEngineManager" type="constructor" line="57">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="init" type="void" line="60">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <anonymous_class line="66">
                    <method name="run" type="Object" line="67"/>
                </anonymous_class>
            </method>
            <method name="initEngines" type="void" line="74">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="itr" type="Iterator" line="75"/>
                <scope line="76">
                    <scope line="77"/>
                    <scope line="80"/>
                </scope>
                <scope line="84">
                    <scope line="86"/>
                </scope>
                <scope line="91">
                    <scope line="92">
                        <scope line="93">
                            <declaration name="fact" type="ScriptEngineFactory" line="94"/>
                        </scope>
                        <scope line="97">
                            <scope line="99"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="106">
                    <scope line="108"/>
                </scope>
            </method>
            <javadoc line="114">
                &lt;code&gt;setBindings&lt;/code&gt; stores the specified &lt;code&gt;Bindings&lt;/code&gt;
                  in the &lt;code&gt;globalScope&lt;/code&gt; field. ScriptEngineManager sets this
                  &lt;code&gt;Bindings&lt;/code&gt; as global bindings for &lt;code&gt;ScriptEngine&lt;/code&gt;
                  objects created by it.                
                <param>
                    bindings The specified <code>Bindings</code>                    
                </param>
                <throws>
                    IllegalArgumentException if bindings is null.                    
                </throws>
            </javadoc>
            <method name="setBindings" type="void" line="122">
                <params>
                    <param name="bindings" type="Bindings"/>
                </params>
                <scope line="123"/>
            </method>
            <javadoc line="128">
                &lt;code&gt;getBindings&lt;/code&gt; returns the value of the &lt;code&gt;globalScope&lt;/code&gt; field.
                  ScriptEngineManager sets this &lt;code&gt;Bindings&lt;/code&gt; as global bindings for
                  &lt;code&gt;ScriptEngine&lt;/code&gt; objects created by it.                
                <return>
                    The globalScope field.                    
                </return>
            </javadoc>
            <method name="getBindings" type="Bindings" line="134"/>
            <javadoc line="137">
                Sets the specified key/value pair in the Global Scope.                
                <param>
                    key Key to set                    
                </param>
                <param>
                    value Value to set.                    
                </param>
                <throws>
                    NullPointerException if key is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty string.                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="144">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="147">
                Gets the value for the specified key in the Global Scope                
                <param>
                    key The key whose value is to be returned.                    
                </param>
                <return>
                    The value for the specified key.                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="152">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="155">
                Looks up and creates a &lt;code&gt;ScriptEngine&lt;/code&gt; for a given  name.
                  The algorithm first searches for a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; that has been
                  registered as a handler for the specified name using the &lt;code&gt;registerEngineName&lt;/code&gt;
                  method.
                  &lt;br&gt;&lt;br&gt; If one is not found, it searches the array of &lt;code&gt;ScriptEngineFactory&lt;/code&gt; instances
                  stored by the constructor for one with the specified name.  If a &lt;code&gt;ScriptEngineFactory&lt;/code&gt;
                  is found by either method, it is used to create instance of &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <param>
                    shortName The short name of the <code>ScriptEngine</code> implementation.
                      returned by the <code>getNames</code> method of its <code>ScriptEngineFactory</code>.                    
                </param>
                <return>
                    A <code>ScriptEngine</code> created by the factory located in the search.  Returns null
                      if no such factory was found.  The <code>ScriptEngineManager</code> sets its own <code>globalScope</code>
                      <code>Bindings</code> as the <code>GLOBAL_SCOPE</code> <code>Bindings</code> of the newly
                      created <code>ScriptEngine</code>.                    
                </return>
                <throws>
                    NullPointerException if shortName is null.                    
                </throws>
            </javadoc>
            <method name="getEngineByName" type="ScriptEngine" line="171">
                <params>
                    <param name="shortName" type="String"/>
                </params>
                <declaration name="obj" type="Object" line="173"/>
                <scope line="174">
                    <declaration name="spi" type="ScriptEngineFactory" line="175"/>
                    <scope line="176">
                        <declaration name="engine" type="ScriptEngine" line="177"/>
                    </scope>
                    <scope line="181"/>
                </scope>
                <scope line="185">
                    <declaration name="names" type="List&lt;String&gt;" line="186"/>
                    <scope line="187"/>
                    <scope line="190"/>
                    <scope line="193">
                        <scope line="194">
                            <scope line="195">
                                <scope line="196">
                                    <declaration name="engine" type="ScriptEngine" line="197"/>
                                </scope>
                                <scope line="201"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="210">
                Look up and create a &lt;code&gt;ScriptEngine&lt;/code&gt; for a given extension.  The algorithm
                  used by &lt;code&gt;getEngineByName&lt;/code&gt; is used except that the search starts
                  by looking for a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; registered to handle the
                  given extension using &lt;code&gt;registerEngineExtension&lt;/code&gt;.                
                <param>
                    extension The given extension                    
                </param>
                <return>
                    The engine to handle scripts with this extension.  Returns <code>null</code>
                      if not found.                    
                </return>
                <throws>
                    NullPointerException if extension is null.                    
                </throws>
            </javadoc>
            <method name="getEngineByExtension" type="ScriptEngine" line="220">
                <params>
                    <param name="extension" type="String"/>
                </params>
                <declaration name="obj" type="Object" line="222"/>
                <scope line="223">
                    <declaration name="spi" type="ScriptEngineFactory" line="224"/>
                    <scope line="225">
                        <declaration name="engine" type="ScriptEngine" line="226"/>
                    </scope>
                    <scope line="230"/>
                </scope>
                <scope line="234">
                    <declaration name="exts" type="List&lt;String&gt;" line="235"/>
                    <scope line="236"/>
                    <scope line="239"/>
                    <scope line="243">
                        <scope line="244">
                            <scope line="245">
                                <declaration name="engine" type="ScriptEngine" line="246"/>
                            </scope>
                            <scope line="250"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="258">
                Look up and create a &lt;code&gt;ScriptEngine&lt;/code&gt; for a given mime type.  The algorithm
                  used by &lt;code&gt;getEngineByName&lt;/code&gt; is used except that the search starts
                  by looking for a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; registered to handle the
                  given mime type using &lt;code&gt;registerEngineMimeType&lt;/code&gt;.                
                <param>
                    mimeType The given mime type                    
                </param>
                <return>
                    The engine to handle scripts with this mime type.  Returns <code>null</code>
                      if not found.                    
                </return>
                <throws>
                    NullPointerException if mimeType is null.                    
                </throws>
            </javadoc>
            <method name="getEngineByMimeType" type="ScriptEngine" line="268">
                <params>
                    <param name="mimeType" type="String"/>
                </params>
                <declaration name="obj" type="Object" line="270"/>
                <scope line="271">
                    <declaration name="spi" type="ScriptEngineFactory" line="272"/>
                    <scope line="273">
                        <declaration name="engine" type="ScriptEngine" line="274"/>
                    </scope>
                    <scope line="278"/>
                </scope>
                <scope line="282">
                    <declaration name="types" type="List&lt;String&gt;" line="283"/>
                    <scope line="284"/>
                    <scope line="287"/>
                    <scope line="291">
                        <scope line="292">
                            <scope line="293">
                                <declaration name="engine" type="ScriptEngine" line="294"/>
                            </scope>
                            <scope line="298"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="306">
                Returns an array whose elements are instances of all the &lt;code&gt;ScriptEngineFactory&lt;/code&gt; classes
                  found by the discovery mechanism.                
                <return>
                    List of all discovered <code>ScriptEngineFactory</code>s.                    
                </return>
            </javadoc>
            <method name="getEngineFactories" type="List<ScriptEngineFactory>" line="311">
                <declaration name="res" type="List&lt;ScriptEngineFactory&gt;" line="312"/>
                <scope line="313"/>
            </method>
            <javadoc line="318">
                Registers a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; to handle a language
                  name.  Overrides any such association found using the Discovery mechanism.                
                <param>
                    name The name to be associated with the <code>ScriptEngineFactory</code>.                    
                </param>
                <param>
                    factory The class to associate with the given name.                    
                </param>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="registerEngineName" type="void" line="325">
                <params>
                    <param name="name" type="String"/>
                    <param name="factory" type="ScriptEngineFactory"/>
                </params>
            </method>
            <javadoc line="329">
                Registers a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; to handle a mime type.
                  Overrides any such association found using the Discovery mechanism.                
                <param>
                    type The mime type  to be associated with the
                      <code>ScriptEngineFactory</code>.                    
                </param>
                <param>
                    factory The class to associate with the given mime type.                    
                </param>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="registerEngineMimeType" type="void" line="337">
                <params>
                    <param name="type" type="String"/>
                    <param name="factory" type="ScriptEngineFactory"/>
                </params>
            </method>
            <javadoc line="341">
                Registers a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; to handle an extension.
                  Overrides any such association found using the Discovery mechanism.                
                <param>
                    extension The extension type  to be associated with the
                      <code>ScriptEngineFactory</code>.                    
                </param>
                <param>
                    factory The class to associate with the given extension.                    
                </param>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="registerEngineExtension" type="void" line="349">
                <params>
                    <param name="extension" type="String"/>
                    <param name="factory" type="ScriptEngineFactory"/>
                </params>
            </method>
            <declaration name="engineSpis" type="HashSet&lt;ScriptEngineFactory&gt;" line="353"/>
            <javadoc line="353">
                Set of script engine factories discovered.                
            </javadoc>
            <declaration name="nameAssociations" type="HashMap&lt;String,ScriptEngineFactory&gt;" line="357"/>
            <javadoc line="357">
                Map of engine name to script engine factory.                
            </javadoc>
            <declaration name="extensionAssociations" type="HashMap&lt;String,ScriptEngineFactory&gt;" line="361"/>
            <javadoc line="361">
                Map of script file extension to script engine factory.                
            </javadoc>
            <declaration name="mimeTypeAssociations" type="HashMap&lt;String,ScriptEngineFactory&gt;" line="365"/>
            <javadoc line="365">
                Map of script script MIME type to script engine factory.                
            </javadoc>
            <declaration name="globalScope" type="Bindings" line="369"/>
            <javadoc line="369">
                Global bindings associated with script engines created by this manager.                
            </javadoc>
            <method name="canCallerAccessLoader" type="boolean" line="373">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <declaration name="sm" type="SecurityManager" line="374"/>
                <scope line="375">
                    <declaration name="callerLoader" type="ClassLoader" line="376"/>
                    <scope line="377">
                        <scope line="378">
                            <scope line="379"/>
                            <scope line="382"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getCallerClassLoader" type="ClassLoader" line="391">
                <declaration name="caller" type="Class" line="392"/>
                <scope line="393"/>
            </method>
            <method name="isAncestor" type="boolean" line="398">
                <params>
                    <param name="cl1" type="ClassLoader"/>
                    <param name="cl2" type="ClassLoader"/>
                </params>
                <scope line="399"/>
            </method>
        </class>
    </source>