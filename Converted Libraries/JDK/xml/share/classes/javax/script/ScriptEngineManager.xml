<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.util"/>
        <import package="java.net.URL"/>
        <import package="java.io"/>
        <import package="java.security"/>
        <import package="sun.misc.Service"/>
        <import package="sun.misc.ServiceConfigurationError"/>
        <import package="sun.reflect.Reflection"/>
        <import package="sun.security.util.SecurityConstants"/>
        <class name="ScriptEngineManager" line="36">
            <comment line="442">
                Note that this code is same as ClassLoader.getCallerClassLoader().
                 But, that method is package private and hence we can&apos;t call here.                
            </comment>
            <comment line="452">
                is cl1 ancestor of cl2?                
            </comment>
            <javadoc line="36">
                The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation
                  mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a
                  collection of key/value pairs storing state shared by all engines created
                  by the Manager. This class uses the &lt;a href=&quot;../../../technotes/guides/jar/jar.html#Service%20Provider&quot;&gt;service provider&lt;/a&gt; mechanism to enumerate all the
                  implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;. &lt;br&gt;&lt;br&gt;
                  The &lt;code&gt;ScriptEngineManager&lt;/code&gt; provides a method to return an array of all these factories
                  as well as utility methods which look up factories on the basis of language name, file extension
                  and mime type.
                  &lt;p&gt;
                  The &lt;code&gt;Bindings&lt;/code&gt; of key/value pairs, referred to as the &quot;Global Scope&quot;  maintained
                  by the manager is available to all instances of &lt;code&gt;ScriptEngine&lt;/code&gt; created
                  by the &lt;code&gt;ScriptEngineManager&lt;/code&gt;.  The values in the &lt;code&gt;Bindings&lt;/code&gt; are
                  generally exposed in all scripts.                
                <author>
                    Mike Grogan                    
                </author>
                <author>
                    A. Sundararajan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="DEBUG" type="boolean" line="56"/>
            <javadoc line="57">
                If the thread context ClassLoader can be accessed by the caller,
                  then the effect of calling this constructor is the same as calling
                  &lt;code&gt;ScriptEngineManager(Thread.currentThread().getContextClassLoader())&lt;/code&gt;.
                  Otherwise, the effect is the same as calling &lt;code&gt;ScriptEngineManager(null)&lt;/code&gt;.                
                <see>
                    java.lang.Thread#getContextClassLoader                    
                </see>
            </javadoc>
            <method name="ScriptEngineManager" type="constructor" line="65">
                <declaration name="ctxtLoader" type="ClassLoader" line="66"/>
                <scope line="67"/>
                <scope line="70"/>
            </method>
            <javadoc line="76">
                This constructor loads the implementations of
                  &lt;code&gt;ScriptEngineFactory&lt;/code&gt; visible to the given
                  &lt;code&gt;ClassLoader&lt;/code&gt; using the &lt;a href=&quot;../../../technotes/guides/jar/jar.html#Service%20Provider&quot;&gt;service provider&lt;/a&gt; mechanism.&lt;br&gt;&lt;br&gt;
                  If loader is &lt;code&gt;null&lt;/code&gt;, the script engine factories that are
                  bundled with the platform and that are in the usual extension
                  directories (installed extensions) are loaded. &lt;br&gt;&lt;br&gt;                
                <param>
                    loader ClassLoader used to discover script engine factories.                    
                </param>
            </javadoc>
            <method name="ScriptEngineManager" type="constructor" line="86">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <method name="init" type="void" line="90">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <anonymous_class line="96">
                    <method name="run" type="Object" line="97"/>
                </anonymous_class>
            </method>
            <method name="initEngines" type="void" line="104">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="119">
                    do not throw any exception here. user may want to
                     manage his/her own factories using this manager
                     by explicit registratation (by registerXXX) methods.                    
                </comment>
                <comment line="136">
                    one factory failed, but check other factories...                    
                </comment>
                <comment line="146">
                    do not throw any exception here. user may want to
                     manage his/her own factories using this manager
                     by explicit registratation (by registerXXX) methods.                    
                </comment>
                <declaration name="itr" type="Iterator" line="105"/>
                <scope line="106">
                    <scope line="107"/>
                    <scope line="109"/>
                </scope>
                <scope line="112">
                    <scope line="115"/>
                </scope>
                <scope line="124">
                    <scope line="125">
                        <scope line="126">
                            <declaration name="fact" type="ScriptEngineFactory" line="127"/>
                        </scope>
                        <scope line="129">
                            <scope line="132"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="139">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="152">
                &lt;code&gt;setBindings&lt;/code&gt; stores the specified &lt;code&gt;Bindings&lt;/code&gt;
                  in the &lt;code&gt;globalScope&lt;/code&gt; field. ScriptEngineManager sets this
                  &lt;code&gt;Bindings&lt;/code&gt; as global bindings for &lt;code&gt;ScriptEngine&lt;/code&gt;
                  objects created by it.                
                <param>
                    bindings The specified &lt;code&gt;Bindings&lt;/code&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if bindings is null.                    
                </throws>
            </javadoc>
            <method name="setBindings" type="void" line="161">
                <params>
                    <param name="bindings" type="Bindings"/>
                </params>
                <scope line="162"/>
            </method>
            <javadoc line="169">
                &lt;code&gt;getBindings&lt;/code&gt; returns the value of the &lt;code&gt;globalScope&lt;/code&gt; field.
                  ScriptEngineManager sets this &lt;code&gt;Bindings&lt;/code&gt; as global bindings for
                  &lt;code&gt;ScriptEngine&lt;/code&gt; objects created by it.                
                <return>
                    The globalScope field.                    
                </return>
            </javadoc>
            <method name="getBindings" type="Bindings" line="176"/>
            <javadoc line="180">
                Sets the specified key/value pair in the Global Scope.                
                <param>
                    key Key to set                    
                </param>
                <param>
                    value Value to set.                    
                </param>
                <throws>
                    NullPointerException if key is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty string.                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="187">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="191">
                Gets the value for the specified key in the Global Scope                
                <param>
                    key The key whose value is to be returned.                    
                </param>
                <return>
                    The value for the specified key.                    
                </return>
            </javadoc>
            <method name="get" type="Object" line="196">
                <params>
                    <param name="key" type="String"/>
                </params>
            </method>
            <javadoc line="200">
                Looks up and creates a &lt;code&gt;ScriptEngine&lt;/code&gt; for a given  name.
                  The algorithm first searches for a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; that has been
                  registered as a handler for the specified name using the &lt;code&gt;registerEngineName&lt;/code&gt;
                  method.
                  &lt;br&gt;&lt;br&gt; If one is not found, it searches the array of &lt;code&gt;ScriptEngineFactory&lt;/code&gt; instances
                  stored by the constructor for one with the specified name.  If a &lt;code&gt;ScriptEngineFactory&lt;/code&gt;
                  is found by either method, it is used to create instance of &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <param>
                    shortName The short name of the &lt;code&gt;ScriptEngine&lt;/code&gt; implementation.
                      returned by the &lt;code&gt;getNames&lt;/code&gt; method of its &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.                    
                </param>
                <return>
                    A &lt;code&gt;ScriptEngine&lt;/code&gt; created by the factory located in the search.  Returns null
                      if no such factory was found.  The &lt;code&gt;ScriptEngineManager&lt;/code&gt; sets its own &lt;code&gt;globalScope&lt;/code&gt;
                      &lt;code&gt;Bindings&lt;/code&gt; as the &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; of the newly
                      created &lt;code&gt;ScriptEngine&lt;/code&gt;.                    
                </return>
                <throws>
                    NullPointerException if shortName is null.                    
                </throws>
            </javadoc>
            <method name="getEngineByName" type="ScriptEngine" line="216">
                <params>
                    <param name="shortName" type="String"/>
                </params>
                <comment line="219">
                    look for registered name first                    
                </comment>
                <declaration name="obj" type="Object" line="219"/>
                <scope line="220">
                    <declaration name="spi" type="ScriptEngineFactory" line="221"/>
                    <scope line="222">
                        <declaration name="engine" type="ScriptEngine" line="223"/>
                    </scope>
                    <scope line="226"/>
                </scope>
                <scope line="231">
                    <declaration name="names" type="List&lt;String&gt;" line="232"/>
                    <scope line="233"/>
                    <scope line="235"/>
                    <scope line="239">
                        <scope line="240">
                            <scope line="241">
                                <scope line="242">
                                    <declaration name="engine" type="ScriptEngine" line="243"/>
                                </scope>
                                <scope line="246"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="257">
                Look up and create a &lt;code&gt;ScriptEngine&lt;/code&gt; for a given extension.  The algorithm
                  used by &lt;code&gt;getEngineByName&lt;/code&gt; is used except that the search starts
                  by looking for a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; registered to handle the
                  given extension using &lt;code&gt;registerEngineExtension&lt;/code&gt;.                
                <param>
                    extension The given extension                    
                </param>
                <return>
                    The engine to handle scripts with this extension.  Returns &lt;code&gt;null&lt;/code&gt;
                      if not found.                    
                </return>
                <throws>
                    NullPointerException if extension is null.                    
                </throws>
            </javadoc>
            <method name="getEngineByExtension" type="ScriptEngine" line="267">
                <params>
                    <param name="extension" type="String"/>
                </params>
                <comment line="270">
                    look for registered extension first                    
                </comment>
                <declaration name="obj" type="Object" line="270"/>
                <scope line="271">
                    <declaration name="spi" type="ScriptEngineFactory" line="272"/>
                    <scope line="273">
                        <declaration name="engine" type="ScriptEngine" line="274"/>
                    </scope>
                    <scope line="277"/>
                </scope>
                <scope line="282">
                    <declaration name="exts" type="List&lt;String&gt;" line="283"/>
                    <scope line="284"/>
                    <scope line="286"/>
                    <scope line="290">
                        <scope line="291">
                            <scope line="292">
                                <declaration name="engine" type="ScriptEngine" line="293"/>
                            </scope>
                            <scope line="296"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="305">
                Look up and create a &lt;code&gt;ScriptEngine&lt;/code&gt; for a given mime type.  The algorithm
                  used by &lt;code&gt;getEngineByName&lt;/code&gt; is used except that the search starts
                  by looking for a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; registered to handle the
                  given mime type using &lt;code&gt;registerEngineMimeType&lt;/code&gt;.                
                <param>
                    mimeType The given mime type                    
                </param>
                <return>
                    The engine to handle scripts with this mime type.  Returns &lt;code&gt;null&lt;/code&gt;
                      if not found.                    
                </return>
                <throws>
                    NullPointerException if mimeType is null.                    
                </throws>
            </javadoc>
            <method name="getEngineByMimeType" type="ScriptEngine" line="315">
                <params>
                    <param name="mimeType" type="String"/>
                </params>
                <comment line="318">
                    look for registered types first                    
                </comment>
                <declaration name="obj" type="Object" line="318"/>
                <scope line="319">
                    <declaration name="spi" type="ScriptEngineFactory" line="320"/>
                    <scope line="321">
                        <declaration name="engine" type="ScriptEngine" line="322"/>
                    </scope>
                    <scope line="325"/>
                </scope>
                <scope line="330">
                    <declaration name="types" type="List&lt;String&gt;" line="331"/>
                    <scope line="332"/>
                    <scope line="334"/>
                    <scope line="338">
                        <scope line="339">
                            <scope line="340">
                                <declaration name="engine" type="ScriptEngine" line="341"/>
                            </scope>
                            <scope line="344"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="353">
                Returns an array whose elements are instances of all the &lt;code&gt;ScriptEngineFactory&lt;/code&gt; classes
                  found by the discovery mechanism.                
                <return>
                    List of all discovered &lt;code&gt;ScriptEngineFactory&lt;/code&gt;s.                    
                </return>
            </javadoc>
            <method name="getEngineFactories" type="List<ScriptEngineFactory>" line="358">
                <declaration name="res" type="List&lt;ScriptEngineFactory&gt;" line="359"/>
                <scope line="360"/>
            </method>
            <javadoc line="366">
                Registers a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; to handle a language
                  name.  Overrides any such association found using the Discovery mechanism.                
                <param>
                    name The name to be associated with the &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.                    
                </param>
                <param>
                    factory The class to associate with the given name.                    
                </param>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="registerEngineName" type="void" line="373">
                <params>
                    <param name="name" type="String"/>
                    <param name="factory" type="ScriptEngineFactory"/>
                </params>
            </method>
            <javadoc line="378">
                Registers a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; to handle a mime type.
                  Overrides any such association found using the Discovery mechanism.                
                <param>
                    type The mime type  to be associated with the
                      &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.                    
                </param>
                <param>
                    factory The class to associate with the given mime type.                    
                </param>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="registerEngineMimeType" type="void" line="388">
                <params>
                    <param name="type" type="String"/>
                    <param name="factory" type="ScriptEngineFactory"/>
                </params>
            </method>
            <javadoc line="393">
                Registers a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; to handle an extension.
                  Overrides any such association found using the Discovery mechanism.                
                <param>
                    extension The extension type  to be associated with the
                      &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.                    
                </param>
                <param>
                    factory The class to associate with the given extension.                    
                </param>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="registerEngineExtension" type="void" line="402">
                <params>
                    <param name="extension" type="String"/>
                    <param name="factory" type="ScriptEngineFactory"/>
                </params>
            </method>
            <declaration name="engineSpis" type="HashSet&lt;ScriptEngineFactory&gt;" line="407"/>
            <javadoc line="407">
                Set of script engine factories discovered.                
            </javadoc>
            <declaration name="nameAssociations" type="HashMap&lt;String,ScriptEngineFactory&gt;" line="410"/>
            <javadoc line="410">
                Map of engine name to script engine factory.                
            </javadoc>
            <declaration name="extensionAssociations" type="HashMap&lt;String,ScriptEngineFactory&gt;" line="413"/>
            <javadoc line="413">
                Map of script file extension to script engine factory.                
            </javadoc>
            <declaration name="mimeTypeAssociations" type="HashMap&lt;String,ScriptEngineFactory&gt;" line="416"/>
            <javadoc line="416">
                Map of script script MIME type to script engine factory.                
            </javadoc>
            <declaration name="globalScope" type="Bindings" line="419"/>
            <javadoc line="419">
                Global bindings associated with script engines created by this manager.                
            </javadoc>
            <method name="canCallerAccessLoader" type="boolean" line="422">
                <params>
                    <param name="loader" type="ClassLoader"/>
                </params>
                <comment line="435">
                    else fallthru..                    
                </comment>
                <comment line="436">
                    else fallthru..                    
                </comment>
                <comment line="437">
                    else fallthru..                    
                </comment>
                <declaration name="sm" type="SecurityManager" line="423"/>
                <scope line="424">
                    <declaration name="callerLoader" type="ClassLoader" line="425"/>
                    <scope line="426">
                        <scope line="427">
                            <scope line="428"/>
                            <scope line="430"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getCallerClassLoader" type="ClassLoader" line="443">
                <declaration name="caller" type="Class" line="444"/>
                <scope line="445"/>
            </method>
            <method name="isAncestor" type="boolean" line="452">
                <params>
                    <param name="cl1" type="ClassLoader"/>
                    <param name="cl2" type="ClassLoader"/>
                </params>
                <scope line="453"/>
            </method>
        </class>
    </source>