<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <class name="ScriptException" line="2">
            <extends class="Exception"/>
            <javadoc line="2">
                The generic &lt;code&gt;Exception&lt;/code&gt; class for the Scripting APIs.  Checked
                  exception types thrown by underlying scripting implementations must be wrapped in instances of
                  &lt;code&gt;ScriptException&lt;/code&gt;.  The class has members to store line and column numbers and
                  filenames if this information is available.                
                <author>
                    Mike Grogan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="fileName" type="String" line="11"/>
            <declaration name="lineNumber" type="int" line="12"/>
            <declaration name="columnNumber" type="int" line="13"/>
            <javadoc line="14">
                Creates a &lt;code&gt;ScriptException&lt;/code&gt; with a String to be used in its message.
                  Filename, and line and column numbers are unspecified.                
                <param>
                    s The String to use in the message.                    
                </param>
            </javadoc>
            <method name="ScriptException" type="constructor" line="19">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="25">
                Creates a &lt;code&gt;ScriptException&lt;/code&gt; wrapping an &lt;code&gt;Exception&lt;/code&gt; thrown by an underlying
                  interpreter.  Line and column numbers and filename are unspecified.                
                <param>
                    e The wrapped <code>Exception</code>.                    
                </param>
            </javadoc>
            <method name="ScriptException" type="constructor" line="30">
                <params>
                    <param name="e" type="Exception"/>
                </params>
            </method>
            <javadoc line="36">
                Creates a &lt;code&gt;ScriptException&lt;/code&gt; with message, filename and linenumber to
                  be used in error messages.                
                <param>
                    message The string to use in the message                    
                </param>
                <param>
                    fileName The file or resource name describing the location of a script error
                      causing the <code>ScriptException</code> to be thrown.                    
                </param>
                <param>
                    lineNumber A line number describing the location of a script error causing
                      the <code>ScriptException</code> to be thrown.                    
                </param>
            </javadoc>
            <method name="ScriptException" type="constructor" line="45">
                <params>
                    <param name="message" type="String"/>
                    <param name="fileName" type="String"/>
                    <param name="lineNumber" type="int"/>
                </params>
            </method>
            <javadoc line="51">
                &lt;code&gt;ScriptException&lt;/code&gt; constructor specifying message, filename, line number
                  and column number.                
                <param>
                    message The message.                    
                </param>
                <param>
                    fileName The filename                    
                </param>
                <param>
                    lineNumber the line number.                    
                </param>
                <param>
                    columnNumber the column number.                    
                </param>
            </javadoc>
            <method name="ScriptException" type="constructor" line="59">
                <params>
                    <param name="message" type="String"/>
                    <param name="fileName" type="String"/>
                    <param name="lineNumber" type="int"/>
                    <param name="columnNumber" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Returns a message containing the String passed to a constructor as well as
                  line and column numbers and filename if any of these are known.                
                <return>
                    The error message.                    
                </return>
            </javadoc>
            <method name="getMessage" type="String" line="70">
                <declaration name="ret" type="String" line="71"/>
                <scope line="72">
                    <scope line="74"/>
                    <scope line="77"/>
                </scope>
            </method>
            <javadoc line="83">
                Get the line number on which an error occurred.                
                <return>
                    The line number.  Returns -1 if a line number is unavailable.                    
                </return>
            </javadoc>
            <method name="getLineNumber" type="int" line="87"/>
            <javadoc line="90">
                Get the column number on which an error occurred.                
                <return>
                    The column number.  Returns -1 if a column number is unavailable.                    
                </return>
            </javadoc>
            <method name="getColumnNumber" type="int" line="94"/>
            <javadoc line="97">
                Get the source of the script causing the error.                
                <return>
                    The file name of the script or some other string describing the script
                      source.  May return some implementation-defined string such as <i>&lt;unknown&gt;</i>
                      if a description of the source is unavailable.                    
                </return>
            </javadoc>
            <method name="getFileName" type="String" line="103"/>
        </class>
    </source>