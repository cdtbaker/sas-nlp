<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.util.List"/>
        <interface name="ScriptEngineFactory">
            <javadoc line="3">
                &lt;code&gt;ScriptEngineFactory&lt;/code&gt; is used to describe and instantiate
                  &lt;code&gt;ScriptEngines&lt;/code&gt;.
                  &lt;br&gt;&lt;br&gt;
                  Each class implementing &lt;code&gt;ScriptEngine&lt;/code&gt; has a corresponding factory
                  that exposes metadata describing the engine class.
                  &lt;br&gt;&lt;br&gt;The &lt;code&gt;ScriptEngineManager&lt;/code&gt;
                  uses the service provider mechanism described in the &lt;i&gt;Jar File Specification&lt;/i&gt; to obtain
                  instances of all &lt;code&gt;ScriptEngineFactories&lt;/code&gt; available in
                  the current ClassLoader.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getEngineName" type="String" line="16"/>
            <javadoc line="16">
                Returns the full  name of the &lt;code&gt;ScriptEngine&lt;/code&gt;.  For
                  instance an implementation based on the Mozilla Rhino Javascript engine
                  might return &lt;i&gt;Rhino Mozilla Javascript Engine&lt;/i&gt;.                
                <return>
                    The name of the engine implementation.                    
                </return>
            </javadoc>
            <method name="getEngineVersion" type="String" line="23"/>
            <javadoc line="23">
                Returns the version of the &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <return>
                    The &lt;code&gt;ScriptEngine&lt;/code&gt; implementation version.                    
                </return>
            </javadoc>
            <method name="getExtensions" type="List&lt;String&gt;" line="28"/>
            <javadoc line="28">
                Returns an immutable list of filename extensions, which generally identify scripts
                  written in the language supported by this &lt;code&gt;ScriptEngine&lt;/code&gt;.
                  The array is used by the &lt;code&gt;ScriptEngineManager&lt;/code&gt; to implement its
                  &lt;code&gt;getEngineByExtension&lt;/code&gt; method.                
                <return>
                    The list of extensions.                    
                </return>
            </javadoc>
            <method name="getMimeTypes" type="List&lt;String&gt;" line="36"/>
            <javadoc line="36">
                Returns an immutable list of mimetypes, associated with scripts that
                  can be executed by the engine.  The list is used by the
                  &lt;code&gt;ScriptEngineManager&lt;/code&gt; class to implement its
                  &lt;code&gt;getEngineByMimetype&lt;/code&gt; method.                
                <return>
                    The list of mime types.                    
                </return>
            </javadoc>
            <method name="getNames" type="List&lt;String&gt;" line="44"/>
            <javadoc line="44">
                Returns an immutable list of  short names for the &lt;code&gt;ScriptEngine&lt;/code&gt;, which may be used to
                  identify the &lt;code&gt;ScriptEngine&lt;/code&gt; by the &lt;code&gt;ScriptEngineManager&lt;/code&gt;.
                  For instance, an implementation based on the Mozilla Rhino Javascript engine might
                  return list containing {&amp;quot;javascript&amp;quot;, &amp;quot;rhino&amp;quot;}.                
            </javadoc>
            <method name="getLanguageName" type="String" line="51"/>
            <javadoc line="51">
                Returns the name of the scripting langauge supported by this
                  &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <return>
                    The name of the supported language.                    
                </return>
            </javadoc>
            <method name="getLanguageVersion" type="String" line="57"/>
            <javadoc line="57">
                Returns the version of the scripting language supported by this
                  &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <return>
                    The version of the supported language.                    
                </return>
            </javadoc>
            <method name="getParameter" type="Object" line="63"/>
            <javadoc line="63">
                Returns the value of an attribute whose meaning may be implementation-specific.
                  Keys for which the value is defined in all implementations are:
                  &lt;ul&gt;
                  &lt;li&gt;ScriptEngine.ENGINE&lt;/li&gt;
                  &lt;li&gt;ScriptEngine.ENGINE_VERSION&lt;/li&gt;
                  &lt;li&gt;ScriptEngine.NAME&lt;/li&gt;
                  &lt;li&gt;ScriptEngine.LANGUAGE&lt;/li&gt;
                  &lt;li&gt;ScriptEngine.LANGUAGE_VERSION&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The values for these keys are the Strings returned by &lt;code&gt;getEngineName&lt;/code&gt;,
                  &lt;code&gt;getEngineVersion&lt;/code&gt;, &lt;code&gt;getName&lt;/code&gt;, &lt;code&gt;getLanguageName&lt;/code&gt; and
                  &lt;code&gt;getLanguageVersion&lt;/code&gt; respectively.&lt;br&gt;&lt;br&gt;
                  A reserved key, &lt;code&gt;&lt;b&gt;THREADING&lt;/b&gt;&lt;/code&gt;, whose value describes the behavior of the engine
                  with respect to concurrent execution of scripts and maintenance of state is also defined.
                  These values for the &lt;code&gt;&lt;b&gt;THREADING&lt;/b&gt;&lt;/code&gt; key are:&lt;br&gt;&lt;br&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;null&lt;/code&gt; - The engine implementation is not thread safe, and cannot
                  be used to execute scripts concurrently on multiple threads.
                  &lt;li&gt;&lt;code&gt;&amp;quot;MULTITHREADED&amp;quot;&lt;/code&gt; - The engine implementation is internally
                  thread-safe and scripts may execute concurrently although effects of script execution
                  on one thread may be visible to scripts on other threads.
                  &lt;li&gt;&lt;code&gt;&amp;quot;THREAD-ISOLATED&amp;quot;&lt;/code&gt; - The implementation satisfies the requirements
                  of &amp;quot;MULTITHREADED&amp;quot;, and also, the engine maintains independent values
                  for symbols in scripts executing on different threads.
                  &lt;li&gt;&lt;code&gt;&amp;quot;STATELESS&amp;quot;&lt;/code&gt; - The implementation satisfies the requirements of
                  &lt;li&gt;&lt;code&gt;&amp;quot;THREAD-ISOLATED&amp;quot;&lt;/code&gt;.  In addition, script executions do not alter the
                  mappings in the &lt;code&gt;Bindings&lt;/code&gt; which is the engine scope of the
                  &lt;code&gt;ScriptEngine&lt;/code&gt;.  In particular, the keys in the &lt;code&gt;Bindings&lt;/code&gt;
                  and their associated values are the same before and after the execution of the script.
                  &lt;/ul&gt;
                  &lt;br&gt;&lt;br&gt;
                  Implementations may define implementation-specific keys.                
                <param>
                    key The name of the parameter                    
                </param>
                <return>
                    The value for the given parameter. Returns &lt;code&gt;null&lt;/code&gt; if no
                      value is assigned to the key.                    
                </return>
            </javadoc>
            <method name="getMethodCallSyntax" type="String" line="102"/>
            <javadoc line="102">
                Returns a String which can be used to invoke a method of a  Java object using the syntax
                  of the supported scripting language.  For instance, an implementaton for a Javascript
                  engine might be;
                  &lt;p&gt;
                  &lt;pre&gt;
                  &lt;code&gt;
                  public String getMethodCallSyntax(String obj,
                  String m, String... args) {
                  String ret = obj;
                  ret += &quot;.&quot; + m + &quot;(&quot;;
                  for (int i = 0; i &lt; args.length; i++) {
                  ret += args[i];
                  if (i &lt; args.length - 1) {
                  ret += &quot;,&quot;;
                  }
                  }
                  ret += &quot;)&quot;;
                  return ret;
                  }
                  &lt;/code&gt;
                  &lt;/pre&gt;
                  &lt;p&gt;                
                <param>
                    obj The name representing the object whose method is to be invoked. The
                      name is the one used to create bindings using the &lt;code&gt;put&lt;/code&gt; method of
                      &lt;code&gt;ScriptEngine&lt;/code&gt;, the &lt;code&gt;put&lt;/code&gt; method of an &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                      &lt;code&gt;Bindings&lt;/code&gt;,or the &lt;code&gt;setAttribute&lt;/code&gt; method
                      of &lt;code&gt;ScriptContext&lt;/code&gt;.  The identifier used in scripts may be a decorated form of the
                      specified one.                    
                </param>
                <param>
                    m The name of the method to invoke.                    
                </param>
                <param>
                    args names of the arguments in the method call.                    
                </param>
                <return>
                    The String used to invoke the method in the syntax of the scripting language.                    
                </return>
            </javadoc>
            <method name="getOutputStatement" type="String" line="136"/>
            <javadoc line="136">
                Returns a String that can be used as a statement to display the specified String  using
                  the syntax of the supported scripting language.  For instance, the implementaton for a Perl
                  engine might be;
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  public String getOutputStatement(String toDisplay) {
                  return &quot;print(&quot; + toDisplay + &quot;)&quot;;
                  }
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    toDisplay The String to be displayed by the returned statement.                    
                </param>
                <return>
                    The string used to display the String in the syntax of the scripting language.                    
                </return>
            </javadoc>
            <method name="getProgram" type="String" line="150"/>
            <javadoc line="150">
                Returns A valid scripting language executable progam with given statements.
                  For instance an implementation for a PHP engine might be:
                  &lt;p&gt;
                  &lt;pre&gt;&lt;code&gt;
                  public String getProgram(String... statements) {
                  $retval = &quot;&amp;lt;?\n&quot;;
                  int len = statements.length;
                  for (int i = 0; i &lt; len; i++) {
                  $retval += statements[i] + &quot;;\n&quot;;
                  }
                  $retval += &quot;?&amp;gt;&quot;;
                  }
                  &lt;/code&gt;&lt;/pre&gt;                
                <param>
                    statements The statements to be executed.  May be return values of
                      calls to the &lt;code&gt;getMethodCallSyntax&lt;/code&gt; and &lt;code&gt;getOutputStatement&lt;/code&gt; methods.                    
                </param>
                <return>
                    The Program                    
                </return>
            </javadoc>
            <method name="getScriptEngine" type="ScriptEngine" line="169"/>
            <javadoc line="169">
                Returns an instance of the &lt;code&gt;ScriptEngine&lt;/code&gt; associated with this
                  &lt;code&gt;ScriptEngineFactory&lt;/code&gt;. A new ScriptEngine is generally
                  returned, but implementations may pool, share or reuse engines.                
                <return>
                    A new &lt;code&gt;ScriptEngine&lt;/code&gt; instance.                    
                </return>
            </javadoc>
        </interface>
    </source>