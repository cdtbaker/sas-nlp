<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.util"/>
        <import package="java.io"/>
        <class name="SimpleScriptContext" line="31">
            <implements interface="ScriptContext"/>
            <javadoc line="31">
                Simple implementation of ScriptContext.                
                <author>
                    Mike Grogan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="writer" type="Writer" line="39"/>
            <javadoc line="39">
                This is the writer to be used to output from scripts.
                  By default, a &lt;code&gt;PrintWriter&lt;/code&gt; based on &lt;code&gt;System.out&lt;/code&gt;
                  is used. Accessor methods getWriter, setWriter are used to manage
                  this field.                
                <see>
                    java.lang.System#out                    
                </see>
                <see>
                    java.io.PrintWriter                    
                </see>
            </javadoc>
            <declaration name="errorWriter" type="Writer" line="49"/>
            <javadoc line="49">
                This is the writer to be used to output errors from scripts.
                  By default, a &lt;code&gt;PrintWriter&lt;/code&gt; based on &lt;code&gt;System.err&lt;/code&gt; is
                  used. Accessor methods getErrorWriter, setErrorWriter are used to manage
                  this field.                
                <see>
                    java.lang.System#err                    
                </see>
                <see>
                    java.io.PrintWriter                    
                </see>
            </javadoc>
            <declaration name="reader" type="Reader" line="59"/>
            <javadoc line="59">
                This is the reader to be used for input from scripts.
                  By default, a &lt;code&gt;InputStreamReader&lt;/code&gt; based on &lt;code&gt;System.in&lt;/code&gt;
                  is used and default charset is used by this reader. Accessor methods
                  getReader, setReader are used to manage this field.                
                <see>
                    java.lang.System#in                    
                </see>
                <see>
                    java.io.InputStreamReader                    
                </see>
            </javadoc>
            <declaration name="engineScope" type="Bindings" line="70"/>
            <javadoc line="70">
                This is the engine scope bindings.
                  By default, a &lt;code&gt;SimpleBindings&lt;/code&gt; is used. Accessor
                  methods setBindings, getBindings are used to manage this field.                
                <see>
                    SimpleBindings                    
                </see>
            </javadoc>
            <declaration name="globalScope" type="Bindings" line="78"/>
            <javadoc line="78">
                This is the global scope bindings.
                  By default, a null value (which means no global scope) is used. Accessor
                  methods setBindings, getBindings are used to manage this field.                
            </javadoc>
            <method name="SimpleScriptContext" type="constructor" line="86"/>
            <javadoc line="94">
                Sets a &lt;code&gt;Bindings&lt;/code&gt; of attributes for the given scope.  If the value
                  of scope is &lt;code&gt;ENGINE_SCOPE&lt;/code&gt; the given &lt;code&gt;Bindings&lt;/code&gt; replaces the
                  &lt;code&gt;engineScope&lt;/code&gt; field.  If the value
                  of scope is &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt; the given &lt;code&gt;Bindings&lt;/code&gt; replaces the
                  &lt;code&gt;globalScope&lt;/code&gt; field.                
                <param>
                    bindings The &lt;code&gt;Bindings&lt;/code&gt; of attributes to set.                    
                </param>
                <param>
                    scope The value of the scope in which the attributes are set.                    
                </param>
                <throws>
                    IllegalArgumentException if scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the value of scope is &lt;code&gt;ENGINE_SCOPE&lt;/code&gt; and
                      the specified &lt;code&gt;Bindings&lt;/code&gt; is null.                    
                </throws>
            </javadoc>
            <method name="setBindings" type="void" line="108">
                <params>
                    <param name="bindings" type="Bindings"/>
                    <param name="scope" type="int"/>
                </params>
                <scope line="113"/>
            </method>
            <javadoc line="127">
                Retrieves the value of the attribute with the given name in
                  the scope occurring earliest in the search order.  The order
                  is determined by the numeric value of the scope parameter (lowest
                  scope values first.)                
                <param>
                    name The name of the the attribute to retrieve.                    
                </param>
                <return>
                    The value of the attribute in the lowest scope for
                      which an attribute with the given name is defined.  Returns
                      null if no attribute with the name exists in any scope.                    
                </return>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if the name is empty.                    
                </throws>
            </javadoc>
            <method name="getAttribute" type="Object" line="140">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="141"/>
                <scope line="143"/>
            </method>
            <javadoc line="150">
                Gets the value of an attribute in a given scope.                
                <param>
                    name The name of the attribute to retrieve.                    
                </param>
                <param>
                    scope The scope in which to retrieve the attribute.                    
                </param>
                <return>
                    The value of the attribute. Returns &lt;code&gt;null&lt;/code&gt; is the name
                      does not exist in the given scope.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the name is empty or if the value of scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="getAttribute" type="Object" line="162">
                <params>
                    <param name="name" type="String"/>
                    <param name="scope" type="int"/>
                </params>
                <scope line="170"/>
            </method>
            <javadoc line="180">
                Remove an attribute in a given scope.                
                <param>
                    name The name of the attribute to remove                    
                </param>
                <param>
                    scope The scope in which to remove the attribute                    
                </param>
                <return>
                    The removed value.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the name is empty or if the scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="removeAttribute" type="Object" line="191">
                <params>
                    <param name="name" type="String"/>
                    <param name="scope" type="int"/>
                </params>
                <scope line="196"/>
                <scope line="202"/>
            </method>
            <javadoc line="212">
                Sets the value of an attribute in a given scope.                
                <param>
                    name The name of the attribute to set                    
                </param>
                <param>
                    value The value of the attribute                    
                </param>
                <param>
                    scope The scope in which to set the attribute                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the name is empty or if the scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="setAttribute" type="void" line="223">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                    <param name="scope" type="int"/>
                </params>
                <scope line="232"/>
            </method>
            <javadoc line="242">
                {@inheritDoc}                
            </javadoc>
            <method name="getWriter" type="Writer" line="243"/>
            <javadoc line="247">
                {@inheritDoc}                
            </javadoc>
            <method name="getReader" type="Reader" line="248"/>
            <javadoc line="252">
                {@inheritDoc}                
            </javadoc>
            <method name="setReader" type="void" line="253">
                <params>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="257">
                {@inheritDoc}                
            </javadoc>
            <method name="setWriter" type="void" line="258">
                <params>
                    <param name="writer" type="Writer"/>
                </params>
            </method>
            <javadoc line="262">
                {@inheritDoc}                
            </javadoc>
            <method name="getErrorWriter" type="Writer" line="263"/>
            <javadoc line="267">
                {@inheritDoc}                
            </javadoc>
            <method name="setErrorWriter" type="void" line="268">
                <params>
                    <param name="writer" type="Writer"/>
                </params>
            </method>
            <javadoc line="272">
                Get the lowest scope in which an attribute is defined.                
                <param>
                    name Name of the attribute
                      .                    
                </param>
                <return>
                    The lowest scope.  Returns -1 if no attribute with the given
                      name is defined in any scope.                    
                </return>
                <throws>
                    NullPointerException if name is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if name is empty.                    
                </throws>
            </javadoc>
            <method name="getAttributesScope" type="int" line="281">
                <params>
                    <param name="name" type="String"/>
                </params>
                <scope line="282"/>
                <scope line="284"/>
                <scope line="286"/>
            </method>
            <javadoc line="291">
                Returns the value of the &lt;code&gt;engineScope&lt;/code&gt; field if specified scope is
                  &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;.  Returns the value of the &lt;code&gt;globalScope&lt;/code&gt; field if the specified scope is
                  &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt;.                
                <param>
                    scope The specified scope                    
                </param>
                <return>
                    The value of either the  &lt;code&gt;engineScope&lt;/code&gt; or &lt;code&gt;globalScope&lt;/code&gt; field.                    
                </return>
                <throws>
                    IllegalArgumentException if the value of scope is invalid.                    
                </throws>
            </javadoc>
            <method name="getBindings" type="Bindings" line="300">
                <params>
                    <param name="scope" type="int"/>
                </params>
                <scope line="301"/>
                <scope line="303"/>
                <scope line="305"/>
            </method>
            <javadoc line="310">
                {@inheritDoc}                
            </javadoc>
            <method name="getScopes" type="List<Integer>" line="311"/>
            <declaration name="scopes" type="List&lt;Integer&gt;" line="315"/>
            <scope line="316"/>
        </class>
    </source>