<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.util.List"/>
        <import package="java.io.Writer"/>
        <import package="java.io.Reader"/>
        <interface name="ScriptContext">
            <javadoc line="31">
                The interface whose implementing classes are used to connect Script Engines
                  with objects, such as scoped Bindings, in hosting applications.  Each scope is a set
                  of named attributes whose values can be set and retrieved using the
                  &lt;code&gt;ScriptContext&lt;/code&gt; methods. ScriptContexts also expose Readers and Writers
                  that can be used by the ScriptEngines for input and output.                
                <author>
                    Mike Grogan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ENGINE_SCOPE" type="int" line="44"/>
            <javadoc line="44">
                EngineScope attributes are visible during the lifetime of a single
                  &lt;code&gt;ScriptEngine&lt;/code&gt; and a set of attributes is maintained for each
                  engine.                
            </javadoc>
            <declaration name="GLOBAL_SCOPE" type="int" line="51"/>
            <javadoc line="51">
                GlobalScope attributes are visible to all engines created by same ScriptEngineFactory.                
            </javadoc>
            <method name="setBindings" type="void" line="57"/>
            <javadoc line="57">
                Associates a &lt;code&gt;Bindings&lt;/code&gt; instance with a particular scope in this
                  &lt;code&gt;ScriptContext&lt;/code&gt;.  Calls to the &lt;code&gt;getAttribute&lt;/code&gt; and
                  &lt;code&gt;setAttribute&lt;/code&gt; methods must map to the &lt;code&gt;get&lt;/code&gt; and
                  &lt;code&gt;put&lt;/code&gt; methods of the &lt;code&gt;Bindings&lt;/code&gt; for the specified scope.                
                <param>
                    bindings The <code>Bindings</code> to associate with the given scope                    
                </param>
                <param>
                    scope The scope                    
                </param>
                <throws>
                    IllegalArgumentException If no <code>Bindings</code> is defined for the
                      specified scope value in ScriptContexts of this type.                    
                </throws>
                <throws>
                    NullPointerException if value of scope is <code>ENGINE_SCOPE</code> and
                      the specified <code>Bindings</code> is null.                    
                </throws>
            </javadoc>
            <method name="getBindings" type="Bindings" line="74"/>
            <javadoc line="74">
                Gets the &lt;code&gt;Bindings&lt;/code&gt;  associated with the given scope in this
                  &lt;code&gt;ScriptContext&lt;/code&gt;.                
                <return>
                    The associated <code>Bindings</code>.  Returns <code>null</code> if it has not
                      been set.                    
                </return>
                <throws>
                    IllegalArgumentException If no <code>Bindings</code> is defined for the
                      specified scope value in <code>ScriptContext</code> of this type.                    
                </throws>
            </javadoc>
            <method name="setAttribute" type="void" line="86"/>
            <javadoc line="86">
                Sets the value of an attribute in a given scope.                
                <param>
                    name The name of the attribute to set                    
                </param>
                <param>
                    value The value of the attribute                    
                </param>
                <param>
                    scope The scope in which to set the attribute                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the name is empty or if the scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="getAttribute" type="Object" line="99"/>
            <javadoc line="99">
                Gets the value of an attribute in a given scope.                
                <param>
                    name The name of the attribute to retrieve.                    
                </param>
                <param>
                    scope The scope in which to retrieve the attribute.                    
                </param>
                <return>
                    The value of the attribute. Returns <code>null</code> is the name
                      does not exist in the given scope.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the name is empty or if the value of scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="removeAttribute" type="Object" line="113"/>
            <javadoc line="113">
                Remove an attribute in a given scope.                
                <param>
                    name The name of the attribute to remove                    
                </param>
                <param>
                    scope The scope in which to remove the attribute                    
                </param>
                <return>
                    The removed value.                    
                </return>
                <throws>
                    IllegalArgumentExceptionif the name is empty or if the scope is invalid.                    
                </throws>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
            </javadoc>
            <method name="getAttribute" type="Object" line="126"/>
            <javadoc line="126">
                Retrieves the value of the attribute with the given name in
                  the scope occurring earliest in the search order.  The order
                  is determined by the numeric value of the scope parameter (lowest
                  scope values first.)                
                <param>
                    name The name of the the attribute to retrieve.                    
                </param>
                <return>
                    The value of the attribute in the lowest scope for
                      which an attribute with the given name is defined.  Returns
                      null if no attribute with the name exists in any scope.                    
                </return>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if the name is empty.                    
                </throws>
            </javadoc>
            <method name="getAttributesScope" type="int" line="142"/>
            <javadoc line="142">
                Get the lowest scope in which an attribute is defined.                
                <param>
                    name Name of the attribute
                      .                    
                </param>
                <return>
                    The lowest scope.  Returns -1 if no attribute with the given
                      name is defined in any scope.                    
                </return>
                <throws>
                    NullPointerException if name is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if name is empty.                    
                </throws>
            </javadoc>
            <method name="getWriter" type="Writer" line="153"/>
            <javadoc line="153">
                Returns the &lt;code&gt;Writer&lt;/code&gt; for scripts to use when displaying output.                
                <return>
                    The <code>Writer</code>.                    
                </return>
            </javadoc>
            <method name="getErrorWriter" type="Writer" line="161"/>
            <javadoc line="161">
                Returns the &lt;code&gt;Writer&lt;/code&gt; used to display error output.                
                <return>
                    The <code>Writer</code>                    
                </return>
            </javadoc>
            <method name="setWriter" type="void" line="168"/>
            <javadoc line="168">
                Sets the &lt;code&gt;Writer&lt;/code&gt; for scripts to use when displaying output.                
                <param>
                    writer The new <code>Writer</code>.                    
                </param>
            </javadoc>
            <method name="setErrorWriter" type="void" line="176"/>
            <javadoc line="176">
                Sets the &lt;code&gt;Writer&lt;/code&gt; used to display error output.                
                <param>
                    writer The <code>Writer</code>.                    
                </param>
            </javadoc>
            <method name="getReader" type="Reader" line="183"/>
            <javadoc line="183">
                Returns a &lt;code&gt;Reader&lt;/code&gt; to be used by the script to read
                  input.                
                <return>
                    The <code>Reader</code>.                    
                </return>
            </javadoc>
            <method name="setReader" type="void" line="192"/>
            <javadoc line="192">
                Sets the &lt;code&gt;Reader&lt;/code&gt; for scripts to read input
                  .                
                <param>
                    reader The new <code>Reader</code>.                    
                </param>
            </javadoc>
            <method name="getScopes" type="List<Integer>" line="199"/>
            <javadoc line="199">
                Returns immutable &lt;code&gt;List&lt;/code&gt; of all the valid values for
                  scope in the ScriptContext.                
                <return>
                    list of scope values                    
                </return>
            </javadoc>
        </interface>
    </source>