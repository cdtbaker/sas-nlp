<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.util.Map"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Collection"/>
        <import package="java.util.Set"/>
        <class name="SimpleBindings" line="33">
            <implements interface="Bindings"/>
            <javadoc line="33">
                A simple implementation of Bindings backed by
                  a &lt;code&gt;HashMap&lt;/code&gt; or some other specified &lt;code&gt;Map&lt;/code&gt;.                
                <author>
                    Mike Grogan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="map" type="Map&lt;String,Object&gt;" line="42"/>
            <javadoc line="42">
                The &lt;code&gt;Map&lt;/code&gt; field stores the attributes.                
            </javadoc>
            <javadoc line="47">
                Constructor uses an existing &lt;code&gt;Map&lt;/code&gt; to store the values.                
                <param>
                    m The &lt;code&gt;Map&lt;/code&gt; backing this &lt;code&gt;SimpleBindings&lt;/code&gt;.                    
                </param>
                <throws>
                    NullPointerException if m is null                    
                </throws>
            </javadoc>
            <method name="SimpleBindings" type="constructor" line="52">
                <params>
                    <param name="m" type="Map<String,Object>"/>
                </params>
                <scope line="53"/>
            </method>
            <javadoc line="59">
                Default constructor uses a &lt;code&gt;HashMap&lt;/code&gt;.                
            </javadoc>
            <method name="SimpleBindings" type="constructor" line="62"/>
            <javadoc line="66">
                Sets the specified key/value in the underlying &lt;code&gt;map&lt;/code&gt; field.                
                <param>
                    name Name of value                    
                </param>
                <param>
                    value Value to set.                    
                </param>
                <return>
                    Previous value for the specified key.  Returns null if key was previously
                      unset.                    
                </return>
                <throws>
                    NullPointerException if the name is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if the name is empty.                    
                </throws>
            </javadoc>
            <method name="put" type="Object" line="78">
                <params>
                    <param name="name" type="String"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="83">
                &lt;code&gt;putAll&lt;/code&gt; is implemented using &lt;code&gt;Map.putAll&lt;/code&gt;.                
                <param>
                    toMerge The &lt;code&gt;Map&lt;/code&gt; of values to add.                    
                </param>
                <throws>
                    NullPointerExceptionif toMerge map is null or if some key in the map is null.                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif some key in the map is an empty String.                    
                </throws>
            </javadoc>
            <method name="putAll" type="void" line="93">
                <params>
                    <param name="toMerge" type="Map<? extends String,? extends Object>"/>
                </params>
                <scope line="94"/>
                <scope line="97">
                    <declaration name="key" type="String" line="98"/>
                </scope>
            </method>
            <javadoc line="104">
                {@inheritDoc}                
            </javadoc>
            <method name="clear" type="void" line="105"/>
            <javadoc line="109">
                Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified
                  key.  More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if
                  this map contains a mapping for a key &lt;tt&gt;k&lt;/tt&gt; such that
                  &lt;tt&gt;(key==null ? k==null : key.equals(k))&lt;/tt&gt;.  (There can be
                  at most one such mapping.)                
                <param>
                    key key whose presence in this map is to be tested.                    
                </param>
                <return>
                    &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified
                      key.                    
                </return>
                <throws>
                    NullPointerException if key is null                    
                </throws>
                <throws>
                    ClassCastException if key is not String                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty String                    
                </throws>
            </javadoc>
            <method name="containsKey" type="boolean" line="124">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="129">
                {@inheritDoc}                
            </javadoc>
            <method name="containsValue" type="boolean" line="130">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="134">
                {@inheritDoc}                
            </javadoc>
            <method name="entrySet" type="Set<Map.Entry<String,Object>>" line="135"/>
            <javadoc line="139">
                Returns the value to which this map maps the specified key.  Returns
                  &lt;tt&gt;null&lt;/tt&gt; if the map contains no mapping for this key.  A return
                  value of &lt;tt&gt;null&lt;/tt&gt; does not &lt;i&gt;necessarily&lt;/i&gt; indicate that the
                  map contains no mapping for the key; it&apos;s also possible that the map
                  explicitly maps the key to &lt;tt&gt;null&lt;/tt&gt;.  The &lt;tt&gt;containsKey&lt;/tt&gt;
                  operation may be used to distinguish these two cases.
                  &lt;p&gt;More formally, if this map contains a mapping from a key
                  &lt;tt&gt;k&lt;/tt&gt; to a value &lt;tt&gt;v&lt;/tt&gt; such that &lt;tt&gt;(key==null ? k==null :
                  key.equals(k))&lt;/tt&gt;, then this method returns &lt;tt&gt;v&lt;/tt&gt;; otherwise
                  it returns &lt;tt&gt;null&lt;/tt&gt;.  (There can be at most one such mapping.)                
                <param>
                    key key whose associated value is to be returned.                    
                </param>
                <return>
                    the value to which this map maps the specified key, or
                      &lt;tt&gt;null&lt;/tt&gt; if the map contains no mapping for this key.                    
                </return>
                <throws>
                    NullPointerException if key is null                    
                </throws>
                <throws>
                    ClassCastException if key is not String                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty String                    
                </throws>
            </javadoc>
            <method name="get" type="Object" line="160">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="165">
                {@inheritDoc}                
            </javadoc>
            <method name="isEmpty" type="boolean" line="166"/>
            <javadoc line="170">
                {@inheritDoc}                
            </javadoc>
            <method name="keySet" type="Set<String>" line="171"/>
            <javadoc line="175">
                Removes the mapping for this key from this map if it is present
                  (optional operation).   More formally, if this map contains a mapping
                  from key &lt;tt&gt;k&lt;/tt&gt; to value &lt;tt&gt;v&lt;/tt&gt; such that
                  &lt;code&gt;(key==null ?  k==null : key.equals(k))&lt;/code&gt;, that mapping
                  is removed.  (The map can contain at most one such mapping.)
                  &lt;p&gt;Returns the value to which the map previously associated the key, or
                  &lt;tt&gt;null&lt;/tt&gt; if the map contained no mapping for this key.  (A
                  &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map previously
                  associated &lt;tt&gt;null&lt;/tt&gt; with the specified key if the implementation
                  supports &lt;tt&gt;null&lt;/tt&gt; values.)  The map will not contain a mapping for
                  the specified  key once the call returns.                
                <param>
                    key key whose mapping is to be removed from the map.                    
                </param>
                <return>
                    previous value associated with specified key, or &lt;tt&gt;null&lt;/tt&gt;
                      if there was no mapping for key.                    
                </return>
                <throws>
                    NullPointerException if key is null                    
                </throws>
                <throws>
                    ClassCastException if key is not String                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty String                    
                </throws>
            </javadoc>
            <method name="remove" type="Object" line="197">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="202">
                {@inheritDoc}                
            </javadoc>
            <method name="size" type="int" line="203"/>
            <javadoc line="207">
                {@inheritDoc}                
            </javadoc>
            <method name="values" type="Collection<Object>" line="208"/>
            <method name="checkKey" type="void" line="212">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="213"/>
                <scope line="216"/>
                <scope line="219"/>
            </method>
        </class>
    </source>