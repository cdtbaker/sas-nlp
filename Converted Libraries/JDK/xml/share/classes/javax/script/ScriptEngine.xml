<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.io.Reader"/>
        <import package="java.util.Map"/>
        <import package="java.util.Set"/>
        <interface name="ScriptEngine">
            <javadoc line="32">
                &lt;code&gt;ScriptEngine&lt;/code&gt; is the fundamental interface whose methods must be
                  fully functional in every implementation of this specification.
                  &lt;br&gt;&lt;br&gt;
                  These methods provide basic scripting functionality.  Applications written to this
                  simple interface are expected to work with minimal modifications in every implementation.
                  It includes methods that execute scripts, and ones that set and get values.
                  &lt;br&gt;&lt;br&gt;
                  The values are key/value pairs of two types.  The first type of pairs consists of
                  those whose keys are reserved and defined in this specification or  by individual
                  implementations.  The values in the pairs with reserved keys have specified meanings.
                  &lt;br&gt;&lt;br&gt;
                  The other type of pairs consists of those that create Java language Bindings, the values are
                  usually represented in scripts by the corresponding keys or by decorated forms of them.                
                <author>
                    Mike Grogan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ARGV" type="String" line="53"/>
            <javadoc line="53">
                Reserved key for a named value that passes
                  an array of positional arguments to a script.                
            </javadoc>
            <declaration name="FILENAME" type="String" line="59"/>
            <javadoc line="59">
                Reserved key for a named value that is
                  the name of the file being executed.                
            </javadoc>
            <declaration name="ENGINE" type="String" line="65"/>
            <javadoc line="65">
                Reserved key for a named value that is
                  the name of the &lt;code&gt;ScriptEngine&lt;/code&gt; implementation.                
            </javadoc>
            <declaration name="ENGINE_VERSION" type="String" line="71"/>
            <javadoc line="71">
                Reserved key for a named value that identifies
                  the version of the &lt;code&gt;ScriptEngine&lt;/code&gt; implementation.                
            </javadoc>
            <declaration name="NAME" type="String" line="77"/>
            <javadoc line="77">
                Reserved key for a named value that identifies
                  the short name of the scripting language.  The name is used by the
                  &lt;code&gt;ScriptEngineManager&lt;/code&gt; to locate a &lt;code&gt;ScriptEngine&lt;/code&gt;
                  with a given name in the &lt;code&gt;getEngineByName&lt;/code&gt; method.                
            </javadoc>
            <declaration name="LANGUAGE" type="String" line="85"/>
            <javadoc line="85">
                Reserved key for a named value that is
                  the full name of Scripting Language supported by the implementation.                
            </javadoc>
            <declaration name="LANGUAGE_VERSION" type="String" line="91"/>
            <javadoc line="91">
                Reserved key for the named value that identifies
                  the version of the scripting language supported by the implementation.                
            </javadoc>
            <method name="eval" type="Object" line="98"/>
            <javadoc line="98">
                Causes the immediate execution of the script whose source is the String
                  passed as the first argument.  The script may be reparsed or recompiled before
                  execution.  State left in the engine from previous executions, including
                  variable values and compiled procedures may be visible during this execution.                
                <param>
                    script The script to be executed by the script engine.                    
                </param>
                <param>
                    context A &lt;code&gt;ScriptContext&lt;/code&gt; exposing sets of attributes in
                      different scopes.  The meanings of the scopes &lt;code&gt;ScriptContext.GLOBAL_SCOPE&lt;/code&gt;,
                      and &lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt; are defined in the specification.
                      &lt;br&gt;&lt;br&gt;
                      The &lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptContext&lt;/code&gt; contains the
                      bindings of scripting variables to application objects to be used during this
                      script execution.                    
                </param>
                <return>
                    The value returned from the execution of the script.                    
                </return>
                <throws>
                    ScriptException if an error occurrs in script. ScriptEngines should create and throw
                      &lt;code&gt;ScriptException&lt;/code&gt; wrappers for checked Exceptions thrown by underlying scripting
                      implementations.                    
                </throws>
                <throws>
                    NullPointerException if either argument is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="125"/>
            <javadoc line="125">
                Same as &lt;code&gt;eval(String, ScriptContext)&lt;/code&gt; where the source of the script
                  is read from a &lt;code&gt;Reader&lt;/code&gt;.                
                <param>
                    reader The source of the script to be executed by the script engine.                    
                </param>
                <param>
                    context The &lt;code&gt;ScriptContext&lt;/code&gt; passed to the script engine.                    
                </param>
                <return>
                    The value returned from the execution of the script.                    
                </return>
                <throws>
                    ScriptException if an error occurrs in script.                    
                </throws>
                <throws>
                    NullPointerException if either argument is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="140"/>
            <javadoc line="140">
                Executes the specified script.  The default &lt;code&gt;ScriptContext&lt;/code&gt; for the &lt;code&gt;ScriptEngine&lt;/code&gt;
                  is used.                
                <param>
                    script The script language source to be executed.                    
                </param>
                <return>
                    The value returned from the execution of the script.                    
                </return>
                <throws>
                    ScriptException if error occurrs in script.                    
                </throws>
                <throws>
                    NullPointerException if the argument is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="153"/>
            <javadoc line="153">
                Same as &lt;code&gt;eval(String)&lt;/code&gt; except that the source of the script is
                  provided as a &lt;code&gt;Reader&lt;/code&gt;                
                <param>
                    reader The source of the script.                    
                </param>
                <return>
                    The value returned by the script.                    
                </return>
                <throws>
                    ScriptException if an error occurrs in script.                    
                </throws>
                <throws>
                    NullPointerException if the argument is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="166"/>
            <javadoc line="166">
                Executes the script using the &lt;code&gt;Bindings&lt;/code&gt; argument as the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                  &lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt; during the script execution.  The
                  &lt;code&gt;Reader&lt;/code&gt;, &lt;code&gt;Writer&lt;/code&gt; and non-&lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; of the
                  default &lt;code&gt;ScriptContext&lt;/code&gt; are used. The &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                  &lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt; is not changed, and its
                  mappings are unaltered by the script execution.                
                <param>
                    script The source for the script.                    
                </param>
                <param>
                    n The &lt;code&gt;Bindings&lt;/code&gt; of attributes to be used for script execution.                    
                </param>
                <return>
                    The value returned by the script.                    
                </return>
                <throws>
                    ScriptException if an error occurrs in script.                    
                </throws>
                <throws>
                    NullPointerException if either argument is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="185"/>
            <javadoc line="185">
                Same as &lt;code&gt;eval(String, Bindings)&lt;/code&gt; except that the source of the script
                  is provided as a &lt;code&gt;Reader&lt;/code&gt;.                
                <param>
                    reader The source of the script.                    
                </param>
                <param>
                    n The &lt;code&gt;Bindings&lt;/code&gt; of attributes.                    
                </param>
                <return>
                    The value returned by the script.                    
                </return>
                <throws>
                    ScriptException if an error occurrs.                    
                </throws>
                <throws>
                    NullPointerException if either argument is null.                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="201"/>
            <javadoc line="201">
                Sets a key/value pair in the state of the ScriptEngine that may either create
                  a Java Language Binding to be used in the execution of scripts or be used in some
                  other way, depending on whether the key is reserved.  Must have the same effect as
                  &lt;code&gt;getBindings(ScriptContext.ENGINE_SCOPE).put&lt;/code&gt;.                
                <param>
                    key The name of named value to add                    
                </param>
                <param>
                    value The value of named value to add.                    
                </param>
                <throws>
                    NullPointerException if key is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty.                    
                </throws>
            </javadoc>
            <method name="get" type="Object" line="216"/>
            <javadoc line="216">
                Retrieves a value set in the state of this engine.  The value might be one
                  which was set using &lt;code&gt;setValue&lt;/code&gt; or some other value in the state
                  of the &lt;code&gt;ScriptEngine&lt;/code&gt;, depending on the implementation.  Must have the same effect
                  as &lt;code&gt;getBindings(ScriptContext.ENGINE_SCOPE).get&lt;/code&gt;                
                <param>
                    key The key whose value is to be returned                    
                </param>
                <return>
                    the value for the given key                    
                </return>
                <throws>
                    NullPointerException if key is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty.                    
                </throws>
            </javadoc>
            <method name="getBindings" type="Bindings" line="231"/>
            <javadoc line="231">
                Returns a scope of named values.  The possible scopes are:
                  &lt;br&gt;&lt;br&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ScriptContext.GLOBAL_SCOPE&lt;/code&gt; - The set of named values representing global
                  scope. If this &lt;code&gt;ScriptEngine&lt;/code&gt; is created by a &lt;code&gt;ScriptEngineManager&lt;/code&gt;,
                  then the manager sets global scope bindings. This may be &lt;code&gt;null&lt;/code&gt; if no global
                  scope is associated with this &lt;code&gt;ScriptEngine&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt; - The set of named values representing the state of
                  this &lt;code&gt;ScriptEngine&lt;/code&gt;.  The values are generally visible in scripts using
                  the associated keys as variable names.&lt;/li&gt;
                  &lt;li&gt;Any other value of scope defined in the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br&gt;&lt;br&gt;
                  The &lt;code&gt;Bindings&lt;/code&gt; instances that are returned must be identical to those returned by the
                  &lt;code&gt;getBindings&lt;/code&gt; method of &lt;code&gt;ScriptContext&lt;/code&gt; called with corresponding arguments on
                  the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <param>
                    scope Either &lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt; or &lt;code&gt;ScriptContext.GLOBAL_SCOPE&lt;/code&gt;
                      which specifies the &lt;code&gt;Bindings&lt;/code&gt; to return.  Implementations of &lt;code&gt;ScriptContext&lt;/code&gt;
                      may define additional scopes.  If the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;
                      defines additional scopes, any of them can be passed to get the corresponding &lt;code&gt;Bindings&lt;/code&gt;.                    
                </param>
                <return>
                    The &lt;code&gt;Bindings&lt;/code&gt; with the specified scope.                    
                </return>
                <throws>
                    IllegalArgumentException if specified scope is invalid                    
                </throws>
            </javadoc>
            <method name="setBindings" type="void" line="262"/>
            <javadoc line="262">
                Sets a scope of named values to be used by scripts.  The possible scopes are:
                  &lt;br&gt;&lt;br&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt; - The specified &lt;code&gt;Bindings&lt;/code&gt; replaces the
                  engine scope of the &lt;code&gt;ScriptEngine&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;ScriptContext.GLOBAL_SCOPE&lt;/code&gt; - The specified &lt;code&gt;Bindings&lt;/code&gt; must be visible
                  as the &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;li&gt;Any other value of scope defined in the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br&gt;&lt;br&gt;
                  The method must have the same effect as calling the &lt;code&gt;setBindings&lt;/code&gt; method of
                  &lt;code&gt;ScriptContext&lt;/code&gt; with the corresponding value of &lt;code&gt;scope&lt;/code&gt; on the default
                  &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.                
                <param>
                    bindings The &lt;code&gt;Bindings&lt;/code&gt; for the specified scope.                    
                </param>
                <param>
                    scope The specified scope.  Either &lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt;,
                      &lt;code&gt;ScriptContext.GLOBAL_SCOPE&lt;/code&gt;, or any other valid value of scope.                    
                </param>
                <throws>
                    IllegalArgumentException if the scope is invalid                    
                </throws>
                <throws>
                    NullPointerException if the bindings is null and the scope is
                      &lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="createBindings" type="Bindings" line="291"/>
            <javadoc line="291">
                Returns an uninitialized &lt;code&gt;Bindings&lt;/code&gt;.                
                <return>
                    A &lt;code&gt;Bindings&lt;/code&gt; that can be used to replace the state of this &lt;code&gt;ScriptEngine&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="getContext" type="ScriptContext" line="299"/>
            <javadoc line="299">
                Returns the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt; whose Bindings, Reader
                  and Writers are used for script executions when no &lt;code&gt;ScriptContext&lt;/code&gt; is specified.                
                <return>
                    The default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="setContext" type="void" line="307"/>
            <javadoc line="307">
                Sets the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;ScriptEngine&lt;/code&gt; whose Bindings, Reader
                  and Writers are used for script executions when no &lt;code&gt;ScriptContext&lt;/code&gt; is specified.                
                <param>
                    context A &lt;code&gt;ScriptContext&lt;/code&gt; that will replace the default &lt;code&gt;ScriptContext&lt;/code&gt; in
                      the &lt;code&gt;ScriptEngine&lt;/code&gt;.                    
                </param>
                <throws>
                    NullPointerException if context is null.                    
                </throws>
            </javadoc>
            <method name="getFactory" type="ScriptEngineFactory" line="317"/>
            <javadoc line="317">
                Returns a &lt;code&gt;ScriptEngineFactory&lt;/code&gt; for the class to which this &lt;code&gt;ScriptEngine&lt;/code&gt; belongs.                
                <return>
                    The &lt;code&gt;ScriptEngineFactory&lt;/code&gt;                    
                </return>
            </javadoc>
        </interface>
    </source>