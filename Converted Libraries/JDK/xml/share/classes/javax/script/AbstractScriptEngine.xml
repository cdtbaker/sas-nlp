<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.script">
        <import package="java.io.Reader"/>
        <import package="java.util.Map"/>
        <import package="java.util.Iterator"/>
        <class name="AbstractScriptEngine" line="5">
            <implements interface="ScriptEngine"/>
            <javadoc line="5">
                Provides a standard implementation for several of the variants of the &lt;code&gt;eval&lt;/code&gt;
                  method.
                  &lt;br&gt;&lt;br&gt;
                  &lt;code&gt;&lt;b&gt;eval(Reader)&lt;/b&gt;&lt;/code&gt;&lt;p&gt;&lt;code&gt;&lt;b&gt;eval(String)&lt;/b&gt;&lt;/code&gt;&lt;p&gt;
                  &lt;code&gt;&lt;b&gt;eval(String, Bindings)&lt;/b&gt;&lt;/code&gt;&lt;p&gt;&lt;code&gt;&lt;b&gt;eval(Reader, Bindings)&lt;/b&gt;&lt;/code&gt;
                  &lt;br&gt;&lt;br&gt; are implemented using the abstract methods
                  &lt;br&gt;&lt;br&gt;
                  &lt;code&gt;&lt;b&gt;eval(Reader,ScriptContext)&lt;/b&gt;&lt;/code&gt; or
                  &lt;code&gt;&lt;b&gt;eval(String, ScriptContext)&lt;/b&gt;&lt;/code&gt;
                  &lt;br&gt;&lt;br&gt;
                  with a &lt;code&gt;SimpleScriptContext&lt;/code&gt;.
                  &lt;br&gt;&lt;br&gt;
                  A &lt;code&gt;SimpleScriptContext&lt;/code&gt; is used as the default &lt;code&gt;ScriptContext&lt;/code&gt;
                  of the &lt;code&gt;AbstractScriptEngine&lt;/code&gt;..                
                <author>
                    Mike Grogan                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="context" type="ScriptContext" line="24"/>
            <javadoc line="24">
                The default &lt;code&gt;ScriptContext&lt;/code&gt; of this &lt;code&gt;AbstractScriptEngine&lt;/code&gt;.                
            </javadoc>
            <javadoc line="28">
                Creates a new instance of AbstractScriptEngine using a &lt;code&gt;SimpleScriptContext&lt;/code&gt;
                  as its default &lt;code&gt;ScriptContext&lt;/code&gt;.                
            </javadoc>
            <method name="AbstractScriptEngine" type="constructor" line="32"/>
            <javadoc line="35">
                Creates a new instance using the specified &lt;code&gt;Bindings&lt;/code&gt; as the
                  &lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; in the protected &lt;code&gt;context&lt;/code&gt; field.                
                <param>
                    n The specified &lt;code&gt;Bindings&lt;/code&gt;.                    
                </param>
                <throws>
                    NullPointerException if n is null.                    
                </throws>
            </javadoc>
            <method name="AbstractScriptEngine" type="constructor" line="41">
                <params>
                    <param name="n" type="Bindings"/>
                </params>
                <scope line="43"/>
            </method>
            <javadoc line="48">
                Sets the value of the protected &lt;code&gt;context&lt;/code&gt; field to the specified
                  &lt;code&gt;ScriptContext&lt;/code&gt;.                
                <param>
                    ctxt The specified &lt;code&gt;ScriptContext&lt;/code&gt;.                    
                </param>
                <throws>
                    NullPointerException if ctxt is null.                    
                </throws>
            </javadoc>
            <method name="setContext" type="void" line="54">
                <params>
                    <param name="ctxt" type="ScriptContext"/>
                </params>
                <scope line="55"/>
            </method>
            <javadoc line="60">
                Returns the value of the protected &lt;code&gt;context&lt;/code&gt; field.                
                <return>
                    The value of the protected &lt;code&gt;context&lt;/code&gt; field.                    
                </return>
            </javadoc>
            <method name="getContext" type="ScriptContext" line="64"/>
            <javadoc line="67">
                Returns the &lt;code&gt;Bindings&lt;/code&gt; with the specified scope value in
                  the protected &lt;code&gt;context&lt;/code&gt; field.                
                <param>
                    scope The specified scope                    
                </param>
                <return>
                    The corresponding &lt;code&gt;Bindings&lt;/code&gt;.                    
                </return>
                <throws>
                    IllegalArgumentException if the value of scope is
                      invalid for the type the protected &lt;code&gt;context&lt;/code&gt; field.                    
                </throws>
            </javadoc>
            <method name="getBindings" type="Bindings" line="75">
                <params>
                    <param name="scope" type="int"/>
                </params>
                <scope line="76"/>
                <scope line="79"/>
                <scope line="82"/>
            </method>
            <javadoc line="86">
                Sets the &lt;code&gt;Bindings&lt;/code&gt; with the corresponding scope value in the
                  &lt;code&gt;context&lt;/code&gt; field.                
                <param>
                    bindings The specified &lt;code&gt;Bindings&lt;/code&gt;.                    
                </param>
                <param>
                    scope The specified scope.                    
                </param>
                <throws>
                    IllegalArgumentException if the value of scope is
                      invalid for the type the &lt;code&gt;context&lt;/code&gt; field.                    
                </throws>
                <throws>
                    NullPointerException if the bindings is null and the scope is
                      &lt;code&gt;ScriptContext.ENGINE_SCOPE&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="setBindings" type="void" line="96">
                <params>
                    <param name="bindings" type="Bindings"/>
                    <param name="scope" type="int"/>
                </params>
                <scope line="97"/>
                <scope line="101"/>
                <scope line="105"/>
            </method>
            <javadoc line="109">
                Sets the specified value with the specified key in the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                  &lt;code&gt;Bindings&lt;/code&gt; of the protected &lt;code&gt;context&lt;/code&gt; field.                
                <param>
                    key The specified key.                    
                </param>
                <param>
                    value The specified value.                    
                </param>
                <throws>
                    NullPointerException if key is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty.                    
                </throws>
            </javadoc>
            <method name="put" type="void" line="117">
                <params>
                    <param name="key" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="nn" type="Bindings" line="118"/>
                <scope line="119"/>
            </method>
            <javadoc line="123">
                Gets the value for the specified key in the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt; of the
                  protected &lt;code&gt;context&lt;/code&gt; field.                
                <return>
                    The value for the specified key.                    
                </return>
                <throws>
                    NullPointerException if key is null.                    
                </throws>
                <throws>
                    IllegalArgumentException if key is empty.                    
                </throws>
            </javadoc>
            <method name="get" type="Object" line="130">
                <params>
                    <param name="key" type="String"/>
                </params>
                <declaration name="nn" type="Bindings" line="131"/>
                <scope line="132"/>
            </method>
            <javadoc line="137">
                &lt;code&gt;eval(Reader, Bindings)&lt;/code&gt; calls the abstract
                  &lt;code&gt;eval(Reader, ScriptContext)&lt;/code&gt; method, passing it a &lt;code&gt;ScriptContext&lt;/code&gt;
                  whose Reader, Writers and Bindings for scopes other that &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                  are identical to those members of the protected &lt;code&gt;context&lt;/code&gt; field.  The specified
                  &lt;code&gt;Bindings&lt;/code&gt; is used instead of the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                  &lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;context&lt;/code&gt; field.                
                <param>
                    reader A &lt;code&gt;Reader&lt;/code&gt; containing the source of the script.                    
                </param>
                <param>
                    bindings A &lt;code&gt;Bindings&lt;/code&gt; to use for the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                      while the script executes.                    
                </param>
                <return>
                    The return value from &lt;code&gt;eval(Reader, ScriptContext)&lt;/code&gt;                    
                </return>
                <throws>
                    ScriptException if an error occurs in script.                    
                </throws>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="151">
                <params>
                    <param name="reader" type="Reader"/>
                    <param name="bindings" type="Bindings"/>
                </params>
                <declaration name="ctxt" type="ScriptContext" line="152"/>
            </method>
            <javadoc line="155">
                Same as &lt;code&gt;eval(Reader, Bindings)&lt;/code&gt; except that the abstract
                  &lt;code&gt;eval(String, ScriptContext)&lt;/code&gt; is used.                
                <param>
                    script A &lt;code&gt;String&lt;/code&gt; containing the source of the script.                    
                </param>
                <param>
                    bindings A &lt;code&gt;Bindings&lt;/code&gt; to use as the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                      while the script executes.                    
                </param>
                <return>
                    The return value from &lt;code&gt;eval(String, ScriptContext)&lt;/code&gt;                    
                </return>
                <throws>
                    ScriptException if an error occurs in script.                    
                </throws>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="165">
                <params>
                    <param name="script" type="String"/>
                    <param name="bindings" type="Bindings"/>
                </params>
                <declaration name="ctxt" type="ScriptContext" line="166"/>
            </method>
            <javadoc line="169">
                &lt;code&gt;eval(Reader)&lt;/code&gt; calls the abstract
                  &lt;code&gt;eval(Reader, ScriptContext)&lt;/code&gt; passing the value of the &lt;code&gt;context&lt;/code&gt;
                  field.                
                <param>
                    reader A &lt;code&gt;Reader&lt;/code&gt; containing the source of the script.                    
                </param>
                <return>
                    The return value from &lt;code&gt;eval(Reader, ScriptContext)&lt;/code&gt;                    
                </return>
                <throws>
                    ScriptException if an error occurs in script.                    
                </throws>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="178">
                <params>
                    <param name="reader" type="Reader"/>
                </params>
            </method>
            <javadoc line="181">
                Same as &lt;code&gt;eval(Reader)&lt;/code&gt; except that the abstract
                  &lt;code&gt;eval(String, ScriptContext)&lt;/code&gt; is used.                
                <param>
                    script A &lt;code&gt;String&lt;/code&gt; containing the source of the script.                    
                </param>
                <return>
                    The return value from &lt;code&gt;eval(String, ScriptContext)&lt;/code&gt;                    
                </return>
                <throws>
                    ScriptException if an error occurrs in script.                    
                </throws>
                <throws>
                    NullPointerException if any of the parameters is null.                    
                </throws>
            </javadoc>
            <method name="eval" type="Object" line="189">
                <params>
                    <param name="script" type="String"/>
                </params>
            </method>
            <javadoc line="192">
                Returns a &lt;code&gt;SimpleScriptContext&lt;/code&gt;.  The &lt;code&gt;SimpleScriptContext&lt;/code&gt;:
                  &lt;br&gt;&lt;br&gt;
                  &lt;ul&gt;
                  &lt;li&gt;Uses the specified &lt;code&gt;Bindings&lt;/code&gt; for its &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Uses the &lt;code&gt;Bindings&lt;/code&gt; returned by the abstract &lt;code&gt;getGlobalScope&lt;/code&gt;
                  method as its &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt;
                  &lt;/li&gt;
                  &lt;li&gt;Uses the Reader and Writer in the default &lt;code&gt;ScriptContext&lt;/code&gt; of this
                  &lt;code&gt;ScriptEngine&lt;/code&gt;
                  &lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;br&gt;&lt;br&gt;
                  A &lt;code&gt;SimpleScriptContext&lt;/code&gt; returned by this method is used to implement eval methods
                  using the abstract &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; and &lt;code&gt;eval(String,Bindings)&lt;/code&gt;
                  versions.                
                <param>
                    nn Bindings to use for the &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;                    
                </param>
                <return>
                    The &lt;code&gt;SimpleScriptContext&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getScriptContext" type="ScriptContext" line="212">
                <params>
                    <param name="nn" type="Bindings"/>
                </params>
                <declaration name="ctxt" type="SimpleScriptContext" line="213"/>
                <declaration name="gs" type="Bindings" line="214"/>
                <scope line="215"/>
                <scope line="218"/>
                <scope line="221"/>
            </method>
        </class>
    </source>