<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.beans.Transient"/>
        <import package="java.net.URL"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Locale"/>
        <import package="javax.accessibility"/>
        <import package="sun.awt.AppContext"/>
        <import package="java.lang.reflect.Field"/>
        <import package="java.security"/>
        <class name="ImageIcon" line="45">
            <comment line="71">
                Keep references to the filename and location so that
                 alternate persistence schemes have the option to archive
                 images symbolically rather than including the image data
                 in the archive.                
            </comment>
            <comment line="84">
                Fields for twisted backward compatibility only. DO NOT USE.                
            </comment>
            <comment line="703">
                AccessibleImageIcon                
            </comment>
            <implements interface="Icon"/>
            <implements interface="Serializable"/>
            <implements interface="Accessible"/>
            <javadoc line="45">
                An implementation of the Icon interface that paints Icons
                  from Images. Images that are created from a URL, filename or byte array
                  are preloaded using MediaTracker to monitor the loaded state
                  of the image.
                  &lt;p&gt;
                  For further information and examples of using image icons, see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/icon.html&quot;&gt;How to Use Icons&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Jeff Dinkins                    
                </author>
                <author>
                    Lynn Monsanto                    
                </author>
            </javadoc>
            <declaration name="filename" type="String" line="75"/>
            <declaration name="location" type="URL" line="76"/>
            <declaration name="image" type="Image" line="78"/>
            <declaration name="loadStatus" type="int" line="79"/>
            <declaration name="imageObserver" type="ImageObserver" line="80"/>
            <declaration name="description" type="String" line="81"/>
            <declaration name="component" type="Component" line="84"/>
            <declaration name="tracker" type="MediaTracker" line="85"/>
            <scope line="87">
                <anonymous_class line="88">
                    <method name="run" type="Component" line="89">
                        <comment line="93">
                            6482575 - clear the appContext field so as not to leak it                            
                        </comment>
                        <comment line="102">
                            We don&apos;t care about component.                            
                        </comment>
                        <comment line="103">
                            So don&apos;t prevent class initialisation.                            
                        </comment>
                        <scope line="90">
                            <declaration name="component" type="Component" line="91"/>
                            <declaration name="appContextField" type="Field" line="94"/>
                        </scope>
                        <scope line="101"/>
                    </method>
                </anonymous_class>
            </scope>
            <method name="createNoPermsComponent" type="Component" line="112">
                <comment line="113">
                    7020198 - set acc field to no permissions and no subject                    
                </comment>
                <comment line="114">
                    Note, will have appContext set.                    
                </comment>
                <anonymous_class line="116">
                    <method name="run" type="Component" line="117">
                        <anonymous_class line="118"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="mediaTrackerID" type="int" line="128"/>
            <javadoc line="128">
                Id used in loading images from MediaTracker.                
            </javadoc>
            <declaration name="TRACKER_KEY" type="Object" line="133"/>
            <declaration name="width" type="int" line="135"/>
            <declaration name="height" type="int" line="136"/>
            <javadoc line="138">
                Creates an ImageIcon from the specified file. The image will
                  be preloaded by using MediaTracker to monitor the loading state
                  of the image.                
                <param>
                    filename the name of the file containing the image                    
                </param>
                <param>
                    description a brief textual description of the image                    
                </param>
                <see>
                    #ImageIcon(String)                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="146">
                <params>
                    <param name="filename" type="String"/>
                    <param name="description" type="String"/>
                </params>
                <scope line="148"/>
            </method>
            <javadoc line="156">
                Creates an ImageIcon from the specified file. The image will
                  be preloaded by using MediaTracker to monitor the loading state
                  of the image. The specified String can be a file name or a
                  file path. When specifying a path, use the Internet-standard
                  forward-slash (&quot;/&quot;) as a separator.
                  (The string is converted to an URL, so the forward-slash works
                  on all systems.)
                  For example, specify:
                  &lt;pre&gt;
                  new ImageIcon(&quot;images/myImage.gif&quot;) &lt;/pre&gt;
                  The description is initialized to the &lt;code&gt;filename&lt;/code&gt; string.                
                <param>
                    filename a String specifying a filename or path                    
                </param>
                <see>
                    #getDescription                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="173">
                <params>
                    <param name="filename" type="String"/>
                </params>
            </method>
            <javadoc line="177">
                Creates an ImageIcon from the specified URL. The image will
                  be preloaded by using MediaTracker to monitor the loaded state
                  of the image.                
                <param>
                    location the URL for the image                    
                </param>
                <param>
                    description a brief textual description of the image                    
                </param>
                <see>
                    #ImageIcon(String)                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="185">
                <params>
                    <param name="location" type="URL"/>
                    <param name="description" type="String"/>
                </params>
                <scope line="187"/>
            </method>
            <javadoc line="195">
                Creates an ImageIcon from the specified URL. The image will
                  be preloaded by using MediaTracker to monitor the loaded state
                  of the image.
                  The icon&apos;s description is initialized to be
                  a string representation of the URL.                
                <param>
                    location the URL for the image                    
                </param>
                <see>
                    #getDescription                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="204">
                <params>
                    <param name="location" type="URL"/>
                </params>
            </method>
            <javadoc line="208">
                Creates an ImageIcon from the image.                
                <param>
                    image the image                    
                </param>
                <param>
                    description a brief textual description of the image                    
                </param>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="213">
                <params>
                    <param name="image" type="Image"/>
                    <param name="description" type="String"/>
                </params>
            </method>
            <javadoc line="218">
                Creates an ImageIcon from an image object.
                  If the image has a &quot;comment&quot; property that is a string,
                  then the string is used as the description of this icon.                
                <param>
                    image the image                    
                </param>
                <see>
                    #getDescription                    
                </see>
                <see>
                    java.awt.Image#getProperty                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="226">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="o" type="Object" line="228"/>
                <scope line="229"/>
            </method>
            <javadoc line="235">
                Creates an ImageIcon from an array of bytes which were
                  read from an image file containing a supported image format,
                  such as GIF, JPEG, or (as of 1.3) PNG.
                  Normally this array is created
                  by reading an image using Class.getResourceAsStream(), but
                  the byte array may also be statically stored in a class.                
                <param>
                    imageData an array of pixels in an image format supported
                      by the AWT Toolkit, such as GIF, JPEG, or (as of 1.3) PNG                    
                </param>
                <param>
                    description a brief textual description of the image                    
                </param>
                <see>
                    java.awt.Toolkit#createImage                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="248">
                <params>
                    <param name="imageData" type="byte[]"/>
                    <param name="description" type="String"/>
                </params>
                <scope line="250"/>
            </method>
            <javadoc line="257">
                Creates an ImageIcon from an array of bytes which were
                  read from an image file containing a supported image format,
                  such as GIF, JPEG, or (as of 1.3) PNG.
                  Normally this array is created
                  by reading an image using Class.getResourceAsStream(), but
                  the byte array may also be statically stored in a class.
                  If the resulting image has a &quot;comment&quot; property that is a string,
                  then the string is used as the description of this icon.                
                <param>
                    imageData an array of pixels in an image format supported by
                      the AWT Toolkit, such as GIF, JPEG, or (as of 1.3) PNG                    
                </param>
                <see>
                    java.awt.Toolkit#createImage                    
                </see>
                <see>
                    #getDescription                    
                </see>
                <see>
                    java.awt.Image#getProperty                    
                </see>
            </javadoc>
            <method name="ImageIcon" type="constructor" line="273">
                <params>
                    <param name="imageData" type="byte[]"/>
                </params>
                <scope line="275"/>
                <declaration name="o" type="Object" line="278"/>
                <scope line="279"/>
            </method>
            <javadoc line="285">
                Creates an uninitialized image icon.                
            </javadoc>
            <method name="ImageIcon" type="constructor" line="288"/>
            <javadoc line="291">
                Loads the image, returning only when the image is loaded.                
                <param>
                    image the image                    
                </param>
            </javadoc>
            <method name="loadImage" type="void" line="295">
                <params>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="mTracker" type="MediaTracker" line="296"/>
                <scope line="297">
                    <declaration name="id" type="int" line="298"/>
                    <scope line="301"/>
                    <scope line="303"/>
                </scope>
            </method>
            <javadoc line="314">
                Returns an ID to use with the MediaTracker in loading an image.                
            </javadoc>
            <method name="getNextID" type="int" line="317">
                <scope line="318"/>
            </method>
            <javadoc line="323">
                Returns the MediaTracker for the current AppContext, creating a new
                  MediaTracker if necessary.                
            </javadoc>
            <method name="getTracker" type="MediaTracker" line="327">
                <comment line="330">
                    Opt: Only synchronize if trackerObj comes back null?                    
                </comment>
                <comment line="331">
                    If null, synchronize, re-check for null, and put new tracker                    
                </comment>
                <declaration name="trackerObj" type="Object" line="328"/>
                <declaration name="ac" type="AppContext" line="329"/>
                <scope line="332">
                    <scope line="334">
                        <anonymous_class line="335"/>
                        <declaration name="comp" type="Component" line="335"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="343">
                Returns the status of the image loading operation.                
                <return>
                    the loading status as defined by java.awt.MediaTracker                    
                </return>
                <see>
                    java.awt.MediaTracker#ABORTED                    
                </see>
                <see>
                    java.awt.MediaTracker#ERRORED                    
                </see>
                <see>
                    java.awt.MediaTracker#COMPLETE                    
                </see>
            </javadoc>
            <method name="getImageLoadStatus" type="int" line="350"/>
            <javadoc line="354">
                Returns this icon&apos;s &lt;code&gt;Image&lt;/code&gt;.                
                <return>
                    the <code>Image</code> object for this <code>ImageIcon</code>                    
                </return>
            </javadoc>
            <method name="getImage" type="Image" line="359"/>
            <javadoc line="363">
                Sets the image displayed by this icon.                
                <param>
                    image the image                    
                </param>
            </javadoc>
            <method name="setImage" type="void" line="367">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="372">
                Gets the description of the image.  This is meant to be a brief
                  textual description of the object.  For example, it might be
                  presented to a blind user to give an indication of the purpose
                  of the image.
                  The description may be null.                
                <return>
                    a brief textual description of the image                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="381"/>
            <javadoc line="385">
                Sets the description of the image.  This is meant to be a brief
                  textual description of the object.  For example, it might be
                  presented to a blind user to give an indication of the purpose
                  of the image.                
                <param>
                    description a brief textual description of the image                    
                </param>
            </javadoc>
            <method name="setDescription" type="void" line="392">
                <params>
                    <param name="description" type="String"/>
                </params>
            </method>
            <javadoc line="396">
                Paints the icon.
                  The top-left corner of the icon is drawn at
                  the point (&lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;)
                  in the coordinate space of the graphics context &lt;code&gt;g&lt;/code&gt;.
                  If this icon has no image observer,
                  this method uses the &lt;code&gt;c&lt;/code&gt; component
                  as the observer.                
                <param>
                    c the component to be used as the observer
                      if this icon has no image observer                    
                </param>
                <param>
                    g the graphics context                    
                </param>
                <param>
                    x the X coordinate of the icon's top-left corner                    
                </param>
                <param>
                    y the Y coordinate of the icon's top-left corner                    
                </param>
            </javadoc>
            <method name="paintIcon" type="void" line="411">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="412"/>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Gets the width of the icon.                
                <return>
                    the width in pixels of this icon                    
                </return>
            </javadoc>
            <method name="getIconWidth" type="int" line="424"/>
            <javadoc line="428">
                Gets the height of the icon.                
                <return>
                    the height in pixels of this icon                    
                </return>
            </javadoc>
            <method name="getIconHeight" type="int" line="433"/>
            <javadoc line="437">
                Sets the image observer for the image.  Set this
                  property if the ImageIcon contains an animated GIF, so
                  the observer is notified to update its display.
                  For example:
                  &lt;pre&gt;
                  icon = new ImageIcon(...)
                  button.setIcon(icon);
                  icon.setImageObserver(button);
                  &lt;/pre&gt;                
                <param>
                    observer the image observer                    
                </param>
            </javadoc>
            <method name="setImageObserver" type="void" line="450">
                <params>
                    <param name="observer" type="ImageObserver"/>
                </params>
            </method>
            <javadoc line="454">
                Returns the image observer for the image.                
                <return>
                    the image observer, which may be null                    
                </return>
            </javadoc>
            <method name="getImageObserver" type="ImageObserver" line="460"/>
            <javadoc line="464">
                Returns a string representation of this image.                
                <return>
                    a string representing this image                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="469">
                <scope line="470"/>
            </method>
            <method name="readObject" type="void" line="478">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="w" type="int" line="481"/>
                <declaration name="h" type="int" line="482"/>
                <declaration name="pixels" type="int[]" line="483"/>
                <scope line="485">
                    <declaration name="tk" type="Toolkit" line="486"/>
                    <declaration name="cm" type="ColorModel" line="487"/>
                </scope>
            </method>
            <method name="writeObject" type="void" line="496">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="w" type="int" line="499"/>
                <declaration name="h" type="int" line="500"/>
                <declaration name="pixels" type="int[]" line="501"/>
                <scope line="503">
                    <scope line="504">
                        <declaration name="pg" type="PixelGrabber" line="505"/>
                        <scope line="507"/>
                    </scope>
                    <scope line="511"/>
                </scope>
            </method>
            <declaration name="accessibleContext" type="AccessibleImageIcon" line="521"/>
            <javadoc line="521">
                --- Accessibility Support ---                
            </javadoc>
            <javadoc line="527">
                Gets the AccessibleContext associated with this ImageIcon.
                  For image icons, the AccessibleContext takes the form of an
                  AccessibleImageIcon.
                  A new AccessibleImageIcon instance is created if necessary.                
                <return>
                    an AccessibleImageIcon that serves as the
                      AccessibleContext of this ImageIcon                    
                </return>
                <beaninfo>
                    expert: true
                      description: The AccessibleContext associated with this ImageIcon.                    
                </beaninfo>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="540">
                <scope line="541"/>
            </method>
            <class name="AccessibleImageIcon" line="547">
                <extends class="AccessibleContext"/>
                <comment line="567">
                    AccessibleContest implementation -----------------                    
                </comment>
                <comment line="646">
                    AccessibleIcon implementation -----------------                    
                </comment>
                <implements interface="AccessibleIcon"/>
                <implements interface="Serializable"/>
                <javadoc line="547">
                    This class implements accessibility support for the
                      &lt;code&gt;ImageIcon&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to image icon user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <javadoc line="570">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="577"/>
                <javadoc line="581">
                    Gets the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="588"/>
                <javadoc line="592">
                    Gets the Accessible parent of this object.  If the parent of this
                      object implements Accessible, this method should simply return
                      getParent().                    
                    <return>
                        the Accessible parent of this object -- can be null if this
                          object does not have an Accessible parent                        
                    </return>
                </javadoc>
                <method name="getAccessibleParent" type="Accessible" line="600"/>
                <javadoc line="604">
                    Gets the index of this object in its accessible parent.                    
                    <return>
                        the index of this object in its parent; -1 if this
                          object does not have an accessible parent.                        
                    </return>
                    <see>
                        #getAccessibleParent                        
                    </see>
                </javadoc>
                <method name="getAccessibleIndexInParent" type="int" line="611"/>
                <javadoc line="615">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement Accessible, than this
                      method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="622"/>
                <javadoc line="626">
                    Returns the nth Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="632">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="636">
                    Returns the locale of this object.                    
                    <return>
                        the locale of this object                        
                    </return>
                </javadoc>
                <method name="getLocale" type="Locale" line="641"/>
                <javadoc line="649">
                    Gets the description of the icon.  This is meant to be a brief
                      textual description of the object.  For example, it might be
                      presented to a blind user to give an indication of the purpose
                      of the icon.                    
                    <return>
                        the description of the icon                        
                    </return>
                </javadoc>
                <method name="getAccessibleIconDescription" type="String" line="657"/>
                <javadoc line="661">
                    Sets the description of the icon.  This is meant to be a brief
                      textual description of the object.  For example, it might be
                      presented to a blind user to give an indication of the purpose
                      of the icon.                    
                    <param>
                        description the description of the icon                        
                    </param>
                </javadoc>
                <method name="setAccessibleIconDescription" type="void" line="669">
                    <params>
                        <param name="description" type="String"/>
                    </params>
                </method>
                <javadoc line="673">
                    Gets the height of the icon.                    
                    <return>
                        the height of the icon                        
                    </return>
                </javadoc>
                <method name="getAccessibleIconHeight" type="int" line="678"/>
                <javadoc line="682">
                    Gets the width of the icon.                    
                    <return>
                        the width of the icon                        
                    </return>
                </javadoc>
                <method name="getAccessibleIconWidth" type="int" line="687"/>
                <method name="readObject" type="void" line="693">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                </method>
                <method name="writeObject" type="void" line="699">
                    <params>
                        <param name="s" type="ObjectOutputStream"/>
                    </params>
                </method>
            </class>
        </class>
    </source>