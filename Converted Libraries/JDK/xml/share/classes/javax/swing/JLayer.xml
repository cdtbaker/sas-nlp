<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="sun.awt.AWTAccessor"/>
        <import package="javax.swing.plaf.LayerUI"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.accessibility"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <class name="JLayer" line="43">
            <type_params>
                <type_param name="V"/>
            </type_params>
            <extends class="JComponent"/>
            <comment line="156">
                this field is necessary because JComponent.ui is transient                
            </comment>
            <comment line="157">
                when layerUI is serializable                
            </comment>
            <implements interface="Scrollable"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="Accessible"/>
            <javadoc line="43">
                {@code JLayer} is a universal decorator for Swing components
                  which enables you to implement various advanced painting effects as well as
                  receive notifications of all {@code AWTEvent}s generated within its borders.
                  &lt;p/&gt;{@code JLayer} delegates the handling of painting and input events to a{@link javax.swing.plaf.LayerUI} object, which performs the actual decoration.
                  &lt;p/&gt;
                  The custom painting implemented in the {@code LayerUI} and events notification
                  work for the JLayer itself and all its subcomponents.
                  This combination enables you to enrich existing components
                  by adding new advanced functionality such as temporary locking of a hierarchy,
                  data tips for compound components, enhanced mouse scrolling etc and so on.
                  &lt;p/&gt;{@code JLayer} is a good solution if you only need to do custom painting
                  over compound component or catch input events from its subcomponents.
                  &lt;pre&gt;
                  import javax.swing.;
                  import javax.swing.plaf.LayerUI;
                  import java.awt.;
                  public class JLayerSample {
                  private static JLayer&amp;lt;JComponent&amp;gt; createLayer() {
                  // This custom layerUI will fill the layer with translucent green
                  // and print out all mouseMotion events generated within its borders
                  LayerUI&amp;lt;JComponent&amp;gt; layerUI = new LayerUI&amp;lt;JComponent&amp;gt;() {
                  public void paint(Graphics g, JComponent c) {
                  // paint the layer as is
                  super.paint(g, c);
                  // fill it with the translucent green
                  g.setColor(new Color(0, 128, 0, 128));
                  g.fillRect(0, 0, c.getWidth(), c.getHeight());
                  }
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  // enable mouse motion events for the layer&apos;s subcomponents
                  ((JLayer) c).setLayerEventMask(AWTEvent.MOUSE_MOTION_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  // reset the layer event mask
                  ((JLayer) c).setLayerEventMask(0);
                  }
                  // overridden method which catches MouseMotion events
                  public void eventDispatched(AWTEvent e, JLayer&amp;lt;? extends JComponent&amp;gt; l) {
                  System.out.println(&quot;AWTEvent detected: &quot; + e);
                  }
                  };
                  // create a component to be decorated with the layer
                  JPanel panel = new JPanel();
                  panel.add(new JButton(&quot;JButton&quot;));
                  // create the layer for the panel using our custom layerUI
                  return new JLayer&amp;lt;JComponent&amp;gt;(panel, layerUI);
                  }
                  private static void createAndShowGUI() {
                  final JFrame frame = new JFrame();
                  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                  // work with the layer as with any other Swing component
                  frame.add(createLayer());
                  frame.setSize(200, 200);
                  frame.setLocationRelativeTo(null);
                  frame.setVisible(true);
                  }
                  public static void main(String[] args) throws Exception {
                  SwingUtilities.invokeAndWait(new Runnable() {
                  public void run() {
                  createAndShowGUI();
                  }
                  });
                  }
                  }
                  &lt;/pre&gt;
                  &lt;b&gt;Note:&lt;/b&gt; {@code JLayer} doesn&apos;t support the following methods:
                  &lt;ul&gt;
                  &lt;li&gt;{@link Container#add(java.awt.Component)}&lt;/li&gt;
                  &lt;li&gt;{@link Container#add(String,java.awt.Component)}&lt;/li&gt;
                  &lt;li&gt;{@link Container#add(java.awt.Component,int)}&lt;/li&gt;
                  &lt;li&gt;{@link Container#add(java.awt.Component,Object)}&lt;/li&gt;
                  &lt;li&gt;{@link Container#add(java.awt.Component,Object,int)}&lt;/li&gt;
                  &lt;/ul&gt;
                  using any of of them will cause {@code UnsupportedOperationException} to be thrown,
                  to add a component to {@code JLayer}use {@link #setView(Component)} or {@link #setGlassPane(JPanel)}.                
                <param>
                    <V>
                       the type of {@code JLayer}'s view component                    
                </param>
                <see>
                    #JLayer(Component)                    
                </see>
                <see>
                    #setView(Component)                    
                </see>
                <see>
                    #getView()                    
                </see>
                <see>
                    javax.swing.plaf.LayerUI                    
                </see>
                <see>
                    #JLayer(Component,LayerUI)                    
                </see>
                <see>
                    #setUI(javax.swing.plaf.LayerUI)                    
                </see>
                <see>
                    #getUI()                    
                </see>
                <since>
                    1.7                    
                </since>
                <author>
                    Alexander Potochkin                    
                </author>
            </javadoc>
            <declaration name="view" type="V" line="154"/>
            <declaration name="layerUI" type="LayerUI&lt;? super V&gt;" line="157"/>
            <declaration name="glassPane" type="JPanel" line="158"/>
            <declaration name="eventMask" type="long" line="159"/>
            <declaration name="isPainting" type="boolean" line="160"/>
            <declaration name="isPaintingImmediately" type="boolean" line="161"/>
            <declaration name="eventController" type="LayerEventController" line="163"/>
            <javadoc line="166">
                Creates a new {@code JLayer} object with a {@code null} view component
                  and default {@link javax.swing.plaf.LayerUI}.                
                <see>
                    #setView                    
                </see>
                <see>
                    #setUI                    
                </see>
            </javadoc>
            <method name="JLayer" type="constructor" line="173"/>
            <javadoc line="177">
                Creates a new {@code JLayer} object
                  with default {@link javax.swing.plaf.LayerUI}.                
                <param>
                    view the component to be decorated by this {@code JLayer}                    
                </param>
                <see>
                    #setUI                    
                </see>
            </javadoc>
            <method name="JLayer" type="constructor" line="185">
                <params>
                    <param name="view" type="V"/>
                </params>
            </method>
            <javadoc line="189">
                Creates a new {@code JLayer} object with the specified view component
                  and {@link javax.swing.plaf.LayerUI} object.                
                <param>
                    view the component to be decorated                    
                </param>
                <param>
                    ui the {@link javax.swing.plaf.LayerUI} delegate
                      to be used by this {@code JLayer}                    
                </param>
            </javadoc>
            <method name="JLayer" type="constructor" line="197">
                <params>
                    <param name="view" type="V"/>
                    <param name="ui" type="LayerUI<V>"/>
                </params>
            </method>
            <javadoc line="203">
                Returns the {@code JLayer}&apos;s view component or {@code null}.
                  &lt;br/&gt;This is a bound property.                
                <return>
                    the {@code JLayer}'s view component
                      or {@code null} if none exists                    
                </return>
                <see>
                    #setView(Component)                    
                </see>
            </javadoc>
            <method name="getView" type="V" line="212"/>
            <javadoc line="216">
                Sets the {@code JLayer}&apos;s view component, which can be {@code null}.
                  &lt;br/&gt;This is a bound property.                
                <param>
                    view the view component for this {@code JLayer}                    
                </param>
                <see>
                    #getView()                    
                </see>
            </javadoc>
            <method name="setView" type="void" line="224">
                <params>
                    <param name="view" type="V"/>
                </params>
                <declaration name="oldView" type="Component" line="225"/>
                <scope line="226"/>
                <scope line="229"/>
            </method>
            <javadoc line="238">
                Sets the {@link javax.swing.plaf.LayerUI} which will perform painting
                  and receive input events for this {@code JLayer}.                
                <param>
                    ui the {@link javax.swing.plaf.LayerUI} for this {@code JLayer}                    
                </param>
            </javadoc>
            <method name="setUI" type="void" line="244">
                <params>
                    <param name="ui" type="LayerUI<? super V>"/>
                </params>
            </method>
            <javadoc line="249">
                Returns the {@link javax.swing.plaf.LayerUI} for this {@code JLayer}.                
                <return>
                    the {@code LayerUI} for this {@code JLayer}                    
                </return>
            </javadoc>
            <method name="getUI" type="LayerUI<? super V>" line="254"/>
            <javadoc line="258">
                Returns the {@code JLayer}&apos;s glassPane component or {@code null}.
                  &lt;br/&gt;This is a bound property.                
                <return>
                    the {@code JLayer}'s glassPane component
                      or {@code null} if none exists                    
                </return>
                <see>
                    #setGlassPane(JPanel)                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="JPanel" line="267"/>
            <javadoc line="271">
                Sets the {@code JLayer}&apos;s glassPane component, which can be {@code null}.
                  &lt;br/&gt;This is a bound property.                
                <param>
                    glassPane the glassPane component of this {@code JLayer}                    
                </param>
                <see>
                    #getGlassPane()                    
                </see>
            </javadoc>
            <method name="setGlassPane" type="void" line="279">
                <params>
                    <param name="glassPane" type="JPanel"/>
                </params>
                <declaration name="oldGlassPane" type="Component" line="280"/>
                <declaration name="isGlassPaneVisible" type="boolean" line="281"/>
                <scope line="282"/>
                <scope line="286"/>
            </method>
            <javadoc line="298">
                Called by the constructor methods to create a default {@code glassPane}.
                  By default this method creates a new JPanel with visibility set to true
                  and opacity set to false.                
                <return>
                    the default {@code glassPane}                    
                </return>
            </javadoc>
            <method name="createGlassPane" type="JPanel" line="305"/>
            <javadoc line="309">
                Sets the layout manager for this container.  This method is
                  overridden to prevent the layout manager from being set.
                  &lt;p/&gt;Note:  If {@code mgr} is non-{@code null}, this
                  method will throw an exception as layout managers are not supported on
                  a {@code JLayer}.                
                <param>
                    mgr the specified layout manager                    
                </param>
                <exception>
                    IllegalArgumentException this method is not supported                    
                </exception>
            </javadoc>
            <method name="setLayout" type="void" line="319">
                <params>
                    <param name="mgr" type="LayoutManager"/>
                </params>
                <scope line="320"/>
            </method>
            <javadoc line="325">
                A non-{@code null} border, or non-zero insets, isn&apos;t supported, to prevent the geometry
                  of this component from becoming complex enough to inhibit
                  subclassing of {@code LayerUI} class.  To create a {@code JLayer} with a border,
                  add it to a {@code JPanel} that has a border.
                  &lt;p/&gt;Note:  If {@code border} is non-{@code null}, this
                  method will throw an exception as borders are not supported on
                  a {@code JLayer}.                
                <param>
                    border the {@code Border} to set                    
                </param>
                <exception>
                    IllegalArgumentException this method is not supported                    
                </exception>
            </javadoc>
            <method name="setBorder" type="void" line="337">
                <params>
                    <param name="border" type="Border"/>
                </params>
                <scope line="338"/>
            </method>
            <javadoc line="343">
                This method is not supported by {@code JLayer}and always throws {@code UnsupportedOperationException}                
                <throws>
                    UnsupportedOperationException this method is not supported                    
                </throws>
                <see>
                    #setView(Component)                    
                </see>
                <see>
                    #setGlassPane(JPanel)                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="352">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="358">
                {@inheritDoc}                
            </javadoc>
            <method name="remove" type="void" line="361">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="362"/>
                <scope line="364"/>
                <scope line="366"/>
                <scope line="368"/>
            </method>
            <javadoc line="373">
                {@inheritDoc}                
            </javadoc>
            <method name="removeAll" type="void" line="376">
                <scope line="377"/>
                <scope line="380"/>
            </method>
            <javadoc line="385">
                Always returns {@code true} to cause painting to originate from {@code JLayer},
                  or one of its ancestors.                
                <return>
                    true                    
                </return>
                <see>
                    JComponent#isPaintingOrigin()                    
                </see>
            </javadoc>
            <method name="isPaintingOrigin" type="boolean" line="392"/>
            <javadoc line="396">
                Delegates its functionality to the{@link javax.swing.plaf.LayerUI#paintImmediately(int,int,int,int,JLayer)} method,
                  if {@code LayerUI} is set.                
                <param>
                    x  the x value of the region to be painted                    
                </param>
                <param>
                    y  the y value of the region to be painted                    
                </param>
                <param>
                    w  the width of the region to be painted                    
                </param>
                <param>
                    h  the height of the region to be painted                    
                </param>
            </javadoc>
            <method name="paintImmediately" type="void" line="406">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="407">
                    <scope line="409"/>
                    <scope line="411"/>
                </scope>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Delegates all painting to the {@link javax.swing.plaf.LayerUI} object.                
                <param>
                    g the {@code Graphics} to render to                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="424">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="425">
                    <scope line="427"/>
                    <scope line="429"/>
                </scope>
                <scope line="432"/>
            </method>
            <javadoc line="437">
                This method is empty, because all painting is done by{@link #paint(Graphics)} and{@link javax.swing.plaf.LayerUI#update(Graphics,JComponent)} methods                
            </javadoc>
            <method name="paintComponent" type="void" line="442">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="445">
                The {@code JLayer} overrides the default implementation of
                  this method (in {@code JComponent}) to return {@code false}.
                  This ensures
                  that the drawing machinery will call the {@code JLayer}&apos;s{@code paint}implementation rather than messaging the {@code JLayer}&apos;s
                  children directly.                
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="isOptimizedDrawingEnabled" type="boolean" line="456"/>
            <javadoc line="460">
                {@inheritDoc}                
            </javadoc>
            <method name="propertyChange" type="void" line="463">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <scope line="464"/>
            </method>
            <javadoc line="469">
                Enables the events from JLayer and &lt;b&gt;all its descendants&lt;/b&gt;
                  defined by the specified event mask parameter
                  to be delivered to the{@link LayerUI#eventDispatched(AWTEvent,JLayer)} method.
                  &lt;p/&gt;
                  Events are delivered provided that {@code LayerUI} is set
                  for this {@code JLayer} and the {@code JLayer}is displayable.
                  &lt;p/&gt;
                  The following example shows how to correctly use this method
                  in the {@code LayerUI} implementations:
                  &lt;pre&gt;
                  public void installUI(JComponent c) {
                  super.installUI(c);
                  JLayer l = (JLayer) c;
                  // this LayerUI will receive only key and focus events
                  l.setLayerEventMask(AWTEvent.KEY_EVENT_MASK | AWTEvent.FOCUS_EVENT_MASK);
                  }
                  public void uninstallUI(JComponent c) {
                  super.uninstallUI(c);
                  JLayer l = (JLayer) c;
                  // JLayer must be returned to its initial state
                  l.setLayerEventMask(0);
                  }
                  &lt;/pre&gt;
                  By default {@code JLayer} receives no events and its event mask is {@code 0}.                
                <param>
                    layerEventMask the bitmask of event types to receive                    
                </param>
                <see>
                    #getLayerEventMask()                    
                </see>
                <see>
                    LayerUI#eventDispatched(AWTEvent,JLayer)                    
                </see>
                <see>
                    Component#isDisplayable()                    
                </see>
            </javadoc>
            <method name="setLayerEventMask" type="void" line="505">
                <params>
                    <param name="layerEventMask" type="long"/>
                </params>
                <declaration name="oldEventMask" type="long" line="506"/>
                <scope line="509">
                    <scope line="512"/>
                </scope>
            </method>
            <javadoc line="519">
                Returns the bitmap of event mask to receive by this {@code JLayer}and its {@code LayerUI}.
                  &lt;p/&gt;
                  It means that {@link javax.swing.plaf.LayerUI#eventDispatched(AWTEvent,JLayer)} method
                  will only receive events that match the event mask.
                  &lt;p/&gt;
                  By default {@code JLayer} receives no events.                
                <return>
                    the bitmask of event types to receive for this {@code JLayer}                    
                </return>
            </javadoc>
            <method name="getLayerEventMask" type="long" line="530"/>
            <javadoc line="534">
                Delegates its functionality to the {@link javax.swing.plaf.LayerUI#updateUI(JLayer)} method,
                  if {@code LayerUI} is set.                
            </javadoc>
            <method name="updateUI" type="void" line="538">
                <scope line="539"/>
            </method>
            <javadoc line="544">
                Returns the preferred size of the viewport for a view component.
                  &lt;p/&gt;
                  If the view component of this layer implements {@link Scrollable}, this method delegates its
                  implementation to the view component.                
                <return>
                    the preferred size of the viewport for a view component                    
                </return>
                <see>
                    Scrollable                    
                </see>
            </javadoc>
            <method name="getPreferredScrollableViewportSize" type="Dimension" line="554">
                <scope line="555"/>
            </method>
            <javadoc line="561">
                Returns a scroll increment, which is required for components
                  that display logical rows or columns in order to completely expose
                  one block of rows or columns, depending on the value of orientation.
                  &lt;p/&gt;
                  If the view component of this layer implements {@link Scrollable}, this method delegates its
                  implementation to the view component.                
                <return>
                    the "block" increment for scrolling in the specified direction                    
                </return>
                <see>
                    Scrollable                    
                </see>
            </javadoc>
            <method name="getScrollableBlockIncrement" type="int" line="574">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="575"/>
            </method>
            <javadoc line="583">
                Returns {@code false} to indicate that the height of the viewport does not
                  determine the height of the layer, unless the preferred height
                  of the layer is smaller than the height of the viewport.
                  &lt;p/&gt;
                  If the view component of this layer implements {@link Scrollable}, this method delegates its
                  implementation to the view component.                
                <return>
                    whether the layer should track the height of the viewport                    
                </return>
                <see>
                    Scrollable                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportHeight" type="boolean" line="595">
                <scope line="596"/>
            </method>
            <javadoc line="602">
                Returns {@code false} to indicate that the width of the viewport does not
                  determine the width of the layer, unless the preferred width
                  of the layer is smaller than the width of the viewport.
                  &lt;p/&gt;
                  If the view component of this layer implements {@link Scrollable}, this method delegates its
                  implementation to the view component.                
                <return>
                    whether the layer should track the width of the viewport                    
                </return>
                <see>
                    Scrollable                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="614">
                <scope line="615"/>
            </method>
            <javadoc line="621">
                Returns a scroll increment, which is required for components
                  that display logical rows or columns in order to completely expose
                  one new row or column, depending on the value of orientation.
                  Ideally, components should handle a partially exposed row or column
                  by returning the distance required to completely expose the item.
                  &lt;p/&gt;
                  Scrolling containers, like {@code JScrollPane}, will use this method
                  each time the user requests a unit scroll.
                  &lt;p/&gt;
                  If the view component of this layer implements {@link Scrollable}, this method delegates its
                  implementation to the view component.                
                <return>
                    The "unit" increment for scrolling in the specified direction.
                      This value should always be positive.                    
                </return>
                <see>
                    Scrollable                    
                </see>
            </javadoc>
            <method name="getScrollableUnitIncrement" type="int" line="640">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="641"/>
            </method>
            <method name="readObject" type="void" line="649">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="651"/>
                <scope line="654"/>
            </method>
            <javadoc line="659">
                {@inheritDoc}                
            </javadoc>
            <method name="addNotify" type="void" line="662"/>
            <javadoc line="667">
                {@inheritDoc}                
            </javadoc>
            <method name="removeNotify" type="void" line="670"/>
            <javadoc line="675">
                Delegates its functionality to the {@link javax.swing.plaf.LayerUI#doLayout(JLayer)} method,
                  if {@code LayerUI} is set.                
            </javadoc>
            <method name="doLayout" type="void" line="679">
                <scope line="680"/>
            </method>
            <javadoc line="685">
                Gets the AccessibleContext associated with this {@code JLayer}.                
                <return>
                    the AccessibleContext associated with this {@code JLayer}.                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="690">
                <scope line="691">
                    <anonymous_class line="692">
                        <method name="getAccessibleRole" type="AccessibleRole" line="693"/>
                    </anonymous_class>
                </scope>
            </method>
            <class name="LayerEventController" line="701">
                <implements interface="AWTEventListener"/>
                <javadoc line="701">
                    static AWTEventListener to be shared with all AbstractLayerUIs                    
                </javadoc>
                <declaration name="layerMaskList" type="ArrayList&lt;Long&gt;" line="705"/>
                <declaration name="currentEventMask" type="long" line="708"/>
                <declaration name="ACCEPTED_EVENTS" type="long" line="710"/>
                <method name="eventDispatched" type="void" line="723">
                    <params>
                        <param name="event" type="AWTEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="724"/>
                    <scope line="725">
                        <declaration name="component" type="Component" line="726"/>
                        <scope line="727">
                            <scope line="728">
                                <declaration name="l" type="JLayer" line="729"/>
                                <declaration name="ui" type="LayerUI" line="730"/>
                                <scope line="733"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="updateAWTEventListener" type="void" line="742">
                    <params>
                        <param name="oldEventMask" type="long"/>
                        <param name="newEventMask" type="long"/>
                    </params>
                    <comment line="753">
                        filter out all unaccepted events                        
                    </comment>
                    <scope line="743"/>
                    <scope line="746"/>
                    <declaration name="combinedMask" type="long" line="749"/>
                    <scope line="750"/>
                    <scope line="755"/>
                    <scope line="757"/>
                </method>
                <method name="getCurrentEventMask" type="long" line="764"/>
                <method name="addAWTEventListener" type="void" line="768">
                    <params>
                        <param name="eventMask" type="long"/>
                    </params>
                    <anonymous_class line="769">
                        <method name="run" type="Void" line="770"/>
                    </anonymous_class>
                </method>
                <method name="removeAWTEventListener" type="void" line="779">
                    <anonymous_class line="780">
                        <method name="run" type="Void" line="781"/>
                    </anonymous_class>
                </method>
                <method name="isEventEnabled" type="boolean" line="789">
                    <params>
                        <param name="eventMask" type="long"/>
                        <param name="id" type="int"/>
                    </params>
                </method>
            </class>
            <class name="DefaultLayerGlassPane" line="824">
                <extends class="JPanel"/>
                <javadoc line="824">
                    The default glassPane for the {@link javax.swing.JLayer}.
                      It is a subclass of {@code JPanel} which is non opaque by default.                    
                </javadoc>
                <javadoc line="829">
                    Creates a new {@link DefaultLayerGlassPane}                    
                </javadoc>
                <method name="DefaultLayerGlassPane" type="constructor" line="832"/>
                <javadoc line="836">
                    First, implementation of this method iterates through
                      glassPane&apos;s child components and returns {@code true}if any of them is visible and contains passed x,y point.
                      After that it checks if no mouseListeners is attached to this component
                      and no mouse cursor is set, then it returns {@code false},
                      otherwise calls the super implementation of this method.                    
                    <param>
                        x the <i>x</i> coordinate of the point                        
                    </param>
                    <param>
                        y the <i>y</i> coordinate of the point                        
                    </param>
                    <return>
                        true if this component logically contains x,y                        
                    </return>
                </javadoc>
                <method name="contains" type="boolean" line="848">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                    <scope line="849">
                        <declaration name="c" type="Component" line="850"/>
                        <declaration name="point" type="Point" line="851"/>
                        <scope line="852"/>
                    </scope>
                    <scope line="859"/>
                </method>
            </class>
        </class>
    </source>