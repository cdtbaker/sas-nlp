<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Image"/>
        <import package="java.awt"/>
        <import package="java.text"/>
        <import package="java.awt.geom"/>
        <import package="java.beans.Transient"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.plaf.LabelUI"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.text.html"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="java.util"/>
        <class name="JLabel" line="48">
            <extends class="JComponent"/>
            <comment line="119">
                &quot;&quot; rather than null, for BeanBox                
            </comment>
            <comment line="994">
                --- Accessibility Support ---                
            </comment>
            <comment line="1635">
                AccessibleJComponent                
            </comment>
            <implements interface="SwingConstants"/>
            <implements interface="Accessible"/>
            <javadoc line="48">
                A display area for a short text string or an image,
                  or both.
                  A label does not react to input events.
                  As a result, it cannot get the keyboard focus.
                  A label can, however, display a keyboard alternative
                  as a convenience for a nearby component
                  that has a keyboard alternative but can&apos;t display it.
                  &lt;p&gt;
                  A &lt;code&gt;JLabel&lt;/code&gt; object can display
                  either text, an image, or both.
                  You can specify where in the label&apos;s display area
                  the label&apos;s contents are aligned
                  by setting the vertical and horizontal alignment.
                  By default, labels are vertically centered
                  in their display area.
                  Text-only labels are leading edge aligned, by default;
                  image-only labels are horizontally centered, by default.
                  &lt;p&gt;
                  You can also specify the position of the text
                  relative to the image.
                  By default, text is on the trailing edge of the image,
                  with the text and image vertically aligned.
                  &lt;p&gt;
                  A label&apos;s leading and trailing edge are determined from the value of its{@link java.awt.ComponentOrientation} property.  At present, the default
                  ComponentOrientation setting maps the leading edge to left and the trailing
                  edge to right.
                  &lt;p&gt;
                  Finally, you can use the &lt;code&gt;setIconTextGap&lt;/code&gt; method
                  to specify how many pixels
                  should appear between the text and the image.
                  The default is 4 pixels.
                  &lt;p&gt;
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/label.html&quot;&gt;How to Use Labels&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;
                  for further documentation.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component that displays a short string and an icon.                    
                </beaninfo>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="109"/>
            <javadoc line="109">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="mnemonic" type="int" line="115"/>
            <declaration name="mnemonicIndex" type="int" line="116"/>
            <declaration name="text" type="String" line="118"/>
            <declaration name="defaultIcon" type="Icon" line="119"/>
            <declaration name="disabledIcon" type="Icon" line="120"/>
            <declaration name="disabledIconSet" type="boolean" line="121"/>
            <declaration name="verticalAlignment" type="int" line="123"/>
            <declaration name="horizontalAlignment" type="int" line="124"/>
            <declaration name="verticalTextPosition" type="int" line="125"/>
            <declaration name="horizontalTextPosition" type="int" line="126"/>
            <declaration name="iconTextGap" type="int" line="127"/>
            <declaration name="labelFor" type="Component" line="129"/>
            <declaration name="LABELED_BY_PROPERTY" type="String" line="131"/>
            <javadoc line="131">
                Client property key used to determine what label is labeling the
                  component.  This is generally not used by labels, but is instead
                  used by components such as text areas that are being labeled by
                  labels.  When the labelFor property of a label is set, it will
                  automatically set the LABELED_BY_PROPERTY of the component being
                  labelled.                
                <see>
                    #setLabelFor                    
                </see>
            </javadoc>
            <javadoc line="143">
                Creates a &lt;code&gt;JLabel&lt;/code&gt; instance with the specified
                  text, image, and horizontal alignment.
                  The label is centered vertically in its display area.
                  The text is on the trailing edge of the image.                
                <param>
                    text  The text to be displayed by the label.                    
                </param>
                <param>
                    icon  The image to be displayed by the label.                    
                </param>
                <param>
                    horizontalAlignment  One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code>,
                      <code>RIGHT</code>,
                      <code>LEADING</code> or
                      <code>TRAILING</code>.                    
                </param>
            </javadoc>
            <method name="JLabel" type="constructor" line="159">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="horizontalAlignment" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Creates a &lt;code&gt;JLabel&lt;/code&gt; instance with the specified
                  text and horizontal alignment.
                  The label is centered vertically in its display area.                
                <param>
                    text  The text to be displayed by the label.                    
                </param>
                <param>
                    horizontalAlignment  One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code>,
                      <code>RIGHT</code>,
                      <code>LEADING</code> or
                      <code>TRAILING</code>.                    
                </param>
            </javadoc>
            <method name="JLabel" type="constructor" line="181">
                <params>
                    <param name="text" type="String"/>
                    <param name="horizontalAlignment" type="int"/>
                </params>
            </method>
            <javadoc line="185">
                Creates a &lt;code&gt;JLabel&lt;/code&gt; instance with the specified text.
                  The label is aligned against the leading edge of its display area,
                  and centered vertically.                
                <param>
                    text  The text to be displayed by the label.                    
                </param>
            </javadoc>
            <method name="JLabel" type="constructor" line="192">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="196">
                Creates a &lt;code&gt;JLabel&lt;/code&gt; instance with the specified
                  image and horizontal alignment.
                  The label is centered vertically in its display area.                
                <param>
                    image  The image to be displayed by the label.                    
                </param>
                <param>
                    horizontalAlignment  One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code>,
                      <code>RIGHT</code>,
                      <code>LEADING</code> or
                      <code>TRAILING</code>.                    
                </param>
            </javadoc>
            <method name="JLabel" type="constructor" line="210">
                <params>
                    <param name="image" type="Icon"/>
                    <param name="horizontalAlignment" type="int"/>
                </params>
            </method>
            <javadoc line="214">
                Creates a &lt;code&gt;JLabel&lt;/code&gt; instance with the specified image.
                  The label is centered vertically and horizontally
                  in its display area.                
                <param>
                    image  The image to be displayed by the label.                    
                </param>
            </javadoc>
            <method name="JLabel" type="constructor" line="221">
                <params>
                    <param name="image" type="Icon"/>
                </params>
            </method>
            <javadoc line="225">
                Creates a &lt;code&gt;JLabel&lt;/code&gt; instance with
                  no image and with an empty string for the title.
                  The label is centered vertically
                  in its display area.
                  The label&apos;s contents, once set, will be displayed on the leading edge
                  of the label&apos;s display area.                
            </javadoc>
            <method name="JLabel" type="constructor" line="233"/>
            <javadoc line="238">
                Returns the L&amp;F object that renders this component.                
                <return>
                    LabelUI object                    
                </return>
            </javadoc>
            <method name="getUI" type="LabelUI" line="243"/>
            <javadoc line="248">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the LabelUI L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="259">
                <params>
                    <param name="ui" type="LabelUI"/>
                </params>
                <comment line="262">
                    disabled icon is generated by LF so it should be unset here                    
                </comment>
                <scope line="262"/>
            </method>
            <javadoc line="268">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="273"/>
            <javadoc line="278">
                Returns a string that specifies the name of the l&amp;f class
                  that renders this component.                
                <return>
                    String "LabelUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="287"/>
            <javadoc line="292">
                Returns the text string that the label displays.                
                <return>
                    a String                    
                </return>
                <see>
                    #setText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="298"/>
            <javadoc line="303">
                Defines the single line of text this component will display.  If
                  the value of text is null or empty string, nothing is displayed.
                  &lt;p&gt;
                  The default value of this property is null.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <see>
                    #setVerticalTextPosition                    
                </see>
                <see>
                    #setHorizontalTextPosition                    
                </see>
                <see>
                    #setIcon                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      attribute: visualUpdate true
                      description: Defines the single line of text this component will display.                    
                </beaninfo>
            </javadoc>
            <method name="setText" type="void" line="320">
                <params>
                    <param name="text" type="String"/>
                </params>
                <declaration name="oldAccessibleName" type="String" line="322"/>
                <scope line="323"/>
                <declaration name="oldValue" type="String" line="327"/>
                <scope line="336"/>
                <scope line="342"/>
            </method>
            <javadoc line="349">
                Returns the graphic image (glyph, icon) that the label displays.                
                <return>
                    an Icon                    
                </return>
                <see>
                    #setIcon                    
                </see>
            </javadoc>
            <method name="getIcon" type="Icon" line="355"/>
            <javadoc line="359">
                Defines the icon this component will display.  If
                  the value of icon is null, nothing is displayed.
                  &lt;p&gt;
                  The default value of this property is null.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <see>
                    #setVerticalTextPosition                    
                </see>
                <see>
                    #setHorizontalTextPosition                    
                </see>
                <see>
                    #getIcon                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      attribute: visualUpdate true
                      description: The icon this component will display.                    
                </beaninfo>
            </javadoc>
            <method name="setIcon" type="void" line="376">
                <params>
                    <param name="icon" type="Icon"/>
                </params>
                <comment line="381">
                    If the default icon has really changed and we had
                     generated the disabled icon for this component
                     (in other words, setDisabledIcon() was never called), then
                     clear the disabledIcon field.                    
                </comment>
                <comment line="398">
                    If the default icon has changed and the new one is
                     a different size, then revalidate.   Repaint if the
                     default icon has changed.                    
                </comment>
                <declaration name="oldValue" type="Icon" line="377"/>
                <scope line="385"/>
                <scope line="391"/>
                <scope line="401">
                    <scope line="405"/>
                </scope>
            </method>
            <javadoc line="413">
                Returns the icon used by the label when it&apos;s disabled.
                  If no disabled icon has been set this will forward the call to
                  the look and feel to construct an appropriate disabled Icon.
                  &lt;p&gt;
                  Some look and feels might not render the disabled Icon, in which
                  case they will ignore this.                
                <return>
                    the <code>disabledIcon</code> property                    
                </return>
                <see>
                    #setDisabledIcon                    
                </see>
                <see>
                    javax.swing.LookAndFeel#getDisabledIcon                    
                </see>
                <see>
                    ImageIcon                    
                </see>
            </javadoc>
            <method name="getDisabledIcon" type="Icon" line="427">
                <scope line="428">
                    <scope line="430"/>
                </scope>
            </method>
            <javadoc line="438">
                Set the icon to be displayed if this JLabel is &quot;disabled&quot;
                  (JLabel.setEnabled(false)).
                  &lt;p&gt;
                  The default value of this property is null.                
                <param>
                    disabledIcon the Icon to display when the component is disabled                    
                </param>
                <see>
                    #getDisabledIcon                    
                </see>
                <see>
                    #setEnabled                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The icon to display if the label is disabled.                    
                </beaninfo>
            </javadoc>
            <method name="setDisabledIcon" type="void" line="452">
                <params>
                    <param name="disabledIcon" type="Icon"/>
                </params>
                <declaration name="oldValue" type="Icon" line="453"/>
                <scope line="457">
                    <scope line="460"/>
                    <scope line="463"/>
                </scope>
            </method>
            <javadoc line="470">
                Specify a keycode that indicates a mnemonic key.
                  This property is used when the label is part of a larger component.
                  If the labelFor property of the label is not null, the label will
                  call the requestFocus method of the component specified by the
                  labelFor property when the mnemonic is activated.                
                <see>
                    #getLabelFor                    
                </see>
                <see>
                    #setLabelFor                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The mnemonic keycode.                    
                </beaninfo>
            </javadoc>
            <method name="setDisplayedMnemonic" type="void" line="484">
                <params>
                    <param name="key" type="int"/>
                </params>
                <declaration name="oldKey" type="int" line="485"/>
                <scope line="492"/>
            </method>
            <javadoc line="499">
                Specifies the displayedMnemonic as a char value.                
                <param>
                    aChar  a char specifying the mnemonic to display                    
                </param>
                <see>
                    #setDisplayedMnemonic(int)                    
                </see>
            </javadoc>
            <method name="setDisplayedMnemonic" type="void" line="505">
                <params>
                    <param name="aChar" type="char"/>
                </params>
                <declaration name="vk" type="int" line="506"/>
                <scope line="507"/>
            </method>
            <javadoc line="513">
                Return the keycode that indicates a mnemonic key.
                  This property is used when the label is part of a larger component.
                  If the labelFor property of the label is not null, the label will
                  call the requestFocus method of the component specified by the
                  labelFor property when the mnemonic is activated.                
                <return>
                    int value for the mnemonic key                    
                </return>
                <see>
                    #getLabelFor                    
                </see>
                <see>
                    #setLabelFor                    
                </see>
            </javadoc>
            <method name="getDisplayedMnemonic" type="int" line="525"/>
            <javadoc line="529">
                Provides a hint to the look and feel as to which character in the
                  text should be decorated to represent the mnemonic. Not all look and
                  feels may support this. A value of -1 indicates either there is no
                  mnemonic, the mnemonic character is not contained in the string, or
                  the developer does not wish the mnemonic to be displayed.
                  &lt;p&gt;
                  The value of this is updated as the properties relating to the
                  mnemonic change (such as the mnemonic itself, the text...).
                  You should only ever have to call this if
                  you do not wish the default character to be underlined. For example, if
                  the text was &apos;Save As&apos;, with a mnemonic of &apos;a&apos;, and you wanted the &apos;A&apos;
                  to be decorated, as &apos;Save &lt;u&gt;A&lt;/u&gt;s&apos;, you would have to invoke
                  &lt;code&gt;setDisplayedMnemonicIndex(5)&lt;/code&gt; after invoking
                  &lt;code&gt;setDisplayedMnemonic(KeyEvent.VK_A)&lt;/code&gt;.                
                <since>
                    1.4                    
                </since>
                <param>
                    index Index into the String to underline                    
                </param>
                <exception>
                    IllegalArgumentException will be thrown if <code>index</code
                      is >= length of the text, or < -1                    
                </exception>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the index into the String to draw the keyboard character
                      mnemonic at                    
                </beaninfo>
            </javadoc>
            <method name="setDisplayedMnemonicIndex" type="void" line="557">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="565">
                    index out of range                    
                </comment>
                <declaration name="oldValue" type="int" line="558"/>
                <scope line="559"/>
                <scope line="561">
                    <declaration name="text" type="String" line="562"/>
                    <declaration name="textLength" type="int" line="563"/>
                    <scope line="564"/>
                </scope>
                <scope line="570"/>
            </method>
            <javadoc line="576">
                Returns the character, as an index, that the look and feel should
                  provide decoration for as representing the mnemonic character.                
                <since>
                    1.4                    
                </since>
                <return>
                    index representing mnemonic character                    
                </return>
                <see>
                    #setDisplayedMnemonicIndex                    
                </see>
            </javadoc>
            <method name="getDisplayedMnemonicIndex" type="int" line="584"/>
            <javadoc line="588">
                Verify that key is a legal value for the horizontalAlignment properties.                
                <param>
                    key the property value to check                    
                </param>
                <param>
                    message the IllegalArgumentException detail message                    
                </param>
                <exception>
                    IllegalArgumentException if key isn't LEFT, CENTER, RIGHT,
                      LEADING or TRAILING.                    
                </exception>
                <see>
                    #setHorizontalTextPosition                    
                </see>
                <see>
                    #setHorizontalAlignment                    
                </see>
            </javadoc>
            <method name="checkHorizontalKey" type="int" line="598">
                <params>
                    <param name="key" type="int"/>
                    <param name="message" type="String"/>
                </params>
                <scope line="603"/>
                <scope line="606"/>
            </method>
            <javadoc line="612">
                Verify that key is a legal value for the
                  verticalAlignment or verticalTextPosition properties.                
                <param>
                    key the property value to check                    
                </param>
                <param>
                    message the IllegalArgumentException detail message                    
                </param>
                <exception>
                    IllegalArgumentException if key isn't TOP, CENTER, or BOTTOM.                    
                </exception>
                <see>
                    #setVerticalAlignment                    
                </see>
                <see>
                    #setVerticalTextPosition                    
                </see>
            </javadoc>
            <method name="checkVerticalKey" type="int" line="622">
                <params>
                    <param name="key" type="int"/>
                    <param name="message" type="String"/>
                </params>
                <scope line="623"/>
                <scope line="626"/>
            </method>
            <javadoc line="632">
                Returns the amount of space between the text and the icon
                  displayed in this label.                
                <return>
                    an int equal to the number of pixels between the text
                      and the icon.                    
                </return>
                <see>
                    #setIconTextGap                    
                </see>
            </javadoc>
            <method name="getIconTextGap" type="int" line="640"/>
            <javadoc line="645">
                If both the icon and text properties are set, this property
                  defines the space between them.
                  &lt;p&gt;
                  The default value of this property is 4 pixels.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <see>
                    #getIconTextGap                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If both the icon and text properties are set, this
                      property defines the space between them.                    
                </beaninfo>
            </javadoc>
            <method name="setIconTextGap" type="void" line="660">
                <params>
                    <param name="iconTextGap" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="661"/>
                <scope line="664"/>
            </method>
            <javadoc line="672">
                Returns the alignment of the label&apos;s contents along the Y axis.                
                <return>
                    The value of the verticalAlignment property, one of the
                      following constants defined in <code>SwingConstants</code>:
                      <code>TOP</code>,
                      <code>CENTER</code>, or
                      <code>BOTTOM</code>.                    
                </return>
                <see>
                    SwingConstants                    
                </see>
                <see>
                    #setVerticalAlignment                    
                </see>
            </javadoc>
            <method name="getVerticalAlignment" type="int" line="684"/>
            <javadoc line="689">
                Sets the alignment of the label&apos;s contents along the Y axis.
                  &lt;p&gt;
                  The default value of this property is CENTER.                
                <param>
                    alignment One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>TOP</code>,
                      <code>CENTER</code> (the default), or
                      <code>BOTTOM</code>.                    
                </param>
                <see>
                    SwingConstants                    
                </see>
                <see>
                    #getVerticalAlignment                    
                </see>
                <beaninfo>
                    bound: true
                      enum: TOP    SwingConstants.TOP
                      CENTER SwingConstants.CENTER
                      BOTTOM SwingConstants.BOTTOM
                      attribute: visualUpdate true
                      description: The alignment of the label's contents along the Y axis.                    
                </beaninfo>
            </javadoc>
            <method name="setVerticalAlignment" type="void" line="710">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="712"/>
            </method>
            <javadoc line="719">
                Returns the alignment of the label&apos;s contents along the X axis.                
                <return>
                    The value of the horizontalAlignment property, one of the
                      following constants defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code>,
                      <code>RIGHT</code>,
                      <code>LEADING</code> or
                      <code>TRAILING</code>.                    
                </return>
                <see>
                    #setHorizontalAlignment                    
                </see>
                <see>
                    SwingConstants                    
                </see>
            </javadoc>
            <method name="getHorizontalAlignment" type="int" line="733"/>
            <javadoc line="737">
                Sets the alignment of the label&apos;s contents along the X axis.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    alignment  One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code> (the default for image-only labels),
                      <code>RIGHT</code>,
                      <code>LEADING</code> (the default for text-only labels) or
                      <code>TRAILING</code>.                    
                </param>
                <see>
                    SwingConstants                    
                </see>
                <see>
                    #getHorizontalAlignment                    
                </see>
                <beaninfo>
                    bound: true
                      enum: LEFT     SwingConstants.LEFT
                      CENTER   SwingConstants.CENTER
                      RIGHT    SwingConstants.RIGHT
                      LEADING  SwingConstants.LEADING
                      TRAILING SwingConstants.TRAILING
                      attribute: visualUpdate true
                      description: The alignment of the label's content along the X axis.                    
                </beaninfo>
            </javadoc>
            <method name="setHorizontalAlignment" type="void" line="762">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="764"/>
            </method>
            <javadoc line="773">
                Returns the vertical position of the label&apos;s text,
                  relative to its image.                
                <return>
                    One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>TOP</code>,
                      <code>CENTER</code>, or
                      <code>BOTTOM</code>.                    
                </return>
                <see>
                    #setVerticalTextPosition                    
                </see>
                <see>
                    SwingConstants                    
                </see>
            </javadoc>
            <method name="getVerticalTextPosition" type="int" line="786"/>
            <javadoc line="791">
                Sets the vertical position of the label&apos;s text,
                  relative to its image.
                  &lt;p&gt;
                  The default value of this property is CENTER.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    textPosition  One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>TOP</code>,
                      <code>CENTER</code> (the default), or
                      <code>BOTTOM</code>.                    
                </param>
                <see>
                    SwingConstants                    
                </see>
                <see>
                    #getVerticalTextPosition                    
                </see>
                <beaninfo>
                    bound: true
                      enum: TOP    SwingConstants.TOP
                      CENTER SwingConstants.CENTER
                      BOTTOM SwingConstants.BOTTOM
                      expert: true
                      attribute: visualUpdate true
                      description: The vertical position of the text relative to it's image.                    
                </beaninfo>
            </javadoc>
            <method name="setVerticalTextPosition" type="void" line="816">
                <params>
                    <param name="textPosition" type="int"/>
                </params>
                <declaration name="old" type="int" line="818"/>
            </method>
            <javadoc line="827">
                Returns the horizontal position of the label&apos;s text,
                  relative to its image.                
                <return>
                    One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code>,
                      <code>RIGHT</code>,
                      <code>LEADING</code> or
                      <code>TRAILING</code>.                    
                </return>
                <see>
                    SwingConstants                    
                </see>
            </javadoc>
            <method name="getHorizontalTextPosition" type="int" line="841"/>
            <javadoc line="846">
                Sets the horizontal position of the label&apos;s text,
                  relative to its image.                
                <param>
                    textPosition  One of the following constants
                      defined in <code>SwingConstants</code>:
                      <code>LEFT</code>,
                      <code>CENTER</code>,
                      <code>RIGHT</code>,
                      <code>LEADING</code>, or
                      <code>TRAILING</code> (the default).                    
                </param>
                <exception>
                    IllegalArgumentException                    
                </exception>
                <see>
                    SwingConstants                    
                </see>
                <beaninfo>
                    expert: true
                      bound: true
                      enum: LEFT     SwingConstants.LEFT
                      CENTER   SwingConstants.CENTER
                      RIGHT    SwingConstants.RIGHT
                      LEADING  SwingConstants.LEADING
                      TRAILING SwingConstants.TRAILING
                      attribute: visualUpdate true
                      description: The horizontal position of the label's text,
                      relative to its image.                    
                </beaninfo>
            </javadoc>
            <method name="setHorizontalTextPosition" type="void" line="872">
                <params>
                    <param name="textPosition" type="int"/>
                </params>
                <declaration name="old" type="int" line="873"/>
            </method>
            <javadoc line="883">
                This is overridden to return false if the current Icon&apos;s Image is
                  not equal to the passed in Image &lt;code&gt;img&lt;/code&gt;.                
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.Component#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="imageUpdate" type="boolean" line="891">
                <params>
                    <param name="img" type="Image"/>
                    <param name="infoflags" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="893">
                    Don&apos;t use getDisabledIcon, will trigger creation of icon if icon
                     not set.                    
                </comment>
                <scope line="896"/>
            </method>
            <javadoc line="904">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="908">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="910">
                    <declaration name="count" type="byte" line="911"/>
                    <scope line="913"/>
                </scope>
            </method>
            <javadoc line="920">
                Returns a string representation of this JLabel. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JLabel.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="929">
                <declaration name="textString" type="String" line="930"/>
                <declaration name="defaultIconString" type="String" line="932"/>
                <declaration name="disabledIconString" type="String" line="935"/>
                <declaration name="labelForString" type="String" line="938"/>
                <declaration name="verticalAlignmentString" type="String" line="940"/>
                <scope line="941"/>
                <scope line="943"/>
                <scope line="945"/>
                <declaration name="horizontalAlignmentString" type="String" line="948"/>
                <scope line="949"/>
                <scope line="951"/>
                <scope line="953"/>
                <scope line="955"/>
                <scope line="957"/>
                <declaration name="verticalTextPositionString" type="String" line="960"/>
                <scope line="961"/>
                <scope line="963"/>
                <scope line="965"/>
                <declaration name="horizontalTextPositionString" type="String" line="968"/>
                <scope line="969"/>
                <scope line="971"/>
                <scope line="973"/>
                <scope line="975"/>
                <scope line="977"/>
            </method>
            <javadoc line="997">
                Get the component this is labelling.                
                <return>
                    the Component this is labelling.  Can be null if this
                      does not label a Component.  If the displayedMnemonic
                      property is set and the labelFor property is also set, the label
                      will call the requestFocus method of the component specified by the
                      labelFor property when the mnemonic is activated.                    
                </return>
                <see>
                    #getDisplayedMnemonic                    
                </see>
                <see>
                    #setDisplayedMnemonic                    
                </see>
            </javadoc>
            <method name="getLabelFor" type="Component" line="1009"/>
            <javadoc line="1013">
                Set the component this is labelling.  Can be null if this does not
                  label a Component.  If the displayedMnemonic property is set
                  and the labelFor property is also set, the label will
                  call the requestFocus method of the component specified by the
                  labelFor property when the mnemonic is activated.                
                <param>
                    c  the Component this label is for, or null if the label is
                      not the label for a component                    
                </param>
                <see>
                    #getDisplayedMnemonic                    
                </see>
                <see>
                    #setDisplayedMnemonic                    
                </see>
                <beaninfo>
                    bound: true
                      description: The component this is labelling.                    
                </beaninfo>
            </javadoc>
            <method name="setLabelFor" type="void" line="1030">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="oldC" type="Component" line="1031"/>
                <scope line="1035"/>
                <scope line="1038"/>
            </method>
            <javadoc line="1043">
                Get the AccessibleContext of this object                
                <return>
                    the AccessibleContext of this object                    
                </return>
                <beaninfo>
                    expert: true
                      description: The AccessibleContext associated with this Label.                    
                </beaninfo>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1051">
                <scope line="1052"/>
            </method>
            <class name="AccessibleJLabel" line="1058">
                <extends class="AccessibleJComponent"/>
                <comment line="1149">
                                        
                </comment>
                <comment line="1479">
                    Returns the text substring starting at the specified
                     offset with the specified length.                    
                </comment>
                <comment line="1497">
                    Returns the bounding rectangle for the component text.                    
                </comment>
                <comment line="1537">
                    ----- AccessibleExtendedComponent                    
                </comment>
                <implements interface="AccessibleText"/>
                <implements interface="AccessibleExtendedComponent"/>
                <javadoc line="1058">
                    The class used to obtain the accessible role for this object.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1073">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be null if this
                          object does not have a name                        
                    </return>
                    <see>
                        AccessibleContext#setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="1080">
                    <declaration name="name" type="String" line="1081"/>
                    <scope line="1083"/>
                    <scope line="1086"/>
                    <scope line="1089"/>
                </method>
                <javadoc line="1095">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1102"/>
                <javadoc line="1106">
                    Get the AccessibleIcons associated with this object if one
                      or more exist.  Otherwise return null.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleIcon" type="AccessibleIcon[]" line="1111">
                    <declaration name="icon" type="Icon" line="1112"/>
                    <scope line="1113">
                        <declaration name="ac" type="AccessibleContext" line="1114"/>
                        <scope line="1116"/>
                    </scope>
                </method>
                <javadoc line="1123">
                    Get the AccessibleRelationSet associated with this object if one
                      exists.  Otherwise return null.                    
                    <see>
                        AccessibleRelation                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleRelationSet" type="AccessibleRelationSet" line="1129">
                    <comment line="1131">
                        Check where the AccessibleContext&apos;s relation
                         set already contains a LABEL_FOR relation.                        
                    </comment>
                    <declaration name="relationSet" type="AccessibleRelationSet" line="1132"/>
                    <scope line="1135">
                        <declaration name="c" type="Component" line="1136"/>
                        <scope line="1137">
                            <declaration name="relation" type="AccessibleRelation" line="1138"/>
                        </scope>
                    </scope>
                </method>
                <method name="getAccessibleText" type="AccessibleText" line="1150">
                    <declaration name="view" type="View" line="1151"/>
                    <scope line="1152"/>
                    <scope line="1154"/>
                </method>
                <javadoc line="1159">
                    Given a point in local coordinates, return the zero-based index
                      of the character under that Point.  If the point is invalid,
                      this method returns -1.                    
                    <param>
                        p the Point in local coordinates                        
                    </param>
                    <return>
                        the zero-based index of the character under Point p; if
                          Point is invalid returns -1.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getIndexAtPoint" type="int" line="1169">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="view" type="View" line="1170"/>
                    <scope line="1171">
                        <declaration name="r" type="Rectangle" line="1172"/>
                        <scope line="1173"/>
                        <declaration name="shape" type="Rectangle2D.Float" line="1176"/>
                        <declaration name="bias" type="Position.Bias" line="1178"/>
                    </scope>
                    <scope line="1180"/>
                </method>
                <javadoc line="1185">
                    Determine the bounding box of the character at the given
                      index into the string.  The bounds are returned in local
                      coordinates.  If the index is invalid an empty rectangle is
                      returned.                    
                    <param>
                        i the index into the String                        
                    </param>
                    <return>
                        the screen coordinates of the character's the bounding box,
                          if index is invalid returns an empty rectangle.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCharacterBounds" type="Rectangle" line="1196">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="view" type="View" line="1197"/>
                    <scope line="1198">
                        <declaration name="r" type="Rectangle" line="1199"/>
                        <scope line="1200"/>
                        <declaration name="shape" type="Rectangle2D.Float" line="1203"/>
                        <scope line="1205">
                            <declaration name="charShape" type="Shape" line="1206"/>
                        </scope>
                        <scope line="1209"/>
                    </scope>
                    <scope line="1212"/>
                </method>
                <javadoc line="1217">
                    Return the number of characters (valid indicies)                    
                    <return>
                        the number of characters                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCharCount" type="int" line="1223">
                    <declaration name="view" type="View" line="1224"/>
                    <scope line="1225">
                        <declaration name="d" type="Document" line="1226"/>
                        <scope line="1227">
                            <declaration name="doc" type="StyledDocument" line="1228"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1235">
                    Return the zero-based offset of the caret.
                      Note: That to the right of the caret will have the same index
                      value as the offset (the caret is between two characters).                    
                    <return>
                        the zero-based offset of the caret.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCaretPosition" type="int" line="1243">
                    <comment line="1245">
                        There is no caret.                        
                    </comment>
                </method>
                <javadoc line="1248">
                    Returns the String at a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text >= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence,
                          null for an invalid index or part                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAtIndex" type="String" line="1258">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="1259"/>
                    <scope line="1264"/>
                    <scope line="1266"/>
                    <scope line="1270">
                        <declaration name="s" type="String" line="1271"/>
                        <declaration name="words" type="BreakIterator" line="1272"/>
                        <declaration name="end" type="int" line="1274"/>
                    </scope>
                    <scope line="1276"/>
                    <scope line="1280">
                        <declaration name="s" type="String" line="1281"/>
                        <declaration name="sentence" type="BreakIterator" line="1282"/>
                        <declaration name="end" type="int" line="1285"/>
                    </scope>
                    <scope line="1287"/>
                </method>
                <javadoc line="1295">
                    Returns the String after a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text >= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence, null for an invalid
                          index or part                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAfterIndex" type="String" line="1305">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="1306"/>
                    <scope line="1311"/>
                    <scope line="1314"/>
                    <scope line="1316"/>
                    <scope line="1320">
                        <declaration name="s" type="String" line="1321"/>
                        <declaration name="words" type="BreakIterator" line="1322"/>
                        <declaration name="start" type="int" line="1324"/>
                        <scope line="1325"/>
                        <declaration name="end" type="int" line="1328"/>
                        <scope line="1329"/>
                    </scope>
                    <scope line="1333"/>
                    <scope line="1337">
                        <declaration name="s" type="String" line="1338"/>
                        <declaration name="sentence" type="BreakIterator" line="1339"/>
                        <declaration name="start" type="int" line="1342"/>
                        <scope line="1343"/>
                        <declaration name="end" type="int" line="1346"/>
                        <scope line="1347"/>
                    </scope>
                    <scope line="1351"/>
                </method>
                <javadoc line="1359">
                    Returns the String before a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text >= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence, null for an invalid index
                          or part                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="1369">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="1370"/>
                    <scope line="1375"/>
                    <scope line="1378"/>
                    <scope line="1380"/>
                    <scope line="1384">
                        <declaration name="s" type="String" line="1385"/>
                        <declaration name="words" type="BreakIterator" line="1386"/>
                        <declaration name="end" type="int" line="1388"/>
                        <declaration name="start" type="int" line="1390"/>
                        <scope line="1391"/>
                    </scope>
                    <scope line="1395"/>
                    <scope line="1399">
                        <declaration name="s" type="String" line="1400"/>
                        <declaration name="sentence" type="BreakIterator" line="1401"/>
                        <declaration name="end" type="int" line="1404"/>
                        <declaration name="start" type="int" line="1406"/>
                        <scope line="1407"/>
                    </scope>
                    <scope line="1411"/>
                </method>
                <javadoc line="1419">
                    Return the AttributeSet for a given character at a given index                    
                    <param>
                        i the zero-based index into the text                        
                    </param>
                    <return>
                        the AttributeSet of the character                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCharacterAttribute" type="AttributeSet" line="1426">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="view" type="View" line="1427"/>
                    <scope line="1428">
                        <declaration name="d" type="Document" line="1429"/>
                        <scope line="1430">
                            <declaration name="doc" type="StyledDocument" line="1431"/>
                            <declaration name="elem" type="Element" line="1432"/>
                            <scope line="1433"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1441">
                    Returns the start offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into the text of the start of the selection                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectionStart" type="int" line="1449">
                    <comment line="1451">
                        Text cannot be selected.                        
                    </comment>
                </method>
                <javadoc line="1454">
                    Returns the end offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into teh text of the end of the selection                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectionEnd" type="int" line="1462">
                    <comment line="1464">
                        Text cannot be selected.                        
                    </comment>
                </method>
                <javadoc line="1467">
                    Returns the portion of the text that is selected.                    
                    <return>
                        the String portion of the text that is selected                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectedText" type="String" line="1473">
                    <comment line="1475">
                        Text cannot be selected.                        
                    </comment>
                </method>
                <method name="getText" type="String" line="1483">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                    <declaration name="view" type="View" line="1485"/>
                    <scope line="1486">
                        <declaration name="d" type="Document" line="1487"/>
                        <scope line="1488">
                            <declaration name="doc" type="StyledDocument" line="1489"/>
                        </scope>
                    </scope>
                </method>
                <method name="getTextRectangle" type="Rectangle" line="1499">
                    <declaration name="text" type="String" line="1501"/>
                    <declaration name="icon" type="Icon" line="1502"/>
                    <scope line="1504"/>
                    <declaration name="paintIconR" type="Rectangle" line="1508"/>
                    <declaration name="paintTextR" type="Rectangle" line="1509"/>
                    <declaration name="paintViewR" type="Rectangle" line="1510"/>
                    <declaration name="paintViewInsets" type="Insets" line="1511"/>
                    <declaration name="clippedText" type="String" line="1519"/>
                </method>
                <javadoc line="1538">
                    Returns the AccessibleExtendedComponent                    
                    <return>
                        the AccessibleExtendedComponent                        
                    </return>
                </javadoc>
                <method name="getAccessibleExtendedComponent" type="AccessibleExtendedComponent" line="1543"/>
                <javadoc line="1547">
                    Returns the tool tip text                    
                    <return>
                        the tool tip text, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getToolTipText" type="String" line="1554"/>
                <javadoc line="1558">
                    Returns the titled border text                    
                    <return>
                        the titled border text, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getTitledBorderText" type="String" line="1565"/>
                <javadoc line="1569">
                    Returns key bindings associated with this object                    
                    <return>
                        the key bindings, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <see>
                        AccessibleKeyBinding                        
                    </see>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleKeyBinding" type="AccessibleKeyBinding" line="1577">
                    <declaration name="mnemonic" type="int" line="1578"/>
                    <scope line="1579"/>
                </method>
                <class name="LabelKeyBinding" line="1585">
                    <implements interface="AccessibleKeyBinding"/>
                    <declaration name="mnemonic" type="int" line="1586"/>
                    <method name="LabelKeyBinding" type="constructor" line="1588">
                        <params>
                            <param name="mnemonic" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1592">
                        Returns the number of key bindings for this object                        
                        <return>
                            the zero-based number of key bindings for this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleKeyBindingCount" type="int" line="1597"/>
                    <javadoc line="1601">
                        Returns a key binding for this object.  The value returned is an
                          java.lang.Object which must be cast to appropriate type depending
                          on the underlying implementation of the key.  For example, if the
                          Object returned is a javax.swing.KeyStroke, the user of this
                          method should do the following:
                          &lt;nf&gt;&lt;code&gt;
                          Component c = &lt;get the component that has the key bindings&gt;
                          AccessibleContext ac = c.getAccessibleContext();
                          AccessibleKeyBinding akb = ac.getAccessibleKeyBinding();
                          for (int i = 0; i &lt; akb.getAccessibleKeyBindingCount(); i++) {
                          Object o = akb.getAccessibleKeyBinding(i);
                          if (o instanceof javax.swing.KeyStroke) {
                          javax.swing.KeyStroke keyStroke = (javax.swing.KeyStroke)o;
                          &lt;do something with the key binding&gt;
                          }
                          }
                          &lt;/code&gt;&lt;/nf&gt;                        
                        <param>
                            i zero-based index of the key bindings                            
                        </param>
                        <return>
                            a javax.lang.Object which specifies the key binding                            
                        </return>
                        <exception>
                            IllegalArgumentException if the index is
                              out of bounds                            
                        </exception>
                        <see>
                            #getAccessibleKeyBindingCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleKeyBinding" type="java.lang.Object" line="1626">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="1627"/>
                    </method>
                </class>
            </class>
        </class>
    </source>