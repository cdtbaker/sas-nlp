<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.io"/>
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.IllegalComponentStateException"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.text"/>
        <import package="java.util.Locale"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text"/>
        <class name="ProgressMonitor" line="55">
            <comment line="456">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="1045">
                inner class AccessibleProgressMonitor                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="55">
                A class to monitor the progress of some operation. If it looks
                  like the operation will take a while, a progress dialog will be popped up.
                  When the ProgressMonitor is created it is given a numeric range and a
                  descriptive string. As the operation progresses, call the setProgress method
                  to indicate how far along the [min,max] range the operation is.
                  Initially, there is no ProgressDialog. After the first millisToDecideToPopup
                  milliseconds (default 500) the progress monitor will predict how long
                  the operation will take.  If it is longer than millisToPopup (default 2000,
                  2 seconds) a ProgressDialog will be popped up.
                  &lt;p&gt;
                  From time to time, when the Dialog box is visible, the progress bar will
                  be updated when setProgress is called.  setProgress won&apos;t always update
                  the progress bar, it will only be done if the amount of progress is
                  visibly significant.
                  &lt;p&gt;
                  For further documentation and examples see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html&quot;&gt;How to Monitor Progress&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;                
                <see>
                    ProgressMonitorInputStream                    
                </see>
                <author>
                    James Gosling                    
                </author>
                <author>
                    Lynn Monsanto (accessibility)                    
                </author>
            </javadoc>
            <declaration name="root" type="ProgressMonitor" line="83"/>
            <declaration name="dialog" type="JDialog" line="84"/>
            <declaration name="pane" type="JOptionPane" line="85"/>
            <declaration name="myBar" type="JProgressBar" line="86"/>
            <declaration name="noteLabel" type="JLabel" line="87"/>
            <declaration name="parentComponent" type="Component" line="88"/>
            <declaration name="note" type="String" line="89"/>
            <declaration name="cancelOption" type="Object[]" line="90"/>
            <declaration name="message" type="Object" line="91"/>
            <declaration name="T0" type="long" line="92"/>
            <declaration name="millisToDecideToPopup" type="int" line="93"/>
            <declaration name="millisToPopup" type="int" line="94"/>
            <declaration name="min" type="int" line="95"/>
            <declaration name="max" type="int" line="96"/>
            <javadoc line="99">
                Constructs a graphic object that shows progress, typically by filling
                  in a rectangular bar as the process nears completion.                
                <param>
                    parentComponent the parent component for the dialog box                    
                </param>
                <param>
                    message a descriptive message that will be shown
                      to the user to indicate what operation is being monitored.
                      This does not change as the operation progresses.
                      See the message parameters to methods in{@link JOptionPane#message}for the range of values.                    
                </param>
                <param>
                    note a short note describing the state of the
                      operation.  As the operation progresses, you can call
                      setNote to change the note displayed.  This is used,
                      for example, in operations that iterate through a
                      list of files to show the name of the file being processes.
                      If note is initially null, there will be no note line
                      in the dialog box and setNote will be ineffective                    
                </param>
                <param>
                    min the lower bound of the range                    
                </param>
                <param>
                    max the upper bound of the range                    
                </param>
                <see>
                    JDialog                    
                </see>
                <see>
                    JOptionPane                    
                </see>
            </javadoc>
            <method name="ProgressMonitor" type="constructor" line="126">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="note" type="String"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <method name="ProgressMonitor" type="constructor" line="136">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="note" type="String"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                    <param name="group" type="ProgressMonitor"/>
                </params>
                <scope line="146"/>
                <scope line="151"/>
            </method>
            <class name="ProgressOptionPane" line="157">
                <extends class="JOptionPane"/>
                <comment line="175">
                    Equivalent to JOptionPane.createDialog,
                     but create a modeless dialog.
                     This is necessary because the Solaris implementation doesn&apos;t
                     support Dialog.setModal yet.                    
                </comment>
                <comment line="230">
                    ///////////////
                     Accessibility support for ProgressOptionPane                    
                </comment>
                <comment line="244">
                    Returns the AccessibleJOptionPane                    
                </comment>
                <comment line="502">
                    The accessibility hierarchy for ProgressMonitor is a flattened
                     version of the ProgressOptionPane component hierarchy.
                    
                     The ProgressOptionPane component hierarchy is:
                       JDialog
                         ProgressOptionPane
                           JPanel
                             JPanel
                               JLabel
                               JLabel
                               JProgressBar
                    
                     The AccessibleProgessMonitor accessibility hierarchy is:
                       AccessibleJDialog
                         AccessibleProgressMonitor
                           AccessibleJLabel
                           AccessibleJLabel
                           AccessibleJProgressBar
                    
                     The abstraction presented to assitive technologies by
                     the AccessibleProgressMonitor is that a dialog contains a
                     progress monitor with three children: a message, a note
                     label and a progress bar.                    
                </comment>
                <comment line="536">
                    Initializes the AccessibleContext now that the ProgressOptionPane
                     has been created. Because the ProgressMonitor is not a Component
                     implementing the Accessible interface, an AccessibleContext
                     must be synthesized from the ProgressOptionPane and its children.
                    
                     For other AWT and Swing classes, the inner class that implements
                     accessibility for the class extends the inner class that implements
                     implements accessibility for the super class. AccessibleProgressMonitor
                     cannot extend AccessibleJOptionPane and must therefore delegate calls
                     to the AccessibleJOptionPane.                    
                </comment>
                <comment line="597">
                                        
                </comment>
                <comment line="698">
                    Returns the parent AccessibleContext                    
                </comment>
                <comment line="761">
                    Returns the AccessibleContext for the JPanel containing the
                     message, note label and progress bar                    
                </comment>
                <comment line="795">
                                        
                </comment>
                <comment line="841">
                    Returns the note label AccessibleText                    
                </comment>
                <comment line="853">
                                        
                </comment>
                <comment line="902">
                    Returns whether source and destination components have the
                     same window ancestor                    
                </comment>
                <comment line="1043">
                                        
                </comment>
                <method name="ProgressOptionPane" type="constructor" line="159">
                    <params>
                        <param name="messageList" type="Object"/>
                    </params>
                </method>
                <method name="getMaxCharactersPerLineCount" type="int" line="169"/>
                <method name="createDialog" type="JDialog" line="178">
                    <params>
                        <param name="parentComponent" type="Component"/>
                        <param name="title" type="String"/>
                    </params>
                    <comment line="207">
                        Once window gets focus, set initial focus                        
                    </comment>
                    <declaration name="dialog" type="JDialog" line="179"/>
                    <declaration name="window" type="Window" line="181"/>
                    <scope line="182"/>
                    <scope line="184"/>
                    <scope line="187">
                        <declaration name="ownerShutdownListener" type="WindowListener" line="188"/>
                    </scope>
                    <declaration name="contentPane" type="Container" line="192"/>
                    <anonymous_class line="198">
                        <declaration name="gotFocus" type="boolean" line="199"/>
                        <method name="windowClosing" type="void" line="201">
                            <params>
                                <param name="we" type="WindowEvent"/>
                            </params>
                        </method>
                        <method name="windowActivated" type="void" line="205">
                            <params>
                                <param name="we" type="WindowEvent"/>
                            </params>
                            <comment line="207">
                                Once window gets focus, set initial focus                                
                            </comment>
                            <scope line="207"/>
                        </method>
                    </anonymous_class>
                    <anonymous_class line="214">
                        <method name="propertyChange" type="void" line="215">
                            <params>
                                <param name="event" type="PropertyChangeEvent"/>
                            </params>
                            <scope line="219"/>
                        </method>
                    </anonymous_class>
                </method>
                <javadoc line="233">
                    Gets the AccessibleContext for the ProgressOptionPane                    
                    <return>
                        the AccessibleContext for the ProgressOptionPane                        
                    </return>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="getAccessibleContext" type="AccessibleContext" line="239"/>
                <method name="getAccessibleJOptionPane" type="AccessibleContext" line="246"/>
            </class>
            <javadoc line="252">
                Indicate the progress of the operation being monitored.
                  If the specified value is &gt;= the maximum, the progress
                  monitor is closed.                
                <param>
                    nv an int specifying the current value, between the
                      maximum and minimum specified for this component                    
                </param>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #close                    
                </see>
            </javadoc>
            <method name="setProgress" type="void" line="262">
                <params>
                    <param name="nv" type="int"/>
                </params>
                <scope line="263"/>
                <scope line="266">
                    <scope line="267"/>
                    <scope line="270">
                        <declaration name="T" type="long" line="271"/>
                        <declaration name="dT" type="long" line="272"/>
                        <scope line="273">
                            <declaration name="predictedCompletionTime" type="int" line="274"/>
                            <scope line="275"/>
                            <scope line="280"/>
                            <scope line="283"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="303">
                Indicate that the operation is complete.  This happens automatically
                  when the value set by setProgress is &gt;= max, but it may be called
                  earlier if the operation ends early.                
            </javadoc>
            <method name="close" type="void" line="308">
                <scope line="309"/>
            </method>
            <javadoc line="319">
                Returns the minimum value -- the lower end of the progress value.                
                <return>
                    an int representing the minimum value                    
                </return>
                <see>
                    #setMinimum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="325"/>
            <javadoc line="330">
                Specifies the minimum value.                
                <param>
                    m  an int specifying the minimum value                    
                </param>
                <see>
                    #getMinimum                    
                </see>
            </javadoc>
            <method name="setMinimum" type="void" line="336">
                <params>
                    <param name="m" type="int"/>
                </params>
                <scope line="337"/>
            </method>
            <javadoc line="344">
                Returns the maximum value -- the higher end of the progress value.                
                <return>
                    an int representing the maximum value                    
                </return>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="350"/>
            <javadoc line="355">
                Specifies the maximum value.                
                <param>
                    m  an int specifying the maximum value                    
                </param>
                <see>
                    #getMaximum                    
                </see>
            </javadoc>
            <method name="setMaximum" type="void" line="361">
                <params>
                    <param name="m" type="int"/>
                </params>
                <scope line="362"/>
            </method>
            <javadoc line="369">
                Returns true if the user hits the Cancel button in the progress dialog.                
            </javadoc>
            <method name="isCanceled" type="boolean" line="372">
                <declaration name="v" type="Object" line="374"/>
            </method>
            <javadoc line="381">
                Specifies the amount of time to wait before deciding whether or
                  not to popup a progress monitor.                
                <param>
                    millisToDecideToPopup  an int specifying the time to wait,
                      in milliseconds                    
                </param>
                <see>
                    #getMillisToDecideToPopup                    
                </see>
            </javadoc>
            <method name="setMillisToDecideToPopup" type="void" line="389">
                <params>
                    <param name="millisToDecideToPopup" type="int"/>
                </params>
            </method>
            <javadoc line="394">
                Returns the amount of time this object waits before deciding whether
                  or not to popup a progress monitor.                
                <see>
                    #setMillisToDecideToPopup                    
                </see>
            </javadoc>
            <method name="getMillisToDecideToPopup" type="int" line="400"/>
            <javadoc line="405">
                Specifies the amount of time it will take for the popup to appear.
                  (If the predicted time remaining is less than this time, the popup
                  won&apos;t be displayed.)                
                <param>
                    millisToPopup  an int specifying the time in milliseconds                    
                </param>
                <see>
                    #getMillisToPopup                    
                </see>
            </javadoc>
            <method name="setMillisToPopup" type="void" line="413">
                <params>
                    <param name="millisToPopup" type="int"/>
                </params>
            </method>
            <javadoc line="418">
                Returns the amount of time it will take for the popup to appear.                
                <see>
                    #setMillisToPopup                    
                </see>
            </javadoc>
            <method name="getMillisToPopup" type="int" line="423"/>
            <javadoc line="428">
                Specifies the additional note that is displayed along with the
                  progress message. Used, for example, to show which file the
                  is currently being copied during a multiple-file copy.                
                <param>
                    note  a String specifying the note to display                    
                </param>
                <see>
                    #getNote                    
                </see>
            </javadoc>
            <method name="setNote" type="void" line="436">
                <params>
                    <param name="note" type="String"/>
                </params>
                <scope line="438"/>
            </method>
            <javadoc line="444">
                Specifies the additional note that is displayed along with the
                  progress message.                
                <return>
                    a String specifying the note to display                    
                </return>
                <see>
                    #setNote                    
                </see>
            </javadoc>
            <method name="getNote" type="String" line="451"/>
            <declaration name="accessibleContext" type="AccessibleContext" line="459"/>
            <javadoc line="459">
                The &lt;code&gt;AccessibleContext&lt;/code&gt; for the &lt;code&gt;ProgressMonitor&lt;/code&gt;                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="accessibleJOptionPane" type="AccessibleContext" line="465"/>
            <javadoc line="467">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; for the
                  &lt;code&gt;ProgressMonitor&lt;/code&gt;                
                <return>
                    the <code>AccessibleContext</code> for the
                      <code>ProgressMonitor</code>                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="475">
                <comment line="481">
                    Notify the AccessibleProgressMonitor that the
                     ProgressOptionPane was created. It is necessary
                     to poll for ProgressOptionPane creation because
                     the ProgressMonitor does not have a Component
                     to add a listener to until the ProgressOptionPane
                     is created.                    
                </comment>
                <scope line="476"/>
                <scope line="479">
                    <scope line="486"/>
                </scope>
            </method>
            <class name="AccessibleProgressMonitor" line="493">
                <extends class="AccessibleContext"/>
                <comment line="175">
                    Equivalent to JOptionPane.createDialog,
                     but create a modeless dialog.
                     This is necessary because the Solaris implementation doesn&apos;t
                     support Dialog.setModal yet.                    
                </comment>
                <comment line="230">
                    ///////////////
                     Accessibility support for ProgressOptionPane                    
                </comment>
                <comment line="244">
                    Returns the AccessibleJOptionPane                    
                </comment>
                <comment line="502">
                    The accessibility hierarchy for ProgressMonitor is a flattened
                     version of the ProgressOptionPane component hierarchy.
                    
                     The ProgressOptionPane component hierarchy is:
                       JDialog
                         ProgressOptionPane
                           JPanel
                             JPanel
                               JLabel
                               JLabel
                               JProgressBar
                    
                     The AccessibleProgessMonitor accessibility hierarchy is:
                       AccessibleJDialog
                         AccessibleProgressMonitor
                           AccessibleJLabel
                           AccessibleJLabel
                           AccessibleJProgressBar
                    
                     The abstraction presented to assitive technologies by
                     the AccessibleProgressMonitor is that a dialog contains a
                     progress monitor with three children: a message, a note
                     label and a progress bar.                    
                </comment>
                <comment line="536">
                    Initializes the AccessibleContext now that the ProgressOptionPane
                     has been created. Because the ProgressMonitor is not a Component
                     implementing the Accessible interface, an AccessibleContext
                     must be synthesized from the ProgressOptionPane and its children.
                    
                     For other AWT and Swing classes, the inner class that implements
                     accessibility for the class extends the inner class that implements
                     implements accessibility for the super class. AccessibleProgressMonitor
                     cannot extend AccessibleJOptionPane and must therefore delegate calls
                     to the AccessibleJOptionPane.                    
                </comment>
                <comment line="597">
                                        
                </comment>
                <comment line="698">
                    Returns the parent AccessibleContext                    
                </comment>
                <comment line="761">
                    Returns the AccessibleContext for the JPanel containing the
                     message, note label and progress bar                    
                </comment>
                <comment line="795">
                                        
                </comment>
                <comment line="841">
                    Returns the note label AccessibleText                    
                </comment>
                <comment line="853">
                                        
                </comment>
                <comment line="902">
                    Returns whether source and destination components have the
                     same window ancestor                    
                </comment>
                <comment line="1043">
                                        
                </comment>
                <implements interface="AccessibleText"/>
                <implements interface="ChangeListener"/>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="493">
                    &lt;code&gt;AccessibleProgressMonitor&lt;/code&gt; implements accessibility
                      support for the &lt;code&gt;ProgressMonitor&lt;/code&gt; class.                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <declaration name="oldModelValue" type="Object" line="527"/>
                <javadoc line="529">
                    AccessibleProgressMonitor constructor                    
                </javadoc>
                <method name="AccessibleProgressMonitor" type="constructor" line="532"/>
                <method name="optionPaneCreated" type="void" line="547">
                    <comment line="552">
                        add a listener for progress bar ChangeEvents                        
                    </comment>
                    <comment line="557">
                        add a listener for note label PropertyChangeEvents                        
                    </comment>
                    <scope line="552"/>
                    <scope line="557"/>
                </method>
                <javadoc line="562">
                    Invoked when the target of the listener has changed its state.                    
                    <param>
                        e  a <code>ChangeEvent</code> object. Must not be null.                        
                    </param>
                    <throws>
                        NullPointerException if the parameter is null.                        
                    </throws>
                </javadoc>
                <method name="stateChanged" type="void" line="568">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <comment line="574">
                        the progress bar value changed                        
                    </comment>
                    <scope line="569"/>
                    <scope line="572">
                        <declaration name="newModelValue" type="Object" line="574"/>
                    </scope>
                </method>
                <javadoc line="582">
                    This method gets called when a bound property is changed.                    
                    <param>
                        e A <code>PropertyChangeEvent</code> object describing
                          the event source and the property that has changed. Must not be null.                        
                    </param>
                    <throws>
                        NullPointerException if the parameter is null.                        
                    </throws>
                </javadoc>
                <method name="propertyChange" type="void" line="589">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="592">
                        the note label text changed                        
                    </comment>
                    <scope line="590"/>
                </method>
                <javadoc line="598">
                    Gets the accessibleName property of this object.  The accessibleName
                      property of an object is a localized String that designates the purpose
                      of the object.  For example, the accessibleName property of a label
                      or button might be the text of the label or button itself.  In the
                      case of an object that doesn&apos;t display its name, the accessibleName
                      should still be set.  For example, in the case of a text field used
                      to enter the name of a city, the accessibleName for the en_US locale
                      could be &apos;city.&apos;                    
                    <return>
                        the localized name of the object; null if this
                          object does not have a name                        
                    </return>
                    <see>
                        #setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="613">
                    <comment line="615">
                        defined in AccessibleContext                        
                    </comment>
                    <comment line="618">
                        delegate to the AccessibleJOptionPane                        
                    </comment>
                    <scope line="614"/>
                    <scope line="616"/>
                </method>
                <javadoc line="623">
                    Gets the accessibleDescription property of this object.  The
                      accessibleDescription property of this object is a short localized
                      phrase describing the purpose of the object.  For example, in the
                      case of a &apos;Cancel&apos; button, the accessibleDescription could be
                      &apos;Ignore changes and close dialog box.&apos;                    
                    <return>
                        the localized description of the object; null if
                          this object does not have a description                        
                    </return>
                    <see>
                        #setAccessibleDescription                        
                    </see>
                </javadoc>
                <method name="getAccessibleDescription" type="String" line="635">
                    <comment line="637">
                        defined in AccessibleContext                        
                    </comment>
                    <comment line="640">
                        delegate to the AccessibleJOptionPane                        
                    </comment>
                    <scope line="636"/>
                    <scope line="638"/>
                </method>
                <javadoc line="645">
                    Gets the role of this object.  The role of the object is the generic
                      purpose or use of the class of this object.  For example, the role
                      of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                      AccessibleRole are provided so component developers can pick from
                      a set of predefined roles.  This enables assistive technologies to
                      provide a consistent interface to various tweaked subclasses of
                      components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                      that act like a push button) as well as distinguish between sublasses
                      that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                      and AccessibleRole.RADIO_BUTTON for radio buttons).
                      &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                      custom component developers can define their own AccessibleRole&apos;s
                      if the set of predefined roles is inadequate.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="663"/>
                <javadoc line="667">
                    Gets the state set of this object.  The AccessibleStateSet of an object
                      is composed of a set of unique AccessibleStates.  A change in the
                      AccessibleStateSet of an object will cause a PropertyChangeEvent to
                      be fired for the ACCESSIBLE_STATE_PROPERTY property.                    
                    <return>
                        an instance of AccessibleStateSet containing the
                          current state set of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState                        
                    </see>
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="679">
                    <comment line="682">
                        delegate to the AccessibleJOptionPane                        
                    </comment>
                    <scope line="680"/>
                </method>
                <javadoc line="687">
                    Gets the Accessible parent of this object.                    
                    <return>
                        the Accessible parent of this object; null if this
                          object does not have an Accessible parent                        
                    </return>
                </javadoc>
                <method name="getAccessibleParent" type="Accessible" line="693"/>
                <method name="getParentAccessibleContext" type="AccessibleContext" line="700">
                    <scope line="701"/>
                </method>
                <javadoc line="707">
                    Gets the 0-based index of this object in its accessible parent.                    
                    <return>
                        the 0-based index of this object in its parent; -1 if this
                          object does not have an accessible parent.                        
                    </return>
                    <see>
                        #getAccessibleParent                        
                    </see>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                    <see>
                        #getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="getAccessibleIndexInParent" type="int" line="717">
                    <comment line="720">
                        delegate to the AccessibleJOptionPane                        
                    </comment>
                    <scope line="718"/>
                </method>
                <javadoc line="725">
                    Returns the number of accessible children of the object.                    
                    <return>
                        the number of accessible children of the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="730">
                    <comment line="732">
                        return the number of children in the JPanel containing
                         the message, note label and progress bar                        
                    </comment>
                    <declaration name="ac" type="AccessibleContext" line="733"/>
                    <scope line="734"/>
                </method>
                <javadoc line="740">
                    Returns the specified Accessible child of the object.  The Accessible
                      children of an Accessible object are zero-based, so the first child
                      of an Accessible child is at index 0, the second child is at index 1,
                      and so on.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the Accessible child of the object                        
                    </return>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="750">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="752">
                        return a child in the JPanel containing the message, note label
                         and progress bar                        
                    </comment>
                    <declaration name="ac" type="AccessibleContext" line="753"/>
                    <scope line="754"/>
                </method>
                <method name="getPanelAccessibleContext" type="AccessibleContext" line="764">
                    <scope line="765">
                        <declaration name="c" type="Component" line="766"/>
                        <scope line="767"/>
                    </scope>
                </method>
                <javadoc line="774">
                    Gets the locale of the component. If the component does not have a
                      locale, then the locale of its parent is returned.                    
                    <return>
                        this component's locale.  If this component does not have
                          a locale, the locale of its parent is returned.                        
                    </return>
                    <exception>
                        IllegalComponentStateExceptionIf the Component does not have its own locale and has not yet been
                          added to a containment hierarchy such that the locale can be
                          determined from the containing parent.                        
                    </exception>
                </javadoc>
                <method name="getLocale" type="Locale" line="786">
                    <comment line="789">
                        delegate to the AccessibleJOptionPane                        
                    </comment>
                    <scope line="787"/>
                </method>
                <javadoc line="796">
                    Gets the AccessibleComponent associated with this object that has a
                      graphical representation.                    
                    <return>
                        AccessibleComponent if supported by object; else return null                        
                    </return>
                    <see>
                        AccessibleComponent                        
                    </see>
                </javadoc>
                <method name="getAccessibleComponent" type="AccessibleComponent" line="803">
                    <comment line="806">
                        delegate to the AccessibleJOptionPane                        
                    </comment>
                    <scope line="804"/>
                </method>
                <javadoc line="811">
                    Gets the AccessibleValue associated with this object that supports a
                      Numerical value.                    
                    <return>
                        AccessibleValue if supported by object; else return null                        
                    </return>
                    <see>
                        AccessibleValue                        
                    </see>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="818">
                    <comment line="821">
                        delegate to the AccessibleJProgressBar                        
                    </comment>
                    <scope line="819"/>
                </method>
                <javadoc line="826">
                    Gets the AccessibleText associated with this object presenting
                      text on the display.                    
                    <return>
                        AccessibleText if supported by object; else return null                        
                    </return>
                    <see>
                        AccessibleText                        
                    </see>
                </javadoc>
                <method name="getAccessibleText" type="AccessibleText" line="833">
                    <scope line="834"/>
                </method>
                <method name="getNoteLabelAccessibleText" type="AccessibleText" line="843">
                    <comment line="846">
                        AccessibleJLabel implements AccessibleText if the
                         JLabel contains HTML text                        
                    </comment>
                    <scope line="844"/>
                </method>
                <javadoc line="854">
                    Given a point in local coordinates, return the zero-based index
                      of the character under that Point.  If the point is invalid,
                      this method returns -1.                    
                    <param>
                        p the Point in local coordinates                        
                    </param>
                    <return>
                        the zero-based index of the character under Point p; if
                          Point is invalid return -1.                        
                    </return>
                </javadoc>
                <method name="getIndexAtPoint" type="int" line="863">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <comment line="867">
                        convert point from the option pane bounds
                         to the note label bounds.                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="864"/>
                    <scope line="865">
                        <declaration name="noteLabelPoint" type="Point" line="868"/>
                        <scope line="871"/>
                    </scope>
                </method>
                <javadoc line="878">
                    Determines the bounding box of the character at the given
                      index into the string.  The bounds are returned in local
                      coordinates.  If the index is invalid an empty rectangle is returned.                    
                    <param>
                        i the index into the String                        
                    </param>
                    <return>
                        the screen coordinates of the character's bounding box,
                          if index is invalid return an empty rectangle.                        
                    </return>
                </javadoc>
                <method name="getCharacterBounds" type="Rectangle" line="887">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="891">
                        return rectangle in the option pane bounds                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="888"/>
                    <scope line="889">
                        <declaration name="noteLabelRect" type="Rectangle" line="891"/>
                        <scope line="892"/>
                    </scope>
                </method>
                <method name="sameWindowAncestor" type="boolean" line="905">
                    <params>
                        <param name="src" type="Component"/>
                        <param name="dest" type="Component"/>
                    </params>
                    <scope line="906"/>
                </method>
                <javadoc line="913">
                    Returns the number of characters (valid indicies)                    
                    <return>
                        the number of characters                        
                    </return>
                </javadoc>
                <method name="getCharCount" type="int" line="918">
                    <comment line="921">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="919"/>
                    <scope line="920"/>
                </method>
                <javadoc line="926">
                    Returns the zero-based offset of the caret.
                      Note: That to the right of the caret will have the same index
                      value as the offset (the caret is between two characters).                    
                    <return>
                        the zero-based offset of the caret.                        
                    </return>
                </javadoc>
                <method name="getCaretPosition" type="int" line="933">
                    <comment line="936">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="934"/>
                    <scope line="935"/>
                </method>
                <javadoc line="941">
                    Returns the String at a given index.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence                        
                    </return>
                </javadoc>
                <method name="getAtIndex" type="String" line="948">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <comment line="951">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="949"/>
                    <scope line="950"/>
                </method>
                <javadoc line="956">
                    Returns the String after a given index.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence                        
                    </return>
                </javadoc>
                <method name="getAfterIndex" type="String" line="963">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <comment line="966">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="964"/>
                    <scope line="965"/>
                </method>
                <javadoc line="971">
                    Returns the String before a given index.                    
                    <param>
                        part the CHARACTER, WORD, or SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        the letter, word, or sentence                        
                    </return>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="978">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <comment line="981">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="979"/>
                    <scope line="980"/>
                </method>
                <javadoc line="986">
                    Returns the AttributeSet for a given character at a given index                    
                    <param>
                        i the zero-based index into the text                        
                    </param>
                    <return>
                        the AttributeSet of the character                        
                    </return>
                </javadoc>
                <method name="getCharacterAttribute" type="AttributeSet" line="992">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="995">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="993"/>
                    <scope line="994"/>
                </method>
                <javadoc line="1000">
                    Returns the start offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into the text of the start of the selection                        
                    </return>
                </javadoc>
                <method name="getSelectionStart" type="int" line="1007">
                    <comment line="1010">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="1008"/>
                    <scope line="1009"/>
                </method>
                <javadoc line="1015">
                    Returns the end offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into teh text of the end of the selection                        
                    </return>
                </javadoc>
                <method name="getSelectionEnd" type="int" line="1022">
                    <comment line="1025">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="1023"/>
                    <scope line="1024"/>
                </method>
                <javadoc line="1030">
                    Returns the portion of the text that is selected.                    
                    <return>
                        the String portion of the text that is selected                        
                    </return>
                </javadoc>
                <method name="getSelectedText" type="String" line="1035">
                    <comment line="1038">
                        JLabel contains HTML text                        
                    </comment>
                    <declaration name="at" type="AccessibleText" line="1036"/>
                    <scope line="1037"/>
                </method>
            </class>
        </class>
    </source>