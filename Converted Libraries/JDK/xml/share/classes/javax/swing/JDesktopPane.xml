<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.DefaultFocusTraversalPolicy"/>
        <import package="java.awt.FocusTraversalPolicy"/>
        <import package="java.awt.Window"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.beans.PropertyVetoException"/>
        <import package="java.util.Set"/>
        <import package="java.util.TreeSet"/>
        <class name="JDesktopPane" line="18">
            <extends class="JLayeredPane"/>
            <implements interface="Accessible"/>
            <javadoc line="18">
                A container used to create a multiple-document interface or a virtual desktop.
                  You create &lt;code&gt;JInternalFrame&lt;/code&gt; objects and add them to the
                  &lt;code&gt;JDesktopPane&lt;/code&gt;. &lt;code&gt;JDesktopPane&lt;/code&gt; extends
                  &lt;code&gt;JLayeredPane&lt;/code&gt; to manage the potentially overlapping internal
                  frames. It also maintains a reference to an instance of
                  &lt;code&gt;DesktopManager&lt;/code&gt; that is set by the UI
                  class for the current look and feel (L&amp;F).  Note that &lt;code&gt;JDesktopPane&lt;/code&gt;
                  does not support borders.
                  &lt;p&gt;
                  This class is normally used as the parent of &lt;code&gt;JInternalFrames&lt;/code&gt;
                  to provide a pluggable &lt;code&gt;DesktopManager&lt;/code&gt; object to the
                  &lt;code&gt;JInternalFrames&lt;/code&gt;. The &lt;code&gt;installUI&lt;/code&gt; of the
                  L&amp;F specific implementation is responsible for setting the
                  &lt;code&gt;desktopManager&lt;/code&gt; variable appropriately.
                  When the parent of a &lt;code&gt;JInternalFrame&lt;/code&gt; is a &lt;code&gt;JDesktopPane&lt;/code&gt;,
                  it should delegate most of its behavior to the &lt;code&gt;desktopManager&lt;/code&gt;
                  (closing, resizing, etc).
                  &lt;p&gt;
                  For further documentation and examples see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html&quot;&gt;How to Use Internal Frames&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JInternalFrame                    
                </see>
                <see>
                    JInternalFrame.JDesktopIcon                    
                </see>
                <see>
                    DesktopManager                    
                </see>
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="60"/>
            <javadoc line="60">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="desktopManager" type="DesktopManager" line="65"/>
            <declaration name="selectedFrame" type="JInternalFrame" line="66"/>
            <declaration name="LIVE_DRAG_MODE" type="int" line="67"/>
            <javadoc line="67">
                Indicates that the entire contents of the item being dragged
                  should appear inside the desktop pane.                
                <see>
                    #OUTLINE_DRAG_MODE                    
                </see>
                <see>
                    #setDragMode                    
                </see>
            </javadoc>
            <declaration name="OUTLINE_DRAG_MODE" type="int" line="74"/>
            <javadoc line="74">
                Indicates that an outline only of the item being dragged
                  should appear inside the desktop pane.                
                <see>
                    #LIVE_DRAG_MODE                    
                </see>
                <see>
                    #setDragMode                    
                </see>
            </javadoc>
            <declaration name="dragMode" type="int" line="81"/>
            <declaration name="dragModeSet" type="boolean" line="82"/>
            <declaration name="framesCache" type="List&lt;JInternalFrame&gt;" line="83"/>
            <declaration name="componentOrderCheckingEnabled" type="boolean" line="84"/>
            <declaration name="componentOrderChanged" type="boolean" line="85"/>
            <javadoc line="86">
                Creates a new &lt;code&gt;JDesktopPane&lt;/code&gt;.                
            </javadoc>
            <method name="JDesktopPane" type="constructor" line="89">
                <anonymous_class line="92">
                    <method name="getDefaultComponent" type="Component" line="93">
                        <params>
                            <param name="c" type="Container"/>
                        </params>
                        <declaration name="jifArray" type="JInternalFrame" line="94"/>
                        <declaration name="comp" type="Component" line="95"/>
                        <scope line="96">
                            <scope line="98"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="108">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the <code>DesktopPaneUI</code> object that
                      renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="DesktopPaneUI" line="113"/>
            <javadoc line="116">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the DesktopPaneUI L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="125">
                <params>
                    <param name="ui" type="DesktopPaneUI"/>
                </params>
            </method>
            <javadoc line="128">
                Sets the &quot;dragging style&quot; used by the desktop pane.
                  You may want to change to one mode or another for
                  performance or aesthetic reasons.                
                <param>
                    dragMode the style of drag to use for items in the Desktop                    
                </param>
                <see>
                    #LIVE_DRAG_MODE                    
                </see>
                <see>
                    #OUTLINE_DRAG_MODE                    
                </see>
                <beaninfobound>
                    : true
                      description: Dragging style for internal frame children.
                      enum: LIVE_DRAG_MODE JDesktopPane.LIVE_DRAG_MODE
                      OUTLINE_DRAG_MODE JDesktopPane.OUTLINE_DRAG_MODE                    
                </beaninfobound>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setDragMode" type="void" line="141">
                <params>
                    <param name="dragMode" type="int"/>
                </params>
                <declaration name="oldDragMode" type="int" line="142"/>
            </method>
            <javadoc line="147">
                Gets the current &quot;dragging style&quot; used by the desktop pane.                
                <return>
                    either <code>Live_DRAG_MODE</code> or
                      <code>OUTLINE_DRAG_MODE</code>                    
                </return>
                <see>
                    #setDragMode                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getDragMode" type="int" line="154"/>
            <javadoc line="157">
                Returns the &lt;code&gt;DesktopManger&lt;/code&gt; that handles
                  desktop-specific UI actions.                
            </javadoc>
            <method name="getDesktopManager" type="DesktopManager" line="161"/>
            <javadoc line="164">
                Sets the &lt;code&gt;DesktopManger&lt;/code&gt; that will handle
                  desktop-specific UI actions. This may be overridden by{@code LookAndFeel}.                
                <param>
                    d the <code>DesktopManager</code> to use                    
                </param>
                <beaninfobound>
                    : true
                      description: Desktop manager to handle the internal frames in the
                      desktop pane.                    
                </beaninfobound>
            </javadoc>
            <method name="setDesktopManager" type="void" line="172">
                <params>
                    <param name="d" type="DesktopManager"/>
                </params>
                <declaration name="oldValue" type="DesktopManager" line="173"/>
            </method>
            <javadoc line="177">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the L&amp;F has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="183"/>
            <javadoc line="186">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "DesktopPaneUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="192"/>
            <javadoc line="195">
                Returns all &lt;code&gt;JInternalFrames&lt;/code&gt; currently displayed in the
                  desktop. Returns iconified frames as well as expanded frames.                
                <return>
                    an array of <code>JInternalFrame</code> objects                    
                </return>
            </javadoc>
            <method name="getAllFrames" type="JInternalFrame[]" line="200">
                <declaration name="i" type="int" line="201"/>
                <declaration name="results" type="JInternalFrame[]" line="202"/>
                <declaration name="vResults" type="Vector&lt;JInternalFrame&gt;" line="203"/>
                <scope line="205">
                    <declaration name="next" type="Component" line="206"/>
                    <scope line="208">
                        <declaration name="tmp" type="JInternalFrame" line="209"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="217">
                Returns the currently active &lt;code&gt;JInternalFrame&lt;/code&gt;
                  in this &lt;code&gt;JDesktopPane&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
                  if no &lt;code&gt;JInternalFrame&lt;/code&gt; is currently active.                
                <return>
                    the currently active <code>JInternalFrame</code> or
                      <code>null</code>                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getSelectedFrame" type="JInternalFrame" line="225"/>
            <javadoc line="228">
                Sets the currently active &lt;code&gt;JInternalFrame&lt;/code&gt;
                  in this &lt;code&gt;JDesktopPane&lt;/code&gt;. This method is used to bridge
                  the package gap between JDesktopPane and the platform implementation
                  code and should not be called directly. To visually select the frame
                  the client must call JInternalFrame.setSelected(true) to activate
                  the frame.                
                <see>
                    JInternalFrame#setSelected(boolean)                    
                </see>
                <param>
                    f the internal frame that's currently selected                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setSelectedFrame" type="void" line="239">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
            </method>
            <javadoc line="242">
                Returns all &lt;code&gt;JInternalFrames&lt;/code&gt; currently displayed in the
                  specified layer of the desktop. Returns iconified frames as well
                  expanded frames.                
                <param>
                    layer  an int specifying the desktop layer                    
                </param>
                <return>
                    an array of <code>JInternalFrame</code> objects                    
                </return>
                <see>
                    JLayeredPane                    
                </see>
            </javadoc>
            <method name="getAllFramesInLayer" type="JInternalFrame[]" line="250">
                <params>
                    <param name="layer" type="int"/>
                </params>
                <declaration name="i" type="int" line="251"/>
                <declaration name="results" type="JInternalFrame[]" line="252"/>
                <declaration name="vResults" type="Vector&lt;JInternalFrame&gt;" line="253"/>
                <scope line="255">
                    <declaration name="next" type="Component" line="256"/>
                    <scope line="257"/>
                    <scope line="260">
                        <declaration name="tmp" type="JInternalFrame" line="261"/>
                    </scope>
                </scope>
            </method>
            <method name="getFrames" type="List<JInternalFrame>" line="269">
                <declaration name="c" type="Component" line="270"/>
                <declaration name="set" type="Set&lt;ComponentPosition&gt;" line="271"/>
                <scope line="272">
                    <scope line="274"/>
                    <scope line="277"/>
                </scope>
                <declaration name="frames" type="List&lt;JInternalFrame&gt;" line="282"/>
                <scope line="283"/>
            </method>
            <class name="ComponentPosition" line="288">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="ComponentPosition"/>
                    </type_params>
                </implements>
                <declaration name="component" type="JInternalFrame" line="289"/>
                <declaration name="layer" type="int" line="290"/>
                <declaration name="zOrder" type="int" line="291"/>
                <method name="ComponentPosition" type="constructor" line="292">
                    <params>
                        <param name="component" type="JInternalFrame"/>
                        <param name="layer" type="int"/>
                        <param name="zOrder" type="int"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="297">
                    <params>
                        <param name="o" type="ComponentPosition"/>
                    </params>
                    <declaration name="delta" type="int" line="298"/>
                    <scope line="299"/>
                </method>
            </class>
            <method name="getNextFrame" type="JInternalFrame" line="305">
                <params>
                    <param name="f" type="JInternalFrame"/>
                    <param name="forward" type="boolean"/>
                </params>
                <scope line="307"/>
                <declaration name="i" type="int" line="310"/>
                <scope line="311"/>
                <scope line="314">
                    <scope line="315"/>
                </scope>
                <scope line="319">
                    <scope line="320"/>
                </scope>
            </method>
            <method name="getNextFrame" type="JInternalFrame" line="326">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
            </method>
            <method name="getTopInternalFrame" type="JInternalFrame" line="329">
                <scope line="330"/>
            </method>
            <method name="updateFramesCache" type="void" line="335"/>
            <method name="verifyFramesCache" type="void" line="338">
                <scope line="339"/>
            </method>
            <javadoc line="344">
                Selects the next &lt;code&gt;JInternalFrame&lt;/code&gt; in this desktop pane.                
                <param>
                    forward a boolean indicating which direction to select in;
                      <code>true</code> for forward, <code>false</code> for
                      backward                    
                </param>
                <return>
                    the JInternalFrame that was selected or <code>null</code>
                      if nothing was selected                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="selectFrame" type="JInternalFrame" line="353">
                <params>
                    <param name="forward" type="boolean"/>
                </params>
                <declaration name="selectedFrame" type="JInternalFrame" line="354"/>
                <declaration name="frameToSelect" type="JInternalFrame" line="355"/>
                <scope line="356"/>
                <scope line="360"/>
                <scope line="363"/>
                <scope line="366"/>
            </method>
            <method name="setComponentOrderCheckingEnabled" type="void" line="371">
                <params>
                    <param name="enable" type="boolean"/>
                </params>
            </method>
            <javadoc line="374">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="addImpl" type="void" line="378">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="380">
                    <scope line="381"/>
                </scope>
            </method>
            <javadoc line="386">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="remove" type="void" line="390">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="391">
                    <declaration name="comp" type="Component" line="392"/>
                    <scope line="393"/>
                </scope>
            </method>
            <javadoc line="399">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="removeAll" type="void" line="403">
                <scope line="404">
                    <declaration name="count" type="int" line="405"/>
                    <scope line="406">
                        <declaration name="comp" type="Component" line="407"/>
                        <scope line="408"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="416">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setComponentZOrder" type="void" line="420">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="422">
                    <scope line="423"/>
                </scope>
            </method>
            <javadoc line="428">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="432">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="434">
                    <declaration name="count" type="byte" line="435"/>
                    <scope line="437"/>
                </scope>
            </method>
            <method name="setUIProperty" type="void" line="442">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="443">
                    <scope line="444"/>
                </scope>
                <scope line="449"/>
            </method>
            <javadoc line="453">
                Returns a string representation of this &lt;code&gt;JDesktopPane&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JDesktopPane</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="461">
                <declaration name="desktopManagerString" type="String" line="462"/>
            </method>
            <javadoc line="465">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JDesktopPane&lt;/code&gt;. For desktop panes, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJDesktopPane&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJDesktopPane&lt;/code&gt; instance is created if necessary.                
                <return>
                    an <code>AccessibleJDesktopPane</code> that serves as the
                      <code>AccessibleContext</code> of this <code>JDesktopPane</code>                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="474">
                <scope line="475"/>
            </method>
            <class name="AccessibleJDesktopPane" line="480">
                <extends class="AccessibleJComponent"/>
                <javadoc line="480">
                    This class implements accessibility support for the
                      &lt;code&gt;JDesktopPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to desktop pane user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="496">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="502"/>
            </class>
        </class>
    </source>