<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.Transient"/>
        <import package="java.util"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <class name="JComboBox" line="44">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="JComponent"/>
            <comment line="164">
                Flag to ensure that infinite loops do not occur with ActionEvents.                
            </comment>
            <comment line="167">
                Flag to ensure the we don&apos;t get multiple ActionEvents on item selection.                
            </comment>
            <comment line="332">
                Properties                
            </comment>
            <comment line="522">
                Selection                
            </comment>
            <comment line="831">
                                
            </comment>
            <comment line="1443">
                                
            </comment>
            <comment line="1584">
                /////////////////
                 Accessibility support
                /                
            </comment>
            <comment line="2412">
                innerclass AccessibleJComboBox                
            </comment>
            <implements interface="ItemSelectable"/>
            <implements interface="ListDataListener"/>
            <implements interface="ActionListener"/>
            <implements interface="Accessible"/>
            <javadoc line="44">
                A component that combines a button or editable field and a drop-down list.
                  The user can select a value from the drop-down list, which appears at the
                  user&apos;s request. If you make the combo box editable, then the combo box
                  includes an editable field into which the user can type a value.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.
                  &lt;p&gt;
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/combobox.html&quot;&gt;How to Use Combo Boxes&lt;/a&gt;
                  in &lt;a href=&quot;http://java.sun.com/Series/Tutorial/index.html&quot;&gt;&lt;em&gt;The Java Tutorial&lt;/em&gt;&lt;/a&gt;
                  for further information.
                  &lt;p&gt;                
                <see>
                    ComboBoxModel                    
                </see>
                <see>
                    DefaultComboBoxModel                    
                </see>
                <param>
                    <E>
                       the type of the elements of this combo box                    
                </param>
                <beaninfo>
                    attribute: isContainer false
                      description: A combination of a text field and a drop-down list.                    
                </beaninfo>
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    Mark Davidson                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="83"/>
            <javadoc line="83">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="dataModel" type="ComboBoxModel&lt;E&gt;" line="89"/>
            <javadoc line="89">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #getModel                    
                </see>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <declaration name="renderer" type="ListCellRenderer&lt;? super E&gt;" line="97"/>
            <javadoc line="97">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #getRenderer                    
                </see>
                <see>
                    #setRenderer                    
                </see>
            </javadoc>
            <declaration name="editor" type="ComboBoxEditor" line="105"/>
            <javadoc line="105">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #getEditor                    
                </see>
                <see>
                    #setEditor                    
                </see>
            </javadoc>
            <declaration name="maximumRowCount" type="int" line="113"/>
            <javadoc line="113">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #getMaximumRowCount                    
                </see>
                <see>
                    #setMaximumRowCount                    
                </see>
            </javadoc>
            <declaration name="isEditable" type="boolean" line="122"/>
            <javadoc line="122">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #isEditable                    
                </see>
                <see>
                    #setEditable                    
                </see>
            </javadoc>
            <declaration name="keySelectionManager" type="KeySelectionManager" line="130"/>
            <javadoc line="130">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #setKeySelectionManager                    
                </see>
                <see>
                    #getKeySelectionManager                    
                </see>
            </javadoc>
            <declaration name="actionCommand" type="String" line="138"/>
            <javadoc line="138">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #setActionCommand                    
                </see>
                <see>
                    #getActionCommand                    
                </see>
            </javadoc>
            <declaration name="lightWeightPopupEnabled" type="boolean" line="146"/>
            <javadoc line="146">
                This protected field is implementation specific. Do not access directly
                  or override. Use the accessor methods instead.                
                <see>
                    #setLightWeightPopupEnabled                    
                </see>
                <see>
                    #isLightWeightPopupEnabled                    
                </see>
            </javadoc>
            <declaration name="selectedItemReminder" type="Object" line="155"/>
            <javadoc line="155">
                This protected field is implementation specific. Do not access directly
                  or override.                
            </javadoc>
            <declaration name="prototypeDisplayValue" type="E" line="161"/>
            <declaration name="firingActionEvent" type="boolean" line="164"/>
            <declaration name="selectingItem" type="boolean" line="167"/>
            <javadoc line="169">
                Creates a &lt;code&gt;JComboBox&lt;/code&gt; that takes its items from an
                  existing &lt;code&gt;ComboBoxModel&lt;/code&gt;.  Since the
                  &lt;code&gt;ComboBoxModel&lt;/code&gt; is provided, a combo box created using
                  this constructor does not create a default combo box model and
                  may impact how the insert, remove and add methods behave.                
                <param>
                    aModel the <code>ComboBoxModel</code> that provides the
                      displayed list of items                    
                </param>
                <see>
                    DefaultComboBoxModel                    
                </see>
            </javadoc>
            <method name="JComboBox" type="constructor" line="180">
                <params>
                    <param name="aModel" type="ComboBoxModel<E>"/>
                </params>
            </method>
            <javadoc line="186">
                Creates a &lt;code&gt;JComboBox&lt;/code&gt; that contains the elements
                  in the specified array.  By default the first item in the array
                  (and therefore the data model) becomes selected.                
                <param>
                    items  an array of objects to insert into the combo box                    
                </param>
                <see>
                    DefaultComboBoxModel                    
                </see>
            </javadoc>
            <method name="JComboBox" type="constructor" line="194">
                <params>
                    <param name="items" type="E[]"/>
                </params>
            </method>
            <javadoc line="200">
                Creates a &lt;code&gt;JComboBox&lt;/code&gt; that contains the elements
                  in the specified Vector.  By default the first item in the vector
                  (and therefore the data model) becomes selected.                
                <param>
                    items  an array of vectors to insert into the combo box                    
                </param>
                <see>
                    DefaultComboBoxModel                    
                </see>
            </javadoc>
            <method name="JComboBox" type="constructor" line="208">
                <params>
                    <param name="items" type="Vector<E>"/>
                </params>
            </method>
            <javadoc line="214">
                Creates a &lt;code&gt;JComboBox&lt;/code&gt; with a default data model.
                  The default data model is an empty list of objects.
                  Use &lt;code&gt;addItem&lt;/code&gt; to add items.  By default the first item
                  in the data model becomes selected.                
                <see>
                    DefaultComboBoxModel                    
                </see>
            </javadoc>
            <method name="JComboBox" type="constructor" line="222"/>
            <method name="init" type="void" line="228"/>
            <method name="installAncestorListener" type="void" line="234">
                <anonymous_class line="235">
                    <method name="ancestorAdded" type="void" line="236">
                        <params>
                            <param name="event" type="AncestorEvent"/>
                        </params>
                    </method>
                    <method name="ancestorRemoved" type="void" line="237">
                        <params>
                            <param name="event" type="AncestorEvent"/>
                        </params>
                    </method>
                    <method name="ancestorMoved" type="void" line="238">
                        <params>
                            <param name="event" type="AncestorEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="244">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the <code>ComboBoxUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="256">
                <params>
                    <param name="ui" type="ComboBoxUI"/>
                </params>
            </method>
            <javadoc line="260">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="265">
                <declaration name="renderer" type="ListCellRenderer&lt;? super E&gt;" line="268"/>
                <scope line="269"/>
            </method>
            <javadoc line="275">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "ComboBoxUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="282"/>
            <javadoc line="287">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the ComboBoxUI object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="ComboBoxUI" line="292"/>
            <javadoc line="296">
                Sets the data model that the &lt;code&gt;JComboBox&lt;/code&gt; uses to obtain
                  the list of items.                
                <param>
                    aModel the <code>ComboBoxModel</code> that provides the
                      displayed list of items                    
                </param>
                <beaninfo>
                    bound: true
                      description: Model that the combo box uses to get data to display.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="307">
                <params>
                    <param name="aModel" type="ComboBoxModel<E>"/>
                </params>
                <comment line="316">
                    set the current selected item.                    
                </comment>
                <declaration name="oldModel" type="ComboBoxModel&lt;E&gt;" line="308"/>
                <scope line="309"/>
            </method>
            <javadoc line="321">
                Returns the data model currently used by the &lt;code&gt;JComboBox&lt;/code&gt;.                
                <return>
                    the <code>ComboBoxModel</code> that provides the displayed
                      list of items                    
                </return>
            </javadoc>
            <method name="getModel" type="ComboBoxModel<E>" line="327"/>
            <javadoc line="335">
                Sets the &lt;code&gt;lightWeightPopupEnabled&lt;/code&gt; property, which
                  provides a hint as to whether or not a lightweight
                  &lt;code&gt;Component&lt;/code&gt; should be used to contain the
                  &lt;code&gt;JComboBox&lt;/code&gt;, versus a heavyweight
                  &lt;code&gt;Component&lt;/code&gt; such as a &lt;code&gt;Panel&lt;/code&gt;
                  or a &lt;code&gt;Window&lt;/code&gt;.  The decision of lightweight
                  versus heavyweight is ultimately up to the
                  &lt;code&gt;JComboBox&lt;/code&gt;.  Lightweight windows are more
                  efficient than heavyweight windows, but lightweight
                  and heavyweight components do not mix well in a GUI.
                  If your application mixes lightweight and heavyweight
                  components, you should disable lightweight popups.
                  The default value for the &lt;code&gt;lightWeightPopupEnabled&lt;/code&gt;
                  property is &lt;code&gt;true&lt;/code&gt;, unless otherwise specified
                  by the look and feel.  Some look and feels always use
                  heavyweight popups, no matter what the value of this property.
                  &lt;p&gt;
                  See the article &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/mixing/index.html&quot;&gt;Mixing Heavy and Light Components&lt;/a&gt;
                  on &lt;a href=&quot;http://java.sun.com/products/jfc/tsc&quot;&gt;
                  &lt;em&gt;The Swing Connection&lt;/em&gt;&lt;/a&gt;
                  This method fires a property changed event.                
                <param>
                    aFlag if <code>true</code>, lightweight popups are desired                    
                </param>
                <beaninfo>
                    bound: true
                      expert: true
                      description: Set to <code>false</code> to require heavyweight popups.                    
                </beaninfo>
            </javadoc>
            <method name="setLightWeightPopupEnabled" type="void" line="365">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
                <declaration name="oldFlag" type="boolean" line="366"/>
            </method>
            <javadoc line="371">
                Gets the value of the &lt;code&gt;lightWeightPopupEnabled&lt;/code&gt;
                  property.                
                <return>
                    the value of the <code>lightWeightPopupEnabled</code>
                      property                    
                </return>
                <see>
                    #setLightWeightPopupEnabled                    
                </see>
            </javadoc>
            <method name="isLightWeightPopupEnabled" type="boolean" line="379"/>
            <javadoc line="383">
                Determines whether the &lt;code&gt;JComboBox&lt;/code&gt; field is editable.
                  An editable &lt;code&gt;JComboBox&lt;/code&gt; allows the user to type into the
                  field or selected an item from the list to initialize the field,
                  after which it can be edited. (The editing affects only the field,
                  the list item remains intact.) A non editable &lt;code&gt;JComboBox&lt;/code&gt;
                  displays the selected item in the field,
                  but the selection cannot be modified.                
                <param>
                    aFlag a boolean value, where true indicates that the
                      field is editable                    
                </param>
                <beaninfo>
                    bound: true
                      preferred: true
                      description: If true, the user can type a new value in the combo box.                    
                </beaninfo>
            </javadoc>
            <method name="setEditable" type="void" line="400">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
                <declaration name="oldFlag" type="boolean" line="401"/>
            </method>
            <javadoc line="406">
                Returns true if the &lt;code&gt;JComboBox&lt;/code&gt; is editable.
                  By default, a combo box is not editable.                
                <return>
                    true if the <code>JComboBox</code> is editable, else false                    
                </return>
            </javadoc>
            <method name="isEditable" type="boolean" line="412"/>
            <javadoc line="416">
                Sets the maximum number of rows the &lt;code&gt;JComboBox&lt;/code&gt; displays.
                  If the number of objects in the model is greater than count,
                  the combo box uses a scrollbar.                
                <param>
                    count an integer specifying the maximum number of items to
                      display in the list before using a scrollbar                    
                </param>
                <beaninfo>
                    bound: true
                      preferred: true
                      description: The maximum number of rows the popup should have                    
                </beaninfo>
            </javadoc>
            <method name="setMaximumRowCount" type="void" line="428">
                <params>
                    <param name="count" type="int"/>
                </params>
                <declaration name="oldCount" type="int" line="429"/>
            </method>
            <javadoc line="434">
                Returns the maximum number of items the combo box can display
                  without a scrollbar                
                <return>
                    an integer specifying the maximum number of items that are
                      displayed in the list before using a scrollbar                    
                </return>
            </javadoc>
            <method name="getMaximumRowCount" type="int" line="441"/>
            <javadoc line="445">
                Sets the renderer that paints the list items and the item selected from the list in
                  the JComboBox field. The renderer is used if the JComboBox is not
                  editable. If it is editable, the editor is used to render and edit
                  the selected item.
                  &lt;p&gt;
                  The default renderer displays a string or an icon.
                  Other renderers can handle graphic images and composite items.
                  &lt;p&gt;
                  To display the selected item,
                  &lt;code&gt;aRenderer.getListCellRendererComponent&lt;/code&gt;
                  is called, passing the list object and an index of -1.                
                <param>
                    aRenderer  the <code>ListCellRenderer</code> that
                      displays the selected item                    
                </param>
                <see>
                    #setEditor                    
                </see>
                <beaninfo>
                    bound: true
                      expert: true
                      description: The renderer that paints the item selected in the list.                    
                </beaninfo>
            </javadoc>
            <method name="setRenderer" type="void" line="466">
                <params>
                    <param name="aRenderer" type="ListCellRenderer<? super E>"/>
                </params>
                <declaration name="oldRenderer" type="ListCellRenderer&lt;? super E&gt;" line="467"/>
            </method>
            <javadoc line="473">
                Returns the renderer used to display the selected item in the
                  &lt;code&gt;JComboBox&lt;/code&gt; field.                
                <return>
                    the <code>ListCellRenderer</code> that displays
                      the selected item.                    
                </return>
            </javadoc>
            <method name="getRenderer" type="ListCellRenderer<? super E>" line="480"/>
            <javadoc line="484">
                Sets the editor used to paint and edit the selected item in the
                  &lt;code&gt;JComboBox&lt;/code&gt; field.  The editor is used only if the
                  receiving &lt;code&gt;JComboBox&lt;/code&gt; is editable. If not editable,
                  the combo box uses the renderer to paint the selected item.                
                <param>
                    anEditor  the <code>ComboBoxEditor</code> that
                      displays the selected item                    
                </param>
                <see>
                    #setRenderer                    
                </see>
                <beaninfo>
                    bound: true
                      expert: true
                      description: The editor that combo box uses to edit the current value                    
                </beaninfo>
            </javadoc>
            <method name="setEditor" type="void" line="498">
                <params>
                    <param name="anEditor" type="ComboBoxEditor"/>
                </params>
                <declaration name="oldEditor" type="ComboBoxEditor" line="499"/>
                <scope line="501"/>
                <scope line="505"/>
            </method>
            <javadoc line="511">
                Returns the editor used to paint and edit the selected item in the
                  &lt;code&gt;JComboBox&lt;/code&gt; field.                
                <return>
                    the <code>ComboBoxEditor</code> that displays the selected item                    
                </return>
            </javadoc>
            <method name="getEditor" type="ComboBoxEditor" line="517"/>
            <javadoc line="525">
                Sets the selected item in the combo box display area to the object in
                  the argument.
                  If &lt;code&gt;anObject&lt;/code&gt; is in the list, the display area shows
                  &lt;code&gt;anObject&lt;/code&gt; selected.
                  &lt;p&gt;
                  If &lt;code&gt;anObject&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; in the list and the combo box is
                  uneditable, it will not change the current selection. For editable
                  combo boxes, the selection will change to &lt;code&gt;anObject&lt;/code&gt;.
                  &lt;p&gt;
                  If this constitutes a change in the selected item,
                  &lt;code&gt;ItemListener&lt;/code&gt;s added to the combo box will be notified with
                  one or two &lt;code&gt;ItemEvent&lt;/code&gt;s.
                  If there is a current selected item, an &lt;code&gt;ItemEvent&lt;/code&gt; will be
                  fired and the state change will be &lt;code&gt;ItemEvent.DESELECTED&lt;/code&gt;.
                  If &lt;code&gt;anObject&lt;/code&gt; is in the list and is not currently selected
                  then an &lt;code&gt;ItemEvent&lt;/code&gt; will be fired and the state change will
                  be &lt;code&gt;ItemEvent.SELECTED&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;ActionListener&lt;/code&gt;s added to the combo box will be notified
                  with an &lt;code&gt;ActionEvent&lt;/code&gt; when this method is called.                
                <param>
                    anObject  the list object to select; use <code>null</code> to
                      clear the selection                    
                </param>
                <beaninfo>
                    preferred:   true
                      description: Sets the selected item in the JComboBox.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectedItem" type="void" line="553">
                <params>
                    <param name="anObject" type="Object"/>
                </params>
                <comment line="560">
                    For non editable combo boxes, an invalid selection
                     will be rejected.                    
                </comment>
                <comment line="576">
                    Must toggle the state of this flag since this method
                     call may result in ListDataEvents being fired.                    
                </comment>
                <comment line="583">
                    in case a users implementation of ComboBoxModel
                     doesn&apos;t fire a ListDataEvent when the selection
                     changes.                    
                </comment>
                <declaration name="oldSelection" type="Object" line="554"/>
                <declaration name="objectToSelect" type="Object" line="555"/>
                <scope line="556">
                    <scope line="558">
                        <declaration name="found" type="boolean" line="561"/>
                        <scope line="562">
                            <declaration name="element" type="E" line="563"/>
                            <scope line="564"/>
                        </scope>
                        <scope line="570"/>
                    </scope>
                    <scope line="581"/>
                </scope>
            </method>
            <javadoc line="591">
                Returns the current selected item.
                  &lt;p&gt;
                  If the combo box is editable, then this value may not have been added
                  to the combo box with &lt;code&gt;addItem&lt;/code&gt;, &lt;code&gt;insertItemAt&lt;/code&gt;
                  or the data constructors.                
                <return>
                    the current selected Object                    
                </return>
                <see>
                    #setSelectedItem                    
                </see>
            </javadoc>
            <method name="getSelectedItem" type="Object" line="601"/>
            <javadoc line="605">
                Selects the item at index &lt;code&gt;anIndex&lt;/code&gt;.                
                <param>
                    anIndex an integer specifying the list item to select,
                      where 0 specifies the first item in the list and -1 indicates no selection                    
                </param>
                <exception>
                    IllegalArgumentException if <code>anIndex</code> < -1 or
                      <code>anIndex</code> is greater than or equal to size                    
                </exception>
                <beaninfo>
                    preferred: true
                      description: The item at index is selected.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectedIndex" type="void" line="616">
                <params>
                    <param name="anIndex" type="int"/>
                </params>
                <declaration name="size" type="int" line="617"/>
                <scope line="619"/>
                <scope line="621"/>
                <scope line="623"/>
            </method>
            <javadoc line="628">
                Returns the first item in the list that matches the given item.
                  The result is not always defined if the &lt;code&gt;JComboBox&lt;/code&gt;
                  allows selected items that are not in the list.
                  Returns -1 if there is no selected item or if the user specified
                  an item which is not in the list.                
                <return>
                    an integer specifying the currently selected list item,
                      where 0 specifies
                      the first item in the list;
                      or -1 if no item is selected or if
                      the currently selected item is not in the list                    
                </return>
            </javadoc>
            <method name="getSelectedIndex" type="int" line="642">
                <declaration name="sObject" type="Object" line="643"/>
                <declaration name="i" type="int" line="644"/>
                <declaration name="obj" type="E" line="645"/>
                <scope line="647"/>
            </method>
            <javadoc line="655">
                Returns the &quot;prototypical display&quot; value - an Object used
                  for the calculation of the display height and width.                
                <return>
                    the value of the <code>prototypeDisplayValue</code> property                    
                </return>
                <see>
                    #setPrototypeDisplayValue                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPrototypeDisplayValue" type="E" line="663"/>
            <javadoc line="667">
                Sets the prototype display value used to calculate the size of the display
                  for the UI portion.
                  &lt;p&gt;
                  If a prototype display value is specified, the preferred size of
                  the combo box is calculated by configuring the renderer with the
                  prototype display value and obtaining its preferred size. Specifying
                  the preferred display value is often useful when the combo box will be
                  displaying large amounts of data. If no prototype display value has
                  been specified, the renderer must be configured for each value from
                  the model and its preferred size obtained, which can be
                  relatively expensive.                
                <param>
                    prototypeDisplayValue                    
                </param>
                <see>
                    #getPrototypeDisplayValue                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The display prototype value, used to compute display width and height.                    
                </beaninfo>
            </javadoc>
            <method name="setPrototypeDisplayValue" type="void" line="688">
                <params>
                    <param name="prototypeDisplayValue" type="E"/>
                </params>
                <declaration name="oldValue" type="Object" line="689"/>
            </method>
            <javadoc line="694">
                Adds an item to the item list.
                  This method works only if the &lt;code&gt;JComboBox&lt;/code&gt; uses a
                  mutable data model.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Focus and keyboard navigation problems may arise if you add duplicate
                  String objects. A workaround is to add new objects instead of String
                  objects and make sure that the toString() method is defined.
                  For example:
                  &lt;pre&gt;
                  comboBox.addItem(makeObj(&quot;Item 1&quot;));
                  comboBox.addItem(makeObj(&quot;Item 1&quot;));
                  ...
                  private Object makeObj(final String item)  {
                  return new Object() { public String toString() { return item; } };
                  }
                  &lt;/pre&gt;                
                <param>
                    item the item to add to the list                    
                </param>
                <see>
                    MutableComboBoxModel                    
                </see>
            </javadoc>
            <method name="addItem" type="void" line="716">
                <params>
                    <param name="item" type="E"/>
                </params>
            </method>
            <javadoc line="721">
                Inserts an item into the item list at a given index.
                  This method works only if the &lt;code&gt;JComboBox&lt;/code&gt; uses a
                  mutable data model.                
                <param>
                    item the item to add to the list                    
                </param>
                <param>
                    index    an integer specifying the position at which
                      to add the item                    
                </param>
                <see>
                    MutableComboBoxModel                    
                </see>
            </javadoc>
            <method name="insertItemAt" type="void" line="731">
                <params>
                    <param name="item" type="E"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="736">
                Removes an item from the item list.
                  This method works only if the &lt;code&gt;JComboBox&lt;/code&gt; uses a
                  mutable data model.                
                <param>
                    anObject  the object to remove from the item list                    
                </param>
                <see>
                    MutableComboBoxModel                    
                </see>
            </javadoc>
            <method name="removeItem" type="void" line="744">
                <params>
                    <param name="anObject" type="Object"/>
                </params>
            </method>
            <javadoc line="749">
                Removes the item at &lt;code&gt;anIndex&lt;/code&gt;
                  This method works only if the &lt;code&gt;JComboBox&lt;/code&gt; uses a
                  mutable data model.                
                <param>
                    anIndex  an int specifying the index of the item to remove,
                      where 0
                      indicates the first item in the list                    
                </param>
                <see>
                    MutableComboBoxModel                    
                </see>
            </javadoc>
            <method name="removeItemAt" type="void" line="759">
                <params>
                    <param name="anIndex" type="int"/>
                </params>
            </method>
            <javadoc line="764">
                Removes all items from the item list.                
            </javadoc>
            <method name="removeAllItems" type="void" line="767">
                <declaration name="model" type="MutableComboBoxModel&lt;E&gt;" line="769"/>
                <declaration name="size" type="int" line="770"/>
                <scope line="772"/>
                <scope line="775">
                    <scope line="776">
                        <declaration name="element" type="E" line="777"/>
                    </scope>
                </scope>
                <scope line="782"/>
            </method>
            <javadoc line="787">
                Checks that the &lt;code&gt;dataModel&lt;/code&gt; is an instance of
                  &lt;code&gt;MutableComboBoxModel&lt;/code&gt;.  If not, it throws an exception.                
                <exception>
                    RuntimeException if <code>dataModel</code> is not an
                      instance of <code>MutableComboBoxModel</code>.                    
                </exception>
            </javadoc>
            <method name="checkMutableComboBoxModel" type="void" line="793"/>
            <javadoc line="798">
                Causes the combo box to display its popup window.                
                <see>
                    #setPopupVisible                    
                </see>
            </javadoc>
            <method name="showPopup" type="void" line="802"/>
            <javadoc line="806">
                Causes the combo box to close its popup window.                
                <see>
                    #setPopupVisible                    
                </see>
            </javadoc>
            <method name="hidePopup" type="void" line="810"/>
            <javadoc line="814">
                Sets the visibility of the popup.                
            </javadoc>
            <method name="setPopupVisible" type="void" line="817">
                <params>
                    <param name="v" type="boolean"/>
                </params>
            </method>
            <javadoc line="821">
                Determines the visibility of the popup.                
                <return>
                    true if the popup is visible, otherwise returns false                    
                </return>
            </javadoc>
            <method name="isPopupVisible" type="boolean" line="826"/>
            <javadoc line="832">
                Adds an &lt;code&gt;ItemListener&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;aListener&lt;/code&gt; will receive one or two &lt;code&gt;ItemEvent&lt;/code&gt;s when
                  the selected item changes.                
                <param>
                    aListener the <code>ItemListener</code> that is to be notified                    
                </param>
                <see>
                    #setSelectedItem                    
                </see>
            </javadoc>
            <method name="addItemListener" type="void" line="841">
                <params>
                    <param name="aListener" type="ItemListener"/>
                </params>
            </method>
            <javadoc line="845">
                Removes an &lt;code&gt;ItemListener&lt;/code&gt;.                
                <param>
                    aListener  the <code>ItemListener</code> to remove                    
                </param>
            </javadoc>
            <method name="removeItemListener" type="void" line="849">
                <params>
                    <param name="aListener" type="ItemListener"/>
                </params>
            </method>
            <javadoc line="853">
                Returns an array of all the &lt;code&gt;ItemListener&lt;/code&gt;s added
                  to this JComboBox with addItemListener().                
                <return>
                    all of the <code>ItemListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="861"/>
            <javadoc line="865">
                Adds an &lt;code&gt;ActionListener&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;ActionListener&lt;/code&gt; will receive an &lt;code&gt;ActionEvent&lt;/code&gt;
                  when a selection has been made. If the combo box is editable, then
                  an &lt;code&gt;ActionEvent&lt;/code&gt; will be fired when editing has stopped.                
                <param>
                    l  the <code>ActionListener</code> that is to be notified                    
                </param>
                <see>
                    #setSelectedItem                    
                </see>
            </javadoc>
            <method name="addActionListener" type="void" line="875">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="879">
                Removes an &lt;code&gt;ActionListener&lt;/code&gt;.                
                <param>
                    l  the <code>ActionListener</code> to remove                    
                </param>
            </javadoc>
            <method name="removeActionListener" type="void" line="883">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="884"/>
                <scope line="886"/>
            </method>
            <javadoc line="891">
                Returns an array of all the &lt;code&gt;ActionListener&lt;/code&gt;s added
                  to this JComboBox with addActionListener().                
                <return>
                    all of the <code>ActionListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="899"/>
            <javadoc line="903">
                Adds a &lt;code&gt;PopupMenu&lt;/code&gt; listener which will listen to notification
                  messages from the popup portion of the combo box.
                  &lt;p&gt;
                  For all standard look and feels shipped with Java, the popup list
                  portion of combo box is implemented as a &lt;code&gt;JPopupMenu&lt;/code&gt;.
                  A custom look and feel may not implement it this way and will
                  therefore not receive the notification.                
                <param>
                    l  the <code>PopupMenuListener</code> to add                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addPopupMenuListener" type="void" line="915">
                <params>
                    <param name="l" type="PopupMenuListener"/>
                </params>
            </method>
            <javadoc line="919">
                Removes a &lt;code&gt;PopupMenuListener&lt;/code&gt;.                
                <param>
                    l  the <code>PopupMenuListener</code> to remove                    
                </param>
                <see>
                    #addPopupMenuListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removePopupMenuListener" type="void" line="926">
                <params>
                    <param name="l" type="PopupMenuListener"/>
                </params>
            </method>
            <javadoc line="930">
                Returns an array of all the &lt;code&gt;PopupMenuListener&lt;/code&gt;s added
                  to this JComboBox with addPopupMenuListener().                
                <return>
                    all of the <code>PopupMenuListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPopupMenuListeners" type="PopupMenuListener[]" line="938"/>
            <javadoc line="942">
                Notifies &lt;code&gt;PopupMenuListener&lt;/code&gt;s that the popup portion of the
                  combo box will become visible.
                  &lt;p&gt;
                  This method is public but should not be called by anything other than
                  the UI delegate.                
                <see>
                    #addPopupMenuListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="firePopupMenuWillBecomeVisible" type="void" line="951">
                <declaration name="listeners" type="Object[]" line="952"/>
                <declaration name="e" type="PopupMenuEvent" line="953"/>
                <scope line="954">
                    <scope line="955"/>
                </scope>
            </method>
            <javadoc line="963">
                Notifies &lt;code&gt;PopupMenuListener&lt;/code&gt;s that the popup portion of the
                  combo box has become invisible.
                  &lt;p&gt;
                  This method is public but should not be called by anything other than
                  the UI delegate.                
                <see>
                    #addPopupMenuListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="firePopupMenuWillBecomeInvisible" type="void" line="972">
                <declaration name="listeners" type="Object[]" line="973"/>
                <declaration name="e" type="PopupMenuEvent" line="974"/>
                <scope line="975">
                    <scope line="976"/>
                </scope>
            </method>
            <javadoc line="984">
                Notifies &lt;code&gt;PopupMenuListener&lt;/code&gt;s that the popup portion of the
                  combo box has been canceled.
                  &lt;p&gt;
                  This method is public but should not be called by anything other than
                  the UI delegate.                
                <see>
                    #addPopupMenuListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="firePopupMenuCanceled" type="void" line="993">
                <declaration name="listeners" type="Object[]" line="994"/>
                <declaration name="e" type="PopupMenuEvent" line="995"/>
                <scope line="996">
                    <scope line="997"/>
                </scope>
            </method>
            <javadoc line="1005">
                Sets the action command that should be included in the event
                  sent to action listeners.                
                <param>
                    aCommand  a string containing the "command" that is sent
                      to action listeners; the same listener can then
                      do different things depending on the command it
                      receives                    
                </param>
            </javadoc>
            <method name="setActionCommand" type="void" line="1014">
                <params>
                    <param name="aCommand" type="String"/>
                </params>
            </method>
            <javadoc line="1018">
                Returns the action command that is included in the event sent to
                  action listeners.                
                <return>
                    the string containing the "command" that is sent
                      to action listeners.                    
                </return>
            </javadoc>
            <method name="getActionCommand" type="String" line="1025"/>
            <declaration name="action" type="Action" line="1029"/>
            <declaration name="actionPropertyChangeListener" type="PropertyChangeListener" line="1030"/>
            <javadoc line="1032">
                Sets the &lt;code&gt;Action&lt;/code&gt; for the &lt;code&gt;ActionEvent&lt;/code&gt; source.
                  The new &lt;code&gt;Action&lt;/code&gt; replaces any previously set
                  &lt;code&gt;Action&lt;/code&gt; but does not affect &lt;code&gt;ActionListeners&lt;/code&gt;
                  independently added with &lt;code&gt;addActionListener&lt;/code&gt;.
                  If the &lt;code&gt;Action&lt;/code&gt; is already a registered
                  &lt;code&gt;ActionListener&lt;/code&gt; for the &lt;code&gt;ActionEvent&lt;/code&gt; source,
                  it is not re-registered.
                  &lt;p&gt;
                  Setting the &lt;code&gt;Action&lt;/code&gt; results in immediately changing
                  all the properties described in &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;.
                  Subsequently, the combobox&apos;s properties are automatically updated
                  as the &lt;code&gt;Action&lt;/code&gt;&apos;s properties change.
                  &lt;p&gt;
                  This method uses three other methods to set
                  and help track the &lt;code&gt;Action&lt;/code&gt;&apos;s property values.
                  It uses the &lt;code&gt;configurePropertiesFromAction&lt;/code&gt; method
                  to immediately change the combobox&apos;s properties.
                  To track changes in the &lt;code&gt;Action&lt;/code&gt;&apos;s property values,
                  this method registers the &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                  returned by &lt;code&gt;createActionPropertyChangeListener&lt;/code&gt;. The
                  default {@code PropertyChangeListener} invokes the{@code actionPropertyChanged} method when a property in the{@code Action} changes.                
                <param>
                    a the <code>Action</code> for the <code>JComboBox</code>,
                      or <code>null</code>.                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #getAction                    
                </see>
                <see>
                    #configurePropertiesFromAction                    
                </see>
                <see>
                    #createActionPropertyChangeListener                    
                </see>
                <see>
                    #actionPropertyChanged                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the Action instance connected with this ActionEvent source                    
                </beaninfo>
            </javadoc>
            <method name="setAction" type="void" line="1071">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <comment line="1083">
                    Don&apos;t add if it is already a listener                    
                </comment>
                <comment line="1087">
                    Reverse linkage:                    
                </comment>
                <declaration name="oldValue" type="Action" line="1072"/>
                <scope line="1073">
                    <scope line="1075"/>
                    <scope line="1081">
                        <scope line="1083"/>
                    </scope>
                </scope>
            </method>
            <method name="isListener" type="boolean" line="1094">
                <params>
                    <param name="c" type="Class"/>
                    <param name="a" type="ActionListener"/>
                </params>
                <declaration name="isListener" type="boolean" line="1095"/>
                <declaration name="listeners" type="Object[]" line="1096"/>
                <scope line="1097">
                    <scope line="1098"/>
                </scope>
            </method>
            <javadoc line="1105">
                Returns the currently set &lt;code&gt;Action&lt;/code&gt; for this
                  &lt;code&gt;ActionEvent&lt;/code&gt; source, or &lt;code&gt;null&lt;/code&gt; if no
                  &lt;code&gt;Action&lt;/code&gt; is set.                
                <return>
                    the <code>Action</code> for this <code>ActionEvent</code>
                      source; or <code>null</code>                    
                </return>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="getAction" type="Action" line="1116"/>
            <javadoc line="1120">
                Sets the properties on this combobox to match those in the specified
                  &lt;code&gt;Action&lt;/code&gt;.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details as to which properties this sets.                
                <param>
                    a the <code>Action</code> from which to get the properties,
                      or <code>null</code>                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="configurePropertiesFromAction" type="void" line="1132">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="1138">
                Creates and returns a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that is
                  responsible for listening for changes from the specified
                  &lt;code&gt;Action&lt;/code&gt; and updating the appropriate properties.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; If you subclass this do not create an anonymous
                  inner class.  If you do the lifetime of the combobox will be tied to
                  that of the &lt;code&gt;Action&lt;/code&gt;.                
                <param>
                    a the combobox's action                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="createActionPropertyChangeListener" type="PropertyChangeListener" line="1152">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="1156">
                Updates the combobox&apos;s state in response to property changes in
                  associated action. This method is invoked from the{@code PropertyChangeListener} returned from{@code createActionPropertyChangeListener}. Subclasses do not normally
                  need to invoke this. Subclasses that support additional {@code Action}properties should override this and{@code configurePropertiesFromAction}.
                  &lt;p&gt;
                  Refer to the table at &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for a list of
                  the properties this method sets.                
                <param>
                    action the <code>Action</code> associated with this combobox                    
                </param>
                <param>
                    propertyName the name of the property that changed                    
                </param>
                <since>
                    1.6                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #configurePropertiesFromAction                    
                </see>
            </javadoc>
            <method name="actionPropertyChanged" type="void" line="1175">
                <params>
                    <param name="action" type="Action"/>
                    <param name="propertyName" type="String"/>
                </params>
                <scope line="1176"/>
                <scope line="1178"/>
                <scope line="1180"/>
            </method>
            <method name="setActionCommandFromAction" type="void" line="1185">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <class name="ComboBoxActionPropertyChangeListener" line="1192">
                <extends class="ActionPropertyChangeListener">
                    <type_params>
                        <type_param name="JComboBox<?>"/>
                    </type_params>
                </extends>
                <comment line="1622">
                    combo box popup list                    
                </comment>
                <comment line="1647">
                    JComboBox PropertyChangeListener                    
                </comment>
                <comment line="1662">
                    Sets the combo box editor&apos;s accessible name and descripton                    
                </comment>
                <comment line="1679">
                    Listener for combo box popup menu
                     TIGER - 4669379 4894434                    
                </comment>
                <comment line="1718">
                    Handles changes to the popup list selection.
                     TIGER - 4669379 4894434 4933143                    
                </comment>
                <comment line="2024">
                    public Accessible getAccessibleAt(Point p) {
                                Accessible a = getAccessibleChild(1);
                                if ( a != null ) {
                                    return a;  the editor
                                }
                                else {
                                    return getAccessibleChild(0);  the list
                                }
                            }                    
                </comment>
                <comment line="2048">
                    Wrapper class for the AccessibleContext implemented by the
                     combo box editor.  Delegates all method calls except
                     getAccessibleIndexInParent to the editor.  The
                     getAccessibleIndexInParent method returns the selected
                     index in the combo box.                    
                </comment>
                <method name="ComboBoxActionPropertyChangeListener" type="constructor" line="1194">
                    <params>
                        <param name="b" type="JComboBox<?>"/>
                        <param name="a" type="Action"/>
                    </params>
                </method>
                <method name="actionPropertyChanged" type="void" line="1199">
                    <params>
                        <param name="cb" type="JComboBox<?>"/>
                        <param name="action" type="Action"/>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="1200"/>
                    <scope line="1202"/>
                </method>
            </class>
            <javadoc line="1208">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    e  the event of interest                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireItemStateChanged" type="void" line="1215">
                <params>
                    <param name="e" type="ItemEvent"/>
                </params>
                <comment line="1217">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1219">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="1223">
                    Lazily create the event:
                     if (changeEvent == null)
                     changeEvent = new ChangeEvent(this);                    
                </comment>
                <declaration name="listeners" type="Object[]" line="1217"/>
                <scope line="1220">
                    <scope line="1221"/>
                </scope>
            </method>
            <javadoc line="1230">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireActionEvent" type="void" line="1236">
                <comment line="1239">
                    Set flag to ensure that an infinite loop is not created                    
                </comment>
                <comment line="1242">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1252">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="1256">
                    Lazily create the event:                    
                </comment>
                <scope line="1237">
                    <declaration name="e" type="ActionEvent" line="1240"/>
                    <declaration name="listeners" type="Object[]" line="1242"/>
                    <declaration name="mostRecentEventTime" type="long" line="1243"/>
                    <declaration name="modifiers" type="int" line="1244"/>
                    <declaration name="currentEvent" type="AWTEvent" line="1245"/>
                    <scope line="1246"/>
                    <scope line="1248"/>
                    <scope line="1253">
                        <scope line="1254"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1267">
                This protected method is implementation specific. Do not access directly
                  or override.                
            </javadoc>
            <method name="selectedItemChanged" type="void" line="1271">
                <comment line="1279">
                    set the new selected item.                    
                </comment>
                <scope line="1272"/>
                <scope line="1281"/>
            </method>
            <javadoc line="1288">
                Returns an array containing the selected item.
                  This method is implemented for compatibility with
                  &lt;code&gt;ItemSelectable&lt;/code&gt;.                
                <return>
                    an array of <code>Objects</code> containing one
                      element -- the selected item                    
                </return>
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="1296">
                <declaration name="selectedObject" type="Object" line="1297"/>
                <scope line="1300">
                    <declaration name="result" type="Object" line="1301"/>
                </scope>
            </method>
            <javadoc line="1307">
                This method is public as an implementation side effect.
                  do not call or override.                
            </javadoc>
            <method name="actionPerformed" type="void" line="1311">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <declaration name="newItem" type="Object" line="1312"/>
                <declaration name="oldCommand" type="String" line="1315"/>
            </method>
            <javadoc line="1321">
                This method is public as an implementation side effect.
                  do not call or override.                
            </javadoc>
            <method name="contentsChanged" type="void" line="1325">
                <params>
                    <param name="e" type="ListDataEvent"/>
                </params>
                <declaration name="oldSelection" type="Object" line="1326"/>
                <declaration name="newSelection" type="Object" line="1327"/>
                <scope line="1328">
                    <scope line="1330"/>
                </scope>
            </method>
            <javadoc line="1336">
                This method is public as an implementation side effect.
                  do not call or override.                
            </javadoc>
            <method name="intervalAdded" type="void" line="1340">
                <params>
                    <param name="e" type="ListDataEvent"/>
                </params>
                <scope line="1341"/>
            </method>
            <javadoc line="1346">
                This method is public as an implementation side effect.
                  do not call or override.                
            </javadoc>
            <method name="intervalRemoved" type="void" line="1350">
                <params>
                    <param name="e" type="ListDataEvent"/>
                </params>
            </method>
            <javadoc line="1354">
                Selects the list item that corresponds to the specified keyboard
                  character and returns true, if there is an item corresponding
                  to that character.  Otherwise, returns false.                
                <param>
                    keyChar a char, typically this is a keyboard key
                      typed by the user                    
                </param>
            </javadoc>
            <method name="selectWithKeyChar" type="boolean" line="1362">
                <params>
                    <param name="keyChar" type="char"/>
                </params>
                <declaration name="index" type="int" line="1363"/>
                <scope line="1369"/>
            </method>
            <javadoc line="1377">
                Enables the combo box so that items can be selected. When the
                  combo box is disabled, items cannot be selected and values
                  cannot be typed into its field (if it is editable).                
                <param>
                    b a boolean value, where true enables the component and
                      false disables it                    
                </param>
                <beaninfo>
                    bound: true
                      preferred: true
                      description: Whether the combo box is enabled.                    
                </beaninfo>
            </javadoc>
            <method name="setEnabled" type="void" line="1389">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="1394">
                Initializes the editor with the specified item.                
                <param>
                    anEditor the <code>ComboBoxEditor</code> that displays
                      the list item in the
                      combo box field and allows it to be edited                    
                </param>
                <param>
                    anItem   the object to display and edit in the field                    
                </param>
            </javadoc>
            <method name="configureEditor" type="void" line="1402">
                <params>
                    <param name="anEditor" type="ComboBoxEditor"/>
                    <param name="anItem" type="Object"/>
                </params>
            </method>
            <javadoc line="1406">
                Handles &lt;code&gt;KeyEvent&lt;/code&gt;s, looking for the Tab key.
                  If the Tab key is found, the popup window is closed.                
                <param>
                    e  the <code>KeyEvent</code> containing the keyboard
                      key that was pressed                    
                </param>
            </javadoc>
            <method name="processKeyEvent" type="void" line="1413">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <scope line="1414"/>
            </method>
            <javadoc line="1420">
                Sets the object that translates a keyboard character into a list
                  selection. Typically, the first selection with a matching first
                  character becomes the selected item.                
                <beaninfo>
                    expert: true
                      description: The objects that changes the selection when a key is pressed.                    
                </beaninfo>
            </javadoc>
            <method name="setKeySelectionManager" type="void" line="1429">
                <params>
                    <param name="aManager" type="KeySelectionManager"/>
                </params>
            </method>
            <javadoc line="1433">
                Returns the list&apos;s key-selection manager.                
                <return>
                    the <code>KeySelectionManager</code> currently in use                    
                </return>
            </javadoc>
            <method name="getKeySelectionManager" type="KeySelectionManager" line="1438"/>
            <javadoc line="1443">
                Returns the number of items in the list.                
                <return>
                    an integer equal to the number of items in the list                    
                </return>
            </javadoc>
            <method name="getItemCount" type="int" line="1448"/>
            <javadoc line="1452">
                Returns the list item at the specified index.  If &lt;code&gt;index&lt;/code&gt;
                  is out of range (less than zero or greater than or equal to size)
                  it will return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    index  an integer indicating the list position, where the first
                      item starts at zero                    
                </param>
                <return>
                    the item at that list position; or
                      <code>null</code> if out of range                    
                </return>
            </javadoc>
            <method name="getItemAt" type="E" line="1462">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="1466">
                Returns an instance of the default key-selection manager.                
                <return>
                    the <code>KeySelectionManager</code> currently used by the list                    
                </return>
                <see>
                    #setKeySelectionManager                    
                </see>
            </javadoc>
            <method name="createDefaultKeySelectionManager" type="KeySelectionManager" line="1472"/>
            <interface name="KeySelectionManager">
                <comment line="1622">
                    combo box popup list                    
                </comment>
                <comment line="1647">
                    JComboBox PropertyChangeListener                    
                </comment>
                <comment line="1662">
                    Sets the combo box editor&apos;s accessible name and descripton                    
                </comment>
                <comment line="1679">
                    Listener for combo box popup menu
                     TIGER - 4669379 4894434                    
                </comment>
                <comment line="1718">
                    Handles changes to the popup list selection.
                     TIGER - 4669379 4894434 4933143                    
                </comment>
                <comment line="2024">
                    public Accessible getAccessibleAt(Point p) {
                                Accessible a = getAccessibleChild(1);
                                if ( a != null ) {
                                    return a;  the editor
                                }
                                else {
                                    return getAccessibleChild(0);  the list
                                }
                            }                    
                </comment>
                <comment line="2048">
                    Wrapper class for the AccessibleContext implemented by the
                     combo box editor.  Delegates all method calls except
                     getAccessibleIndexInParent to the editor.  The
                     getAccessibleIndexInParent method returns the selected
                     index in the combo box.                    
                </comment>
                <javadoc line="1477">
                    The interface that defines a &lt;code&gt;KeySelectionManager&lt;/code&gt;.
                      To qualify as a &lt;code&gt;KeySelectionManager&lt;/code&gt;,
                      the class needs to implement the method
                      that identifies the list index given a character and the
                      combo box data model.                    
                </javadoc>
                <method name="selectionForKey" type="int" line="1485"/>
                <javadoc line="1485">
                    Given &lt;code&gt;aKey&lt;/code&gt; and the model, returns the row
                      that should become selected. Return -1 if no match was
                      found.                    
                    <param>
                        aKey  a char value, usually indicating a keyboard key that
                          was pressed                        
                    </param>
                    <param>
                        aModel a ComboBoxModel -- the component's data model, containing
                          the list of selectable items                        
                    </param>
                    <return>
                        an int equal to the selected row, where 0 is the
                          first item and -1 is none.                        
                    </return>
                </javadoc>
            </interface>
            <class name="DefaultKeySelectionManager" line="1499">
                <comment line="1622">
                    combo box popup list                    
                </comment>
                <comment line="1647">
                    JComboBox PropertyChangeListener                    
                </comment>
                <comment line="1662">
                    Sets the combo box editor&apos;s accessible name and descripton                    
                </comment>
                <comment line="1679">
                    Listener for combo box popup menu
                     TIGER - 4669379 4894434                    
                </comment>
                <comment line="1718">
                    Handles changes to the popup list selection.
                     TIGER - 4669379 4894434 4933143                    
                </comment>
                <comment line="2024">
                    public Accessible getAccessibleAt(Point p) {
                                Accessible a = getAccessibleChild(1);
                                if ( a != null ) {
                                    return a;  the editor
                                }
                                else {
                                    return getAccessibleChild(0);  the list
                                }
                            }                    
                </comment>
                <comment line="2048">
                    Wrapper class for the AccessibleContext implemented by the
                     combo box editor.  Delegates all method calls except
                     getAccessibleIndexInParent to the editor.  The
                     getAccessibleIndexInParent method returns the selected
                     index in the combo box.                    
                </comment>
                <implements interface="KeySelectionManager"/>
                <implements interface="Serializable"/>
                <method name="selectionForKey" type="int" line="1500">
                    <params>
                        <param name="aKey" type="char"/>
                        <param name="aModel" type="ComboBoxModel"/>
                    </params>
                    <declaration name="i" type="int" line="1501"/>
                    <declaration name="currentSelection" type="int" line="1502"/>
                    <declaration name="selectedItem" type="Object" line="1503"/>
                    <declaration name="v" type="String" line="1504"/>
                    <declaration name="pattern" type="String" line="1505"/>
                    <scope line="1507">
                        <scope line="1508">
                            <scope line="1509"/>
                        </scope>
                    </scope>
                    <scope line="1519">
                        <declaration name="elem" type="Object" line="1520"/>
                        <scope line="1521"/>
                    </scope>
                    <scope line="1528">
                        <declaration name="elem" type="Object" line="1529"/>
                        <scope line="1530"/>
                    </scope>
                </method>
            </class>
            <javadoc line="1541">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1546">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1548">
                    <declaration name="count" type="byte" line="1549"/>
                    <scope line="1551"/>
                </scope>
            </method>
            <javadoc line="1558">
                Returns a string representation of this &lt;code&gt;JComboBox&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes,
                  and the content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JComboBox</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1567">
                <declaration name="selectedItemReminderString" type="String" line="1568"/>
                <declaration name="isEditableString" type="String" line="1571"/>
                <declaration name="lightWeightPopupEnabledString" type="String" line="1572"/>
            </method>
            <javadoc line="1587">
                Gets the AccessibleContext associated with this JComboBox.
                  For combo boxes, the AccessibleContext takes the form of an
                  AccessibleJComboBox.
                  A new AccessibleJComboBox instance is created if necessary.                
                <return>
                    an AccessibleJComboBox that serves as the
                      AccessibleContext of this JComboBox                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1596">
                <scope line="1597"/>
            </method>
            <class name="AccessibleJComboBox" line="1603">
                <extends class="AccessibleJComponent"/>
                <comment line="1622">
                    combo box popup list                    
                </comment>
                <comment line="1647">
                    JComboBox PropertyChangeListener                    
                </comment>
                <comment line="1662">
                    Sets the combo box editor&apos;s accessible name and descripton                    
                </comment>
                <comment line="1679">
                    Listener for combo box popup menu
                     TIGER - 4669379 4894434                    
                </comment>
                <comment line="1718">
                    Handles changes to the popup list selection.
                     TIGER - 4669379 4894434 4933143                    
                </comment>
                <comment line="2024">
                    public Accessible getAccessibleAt(Point p) {
                                Accessible a = getAccessibleChild(1);
                                if ( a != null ) {
                                    return a;  the editor
                                }
                                else {
                                    return getAccessibleChild(0);  the list
                                }
                            }                    
                </comment>
                <comment line="2048">
                    Wrapper class for the AccessibleContext implemented by the
                     combo box editor.  Delegates all method calls except
                     getAccessibleIndexInParent to the editor.  The
                     getAccessibleIndexInParent method returns the selected
                     index in the combo box.                    
                </comment>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleSelection"/>
                <javadoc line="1603">
                    This class implements accessibility support for the
                      &lt;code&gt;JComboBox&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to Combo Box user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="popupList" type="JList" line="1621"/>
                <declaration name="previousSelectedAccessible" type="Accessible" line="1622"/>
                <javadoc line="1624">
                    Returns an AccessibleJComboBox instance                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="AccessibleJComboBox" type="constructor" line="1628">
                    <comment line="1630">
                        set the combo box editor&apos;s accessible name and description                        
                    </comment>
                    <comment line="1634">
                        Get the popup list                        
                    </comment>
                    <comment line="1637">
                        Listen for changes to the popup menu selection.                        
                    </comment>
                    <comment line="1642">
                        Listen for popup menu show/hide events                        
                    </comment>
                    <declaration name="a" type="Accessible" line="1634"/>
                    <scope line="1635"/>
                </method>
                <class name="AccessibleJComboBoxPropertyChangeListener" line="1649">
                    <comment line="2062">
                        @param a the AccessibleContext implemented by the
                         combo box editor                        
                    </comment>
                    <implements interface="PropertyChangeListener"/>
                    <method name="propertyChange" type="void" line="1652">
                        <params>
                            <param name="e" type="PropertyChangeEvent"/>
                        </params>
                        <comment line="1655">
                            set the combo box editor&apos;s accessible name
                             and description                            
                        </comment>
                        <scope line="1653"/>
                    </method>
                </class>
                <method name="setEditorNameAndDescription" type="void" line="1664">
                    <comment line="1671">
                        may be null                        
                    </comment>
                    <declaration name="editor" type="ComboBoxEditor" line="1665"/>
                    <scope line="1666">
                        <declaration name="comp" type="Component" line="1667"/>
                        <scope line="1668">
                            <declaration name="ac" type="AccessibleContext" line="1669"/>
                            <scope line="1670"/>
                        </scope>
                    </scope>
                </method>
                <class name="AccessibleJComboBoxPopupMenuListener" line="1682">
                    <comment line="2062">
                        @param a the AccessibleContext implemented by the
                         combo box editor                        
                    </comment>
                    <implements interface="PopupMenuListener"/>
                    <javadoc line="1685">
                        This method is called before the popup menu becomes visible                        
                    </javadoc>
                    <method name="popupMenuWillBecomeVisible" type="void" line="1688">
                        <params>
                            <param name="e" type="PopupMenuEvent"/>
                        </params>
                        <comment line="1690">
                            save the initial selection                            
                        </comment>
                        <scope line="1690"/>
                        <declaration name="selectedIndex" type="int" line="1693"/>
                        <scope line="1694"/>
                    </method>
                    <javadoc line="1701">
                        This method is called before the popup menu becomes invisible
                          Note that a JPopupMenu can become invisible any time                        
                    </javadoc>
                    <method name="popupMenuWillBecomeInvisible" type="void" line="1705">
                        <params>
                            <param name="e" type="PopupMenuEvent"/>
                        </params>
                        <comment line="1707">
                            ignore                            
                        </comment>
                    </method>
                    <javadoc line="1709">
                        This method is called when the popup menu is canceled                        
                    </javadoc>
                    <method name="popupMenuCanceled" type="void" line="1712">
                        <params>
                            <param name="e" type="PopupMenuEvent"/>
                        </params>
                        <comment line="1714">
                            ignore                            
                        </comment>
                    </method>
                </class>
                <class name="AccessibleJComboBoxListSelectionListener" line="1721">
                    <comment line="2062">
                        @param a the AccessibleContext implemented by the
                         combo box editor                        
                    </comment>
                    <implements interface="ListSelectionListener"/>
                    <method name="valueChanged" type="void" line="1724">
                        <params>
                            <param name="e" type="ListSelectionEvent"/>
                        </params>
                        <comment line="1730">
                            Get the selected popup list item.                            
                        </comment>
                        <comment line="1741">
                            Fire a FOCUSED lost PropertyChangeEvent for the
                             previously selected list item.                            
                        </comment>
                        <comment line="1752">
                            Fire a FOCUSED gained PropertyChangeEvent for the
                             currently selected list item.                            
                        </comment>
                        <comment line="1760">
                            Fire the ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY event
                             for the combo box.                            
                        </comment>
                        <comment line="1765">
                            Save the previous selection.                            
                        </comment>
                        <scope line="1725"/>
                        <declaration name="selectedIndex" type="int" line="1730"/>
                        <scope line="1731"/>
                        <declaration name="selectedAccessible" type="Accessible" line="1734"/>
                        <scope line="1736"/>
                        <declaration name="pce" type="PropertyChangeEvent" line="1742"/>
                        <scope line="1744"/>
                    </method>
                </class>
                <javadoc line="1770">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement Accessible, than this
                      method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="1777">
                    <comment line="1779">
                        Always delegate to the UI if it exists                        
                    </comment>
                    <scope line="1779"/>
                    <scope line="1781"/>
                </method>
                <javadoc line="1786">
                    Returns the nth Accessible child of the object.
                      The child at index zero represents the popup.
                      If the combo box is editable, the child at index one
                      represents the editor.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="1795">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1797">
                        Always delegate to the UI if it exists                        
                    </comment>
                    <scope line="1797"/>
                    <scope line="1799"/>
                </method>
                <javadoc line="1804">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1811"/>
                <javadoc line="1815">
                    Gets the state set of this object.  The AccessibleStateSet of
                      an object is composed of a set of unique AccessibleStates.
                      A change in the AccessibleStateSet of an object will cause a
                      PropertyChangeEvent to be fired for the ACCESSIBLE_STATE_PROPERTY
                      property.                    
                    <return>
                        an instance of AccessibleStateSet containing the
                          current state set of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                    <see>
                        AccessibleState                        
                    </see>
                    <see>
                        #addPropertyChangeListener                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1829">
                    <comment line="1831">
                        TIGER - 4489748                        
                    </comment>
                    <declaration name="ass" type="AccessibleStateSet" line="1831"/>
                    <scope line="1832"/>
                    <scope line="1835"/>
                    <scope line="1837"/>
                </method>
                <javadoc line="1843">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="1851"/>
                <javadoc line="1855">
                    Return a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="1860">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1861"/>
                    <scope line="1864"/>
                </method>
                <javadoc line="1869">
                    Returns the number of Actions available in this object.  The
                      default behavior of a combo box is to have one action.                    
                    <return>
                        1, the number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="1875"/>
                <javadoc line="1879">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the the action was performed; else false.                        
                    </return>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="1885">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1886"/>
                    <scope line="1890"/>
                </method>
                <javadoc line="1896">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="1904"/>
                <javadoc line="1908">
                    Returns the number of Accessible children currently selected.
                      If no children are selected, the return value will be 0.                    
                    <return>
                        the number of items currently selected.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="1915">
                    <declaration name="o" type="Object" line="1916"/>
                    <scope line="1917"/>
                    <scope line="1919"/>
                </method>
                <javadoc line="1924">
                    Returns an Accessible representing the specified selected child
                      in the popup.  If there isn&apos;t a selection, or there are
                      fewer children selected than the integer passed in, the return
                      value will be null.
                      &lt;p&gt;Note that the index represents the i-th selected child, which
                      is different from the i-th child.                    
                    <param>
                        i the zero-based index of selected children                        
                    </param>
                    <return>
                        the i-th selected child                        
                    </return>
                    <see>
                        #getAccessibleSelectionCount                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="1937">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1939">
                        Get the popup                        
                    </comment>
                    <comment line="1945">
                        get the popup list                        
                    </comment>
                    <comment line="1948">
                        return the i-th selection in the popup list                        
                    </comment>
                    <declaration name="a" type="Accessible" line="1939"/>
                    <scope line="1942">
                        <declaration name="list" type="JList" line="1945"/>
                        <declaration name="ac" type="AccessibleContext" line="1948"/>
                        <scope line="1949">
                            <declaration name="as" type="AccessibleSelection" line="1950"/>
                            <scope line="1951"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1959">
                    Determines if the current child of this object is selected.                    
                    <return>
                        true if the current child of this object is selected;
                          else false                        
                    </return>
                    <param>
                        i the zero-based index of the child in this Accessible
                          object.                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="1969">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="1973">
                    Adds the specified Accessible child of the object to the object&apos;s
                      selection.  If the object supports multiple selections,
                      the specified child is added to any existing selection, otherwise
                      it replaces any existing selection in the object.  If the
                      specified child is already selected, this method has no effect.                    
                    <param>
                        i the zero-based index of the child                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="1984">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="1986">
                        TIGER - 4856195                        
                    </comment>
                </method>
                <javadoc line="1990">
                    Removes the specified child of the object from the object&apos;s
                      selection.  If the specified item isn&apos;t currently selected, this
                      method has no effect.                    
                    <param>
                        i the zero-based index of the child                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="1999">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="2000"/>
                </method>
                <javadoc line="2005">
                    Clears the selection in the object, so that no children in the
                      object are selected.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="2010"/>
                <javadoc line="2014">
                    Causes every child of the object to be selected
                      if the object supports multiple selections.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="2019">
                    <comment line="2021">
                        do nothing since multiple selection is not supported                        
                    </comment>
                </method>
                <declaration name="editorAccessibleContext" type="EditorAccessibleContext" line="2032"/>
                <class name="AccessibleEditor" line="2034">
                    <comment line="2062">
                        @param a the AccessibleContext implemented by the
                         combo box editor                        
                    </comment>
                    <implements interface="Accessible"/>
                    <method name="getAccessibleContext" type="AccessibleContext" line="2035">
                        <scope line="2036">
                            <declaration name="c" type="Component" line="2037"/>
                            <scope line="2038"/>
                        </scope>
                    </method>
                </class>
                <class name="EditorAccessibleContext" line="2054">
                    <extends class="AccessibleContext"/>
                    <comment line="2062">
                        @param a the AccessibleContext implemented by the
                         combo box editor                        
                    </comment>
                    <declaration name="ac" type="AccessibleContext" line="2056"/>
                    <method name="EditorAccessibleContext" type="constructor" line="2058"/>
                    <method name="EditorAccessibleContext" type="constructor" line="2065">
                        <params>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="2069">
                        Gets the accessibleName property of this object.  The accessibleName
                          property of an object is a localized String that designates the purpose
                          of the object.  For example, the accessibleName property of a label
                          or button might be the text of the label or button itself.  In the
                          case of an object that doesn&apos;t display its name, the accessibleName
                          should still be set.  For example, in the case of a text field used
                          to enter the name of a city, the accessibleName for the en_US locale
                          could be &apos;city.&apos;                        
                        <return>
                            the localized name of the object; null if this
                              object does not have a name                            
                        </return>
                        <see>
                            #setAccessibleName                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="2084"/>
                    <javadoc line="2088">
                        Sets the localized accessible name of this object.  Changing the
                          name will cause a PropertyChangeEvent to be fired for the
                          ACCESSIBLE_NAME_PROPERTY property.                        
                        <param>
                            s the new localized name of the object.                            
                        </param>
                        <see>
                            #getAccessibleName                            
                        </see>
                        <see>
                            #addPropertyChangeListener                            
                        </see>
                        <beaninfo>
                            preferred:   true
                              description: Sets the accessible name for the component.                            
                        </beaninfo>
                    </javadoc>
                    <method name="setAccessibleName" type="void" line="2102">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                    </method>
                    <javadoc line="2106">
                        Gets the accessibleDescription property of this object.  The
                          accessibleDescription property of this object is a short localized
                          phrase describing the purpose of the object.  For example, in the
                          case of a &apos;Cancel&apos; button, the accessibleDescription could be
                          &apos;Ignore changes and close dialog box.&apos;                        
                        <return>
                            the localized description of the object; null if
                              this object does not have a description                            
                        </return>
                        <see>
                            #setAccessibleDescription                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="2118"/>
                    <javadoc line="2122">
                        Sets the accessible description of this object.  Changing the
                          name will cause a PropertyChangeEvent to be fired for the
                          ACCESSIBLE_DESCRIPTION_PROPERTY property.                        
                        <param>
                            s the new localized description of the object                            
                        </param>
                        <see>
                            #setAccessibleName                            
                        </see>
                        <see>
                            #addPropertyChangeListener                            
                        </see>
                        <beaninfo>
                            preferred:   true
                              description: Sets the accessible description for the component.                            
                        </beaninfo>
                    </javadoc>
                    <method name="setAccessibleDescription" type="void" line="2136">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                    </method>
                    <javadoc line="2140">
                        Gets the role of this object.  The role of the object is the generic
                          purpose or use of the class of this object.  For example, the role
                          of a push button is AccessibleRole.PUSH_BUTTON.  The roles in
                          AccessibleRole are provided so component developers can pick from
                          a set of predefined roles.  This enables assistive technologies to
                          provide a consistent interface to various tweaked subclasses of
                          components (e.g., use AccessibleRole.PUSH_BUTTON for all components
                          that act like a push button) as well as distinguish between sublasses
                          that behave differently (e.g., AccessibleRole.CHECK_BOX for check boxes
                          and AccessibleRole.RADIO_BUTTON for radio buttons).
                          &lt;p&gt;Note that the AccessibleRole class is also extensible, so
                          custom component developers can define their own AccessibleRole&apos;s
                          if the set of predefined roles is inadequate.                        
                        <return>
                            an instance of AccessibleRole describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="2158"/>
                    <javadoc line="2162">
                        Gets the state set of this object.  The AccessibleStateSet of an object
                          is composed of a set of unique AccessibleStates.  A change in the
                          AccessibleStateSet of an object will cause a PropertyChangeEvent to
                          be fired for the ACCESSIBLE_STATE_PROPERTY property.                        
                        <return>
                            an instance of AccessibleStateSet containing the
                              current state set of the object                            
                        </return>
                        <see>
                            AccessibleStateSet                            
                        </see>
                        <see>
                            AccessibleState                            
                        </see>
                        <see>
                            #addPropertyChangeListener                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="2174"/>
                    <javadoc line="2178">
                        Gets the Accessible parent of this object.                        
                        <return>
                            the Accessible parent of this object; null if this
                              object does not have an Accessible parent                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleParent" type="Accessible" line="2184"/>
                    <javadoc line="2188">
                        Sets the Accessible parent of this object.  This is meant to be used
                          only in the situations where the actual component&apos;s parent should
                          not be treated as the component&apos;s accessible parent and is a method
                          that should only be called by the parent of the accessible child.                        
                        <param>
                            a - Accessible to be set as the parent                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleParent" type="void" line="2196">
                        <params>
                            <param name="a" type="Accessible"/>
                        </params>
                    </method>
                    <javadoc line="2200">
                        Gets the 0-based index of this object in its accessible parent.                        
                        <return>
                            the 0-based index of this object in its parent; -1 if this
                              object does not have an accessible parent.                            
                        </return>
                        <see>
                            #getAccessibleParent                            
                        </see>
                        <see>
                            #getAccessibleChildrenCount                            
                        </see>
                        <see>
                            #getAccessibleChild                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleIndexInParent" type="int" line="2210"/>
                    <javadoc line="2214">
                        Returns the number of accessible children of the object.                        
                        <return>
                            the number of accessible children of the object.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChildrenCount" type="int" line="2219"/>
                    <javadoc line="2223">
                        Returns the specified Accessible child of the object.  The Accessible
                          children of an Accessible object are zero-based, so the first child
                          of an Accessible child is at index 0, the second child is at index 1,
                          and so on.                        
                        <param>
                            i zero-based index of child                            
                        </param>
                        <return>
                            the Accessible child of the object                            
                        </return>
                        <see>
                            #getAccessibleChildrenCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleChild" type="Accessible" line="2233">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <javadoc line="2237">
                        Gets the locale of the component. If the component does not have a
                          locale, then the locale of its parent is returned.                        
                        <return>
                            this component's locale.  If this component does not have
                              a locale, the locale of its parent is returned.                            
                        </return>
                        <exception>
                            IllegalComponentStateExceptionIf the Component does not have its own locale and has not yet been
                              added to a containment hierarchy such that the locale can be
                              determined from the containing parent.                            
                        </exception>
                    </javadoc>
                    <method name="getLocale" type="Locale" line="2249"/>
                    <javadoc line="2253">
                        Adds a PropertyChangeListener to the listener list.
                          The listener is registered for all Accessible properties and will
                          be called when those properties change.                        
                        <see>
                            #ACCESSIBLE_NAME_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_DESCRIPTION_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_STATE_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_VALUE_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_SELECTION_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_TEXT_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_VISIBLE_DATA_PROPERTY                            
                        </see>
                        <param>
                            listener  The PropertyChangeListener to be added                            
                        </param>
                    </javadoc>
                    <method name="addPropertyChangeListener" type="void" line="2268">
                        <params>
                            <param name="listener" type="PropertyChangeListener"/>
                        </params>
                    </method>
                    <javadoc line="2272">
                        Removes a PropertyChangeListener from the listener list.
                          This removes a PropertyChangeListener that was registered
                          for all properties.                        
                        <param>
                            listener  The PropertyChangeListener to be removed                            
                        </param>
                    </javadoc>
                    <method name="removePropertyChangeListener" type="void" line="2279">
                        <params>
                            <param name="listener" type="PropertyChangeListener"/>
                        </params>
                    </method>
                    <javadoc line="2283">
                        Gets the AccessibleAction associated with this object that supports
                          one or more actions.                        
                        <return>
                            AccessibleAction if supported by object; else return null                            
                        </return>
                        <see>
                            AccessibleAction                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleAction" type="AccessibleAction" line="2290"/>
                    <javadoc line="2294">
                        Gets the AccessibleComponent associated with this object that has a
                          graphical representation.                        
                        <return>
                            AccessibleComponent if supported by object; else return null                            
                        </return>
                        <see>
                            AccessibleComponent                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleComponent" type="AccessibleComponent" line="2301"/>
                    <javadoc line="2305">
                        Gets the AccessibleSelection associated with this object which allows its
                          Accessible children to be selected.                        
                        <return>
                            AccessibleSelection if supported by object; else return null                            
                        </return>
                        <see>
                            AccessibleSelection                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleSelection" type="AccessibleSelection" line="2312"/>
                    <javadoc line="2316">
                        Gets the AccessibleText associated with this object presenting
                          text on the display.                        
                        <return>
                            AccessibleText if supported by object; else return null                            
                        </return>
                        <see>
                            AccessibleText                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleText" type="AccessibleText" line="2323"/>
                    <javadoc line="2327">
                        Gets the AccessibleEditableText associated with this object
                          presenting editable text on the display.                        
                        <return>
                            AccessibleEditableText if supported by object; else return null                            
                        </return>
                        <see>
                            AccessibleEditableText                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleEditableText" type="AccessibleEditableText" line="2334"/>
                    <javadoc line="2338">
                        Gets the AccessibleValue associated with this object that supports a
                          Numerical value.                        
                        <return>
                            AccessibleValue if supported by object; else return null                            
                        </return>
                        <see>
                            AccessibleValue                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleValue" type="AccessibleValue" line="2345"/>
                    <javadoc line="2349">
                        Gets the AccessibleIcons associated with an object that has
                          one or more associated icons                        
                        <return>
                            an array of AccessibleIcon if supported by object;
                              otherwise return null                            
                        </return>
                        <see>
                            AccessibleIcon                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleIcon" type="AccessibleIcon[]" line="2357"/>
                    <javadoc line="2361">
                        Gets the AccessibleRelationSet associated with an object                        
                        <return>
                            an AccessibleRelationSet if supported by object;
                              otherwise return null                            
                        </return>
                        <see>
                            AccessibleRelationSet                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRelationSet" type="AccessibleRelationSet" line="2368"/>
                    <javadoc line="2372">
                        Gets the AccessibleTable associated with an object                        
                        <return>
                            an AccessibleTable if supported by object;
                              otherwise return null                            
                        </return>
                        <see>
                            AccessibleTable                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleTable" type="AccessibleTable" line="2379"/>
                    <javadoc line="2383">
                        Support for reporting bound property changes.  If oldValue and
                          newValue are not equal and the PropertyChangeEvent listener list
                          is not empty, then fire a PropertyChange event to each listener.
                          In general, this is for use by the Accessible objects themselves
                          and should not be called by an application program.                        
                        <param>
                            propertyName  The programmatic name of the property that
                              was changed.                            
                        </param>
                        <param>
                            oldValue  The old value of the property.                            
                        </param>
                        <param>
                            newValue  The new value of the property.                            
                        </param>
                        <see>
                            java.beans.PropertyChangeSupport                            
                        </see>
                        <see>
                            #addPropertyChangeListener                            
                        </see>
                        <see>
                            #removePropertyChangeListener                            
                        </see>
                        <see>
                            #ACCESSIBLE_NAME_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_DESCRIPTION_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_STATE_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_VALUE_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_SELECTION_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_TEXT_PROPERTY                            
                        </see>
                        <see>
                            #ACCESSIBLE_VISIBLE_DATA_PROPERTY                            
                        </see>
                    </javadoc>
                    <method name="firePropertyChange" type="void" line="2406">
                        <params>
                            <param name="propertyName" type="String"/>
                            <param name="oldValue" type="Object"/>
                            <param name="newValue" type="Object"/>
                        </params>
                    </method>
                </class>
            </class>
        </class>
    </source>