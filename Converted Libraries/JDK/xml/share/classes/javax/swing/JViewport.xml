<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image.VolatileImage"/>
        <import package="java.awt.peer.ComponentPeer"/>
        <import package="java.applet.Applet"/>
        <import package="java.beans.Transient"/>
        <import package="javax.swing.plaf.ViewportUI"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border"/>
        <import package="javax.accessibility"/>
        <import package="java.io.Serializable"/>
        <class name="JViewport" line="13">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="13">
                The &quot;viewport&quot; or &quot;porthole&quot; through which you see the underlying
                  information. When you scroll, what moves is the viewport. It is like
                  peering through a camera&apos;s viewfinder. Moving the viewfinder upwards
                  brings new things into view at the top of the picture and loses
                  things that were at the bottom.
                  &lt;p&gt;
                  By default, &lt;code&gt;JViewport&lt;/code&gt; is opaque. To change this, use the
                  &lt;code&gt;setOpaque&lt;/code&gt; method.
                  &lt;p&gt;
                  &lt;b&gt;NOTE:&lt;/b&gt;We have implemented a faster scrolling algorithm that
                  does not require a buffer to draw in. The algorithm works as follows:
                  &lt;ol&gt;&lt;li&gt;The view and parent view and checked to see if they are
                  &lt;code&gt;JComponents&lt;/code&gt;,
                  if they aren&apos;t, stop and repaint the whole viewport.
                  &lt;li&gt;If the viewport is obscured by an ancestor, stop and repaint the whole
                  viewport.
                  &lt;li&gt;Compute the region that will become visible, if it is as big as
                  the viewport, stop and repaint the whole view region.
                  &lt;li&gt;Obtain the ancestor &lt;code&gt;Window&lt;/code&gt;&apos;s graphics and
                  do a &lt;code&gt;copyArea&lt;/code&gt; on the scrolled region.
                  &lt;li&gt;Message the view to repaint the newly visible region.
                  &lt;li&gt;The next time paint is invoked on the viewport, if the clip region
                  is smaller than the viewport size a timer is kicked off to repaint the
                  whole region.
                  &lt;/ol&gt;
                  In general this approach is much faster. Compared to the backing store
                  approach this avoids the overhead of maintaining an offscreen buffer and
                  having to do two &lt;code&gt;copyArea&lt;/code&gt;s.
                  Compared to the non backing store case this
                  approach will greatly reduce the painted region.
                  &lt;p&gt;
                  This approach can cause slower times than the backing store approach
                  when the viewport is obscured by another window, or partially offscreen.
                  When another window
                  obscures the viewport the copyArea will copy garbage and a
                  paint event will be generated by the system to inform us we need to
                  paint the newly exposed region. The only way to handle this is to
                  repaint the whole viewport, which can cause slower performance than the
                  backing store case. In most applications very rarely will the user be
                  scrolling while the viewport is obscured by another window or offscreen,
                  so this optimization is usually worth the performance hit when obscured.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Hans Muller                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <see>
                    JScrollPane                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="74"/>
            <javadoc line="74">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="EnableWindowBlit" type="Object" line="79"/>
            <javadoc line="79">
                Property used to indicate window blitting should not be done.                
            </javadoc>
            <declaration name="isViewSizeSet" type="boolean" line="83"/>
            <javadoc line="83">
                True when the viewport dimensions have been determined.
                  The default is false.                
            </javadoc>
            <declaration name="lastPaintPosition" type="Point" line="88"/>
            <javadoc line="88">
                The last &lt;code&gt;viewPosition&lt;/code&gt; that we&apos;ve painted, so we know how
                  much of the backing store image is valid.                
            </javadoc>
            <declaration name="backingStore" type="boolean" line="93"/>
            <javadoc line="93">
                True when this viewport is maintaining an offscreen image of its
                  contents, so that some scrolling can take place using fast &quot;bit-blit&quot;
                  operations instead of by accessing the view object to construct the
                  display.  The default is &lt;code&gt;false&lt;/code&gt;.                
                <deprecated>
                    As of Java 2 platform v1.3                    
                </deprecated>
                <see>
                    #setScrollMode                    
                </see>
            </javadoc>
            <declaration name="backingStoreImage" type="Image" line="102"/>
            <javadoc line="102">
                The view image used for a backing store.                
            </javadoc>
            <declaration name="scrollUnderway" type="boolean" line="106"/>
            <javadoc line="106">
                The &lt;code&gt;scrollUnderway&lt;/code&gt; flag is used for components like
                  &lt;code&gt;JList&lt;/code&gt;.  When the downarrow key is pressed on a
                  &lt;code&gt;JList&lt;/code&gt; and the selected
                  cell is the last in the list, the &lt;code&gt;scrollpane&lt;/code&gt; autoscrolls.
                  Here, the old selected cell needs repainting and so we need
                  a flag to make the viewport do the optimized painting
                  only when there is an explicit call to
                  &lt;code&gt;setViewPosition(Point)&lt;/code&gt;.
                  When &lt;code&gt;setBounds&lt;/code&gt; is called through other routes,
                  the flag is off and the view repaints normally.  Another approach
                  would be to remove this from the &lt;code&gt;JViewport&lt;/code&gt;
                  class and have the &lt;code&gt;JList&lt;/code&gt; manage this case by using
                  &lt;code&gt;setBackingStoreEnabled&lt;/code&gt;.  The default is
                  &lt;code&gt;false&lt;/code&gt;.                
            </javadoc>
            <declaration name="viewListener" type="ComponentListener" line="123"/>
            <declaration name="changeEvent" type="ChangeEvent" line="124"/>
            <declaration name="BLIT_SCROLL_MODE" type="int" line="125"/>
            <javadoc line="125">
                Use &lt;code&gt;graphics.copyArea&lt;/code&gt; to implement scrolling.
                  This is the fastest for most applications.                
                <see>
                    #setScrollMode                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="BACKINGSTORE_SCROLL_MODE" type="int" line="132"/>
            <javadoc line="132">
                Draws viewport contents into an offscreen image.
                  This was previously the default mode for &lt;code&gt;JTable&lt;/code&gt;.
                  This mode may offer advantages over &quot;blit mode&quot;
                  in some cases, but it requires a large chunk of extra RAM.                
                <see>
                    #setScrollMode                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="SIMPLE_SCROLL_MODE" type="int" line="141"/>
            <javadoc line="141">
                This mode uses the very simple method of redrawing the entire
                  contents of the scrollpane each time it is scrolled.
                  This was the default behavior in Swing 1.0 and Swing 1.1.
                  Either of the other two options will provide better performance
                  in most cases.                
                <see>
                    #setScrollMode                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="scrollMode" type="int" line="151"/>
            <javadoc line="151">
                @see #setScrollMode                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="repaintAll" type="boolean" line="156"/>
            <javadoc line="156">
                This is set to true in &lt;code&gt;setViewPosition&lt;/code&gt;
                  if doing a window blit and the viewport is obscured.                
            </javadoc>
            <declaration name="waitingForRepaint" type="boolean" line="161"/>
            <javadoc line="161">
                This is set to true in paint, if &lt;code&gt;repaintAll&lt;/code&gt;
                  is true and the clip rectangle does not match the bounds.
                  If true, and scrolling happens the
                  repaint manager is not cleared which then allows for the repaint
                  previously invoked to succeed.                
            </javadoc>
            <declaration name="repaintTimer" type="Timer" line="169"/>
            <javadoc line="169">
                Instead of directly invoking repaint, a &lt;code&gt;Timer&lt;/code&gt;
                  is started and when it fires, repaint is invoked.                
            </javadoc>
            <declaration name="inBlitPaint" type="boolean" line="174"/>
            <javadoc line="174">
                Set to true in paintView when paint is invoked.                
            </javadoc>
            <declaration name="hasHadValidView" type="boolean" line="178"/>
            <javadoc line="178">
                Whether or not a valid view has been installed.                
            </javadoc>
            <javadoc line="182">
                Creates a &lt;code&gt;JViewport&lt;/code&gt;.                
            </javadoc>
            <method name="JViewport" type="constructor" line="185"/>
            <javadoc line="192">
                Returns the L&amp;F object that renders this component.                
                <return>
                    a &lt;code&gt;ViewportUI&lt;/code&gt; object                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getUI" type="ViewportUI" line="197"/>
            <javadoc line="200">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the &lt;code&gt;ViewportUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel.                    
                </beaninfobound>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setUI" type="void" line="210">
                <params>
                    <param name="ui" type="ViewportUI"/>
                </params>
            </method>
            <javadoc line="213">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="217"/>
            <javadoc line="220">
                Returns a string that specifies the name of the L&amp;F class
                  that renders this component.                
                <return>
                    the string &quot;ViewportUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="227"/>
            <javadoc line="230">
                Sets the &lt;code&gt;JViewport&lt;/code&gt;&apos;s one lightweight child,
                  which can be &lt;code&gt;null&lt;/code&gt;.
                  (Since there is only one child which occupies the entire viewport,
                  the &lt;code&gt;constraints&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt;
                  arguments are ignored.)                
                <param>
                    child       the lightweight &lt;code&gt;child&lt;/code&gt; of the viewport                    
                </param>
                <param>
                    constraints the &lt;code&gt;constraints&lt;/code&gt; to be respected                    
                </param>
                <param>
                    index       the index                    
                </param>
                <see>
                    #setView                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="241">
                <params>
                    <param name="child" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="244">
                Removes the &lt;code&gt;Viewport&lt;/code&gt;s one lightweight child.                
                <see>
                    #setView                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="248">
                <params>
                    <param name="child" type="Component"/>
                </params>
            </method>
            <javadoc line="252">
                Scrolls the view so that &lt;code&gt;Rectangle&lt;/code&gt;
                  within the view becomes visible.
                  &lt;p&gt;
                  This attempts to validate the view before scrolling if the
                  view is currently not valid - &lt;code&gt;isValid&lt;/code&gt; returns false.
                  To avoid excessive validation when the containment hierarchy is
                  being created this will not validate if one of the ancestors does not
                  have a peer, or there is no validate root ancestor, or one of the
                  ancestors is not a &lt;code&gt;Window&lt;/code&gt; or &lt;code&gt;Applet&lt;/code&gt;.
                  &lt;p&gt;
                  Note that this method will not scroll outside of the
                  valid viewport; for example, if &lt;code&gt;contentRect&lt;/code&gt; is larger
                  than the viewport, scrolling will be confined to the viewport&apos;s
                  bounds.                
                <param>
                    contentRect the &lt;code&gt;Rectangle&lt;/code&gt; to display                    
                </param>
                <see>
                    JComponent#isValidateRoot                    
                </see>
                <see>
                    java.awt.Component#isValid                    
                </see>
                <see>
                    java.awt.Component#getPeer                    
                </see>
            </javadoc>
            <method name="scrollRectToVisible" type="void" line="272">
                <params>
                    <param name="contentRect" type="Rectangle"/>
                </params>
                <declaration name="view" type="Component" line="273"/>
                <scope line="274"/>
                <scope line="277">
                    <scope line="278"/>
                    <declaration name="dx" type="int" line="281"/>
                    <scope line="284">
                        <declaration name="viewPosition" type="Point" line="285"/>
                        <declaration name="viewSize" type="Dimension" line="286"/>
                        <declaration name="startX" type="int" line="287"/>
                        <declaration name="startY" type="int" line="288"/>
                        <declaration name="extent" type="Dimension" line="289"/>
                        <scope line="292">
                            <scope line="293">
                                <scope line="294"/>
                                <scope line="297"/>
                            </scope>
                            <scope line="301">
                                <scope line="302"/>
                                <scope line="305"/>
                            </scope>
                            <scope line="309"/>
                            <scope line="312"/>
                        </scope>
                        <scope line="316"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="323">
                Ascends the &lt;code&gt;Viewport&lt;/code&gt;&apos;s parents stopping when
                  a component is found that returns
                  &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;isValidateRoot&lt;/code&gt;.
                  If all the &lt;code&gt;Component&lt;/code&gt;&apos;s  parents are visible,
                  &lt;code&gt;validate&lt;/code&gt; will then be invoked on it. The
                  &lt;code&gt;RepaintManager&lt;/code&gt; is then invoked with
                  &lt;code&gt;removeInvalidComponent&lt;/code&gt;. This
                  is the synchronous version of a &lt;code&gt;revalidate&lt;/code&gt;.                
            </javadoc>
            <method name="validateView" type="void" line="333">
                <declaration name="validateRoot" type="Component" line="334"/>
                <scope line="335"/>
                <declaration name="rm" type="RepaintManager" line="339"/>
                <scope line="340"/>
            </method>
            <method name="positionAdjustment" type="int" line="344">
                <params>
                    <param name="parentWidth" type="int"/>
                    <param name="childWidth" type="int"/>
                    <param name="childAt" type="int"/>
                </params>
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351"/>
                <scope line="354"/>
                <scope line="357"/>
                <scope line="360"/>
            </method>
            <javadoc line="365">
                The viewport &quot;scrolls&quot; its child (called the &quot;view&quot;) by the
                  normal parent/child clipping (typically the view is moved in
                  the opposite direction of the scroll).  A non-&lt;code&gt;null&lt;/code&gt; border,
                  or non-zero insets, isn&apos;t supported, to prevent the geometry
                  of this component from becoming complex enough to inhibit
                  subclassing.  To create a &lt;code&gt;JViewport&lt;/code&gt; with a border,
                  add it to a &lt;code&gt;JPanel&lt;/code&gt; that has a border.
                  &lt;p&gt;Note:  If &lt;code&gt;border&lt;/code&gt; is non-&lt;code&gt;null&lt;/code&gt;, this
                  method will throw an exception as borders are not supported on
                  a &lt;code&gt;JViewPort&lt;/code&gt;.                
                <param>
                    border the &lt;code&gt;Border&lt;/code&gt; to set                    
                </param>
                <exception>
                    IllegalArgumentException this method is not implemented                    
                </exception>
            </javadoc>
            <method name="setBorder" type="void" line="379">
                <params>
                    <param name="border" type="Border"/>
                </params>
                <scope line="380"/>
            </method>
            <javadoc line="384">
                Returns the insets (border) dimensions as (0,0,0,0), since borders
                  are not supported on a &lt;code&gt;JViewport&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;Rectange&lt;/code&gt; of zero dimension and zero origin                    
                </return>
                <see>
                    #setBorder                    
                </see>
            </javadoc>
            <method name="getInsets" type="Insets" line="390"/>
            <javadoc line="393">
                Returns an &lt;code&gt;Insets&lt;/code&gt; object containing this
                  &lt;code&gt;JViewport&lt;/code&gt;s inset values.  The passed-in
                  &lt;code&gt;Insets&lt;/code&gt; object will be reinitialized, and
                  all existing values within this object are overwritten.                
                <param>
                    insets the &lt;code&gt;Insets&lt;/code&gt; object which can be reused                    
                </param>
                <return>
                    this viewports inset values                    
                </return>
                <see>
                    #getInsets                    
                </see>
                <beaninfoexpert>
                    : true                    
                </beaninfoexpert>
            </javadoc>
            <method name="getInsets" type="Insets" line="403">
                <params>
                    <param name="insets" type="Insets"/>
                </params>
            </method>
            <method name="getBackingStoreGraphics" type="Graphics" line="407">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="bsg" type="Graphics" line="408"/>
            </method>
            <method name="paintViaBackingStore" type="void" line="414">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="bsg" type="Graphics" line="415"/>
                <scope line="416"/>
                <scope line="420"/>
            </method>
            <method name="paintViaBackingStore" type="void" line="424">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="oClip" type="Rectangle"/>
                </params>
                <declaration name="bsg" type="Graphics" line="425"/>
                <scope line="426"/>
                <scope line="431"/>
            </method>
            <javadoc line="435">
                The &lt;code&gt;JViewport&lt;/code&gt; overrides the default implementation of
                  this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return false.
                  This ensures
                  that the drawing machinery will call the &lt;code&gt;Viewport&lt;/code&gt;&apos;s
                  &lt;code&gt;paint&lt;/code&gt;
                  implementation rather than messaging the &lt;code&gt;JViewport&lt;/code&gt;&apos;s
                  children directly.                
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="isOptimizedDrawingEnabled" type="boolean" line="445"/>
            <javadoc line="448">
                Returns true if scroll mode is a {@code BACKINGSTORE_SCROLL_MODE} to cause
                  painting to originate from {@code JViewport}, or one of its
                  ancestors. Otherwise returns {@code false}.                
                <return>
                    true if if scroll mode is a {@code BACKINGSTORE_SCROLL_MODE}.                    
                </return>
                <see>
                    JComponent#isPaintingOrigin()                    
                </see>
            </javadoc>
            <method name="isPaintingOrigin" type="boolean" line="455"/>
            <javadoc line="458">
                Only used by the paint method below.                
            </javadoc>
            <method name="getViewLocation" type="Point" line="461">
                <declaration name="view" type="Component" line="462"/>
                <scope line="463"/>
                <scope line="466"/>
            </method>
            <javadoc line="470">
                Depending on whether the &lt;code&gt;backingStore&lt;/code&gt; is enabled,
                  either paint the image through the backing store or paint
                  just the recently exposed part, using the backing store
                  to &quot;blit&quot; the remainder.
                  &lt;blockquote&gt;
                  The term &quot;blit&quot; is the pronounced version of the PDP-10
                  BLT (BLock Transfer) instruction, which copied a block of
                  bits. (In case you were curious.)
                  &lt;/blockquote&gt;                
                <param>
                    g the &lt;code&gt;Graphics&lt;/code&gt; context within which to paint                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="482">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="width" type="int" line="483"/>
                <declaration name="height" type="int" line="484"/>
                <scope line="485"/>
                <scope line="488"/>
                <scope line="492">
                    <declaration name="clipB" type="Rectangle" line="494"/>
                    <scope line="495">
                        <scope line="497"/>
                    </scope>
                    <scope line="503">
                        <scope line="504"/>
                    </scope>
                </scope>
                <scope line="510">
                    <declaration name="clipB" type="Rectangle" line="511"/>
                    <scope line="512"/>
                </scope>
                <scope line="517"/>
                <declaration name="viewBounds" type="Rectangle" line="522"/>
                <scope line="523"/>
                <scope line="526">
                    <declaration name="clip" type="Rectangle" line="528"/>
                    <scope line="529">
                        <scope line="530"/>
                        <scope line="533"/>
                    </scope>
                    <scope line="538"/>
                </scope>
                <scope line="542">
                    <scope line="543"/>
                    <scope line="546">
                        <declaration name="blitFrom" type="Point" line="547"/>
                        <declaration name="blitTo" type="Point" line="548"/>
                        <declaration name="blitSize" type="Dimension" line="549"/>
                        <declaration name="blitPaint" type="Rectangle" line="550"/>
                        <declaration name="newLocation" type="Point" line="551"/>
                        <declaration name="dx" type="int" line="552"/>
                        <declaration name="dy" type="int" line="553"/>
                        <declaration name="canBlit" type="boolean" line="554"/>
                        <scope line="555"/>
                        <scope line="558">
                            <declaration name="bdx" type="int" line="559"/>
                            <declaration name="bdy" type="int" line="560"/>
                            <declaration name="clip" type="Rectangle" line="561"/>
                            <declaration name="bsg" type="Graphics" line="563"/>
                            <scope line="564">
                                <declaration name="r" type="Rectangle" line="567"/>
                            </scope>
                            <scope line="572"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="581">
                Sets the bounds of this viewport.  If the viewport&apos;s width
                  or height has changed, fire a &lt;code&gt;StateChanged&lt;/code&gt; event.                
                <param>
                    x left edge of the origin                    
                </param>
                <param>
                    y top edge of the origin                    
                </param>
                <param>
                    w width in pixels                    
                </param>
                <param>
                    h height in pixels                    
                </param>
                <see>
                    JComponent#reshape(int,int,int,int)                    
                </see>
            </javadoc>
            <method name="reshape" type="void" line="590">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="sizeChanged" type="boolean" line="591"/>
                <scope line="592"/>
                <scope line="596"/>
            </method>
            <javadoc line="600">
                Used to control the method of scrolling the viewport contents.
                  You may want to change this mode to get maximum performance for your
                  use case.                
                <param>
                    mode one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt; JViewport.BLIT_SCROLL_MODE
                      &lt;li&gt; JViewport.BACKINGSTORE_SCROLL_MODE
                      &lt;li&gt; JViewport.SIMPLE_SCROLL_MODE
                      &lt;/ul&gt;                    
                </param>
                <see>
                    #BLIT_SCROLL_MODE                    
                </see>
                <see>
                    #BACKINGSTORE_SCROLL_MODE                    
                </see>
                <see>
                    #SIMPLE_SCROLL_MODE                    
                </see>
                <beaninfobound>
                    : false
                      description: Method of moving contents for incremental scrolls.
                      enum: BLIT_SCROLL_MODE JViewport.BLIT_SCROLL_MODE
                      BACKINGSTORE_SCROLL_MODE JViewport.BACKINGSTORE_SCROLL_MODE
                      SIMPLE_SCROLL_MODE JViewport.SIMPLE_SCROLL_MODE                    
                </beaninfobound>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setScrollMode" type="void" line="620">
                <params>
                    <param name="mode" type="int"/>
                </params>
            </method>
            <javadoc line="624">
                Returns the current scrolling mode.                
                <return>
                    the &lt;code&gt;scrollMode&lt;/code&gt; property                    
                </return>
                <see>
                    #setScrollMode                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getScrollMode" type="int" line="630"/>
            <javadoc line="633">
                Returns &lt;code&gt;true&lt;/code&gt; if this viewport is maintaining
                  an offscreen image of its contents.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;scrollMode&lt;/code&gt; is
                      &lt;code&gt;BACKINGSTORE_SCROLL_MODE&lt;/code&gt;                    
                </return>
                <deprecated>
                    As of Java 2 platform v1.3, replaced by
                      &lt;code&gt;getScrollMode()&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="isBackingStoreEnabled" type="boolean" line="641"/>
            <javadoc line="644">
                If true if this viewport will maintain an offscreen
                  image of its contents.  The image is used to reduce the cost
                  of small one dimensional changes to the &lt;code&gt;viewPosition&lt;/code&gt;.
                  Rather than repainting the entire viewport we use
                  &lt;code&gt;Graphics.copyArea&lt;/code&gt; to effect some of the scroll.                
                <param>
                    enabled if true, maintain an offscreen backing store                    
                </param>
                <deprecated>
                    As of Java 2 platform v1.3, replaced by
                      &lt;code&gt;setScrollMode()&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="setBackingStoreEnabled" type="void" line="654">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
                <scope line="655"/>
                <scope line="658"/>
            </method>
            <method name="isBlitting" type="boolean" line="662">
                <declaration name="view" type="Component" line="663"/>
            </method>
            <javadoc line="666">
                Returns the &lt;code&gt;JViewport&lt;/code&gt;&apos;s one child or &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the viewports child, or &lt;code&gt;null&lt;/code&gt; if none exists                    
                </return>
                <see>
                    #setView                    
                </see>
            </javadoc>
            <method name="getView" type="Component" line="671"/>
            <javadoc line="674">
                Sets the &lt;code&gt;JViewport&lt;/code&gt;&apos;s one lightweight child
                  (&lt;code&gt;view&lt;/code&gt;), which can be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    view the viewport&apos;s new lightweight child                    
                </param>
                <see>
                    #getView                    
                </see>
            </javadoc>
            <method name="setView" type="void" line="680">
                <params>
                    <param name="view" type="Component"/>
                </params>
                <declaration name="n" type="int" line="681"/>
                <scope line="682"/>
                <scope line="686"/>
                <scope line="691"/>
                <scope line="694"/>
            </method>
            <javadoc line="700">
                If the view&apos;s size hasn&apos;t been explicitly set, return the
                  preferred size, otherwise return the view&apos;s current size.
                  If there is no view, return 0,0.                
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object specifying the size of the view                    
                </return>
            </javadoc>
            <method name="getViewSize" type="Dimension" line="706">
                <declaration name="view" type="Component" line="707"/>
                <scope line="708"/>
                <scope line="711"/>
                <scope line="714"/>
            </method>
            <javadoc line="718">
                Sets the size of the view.  A state changed event will be fired.                
                <param>
                    newSize a &lt;code&gt;Dimension&lt;/code&gt; object specifying the new
                      size of the view                    
                </param>
            </javadoc>
            <method name="setViewSize" type="void" line="723">
                <params>
                    <param name="newSize" type="Dimension"/>
                </params>
                <declaration name="view" type="Component" line="724"/>
                <scope line="725">
                    <declaration name="oldSize" type="Dimension" line="726"/>
                    <scope line="727"/>
                </scope>
            </method>
            <javadoc line="735">
                Returns the view coordinates that appear in the upper left
                  hand corner of the viewport, or 0,0 if there&apos;s no view.                
                <return>
                    a &lt;code&gt;Point&lt;/code&gt; object giving the upper left coordinates                    
                </return>
            </javadoc>
            <method name="getViewPosition" type="Point" line="740">
                <declaration name="view" type="Component" line="741"/>
                <scope line="742">
                    <declaration name="p" type="Point" line="743"/>
                </scope>
                <scope line="748"/>
            </method>
            <javadoc line="752">
                Sets the view coordinates that appear in the upper left
                  hand corner of the viewport, does nothing if there&apos;s no view.                
                <param>
                    p  a &lt;code&gt;Point&lt;/code&gt; object giving the upper left coordinates                    
                </param>
            </javadoc>
            <method name="setViewPosition" type="void" line="757">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <declaration name="view" type="Component" line="758"/>
                <scope line="759"/>
                <declaration name="oldX" type="int" line="762"/>
                <scope line="763">
                    <declaration name="c" type="JComponent" line="764"/>
                </scope>
                <scope line="768">
                    <declaration name="r" type="Rectangle" line="769"/>
                </scope>
                <declaration name="newX" type="int" line="773"/>
                <declaration name="newY" type="int" line="774"/>
                <scope line="775">
                    <scope line="776">
                        <declaration name="rm" type="RepaintManager" line="777"/>
                        <declaration name="jview" type="JComponent" line="778"/>
                        <declaration name="dirty" type="Rectangle" line="779"/>
                        <scope line="780">
                            <scope line="782">
                                <declaration name="g" type="Graphics" line="783"/>
                            </scope>
                            <scope line="793"/>
                        </scope>
                        <scope line="797"/>
                    </scope>
                    <scope line="802"/>
                </scope>
            </method>
            <javadoc line="811">
                Returns a rectangle whose origin is &lt;code&gt;getViewPosition&lt;/code&gt;
                  and size is &lt;code&gt;getExtentSize&lt;/code&gt;.
                  This is the visible part of the view, in view coordinates.                
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; giving the visible part of
                      the view using view coordinates.                    
                </return>
            </javadoc>
            <method name="getViewRect" type="Rectangle" line="818"/>
            <javadoc line="821">
                Computes the parameters for a blit where the backing store image
                  currently contains &lt;code&gt;oldLoc&lt;/code&gt; in the upper left hand corner
                  and we&apos;re scrolling to &lt;code&gt;newLoc&lt;/code&gt;.
                  The parameters are modified
                  to return the values required for the blit.                
                <param>
                    dx  the horizontal delta                    
                </param>
                <param>
                    dy  the vertical delta                    
                </param>
                <param>
                    blitFrom the &lt;code&gt;Point&lt;/code&gt; we&apos;re blitting from                    
                </param>
                <param>
                    blitTo the &lt;code&gt;Point&lt;/code&gt; we&apos;re blitting to                    
                </param>
                <param>
                    blitSize the &lt;code&gt;Dimension&lt;/code&gt; of the area to blit                    
                </param>
                <param>
                    blitPaint the area to blit                    
                </param>
                <return>
                    true if the parameters are modified and we&apos;re ready to blit;
                      false otherwise                    
                </return>
            </javadoc>
            <method name="computeBlit" type="boolean" line="836">
                <params>
                    <param name="dx" type="int"/>
                    <param name="dy" type="int"/>
                    <param name="blitFrom" type="Point"/>
                    <param name="blitTo" type="Point"/>
                    <param name="blitSize" type="Dimension"/>
                    <param name="blitPaint" type="Rectangle"/>
                </params>
                <declaration name="dxAbs" type="int" line="837"/>
                <declaration name="dyAbs" type="int" line="838"/>
                <declaration name="extentSize" type="Dimension" line="839"/>
                <scope line="840">
                    <scope line="841"/>
                    <scope line="846"/>
                </scope>
                <scope line="858">
                    <scope line="859"/>
                    <scope line="864"/>
                </scope>
                <scope line="876"/>
            </method>
            <javadoc line="880">
                Returns the size of the visible part of the view in view coordinates.                
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object giving the size of the view                    
                </return>
            </javadoc>
            <method name="getExtentSize" type="Dimension" line="884"/>
            <javadoc line="887">
                Converts a size in pixel coordinates to view coordinates.
                  Subclasses of viewport that support &quot;logical coordinates&quot;
                  will override this method.                
                <param>
                    size  a &lt;code&gt;Dimension&lt;/code&gt; object using pixel coordinates                    
                </param>
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; object converted to view coordinates                    
                </return>
            </javadoc>
            <method name="toViewCoordinates" type="Dimension" line="894">
                <params>
                    <param name="size" type="Dimension"/>
                </params>
            </method>
            <javadoc line="897">
                Converts a point in pixel coordinates to view coordinates.
                  Subclasses of viewport that support &quot;logical coordinates&quot;
                  will override this method.                
                <param>
                    p  a &lt;code&gt;Point&lt;/code&gt; object using pixel coordinates                    
                </param>
                <return>
                    a &lt;code&gt;Point&lt;/code&gt; object converted to view coordinates                    
                </return>
            </javadoc>
            <method name="toViewCoordinates" type="Point" line="904">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="907">
                Sets the size of the visible part of the view using view coordinates.                
                <param>
                    newExtent  a &lt;code&gt;Dimension&lt;/code&gt; object specifying
                      the size of the view                    
                </param>
            </javadoc>
            <method name="setExtentSize" type="void" line="912">
                <params>
                    <param name="newExtent" type="Dimension"/>
                </params>
                <declaration name="oldExtent" type="Dimension" line="913"/>
                <scope line="914"/>
            </method>
            <class name="ViewListener" line="919">
                <extends class="ComponentAdapter"/>
                <implements interface="Serializable"/>
                <javadoc line="919">
                    A listener for the view.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <method name="componentResized" type="void" line="932">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="937">
                Creates a listener for the view.                
                <return>
                    a &lt;code&gt;ViewListener&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createViewListener" type="ViewListener" line="941"/>
            <javadoc line="944">
                Subclassers can override this to install a different
                  layout manager (or &lt;code&gt;null&lt;/code&gt;) in the constructor.  Returns
                  the &lt;code&gt;LayoutManager&lt;/code&gt; to install on the &lt;code&gt;JViewport&lt;/code&gt;.                
                <return>
                    a &lt;code&gt;LayoutManager&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createLayoutManager" type="LayoutManager" line="950"/>
            <javadoc line="953">
                Adds a &lt;code&gt;ChangeListener&lt;/code&gt; to the list that is
                  notified each time the view&apos;s
                  size, position, or the viewport&apos;s extent size has changed.                
                <param>
                    l the &lt;code&gt;ChangeListener&lt;/code&gt; to add                    
                </param>
                <see>
                    #removeChangeListener                    
                </see>
                <see>
                    #setViewPosition                    
                </see>
                <see>
                    #setViewSize                    
                </see>
                <see>
                    #setExtentSize                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="963">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="966">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt; from the list that&apos;s notified each
                  time the views size, position, or the viewports extent size
                  has changed.                
                <param>
                    l the &lt;code&gt;ChangeListener&lt;/code&gt; to remove                    
                </param>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="973">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="976">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this JViewport with addChangeListener().                
                <return>
                    all of the &lt;code&gt;ChangeListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="983"/>
            <javadoc line="986">
                Notifies all &lt;code&gt;ChangeListeners&lt;/code&gt; when the views
                  size, position, or the viewports extent size has changed.                
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="993">
                <declaration name="listeners" type="Object[]" line="994"/>
                <scope line="995">
                    <scope line="996">
                        <scope line="997"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1004">
                Always repaint in the parents coordinate system to make sure
                  only one paint is performed by the &lt;code&gt;RepaintManager&lt;/code&gt;.                
                <param>
                    tm   maximum time in milliseconds before update                    
                </param>
                <param>
                    x    the &lt;code&gt;x&lt;/code&gt; coordinate (pixels over from left)                    
                </param>
                <param>
                    y    the &lt;code&gt;y&lt;/code&gt; coordinate (pixels down from top)                    
                </param>
                <param>
                    w    the width                    
                </param>
                <param>
                    h   the height                    
                </param>
                <see>
                    java.awt.Component#update(java.awt.Graphics)                    
                </see>
            </javadoc>
            <method name="repaint" type="void" line="1014">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <declaration name="parent" type="Container" line="1015"/>
            </method>
            <javadoc line="1019">
                Returns a string representation of this &lt;code&gt;JViewport&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JViewport&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1028">
                <declaration name="isViewSizeSetString" type="String" line="1029"/>
                <declaration name="lastPaintPositionString" type="String" line="1030"/>
                <declaration name="scrollUnderwayString" type="String" line="1031"/>
            </method>
            <javadoc line="1034">
                Notifies listeners of a property change. This is subclassed to update
                  the &lt;code&gt;windowBlit&lt;/code&gt; property.
                  (The &lt;code&gt;putClientProperty&lt;/code&gt; property is final).                
                <param>
                    propertyName a string containing the property name                    
                </param>
                <param>
                    oldValue the old value of the property                    
                </param>
                <param>
                    newValue  the new value of the property                    
                </param>
            </javadoc>
            <method name="firePropertyChange" type="void" line="1042">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="1044">
                    <scope line="1045"/>
                    <scope line="1048"/>
                </scope>
            </method>
            <javadoc line="1053">
                Returns true if the component needs to be completely repainted after
                  a blit and a paint is received.                
            </javadoc>
            <method name="needsRepaintAfterBlit" type="boolean" line="1057">
                <declaration name="heavyParent" type="Component" line="1058"/>
                <scope line="1059"/>
                <scope line="1062">
                    <declaration name="peer" type="ComponentPeer" line="1063"/>
                    <scope line="1064"/>
                </scope>
            </method>
            <method name="createRepaintTimer" type="Timer" line="1070">
                <anonymous_class line="1071">
                    <method name="actionPerformed" type="void" line="1072">
                        <params>
                            <param name="ae" type="ActionEvent"/>
                        </params>
                        <scope line="1073"/>
                    </method>
                </anonymous_class>
                <declaration name="timer" type="Timer" line="1071"/>
            </method>
            <javadoc line="1082">
                If the repaint manager has a dirty region for the view, the view is
                  asked to paint.                
                <param>
                    g  the &lt;code&gt;Graphics&lt;/code&gt; context within which to paint                    
                </param>
            </javadoc>
            <method name="flushViewDirtyRegion" type="void" line="1087">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="dirty" type="Rectangle"/>
                </params>
                <declaration name="view" type="JComponent" line="1088"/>
                <scope line="1089">
                    <declaration name="clip" type="Rectangle" line="1092"/>
                    <scope line="1093"/>
                    <scope line="1098"/>
                </scope>
            </method>
            <javadoc line="1103">
                Used when blitting.                
                <param>
                    g  the &lt;code&gt;Graphics&lt;/code&gt; context within which to paint                    
                </param>
                <return>
                    true if blitting succeeded; otherwise false                    
                </return>
            </javadoc>
            <method name="windowBlitPaint" type="boolean" line="1108">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="width" type="int" line="1109"/>
                <declaration name="height" type="int" line="1110"/>
                <scope line="1111"/>
                <declaration name="retValue" type="boolean" line="1114"/>
                <declaration name="rm" type="RepaintManager" line="1115"/>
                <declaration name="view" type="JComponent" line="1116"/>
                <scope line="1117"/>
                <scope line="1121">
                    <declaration name="blitFrom" type="Point" line="1122"/>
                    <declaration name="blitTo" type="Point" line="1123"/>
                    <declaration name="blitSize" type="Dimension" line="1124"/>
                    <declaration name="blitPaint" type="Rectangle" line="1125"/>
                    <declaration name="newLocation" type="Point" line="1126"/>
                    <declaration name="dx" type="int" line="1127"/>
                    <declaration name="dy" type="int" line="1128"/>
                    <declaration name="canBlit" type="boolean" line="1129"/>
                    <scope line="1130"/>
                    <scope line="1134">
                        <declaration name="r" type="Rectangle" line="1135"/>
                    </scope>
                </scope>
            </method>
            <method name="blitDoubleBuffered" type="void" line="1145">
                <params>
                    <param name="view" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="clipX" type="int"/>
                    <param name="clipY" type="int"/>
                    <param name="clipW" type="int"/>
                    <param name="clipH" type="int"/>
                    <param name="blitFromX" type="int"/>
                    <param name="blitFromY" type="int"/>
                    <param name="blitToX" type="int"/>
                    <param name="blitToY" type="int"/>
                    <param name="blitW" type="int"/>
                    <param name="blitH" type="int"/>
                </params>
                <declaration name="rm" type="RepaintManager" line="1146"/>
                <declaration name="bdx" type="int" line="1147"/>
                <declaration name="bdy" type="int" line="1148"/>
                <declaration name="x" type="int" line="1150"/>
                <declaration name="y" type="int" line="1151"/>
            </method>
            <javadoc line="1157">
                Called to paint the view, usually when &lt;code&gt;blitPaint&lt;/code&gt;
                  can not blit.                
                <param>
                    g the &lt;code&gt;Graphics&lt;/code&gt; context within which to paint                    
                </param>
            </javadoc>
            <method name="paintView" type="void" line="1162">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="clip" type="Rectangle" line="1163"/>
                <declaration name="view" type="JComponent" line="1164"/>
                <scope line="1165">
                    <declaration name="x" type="int" line="1166"/>
                    <declaration name="y" type="int" line="1167"/>
                </scope>
                <scope line="1174">
                    <scope line="1175"/>
                    <scope line="1179"/>
                </scope>
            </method>
            <javadoc line="1184">
                Returns true if the viewport is not obscured by one of its ancestors,
                  or its ancestors children and if the viewport is showing. Blitting
                  when the view isn&apos;t showing will work,
                  or rather &lt;code&gt;copyArea&lt;/code&gt; will work,
                  but will not produce the expected behavior.                
            </javadoc>
            <method name="canUseWindowBlitter" type="boolean" line="1191">
                <scope line="1192"/>
                <scope line="1195"/>
                <declaration name="dirtyRegion" type="Rectangle" line="1198"/>
                <scope line="1199"/>
                <declaration name="clip" type="Rectangle" line="1202"/>
                <declaration name="oldClip" type="Rectangle" line="1203"/>
                <declaration name="tmp2" type="Rectangle" line="1204"/>
                <declaration name="parent" type="Container" line="1205"/>
                <declaration name="lastParent" type="Component" line="1206"/>
                <declaration name="x" type="int" line="1207"/>
                <scope line="1208">
                    <scope line="1216">
                        <declaration name="comps" type="Component" line="1217"/>
                        <declaration name="index" type="int" line="1218"/>
                        <scope line="1219">
                            <scope line="1220"/>
                        </scope>
                        <scope line="1225"/>
                    </scope>
                </scope>
                <scope line="1235"/>
            </method>
            <javadoc line="1240">
                Gets the AccessibleContext associated with this JViewport.
                  For viewports, the AccessibleContext takes the form of an
                  AccessibleJViewport.
                  A new AccessibleJViewport instance is created if necessary.                
                <return>
                    an AccessibleJViewport that serves as the
                      AccessibleContext of this JViewport                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1248">
                <scope line="1249"/>
            </method>
            <class name="AccessibleJViewport" line="1254">
                <extends class="AccessibleJComponent"/>
                <javadoc line="1254">
                    This class implements accessibility support for the
                      &lt;code&gt;JViewport&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to viewport user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1269">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of
                          the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1274"/>
            </class>
        </class>
    </source>