<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.awt"/>
        <import package="java.util"/>
        <import package="java.beans"/>
        <class name="JSlider" line="41">
            <extends class="JComponent"/>
            <comment line="1399">
                ///////////////                
            </comment>
            <comment line="1400">
                Accessibility support                
            </comment>
            <comment line="1401">
                //////////////                
            </comment>
            <comment line="1520">
                AccessibleJSlider                
            </comment>
            <implements interface="SwingConstants"/>
            <implements interface="Accessible"/>
            <javadoc line="41">
                A component that lets the user graphically select a value by sliding
                  a knob within a bounded interval. The knob is always positioned
                  at the points that match integer values within the specified interval.
                  &lt;p&gt;
                  The slider can show both
                  major tick marks, and minor tick marks between the major ones.  The number of
                  values between the tick marks is controlled with
                  &lt;code&gt;setMajorTickSpacing&lt;/code&gt; and &lt;code&gt;setMinorTickSpacing&lt;/code&gt;.
                  Painting of tick marks is controlled by {@code setPaintTicks}.
                  &lt;p&gt;
                  Sliders can also print text labels at regular intervals (or at
                  arbitrary locations) along the slider track.  Painting of labels is
                  controlled by {@code setLabelTable} and {@code setPaintLabels}.
                  &lt;p&gt;
                  For further information and examples see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/slider.html&quot;&gt;How to Use Sliders&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component that supports selecting a integer value from a range.                    
                </beaninfo>
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="82"/>
            <javadoc line="82">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="paintTicks" type="boolean" line="88"/>
            <declaration name="paintTrack" type="boolean" line="89"/>
            <declaration name="paintLabels" type="boolean" line="90"/>
            <declaration name="isInverted" type="boolean" line="91"/>
            <declaration name="sliderModel" type="BoundedRangeModel" line="93"/>
            <javadoc line="93">
                The data model that handles the numeric maximum value,
                  minimum value, and current-position value for the slider.                
            </javadoc>
            <declaration name="majorTickSpacing" type="int" line="99"/>
            <javadoc line="99">
                The number of values between the major tick marks -- the
                  larger marks that break up the minor tick marks.                
            </javadoc>
            <declaration name="minorTickSpacing" type="int" line="105"/>
            <javadoc line="105">
                The number of values between the minor tick marks -- the
                  smaller marks that occur between the major tick marks.                
                <see>
                    #setMinorTickSpacing                    
                </see>
            </javadoc>
            <declaration name="snapToTicks" type="boolean" line="112"/>
            <javadoc line="112">
                If true, the knob (and the data value it represents)
                  resolve to the closest tick mark next to where the user
                  positioned the knob.  The default is false.                
                <see>
                    #setSnapToTicks                    
                </see>
            </javadoc>
            <declaration name="snapToValue" type="boolean" line="120"/>
            <javadoc line="120">
                If true, the knob (and the data value it represents)
                  resolve to the closest slider value next to where the user
                  positioned the knob.                
            </javadoc>
            <declaration name="orientation" type="int" line="127"/>
            <javadoc line="127">
                Whether the slider is horizontal or vertical
                  The default is horizontal.                
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <declaration name="labelTable" type="Dictionary" line="136"/>
            <javadoc line="136">
                {@code Dictionary} of what labels to draw at which values                
            </javadoc>
            <declaration name="changeListener" type="ChangeListener" line="142"/>
            <javadoc line="142">
                The changeListener (no suffix) is the listener we add to the
                  slider&apos;s model.  This listener is initialized to the{@code ChangeListener} returned from {@code createChangeListener},
                  which by default just forwards events
                  to {@code ChangeListener}s (if any) added directly to the slider.                
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #createChangeListener                    
                </see>
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="155"/>
            <javadoc line="155">
                Only one &lt;code&gt;ChangeEvent&lt;/code&gt; is needed per slider instance since the
                  event&apos;s only (read-only) state is the source property.  The source
                  of events generated here is always &quot;this&quot;. The event is lazily
                  created the first time that an event notification is fired.                
                <see>
                    #fireStateChanged                    
                </see>
            </javadoc>
            <method name="checkOrientation" type="void" line="166">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Creates a horizontal slider with the range 0 to 100 and
                  an initial value of 50.                
            </javadoc>
            <method name="JSlider" type="constructor" line="181"/>
            <javadoc line="186">
                Creates a slider using the specified orientation with the
                  range {@code 0} to {@code 100} and an initial value of {@code 50}.
                  The orientation can be
                  either &lt;code&gt;SwingConstants.VERTICAL&lt;/code&gt; or
                  &lt;code&gt;SwingConstants.HORIZONTAL&lt;/code&gt;.                
                <param>
                    orientation  the orientation of the slider                    
                </param>
                <throws>
                    IllegalArgumentException if orientation is not one of {@code VERTICAL}, {@code HORIZONTAL}                    
                </throws>
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <method name="JSlider" type="constructor" line="197">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="202">
                Creates a horizontal slider using the specified min and max
                  with an initial value equal to the average of the min plus max.
                  &lt;p&gt;
                  The &lt;code&gt;BoundedRangeModel&lt;/code&gt; that holds the slider&apos;s data
                  handles any issues that may arise from improperly setting the
                  minimum and maximum values on the slider.  See the{@code BoundedRangeModel} documentation for details.                
                <param>
                    min  the minimum value of the slider                    
                </param>
                <param>
                    max  the maximum value of the slider                    
                </param>
                <see>
                    BoundedRangeModel                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <method name="JSlider" type="constructor" line="218">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="223">
                Creates a horizontal slider using the specified min, max and value.
                  &lt;p&gt;
                  The &lt;code&gt;BoundedRangeModel&lt;/code&gt; that holds the slider&apos;s data
                  handles any issues that may arise from improperly setting the
                  minimum, initial, and maximum values on the slider.  See the{@code BoundedRangeModel} documentation for details.                
                <param>
                    min  the minimum value of the slider                    
                </param>
                <param>
                    max  the maximum value of the slider                    
                </param>
                <param>
                    value  the initial value of the slider                    
                </param>
                <see>
                    BoundedRangeModel                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="JSlider" type="constructor" line="240">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="245">
                Creates a slider with the specified orientation and the
                  specified minimum, maximum, and initial values.
                  The orientation can be
                  either &lt;code&gt;SwingConstants.VERTICAL&lt;/code&gt; or
                  &lt;code&gt;SwingConstants.HORIZONTAL&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;BoundedRangeModel&lt;/code&gt; that holds the slider&apos;s data
                  handles any issues that may arise from improperly setting the
                  minimum, initial, and maximum values on the slider.  See the{@code BoundedRangeModel} documentation for details.                
                <param>
                    orientation  the orientation of the slider                    
                </param>
                <param>
                    min  the minimum value of the slider                    
                </param>
                <param>
                    max  the maximum value of the slider                    
                </param>
                <param>
                    value  the initial value of the slider                    
                </param>
                <throws>
                    IllegalArgumentException if orientation is not one of {@code VERTICAL}, {@code HORIZONTAL}                    
                </throws>
                <see>
                    BoundedRangeModel                    
                </see>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="JSlider" type="constructor" line="271">
                <params>
                    <param name="orientation" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="279">
                Creates a horizontal slider using the specified
                  BoundedRangeModel.                
            </javadoc>
            <method name="JSlider" type="constructor" line="284">
                <params>
                    <param name="brm" type="BoundedRangeModel"/>
                </params>
            </method>
            <javadoc line="291">
                Gets the UI object which implements the L&amp;F for this component.                
                <return>
                    the SliderUI object that implements the Slider L&F                    
                </return>
            </javadoc>
            <method name="getUI" type="SliderUI" line="296"/>
            <javadoc line="301">
                Sets the UI object which implements the L&amp;F for this component.                
                <param>
                    ui the SliderUI L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the slider's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="312">
                <params>
                    <param name="ui" type="SliderUI"/>
                </params>
            </method>
            <javadoc line="317">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="322">
                <comment line="324">
                    The labels preferred size may be derived from the font                    
                </comment>
                <comment line="325">
                    of the slider, so we must update the UI of the slider first, then                    
                </comment>
                <comment line="326">
                    that of labels.  This way when setSize is called the right                    
                </comment>
                <comment line="327">
                    font is used.                    
                </comment>
            </method>
            <javadoc line="332">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    "SliderUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="339"/>
            <class name="ModelListener" line="344">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <javadoc line="344">
                    We pass Change events along to the listeners with the
                      the slider (instead of the model itself) as the event source.                    
                </javadoc>
                <method name="stateChanged" type="void" line="349">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="355">
                Subclasses that want to handle {@code ChangeEvent}s
                  from the model differently
                  can override this to return
                  an instance of a custom &lt;code&gt;ChangeListener&lt;/code&gt; implementation.
                  The default {@code ChangeListener} simply calls the{@code fireStateChanged} method to forward {@code ChangeEvent}s
                  to the {@code ChangeListener}s that have been added directly to the
                  slider.                
                <see>
                    #changeListener                    
                </see>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    javax.swing.event.ChangeListener                    
                </see>
                <see>
                    javax.swing.BoundedRangeModel                    
                </see>
            </javadoc>
            <method name="createChangeListener" type="ChangeListener" line="369"/>
            <javadoc line="374">
                Adds a ChangeListener to the slider.                
                <param>
                    l the ChangeListener to add                    
                </param>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="381">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="386">
                Removes a ChangeListener from the slider.                
                <param>
                    l the ChangeListener to remove                    
                </param>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="394">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="399">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this JSlider with addChangeListener().                
                <return>
                    all of the <code>ChangeListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="407"/>
            <javadoc line="412">
                Send a {@code ChangeEvent}, whose source is this {@code JSlider}, to
                  all {@code ChangeListener}s that have registered interest in{@code ChangeEvent}s.
                  This method is called each time a {@code ChangeEvent} is received from
                  the model.
                  &lt;p&gt;
                  The event instance is created if necessary, and stored in{@code changeEvent}.                
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="425">
                <declaration name="listeners" type="Object[]" line="426"/>
                <scope line="427">
                    <scope line="428">
                        <scope line="429"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="438">
                Returns the {@code BoundedRangeModel} that handles the slider&apos;s three
                  fundamental properties: minimum, maximum, value.                
                <return>
                    the data model for this component                    
                </return>
                <see>
                    #setModel                    
                </see>
                <see>
                    BoundedRangeModel                    
                </see>
            </javadoc>
            <method name="getModel" type="BoundedRangeModel" line="446"/>
            <javadoc line="451">
                Sets the {@code BoundedRangeModel} that handles the slider&apos;s three
                  fundamental properties: minimum, maximum, value.
                  &lt;p&gt;
                  Attempts to pass a {@code null} model to this method result in
                  undefined behavior, and, most likely, exceptions.                
                <param>
                    newModel the new, {@code non-null} <code>BoundedRangeModel</code> to use                    
                </param>
                <see>
                    #getModel                    
                </see>
                <see>
                    BoundedRangeModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The sliders BoundedRangeModel.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="467">
                <params>
                    <param name="newModel" type="BoundedRangeModel"/>
                </params>
                <declaration name="oldModel" type="BoundedRangeModel" line="468"/>
                <scope line="470"/>
                <scope line="476"/>
                <scope line="480"/>
            </method>
            <javadoc line="493">
                Returns the slider&apos;s current value
                  from the {@code BoundedRangeModel}.                
                <return>
                    the current value of the slider                    
                </return>
                <see>
                    #setValue                    
                </see>
                <see>
                    BoundedRangeModel#getValue                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="501"/>
            <javadoc line="505">
                Sets the slider&apos;s current value to {@code n}.  This method
                  forwards the new value to the model.
                  &lt;p&gt;
                  The data model (an instance of {@code BoundedRangeModel})
                  handles any mathematical
                  issues arising from assigning faulty values.  See the{@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the new value is different from the previous value,
                  all change listeners are notified.                
                <param>
                    n       the new value                    
                </param>
                <see>
                    #getValue                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#setValue                    
                </see>
                <beaninfo>
                    preferred: true
                      description: The sliders current value.                    
                </beaninfo>
            </javadoc>
            <method name="setValue" type="void" line="525">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="m" type="BoundedRangeModel" line="526"/>
                <declaration name="oldValue" type="int" line="527"/>
                <scope line="528"/>
                <scope line="533"/>
            </method>
            <javadoc line="542">
                Returns the minimum value supported by the slider
                  from the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.                
                <return>
                    the value of the model's minimum property                    
                </return>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    BoundedRangeModel#getMinimum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="550"/>
            <javadoc line="555">
                Sets the slider&apos;s minimum value to {@code minimum}.  This method
                  forwards the new minimum value to the model.
                  &lt;p&gt;
                  The data model (an instance of {@code BoundedRangeModel})
                  handles any mathematical
                  issues arising from assigning faulty values.  See the{@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the new minimum value is different from the previous minimum value,
                  all change listeners are notified.                
                <param>
                    minimum  the new minimum                    
                </param>
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#setMinimum                    
                </see>
                <beaninfo>
                    bound: true
                      preferred: true
                      description: The sliders minimum value.                    
                </beaninfo>
            </javadoc>
            <method name="setMinimum" type="void" line="576">
                <params>
                    <param name="minimum" type="int"/>
                </params>
                <declaration name="oldMin" type="int" line="577"/>
            </method>
            <javadoc line="583">
                Returns the maximum value supported by the slider
                  from the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.                
                <return>
                    the value of the model's maximum property                    
                </return>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    BoundedRangeModel#getMaximum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="591"/>
            <javadoc line="596">
                Sets the slider&apos;s maximum value to {@code maximum}.  This method
                  forwards the new maximum value to the model.
                  &lt;p&gt;
                  The data model (an instance of {@code BoundedRangeModel})
                  handles any mathematical
                  issues arising from assigning faulty values.  See the{@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the new maximum value is different from the previous maximum value,
                  all change listeners are notified.                
                <param>
                    maximum  the new maximum                    
                </param>
                <see>
                    #getMaximum                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#setMaximum                    
                </see>
                <beaninfo>
                    bound: true
                      preferred: true
                      description: The sliders maximum value.                    
                </beaninfo>
            </javadoc>
            <method name="setMaximum" type="void" line="617">
                <params>
                    <param name="maximum" type="int"/>
                </params>
                <declaration name="oldMax" type="int" line="618"/>
            </method>
            <javadoc line="624">
                Returns the {@code valueIsAdjusting} property from the model.  For
                  details on how this is used, see the {@code setValueIsAdjusting}documentation.                
                <return>
                    the value of the model's {@code valueIsAdjusting} property                    
                </return>
                <see>
                    #setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="632"/>
            <javadoc line="637">
                Sets the model&apos;s {@code valueIsAdjusting} property.  Slider look and
                  feel implementations should set this property to {@code true} when
                  a knob drag begins, and to {@code false} when the drag ends.                
                <param>
                    b the new value for the {@code valueIsAdjusting} property                    
                </param>
                <see>
                    #getValueIsAdjusting                    
                </see>
                <see>
                    BoundedRangeModel#setValueIsAdjusting                    
                </see>
                <beaninfo>
                    expert: true
                      description: True if the slider knob is being dragged.                    
                </beaninfo>
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="649">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="m" type="BoundedRangeModel" line="650"/>
                <declaration name="oldValue" type="boolean" line="651"/>
                <scope line="654"/>
            </method>
            <javadoc line="663">
                Returns the &quot;extent&quot; from the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.
                  This respresents the range of values &quot;covered&quot; by the knob.                
                <return>
                    an int representing the extent                    
                </return>
                <see>
                    #setExtent                    
                </see>
                <see>
                    BoundedRangeModel#getExtent                    
                </see>
            </javadoc>
            <method name="getExtent" type="int" line="671"/>
            <javadoc line="676">
                Sets the size of the range &quot;covered&quot; by the knob.  Most look
                  and feel implementations will change the value by this amount
                  if the user clicks on either side of the knob.  This method just
                  forwards the new extent value to the model.
                  &lt;p&gt;
                  The data model (an instance of {@code BoundedRangeModel})
                  handles any mathematical
                  issues arising from assigning faulty values.  See the{@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the new extent value is different from the previous extent value,
                  all change listeners are notified.                
                <param>
                    extent the new extent                    
                </param>
                <see>
                    #getExtent                    
                </see>
                <see>
                    BoundedRangeModel#setExtent                    
                </see>
                <beaninfo>
                    expert: true
                      description: Size of the range covered by the knob.                    
                </beaninfo>
            </javadoc>
            <method name="setExtent" type="void" line="697">
                <params>
                    <param name="extent" type="int"/>
                </params>
            </method>
            <javadoc line="702">
                Return this slider&apos;s vertical or horizontal orientation.                
                <return>
                    {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}                    
                </return>
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <method name="getOrientation" type="int" line="708"/>
            <javadoc line="713">
                Set the slider&apos;s orientation to either {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}.                
                <param>
                    orientation {@code HORIZONTAL} or {@code VERTICAL}                    
                </param>
                <throws>
                    IllegalArgumentException if orientation is not one of {@code VERTICAL}, {@code HORIZONTAL}                    
                </throws>
                <see>
                    #getOrientation                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      attribute: visualUpdate true
                      description: Set the scrollbars orientation to either VERTICAL or HORIZONTAL.
                      enum: VERTICAL JSlider.VERTICAL
                      HORIZONTAL JSlider.HORIZONTAL                    
                </beaninfo>
            </javadoc>
            <method name="setOrientation" type="void" line="730">
                <params>
                    <param name="orientation" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="732"/>
                <scope line="736"/>
                <scope line="744"/>
            </method>
            <javadoc line="750">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setFont" type="void" line="755">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="760">
                {@inheritDoc}                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="imageUpdate" type="boolean" line="764">
                <params>
                    <param name="img" type="Image"/>
                    <param name="infoflags" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="769">
                    Check that there is a label with such image                    
                </comment>
                <scope line="765"/>
                <declaration name="elements" type="Enumeration" line="770"/>
                <scope line="772">
                    <declaration name="component" type="Component" line="773"/>
                    <scope line="775">
                        <declaration name="label" type="JLabel" line="776"/>
                        <scope line="779"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="788">
                Returns the dictionary of what labels to draw at which values.                
                <return>
                    the <code>Dictionary</code> containing labels and
                      where to draw them                    
                </return>
            </javadoc>
            <method name="getLabelTable" type="Dictionary" line="794">
                <comment line="795">
                    if ( labelTable == null &amp;&amp; getMajorTickSpacing() &gt; 0 ) {
                    setLabelTable( createStandardLabels( getMajorTickSpacing() ) );
                    }                    
                </comment>
            </method>
            <javadoc line="804">
                Used to specify what label will be drawn at any given value.
                  The key-value pairs are of this format:
                  &lt;code&gt;{ Integer value, java.swing.JComponent label }&lt;/code&gt;.
                  &lt;p&gt;
                  An easy way to generate a standard table of value labels is by using the{@code createStandardLabels} method.
                  &lt;p&gt;
                  Once the labels have been set, this method calls {@link #updateLabelUIs}.
                  Note that the labels are only painted if the {@code paintLabels}property is {@code true}.                
                <param>
                    labels new {@code Dictionary} of labels, or {@code null} to
                      remove all labels                    
                </param>
                <see>
                    #createStandardLabels(int)                    
                </see>
                <see>
                    #getLabelTable                    
                </see>
                <see>
                    #setPaintLabels                    
                </see>
                <beaninfo>
                    hidden: true
                      bound: true
                      attribute: visualUpdate true
                      description: Specifies what labels will be drawn for any given value.                    
                </beaninfo>
            </javadoc>
            <method name="setLabelTable" type="void" line="827">
                <params>
                    <param name="labels" type="Dictionary"/>
                </params>
                <declaration name="oldTable" type="Dictionary" line="828"/>
                <scope line="832"/>
            </method>
            <javadoc line="839">
                Updates the UIs for the labels in the label table by calling{@code updateUI} on each label.  The UIs are updated from
                  the current look and feel.  The labels are also set to their
                  preferred size.                
                <see>
                    #setLabelTable                    
                </see>
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateLabelUIs" type="void" line="848">
                <declaration name="labelTable" type="Dictionary" line="849"/>
                <scope line="851"/>
                <declaration name="labels" type="Enumeration" line="854"/>
                <scope line="855">
                    <declaration name="component" type="JComponent" line="856"/>
                </scope>
            </method>
            <method name="updateLabelSizes" type="void" line="862">
                <declaration name="labelTable" type="Dictionary" line="863"/>
                <scope line="864">
                    <declaration name="labels" type="Enumeration" line="865"/>
                    <scope line="866">
                        <declaration name="component" type="JComponent" line="867"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="874">
                Creates a {@code Hashtable} of numerical text labels, starting at the
                  slider minimum, and using the increment specified.
                  For example, if you call &lt;code&gt;createStandardLabels( 10 )&lt;/code&gt;
                  and the slider minimum is zero,
                  then labels will be created for the values 0, 10, 20, 30, and so on.
                  &lt;p&gt;
                  For the labels to be drawn on the slider, the returned {@code Hashtable}must be passed into {@code setLabelTable}, and {@code setPaintLabels}must be set to {@code true}.
                  &lt;p&gt;
                  For further details on the makeup of the returned {@code Hashtable}, see
                  the {@code setLabelTable} documentation.                
                <param>
                    increment  distance between labels in the generated hashtable                    
                </param>
                <return>
                    a new {@code Hashtable} of labels                    
                </return>
                <see>
                    #setLabelTable                    
                </see>
                <see>
                    #setPaintLabels                    
                </see>
                <throws>
                    IllegalArgumentException if {@code increment} is less than or
                      equal to zero                    
                </throws>
            </javadoc>
            <method name="createStandardLabels" type="Hashtable" line="895">
                <params>
                    <param name="increment" type="int"/>
                </params>
            </method>
            <javadoc line="900">
                Creates a {@code Hashtable} of numerical text labels, starting at the
                  starting point specified, and using the increment specified.
                  For example, if you call
                  &lt;code&gt;createStandardLabels( 10, 2 )&lt;/code&gt;,
                  then labels will be created for the values 2, 12, 22, 32, and so on.
                  &lt;p&gt;
                  For the labels to be drawn on the slider, the returned {@code Hashtable}must be passed into {@code setLabelTable}, and {@code setPaintLabels}must be set to {@code true}.
                  &lt;p&gt;
                  For further details on the makeup of the returned {@code Hashtable}, see
                  the {@code setLabelTable} documentation.                
                <param>
                    increment  distance between labels in the generated hashtable                    
                </param>
                <param>
                    start      value at which the labels will begin                    
                </param>
                <return>
                    a new {@code Hashtable} of labels                    
                </return>
                <see>
                    #setLabelTable                    
                </see>
                <see>
                    #setPaintLabels                    
                </see>
                <exception>
                    IllegalArgumentException if {@code start} is
                      out of range, or if {@code increment} is less than or equal
                      to zero                    
                </exception>
            </javadoc>
            <method name="createStandardLabels" type="Hashtable" line="923">
                <params>
                    <param name="increment" type="int"/>
                    <param name="start" type="int"/>
                </params>
                <comment line="982">
                    Save the labels that were added by the developer                    
                </comment>
                <comment line="994">
                    Add the saved labels                    
                </comment>
                <scope line="924"/>
                <scope line="928"/>
                <class name="SmartHashtable" line="932">
                    <extends class="Hashtable">
                        <type_params>
                            <type_param name="Object"/>
                            <type_param name="Object"/>
                        </type_params>
                    </extends>
                    <implements interface="PropertyChangeListener"/>
                    <declaration name="increment" type="int" line="933"/>
                    <declaration name="start" type="int" line="934"/>
                    <declaration name="startAtMin" type="boolean" line="935"/>
                    <class name="LabelUIResource" line="937">
                        <extends class="JLabel"/>
                        <implements interface="UIResource"/>
                        <method name="LabelUIResource" type="constructor" line="938">
                            <params>
                                <param name="text" type="String"/>
                                <param name="alignment" type="int"/>
                            </params>
                        </method>
                        <method name="getFont" type="Font" line="943">
                            <declaration name="font" type="Font" line="944"/>
                            <scope line="945"/>
                        </method>
                        <method name="getForeground" type="Color" line="951">
                            <declaration name="fg" type="Color" line="952"/>
                            <scope line="953"/>
                            <scope line="956"/>
                        </method>
                    </class>
                    <method name="SmartHashtable" type="constructor" line="963">
                        <params>
                            <param name="increment" type="int"/>
                            <param name="start" type="int"/>
                        </params>
                    </method>
                    <method name="propertyChange" type="void" line="971">
                        <params>
                            <param name="e" type="PropertyChangeEvent"/>
                        </params>
                        <comment line="982">
                            Save the labels that were added by the developer                            
                        </comment>
                        <comment line="994">
                            Add the saved labels                            
                        </comment>
                        <scope line="972"/>
                        <scope line="977">
                            <declaration name="keys" type="Enumeration" line="979"/>
                            <declaration name="hashtable" type="Hashtable&lt;Object,Object&gt;" line="980"/>
                            <scope line="983">
                                <declaration name="key" type="Object" line="984"/>
                                <declaration name="value" type="Object" line="985"/>
                                <scope line="986"/>
                            </scope>
                            <scope line="996">
                                <declaration name="key" type="Object" line="997"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="createLabels" type="void" line="1005">
                        <scope line="1006"/>
                    </method>
                </class>
                <declaration name="table" type="SmartHashtable" line="1012"/>
                <declaration name="labelTable" type="Dictionary" line="1014"/>
                <scope line="1016"/>
            </method>
            <javadoc line="1026">
                Returns true if the value-range shown for the slider is reversed,                
                <return>
                    true if the slider values are reversed from their normal order                    
                </return>
                <see>
                    #setInverted                    
                </see>
            </javadoc>
            <method name="getInverted" type="boolean" line="1032"/>
            <javadoc line="1037">
                Specify true to reverse the value-range shown for the slider and false to
                  put the value range in the normal order.  The order depends on the
                  slider&apos;s &lt;code&gt;ComponentOrientation&lt;/code&gt; property.  Normal (non-inverted)
                  horizontal sliders with a &lt;code&gt;ComponentOrientation&lt;/code&gt; value of
                  &lt;code&gt;LEFT_TO_RIGHT&lt;/code&gt; have their maximum on the right.
                  Normal horizontal sliders with a &lt;code&gt;ComponentOrientation&lt;/code&gt; value of
                  &lt;code&gt;RIGHT_TO_LEFT&lt;/code&gt; have their maximum on the left.  Normal vertical
                  sliders have their maximum on the top.  These labels are reversed when the
                  slider is inverted.
                  &lt;p&gt;
                  By default, the value of this property is {@code false}.                
                <param>
                    b  true to reverse the slider values from their normal order                    
                </param>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If true reverses the slider values from their normal order                    
                </beaninfo>
            </javadoc>
            <method name="setInverted" type="void" line="1057">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1058"/>
                <scope line="1061"/>
            </method>
            <javadoc line="1067">
                This method returns the major tick spacing.  The number that is returned
                  represents the distance, measured in values, between each major tick mark.
                  If you have a slider with a range from 0 to 50 and the major tick spacing
                  is set to 10, you will get major ticks next to the following values:
                  0, 10, 20, 30, 40, 50.                
                <return>
                    the number of values between major ticks                    
                </return>
                <see>
                    #setMajorTickSpacing                    
                </see>
            </javadoc>
            <method name="getMajorTickSpacing" type="int" line="1077"/>
            <javadoc line="1082">
                This method sets the major tick spacing.  The number that is passed in
                  represents the distance, measured in values, between each major tick mark.
                  If you have a slider with a range from 0 to 50 and the major tick spacing
                  is set to 10, you will get major ticks next to the following values:
                  0, 10, 20, 30, 40, 50.
                  &lt;p&gt;
                  In order for major ticks to be painted, {@code setPaintTicks} must be
                  set to {@code true}.
                  &lt;p&gt;
                  This method will also set up a label table for you.
                  If there is not already a label table, and the major tick spacing is{@code &gt; 0}, and {@code getPaintLabels} returns{@code true}, a standard label table will be generated (by calling{@code createStandardLabels}) with labels at the major tick marks.
                  For the example above, you would get text labels: &quot;0&quot;,
                  &quot;10&quot;, &quot;20&quot;, &quot;30&quot;, &quot;40&quot;, &quot;50&quot;.
                  The label table is then set on the slider by calling{@code setLabelTable}.                
                <param>
                    n  new value for the {@code majorTickSpacing} property                    
                </param>
                <see>
                    #getMajorTickSpacing                    
                </see>
                <see>
                    #setPaintTicks                    
                </see>
                <see>
                    #setLabelTable                    
                </see>
                <see>
                    #createStandardLabels(int)                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Sets the number of values between major tick marks.                    
                </beaninfo>
            </javadoc>
            <method name="setMajorTickSpacing" type="void" line="1113">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="1114"/>
                <scope line="1116"/>
                <scope line="1120"/>
            </method>
            <javadoc line="1127">
                This method returns the minor tick spacing.  The number that is returned
                  represents the distance, measured in values, between each minor tick mark.
                  If you have a slider with a range from 0 to 50 and the minor tick spacing
                  is set to 10, you will get minor ticks next to the following values:
                  0, 10, 20, 30, 40, 50.                
                <return>
                    the number of values between minor ticks                    
                </return>
                <see>
                    #getMinorTickSpacing                    
                </see>
            </javadoc>
            <method name="getMinorTickSpacing" type="int" line="1137"/>
            <javadoc line="1142">
                This method sets the minor tick spacing.  The number that is passed in
                  represents the distance, measured in values, between each minor tick mark.
                  If you have a slider with a range from 0 to 50 and the minor tick spacing
                  is set to 10, you will get minor ticks next to the following values:
                  0, 10, 20, 30, 40, 50.
                  &lt;p&gt;
                  In order for minor ticks to be painted, {@code setPaintTicks} must be
                  set to {@code true}.                
                <param>
                    n  new value for the {@code minorTickSpacing} property                    
                </param>
                <see>
                    #getMinorTickSpacing                    
                </see>
                <see>
                    #setPaintTicks                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Sets the number of values between minor tick marks.                    
                </beaninfo>
            </javadoc>
            <method name="setMinorTickSpacing" type="void" line="1160">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="1161"/>
                <scope line="1164"/>
            </method>
            <javadoc line="1170">
                Returns true if the knob (and the data value it represents)
                  resolve to the closest tick mark next to where the user
                  positioned the knob.                
                <return>
                    true if the value snaps to the nearest tick mark, else false                    
                </return>
                <see>
                    #setSnapToTicks                    
                </see>
            </javadoc>
            <method name="getSnapToTicks" type="boolean" line="1178"/>
            <javadoc line="1183">
                Returns true if the knob (and the data value it represents)
                  resolve to the closest slider value next to where the user
                  positioned the knob.                
                <return>
                    true if the value snaps to the nearest slider value, else false                    
                </return>
                <see>
                    #setSnapToValue                    
                </see>
            </javadoc>
            <method name="getSnapToValue" type="boolean" line="1191"/>
            <javadoc line="1196">
                Specifying true makes the knob (and the data value it represents)
                  resolve to the closest tick mark next to where the user
                  positioned the knob.
                  By default, this property is {@code false}.                
                <param>
                    b  true to snap the knob to the nearest tick mark                    
                </param>
                <see>
                    #getSnapToTicks                    
                </see>
                <beaninfo>
                    bound: true
                      description: If true snap the knob to the nearest tick mark.                    
                </beaninfo>
            </javadoc>
            <method name="setSnapToTicks" type="void" line="1208">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1209"/>
            </method>
            <javadoc line="1215">
                Specifying true makes the knob (and the data value it represents)
                  resolve to the closest slider value next to where the user
                  positioned the knob. If the {@code snapToTicks} property has also been
                  set to {@code true}, the snap-to-ticks behavior will prevail.
                  By default, the snapToValue property is {@code true}.                
                <param>
                    b  true to snap the knob to the nearest slider value                    
                </param>
                <see>
                    #getSnapToValue                    
                </see>
                <see>
                    #setSnapToTicks                    
                </see>
                <beaninfo>
                    bound: true
                      description: If true snap the knob to the nearest slider value.                    
                </beaninfo>
            </javadoc>
            <method name="setSnapToValue" type="void" line="1229">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1230"/>
            </method>
            <javadoc line="1236">
                Tells if tick marks are to be painted.                
                <return>
                    true if tick marks are painted, else false                    
                </return>
                <see>
                    #setPaintTicks                    
                </see>
            </javadoc>
            <method name="getPaintTicks" type="boolean" line="1241"/>
            <javadoc line="1246">
                Determines whether tick marks are painted on the slider.
                  By default, this property is {@code false}.                
                <param>
                    b  whether or not tick marks should be painted                    
                </param>
                <see>
                    #getPaintTicks                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If true tick marks are painted on the slider.                    
                </beaninfo>
            </javadoc>
            <method name="setPaintTicks" type="void" line="1257">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1258"/>
                <scope line="1261"/>
            </method>
            <javadoc line="1267">
                Tells if the track (area the slider slides in) is to be painted.                
                <return>
                    true if track is painted, else false                    
                </return>
                <see>
                    #setPaintTrack                    
                </see>
            </javadoc>
            <method name="getPaintTrack" type="boolean" line="1272"/>
            <javadoc line="1277">
                Determines whether the track is painted on the slider.
                  By default, this property is {@code true}.                
                <param>
                    b  whether or not to paint the slider track                    
                </param>
                <see>
                    #getPaintTrack                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If true, the track is painted on the slider.                    
                </beaninfo>
            </javadoc>
            <method name="setPaintTrack" type="void" line="1288">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1289"/>
                <scope line="1292"/>
            </method>
            <javadoc line="1298">
                Tells if labels are to be painted.                
                <return>
                    true if labels are painted, else false                    
                </return>
                <see>
                    #setPaintLabels                    
                </see>
            </javadoc>
            <method name="getPaintLabels" type="boolean" line="1303"/>
            <javadoc line="1308">
                Determines whether labels are painted on the slider.
                  &lt;p&gt;
                  This method will also set up a label table for you.
                  If there is not already a label table, and the major tick spacing is{@code &gt; 0},
                  a standard label table will be generated (by calling{@code createStandardLabels}) with labels at the major tick marks.
                  The label table is then set on the slider by calling{@code setLabelTable}.
                  &lt;p&gt;
                  By default, this property is {@code false}.                
                <param>
                    b  whether or not to paint labels                    
                </param>
                <see>
                    #getPaintLabels                    
                </see>
                <see>
                    #getLabelTable                    
                </see>
                <see>
                    #createStandardLabels(int)                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If true labels are painted on the slider.                    
                </beaninfo>
            </javadoc>
            <method name="setPaintLabels" type="void" line="1330">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1331"/>
                <scope line="1333"/>
                <scope line="1337"/>
            </method>
            <javadoc line="1344">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1348">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1350">
                    <declaration name="count" type="byte" line="1351"/>
                    <scope line="1353"/>
                </scope>
            </method>
            <javadoc line="1360">
                Returns a string representation of this JSlider. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JSlider.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1369">
                <declaration name="paintTicksString" type="String" line="1370"/>
                <declaration name="paintTrackString" type="String" line="1372"/>
                <declaration name="paintLabelsString" type="String" line="1374"/>
                <declaration name="isInvertedString" type="String" line="1376"/>
                <declaration name="snapToTicksString" type="String" line="1378"/>
                <declaration name="snapToValueString" type="String" line="1380"/>
                <declaration name="orientationString" type="String" line="1382"/>
            </method>
            <javadoc line="1402">
                Gets the AccessibleContext associated with this JSlider.
                  For sliders, the AccessibleContext takes the form of an
                  AccessibleJSlider.
                  A new AccessibleJSlider instance is created if necessary.                
                <return>
                    an AccessibleJSlider that serves as the
                      AccessibleContext of this JSlider                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1411">
                <scope line="1412"/>
            </method>
            <class name="AccessibleJSlider" line="1418">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="1418">
                    This class implements accessibility support for the
                      &lt;code&gt;JSlider&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to slider user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1435">
                    Get the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1442">
                    <declaration name="states" type="AccessibleStateSet" line="1443"/>
                    <scope line="1444"/>
                    <scope line="1447"/>
                    <scope line="1450"/>
                </method>
                <javadoc line="1456">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1461"/>
                <javadoc line="1465">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="1473"/>
                <javadoc line="1477">
                    Get the accessible value of this object.                    
                    <return>
                        The current value of this object.                        
                    </return>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="1482"/>
                <javadoc line="1486">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="1491">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <comment line="1492">
                        TIGER - 4422535                        
                    </comment>
                    <scope line="1493"/>
                </method>
                <javadoc line="1500">
                    Get the minimum accessible value of this object.                    
                    <return>
                        The minimum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="1505"/>
                <javadoc line="1509">
                    Get the maximum accessible value of this object.                    
                    <return>
                        The maximum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="1514">
                    <comment line="1515">
                        TIGER - 4422362                        
                    </comment>
                    <declaration name="model" type="BoundedRangeModel" line="1516"/>
                </method>
            </class>
        </class>
    </source>