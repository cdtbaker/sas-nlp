<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JToggleButton" line="10">
            <extends class="AbstractButton"/>
            <implements interface="Accessible"/>
            <javadoc line="10">
                An implementation of a two-state button.
                  The &lt;code&gt;JRadioButton&lt;/code&gt; and &lt;code&gt;JCheckBox&lt;/code&gt; classes
                  are subclasses of this class.
                  For information on using them see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/button.html&quot;&gt;How to Use Buttons, Check Boxes, and Radio Buttons&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  Buttons can be configured, and to some degree controlled, by
                  &lt;code&gt;&lt;a href=&quot;Action.html&quot;&gt;Action&lt;/a&gt;&lt;/code&gt;s.  Using an
                  &lt;code&gt;Action&lt;/code&gt; with a button has many benefits beyond directly
                  configuring a button.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details, and you can find more information in &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html&quot;&gt;How
                  to Use Actions&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfoattribute>
                    : isContainer false
                      description: An implementation of a two-state button.                    
                </beaninfoattribute>
                <see>
                    JRadioButton                    
                </see>
                <see>
                    JCheckBox                    
                </see>
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="48"/>
            <javadoc line="48">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <javadoc line="53">
                Creates an initially unselected toggle button
                  without setting the text or image.                
            </javadoc>
            <method name="JToggleButton" type="constructor" line="57"/>
            <javadoc line="60">
                Creates an initially unselected toggle button
                  with the specified image but no text.                
                <param>
                    icon  the image that the button should display                    
                </param>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="65">
                <params>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="68">
                Creates a toggle button with the specified image
                  and selection state, but no text.                
                <param>
                    icon  the image that the button should display                    
                </param>
                <param>
                    selected  if true, the button is initially selected;
                      otherwise, the button is initially unselected                    
                </param>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="75">
                <params>
                    <param name="icon" type="Icon"/>
                    <param name="selected" type="boolean"/>
                </params>
            </method>
            <javadoc line="78">
                Creates an unselected toggle button with the specified text.                
                <param>
                    text  the string displayed on the toggle button                    
                </param>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="82">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="85">
                Creates a toggle button with the specified text
                  and selection state.                
                <param>
                    text  the string displayed on the toggle button                    
                </param>
                <param>
                    selected  if true, the button is initially selected;
                      otherwise, the button is initially unselected                    
                </param>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="92">
                <params>
                    <param name="text" type="String"/>
                    <param name="selected" type="boolean"/>
                </params>
            </method>
            <javadoc line="95">
                Creates a toggle button where properties are taken from the
                  Action supplied.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="100">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="104">
                Creates a toggle button that has the specified text and image,
                  and that is initially unselected.                
                <param>
                    text the string displayed on the button                    
                </param>
                <param>
                    icon  the image that the button should display                    
                </param>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="110">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="113">
                Creates a toggle button with the specified text, image, and
                  selection state.                
                <param>
                    text the text of the toggle button                    
                </param>
                <param>
                    icon  the image that the button should display                    
                </param>
                <param>
                    selected  if true, the button is initially selected;
                      otherwise, the button is initially unselected                    
                </param>
            </javadoc>
            <method name="JToggleButton" type="constructor" line="121">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="selected" type="boolean"/>
                </params>
            </method>
            <javadoc line="126">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="130"/>
            <javadoc line="133">
                Returns a string that specifies the name of the l&amp;f class
                  that renders this component.                
                <return>
                    String "ToggleButtonUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfodescription>
                    : A string that specifies the name of the L&F class                    
                </beaninfodescription>
            </javadoc>
            <method name="getUIClassID" type="String" line="141"/>
            <javadoc line="144">
                Overriden to return true, JToggleButton supports
                  the selected state.                
            </javadoc>
            <method name="shouldUpdateSelectedStateFromAction" type="boolean" line="148"/>
            <class name="ToggleButtonModel" line="151">
                <extends class="DefaultButtonModel"/>
                <javadoc line="151">
                    The ToggleButton model
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="164">
                    Creates a new ToggleButton Model                    
                </javadoc>
                <method name="ToggleButtonModel" type="constructor" line="167"/>
                <javadoc line="169">
                    Checks if the button is selected.                    
                </javadoc>
                <method name="isSelected" type="boolean" line="172"/>
                <javadoc line="175">
                    Sets the selected state of the button.                    
                    <param>
                        b true selects the toggle button,
                          false deselects the toggle button.                        
                    </param>
                </javadoc>
                <method name="setSelected" type="void" line="180">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <declaration name="group" type="ButtonGroup" line="181"/>
                    <scope line="182"/>
                    <scope line="186"/>
                    <scope line="189"/>
                    <scope line="192"/>
                </method>
                <javadoc line="198">
                    Sets the pressed state of the toggle button.                    
                </javadoc>
                <method name="setPressed" type="void" line="201">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                    <scope line="202"/>
                    <scope line="205"/>
                    <scope line="208"/>
                    <scope line="211"/>
                    <scope line="215">
                        <declaration name="modifiers" type="int" line="216"/>
                        <declaration name="currentEvent" type="AWTEvent" line="217"/>
                        <scope line="218"/>
                        <scope line="221"/>
                    </scope>
                </method>
            </class>
            <javadoc line="228">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="232">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="234">
                    <declaration name="count" type="byte" line="235"/>
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="242">
                Returns a string representation of this JToggleButton. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JToggleButton.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="250"/>
            <javadoc line="253">
                Gets the AccessibleContext associated with this JToggleButton.
                  For toggle buttons, the AccessibleContext takes the form of an
                  AccessibleJToggleButton.
                  A new AccessibleJToggleButton instance is created if necessary.                
                <return>
                    an AccessibleJToggleButton that serves as the
                      AccessibleContext of this JToggleButton                    
                </return>
                <beaninfoexpert>
                    : true
                      description: The AccessibleContext associated with this ToggleButton.                    
                </beaninfoexpert>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="263">
                <scope line="264"/>
            </method>
            <class name="AccessibleJToggleButton" line="269">
                <extends class="AccessibleAbstractButton"/>
                <implements interface="ItemListener"/>
                <javadoc line="269">
                    This class implements accessibility support for the
                      &lt;code&gt;JToggleButton&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to toggle button user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <method name="AccessibleJToggleButton" type="constructor" line="285"/>
                <javadoc line="289">
                    Fire accessible property change events when the state of the
                      toggle button changes.                    
                </javadoc>
                <method name="itemStateChanged" type="void" line="293">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                    <declaration name="tb" type="JToggleButton" line="294"/>
                    <scope line="295">
                        <scope line="296"/>
                        <scope line="299"/>
                    </scope>
                </method>
                <javadoc line="304">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="309"/>
            </class>
        </class>
    </source>