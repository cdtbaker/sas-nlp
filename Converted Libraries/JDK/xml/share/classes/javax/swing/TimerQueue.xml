<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.concurrent.locks"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="sun.awt.AppContext"/>
        <class name="TimerQueue" line="7">
            <implements interface="Runnable"/>
            <javadoc line="7">
                Internal class to manage all Timers using one thread.
                  TimerQueue manages a queue of Timers. The Timers are chained
                  together in a linked list sorted by the order in which they will expire.                
                <author>
                    Dave Moore                    
                </author>
                <author>
                    Igor Kushnirskiy                    
                </author>
            </javadoc>
            <declaration name="sharedInstanceKey" type="Object" line="15"/>
            <declaration name="expiredTimersKey" type="Object" line="16"/>
            <declaration name="queue" type="DelayQueue&lt;DelayedTimer&gt;" line="17"/>
            <declaration name="running" type="boolean" line="18"/>
            <declaration name="runningLock" type="Lock" line="19"/>
            <declaration name="classLock" type="Object" line="20"/>
            <declaration name="NANO_ORIGIN" type="long" line="21"/>
            <javadoc line="21">
                Base of nanosecond timings, to avoid wrapping                
            </javadoc>
            <javadoc line="25">
                Constructor for TimerQueue.                
            </javadoc>
            <method name="TimerQueue" type="constructor" line="28"/>
            <method name="sharedInstance" type="TimerQueue" line="34">
                <scope line="35">
                    <declaration name="sharedInst" type="TimerQueue" line="36"/>
                    <scope line="37"/>
                </scope>
            </method>
            <method name="startIfNeeded" type="void" line="44">
                <scope line="45">
                    <scope line="47">
                        <declaration name="threadGroup" type="ThreadGroup" line="48"/>
                        <anonymous_class line="49">
                            <method name="run" type="Object" line="50">
                                <declaration name="timerThread" type="Thread" line="51"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="61"/>
                </scope>
            </method>
            <method name="addTimer" type="void" line="66">
                <params>
                    <param name="timer" type="Timer"/>
                    <param name="delayMillis" type="long"/>
                </params>
                <scope line="68">
                    <scope line="69"/>
                </scope>
                <scope line="73"/>
            </method>
            <method name="addTimer" type="void" line="77">
                <params>
                    <param name="delayedTimer" type="DelayedTimer"/>
                </params>
            </method>
            <method name="removeTimer" type="void" line="89">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <scope line="91">
                    <scope line="92"/>
                </scope>
                <scope line="97"/>
            </method>
            <method name="containsTimer" type="boolean" line="101">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <scope line="103"/>
                <scope line="106"/>
            </method>
            <method name="run" type="void" line="110">
                <scope line="112">
                    <scope line="113">
                        <scope line="114">
                            <declaration name="timer" type="Timer" line="115"/>
                            <scope line="117">
                                <declaration name="delayedTimer" type="DelayedTimer" line="118"/>
                                <scope line="119">
                                    <scope line="122"/>
                                </scope>
                            </scope>
                            <scope line="128"/>
                            <scope line="130"/>
                        </scope>
                        <scope line="134">
                            <scope line="135"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="141">
                    <scope line="142"/>
                </scope>
                <scope line="147"/>
            </method>
            <method name="toString" type="String" line="152">
                <declaration name="buf" type="StringBuilder" line="153"/>
                <declaration name="isFirst" type="boolean" line="155"/>
                <scope line="156">
                    <scope line="157"/>
                </scope>
            </method>
            <javadoc line="166">
                Returns nanosecond time offset by origin                
            </javadoc>
            <method name="now" type="long" line="169"/>
            <class name="DelayedTimer" line="172">
                <implements interface="Delayed"/>
                <declaration name="sequencer" type="AtomicLong" line="173"/>
                <javadoc line="173">
                    Sequence number to break scheduling ties, and in turn to
                      guarantee FIFO order among tied entries.                    
                </javadoc>
                <declaration name="sequenceNumber" type="long" line="178"/>
                <javadoc line="178">
                    Sequence number to break ties FIFO                    
                </javadoc>
                <declaration name="time" type="long" line="182"/>
                <javadoc line="182">
                    The time the task is enabled to execute in nanoTime units                    
                </javadoc>
                <declaration name="timer" type="Timer" line="186"/>
                <method name="DelayedTimer" type="constructor" line="187">
                    <params>
                        <param name="timer" type="Timer"/>
                        <param name="nanos" type="long"/>
                    </params>
                </method>
                <method name="getDelay" type="long" line="192">
                    <params>
                        <param name="unit" type="TimeUnit"/>
                    </params>
                </method>
                <method name="setTime" type="void" line="195">
                    <params>
                        <param name="nanos" type="long"/>
                    </params>
                </method>
                <method name="getTimer" type="Timer" line="198"/>
                <method name="compareTo" type="int" line="201">
                    <params>
                        <param name="other" type="Delayed"/>
                    </params>
                    <scope line="202"/>
                    <scope line="205">
                        <declaration name="x" type="DelayedTimer" line="206"/>
                        <declaration name="diff" type="long" line="207"/>
                        <scope line="208"/>
                        <scope line="211"/>
                        <scope line="214"/>
                        <scope line="217"/>
                    </scope>
                    <declaration name="d" type="long" line="221"/>
                </method>
            </class>
        </class>
    </source>