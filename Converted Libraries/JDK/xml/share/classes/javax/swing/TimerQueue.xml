<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <import package="java.util.concurrent"/>
        <import package="java.util.concurrent.locks"/>
        <import package="java.util.concurrent.atomic.AtomicLong"/>
        <import package="sun.awt.AppContext"/>
        <class name="TimerQueue" line="40">
            <comment line="60">
                Lock object used in place of class object for synchronization.
                 (4187686)                
            </comment>
            <implements interface="Runnable"/>
            <javadoc line="40">
                Internal class to manage all Timers using one thread.
                  TimerQueue manages a queue of Timers. The Timers are chained
                  together in a linked list sorted by the order in which they will expire.                
                <author>
                    Dave Moore                    
                </author>
                <author>
                    Igor Kushnirskiy                    
                </author>
            </javadoc>
            <declaration name="sharedInstanceKey" type="Object" line="50"/>
            <declaration name="expiredTimersKey" type="Object" line="52"/>
            <declaration name="queue" type="DelayQueue&lt;DelayedTimer&gt;" line="55"/>
            <declaration name="running" type="boolean" line="56"/>
            <declaration name="runningLock" type="Lock" line="57"/>
            <declaration name="classLock" type="Object" line="62"/>
            <declaration name="NANO_ORIGIN" type="long" line="64"/>
            <javadoc line="64">
                Base of nanosecond timings, to avoid wrapping                
            </javadoc>
            <javadoc line="67">
                Constructor for TimerQueue.                
            </javadoc>
            <method name="TimerQueue" type="constructor" line="70">
                <comment line="73">
                    Now start the TimerQueue thread.                    
                </comment>
            </method>
            <method name="sharedInstance" type="TimerQueue" line="79">
                <scope line="80">
                    <declaration name="sharedInst" type="TimerQueue" line="81"/>
                    <scope line="84"/>
                </scope>
            </method>
            <method name="startIfNeeded" type="void" line="93">
                <scope line="94">
                    <scope line="96">
                        <declaration name="threadGroup" type="ThreadGroup" line="97"/>
                        <anonymous_class line="100">
                            <method name="run" type="Object" line="101">
                                <declaration name="timerThread" type="Thread" line="102"/>
                            </method>
                        </anonymous_class>
                    </scope>
                    <scope line="111"/>
                </scope>
            </method>
            <method name="addTimer" type="void" line="117">
                <params>
                    <param name="timer" type="Timer"/>
                    <param name="delayMillis" type="long"/>
                </params>
                <comment line="120">
                    If the Timer is already in the queue, then ignore the add.                    
                </comment>
                <scope line="119">
                    <scope line="121"/>
                </scope>
                <scope line="126"/>
            </method>
            <method name="addTimer" type="void" line="131">
                <params>
                    <param name="delayedTimer" type="DelayedTimer"/>
                </params>
                <declaration name="timer" type="Timer" line="134"/>
                <scope line="136"/>
                <scope line="139"/>
            </method>
            <method name="removeTimer" type="void" line="144">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <scope line="146">
                    <scope line="147"/>
                </scope>
                <scope line="151"/>
            </method>
            <method name="containsTimer" type="boolean" line="156">
                <params>
                    <param name="timer" type="Timer"/>
                </params>
                <scope line="158"/>
                <scope line="160"/>
            </method>
            <method name="run" type="void" line="166">
                <comment line="176">
                    Timer is not removed after we get it from
                     the queue and before the lock on the timer is
                     acquired                    
                </comment>
                <comment line="181">
                    have timer post an event                    
                </comment>
                <comment line="195">
                    Shouldn&apos;t ignore InterruptedExceptions here, so AppContext                    
                </comment>
                <comment line="196">
                    is disposed gracefully, see 6799345 for details                    
                </comment>
                <comment line="204">
                    Mark all the timers we contain as not being queued.                    
                </comment>
                <scope line="168">
                    <scope line="169">
                        <scope line="170">
                            <declaration name="timer" type="Timer" line="171"/>
                            <scope line="173">
                                <declaration name="delayedTimer" type="DelayedTimer" line="174"/>
                                <scope line="175">
                                    <scope line="183"/>
                                </scope>
                            </scope>
                            <scope line="190"/>
                            <scope line="191"/>
                        </scope>
                        <scope line="194">
                            <scope line="197"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="203">
                    <scope line="205"/>
                </scope>
                <scope line="209"/>
            </method>
            <method name="toString" type="String" line="216">
                <declaration name="buf" type="StringBuilder" line="217"/>
                <declaration name="isFirst" type="boolean" line="219"/>
                <scope line="220">
                    <scope line="221"/>
                </scope>
            </method>
            <javadoc line="231">
                Returns nanosecond time offset by origin                
            </javadoc>
            <method name="now" type="long" line="234"/>
            <class name="DelayedTimer" line="238">
                <comment line="240">
                    most of it copied from                    
                </comment>
                <comment line="241">
                    java.util.concurrent.ScheduledThreadPoolExecutor                    
                </comment>
                <implements interface="Delayed"/>
                <declaration name="sequencer" type="AtomicLong" line="242"/>
                <javadoc line="242">
                    Sequence number to break scheduling ties, and in turn to
                      guarantee FIFO order among tied entries.                    
                </javadoc>
                <declaration name="sequenceNumber" type="long" line="248"/>
                <javadoc line="248">
                    Sequence number to break ties FIFO                    
                </javadoc>
                <declaration name="time" type="long" line="252"/>
                <javadoc line="252">
                    The time the task is enabled to execute in nanoTime units                    
                </javadoc>
                <declaration name="timer" type="Timer" line="255"/>
                <method name="DelayedTimer" type="constructor" line="257">
                    <params>
                        <param name="timer" type="Timer"/>
                        <param name="nanos" type="long"/>
                    </params>
                </method>
                <method name="getDelay" type="long" line="264">
                    <params>
                        <param name="unit" type="TimeUnit"/>
                    </params>
                </method>
                <method name="setTime" type="void" line="268">
                    <params>
                        <param name="nanos" type="long"/>
                    </params>
                </method>
                <method name="getTimer" type="Timer" line="272"/>
                <method name="compareTo" type="int" line="276">
                    <params>
                        <param name="other" type="Delayed"/>
                    </params>
                    <comment line="277">
                        compare zero ONLY if same object                        
                    </comment>
                    <scope line="277"/>
                    <scope line="280">
                        <declaration name="x" type="DelayedTimer" line="281"/>
                        <declaration name="diff" type="long" line="282"/>
                        <scope line="283"/>
                        <scope line="285"/>
                        <scope line="287"/>
                        <scope line="289"/>
                    </scope>
                    <declaration name="d" type="long" line="293"/>
                </method>
            </class>
        </class>
    </source>