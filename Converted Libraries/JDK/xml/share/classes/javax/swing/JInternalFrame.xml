<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.beans.PropertyVetoException"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="javax.swing.event.InternalFrameEvent"/>
        <import package="javax.swing.event.InternalFrameListener"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.lang.StringBuilder"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="JInternalFrame" line="15">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <implements interface="WindowConstants"/>
            <implements interface="RootPaneContainer"/>
            <javadoc line="15">
                A lightweight object that provides many of the features of
                  a native frame, including dragging, closing, becoming an icon,
                  resizing, title display, and support for a menu bar.
                  For task-oriented documentation and examples of using internal frames,
                  see &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/internalframe.html&quot; target=&quot;_top&quot;&gt;How to Use Internal Frames&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  Generally,
                  you add &lt;code&gt;JInternalFrame&lt;/code&gt;s to a &lt;code&gt;JDesktopPane&lt;/code&gt;. The UI
                  delegates the look-and-feel-specific actions to the
                  &lt;code&gt;DesktopManager&lt;/code&gt;
                  object maintained by the &lt;code&gt;JDesktopPane&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;JInternalFrame&lt;/code&gt; content pane
                  is where you add child components.
                  As a conveniance &lt;code&gt;add&lt;/code&gt; and its variants, &lt;code&gt;remove&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; have been overridden to forward to the
                  &lt;code&gt;contentPane&lt;/code&gt; as necessary. This means you can write:
                  &lt;pre&gt;
                  internalFrame.add(child);
                  &lt;/pre&gt;
                  And the child will be added to the contentPane.
                  The content pane is actually managed by an instance of
                  &lt;code&gt;JRootPane&lt;/code&gt;,
                  which also manages a layout pane, glass pane, and
                  optional menu bar for the internal frame. Please see the
                  &lt;code&gt;JRootPane&lt;/code&gt;
                  documentation for a complete description of these components.
                  Refer to {@link javax.swing.RootPaneContainer}for details on adding, removing and setting the &lt;code&gt;LayoutManager&lt;/code&gt;
                  of a &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    InternalFrameEvent                    
                </see>
                <see>
                    JDesktopPane                    
                </see>
                <see>
                    DesktopManager                    
                </see>
                <see>
                    JInternalFrame.JDesktopIcon                    
                </see>
                <see>
                    JRootPane                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <author>
                    David Kloba                    
                </author>
                <author>
                    Rich Schiavi                    
                </author>
                <beaninfoattribute>
                    : isContainer true
                      attribute: containerDelegate getContentPane
                      description: A frame container which is contained within
                      another window.                    
                </beaninfoattribute>
            </javadoc>
            <declaration name="uiClassID" type="String" line="75"/>
            <javadoc line="75">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="rootPane" type="JRootPane" line="80"/>
            <javadoc line="80">
                The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the
                  content pane
                  and optional menu bar for this internal frame, as well as the
                  glass pane.                
                <see>
                    JRootPane                    
                </see>
                <see>
                    RootPaneContainer                    
                </see>
            </javadoc>
            <declaration name="rootPaneCheckingEnabled" type="boolean" line="89"/>
            <javadoc line="89">
                If true then calls to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt;
                  will be forwarded to the &lt;code&gt;contentPane&lt;/code&gt;. This is initially
                  false, but is set to true when the &lt;code&gt;JInternalFrame&lt;/code&gt; is
                  constructed.                
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <declaration name="closable" type="boolean" line="99"/>
            <javadoc line="99">
                The frame can be closed.                
            </javadoc>
            <declaration name="isClosed" type="boolean" line="103"/>
            <javadoc line="103">
                The frame has been closed.                
            </javadoc>
            <declaration name="maximizable" type="boolean" line="107"/>
            <javadoc line="107">
                The frame can be expanded to the size of the desktop pane.                
            </javadoc>
            <declaration name="isMaximum" type="boolean" line="111"/>
            <javadoc line="111">
                The frame has been expanded to its maximum size.                
                <see>
                    #maximizable                    
                </see>
            </javadoc>
            <declaration name="iconable" type="boolean" line="116"/>
            <javadoc line="116">
                The frame can &quot;iconified&quot; (shrunk down and displayed as
                  an icon-image).                
                <see>
                    JInternalFrame.JDesktopIcon                    
                </see>
                <see>
                    #setIconifiable                    
                </see>
            </javadoc>
            <declaration name="isIcon" type="boolean" line="123"/>
            <javadoc line="123">
                The frame has been iconified.                
                <see>
                    #isIcon()                    
                </see>
            </javadoc>
            <declaration name="resizable" type="boolean" line="128"/>
            <javadoc line="128">
                The frame&apos;s size can be changed.                
            </javadoc>
            <declaration name="isSelected" type="boolean" line="132"/>
            <javadoc line="132">
                The frame is currently selected.                
            </javadoc>
            <declaration name="frameIcon" type="Icon" line="136"/>
            <javadoc line="136">
                The icon shown in the top-left corner of this internal frame.                
            </javadoc>
            <declaration name="title" type="String" line="140"/>
            <javadoc line="140">
                The title displayed in this internal frame&apos;s title bar.                
            </javadoc>
            <declaration name="desktopIcon" type="JDesktopIcon" line="144"/>
            <javadoc line="144">
                The icon that is displayed when this internal frame is iconified.                
                <see>
                    #iconable                    
                </see>
            </javadoc>
            <declaration name="lastCursor" type="Cursor" line="149"/>
            <declaration name="opened" type="boolean" line="150"/>
            <declaration name="normalBounds" type="Rectangle" line="151"/>
            <declaration name="defaultCloseOperation" type="int" line="152"/>
            <declaration name="lastFocusOwner" type="Component" line="153"/>
            <javadoc line="153">
                Contains the Component that focus is to go when
                  &lt;code&gt;restoreSubcomponentFocus&lt;/code&gt; is invoked, that is,
                  &lt;code&gt;restoreSubcomponentFocus&lt;/code&gt; sets this to the value returned
                  from &lt;code&gt;getMostRecentFocusOwner&lt;/code&gt;.                
            </javadoc>
            <declaration name="CONTENT_PANE_PROPERTY" type="String" line="160"/>
            <javadoc line="160">
                Bound property name.                
            </javadoc>
            <declaration name="MENU_BAR_PROPERTY" type="String" line="164"/>
            <javadoc line="164">
                Bound property name.                
            </javadoc>
            <declaration name="TITLE_PROPERTY" type="String" line="168"/>
            <javadoc line="168">
                Bound property name.                
            </javadoc>
            <declaration name="LAYERED_PANE_PROPERTY" type="String" line="172"/>
            <javadoc line="172">
                Bound property name.                
            </javadoc>
            <declaration name="ROOT_PANE_PROPERTY" type="String" line="176"/>
            <javadoc line="176">
                Bound property name.                
            </javadoc>
            <declaration name="GLASS_PANE_PROPERTY" type="String" line="180"/>
            <javadoc line="180">
                Bound property name.                
            </javadoc>
            <declaration name="FRAME_ICON_PROPERTY" type="String" line="184"/>
            <javadoc line="184">
                Bound property name.                
            </javadoc>
            <declaration name="IS_SELECTED_PROPERTY" type="String" line="188"/>
            <javadoc line="188">
                Constrained property name indicated that this frame has
                  selected status.                
            </javadoc>
            <declaration name="IS_CLOSED_PROPERTY" type="String" line="193"/>
            <javadoc line="193">
                Constrained property name indicating that the internal frame is closed.                
            </javadoc>
            <declaration name="IS_MAXIMUM_PROPERTY" type="String" line="197"/>
            <javadoc line="197">
                Constrained property name indicating that the internal frame is maximized.                
            </javadoc>
            <declaration name="IS_ICON_PROPERTY" type="String" line="201"/>
            <javadoc line="201">
                Constrained property name indicating that the internal frame is iconified.                
            </javadoc>
            <declaration name="PROPERTY_CHANGE_LISTENER_KEY" type="Object" line="205"/>
            <method name="addPropertyChangeListenerIfNecessary" type="void" line="206">
                <scope line="207">
                    <declaration name="focusListener" type="PropertyChangeListener" line="208"/>
                </scope>
            </method>
            <class name="FocusPropertyChangeListener" line="213">
                <implements interface="PropertyChangeListener"/>
                <method name="propertyChange" type="void" line="214">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="215"/>
                </method>
            </class>
            <method name="updateLastFocusOwner" type="void" line="220">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="221">
                    <declaration name="parent" type="Component" line="222"/>
                    <scope line="223">
                        <scope line="224"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="231">
                Creates a non-resizable, non-closable, non-maximizable,
                  non-iconifiable &lt;code&gt;JInternalFrame&lt;/code&gt; with no title.                
            </javadoc>
            <method name="JInternalFrame" type="constructor" line="235"/>
            <javadoc line="238">
                Creates a non-resizable, non-closable, non-maximizable,
                  non-iconifiable &lt;code&gt;JInternalFrame&lt;/code&gt; with the specified title.
                  Note that passing in a &lt;code&gt;null&lt;/code&gt; &lt;code&gt;title&lt;/code&gt; results in
                  unspecified behavior and possibly an exception.                
                <param>
                    title  the non-<code>null</code> <code>String</code>
                      to display in the title bar                    
                </param>
            </javadoc>
            <method name="JInternalFrame" type="constructor" line="246">
                <params>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="249">
                Creates a non-closable, non-maximizable, non-iconifiable
                  &lt;code&gt;JInternalFrame&lt;/code&gt; with the specified title
                  and resizability.                
                <param>
                    title      the <code>String</code> to display in the title bar                    
                </param>
                <param>
                    resizable  if <code>true</code>, the internal frame can be resized                    
                </param>
            </javadoc>
            <method name="JInternalFrame" type="constructor" line="256">
                <params>
                    <param name="title" type="String"/>
                    <param name="resizable" type="boolean"/>
                </params>
            </method>
            <javadoc line="259">
                Creates a non-maximizable, non-iconifiable &lt;code&gt;JInternalFrame&lt;/code&gt;
                  with the specified title, resizability, and
                  closability.                
                <param>
                    title      the <code>String</code> to display in the title bar                    
                </param>
                <param>
                    resizable  if <code>true</code>, the internal frame can be resized                    
                </param>
                <param>
                    closable   if <code>true</code>, the internal frame can be closed                    
                </param>
            </javadoc>
            <method name="JInternalFrame" type="constructor" line="267">
                <params>
                    <param name="title" type="String"/>
                    <param name="resizable" type="boolean"/>
                    <param name="closable" type="boolean"/>
                </params>
            </method>
            <javadoc line="270">
                Creates a non-iconifiable &lt;code&gt;JInternalFrame&lt;/code&gt;
                  with the specified title,
                  resizability, closability, and maximizability.                
                <param>
                    title       the <code>String</code> to display in the title bar                    
                </param>
                <param>
                    resizable   if <code>true</code>, the internal frame can be resized                    
                </param>
                <param>
                    closable    if <code>true</code>, the internal frame can be closed                    
                </param>
                <param>
                    maximizable if <code>true</code>, the internal frame can be maximized                    
                </param>
            </javadoc>
            <method name="JInternalFrame" type="constructor" line="279">
                <params>
                    <param name="title" type="String"/>
                    <param name="resizable" type="boolean"/>
                    <param name="closable" type="boolean"/>
                    <param name="maximizable" type="boolean"/>
                </params>
            </method>
            <javadoc line="282">
                Creates a &lt;code&gt;JInternalFrame&lt;/code&gt; with the specified title,
                  resizability, closability, maximizability, and iconifiability.
                  All &lt;code&gt;JInternalFrame&lt;/code&gt; constructors use this one.                
                <param>
                    title       the <code>String</code> to display in the title bar                    
                </param>
                <param>
                    resizable   if <code>true</code>, the internal frame can be resized                    
                </param>
                <param>
                    closable    if <code>true</code>, the internal frame can be closed                    
                </param>
                <param>
                    maximizable if <code>true</code>, the internal frame can be maximized                    
                </param>
                <param>
                    iconifiable if <code>true</code>, the internal frame can be iconified                    
                </param>
            </javadoc>
            <method name="JInternalFrame" type="constructor" line="292">
                <params>
                    <param name="title" type="String"/>
                    <param name="resizable" type="boolean"/>
                    <param name="closable" type="boolean"/>
                    <param name="maximizable" type="boolean"/>
                    <param name="iconifiable" type="boolean"/>
                </params>
            </method>
            <javadoc line="309">
                Called by the constructor to set up the &lt;code&gt;JRootPane&lt;/code&gt;.                
                <return>
                    a new <code>JRootPane</code>                    
                </return>
                <see>
                    JRootPane                    
                </see>
            </javadoc>
            <method name="createRootPane" type="JRootPane" line="314"/>
            <javadoc line="317">
                Returns the look-and-feel object that renders this component.                
                <return>
                    the <code>InternalFrameUI</code> object that renders
                      this component                    
                </return>
            </javadoc>
            <method name="getUI" type="InternalFrameUI" line="322"/>
            <javadoc line="325">
                Sets the UI delegate for this &lt;code&gt;JInternalFrame&lt;/code&gt;.                
                <param>
                    ui  the UI delegate                    
                </param>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="333">
                <params>
                    <param name="ui" type="InternalFrameUI"/>
                </params>
                <declaration name="checkingEnabled" type="boolean" line="334"/>
                <scope line="335"/>
                <scope line="339"/>
            </method>
            <javadoc line="343">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the look and feel
                  has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="350">
                <scope line="353"/>
            </method>
            <method name="updateUIWhenHidden" type="void" line="357">
                <declaration name="children" type="Component[]" line="360"/>
                <scope line="361">
                    <scope line="362"/>
                </scope>
            </method>
            <javadoc line="367">
                Returns the name of the look-and-feel
                  class that renders this component.                
                <return>
                    the string "InternalFrameUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfodescription>
                    : UIClassID                    
                </beaninfodescription>
            </javadoc>
            <method name="getUIClassID" type="String" line="375"/>
            <javadoc line="378">
                Returns whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <return>
                    true if <code>add</code> and <code>setLayout</code>
                      are fowarded; false otherwise                    
                </return>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="isRootPaneCheckingEnabled" type="boolean" line="388"/>
            <javadoc line="391">
                Sets whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    enabled  true if <code>add</code> and <code>setLayout</code>
                      are forwarded, false if they should operate directly on the
                      <code>JInternalFrame</code>.                    
                </param>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfohidden>
                    : true
                      description: Whether the add and setLayout methods are forwarded                    
                </beaninfohidden>
            </javadoc>
            <method name="setRootPaneCheckingEnabled" type="void" line="404">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="407">
                Adds the specified child &lt;code&gt;Component&lt;/code&gt;.
                  This method is overridden to conditionally forward calls to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  By default, children are added to the &lt;code&gt;contentPane&lt;/code&gt; instead
                  of the frame, refer to {@link javax.swing.RootPaneContainer} for
                  details.                
                <param>
                    comp the component to be enhanced                    
                </param>
                <param>
                    constraints the constraints to be respected                    
                </param>
                <param>
                    index the index                    
                </param>
                <exception>
                    IllegalArgumentException if <code>index</code> is invalid                    
                </exception>
                <exception>
                    IllegalArgumentException if adding the container's parent
                      to itself                    
                </exception>
                <exception>
                    IllegalArgumentException if adding a window to a container                    
                </exception>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="424">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="425"/>
                <scope line="428"/>
            </method>
            <javadoc line="432">
                Removes the specified component from the container. If
                  &lt;code&gt;comp&lt;/code&gt; is not a child of the &lt;code&gt;JInternalFrame&lt;/code&gt;
                  this will forward the call to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    comp the component to be removed                    
                </param>
                <throws>
                    NullPointerException if <code>comp</code> is null                    
                </throws>
                <see>
                    #add                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="441">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="oldCount" type="int" line="442"/>
                <scope line="444"/>
            </method>
            <javadoc line="448">
                Ensures that, by default, the layout of this component cannot be set.
                  Overridden to conditionally forward the call to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  Refer to {@link javax.swing.RootPaneContainer} for
                  more information.                
                <param>
                    manager the <code>LayoutManager</code>                    
                </param>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
            </javadoc>
            <method name="setLayout" type="void" line="457">
                <params>
                    <param name="manager" type="LayoutManager"/>
                </params>
                <scope line="458"/>
                <scope line="461"/>
            </method>
            <javadoc line="465">
                Returns the current &lt;code&gt;JMenuBar&lt;/code&gt; for this
                  &lt;code&gt;JInternalFrame&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
                  if no menu bar has been set.                
                <return>
                    the current menu bar, or <code>null</code> if none has been set                    
                </return>
                <deprecated>
                    As of Swing version 1.0.3,
                      replaced by <code>getJMenuBar()</code>.                    
                </deprecated>
            </javadoc>
            <method name="getMenuBar" type="JMenuBar" line="473"/>
            <javadoc line="476">
                Returns the current &lt;code&gt;JMenuBar&lt;/code&gt; for this
                  &lt;code&gt;JInternalFrame&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
                  if no menu bar has been set.                
                <return>
                    the <code>JMenuBar</code> used by this internal frame                    
                </return>
                <see>
                    #setJMenuBar                    
                </see>
            </javadoc>
            <method name="getJMenuBar" type="JMenuBar" line="483"/>
            <javadoc line="486">
                Sets the &lt;code&gt;menuBar&lt;/code&gt; property for this &lt;code&gt;JInternalFrame&lt;/code&gt;.                
                <param>
                    m  the <code>JMenuBar</code> to use in this internal frame                    
                </param>
                <see>
                    #getJMenuBar                    
                </see>
                <deprecated>
                    As of Swing version 1.0.3
                      replaced by <code>setJMenuBar(JMenuBar m)</code>.                    
                </deprecated>
            </javadoc>
            <method name="setMenuBar" type="void" line="493">
                <params>
                    <param name="m" type="JMenuBar"/>
                </params>
                <declaration name="oldValue" type="JMenuBar" line="494"/>
            </method>
            <javadoc line="498">
                Sets the &lt;code&gt;menuBar&lt;/code&gt; property for this &lt;code&gt;JInternalFrame&lt;/code&gt;.                
                <param>
                    m  the <code>JMenuBar</code> to use in this internal frame                    
                </param>
                <see>
                    #getJMenuBar                    
                </see>
                <beaninfobound>
                    : true
                      preferred: true
                      description: The menu bar for accessing pulldown menus
                      from this internal frame.                    
                </beaninfobound>
            </javadoc>
            <method name="setJMenuBar" type="void" line="507">
                <params>
                    <param name="m" type="JMenuBar"/>
                </params>
                <declaration name="oldValue" type="JMenuBar" line="508"/>
            </method>
            <javadoc line="512">
                Returns the content pane for this internal frame.                
                <return>
                    the content pane                    
                </return>
            </javadoc>
            <method name="getContentPane" type="Container" line="516"/>
            <javadoc line="519">
                Sets this &lt;code&gt;JInternalFrame&lt;/code&gt;&apos;s &lt;code&gt;contentPane&lt;/code&gt;
                  property.                
                <param>
                    c  the content pane for this internal frame                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is <code>null</code>                    
                </exception>
                <see>
                    RootPaneContainer#getContentPane                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      description: The client area of the internal frame where child
                      components are normally inserted.                    
                </beaninfobound>
            </javadoc>
            <method name="setContentPane" type="void" line="531">
                <params>
                    <param name="c" type="Container"/>
                </params>
                <declaration name="oldValue" type="Container" line="532"/>
            </method>
            <javadoc line="536">
                Returns the layered pane for this internal frame.                
                <return>
                    a <code>JLayeredPane</code> object                    
                </return>
                <see>
                    RootPaneContainer#setLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#getLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="542"/>
            <javadoc line="545">
                Sets this &lt;code&gt;JInternalFrame&lt;/code&gt;&apos;s
                  &lt;code&gt;layeredPane&lt;/code&gt; property.                
                <param>
                    layered the <code>JLayeredPane</code> for this internal frame                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the layered pane parameter is <code>null</code>                    
                </exception>
                <see>
                    RootPaneContainer#setLayeredPane                    
                </see>
                <beaninfohidden>
                    : true
                      bound: true
                      description: The pane which holds the various desktop layers.                    
                </beaninfohidden>
            </javadoc>
            <method name="setLayeredPane" type="void" line="556">
                <params>
                    <param name="layered" type="JLayeredPane"/>
                </params>
                <declaration name="oldValue" type="JLayeredPane" line="557"/>
            </method>
            <javadoc line="561">
                Returns the glass pane for this internal frame.                
                <return>
                    the glass pane                    
                </return>
                <see>
                    RootPaneContainer#setGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="566"/>
            <javadoc line="569">
                Sets this &lt;code&gt;JInternalFrame&lt;/code&gt;&apos;s
                  &lt;code&gt;glassPane&lt;/code&gt; property.                
                <param>
                    glass the glass pane for this internal frame                    
                </param>
                <see>
                    RootPaneContainer#getGlassPane                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      description: A transparent pane used for menu rendering.                    
                </beaninfobound>
            </javadoc>
            <method name="setGlassPane" type="void" line="578">
                <params>
                    <param name="glass" type="Component"/>
                </params>
                <declaration name="oldValue" type="Component" line="579"/>
            </method>
            <javadoc line="583">
                Returns the &lt;code&gt;rootPane&lt;/code&gt; object for this internal frame.                
                <return>
                    the <code>rootPane</code> property                    
                </return>
                <see>
                    RootPaneContainer#getRootPane                    
                </see>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="588"/>
            <javadoc line="591">
                Sets the &lt;code&gt;rootPane&lt;/code&gt; property
                  for this &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  This method is called by the constructor.                
                <param>
                    root  the new <code>JRootPane</code> object                    
                </param>
                <beaninfobound>
                    : true
                      hidden: true
                      description: The root pane used by this internal frame.                    
                </beaninfobound>
            </javadoc>
            <method name="setRootPane" type="void" line="600">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="601"/>
                <declaration name="oldValue" type="JRootPane" line="604"/>
                <scope line="606">
                    <declaration name="checkingEnabled" type="boolean" line="607"/>
                    <scope line="608"/>
                    <scope line="612"/>
                </scope>
            </method>
            <javadoc line="618">
                Sets whether this &lt;code&gt;JInternalFrame&lt;/code&gt; can be closed by
                  some user action.                
                <param>
                    b a boolean value, where <code>true</code> means this internal frame can be closed                    
                </param>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: Indicates whether this internal frame can be closed.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setClosable" type="void" line="626">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="Boolean" line="627"/>
                <declaration name="newValue" type="Boolean" line="628"/>
            </method>
            <javadoc line="632">
                Returns whether this &lt;code&gt;JInternalFrame&lt;/code&gt; can be closed by
                  some user action.                
                <return>
                    <code>true</code> if this internal frame can be closed                    
                </return>
            </javadoc>
            <method name="isClosable" type="boolean" line="637"/>
            <javadoc line="640">
                Returns whether this &lt;code&gt;JInternalFrame&lt;/code&gt; is currently closed.                
                <return>
                    <code>true</code> if this internal frame is closed, <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isClosed" type="boolean" line="644"/>
            <javadoc line="647">
                Closes this internal frame if the argument is &lt;code&gt;true&lt;/code&gt;.
                  Do not invoke this method with a &lt;code&gt;false&lt;/code&gt; argument;
                  the result of invoking &lt;code&gt;setClosed(false)&lt;/code&gt;
                  is unspecified.
                  &lt;p&gt;
                  If the internal frame is already closed,
                  this method does nothing and returns immediately.
                  Otherwise,
                  this method begins by firing
                  an &lt;code&gt;INTERNAL_FRAME_CLOSING&lt;/code&gt; event.
                  Then this method sets the &lt;code&gt;closed&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;
                  unless a listener vetoes the property change.
                  This method finishes by making the internal frame
                  invisible and unselected,
                  and then firing an &lt;code&gt;INTERNAL_FRAME_CLOSED&lt;/code&gt; event.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt;
                  To reuse an internal frame that has been closed,
                  you must add it to a container
                  (even if you never removed it from its previous container).
                  Typically, this container will be the &lt;code&gt;JDesktopPane&lt;/code&gt;
                  that previously contained the internal frame.                
                <param>
                    b must be <code>true</code>                    
                </param>
                <exception>
                    PropertyVetoException when the attempt to set the
                      property is vetoed by the <code>JInternalFrame</code>                    
                </exception>
                <see>
                    #isClosed()                    
                </see>
                <see>
                    #setDefaultCloseOperation                    
                </see>
                <see>
                    #dispose                    
                </see>
                <see>
                    javax.swing.event.InternalFrameEvent#INTERNAL_FRAME_CLOSING                    
                </see>
                <beaninfobound>
                    : true
                      constrained: true
                      description: Indicates whether this internal frame has been closed.                    
                </beaninfobound>
            </javadoc>
            <method name="setClosed" type="void" line="681">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="682"/>
                <declaration name="oldValue" type="Boolean" line="685"/>
                <declaration name="newValue" type="Boolean" line="686"/>
                <scope line="687"/>
                <scope line="692"/>
                <scope line="696"/>
                <scope line="699"/>
            </method>
            <javadoc line="702">
                Sets whether the &lt;code&gt;JInternalFrame&lt;/code&gt; can be resized by some
                  user action.                
                <param>
                    b  a boolean, where <code>true</code> means this internal frame can be resized                    
                </param>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: Determines whether this internal frame can be resized
                      by the user.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setResizable" type="void" line="711">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="Boolean" line="712"/>
                <declaration name="newValue" type="Boolean" line="713"/>
            </method>
            <javadoc line="717">
                Returns whether the &lt;code&gt;JInternalFrame&lt;/code&gt; can be resized
                  by some user action.                
                <return>
                    <code>true</code> if this internal frame can be resized, <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isResizable" type="boolean" line="722"/>
            <javadoc line="725">
                Sets the &lt;code&gt;iconable&lt;/code&gt; property,
                  which must be &lt;code&gt;true&lt;/code&gt;
                  for the user to be able to
                  make the &lt;code&gt;JInternalFrame&lt;/code&gt; an icon.
                  Some look and feels might not implement iconification;
                  they will ignore this property.                
                <param>
                    b  a boolean, where <code>true</code> means this internal frame can be iconified                    
                </param>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: Determines whether this internal frame can be iconified.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setIconifiable" type="void" line="737">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="Boolean" line="738"/>
                <declaration name="newValue" type="Boolean" line="739"/>
            </method>
            <javadoc line="743">
                Gets the &lt;code&gt;iconable&lt;/code&gt; property,
                  which by default is &lt;code&gt;false&lt;/code&gt;.                
                <return>
                    the value of the <code>iconable</code> property.                    
                </return>
                <see>
                    #setIconifiable                    
                </see>
            </javadoc>
            <method name="isIconifiable" type="boolean" line="749"/>
            <javadoc line="752">
                Returns whether the &lt;code&gt;JInternalFrame&lt;/code&gt; is currently iconified.                
                <return>
                    <code>true</code> if this internal frame is iconified                    
                </return>
            </javadoc>
            <method name="isIcon" type="boolean" line="756"/>
            <javadoc line="759">
                Iconifies or de-iconifies this internal frame,
                  if the look and feel supports iconification.
                  If the internal frame&apos;s state changes to iconified,
                  this method fires an &lt;code&gt;INTERNAL_FRAME_ICONIFIED&lt;/code&gt; event.
                  If the state changes to de-iconified,
                  an &lt;code&gt;INTERNAL_FRAME_DEICONIFIED&lt;/code&gt; event is fired.                
                <param>
                    b a boolean, where <code>true</code> means to iconify this internal frame and
                      <code>false</code> means to de-iconify it                    
                </param>
                <exception>
                    PropertyVetoException when the attempt to set the
                      property is vetoed by the <code>JInternalFrame</code>                    
                </exception>
                <see>
                    InternalFrameEvent#INTERNAL_FRAME_ICONIFIED                    
                </see>
                <see>
                    InternalFrameEvent#INTERNAL_FRAME_DEICONIFIED                    
                </see>
                <beaninfobound>
                    : true
                      constrained: true
                      description: The image displayed when this internal frame is minimized.                    
                </beaninfobound>
            </javadoc>
            <method name="setIcon" type="void" line="776">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="777"/>
                <declaration name="oldValue" type="Boolean" line="781"/>
                <declaration name="newValue" type="Boolean" line="782"/>
            </method>
            <javadoc line="789">
                Sets the &lt;code&gt;maximizable&lt;/code&gt; property,
                  which determines whether the &lt;code&gt;JInternalFrame&lt;/code&gt;
                  can be maximized by
                  some user action.
                  Some look and feels might not support maximizing internal frames;
                  they will ignore this property.                
                <param>
                    b <code>true</code> to specify that this internal frame should be maximizable; <code>false</code> to specify that it should not be                    
                </param>
                <beaninfobound>
                    : true
                      preferred: true
                      description: Determines whether this internal frame can be maximized.                    
                </beaninfobound>
            </javadoc>
            <method name="setMaximizable" type="void" line="801">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="Boolean" line="802"/>
                <declaration name="newValue" type="Boolean" line="803"/>
            </method>
            <javadoc line="807">
                Gets the value of the &lt;code&gt;maximizable&lt;/code&gt; property.                
                <return>
                    the value of the <code>maximizable</code> property                    
                </return>
                <see>
                    #setMaximizable                    
                </see>
            </javadoc>
            <method name="isMaximizable" type="boolean" line="812"/>
            <javadoc line="815">
                Returns whether the &lt;code&gt;JInternalFrame&lt;/code&gt; is currently maximized.                
                <return>
                    <code>true</code> if this internal frame is maximized, <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="isMaximum" type="boolean" line="819"/>
            <javadoc line="822">
                Maximizes and restores this internal frame.  A maximized frame is resized to
                  fully fit the &lt;code&gt;JDesktopPane&lt;/code&gt; area associated with the
                  &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  A restored frame&apos;s size is set to the &lt;code&gt;JInternalFrame&lt;/code&gt;&apos;s
                  actual size.                
                <param>
                    b  a boolean, where <code>true</code> maximizes this internal frame and <code>false</code>
                      restores it                    
                </param>
                <exception>
                    PropertyVetoException when the attempt to set the
                      property is vetoed by the <code>JInternalFrame</code>                    
                </exception>
                <beaninfobound>
                    : true
                      constrained: true
                      description: Indicates whether this internal frame is maximized.                    
                </beaninfobound>
            </javadoc>
            <method name="setMaximum" type="void" line="836">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="837"/>
                <declaration name="oldValue" type="Boolean" line="840"/>
                <declaration name="newValue" type="Boolean" line="841"/>
            </method>
            <javadoc line="846">
                Returns the title of the &lt;code&gt;JInternalFrame&lt;/code&gt;.                
                <return>
                    a <code>String</code> containing this internal frame's title                    
                </return>
                <see>
                    #setTitle                    
                </see>
            </javadoc>
            <method name="getTitle" type="String" line="851"/>
            <javadoc line="854">
                Sets the &lt;code&gt;JInternalFrame&lt;/code&gt; title. &lt;code&gt;title&lt;/code&gt;
                  may have a &lt;code&gt;null&lt;/code&gt; value.                
                <see>
                    #getTitle                    
                </see>
                <param>
                    title  the <code>String</code> to display in the title bar                    
                </param>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The text displayed in the title bar.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setTitle" type="void" line="863">
                <params>
                    <param name="title" type="String"/>
                </params>
                <declaration name="oldValue" type="String" line="864"/>
            </method>
            <javadoc line="868">
                Selects or deselects the internal frame
                  if it&apos;s showing.
                  A &lt;code&gt;JInternalFrame&lt;/code&gt; normally draws its title bar
                  differently if it is
                  the selected frame, which indicates to the user that this
                  internal frame has the focus.
                  When this method changes the state of the internal frame
                  from deselected to selected, it fires an
                  &lt;code&gt;InternalFrameEvent.INTERNAL_FRAME_ACTIVATED&lt;/code&gt; event.
                  If the change is from selected to deselected,
                  an &lt;code&gt;InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED&lt;/code&gt; event
                  is fired.                
                <param>
                    selected  a boolean, where <code>true</code> means this internal frame
                      should become selected (currently active)
                      and <code>false</code> means it should become deselected                    
                </param>
                <exception>
                    PropertyVetoException when the attempt to set the
                      property is vetoed by the <code>JInternalFrame</code>                    
                </exception>
                <see>
                    #isShowing                    
                </see>
                <see>
                    InternalFrameEvent#INTERNAL_FRAME_ACTIVATED                    
                </see>
                <see>
                    InternalFrameEvent#INTERNAL_FRAME_DEACTIVATED                    
                </see>
                <beaninfoconstrained>
                    : true
                      bound: true
                      description: Indicates whether this internal frame is currently
                      the active frame.                    
                </beaninfoconstrained>
            </javadoc>
            <method name="setSelected" type="void" line="894">
                <params>
                    <param name="selected" type="boolean"/>
                </params>
                <scope line="895"/>
                <scope line="899"/>
                <declaration name="oldValue" type="Boolean" line="902"/>
                <declaration name="newValue" type="Boolean" line="903"/>
                <scope line="905"/>
            </method>
            <javadoc line="914">
                Returns whether the &lt;code&gt;JInternalFrame&lt;/code&gt; is the
                  currently &quot;selected&quot; or active frame.                
                <return>
                    <code>true</code> if this internal frame is currently selected (active)                    
                </return>
                <see>
                    #setSelected                    
                </see>
            </javadoc>
            <method name="isSelected" type="boolean" line="920"/>
            <javadoc line="923">
                Sets an image to be displayed in the titlebar of this internal frame (usually
                  in the top-left corner).
                  This image is not the &lt;code&gt;desktopIcon&lt;/code&gt; object, which
                  is the image displayed in the &lt;code&gt;JDesktop&lt;/code&gt; when
                  this internal frame is iconified.
                  Passing &lt;code&gt;null&lt;/code&gt; to this function is valid,
                  but the look and feel
                  can choose the
                  appropriate behavior for that situation, such as displaying no icon
                  or a default icon for the look and feel.                
                <param>
                    icon the <code>Icon</code> to display in the title bar                    
                </param>
                <see>
                    #getFrameIcon                    
                </see>
                <beaninfobound>
                    : true
                      description: The icon shown in the top-left corner of this internal frame.                    
                </beaninfobound>
            </javadoc>
            <method name="setFrameIcon" type="void" line="939">
                <params>
                    <param name="icon" type="Icon"/>
                </params>
                <declaration name="oldIcon" type="Icon" line="940"/>
            </method>
            <javadoc line="944">
                Returns the image displayed in the title bar of this internal frame (usually
                  in the top-left corner).                
                <return>
                    the <code>Icon</code> displayed in the title bar                    
                </return>
                <see>
                    #setFrameIcon                    
                </see>
            </javadoc>
            <method name="getFrameIcon" type="Icon" line="950"/>
            <javadoc line="953">
                Convenience method that moves this component to position 0 if its
                  parent is a &lt;code&gt;JLayeredPane&lt;/code&gt;.                
            </javadoc>
            <method name="moveToFront" type="void" line="957">
                <scope line="958">
                    <scope line="959"/>
                </scope>
                <scope line="963"/>
            </method>
            <javadoc line="967">
                Convenience method that moves this component to position -1 if its
                  parent is a &lt;code&gt;JLayeredPane&lt;/code&gt;.                
            </javadoc>
            <method name="moveToBack" type="void" line="971">
                <scope line="972">
                    <scope line="973"/>
                </scope>
                <scope line="977"/>
            </method>
            <javadoc line="981">
                Returns the last &lt;code&gt;Cursor&lt;/code&gt; that was set by the
                  &lt;code&gt;setCursor&lt;/code&gt; method that is not a resizable
                  &lt;code&gt;Cursor&lt;/code&gt;.                
                <return>
                    the last non-resizable <code>Cursor</code>                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getLastCursor" type="Cursor" line="988"/>
            <javadoc line="991">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setCursor" type="void" line="995">
                <params>
                    <param name="cursor" type="Cursor"/>
                </params>
                <scope line="996"/>
                <declaration name="type" type="int" line="1001"/>
                <scope line="1002"/>
            </method>
            <javadoc line="1007">
                Convenience method for setting the layer attribute of this component.                
                <param>
                    layer  an <code>Integer</code> object specifying this
                      frame's desktop layer                    
                </param>
                <see>
                    JLayeredPane                    
                </see>
                <beaninfoexpert>
                    : true
                      description: Specifies what desktop layer is used.                    
                </beaninfoexpert>
            </javadoc>
            <method name="setLayer" type="void" line="1015">
                <params>
                    <param name="layer" type="Integer"/>
                </params>
                <scope line="1016">
                    <declaration name="p" type="JLayeredPane" line="1017"/>
                </scope>
                <scope line="1020"/>
            </method>
            <javadoc line="1025">
                Convenience method for setting the layer attribute of this component.
                  The method &lt;code&gt;setLayer(Integer)&lt;/code&gt; should be used for
                  layer values predefined in &lt;code&gt;JLayeredPane&lt;/code&gt;.
                  When using &lt;code&gt;setLayer(int)&lt;/code&gt;, care must be taken not to
                  accidentally clash with those values.                
                <param>
                    layer  an integer specifying this internal frame's desktop layer                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    #setLayer(Integer)                    
                </see>
                <see>
                    JLayeredPane                    
                </see>
                <beaninfoexpert>
                    : true
                      description: Specifies what desktop layer is used.                    
                </beaninfoexpert>
            </javadoc>
            <method name="setLayer" type="void" line="1038">
                <params>
                    <param name="layer" type="int"/>
                </params>
            </method>
            <javadoc line="1041">
                Convenience method for getting the layer attribute of this component.                
                <return>
                    an <code>Integer</code> object specifying this
                      frame's desktop layer                    
                </return>
                <see>
                    JLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayer" type="int" line="1047"/>
            <javadoc line="1050">
                Convenience method that searches the ancestor hierarchy for a
                  &lt;code&gt;JDesktop&lt;/code&gt; instance. If &lt;code&gt;JInternalFrame&lt;/code&gt;
                  finds none, the &lt;code&gt;desktopIcon&lt;/code&gt; tree is searched.                
                <return>
                    the <code>JDesktopPane</code> this internal frame belongs to,
                      or <code>null</code> if none is found                    
                </return>
            </javadoc>
            <method name="getDesktopPane" type="JDesktopPane" line="1057">
                <declaration name="p" type="Container" line="1058"/>
                <scope line="1061"/>
            </method>
            <javadoc line="1067">
                Sets the &lt;code&gt;JDesktopIcon&lt;/code&gt; associated with this
                  &lt;code&gt;JInternalFrame&lt;/code&gt;.                
                <param>
                    d the <code>JDesktopIcon</code> to display on the desktop                    
                </param>
                <see>
                    #getDesktopIcon                    
                </see>
                <beaninfobound>
                    : true
                      description: The icon shown when this internal frame is minimized.                    
                </beaninfobound>
            </javadoc>
            <method name="setDesktopIcon" type="void" line="1075">
                <params>
                    <param name="d" type="JDesktopIcon"/>
                </params>
                <declaration name="oldValue" type="JDesktopIcon" line="1076"/>
            </method>
            <javadoc line="1080">
                Returns the &lt;code&gt;JDesktopIcon&lt;/code&gt; used when this
                  &lt;code&gt;JInternalFrame&lt;/code&gt; is iconified.                
                <return>
                    the <code>JDesktopIcon</code> displayed on the desktop                    
                </return>
                <see>
                    #setDesktopIcon                    
                </see>
            </javadoc>
            <method name="getDesktopIcon" type="JDesktopIcon" line="1086"/>
            <javadoc line="1089">
                If the &lt;code&gt;JInternalFrame&lt;/code&gt; is not in maximized state, returns
                  &lt;code&gt;getBounds()&lt;/code&gt;; otherwise, returns the bounds that the
                  &lt;code&gt;JInternalFrame&lt;/code&gt; would be restored to.                
                <return>
                    a <code>Rectangle</code> containing the bounds of this
                      frame when in the normal state                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getNormalBounds" type="Rectangle" line="1097">
                <scope line="1098"/>
                <scope line="1101"/>
            </method>
            <javadoc line="1105">
                Sets the normal bounds for this internal frame, the bounds that
                  this internal frame would be restored to from its maximized state.
                  This method is intended for use only by desktop managers.                
                <param>
                    r the bounds that this internal frame should be restored to                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setNormalBounds" type="void" line="1112">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="1115">
                If this &lt;code&gt;JInternalFrame&lt;/code&gt; is active,
                  returns the child that has focus.
                  Otherwise, returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the component with focus, or <code>null</code> if no children have focus                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getFocusOwner" type="Component" line="1122">
                <scope line="1123"/>
            </method>
            <javadoc line="1128">
                Returns the child component of this &lt;code&gt;JInternalFrame&lt;/code&gt;
                  that will receive the
                  focus when this &lt;code&gt;JInternalFrame&lt;/code&gt; is selected.
                  If this &lt;code&gt;JInternalFrame&lt;/code&gt; is
                  currently selected, this method returns the same component as
                  the &lt;code&gt;getFocusOwner&lt;/code&gt; method.
                  If this &lt;code&gt;JInternalFrame&lt;/code&gt; is not selected,
                  then the child component that most recently requested focus will be
                  returned. If no child component has ever requested focus, then this
                  &lt;code&gt;JInternalFrame&lt;/code&gt;&apos;s initial focusable component is returned.
                  If no such
                  child exists, then this &lt;code&gt;JInternalFrame&lt;/code&gt;&apos;s default component
                  to focus is returned.                
                <return>
                    the child component that will receive focus when this
                      <code>JInternalFrame</code> is selected                    
                </return>
                <see>
                    #getFocusOwner                    
                </see>
                <see>
                    #isSelected                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMostRecentFocusOwner" type="Component" line="1148">
                <scope line="1149"/>
                <scope line="1152"/>
                <declaration name="policy" type="FocusTraversalPolicy" line="1155"/>
                <scope line="1156"/>
                <declaration name="toFocus" type="Component" line="1159"/>
                <scope line="1160"/>
            </method>
            <javadoc line="1165">
                Requests the internal frame to restore focus to the
                  last subcomponent that had focus. This is used by the UI when
                  the user selected this internal frame --
                  for example, by clicking on the title bar.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="restoreSubcomponentFocus" type="void" line="1172">
                <scope line="1173"/>
                <scope line="1176">
                    <declaration name="component" type="Component" line="1177"/>
                    <scope line="1178">
                        <scope line="1180"/>
                    </scope>
                </scope>
            </method>
            <method name="setLastFocusOwner" type="void" line="1187">
                <params>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="1190">
                Moves and resizes this component.  Unlike other components,
                  this implementation also forces re-layout, so that frame
                  decorations such as the title bar are always redisplayed.                
                <param>
                    x  an integer giving the component's new horizontal position
                      measured in pixels from the left of its container                    
                </param>
                <param>
                    y  an integer giving the component's new vertical position,
                      measured in pixels from the bottom of its container                    
                </param>
                <param>
                    width  an integer giving the component's new width in pixels                    
                </param>
                <param>
                    height an integer giving the component's new height in pixels                    
                </param>
            </javadoc>
            <method name="reshape" type="void" line="1201">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="1206">
                Adds the specified listener to receive internal
                  frame events from this internal frame.                
                <param>
                    l the internal frame listener                    
                </param>
            </javadoc>
            <method name="addInternalFrameListener" type="void" line="1211">
                <params>
                    <param name="l" type="InternalFrameListener"/>
                </params>
            </method>
            <javadoc line="1215">
                Removes the specified internal frame listener so that it no longer
                  receives internal frame events from this internal frame.                
                <param>
                    l the internal frame listener                    
                </param>
            </javadoc>
            <method name="removeInternalFrameListener" type="void" line="1220">
                <params>
                    <param name="l" type="InternalFrameListener"/>
                </params>
            </method>
            <javadoc line="1223">
                Returns an array of all the &lt;code&gt;InternalFrameListener&lt;/code&gt;s added
                  to this &lt;code&gt;JInternalFrame&lt;/code&gt; with
                  &lt;code&gt;addInternalFrameListener&lt;/code&gt;.                
                <return>
                    all of the <code>InternalFrameListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
                <see>
                    #addInternalFrameListener                    
                </see>
            </javadoc>
            <method name="getInternalFrameListeners" type="InternalFrameListener[]" line="1232"/>
            <javadoc line="1235">
                Fires an internal frame event.                
                <param>
                    id  the type of the event being fired; one of the following:
                      <ul>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_OPENED</code>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_CLOSING</code>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_CLOSED</code>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_ICONIFIED</code>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_DEICONIFIED</code>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_ACTIVATED</code>
                      <li><code>InternalFrameEvent.INTERNAL_FRAME_DEACTIVATED</code>
                      </ul>
                      If the event type is not one of the above, nothing happens.                    
                </param>
            </javadoc>
            <method name="fireInternalFrameEvent" type="void" line="1249">
                <params>
                    <param name="id" type="int"/>
                </params>
                <declaration name="listeners" type="Object[]" line="1250"/>
                <declaration name="e" type="InternalFrameEvent" line="1251"/>
                <scope line="1252">
                    <scope line="1253">
                        <scope line="1254"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1285">
                Fires an
                  &lt;code&gt;INTERNAL_FRAME_CLOSING&lt;/code&gt; event
                  and then performs the action specified by
                  the internal frame&apos;s default close operation.
                  This method is typically invoked by the
                  look-and-feel-implemented action handler
                  for the internal frame&apos;s close button.                
                <since>
                    1.3                    
                </since>
                <see>
                    #setDefaultCloseOperation                    
                </see>
                <see>
                    javax.swing.event.InternalFrameEvent#INTERNAL_FRAME_CLOSING                    
                </see>
            </javadoc>
            <method name="doDefaultCloseAction" type="void" line="1297">
                <scope line="1304"/>
                <scope line="1307"/>
                <scope line="1311"/>
                <scope line="1318"/>
            </method>
            <javadoc line="1325">
                Sets the operation that will happen by default when
                  the user initiates a &quot;close&quot; on this internal frame.
                  The possible choices are:
                  &lt;p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;code&gt;DO_NOTHING_ON_CLOSE&lt;/code&gt;
                  &lt;dd&gt; Do nothing.
                  This requires the program to handle the operation
                  in the &lt;code&gt;windowClosing&lt;/code&gt; method
                  of a registered &lt;code&gt;InternalFrameListener&lt;/code&gt; object.
                  &lt;dt&gt;&lt;code&gt;HIDE_ON_CLOSE&lt;/code&gt;
                  &lt;dd&gt; Automatically make the internal frame invisible.
                  &lt;dt&gt;&lt;code&gt;DISPOSE_ON_CLOSE&lt;/code&gt;
                  &lt;dd&gt; Automatically dispose of the internal frame.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  The default value is &lt;code&gt;DISPOSE_ON_CLOSE&lt;/code&gt;.
                  Before performing the specified close operation,
                  the internal frame fires
                  an &lt;code&gt;INTERNAL_FRAME_CLOSING&lt;/code&gt; event.                
                <param>
                    operation one of the following constants defined in
                      <code>javax.swing.WindowConstants</code>
                      (an interface implemented by
                      <code>JInternalFrame</code>):
                      <code>DO_NOTHING_ON_CLOSE</code>,
                      <code>HIDE_ON_CLOSE</code>, or
                      <code>DISPOSE_ON_CLOSE</code>                    
                </param>
                <see>
                    #addInternalFrameListener                    
                </see>
                <see>
                    #getDefaultCloseOperation                    
                </see>
                <see>
                    #setVisible                    
                </see>
                <see>
                    #dispose                    
                </see>
                <see>
                    InternalFrameEvent#INTERNAL_FRAME_CLOSING                    
                </see>
            </javadoc>
            <method name="setDefaultCloseOperation" type="void" line="1359">
                <params>
                    <param name="operation" type="int"/>
                </params>
            </method>
            <javadoc line="1362">
                Returns the default operation that occurs when the user
                  initiates a &quot;close&quot; on this internal frame.                
                <return>
                    the operation that will occur when the user closes the internal
                      frame                    
                </return>
                <see>
                    #setDefaultCloseOperation                    
                </see>
            </javadoc>
            <method name="getDefaultCloseOperation" type="int" line="1369"/>
            <javadoc line="1372">
                Causes subcomponents of this &lt;code&gt;JInternalFrame&lt;/code&gt;
                  to be laid out at their preferred size.  Internal frames that are
                  iconized or maximized are first restored and then packed.  If the
                  internal frame is unable to be restored its state is not changed
                  and will not be packed.                
                <see>
                    java.awt.Window#pack                    
                </see>
            </javadoc>
            <method name="pack" type="void" line="1380">
                <scope line="1381">
                    <scope line="1382"/>
                    <scope line="1385"/>
                </scope>
                <scope line="1389"/>
            </method>
            <javadoc line="1395">
                If the internal frame is not visible,
                  brings the internal frame to the front,
                  makes it visible,
                  and attempts to select it.
                  The first time the internal frame is made visible,
                  this method also fires an &lt;code&gt;INTERNAL_FRAME_OPENED&lt;/code&gt; event.
                  This method does nothing if the internal frame is already visible.
                  Invoking this method
                  has the same result as invoking
                  &lt;code&gt;setVisible(true)&lt;/code&gt;.                
                <see>
                    #moveToFront                    
                </see>
                <see>
                    #setSelected                    
                </see>
                <see>
                    InternalFrameEvent#INTERNAL_FRAME_OPENED                    
                </see>
                <see>
                    #setVisible                    
                </see>
            </javadoc>
            <method name="show" type="void" line="1411">
                <scope line="1412"/>
                <scope line="1415"/>
                <scope line="1422"/>
                <scope line="1425">
                    <scope line="1426"/>
                    <scope line="1429"/>
                </scope>
            </method>
            <method name="hide" type="void" line="1433">
                <scope line="1434"/>
            </method>
            <javadoc line="1439">
                Makes this internal frame
                  invisible, unselected, and closed.
                  If the frame is not already closed,
                  this method fires an
                  &lt;code&gt;INTERNAL_FRAME_CLOSED&lt;/code&gt; event.
                  The results of invoking this method are similar to
                  &lt;code&gt;setClosed(true)&lt;/code&gt;,
                  but &lt;code&gt;dispose&lt;/code&gt; always succeeds in closing
                  the internal frame and does not fire
                  an &lt;code&gt;INTERNAL_FRAME_CLOSING&lt;/code&gt; event.                
                <see>
                    javax.swing.event.InternalFrameEvent#INTERNAL_FRAME_CLOSED                    
                </see>
                <see>
                    #setVisible                    
                </see>
                <see>
                    #setSelected                    
                </see>
                <see>
                    #setClosed                    
                </see>
            </javadoc>
            <method name="dispose" type="void" line="1455">
                <scope line="1456"/>
                <scope line="1459">
                    <scope line="1460"/>
                    <scope line="1463"/>
                </scope>
                <scope line="1466"/>
            </method>
            <javadoc line="1472">
                Brings this internal frame to the front.
                  Places this internal frame  at the top of the stacking order
                  and makes the corresponding adjustment to other visible internal
                  frames.                
                <see>
                    java.awt.Window#toFront                    
                </see>
                <see>
                    #moveToFront                    
                </see>
            </javadoc>
            <method name="toFront" type="void" line="1480"/>
            <javadoc line="1483">
                Sends this internal frame to the back.
                  Places this internal frame at the bottom of the stacking order
                  and makes the corresponding adjustment to other visible
                  internal frames.                
                <see>
                    java.awt.Window#toBack                    
                </see>
                <see>
                    #moveToBack                    
                </see>
            </javadoc>
            <method name="toBack" type="void" line="1491"/>
            <javadoc line="1494">
                Does nothing because &lt;code&gt;JInternalFrame&lt;/code&gt;s must always be roots of a focus
                  traversal cycle.                
                <param>
                    focusCycleRoot this value is ignored                    
                </param>
                <see>
                    #isFocusCycleRoot                    
                </see>
                <see>
                    java.awt.Container#setFocusTraversalPolicy                    
                </see>
                <see>
                    java.awt.Container#getFocusTraversalPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setFocusCycleRoot" type="void" line="1503">
                <params>
                    <param name="focusCycleRoot" type="boolean"/>
                </params>
            </method>
            <javadoc line="1505">
                Always returns &lt;code&gt;true&lt;/code&gt; because all &lt;code&gt;JInternalFrame&lt;/code&gt;s must be
                  roots of a focus traversal cycle.                
                <return>
                    <code>true</code>                    
                </return>
                <see>
                    #setFocusCycleRoot                    
                </see>
                <see>
                    java.awt.Container#setFocusTraversalPolicy                    
                </see>
                <see>
                    java.awt.Container#getFocusTraversalPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFocusCycleRoot" type="boolean" line="1514"/>
            <javadoc line="1517">
                Always returns &lt;code&gt;null&lt;/code&gt; because &lt;code&gt;JInternalFrame&lt;/code&gt;s
                  must always be roots of a focus
                  traversal cycle.                
                <return>
                    <code>null</code>                    
                </return>
                <see>
                    java.awt.Container#isFocusCycleRoot()                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFocusCycleRootAncestor" type="Container" line="1525"/>
            <javadoc line="1528">
                Gets the warning string that is displayed with this internal frame.
                  Since an internal frame is always secure (since it&apos;s fully
                  contained within a window that might need a warning string)
                  this method always returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    <code>null</code>                    
                </return>
                <see>
                    java.awt.Window#getWarningString                    
                </see>
            </javadoc>
            <method name="getWarningString" type="String" line="1536"/>
            <javadoc line="1539">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt;
                  in &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1544">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1546">
                    <declaration name="count" type="byte" line="1547"/>
                    <scope line="1549">
                        <declaration name="old" type="boolean" line="1550"/>
                        <scope line="1551"/>
                        <scope line="1555"/>
                    </scope>
                </scope>
            </method>
            <method name="compWriteObjectNotify" type="void" line="1561">
                <declaration name="old" type="boolean" line="1562"/>
                <scope line="1563"/>
                <scope line="1567"/>
            </method>
            <javadoc line="1571">
                Returns a string representation of this &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JInternalFrame</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1580">
                <declaration name="rootPaneString" type="String" line="1581"/>
                <declaration name="rootPaneCheckingEnabledString" type="String" line="1582"/>
                <declaration name="closableString" type="String" line="1583"/>
                <declaration name="isClosedString" type="String" line="1584"/>
                <declaration name="maximizableString" type="String" line="1585"/>
                <declaration name="isMaximumString" type="String" line="1586"/>
                <declaration name="iconableString" type="String" line="1587"/>
                <declaration name="isIconString" type="String" line="1588"/>
                <declaration name="resizableString" type="String" line="1589"/>
                <declaration name="isSelectedString" type="String" line="1590"/>
                <declaration name="frameIconString" type="String" line="1591"/>
                <declaration name="titleString" type="String" line="1592"/>
                <declaration name="desktopIconString" type="String" line="1593"/>
                <declaration name="openedString" type="String" line="1594"/>
                <declaration name="defaultCloseOperationString" type="String" line="1595"/>
                <scope line="1596"/>
                <scope line="1599"/>
                <scope line="1602"/>
            </method>
            <declaration name="isDragging" type="boolean" line="1608"/>
            <declaration name="danger" type="boolean" line="1609"/>
            <javadoc line="1610">
                Overridden to allow optimized painting when the
                  internal frame is being dragged.                
            </javadoc>
            <method name="paintComponent" type="void" line="1614">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="1615"/>
            </method>
            <javadoc line="1620">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  For internal frames, the &lt;code&gt;AccessibleContext&lt;/code&gt;
                  takes the form of an
                  &lt;code&gt;AccessibleJInternalFrame&lt;/code&gt; object.
                  A new &lt;code&gt;AccessibleJInternalFrame&lt;/code&gt; instance is created if necessary.                
                <return>
                    an <code>AccessibleJInternalFrame</code> that serves as the
                      <code>AccessibleContext</code> of this
                      <code>JInternalFrame</code>                    
                </return>
                <see>
                    AccessibleJInternalFrame                    
                </see>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1632">
                <scope line="1633"/>
            </method>
            <class name="AccessibleJInternalFrame" line="1638">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="1638">
                    This class implements accessibility support for the
                      &lt;code&gt;JInternalFrame&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to internal frame user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1654">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be <code>null</code> if this
                          object does not have a name                        
                    </return>
                    <see>
                        #setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleName" type="String" line="1660">
                    <declaration name="name" type="String" line="1661"/>
                    <scope line="1662"/>
                    <scope line="1665"/>
                </method>
                <javadoc line="1670">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1676"/>
                <javadoc line="1679">
                    Gets the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      returns this object, which is responsible for implementing the
                      &lt;code&gt;AccessibleValue&lt;/code&gt; interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="1686"/>
                <javadoc line="1689">
                    Get the value of this object as a Number.                    
                    <return>
                        value of the object -- can be <code>null</code> if this object does not
                          have a value                        
                    </return>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="1694"/>
                <javadoc line="1697">
                    Set the value of this object as a Number.                    
                    <return>
                        <code>true</code> if the value was set                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="1701">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <scope line="1702"/>
                </method>
                <javadoc line="1708">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        Minimum value of the object; <code>null</code> if this object does not
                          have a minimum value                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="1713"/>
                <javadoc line="1716">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        Maximum value of the object; <code>null</code> if this object does not
                          have a maximum value                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="1721"/>
            </class>
            <class name="JDesktopIcon" line="1725">
                <extends class="JComponent"/>
                <implements interface="Accessible"/>
                <javadoc line="1725">
                    This component represents an iconified version of a
                      &lt;code&gt;JInternalFrame&lt;/code&gt;.
                      This API should NOT BE USED by Swing applications, as it will go
                      away in future versions of Swing as its functionality is moved into
                      &lt;code&gt;JInternalFrame&lt;/code&gt;.  This class is public only so that
                      UI objects can display a desktop icon.  If an application
                      wants to display a desktop icon, it should create a
                      &lt;code&gt;JInternalFrame&lt;/code&gt; instance and iconify it.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <author>
                        David Kloba                        
                    </author>
                </javadoc>
                <declaration name="internalFrame" type="JInternalFrame" line="1746"/>
                <javadoc line="1747">
                    Creates an icon for an internal frame.                    
                    <param>
                        f  the <code>JInternalFrame</code>
                          for which the icon is created                        
                    </param>
                </javadoc>
                <method name="JDesktopIcon" type="constructor" line="1752">
                    <params>
                        <param name="f" type="JInternalFrame"/>
                    </params>
                </method>
                <javadoc line="1757">
                    Returns the look-and-feel object that renders this component.                    
                    <return>
                        the <code>DesktopIconUI</code> object that renders
                          this component                        
                    </return>
                </javadoc>
                <method name="getUI" type="DesktopIconUI" line="1762"/>
                <javadoc line="1765">
                    Sets the look-and-feel object that renders this component.                    
                    <param>
                        ui  the <code>DesktopIconUI</code> look-and-feel object                        
                    </param>
                    <see>
                        UIDefaults#getUI                        
                    </see>
                </javadoc>
                <method name="setUI" type="void" line="1770">
                    <params>
                        <param name="ui" type="DesktopIconUI"/>
                    </params>
                </method>
                <javadoc line="1773">
                    Returns the &lt;code&gt;JInternalFrame&lt;/code&gt; that this
                      &lt;code&gt;DesktopIcon&lt;/code&gt; is associated with.                    
                    <return>
                        the <code>JInternalFrame</code> with which this icon
                          is associated                        
                    </return>
                </javadoc>
                <method name="getInternalFrame" type="JInternalFrame" line="1779"/>
                <javadoc line="1782">
                    Sets the &lt;code&gt;JInternalFrame&lt;/code&gt; with which this
                      &lt;code&gt;DesktopIcon&lt;/code&gt; is associated.                    
                    <param>
                        f  the <code>JInternalFrame</code> with which this icon
                          is associated                        
                    </param>
                </javadoc>
                <method name="setInternalFrame" type="void" line="1788">
                    <params>
                        <param name="f" type="JInternalFrame"/>
                    </params>
                </method>
                <javadoc line="1791">
                    Convenience method to ask the icon for the &lt;code&gt;Desktop&lt;/code&gt;
                      object it belongs to.                    
                    <return>
                        the <code>JDesktopPane</code> that contains this
                          icon's internal frame, or <code>null</code> if none found                        
                    </return>
                </javadoc>
                <method name="getDesktopPane" type="JDesktopPane" line="1797"/>
                <javadoc line="1801">
                    Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the look and feel
                      has changed.
                      Replaces the current UI object with the latest version from the
                      &lt;code&gt;UIManager&lt;/code&gt;.                    
                    <see>
                        JComponent#updateUI                        
                    </see>
                </javadoc>
                <method name="updateUI" type="void" line="1808">
                    <declaration name="hadUI" type="boolean" line="1809"/>
                    <declaration name="r" type="Dimension" line="1812"/>
                    <scope line="1814"/>
                </method>
                <method name="updateUIWhenHidden" type="void" line="1818">
                    <declaration name="r" type="Dimension" line="1820"/>
                    <declaration name="children" type="Component[]" line="1823"/>
                    <scope line="1824">
                        <scope line="1825"/>
                    </scope>
                </method>
                <javadoc line="1830">
                    Returns the name of the look-and-feel
                      class that renders this component.                    
                    <return>
                        the string "DesktopIconUI"                        
                    </return>
                    <see>
                        JComponent#getUIClassID                        
                    </see>
                    <see>
                        UIDefaults#getUI                        
                    </see>
                </javadoc>
                <method name="getUIClassID" type="String" line="1837"/>
                <method name="writeObject" type="void" line="1840">
                    <params>
                        <param name="s" type="ObjectOutputStream"/>
                    </params>
                    <scope line="1842">
                        <declaration name="count" type="byte" line="1843"/>
                        <scope line="1845"/>
                    </scope>
                </method>
                <javadoc line="1850">
                    Gets the AccessibleContext associated with this JDesktopIcon.
                      For desktop icons, the AccessibleContext takes the form of an
                      AccessibleJDesktopIcon.
                      A new AccessibleJDesktopIcon instance is created if necessary.                    
                    <return>
                        an AccessibleJDesktopIcon that serves as the
                          AccessibleContext of this JDesktopIcon                        
                    </return>
                </javadoc>
                <method name="getAccessibleContext" type="AccessibleContext" line="1858">
                    <scope line="1859"/>
                </method>
                <class name="AccessibleJDesktopIcon" line="1864">
                    <extends class="AccessibleJComponent"/>
                    <implements interface="AccessibleValue"/>
                    <javadoc line="1864">
                        This class implements accessibility support for the
                          &lt;code&gt;JInternalFrame.JDesktopIcon&lt;/code&gt; class.  It provides an
                          implementation of the Java Accessibility API appropriate to
                          desktop icon user-interface elements.
                          &lt;p&gt;
                          &lt;strong&gt;Warning:&lt;/strong&gt;
                          Serialized objects of this class will not be compatible with
                          future Swing releases. The current serialization support is
                          appropriate for short term storage or RMI between applications running
                          the same version of Swing.  As of 1.4, support for long term storage
                          of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                          has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                          Please see {@link java.beans.XMLEncoder}.                        
                    </javadoc>
                    <javadoc line="1880">
                        Gets the role of this object.                        
                        <return>
                            an instance of AccessibleRole describing the role of the
                              object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="1886"/>
                    <javadoc line="1889">
                        Gets the AccessibleValue associated with this object.  In the
                          implementation of the Java Accessibility API for this class,
                          returns this object, which is responsible for implementing the
                          &lt;code&gt;AccessibleValue&lt;/code&gt; interface on behalf of itself.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleValue" type="AccessibleValue" line="1896"/>
                    <javadoc line="1899">
                        Gets the value of this object as a &lt;code&gt;Number&lt;/code&gt;.                        
                        <return>
                            value of the object -- can be <code>null</code> if this object does not
                              have a value                            
                        </return>
                    </javadoc>
                    <method name="getCurrentAccessibleValue" type="Number" line="1904">
                        <declaration name="a" type="AccessibleContext" line="1905"/>
                        <declaration name="v" type="AccessibleValue" line="1906"/>
                        <scope line="1907"/>
                        <scope line="1910"/>
                    </method>
                    <javadoc line="1914">
                        Sets the value of this object as a &lt;code&gt;Number&lt;/code&gt;.                        
                        <return>
                            <code>true</code> if the value was set                            
                        </return>
                    </javadoc>
                    <method name="setCurrentAccessibleValue" type="boolean" line="1918">
                        <params>
                            <param name="n" type="Number"/>
                        </params>
                        <scope line="1919"/>
                        <declaration name="a" type="AccessibleContext" line="1922"/>
                        <declaration name="v" type="AccessibleValue" line="1923"/>
                        <scope line="1924"/>
                        <scope line="1927"/>
                    </method>
                    <javadoc line="1931">
                        Gets the minimum value of this object as a &lt;code&gt;Number&lt;/code&gt;.                        
                        <return>
                            minimum value of the object; <code>null</code> if this object does not
                              have a minimum value                            
                        </return>
                    </javadoc>
                    <method name="getMinimumAccessibleValue" type="Number" line="1936">
                        <declaration name="a" type="AccessibleContext" line="1937"/>
                        <scope line="1938"/>
                        <scope line="1941"/>
                    </method>
                    <javadoc line="1945">
                        Gets the maximum value of this object as a &lt;code&gt;Number&lt;/code&gt;.                        
                        <return>
                            maximum value of the object; <code>null</code> if this object does not
                              have a maximum value                            
                        </return>
                    </javadoc>
                    <method name="getMaximumAccessibleValue" type="Number" line="1950">
                        <declaration name="a" type="AccessibleContext" line="1951"/>
                        <scope line="1952"/>
                        <scope line="1955"/>
                    </method>
                </class>
            </class>
        </class>
    </source>