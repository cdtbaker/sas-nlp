<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Set"/>
        <class name="ActionMap" line="34">
            <implements interface="Serializable"/>
            <javadoc line="34">
                &lt;code&gt;ActionMap&lt;/code&gt; provides mappings from
                  &lt;code&gt;Object&lt;/code&gt;s
                  (called &lt;em&gt;keys&lt;/em&gt; or &lt;em&gt;&lt;code&gt;Action&lt;/code&gt; names&lt;/em&gt;)
                  to &lt;code&gt;Action&lt;/code&gt;s.
                  An &lt;code&gt;ActionMap&lt;/code&gt; is usually used with an &lt;code&gt;InputMap&lt;/code&gt;
                  to locate a particular action
                  when a key is pressed. As with &lt;code&gt;InputMap&lt;/code&gt;,
                  an &lt;code&gt;ActionMap&lt;/code&gt; can have a parent
                  that is searched for keys not defined in the &lt;code&gt;ActionMap&lt;/code&gt;.
                  &lt;p&gt;As with &lt;code&gt;InputMap&lt;/code&gt; if you create a cycle, eg:
                  &lt;pre&gt;
                  ActionMap am = new ActionMap();
                  ActionMap bm = new ActionMap():
                  am.setParent(bm);
                  bm.setParent(am);
                  &lt;/pre&gt;
                  some of the methods will cause a StackOverflowError to be thrown.                
                <see>
                    InputMap                    
                </see>
                <author>
                    Scott Violet                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="arrayTable" type="ArrayTable" line="59"/>
            <javadoc line="59">
                Handles the mapping between Action name and Action.                
            </javadoc>
            <declaration name="parent" type="ActionMap" line="61"/>
            <javadoc line="61">
                Parent that handles any bindings we don&apos;t contain.                
            </javadoc>
            <javadoc line="65">
                Creates an &lt;code&gt;ActionMap&lt;/code&gt; with no parent and no mappings.                
            </javadoc>
            <method name="ActionMap" type="constructor" line="68"/>
            <javadoc line="71">
                Sets this &lt;code&gt;ActionMap&lt;/code&gt;&apos;s parent.                
                <param>
                    map  the &lt;code&gt;ActionMap&lt;/code&gt; that is the parent of this one                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="76">
                <params>
                    <param name="map" type="ActionMap"/>
                </params>
            </method>
            <javadoc line="80">
                Returns this &lt;code&gt;ActionMap&lt;/code&gt;&apos;s parent.                
                <return>
                    the &lt;code&gt;ActionMap&lt;/code&gt; that is the parent of this one,
                      or null if this &lt;code&gt;ActionMap&lt;/code&gt; has no parent                    
                </return>
            </javadoc>
            <method name="getParent" type="ActionMap" line="86"/>
            <javadoc line="90">
                Adds a binding for &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;action&lt;/code&gt;.
                  If &lt;code&gt;action&lt;/code&gt; is null, this removes the current binding
                  for &lt;code&gt;key&lt;/code&gt;.
                  &lt;p&gt;In most instances, &lt;code&gt;key&lt;/code&gt; will be
                  &lt;code&gt;action.getValue(NAME)&lt;/code&gt;.                
            </javadoc>
            <method name="put" type="void" line="97">
                <params>
                    <param name="key" type="Object"/>
                    <param name="action" type="Action"/>
                </params>
                <scope line="98"/>
                <scope line="101"/>
                <scope line="104">
                    <scope line="105"/>
                </scope>
            </method>
            <javadoc line="112">
                Returns the binding for &lt;code&gt;key&lt;/code&gt;, messaging the
                  parent &lt;code&gt;ActionMap&lt;/code&gt; if the binding is not locally defined.                
            </javadoc>
            <method name="get" type="Action" line="116">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Action" line="117"/>
                <scope line="120">
                    <declaration name="parent" type="ActionMap" line="121"/>
                    <scope line="123"/>
                </scope>
            </method>
            <javadoc line="130">
                Removes the binding for &lt;code&gt;key&lt;/code&gt; from this &lt;code&gt;ActionMap&lt;/code&gt;.                
            </javadoc>
            <method name="remove" type="void" line="133">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Removes all the mappings from this &lt;code&gt;ActionMap&lt;/code&gt;.                
            </javadoc>
            <method name="clear" type="void" line="142">
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Returns the &lt;code&gt;Action&lt;/code&gt; names that are bound in this &lt;code&gt;ActionMap&lt;/code&gt;.                
            </javadoc>
            <method name="keys" type="Object[]" line="151">
                <scope line="152"/>
            </method>
            <javadoc line="158">
                Returns the number of bindings in this {@code ActionMap}.                
                <return>
                    the number of bindings in this {@code ActionMap}                    
                </return>
            </javadoc>
            <method name="size" type="int" line="163">
                <scope line="164"/>
            </method>
            <javadoc line="170">
                Returns an array of the keys defined in this &lt;code&gt;ActionMap&lt;/code&gt; and
                  its parent. This method differs from &lt;code&gt;keys()&lt;/code&gt; in that
                  this method includes the keys defined in the parent.                
            </javadoc>
            <method name="allKeys" type="Object[]" line="175">
                <comment line="196">
                    Should only happen if size() != keys.length, which should only
                     happen if mutated from multiple threads (or a bogus subclass).                    
                </comment>
                <declaration name="count" type="int" line="176"/>
                <declaration name="parent" type="ActionMap" line="177"/>
                <scope line="179">
                    <scope line="180"/>
                </scope>
                <scope line="185"/>
                <declaration name="keys" type="Object[]" line="188"/>
                <declaration name="pKeys" type="Object[]" line="189"/>
                <scope line="191"/>
                <scope line="194"/>
                <declaration name="keyMap" type="HashMap&lt;Object,Object&gt;" line="200"/>
                <declaration name="counter" type="int" line="201"/>
                <scope line="203"/>
                <scope line="206"/>
            </method>
            <method name="writeObject" type="void" line="212">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="219">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="221"/>
            </method>
        </class>
    </source>