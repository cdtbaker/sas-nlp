<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.applet.Applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="java.lang.reflect"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.security.AccessController"/>
        <import package="java.util"/>
        <import package="com.sun.java.swing.SwingUtilities3"/>
        <import package="sun.awt.SubRegionShowable"/>
        <import package="sun.java2d.SunGraphics2D"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.java2d.pipe.hw.ExtendedBufferCapabilities"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="BufferStrategyPaintManager" line="17">
            <extends class="RepaintManager.PaintManager"/>
            <javadoc line="17">
                A PaintManager implementation that uses a BufferStrategy for
                  rendering.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="COMPONENT_CREATE_BUFFER_STRATEGY_METHOD" type="Method" line="23"/>
            <declaration name="COMPONENT_GET_BUFFER_STRATEGY_METHOD" type="Method" line="24"/>
            <declaration name="LOGGER" type="PlatformLogger" line="25"/>
            <declaration name="bufferInfos" type="ArrayList&amp;lt;BufferInfo&amp;gt;" line="26"/>
            <javadoc line="26">
                List of BufferInfos.  We don&apos;t use a Map primarily because
                  there are typically only a handful of top level components making
                  a Map overkill.                
            </javadoc>
            <declaration name="painting" type="boolean" line="32"/>
            <javadoc line="32">
                Indicates &lt;code&gt;beginPaint&lt;/code&gt; has been invoked.  This is
                  set to true for the life of beginPaint/endPaint pair.                
            </javadoc>
            <declaration name="showing" type="boolean" line="37"/>
            <javadoc line="37">
                Indicates we&apos;re in the process of showing.  All painting, on the EDT,
                  is blocked while this is true.                
            </javadoc>
            <declaration name="accumulatedX" type="int" line="42"/>
            <declaration name="accumulatedY" type="int" line="43"/>
            <declaration name="accumulatedMaxX" type="int" line="44"/>
            <declaration name="accumulatedMaxY" type="int" line="45"/>
            <declaration name="rootJ" type="JComponent" line="46"/>
            <javadoc line="46">
                Farthest JComponent ancestor for the current paint/copyArea.                
            </javadoc>
            <declaration name="root" type="Container" line="50"/>
            <javadoc line="50">
                Parent Applet/Window for the current paint/copyArea                
            </javadoc>
            <declaration name="xOffset" type="int" line="54"/>
            <javadoc line="54">
                Location of component being painted relative to root.                
            </javadoc>
            <declaration name="yOffset" type="int" line="58"/>
            <javadoc line="58">
                Location of component being painted relative to root.                
            </javadoc>
            <declaration name="bsg" type="Graphics" line="62"/>
            <javadoc line="62">
                Graphics from the BufferStrategy.                
            </javadoc>
            <declaration name="bufferStrategy" type="BufferStrategy" line="66"/>
            <javadoc line="66">
                BufferStrategy currently being used.                
            </javadoc>
            <declaration name="bufferInfo" type="BufferInfo" line="70"/>
            <javadoc line="70">
                BufferInfo corresponding to root.                
            </javadoc>
            <declaration name="disposeBufferOnEnd" type="boolean" line="74"/>
            <javadoc line="74">
                Set to true if the bufferInfo needs to be disposed when current
                  paint loop is done.                
            </javadoc>
            <method name="getGetBufferStrategyMethod" type="Method" line="79">
                <scope line="80"/>
            </method>
            <method name="getCreateBufferStrategyMethod" type="Method" line="85">
                <scope line="86"/>
            </method>
            <method name="getMethods" type="void" line="91"/>
            <method name="BufferStrategyPaintManager" type="constructor" line="111"/>
            <javadoc line="114">
                Cleans up any created BufferStrategies.                
            </javadoc>
            <method name="dispose" type="void" line="117">
                <anonymous_class line="118">
                    <method name="run" type="void" line="119">
                        <declaration name="bufferInfos" type="java.util.List&amp;lt;BufferInfo&amp;gt;" line="120"/>
                        <scope line="121">
                            <scope line="122">
                                <scope line="123"/>
                                <scope line="126"/>
                            </scope>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <method name="dispose" type="void" line="137">
                <params>
                    <param name="bufferInfos" type="java.util.List&lt;BufferInfo&gt;"/>
                </params>
                <scope line="138"/>
                <scope line="141">
                    <scope line="142"/>
                </scope>
            </method>
            <javadoc line="147">
                Shows the specified region of the back buffer.  This will return
                  true if successful, false otherwise.  This is invoked on the
                  toolkit thread in response to an expose event.                
            </javadoc>
            <method name="show" type="boolean" line="152">
                <params>
                    <param name="c" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="153">
                    <scope line="154"/>
                </scope>
                <scope line="159">
                    <declaration name="info" type="BufferInfo" line="160"/>
                    <declaration name="bufferStrategy" type="BufferStrategy" line="161"/>
                    <scope line="162">
                        <declaration name="bsSubRegion" type="SubRegionShowable" line="163"/>
                        <declaration name="paintAllOnExpose" type="boolean" line="164"/>
                        <scope line="166"/>
                    </scope>
                </scope>
                <scope line="172">
                    <scope line="173"/>
                </scope>
            </method>
            <method name="paint" type="boolean" line="180">
                <params>
                    <param name="paintingComponent" type="JComponent"/>
                    <param name="bufferComponent" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="181">
                    <scope line="182">
                        <declaration name="cx" type="int" line="183"/>
                        <declaration name="cy" type="int" line="184"/>
                        <scope line="185"/>
                    </scope>
                    <scope line="194"/>
                </scope>
                <scope line="198"/>
            </method>
            <method name="copyArea" type="void" line="203">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="deltaX" type="int"/>
                    <param name="deltaY" type="int"/>
                    <param name="clip" type="boolean"/>
                </params>
                <scope line="204">
                    <scope line="205">
                        <declaration name="cBounds" type="Rectangle" line="206"/>
                        <declaration name="relX" type="int" line="207"/>
                        <declaration name="relY" type="int" line="208"/>
                    </scope>
                    <scope line="212"/>
                </scope>
                <scope line="217">
                    <scope line="218"/>
                    <scope line="221"/>
                    <scope line="224"/>
                </scope>
            </method>
            <method name="beginPaint" type="void" line="229">
                <scope line="230">
                    <scope line="232">
                        <scope line="233"/>
                        <scope line="236"/>
                    </scope>
                </scope>
                <scope line="240"/>
            </method>
            <method name="endPaint" type="void" line="245">
                <scope line="246"/>
                <scope line="249">
                    <scope line="250">
                        <scope line="251"/>
                        <scope line="254"/>
                    </scope>
                </scope>
                <declaration name="toDispose" type="BufferInfo" line="260"/>
                <scope line="261">
                    <scope line="263"/>
                </scope>
                <scope line="269"/>
            </method>
            <javadoc line="273">
                Renders the BufferStrategy to the screen.                
                <return>
                    true if successful, false otherwise.                    
                </return>
            </javadoc>
            <method name="flushAccumulatedRegion" type="boolean" line="277">
                <declaration name="success" type="boolean" line="278"/>
                <scope line="279">
                    <declaration name="bsSubRegion" type="SubRegionShowable" line="280"/>
                    <declaration name="contentsLost" type="boolean" line="281"/>
                    <scope line="282"/>
                    <scope line="286">
                        <scope line="287"/>
                    </scope>
                </scope>
            </method>
            <method name="resetAccumulated" type="void" line="297"/>
            <javadoc line="303">
                Invoked when the double buffering or useTrueDoubleBuffering
                  changes for a JRootPane.  If the rootpane is not double
                  buffered, or true double buffering changes we throw out any
                  cache we may have.                
            </javadoc>
            <method name="doubleBufferingChanged" type="void" line="309">
                <params>
                    <param name="rootPane" type="JRootPane"/>
                </params>
                <scope line="310">
                    <scope line="311">
                        <anonymous_class line="312">
                            <method name="run" type="void" line="313"/>
                        </anonymous_class>
                        <declaration name="updater" type="Runnable" line="312"/>
                    </scope>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="325">
                Does the work for doubleBufferingChanged.                
            </javadoc>
            <method name="doubleBufferingChanged0" type="void" line="328">
                <params>
                    <param name="rootPane" type="JRootPane"/>
                </params>
                <declaration name="info" type="BufferInfo" line="329"/>
                <scope line="330">
                    <scope line="331">
                        <scope line="332"/>
                        <scope line="335"/>
                    </scope>
                    <scope line="339"/>
                    <scope line="343"/>
                </scope>
                <scope line="347"/>
            </method>
            <javadoc line="351">
                Calculates information common to paint/copyArea.                
                <return>
                    true if should use buffering per window in painting.                    
                </return>
            </javadoc>
            <method name="prepare" type="boolean" line="355">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="isPaint" type="boolean"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <scope line="356"/>
                <scope line="361">
                    <declaration name="contentsLost" type="boolean" line="362"/>
                    <declaration name="bufferInfo" type="BufferInfo" line="363"/>
                    <scope line="364">
                        <scope line="368"/>
                    </scope>
                    <scope line="373">
                        <scope line="375">
                            <scope line="377">
                                <scope line="379"/>
                            </scope>
                        </scope>
                        <scope line="384"/>
                        <scope line="387">
                            <scope line="390"/>
                        </scope>
                        <scope line="394"/>
                        <scope line="397">
                            <scope line="399"/>
                            <scope line="402"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="fetchRoot" type="boolean" line="411">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="encounteredHW" type="boolean" line="412"/>
                <scope line="416">
                    <scope line="420">
                        <scope line="421"/>
                        <scope line="424">
                            <scope line="425"/>
                            <scope line="428"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="434">
                    <scope line="435"/>
                </scope>
            </method>
            <javadoc line="441">
                Turns off double buffering per window.                
            </javadoc>
            <method name="resetDoubleBufferPerWindow" type="void" line="444">
                <scope line="445"/>
            </method>
            <javadoc line="451">
                Returns the BufferInfo for the specified root or null if one
                  hasn&apos;t been created yet.                
            </javadoc>
            <method name="getBufferInfo" type="BufferInfo" line="455">
                <params>
                    <param name="root" type="Container"/>
                </params>
                <scope line="456">
                    <declaration name="bufferInfo" type="BufferInfo" line="457"/>
                    <declaration name="biRoot" type="Container" line="458"/>
                    <scope line="459">
                        <scope line="461"/>
                    </scope>
                    <scope line="465"/>
                </scope>
            </method>
            <method name="accumulate" type="void" line="471">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <class name="BufferInfo" line="477">
                <extends class="ComponentAdapter"/>
                <implements interface="WindowListener"/>
                <javadoc line="477">
                    BufferInfo is used to track the BufferStrategy being used for
                      a particular Component.  In addition to tracking the BufferStrategy
                      it will install a WindowListener and ComponentListener.  When the
                      component is hidden/iconified the buffer is marked as needing to be
                      completely repainted.                    
                </javadoc>
                <declaration name="weakBS" type="WeakReference&amp;lt;BufferStrategy&amp;gt;" line="485"/>
                <declaration name="root" type="WeakReference&amp;lt;Container&amp;gt;" line="486"/>
                <declaration name="inSync" type="boolean" line="487"/>
                <declaration name="contentsLostDuringExpose" type="boolean" line="488"/>
                <declaration name="paintAllOnExpose" type="boolean" line="489"/>
                <method name="BufferInfo" type="constructor" line="490">
                    <params>
                        <param name="root" type="Container"/>
                    </params>
                    <scope line="493"/>
                </method>
                <method name="setPaintAllOnExpose" type="void" line="497">
                    <params>
                        <param name="paintAllOnExpose" type="boolean"/>
                    </params>
                </method>
                <method name="getPaintAllOnExpose" type="boolean" line="500"/>
                <method name="setContentsLostDuringExpose" type="void" line="503">
                    <params>
                        <param name="value" type="boolean"/>
                    </params>
                </method>
                <method name="getContentsLostDuringExpose" type="boolean" line="506"/>
                <method name="setInSync" type="void" line="509">
                    <params>
                        <param name="inSync" type="boolean"/>
                    </params>
                </method>
                <javadoc line="512">
                    Whether or not the contents of the buffer strategy
                      is in sync with the window.  This is set to true when the root
                      pane paints all, and false when contents are lost/restored.                    
                </javadoc>
                <method name="isInSync" type="boolean" line="517"/>
                <javadoc line="520">
                    Returns the Root (Window or Applet) that this BufferInfo references.                    
                </javadoc>
                <method name="getRoot" type="Container" line="523"/>
                <javadoc line="526">
                    Returns the BufferStartegy.  This will return null if
                      the BufferStartegy hasn&apos;t been created and &lt;code&gt;create&lt;/code&gt; is
                      false, or if there is a problem in creating the
                      &lt;code&gt;BufferStartegy&lt;/code&gt;.                    
                    <param>
                        create If true, and the BufferStartegy is currently null,
                          one will be created.                        
                    </param>
                </javadoc>
                <method name="getBufferStrategy" type="BufferStrategy" line="534">
                    <params>
                        <param name="create" type="boolean"/>
                    </params>
                    <declaration name="bs" type="BufferStrategy" line="535"/>
                    <scope line="536">
                        <scope line="538"/>
                        <scope line="541"/>
                    </scope>
                </method>
                <javadoc line="547">
                    Returns true if the buffer strategy of the component differs
                      from current buffer strategy.                    
                </javadoc>
                <method name="hasBufferStrategyChanged" type="boolean" line="551"/>
                <javadoc line="584">
                    Creates the BufferStrategy.  If the appropriate system property
                      has been set we&apos;ll try for flip first and then we&apos;ll try for
                      blit.                    
                </javadoc>
                <method name="createBufferStrategy" type="BufferStrategy" line="589">
                    <declaration name="root" type="Container" line="590"/>
                    <scope line="591"/>
                    <declaration name="bs" type="BufferStrategy" line="594"/>
                    <scope line="595">
                        <scope line="597"/>
                    </scope>
                    <scope line="601"/>
                    <scope line="604"/>
                </method>
                <method name="createBufferStrategy" type="BufferStrategy" line="609">
                    <params>
                        <param name="root" type="Container"/>
                        <param name="isVsynced" type="boolean"/>
                    </params>
                </method>
                <javadoc line="648">
                    Cleans up and removes any references.                    
                </javadoc>
                <method name="dispose" type="void" line="651">
                    <declaration name="root" type="Container" line="652"/>
                    <scope line="653"/>
                    <scope line="656">
                        <scope line="658"/>
                        <declaration name="bs" type="BufferStrategy" line="661"/>
                        <scope line="662"/>
                    </scope>
                </method>
                <method name="componentHidden" type="void" line="669">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                    <declaration name="root" type="Container" line="670"/>
                    <scope line="671"/>
                    <scope line="674"/>
                </method>
                <method name="windowIconified" type="void" line="678">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowClosed" type="void" line="681">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <scope line="682">
                        <scope line="683">
                            <scope line="684"/>
                            <scope line="687"/>
                        </scope>
                    </scope>
                </method>
                <method name="windowOpened" type="void" line="694">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowClosing" type="void" line="696">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeiconified" type="void" line="698">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="700">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeactivated" type="void" line="702">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>