<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.EventListener"/>
        <class name="DefaultSingleSelectionModel" line="5">
            <implements interface="SingleSelectionModel"/>
            <implements interface="Serializable"/>
            <javadoc line="5">
                A generic implementation of SingleSelectionModel.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Dave Moore                    
                </author>
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="19"/>
            <declaration name="listenerList" type="EventListenerList" line="20"/>
            <javadoc line="20">
                The collection of registered listeners                
            </javadoc>
            <declaration name="index" type="int" line="24"/>
            <method name="getSelectedIndex" type="int" line="25"/>
            <method name="setSelectedIndex" type="void" line="28">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="29"/>
            </method>
            <method name="clearSelection" type="void" line="34"/>
            <method name="isSelected" type="boolean" line="37">
                <declaration name="ret" type="boolean" line="38"/>
                <scope line="39"/>
            </method>
            <javadoc line="44">
                Adds a &lt;code&gt;ChangeListener&lt;/code&gt; to the button.                
            </javadoc>
            <method name="addChangeListener" type="void" line="47">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="50">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt; from the button.                
            </javadoc>
            <method name="removeChangeListener" type="void" line="53">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="56">
                Returns an array of all the change listeners
                  registered on this &lt;code&gt;DefaultSingleSelectionModel&lt;/code&gt;.                
                <return>
                    all of this model&apos;s &lt;code&gt;ChangeListener&lt;/code&gt;s
                      or an empty
                      array if no change listeners are currently registered                    
                </return>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="66"/>
            <javadoc line="69">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="75">
                <declaration name="listeners" type="Object[]" line="76"/>
                <scope line="77">
                    <scope line="78"/>
                </scope>
            </method>
            <javadoc line="84">
                Returns an array of all the objects currently registered as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  are registered using the &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a &lt;code&gt;DefaultSingleSelectionModel&lt;/code&gt;
                  instance &lt;code&gt;m&lt;/code&gt;
                  for its change listeners
                  with the following code:
                  &lt;pre&gt;ChangeListener[] cls = (ChangeListener[])(m.getListeners(ChangeListener.class));&lt;/pre&gt;
                  If no such listeners exist,
                  this method returns an empty array.                
                <param>
                    listenerType  the type of listeners requested;
                      this parameter should specify an interface
                      that descends from &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                      on this model,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt; doesn&apos;t
                      specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getChangeListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="114">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
            </method>
        </class>
    </source>