<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="sun.awt.ModalExclude"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="Popup" line="33">
            <javadoc line="33">
                Popups are used to display a &lt;code&gt;Component&lt;/code&gt; to the user, typically
                  on top of all the other &lt;code&gt;Component&lt;/code&gt;s in a particular containment
                  hierarchy. &lt;code&gt;Popup&lt;/code&gt;s have a very small life cycle. Once you
                  have obtained a &lt;code&gt;Popup&lt;/code&gt;, and hidden it (invoked the
                  &lt;code&gt;hide&lt;/code&gt; method), you should no longer
                  invoke any methods on it. This allows the &lt;code&gt;PopupFactory&lt;/code&gt; to cache
                  &lt;code&gt;Popup&lt;/code&gt;s for later use.
                  &lt;p&gt;
                  The general contract is that if you need to change the size of the
                  &lt;code&gt;Component&lt;/code&gt;, or location of the &lt;code&gt;Popup&lt;/code&gt;, you should
                  obtain a new &lt;code&gt;Popup&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;Popup&lt;/code&gt; does not descend from &lt;code&gt;Component&lt;/code&gt;, rather
                  implementations of &lt;code&gt;Popup&lt;/code&gt; are responsible for creating
                  and maintaining their own &lt;code&gt;Component&lt;/code&gt;s to render the
                  requested &lt;code&gt;Component&lt;/code&gt; to the user.
                  &lt;p&gt;
                  You typically do not explicitly create an instance of &lt;code&gt;Popup&lt;/code&gt;,
                  instead obtain one from a &lt;code&gt;PopupFactory&lt;/code&gt;.                
                <see>
                    PopupFactory                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="component" type="Component" line="59"/>
            <javadoc line="59">
                The Component representing the Popup.                
            </javadoc>
            <javadoc line="64">
                Creates a &lt;code&gt;Popup&lt;/code&gt; for the Component &lt;code&gt;owner&lt;/code&gt;
                  containing the Component &lt;code&gt;contents&lt;/code&gt;. &lt;code&gt;owner&lt;/code&gt;
                  is used to determine which &lt;code&gt;Window&lt;/code&gt; the new
                  &lt;code&gt;Popup&lt;/code&gt; will parent the &lt;code&gt;Component&lt;/code&gt; the
                  &lt;code&gt;Popup&lt;/code&gt; creates to.
                  A null &lt;code&gt;owner&lt;/code&gt; implies there is no valid parent.
                  &lt;code&gt;x&lt;/code&gt; and
                  &lt;code&gt;y&lt;/code&gt; specify the preferred initial location to place
                  the &lt;code&gt;Popup&lt;/code&gt; at. Based on screen size, or other paramaters,
                  the &lt;code&gt;Popup&lt;/code&gt; may not display at &lt;code&gt;x&lt;/code&gt; and
                  &lt;code&gt;y&lt;/code&gt;.                
                <param>
                    owner    Component mouse coordinates are relative to, may be null                    
                </param>
                <param>
                    contents Contents of the Popup                    
                </param>
                <param>
                    x        Initial x screen coordinate                    
                </param>
                <param>
                    y        Initial y screen coordinate                    
                </param>
                <exception>
                    IllegalArgumentException if contents is null                    
                </exception>
            </javadoc>
            <method name="Popup" type="constructor" line="83">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="85"/>
            </method>
            <javadoc line="91">
                Creates a &lt;code&gt;Popup&lt;/code&gt;. This is provided for subclasses.                
            </javadoc>
            <method name="Popup" type="constructor" line="94"/>
            <javadoc line="97">
                Makes the &lt;code&gt;Popup&lt;/code&gt; visible. If the &lt;code&gt;Popup&lt;/code&gt; is
                  currently visible, this has no effect.                
            </javadoc>
            <method name="show" type="void" line="101">
                <declaration name="component" type="Component" line="102"/>
                <scope line="104"/>
            </method>
            <javadoc line="109">
                Hides and disposes of the &lt;code&gt;Popup&lt;/code&gt;. Once a &lt;code&gt;Popup&lt;/code&gt;
                  has been disposed you should no longer invoke methods on it. A
                  &lt;code&gt;dispose&lt;/code&gt;d &lt;code&gt;Popup&lt;/code&gt; may be reclaimed and later used
                  based on the &lt;code&gt;PopupFactory&lt;/code&gt;. As such, if you invoke methods
                  on a &lt;code&gt;disposed&lt;/code&gt; &lt;code&gt;Popup&lt;/code&gt;, indeterminate
                  behavior will result.                
            </javadoc>
            <method name="hide" type="void" line="117">
                <declaration name="component" type="Component" line="118"/>
                <scope line="120"/>
            </method>
            <javadoc line="127">
                Frees any resources the &lt;code&gt;Popup&lt;/code&gt; may be holding onto.                
            </javadoc>
            <method name="dispose" type="void" line="130">
                <comment line="139">
                    If our parent is a DefaultFrame, we need to dispose it, too.                    
                </comment>
                <declaration name="component" type="Component" line="131"/>
                <declaration name="window" type="Window" line="132"/>
                <scope line="134"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Resets the &lt;code&gt;Popup&lt;/code&gt; to an initial state.                
            </javadoc>
            <method name="reset" type="void" line="147">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
                <comment line="163">
                    Do not call pack() if window is not visible to
                     avoid early native peer creation                    
                </comment>
                <scope line="148"/>
                <declaration name="c" type="Component" line="152"/>
                <scope line="154">
                    <declaration name="component" type="JWindow" line="155"/>
                    <scope line="161"/>
                </scope>
            </method>
            <javadoc line="170">
                Causes the &lt;code&gt;Popup&lt;/code&gt; to be sized to fit the preferred size
                  of the &lt;code&gt;Component&lt;/code&gt; it contains.                
            </javadoc>
            <method name="pack" type="void" line="174">
                <declaration name="component" type="Component" line="175"/>
                <scope line="177"/>
            </method>
            <javadoc line="182">
                Returns the &lt;code&gt;Window&lt;/code&gt; to use as the parent of the
                  &lt;code&gt;Window&lt;/code&gt; created for the &lt;code&gt;Popup&lt;/code&gt;. This creates
                  a new &lt;code&gt;DefaultFrame&lt;/code&gt;, if necessary.                
            </javadoc>
            <method name="getParentWindow" type="Window" line="187">
                <params>
                    <param name="owner" type="Component"/>
                </params>
                <declaration name="window" type="Window" line="188"/>
                <scope line="190"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <javadoc line="202">
                Creates the Component to use as the parent of the &lt;code&gt;Popup&lt;/code&gt;.
                  The default implementation creates a &lt;code&gt;Window&lt;/code&gt;, subclasses
                  should override.                
            </javadoc>
            <method name="createComponent" type="Component" line="207">
                <params>
                    <param name="owner" type="Component"/>
                </params>
                <comment line="210">
                    Generally not useful, bail.                    
                </comment>
                <scope line="208"/>
            </method>
            <javadoc line="215">
                Returns the &lt;code&gt;Component&lt;/code&gt; returned from
                  &lt;code&gt;createComponent&lt;/code&gt; that will hold the &lt;code&gt;Popup&lt;/code&gt;.                
            </javadoc>
            <method name="getComponent" type="Component" line="219"/>
            <class name="HeavyWeightWindow" line="224">
                <extends class="JWindow"/>
                <implements interface="ModalExclude"/>
                <javadoc line="224">
                    Component used to house window.                    
                </javadoc>
                <method name="HeavyWeightWindow" type="constructor" line="228">
                    <params>
                        <param name="parent" type="Window"/>
                    </params>
                    <comment line="234">
                        Popups are typically transient and most likely won&apos;t benefit
                         from true double buffering.  Turn it off here.                        
                    </comment>
                    <comment line="237">
                        Try to set &quot;always-on-top&quot; for the popup window.
                         Applets usually don&apos;t have sufficient permissions to do it.
                         In this case simply ignore the exception.                        
                    </comment>
                    <comment line="243">
                        setAlwaysOnTop is restricted,
                         the exception is ignored                        
                    </comment>
                    <scope line="239"/>
                    <scope line="241"/>
                </method>
                <method name="update" type="void" line="247">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                </method>
                <method name="show" type="void" line="251">
                    <scope line="253"/>
                </method>
            </class>
            <class name="DefaultFrame" line="260">
                <extends class="Frame"/>
                <javadoc line="260">
                    Used if no valid Window ancestor of the supplied owner is found.
                      &lt;p&gt;
                      PopupFactory uses this as a way to know when the Popup shouldn&apos;t
                      be cached based on the Window.                    
                </javadoc>
            </class>
        </class>
    </source>