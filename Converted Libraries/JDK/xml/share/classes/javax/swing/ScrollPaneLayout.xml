<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.border"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Insets"/>
        <import package="java.io.Serializable"/>
        <class name="ScrollPaneLayout" line="10">
            <implements interface="LayoutManager"/>
            <implements interface="ScrollPaneConstants"/>
            <implements interface="Serializable"/>
            <javadoc line="10">
                The layout manager used by &lt;code&gt;JScrollPane&lt;/code&gt;.
                  &lt;code&gt;JScrollPaneLayout&lt;/code&gt; is
                  responsible for nine components: a viewport, two scrollbars,
                  a row header, a column header, and four &quot;corner&quot; components.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JScrollPane                    
                </see>
                <see>
                    JViewport                    
                </see>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="viewport" type="JViewport" line="29"/>
            <javadoc line="29">
                The scrollpane&apos;s viewport child.
                  Default is an empty &lt;code&gt;JViewport&lt;/code&gt;.                
                <see>
                    JScrollPane#setViewport                    
                </see>
            </javadoc>
            <declaration name="vsb" type="JScrollBar" line="35"/>
            <javadoc line="35">
                The scrollpane&apos;s vertical scrollbar child.
                  Default is a &lt;code&gt;JScrollBar&lt;/code&gt;.                
                <see>
                    JScrollPane#setVerticalScrollBar                    
                </see>
            </javadoc>
            <declaration name="hsb" type="JScrollBar" line="41"/>
            <javadoc line="41">
                The scrollpane&apos;s horizontal scrollbar child.
                  Default is a &lt;code&gt;JScrollBar&lt;/code&gt;.                
                <see>
                    JScrollPane#setHorizontalScrollBar                    
                </see>
            </javadoc>
            <declaration name="rowHead" type="JViewport" line="47"/>
            <javadoc line="47">
                The row header child.  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setRowHeader                    
                </see>
            </javadoc>
            <declaration name="colHead" type="JViewport" line="52"/>
            <javadoc line="52">
                The column header child.  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setColumnHeader                    
                </see>
            </javadoc>
            <declaration name="lowerLeft" type="Component" line="57"/>
            <javadoc line="57">
                The component to display in the lower left corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="lowerRight" type="Component" line="63"/>
            <javadoc line="63">
                The component to display in the lower right corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="upperLeft" type="Component" line="69"/>
            <javadoc line="69">
                The component to display in the upper left corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="upperRight" type="Component" line="75"/>
            <javadoc line="75">
                The component to display in the upper right corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="vsbPolicy" type="int" line="81"/>
            <javadoc line="81">
                The display policy for the vertical scrollbar.
                  The default is &lt;code&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;.
                  &lt;p&gt;
                  This field is obsolete, please use the &lt;code&gt;JScrollPane&lt;/code&gt; field instead.                
                <see>
                    JScrollPane#setVerticalScrollBarPolicy                    
                </see>
            </javadoc>
            <declaration name="hsbPolicy" type="int" line="89"/>
            <javadoc line="89">
                The display policy for the horizontal scrollbar.
                  The default is &lt;code&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;.
                  &lt;p&gt;
                  This field is obsolete, please use the &lt;code&gt;JScrollPane&lt;/code&gt; field instead.                
                <see>
                    JScrollPane#setHorizontalScrollBarPolicy                    
                </see>
            </javadoc>
            <javadoc line="97">
                This method is invoked after the ScrollPaneLayout is set as the
                  LayoutManager of a &lt;code&gt;JScrollPane&lt;/code&gt;.
                  It initializes all of the internal fields that
                  are ordinarily set by &lt;code&gt;addLayoutComponent&lt;/code&gt;.  For example:
                  &lt;pre&gt;
                  ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {
                  public void layoutContainer(Container p) {
                  super.layoutContainer(p);
                  // do some extra work here ...
                  }
                  };
                  scrollpane.setLayout(mySPLayout):
                  &lt;/pre&gt;                
            </javadoc>
            <method name="syncWithScrollPane" type="void" line="112">
                <params>
                    <param name="sp" type="JScrollPane"/>
                </params>
            </method>
            <javadoc line="125">
                Removes an existing component.  When a new component, such as
                  the left corner, or vertical scrollbar, is added, the old one,
                  if it exists, must be removed.
                  &lt;p&gt;
                  This method returns &lt;code&gt;newC&lt;/code&gt;. If &lt;code&gt;oldC&lt;/code&gt; is
                  not equal to &lt;code&gt;newC&lt;/code&gt; and is non-&lt;code&gt;null&lt;/code&gt;,
                  it will be removed from its parent.                
                <param>
                    oldC the <code>Component</code> to replace                    
                </param>
                <param>
                    newC the <code>Component</code> to add                    
                </param>
                <return>
                    the <code>newC</code>                    
                </return>
            </javadoc>
            <method name="addSingletonComponent" type="Component" line="137">
                <params>
                    <param name="oldC" type="Component"/>
                    <param name="newC" type="Component"/>
                </params>
                <scope line="138"/>
            </method>
            <javadoc line="143">
                Adds the specified component to the layout. The layout is
                  identified using one of:
                  &lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.VIEWPORT
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR
                  &lt;li&gt;ScrollPaneConstants.ROW_HEADER
                  &lt;li&gt;ScrollPaneConstants.COLUMN_HEADER
                  &lt;li&gt;ScrollPaneConstants.LOWER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_RIGHT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_RIGHT_CORNER
                  &lt;/ul&gt;                
                <param>
                    s the component identifier                    
                </param>
                <param>
                    c the the component to be added                    
                </param>
                <exception>
                    IllegalArgumentException if <code>s</code> is an invalid key                    
                </exception>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="161">
                <params>
                    <param name="s" type="String"/>
                    <param name="c" type="Component"/>
                </params>
                <scope line="162"/>
                <scope line="165"/>
                <scope line="168"/>
                <scope line="171"/>
                <scope line="174"/>
                <scope line="177"/>
                <scope line="180"/>
                <scope line="183"/>
                <scope line="186"/>
                <scope line="189"/>
            </method>
            <javadoc line="193">
                Removes the specified component from the layout.                
                <param>
                    c the component to remove                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="197">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="198"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="207"/>
                <scope line="210"/>
                <scope line="213"/>
                <scope line="216"/>
                <scope line="219"/>
                <scope line="222"/>
            </method>
            <javadoc line="226">
                Returns the vertical scrollbar-display policy.                
                <return>
                    an integer giving the display policy                    
                </return>
                <see>
                    #setVerticalScrollBarPolicy                    
                </see>
            </javadoc>
            <method name="getVerticalScrollBarPolicy" type="int" line="231"/>
            <javadoc line="234">
                Sets the vertical scrollbar-display policy. The options
                  are:
                  &lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
                  &lt;/ul&gt;
                  Note: Applications should use the &lt;code&gt;JScrollPane&lt;/code&gt; version
                  of this method.  It only exists for backwards compatibility
                  with the Swing 1.0.2 (and earlier) versions of this class.                
                <param>
                    x an integer giving the display policy                    
                </param>
                <exception>
                    IllegalArgumentException if <code>x</code> is an invalid
                      vertical scroll bar policy, as listed above                    
                </exception>
            </javadoc>
            <method name="setVerticalScrollBarPolicy" type="void" line="249">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="260">
                Returns the horizontal scrollbar-display policy.                
                <return>
                    an integer giving the display policy                    
                </return>
                <see>
                    #setHorizontalScrollBarPolicy                    
                </see>
            </javadoc>
            <method name="getHorizontalScrollBarPolicy" type="int" line="265"/>
            <javadoc line="268">
                Sets the horizontal scrollbar-display policy.
                  The options are:&lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
                  &lt;/ul&gt;
                  Note: Applications should use the &lt;code&gt;JScrollPane&lt;/code&gt; version
                  of this method.  It only exists for backwards compatibility
                  with the Swing 1.0.2 (and earlier) versions of this class.                
                <param>
                    x an int giving the display policy                    
                </param>
                <exception>
                    IllegalArgumentException if <code>x</code> is not a valid
                      horizontal scrollbar policy, as listed above                    
                </exception>
            </javadoc>
            <method name="setHorizontalScrollBarPolicy" type="void" line="282">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="293">
                Returns the &lt;code&gt;JViewport&lt;/code&gt; object that displays the
                  scrollable contents.                
                <return>
                    the <code>JViewport</code> object that displays the scrollable contents                    
                </return>
                <see>
                    JScrollPane#getViewport                    
                </see>
            </javadoc>
            <method name="getViewport" type="JViewport" line="299"/>
            <javadoc line="302">
                Returns the &lt;code&gt;JScrollBar&lt;/code&gt; object that handles horizontal scrolling.                
                <return>
                    the <code>JScrollBar</code> object that handles horizontal scrolling                    
                </return>
                <see>
                    JScrollPane#getHorizontalScrollBar                    
                </see>
            </javadoc>
            <method name="getHorizontalScrollBar" type="JScrollBar" line="307"/>
            <javadoc line="310">
                Returns the &lt;code&gt;JScrollBar&lt;/code&gt; object that handles vertical scrolling.                
                <return>
                    the <code>JScrollBar</code> object that handles vertical scrolling                    
                </return>
                <see>
                    JScrollPane#getVerticalScrollBar                    
                </see>
            </javadoc>
            <method name="getVerticalScrollBar" type="JScrollBar" line="315"/>
            <javadoc line="318">
                Returns the &lt;code&gt;JViewport&lt;/code&gt; object that is the row header.                
                <return>
                    the <code>JViewport</code> object that is the row header                    
                </return>
                <see>
                    JScrollPane#getRowHeader                    
                </see>
            </javadoc>
            <method name="getRowHeader" type="JViewport" line="323"/>
            <javadoc line="326">
                Returns the &lt;code&gt;JViewport&lt;/code&gt; object that is the column header.                
                <return>
                    the <code>JViewport</code> object that is the column header                    
                </return>
                <see>
                    JScrollPane#getColumnHeader                    
                </see>
            </javadoc>
            <method name="getColumnHeader" type="JViewport" line="331"/>
            <javadoc line="334">
                Returns the &lt;code&gt;Component&lt;/code&gt; at the specified corner.                
                <param>
                    key the <code>String</code> specifying the corner                    
                </param>
                <return>
                    the <code>Component</code> at the specified corner, as defined in{@link ScrollPaneConstants}; if <code>key</code> is not one of the
                      four corners, <code>null</code> is returned                    
                </return>
                <see>
                    JScrollPane#getCorner                    
                </see>
            </javadoc>
            <method name="getCorner" type="Component" line="341">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="342"/>
                <scope line="345"/>
                <scope line="348"/>
                <scope line="351"/>
                <scope line="354"/>
            </method>
            <javadoc line="358">
                The preferred size of a &lt;code&gt;ScrollPane&lt;/code&gt; is the size of the insets,
                  plus the preferred size of the viewport, plus the preferred size of
                  the visible headers, plus the preferred size of the scrollbars
                  that will appear given the current view and the current
                  scrollbar displayPolicies.
                  &lt;p&gt;Note that the rowHeader is calculated as part of the preferred width
                  and the colHeader is calculated as part of the preferred size.                
                <param>
                    parent the <code>Container</code> that will be laid out                    
                </param>
                <return>
                    a <code>Dimension</code> object specifying the preferred size of the
                      viewport and any scrollbars                    
                </return>
                <see>
                    ViewportLayout                    
                </see>
                <see>
                    LayoutManager                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="372">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="scrollPane" type="JScrollPane" line="373"/>
                <declaration name="insets" type="Insets" line="376"/>
                <declaration name="prefWidth" type="int" line="377"/>
                <declaration name="prefHeight" type="int" line="378"/>
                <declaration name="extentSize" type="Dimension" line="379"/>
                <declaration name="viewSize" type="Dimension" line="380"/>
                <declaration name="view" type="Component" line="381"/>
                <scope line="382">
                    <scope line="385"/>
                    <scope line="388"/>
                </scope>
                <scope line="392"/>
                <declaration name="viewportBorder" type="Border" line="396"/>
                <scope line="397">
                    <declaration name="vpbInsets" type="Insets" line="398"/>
                </scope>
                <scope line="402"/>
                <scope line="405"/>
                <scope line="408">
                    <scope line="409"/>
                    <scope line="412">
                        <declaration name="canScroll" type="boolean" line="413"/>
                        <scope line="414"/>
                        <scope line="417"/>
                    </scope>
                </scope>
                <scope line="422">
                    <scope line="423"/>
                    <scope line="426">
                        <declaration name="canScroll" type="boolean" line="427"/>
                        <scope line="428"/>
                        <scope line="431"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="438">
                The minimum size of a &lt;code&gt;ScrollPane&lt;/code&gt; is the size of the insets
                  plus minimum size of the viewport, plus the scrollpane&apos;s
                  viewportBorder insets, plus the minimum size
                  of the visible headers, plus the minimum size of the
                  scrollbars whose displayPolicy isn&apos;t NEVER.                
                <param>
                    parent the <code>Container</code> that will be laid out                    
                </param>
                <return>
                    a <code>Dimension</code> object specifying the minimum size                    
                </return>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="447">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="scrollPane" type="JScrollPane" line="448"/>
                <declaration name="insets" type="Insets" line="451"/>
                <declaration name="minWidth" type="int" line="452"/>
                <declaration name="minHeight" type="int" line="453"/>
                <scope line="454">
                    <declaration name="size" type="Dimension" line="455"/>
                </scope>
                <declaration name="viewportBorder" type="Border" line="459"/>
                <scope line="460">
                    <declaration name="vpbInsets" type="Insets" line="461"/>
                </scope>
                <scope line="465">
                    <declaration name="size" type="Dimension" line="466"/>
                </scope>
                <scope line="470">
                    <declaration name="size" type="Dimension" line="471"/>
                </scope>
                <scope line="475">
                    <declaration name="size" type="Dimension" line="476"/>
                </scope>
                <scope line="480">
                    <declaration name="size" type="Dimension" line="481"/>
                </scope>
            </method>
            <javadoc line="487">
                Lays out the scrollpane. The positioning of components depends on
                  the following constraints:
                  &lt;ul&gt;
                  &lt;li&gt; The row header, if present and visible, gets its preferred
                  width and the viewport&apos;s height.
                  &lt;li&gt; The column header, if present and visible, gets its preferred
                  height and the viewport&apos;s width.
                  &lt;li&gt; If a vertical scrollbar is needed, i.e. if the viewport&apos;s extent
                  height is smaller than its view height or if the &lt;code&gt;displayPolicy&lt;/code&gt;
                  is ALWAYS, it&apos;s treated like the row header with respect to its
                  dimensions and is made visible.
                  &lt;li&gt; If a horizontal scrollbar is needed, it is treated like the
                  column header (see the paragraph above regarding the vertical scrollbar).
                  &lt;li&gt; If the scrollpane has a non-&lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;viewportBorder&lt;/code&gt;, then space is allocated for that.
                  &lt;li&gt; The viewport gets the space available after accounting for
                  the previous constraints.
                  &lt;li&gt; The corner components, if provided, are aligned with the
                  ends of the scrollbars and headers. If there is a vertical
                  scrollbar, the right corners appear; if there is a horizontal
                  scrollbar, the lower corners appear; a row header gets left
                  corners, and a column header gets upper corners.
                  &lt;/ul&gt;                
                <param>
                    parent the <code>Container</code> to lay out                    
                </param>
            </javadoc>
            <method name="layoutContainer" type="void" line="513">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="scrollPane" type="JScrollPane" line="514"/>
                <declaration name="availR" type="Rectangle" line="517"/>
                <declaration name="insets" type="Insets" line="519"/>
                <declaration name="leftToRight" type="boolean" line="524"/>
                <declaration name="colHeadR" type="Rectangle" line="525"/>
                <scope line="526">
                    <declaration name="colHeadHeight" type="int" line="527"/>
                </scope>
                <declaration name="rowHeadR" type="Rectangle" line="532"/>
                <scope line="533">
                    <declaration name="rowHeadWidth" type="int" line="534"/>
                    <scope line="537"/>
                    <scope line="541"/>
                </scope>
                <declaration name="viewportBorder" type="Border" line="545"/>
                <declaration name="vpbInsets" type="Insets" line="546"/>
                <scope line="547"/>
                <scope line="554"/>
                <declaration name="view" type="Component" line="557"/>
                <declaration name="viewPrefSize" type="Dimension" line="558"/>
                <declaration name="extentSize" type="Dimension" line="559"/>
                <declaration name="viewTracksViewportWidth" type="boolean" line="560"/>
                <declaration name="viewTracksViewportHeight" type="boolean" line="561"/>
                <declaration name="isEmpty" type="boolean" line="562"/>
                <declaration name="sv" type="Scrollable" line="563"/>
                <scope line="564"/>
                <scope line="569"/>
                <declaration name="vsbR" type="Rectangle" line="572"/>
                <declaration name="vsbNeeded" type="boolean" line="573"/>
                <scope line="574"/>
                <scope line="577"/>
                <scope line="580"/>
                <scope line="583"/>
                <scope line="586"/>
                <declaration name="hsbR" type="Rectangle" line="590"/>
                <declaration name="hsbNeeded" type="boolean" line="591"/>
                <scope line="592"/>
                <scope line="595"/>
                <scope line="598"/>
                <scope line="601"/>
                <scope line="604">
                    <scope line="606">
                        <scope line="609"/>
                    </scope>
                </scope>
                <scope line="614">
                    <scope line="616">
                        <declaration name="oldHSBNeeded" type="boolean" line="618"/>
                        <declaration name="oldVSBNeeded" type="boolean" line="619"/>
                        <scope line="622">
                            <declaration name="newVSBNeeded" type="boolean" line="623"/>
                            <scope line="624"/>
                        </scope>
                        <scope line="630">
                            <declaration name="newHSBbNeeded" type="boolean" line="631"/>
                            <scope line="632">
                                <scope line="635">
                                    <scope line="638"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="644"/>
                    </scope>
                </scope>
                <scope line="655"/>
                <scope line="658"/>
                <scope line="661">
                    <scope line="662">
                        <scope line="663">
                            <scope line="664"/>
                        </scope>
                    </scope>
                    <scope line="672"/>
                </scope>
                <scope line="676">
                    <scope line="677">
                        <scope line="678">
                            <scope line="679">
                                <scope line="680"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="689"/>
                </scope>
                <scope line="693"/>
                <scope line="696"/>
                <scope line="699"/>
                <scope line="702"/>
            </method>
            <javadoc line="706">
                Adjusts the &lt;code&gt;Rectangle&lt;/code&gt; &lt;code&gt;available&lt;/code&gt; based on if
                  the vertical scrollbar is needed (&lt;code&gt;wantsVSB&lt;/code&gt;).
                  The location of the vsb is updated in &lt;code&gt;vsbR&lt;/code&gt;, and
                  the viewport border insets (&lt;code&gt;vpbInsets&lt;/code&gt;) are used to offset
                  the vsb. This is only called when &lt;code&gt;wantsVSB&lt;/code&gt; has
                  changed, eg you shouldn&apos;t invoke adjustForVSB(true) twice.                
            </javadoc>
            <method name="adjustForVSB" type="void" line="714">
                <params>
                    <param name="wantsVSB" type="boolean"/>
                    <param name="available" type="Rectangle"/>
                    <param name="vsbR" type="Rectangle"/>
                    <param name="vpbInsets" type="Insets"/>
                    <param name="leftToRight" type="boolean"/>
                </params>
                <declaration name="oldWidth" type="int" line="715"/>
                <scope line="716">
                    <declaration name="vsbWidth" type="int" line="717"/>
                    <scope line="720"/>
                    <scope line="723"/>
                </scope>
                <scope line="728"/>
            </method>
            <javadoc line="732">
                Adjusts the &lt;code&gt;Rectangle&lt;/code&gt; &lt;code&gt;available&lt;/code&gt; based on if
                  the horizontal scrollbar is needed (&lt;code&gt;wantsHSB&lt;/code&gt;).
                  The location of the hsb is updated in &lt;code&gt;hsbR&lt;/code&gt;, and
                  the viewport border insets (&lt;code&gt;vpbInsets&lt;/code&gt;) are used to offset
                  the hsb.  This is only called when &lt;code&gt;wantsHSB&lt;/code&gt; has
                  changed, eg you shouldn&apos;t invoked adjustForHSB(true) twice.                
            </javadoc>
            <method name="adjustForHSB" type="void" line="740">
                <params>
                    <param name="wantsHSB" type="boolean"/>
                    <param name="available" type="Rectangle"/>
                    <param name="hsbR" type="Rectangle"/>
                    <param name="vpbInsets" type="Insets"/>
                </params>
                <declaration name="oldHeight" type="int" line="741"/>
                <scope line="742">
                    <declaration name="hsbHeight" type="int" line="743"/>
                </scope>
                <scope line="748"/>
            </method>
            <javadoc line="752">
                Returns the bounds of the border around the specified scroll pane&apos;s
                  viewport.                
                <return>
                    the size and position of the viewport border                    
                </return>
                <deprecated>
                    As of JDK version Swing1.1
                      replaced by <code>JScrollPane.getViewportBorderBounds()</code>.                    
                </deprecated>
            </javadoc>
            <method name="getViewportBorderBounds" type="Rectangle" line="759">
                <params>
                    <param name="scrollpane" type="JScrollPane"/>
                </params>
            </method>
            <class name="UIResource" line="762">
                <extends class="ScrollPaneLayout"/>
                <implements interface="javax.swing.plaf.UIResource"/>
                <javadoc line="762">
                    The UI resource version of &lt;code&gt;ScrollPaneLayout&lt;/code&gt;.                    
                </javadoc>
            </class>
        </class>
    </source>