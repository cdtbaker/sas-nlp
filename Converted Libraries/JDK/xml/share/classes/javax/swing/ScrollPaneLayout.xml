<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.border"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Insets"/>
        <import package="java.io.Serializable"/>
        <class name="ScrollPaneLayout" line="40">
            <implements interface="LayoutManager"/>
            <implements interface="ScrollPaneConstants"/>
            <implements interface="Serializable"/>
            <javadoc line="40">
                The layout manager used by &lt;code&gt;JScrollPane&lt;/code&gt;.
                  &lt;code&gt;JScrollPaneLayout&lt;/code&gt; is
                  responsible for nine components: a viewport, two scrollbars,
                  a row header, a column header, and four &quot;corner&quot; components.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JScrollPane                    
                </see>
                <see>
                    JViewport                    
                </see>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="viewport" type="JViewport" line="64"/>
            <javadoc line="64">
                The scrollpane&apos;s viewport child.
                  Default is an empty &lt;code&gt;JViewport&lt;/code&gt;.                
                <see>
                    JScrollPane#setViewport                    
                </see>
            </javadoc>
            <declaration name="vsb" type="JScrollBar" line="72"/>
            <javadoc line="72">
                The scrollpane&apos;s vertical scrollbar child.
                  Default is a &lt;code&gt;JScrollBar&lt;/code&gt;.                
                <see>
                    JScrollPane#setVerticalScrollBar                    
                </see>
            </javadoc>
            <declaration name="hsb" type="JScrollBar" line="80"/>
            <javadoc line="80">
                The scrollpane&apos;s horizontal scrollbar child.
                  Default is a &lt;code&gt;JScrollBar&lt;/code&gt;.                
                <see>
                    JScrollPane#setHorizontalScrollBar                    
                </see>
            </javadoc>
            <declaration name="rowHead" type="JViewport" line="88"/>
            <javadoc line="88">
                The row header child.  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setRowHeader                    
                </see>
            </javadoc>
            <declaration name="colHead" type="JViewport" line="95"/>
            <javadoc line="95">
                The column header child.  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setColumnHeader                    
                </see>
            </javadoc>
            <declaration name="lowerLeft" type="Component" line="102"/>
            <javadoc line="102">
                The component to display in the lower left corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="lowerRight" type="Component" line="110"/>
            <javadoc line="110">
                The component to display in the lower right corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="upperLeft" type="Component" line="118"/>
            <javadoc line="118">
                The component to display in the upper left corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="upperRight" type="Component" line="126"/>
            <javadoc line="126">
                The component to display in the upper right corner.
                  Default is &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JScrollPane#setCorner                    
                </see>
            </javadoc>
            <declaration name="vsbPolicy" type="int" line="134"/>
            <javadoc line="134">
                The display policy for the vertical scrollbar.
                  The default is &lt;code&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;.
                  &lt;p&gt;
                  This field is obsolete, please use the &lt;code&gt;JScrollPane&lt;/code&gt; field instead.                
                <see>
                    JScrollPane#setVerticalScrollBarPolicy                    
                </see>
            </javadoc>
            <declaration name="hsbPolicy" type="int" line="145"/>
            <javadoc line="145">
                The display policy for the horizontal scrollbar.
                  The default is &lt;code&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED&lt;/code&gt;.
                  &lt;p&gt;
                  This field is obsolete, please use the &lt;code&gt;JScrollPane&lt;/code&gt; field instead.                
                <see>
                    JScrollPane#setHorizontalScrollBarPolicy                    
                </see>
            </javadoc>
            <javadoc line="156">
                This method is invoked after the ScrollPaneLayout is set as the
                  LayoutManager of a &lt;code&gt;JScrollPane&lt;/code&gt;.
                  It initializes all of the internal fields that
                  are ordinarily set by &lt;code&gt;addLayoutComponent&lt;/code&gt;.  For example:
                  &lt;pre&gt;
                  ScrollPaneLayout mySPLayout = new ScrollPanelLayout() {
                  public void layoutContainer(Container p) {
                  super.layoutContainer(p);
                  // do some extra work here ...
                  }
                  };
                  scrollpane.setLayout(mySPLayout):
                  &lt;/pre&gt;                
            </javadoc>
            <method name="syncWithScrollPane" type="void" line="171">
                <params>
                    <param name="sp" type="JScrollPane"/>
                </params>
            </method>
            <javadoc line="186">
                Removes an existing component.  When a new component, such as
                  the left corner, or vertical scrollbar, is added, the old one,
                  if it exists, must be removed.
                  &lt;p&gt;
                  This method returns &lt;code&gt;newC&lt;/code&gt;. If &lt;code&gt;oldC&lt;/code&gt; is
                  not equal to &lt;code&gt;newC&lt;/code&gt; and is non-&lt;code&gt;null&lt;/code&gt;,
                  it will be removed from its parent.                
                <param>
                    oldC the <code>Component</code> to replace                    
                </param>
                <param>
                    newC the <code>Component</code> to add                    
                </param>
                <return>
                    the <code>newC</code>                    
                </return>
            </javadoc>
            <method name="addSingletonComponent" type="Component" line="200">
                <params>
                    <param name="oldC" type="Component"/>
                    <param name="newC" type="Component"/>
                </params>
                <scope line="201"/>
            </method>
            <javadoc line="208">
                Adds the specified component to the layout. The layout is
                  identified using one of:
                  &lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.VIEWPORT
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR
                  &lt;li&gt;ScrollPaneConstants.ROW_HEADER
                  &lt;li&gt;ScrollPaneConstants.COLUMN_HEADER
                  &lt;li&gt;ScrollPaneConstants.LOWER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.LOWER_RIGHT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_LEFT_CORNER
                  &lt;li&gt;ScrollPaneConstants.UPPER_RIGHT_CORNER
                  &lt;/ul&gt;                
                <param>
                    s the component identifier                    
                </param>
                <param>
                    c the the component to be added                    
                </param>
                <exception>
                    IllegalArgumentException if <code>s</code> is an invalid key                    
                </exception>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="228">
                <params>
                    <param name="s" type="String"/>
                    <param name="c" type="Component"/>
                </params>
                <scope line="229"/>
                <scope line="232"/>
                <scope line="235"/>
                <scope line="238"/>
                <scope line="241"/>
                <scope line="244"/>
                <scope line="247"/>
                <scope line="250"/>
                <scope line="253"/>
                <scope line="256"/>
            </method>
            <javadoc line="262">
                Removes the specified component from the layout.                
                <param>
                    c the component to remove                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="268">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="269"/>
                <scope line="272"/>
                <scope line="275"/>
                <scope line="278"/>
                <scope line="281"/>
                <scope line="284"/>
                <scope line="287"/>
                <scope line="290"/>
                <scope line="293"/>
            </method>
            <javadoc line="299">
                Returns the vertical scrollbar-display policy.                
                <return>
                    an integer giving the display policy                    
                </return>
                <see>
                    #setVerticalScrollBarPolicy                    
                </see>
            </javadoc>
            <method name="getVerticalScrollBarPolicy" type="int" line="305"/>
            <javadoc line="310">
                Sets the vertical scrollbar-display policy. The options
                  are:
                  &lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
                  &lt;li&gt;ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
                  &lt;/ul&gt;
                  Note: Applications should use the &lt;code&gt;JScrollPane&lt;/code&gt; version
                  of this method.  It only exists for backwards compatibility
                  with the Swing 1.0.2 (and earlier) versions of this class.                
                <param>
                    x an integer giving the display policy                    
                </param>
                <exception>
                    IllegalArgumentException if <code>x</code> is an invalid
                      vertical scroll bar policy, as listed above                    
                </exception>
            </javadoc>
            <method name="setVerticalScrollBarPolicy" type="void" line="326">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="339">
                Returns the horizontal scrollbar-display policy.                
                <return>
                    an integer giving the display policy                    
                </return>
                <see>
                    #setHorizontalScrollBarPolicy                    
                </see>
            </javadoc>
            <method name="getHorizontalScrollBarPolicy" type="int" line="345"/>
            <javadoc line="349">
                Sets the horizontal scrollbar-display policy.
                  The options are:&lt;ul&gt;
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
                  &lt;li&gt;ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
                  &lt;/ul&gt;
                  Note: Applications should use the &lt;code&gt;JScrollPane&lt;/code&gt; version
                  of this method.  It only exists for backwards compatibility
                  with the Swing 1.0.2 (and earlier) versions of this class.                
                <param>
                    x an int giving the display policy                    
                </param>
                <exception>
                    IllegalArgumentException if <code>x</code> is not a valid
                      horizontal scrollbar policy, as listed above                    
                </exception>
            </javadoc>
            <method name="setHorizontalScrollBarPolicy" type="void" line="364">
                <params>
                    <param name="x" type="int"/>
                </params>
            </method>
            <javadoc line="377">
                Returns the &lt;code&gt;JViewport&lt;/code&gt; object that displays the
                  scrollable contents.                
                <return>
                    the <code>JViewport</code> object that displays the scrollable contents                    
                </return>
                <see>
                    JScrollPane#getViewport                    
                </see>
            </javadoc>
            <method name="getViewport" type="JViewport" line="383"/>
            <javadoc line="388">
                Returns the &lt;code&gt;JScrollBar&lt;/code&gt; object that handles horizontal scrolling.                
                <return>
                    the <code>JScrollBar</code> object that handles horizontal scrolling                    
                </return>
                <see>
                    JScrollPane#getHorizontalScrollBar                    
                </see>
            </javadoc>
            <method name="getHorizontalScrollBar" type="JScrollBar" line="393"/>
            <javadoc line="397">
                Returns the &lt;code&gt;JScrollBar&lt;/code&gt; object that handles vertical scrolling.                
                <return>
                    the <code>JScrollBar</code> object that handles vertical scrolling                    
                </return>
                <see>
                    JScrollPane#getVerticalScrollBar                    
                </see>
            </javadoc>
            <method name="getVerticalScrollBar" type="JScrollBar" line="402"/>
            <javadoc line="407">
                Returns the &lt;code&gt;JViewport&lt;/code&gt; object that is the row header.                
                <return>
                    the <code>JViewport</code> object that is the row header                    
                </return>
                <see>
                    JScrollPane#getRowHeader                    
                </see>
            </javadoc>
            <method name="getRowHeader" type="JViewport" line="412"/>
            <javadoc line="417">
                Returns the &lt;code&gt;JViewport&lt;/code&gt; object that is the column header.                
                <return>
                    the <code>JViewport</code> object that is the column header                    
                </return>
                <see>
                    JScrollPane#getColumnHeader                    
                </see>
            </javadoc>
            <method name="getColumnHeader" type="JViewport" line="422"/>
            <javadoc line="427">
                Returns the &lt;code&gt;Component&lt;/code&gt; at the specified corner.                
                <param>
                    key the <code>String</code> specifying the corner                    
                </param>
                <return>
                    the <code>Component</code> at the specified corner, as defined in{@link ScrollPaneConstants}; if <code>key</code> is not one of the
                      four corners, <code>null</code> is returned                    
                </return>
                <see>
                    JScrollPane#getCorner                    
                </see>
            </javadoc>
            <method name="getCorner" type="Component" line="435">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="436"/>
                <scope line="439"/>
                <scope line="442"/>
                <scope line="445"/>
                <scope line="448"/>
            </method>
            <javadoc line="454">
                The preferred size of a &lt;code&gt;ScrollPane&lt;/code&gt; is the size of the insets,
                  plus the preferred size of the viewport, plus the preferred size of
                  the visible headers, plus the preferred size of the scrollbars
                  that will appear given the current view and the current
                  scrollbar displayPolicies.
                  &lt;p&gt;Note that the rowHeader is calculated as part of the preferred width
                  and the colHeader is calculated as part of the preferred size.                
                <param>
                    parent the <code>Container</code> that will be laid out                    
                </param>
                <return>
                    a <code>Dimension</code> object specifying the preferred size of the
                      viewport and any scrollbars                    
                </return>
                <see>
                    ViewportLayout                    
                </see>
                <see>
                    LayoutManager                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="470">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <comment line="472">
                    Sync the (now obsolete) policy fields with the
                     JScrollPane.                    
                </comment>
                <comment line="483">
                    Note that viewport.getViewSize() is equivalent to
                     viewport.getView().getPreferredSize() modulo a null
                     view or a view whose size was explicitly set.                    
                </comment>
                <comment line="502">
                    If there&apos;s a viewport add its preferredSize.                    
                </comment>
                <comment line="510">
                    If there&apos;s a JScrollPane.viewportBorder, add its insets.                    
                </comment>
                <comment line="520">
                    If a header exists and it&apos;s visible, factor its
                     preferred size in.                    
                </comment>
                <comment line="532">
                    If a scrollbar is going to appear, factor its preferred size in.
                     If the scrollbars policy is AS_NEEDED, this can be a little
                     tricky:
                    
                     - If the view is a Scrollable then scrollableTracksViewportWidth
                     and scrollableTracksViewportHeight can be used to effectively
                     disable scrolling (if they&apos;re true) in their respective dimensions.
                    
                     - Assuming that a scrollbar hasn&apos;t been disabled by the
                     previous constraint, we need to decide if the scrollbar is going
                     to appear to correctly compute the JScrollPanes preferred size.
                     To do this we compare the preferredSize of the viewport (the
                     extentSize) to the preferredSize of the view.  Although we&apos;re
                     not responsible for laying out the view we&apos;ll assume that the
                     JViewport will always give it its preferredSize.                    
                </comment>
                <declaration name="scrollPane" type="JScrollPane" line="474"/>
                <declaration name="insets" type="Insets" line="478"/>
                <declaration name="prefWidth" type="int" line="479"/>
                <declaration name="prefHeight" type="int" line="480"/>
                <declaration name="extentSize" type="Dimension" line="487"/>
                <declaration name="viewSize" type="Dimension" line="488"/>
                <declaration name="view" type="Component" line="489"/>
                <scope line="491">
                    <scope line="494"/>
                    <scope line="496"/>
                </scope>
                <scope line="504"/>
                <declaration name="viewportBorder" type="Border" line="512"/>
                <scope line="513">
                    <declaration name="vpbInsets" type="Insets" line="514"/>
                </scope>
                <scope line="523"/>
                <scope line="527"/>
                <scope line="548">
                    <scope line="549"/>
                    <scope line="552">
                        <declaration name="canScroll" type="boolean" line="553"/>
                        <scope line="554"/>
                        <scope line="557"/>
                    </scope>
                </scope>
                <scope line="563">
                    <scope line="564"/>
                    <scope line="567">
                        <declaration name="canScroll" type="boolean" line="568"/>
                        <scope line="569"/>
                        <scope line="572"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="582">
                The minimum size of a &lt;code&gt;ScrollPane&lt;/code&gt; is the size of the insets
                  plus minimum size of the viewport, plus the scrollpane&apos;s
                  viewportBorder insets, plus the minimum size
                  of the visible headers, plus the minimum size of the
                  scrollbars whose displayPolicy isn&apos;t NEVER.                
                <param>
                    parent the <code>Container</code> that will be laid out                    
                </param>
                <return>
                    a <code>Dimension</code> object specifying the minimum size                    
                </return>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="593">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <comment line="595">
                    Sync the (now obsolete) policy fields with the
                     JScrollPane.                    
                </comment>
                <comment line="606">
                    If there&apos;s a viewport add its minimumSize.                    
                </comment>
                <comment line="615">
                    If there&apos;s a JScrollPane.viewportBorder, add its insets.                    
                </comment>
                <comment line="625">
                    If a header exists and it&apos;s visible, factor its
                     minimum size in.                    
                </comment>
                <comment line="641">
                    If a scrollbar might appear, factor its minimum
                     size in.                    
                </comment>
                <declaration name="scrollPane" type="JScrollPane" line="597"/>
                <declaration name="insets" type="Insets" line="601"/>
                <declaration name="minWidth" type="int" line="602"/>
                <declaration name="minHeight" type="int" line="603"/>
                <scope line="608">
                    <declaration name="size" type="Dimension" line="609"/>
                </scope>
                <declaration name="viewportBorder" type="Border" line="617"/>
                <scope line="618">
                    <declaration name="vpbInsets" type="Insets" line="619"/>
                </scope>
                <scope line="628">
                    <declaration name="size" type="Dimension" line="629"/>
                </scope>
                <scope line="634">
                    <declaration name="size" type="Dimension" line="635"/>
                </scope>
                <scope line="644">
                    <declaration name="size" type="Dimension" line="645"/>
                </scope>
                <scope line="650">
                    <declaration name="size" type="Dimension" line="651"/>
                </scope>
            </method>
            <javadoc line="660">
                Lays out the scrollpane. The positioning of components depends on
                  the following constraints:
                  &lt;ul&gt;
                  &lt;li&gt; The row header, if present and visible, gets its preferred
                  width and the viewport&apos;s height.
                  &lt;li&gt; The column header, if present and visible, gets its preferred
                  height and the viewport&apos;s width.
                  &lt;li&gt; If a vertical scrollbar is needed, i.e. if the viewport&apos;s extent
                  height is smaller than its view height or if the &lt;code&gt;displayPolicy&lt;/code&gt;
                  is ALWAYS, it&apos;s treated like the row header with respect to its
                  dimensions and is made visible.
                  &lt;li&gt; If a horizontal scrollbar is needed, it is treated like the
                  column header (see the paragraph above regarding the vertical scrollbar).
                  &lt;li&gt; If the scrollpane has a non-&lt;code&gt;null&lt;/code&gt;
                  &lt;code&gt;viewportBorder&lt;/code&gt;, then space is allocated for that.
                  &lt;li&gt; The viewport gets the space available after accounting for
                  the previous constraints.
                  &lt;li&gt; The corner components, if provided, are aligned with the
                  ends of the scrollbars and headers. If there is a vertical
                  scrollbar, the right corners appear; if there is a horizontal
                  scrollbar, the lower corners appear; a row header gets left
                  corners, and a column header gets upper corners.
                  &lt;/ul&gt;                
                <param>
                    parent the <code>Container</code> to lay out                    
                </param>
            </javadoc>
            <method name="layoutContainer" type="void" line="694">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <comment line="696">
                    Sync the (now obsolete) policy fields with the
                     JScrollPane.                    
                </comment>
                <comment line="712">
                    Get the scrollPane&apos;s orientation.                    
                </comment>
                <comment line="716">
                    If there&apos;s a visible column header remove the space it
                     needs from the top of availR.  The column header is treated
                     as if it were fixed height, arbitrary width.                    
                </comment>
                <comment line="731">
                    If there&apos;s a visible row header remove the space it needs
                     from the left or right of availR.  The row header is treated
                     as if it were fixed width, arbitrary height.                    
                </comment>
                <comment line="751">
                    If there&apos;s a JScrollPane.viewportBorder, remove the
                     space it occupies for availR.                    
                </comment>
                <comment line="769">
                    At this point availR is the space available for the viewport
                     and scrollbars. rowHeadR is correct except for its height and y
                     and colHeadR is correct except for its width and x.  Once we&apos;re
                     through computing the dimensions  of these three parts we can
                     go back and set the dimensions of rowHeadR.height, rowHeadR.y,
                     colHeadR.width, colHeadR.x and the bounds for the corners.
                    
                     We&apos;ll decide about putting up scrollbars by comparing the
                     viewport views preferred size with the viewports extent
                     size (generally just its size).  Using the preferredSize is
                     reasonable because layout proceeds top down - so we expect
                     the viewport to be laid out next.  And we assume that the
                     viewports layout manager will give the view it&apos;s preferred
                     size.  One exception to this is when the view implements
                     Scrollable and Scrollable.getViewTracksViewport{Width,Height}
                     methods return true.  If the view is tracking the viewports
                     width we don&apos;t bother with a horizontal scrollbar, similarly
                     if view.getViewTracksViewport(Height) is true we don&apos;t bother
                     with a vertical scrollbar.                    
                </comment>
                <comment line="803">
                    Don&apos;t bother checking the Scrollable methods if there is no room
                     for the viewport, we aren&apos;t going to show any scrollbars in this
                     case anyway.                    
                </comment>
                <comment line="815">
                    If there&apos;s a vertical scrollbar and we need one, allocate
                     space for it (we&apos;ll make it visible later). A vertical
                     scrollbar is considered to be fixed width, arbitrary height.                    
                </comment>
                <comment line="832">
                    vsbPolicy == VERTICAL_SCROLLBAR_AS_NEEDED                    
                </comment>
                <comment line="842">
                    If there&apos;s a horizontal scrollbar and we need one, allocate
                     space for it (we&apos;ll make it visible later). A horizontal
                     scrollbar is considered to be fixed height, arbitrary width.                    
                </comment>
                <comment line="858">
                    hsbPolicy == HORIZONTAL_SCROLLBAR_AS_NEEDED                    
                </comment>
                <comment line="865">
                    If we added the horizontal scrollbar then we&apos;ve implicitly
                     reduced  the vertical space available to the viewport.
                     As a consequence we may have to add the vertical scrollbar,
                     if that hasn&apos;t been done so already.  Of course we
                     don&apos;t bother with any of this if the vsbPolicy is NEVER.                    
                </comment>
                <comment line="883">
                    Set the size of the viewport first, and then recheck the Scrollable
                     methods. Some components base their return values for the Scrollable
                     methods on the size of the Viewport, so that if we don&apos;t
                     ask after resetting the bounds we may have gotten the wrong
                     answer.                    
                </comment>
                <comment line="937">
                    You could argue that we should recheck the
                     Scrollable methods again until they stop changing,
                     but they might never stop changing, so we stop here
                     and don&apos;t do any additional checks.                    
                </comment>
                <comment line="945">
                    We now have the final size of the viewport: availR.
                     Now fixup the header and scrollbar widthsheights.                    
                </comment>
                <comment line="955">
                    Set the bounds of the remaining components.  The scrollbars
                     are made invisible if they&apos;re not needed.                    
                </comment>
                <comment line="975">
                    This is used primarily for GTK L&amp;F, which needs to
                     extend the vertical scrollbar to fill the upper
                     corner near the column header.  Note that we skip
                     this step (and use the default behavior) if the
                     user has set a custom corner component.                    
                </comment>
                <comment line="1000">
                    This is used primarily for GTK L&amp;F, which needs to
                     extend the horizontal scrollbar to fill the lower
                     corner near the row header.  Note that we skip
                     this step (and use the default behavior) if the
                     user has set a custom corner component.                    
                </comment>
                <declaration name="scrollPane" type="JScrollPane" line="698"/>
                <declaration name="availR" type="Rectangle" line="702"/>
                <declaration name="insets" type="Insets" line="705"/>
                <declaration name="leftToRight" type="boolean" line="713"/>
                <declaration name="colHeadR" type="Rectangle" line="720"/>
                <scope line="722">
                    <declaration name="colHeadHeight" type="int" line="723"/>
                </scope>
                <declaration name="rowHeadR" type="Rectangle" line="735"/>
                <scope line="737">
                    <declaration name="rowHeadWidth" type="int" line="738"/>
                    <scope line="742"/>
                    <scope line="745"/>
                </scope>
                <declaration name="viewportBorder" type="Border" line="754"/>
                <declaration name="vpbInsets" type="Insets" line="755"/>
                <scope line="756"/>
                <scope line="763"/>
                <declaration name="view" type="Component" line="789"/>
                <declaration name="viewPrefSize" type="Dimension" line="790"/>
                <declaration name="extentSize" type="Dimension" line="794"/>
                <declaration name="viewTracksViewportWidth" type="boolean" line="798"/>
                <declaration name="viewTracksViewportHeight" type="boolean" line="799"/>
                <declaration name="isEmpty" type="boolean" line="800"/>
                <declaration name="sv" type="Scrollable" line="801"/>
                <scope line="805"/>
                <scope line="810"/>
                <declaration name="vsbR" type="Rectangle" line="819"/>
                <declaration name="vsbNeeded" type="boolean" line="821"/>
                <scope line="822"/>
                <scope line="825"/>
                <scope line="828"/>
                <scope line="831"/>
                <scope line="836"/>
                <declaration name="hsbR" type="Rectangle" line="846"/>
                <declaration name="hsbNeeded" type="boolean" line="847"/>
                <scope line="848"/>
                <scope line="851"/>
                <scope line="854"/>
                <scope line="857"/>
                <scope line="861">
                    <scope line="871">
                        <scope line="876"/>
                    </scope>
                </scope>
                <scope line="889">
                    <scope line="892">
                        <declaration name="oldHSBNeeded" type="boolean" line="895"/>
                        <declaration name="oldVSBNeeded" type="boolean" line="896"/>
                        <scope line="901">
                            <declaration name="newVSBNeeded" type="boolean" line="902"/>
                            <scope line="904"/>
                        </scope>
                        <scope line="912">
                            <declaration name="newHSBbNeeded" type="boolean" line="913"/>
                            <scope line="915">
                                <scope line="919">
                                    <scope line="926"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="934"/>
                    </scope>
                </scope>
                <scope line="958"/>
                <scope line="962"/>
                <scope line="966">
                    <scope line="967">
                        <scope line="970">
                            <scope line="973"/>
                        </scope>
                    </scope>
                    <scope line="986"/>
                </scope>
                <scope line="991">
                    <scope line="992">
                        <scope line="995">
                            <scope line="998">
                                <scope line="1004"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1013"/>
                </scope>
                <scope line="1018"/>
                <scope line="1025"/>
                <scope line="1032"/>
                <scope line="1039"/>
            </method>
            <javadoc line="1047">
                Adjusts the &lt;code&gt;Rectangle&lt;/code&gt; &lt;code&gt;available&lt;/code&gt; based on if
                  the vertical scrollbar is needed (&lt;code&gt;wantsVSB&lt;/code&gt;).
                  The location of the vsb is updated in &lt;code&gt;vsbR&lt;/code&gt;, and
                  the viewport border insets (&lt;code&gt;vpbInsets&lt;/code&gt;) are used to offset
                  the vsb. This is only called when &lt;code&gt;wantsVSB&lt;/code&gt; has
                  changed, eg you shouldn&apos;t invoke adjustForVSB(true) twice.                
            </javadoc>
            <method name="adjustForVSB" type="void" line="1057">
                <params>
                    <param name="wantsVSB" type="boolean"/>
                    <param name="available" type="Rectangle"/>
                    <param name="vsbR" type="Rectangle"/>
                    <param name="vpbInsets" type="Insets"/>
                    <param name="leftToRight" type="boolean"/>
                </params>
                <declaration name="oldWidth" type="int" line="1058"/>
                <scope line="1059">
                    <declaration name="vsbWidth" type="int" line="1060"/>
                    <scope line="1066"/>
                    <scope line="1068"/>
                </scope>
                <scope line="1073"/>
            </method>
            <javadoc line="1078">
                Adjusts the &lt;code&gt;Rectangle&lt;/code&gt; &lt;code&gt;available&lt;/code&gt; based on if
                  the horizontal scrollbar is needed (&lt;code&gt;wantsHSB&lt;/code&gt;).
                  The location of the hsb is updated in &lt;code&gt;hsbR&lt;/code&gt;, and
                  the viewport border insets (&lt;code&gt;vpbInsets&lt;/code&gt;) are used to offset
                  the hsb.  This is only called when &lt;code&gt;wantsHSB&lt;/code&gt; has
                  changed, eg you shouldn&apos;t invoked adjustForHSB(true) twice.                
            </javadoc>
            <method name="adjustForHSB" type="void" line="1087">
                <params>
                    <param name="wantsHSB" type="boolean"/>
                    <param name="available" type="Rectangle"/>
                    <param name="hsbR" type="Rectangle"/>
                    <param name="vpbInsets" type="Insets"/>
                </params>
                <declaration name="oldHeight" type="int" line="1088"/>
                <scope line="1089">
                    <declaration name="hsbHeight" type="int" line="1090"/>
                </scope>
                <scope line="1097"/>
            </method>
            <javadoc line="1104">
                Returns the bounds of the border around the specified scroll pane&apos;s
                  viewport.                
                <return>
                    the size and position of the viewport border                    
                </return>
                <deprecated>
                    As of JDK version Swing1.1
                      replaced by <code>JScrollPane.getViewportBorderBounds()</code>.                    
                </deprecated>
            </javadoc>
            <method name="getViewportBorderBounds" type="Rectangle" line="1113">
                <params>
                    <param name="scrollpane" type="JScrollPane"/>
                </params>
            </method>
            <class name="UIResource" line="1117">
                <extends class="ScrollPaneLayout"/>
                <implements interface="javax.swing.plaf.UIResource"/>
                <javadoc line="1117">
                    The UI resource version of &lt;code&gt;ScrollPaneLayout&lt;/code&gt;.                    
                </javadoc>
            </class>
        </class>
    </source>