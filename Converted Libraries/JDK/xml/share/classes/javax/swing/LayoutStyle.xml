<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Container"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="sun.awt.AppContext"/>
        <class name="LayoutStyle" line="31">
            <javadoc line="31">
                &lt;code&gt;LayoutStyle&lt;/code&gt; provides information about how to position
                  components.  This class is primarily useful for visual tools and
                  layout managers.  Most developers will not need to use this class.
                  &lt;p&gt;
                  You typically don&apos;t set or create a
                  &lt;code&gt;LayoutStyle&lt;/code&gt;.  Instead use the static method
                  &lt;code&gt;getInstance&lt;/code&gt; to obtain the current instance.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="43">
                Sets the shared instance of &lt;code&gt;LayoutStyle&lt;/code&gt;.  Specifying
                  &lt;code&gt;null&lt;/code&gt; results in using the &lt;code&gt;LayoutStyle&lt;/code&gt; from
                  the current &lt;code&gt;LookAndFeel&lt;/code&gt;.                
                <param>
                    style the <code>LayoutStyle</code>, or <code>null</code>                    
                </param>
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <method name="setInstance" type="void" line="51">
                <params>
                    <param name="style" type="LayoutStyle"/>
                </params>
                <scope line="52">
                    <scope line="53"/>
                    <scope line="56"/>
                </scope>
            </method>
            <javadoc line="62">
                Returns the shared instance of &lt;code&gt;LayoutStyle&lt;/code&gt;.  If an instance
                  has not been specified in &lt;code&gt;setInstance&lt;/code&gt;, this will return
                  the &lt;code&gt;LayoutStyle&lt;/code&gt; from the current &lt;code&gt;LookAndFeel&lt;/code&gt;.                
                <see>
                    LookAndFeel#getLayoutStyle                    
                </see>
                <return>
                    the shared instance of <code>LayoutStyle</code>                    
                </return>
            </javadoc>
            <method name="getInstance" type="LayoutStyle" line="70">
                <declaration name="style" type="LayoutStyle" line="71"/>
                <scope line="72"/>
                <scope line="76"/>
            </method>
            <javadoc line="83">
                &lt;code&gt;ComponentPlacement&lt;/code&gt; is an enumeration of the
                  possible ways two components can be placed relative to each
                  other.  &lt;code&gt;ComponentPlacement&lt;/code&gt; is used by the
                  &lt;code&gt;LayoutStyle&lt;/code&gt; method &lt;code&gt;getPreferredGap&lt;/code&gt;.  Refer to
                  &lt;code&gt;LayoutStyle&lt;/code&gt; for more information.                
                <see>
                    LayoutStyle#getPreferredGap(JComponent,JComponent,ComponentPlacement,int,Container)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="95">
                Enumeration value indicating the two components are
                  visually related and will be placed in the same parent.
                  For example, a &lt;code&gt;JLabel&lt;/code&gt; providing a label for a
                  &lt;code&gt;JTextField&lt;/code&gt; is typically visually associated
                  with the &lt;code&gt;JTextField&lt;/code&gt;; the constant &lt;code&gt;RELATED&lt;/code&gt;
                  is used for this.                
            </javadoc>
            <javadoc line="105">
                Enumeration value indicating the two components are
                  visually unrelated and will be placed in the same parent.
                  For example, groupings of components are usually visually
                  separated; the constant &lt;code&gt;UNRELATED&lt;/code&gt; is used for this.                
            </javadoc>
            <javadoc line="113">
                Enumeration value indicating the distance to indent a component
                  is being requested.  For example, often times the children of
                  a label will be horizontally indented from the label.  To determine
                  the preferred distance for such a gap use the
                  &lt;code&gt;INDENT&lt;/code&gt; type.
                  &lt;p&gt;
                  This value is typically only useful with a direction of
                  &lt;code&gt;EAST&lt;/code&gt; or &lt;code&gt;WEST&lt;/code&gt;.                
            </javadoc>
            <javadoc line="127">
                Creates a new &lt;code&gt;LayoutStyle&lt;/code&gt;.  You generally don&apos;t
                  create a &lt;code&gt;LayoutStyle&lt;/code&gt;.  Instead use the method
                  &lt;code&gt;getInstance&lt;/code&gt; to obtain the current
                  &lt;code&gt;LayoutStyle&lt;/code&gt;.                
            </javadoc>
            <method name="LayoutStyle" type="constructor" line="133"/>
            <method name="getPreferredGap" type="int" line="136"/>
            <javadoc line="136">
                Returns the amount of space to use between two components.
                  The return value indicates the distance to place
                  &lt;code&gt;component2&lt;/code&gt; relative to &lt;code&gt;component1&lt;/code&gt;.
                  For example, the following returns the amount of space to place
                  between &lt;code&gt;component2&lt;/code&gt; and &lt;code&gt;component1&lt;/code&gt;
                  when &lt;code&gt;component2&lt;/code&gt; is placed vertically above
                  &lt;code&gt;component1&lt;/code&gt;:
                  &lt;pre&gt;
                  int gap = getPreferredGap(component1, component2,
                  ComponentPlacement.RELATED,
                  SwingConstants.NORTH, parent);
                  &lt;/pre&gt;
                  The &lt;code&gt;type&lt;/code&gt; parameter indicates the relation between
                  the two components.  If the two components will be contained in
                  the same parent and are showing similar logically related
                  items, use &lt;code&gt;RELATED&lt;/code&gt;.  If the two components will be
                  contained in the same parent but show logically unrelated items
                  use &lt;code&gt;UNRELATED&lt;/code&gt;.  Some look and feels may not
                  distinguish between the &lt;code&gt;RELATED&lt;/code&gt; and
                  &lt;code&gt;UNRELATED&lt;/code&gt; types.
                  &lt;p&gt;
                  The return value is not intended to take into account the
                  current size and position of &lt;code&gt;component2&lt;/code&gt; or
                  &lt;code&gt;component1&lt;/code&gt;.  The return value may take into
                  consideration various properties of the components.  For
                  example, the space may vary based on font size, or the preferred
                  size of the component.                
                <param>
                    component1 the <code>JComponent</code>
                      <code>component2</code> is being placed relative to                    
                </param>
                <param>
                    component2 the <code>JComponent</code> being placed                    
                </param>
                <param>
                    position the position <code>component2</code> is being placed
                      relative to <code>component1</code>; one of
                      <code>SwingConstants.NORTH</code>,
                      <code>SwingConstants.SOUTH</code>,
                      <code>SwingConstants.EAST</code> or
                      <code>SwingConstants.WEST</code>                    
                </param>
                <param>
                    type how the two components are being placed                    
                </param>
                <param>
                    parent the parent of <code>component2</code>; this may differ
                      from the actual parent and it may be <code>null</code>                    
                </param>
                <return>
                    the amount of space to place between the two components                    
                </return>
                <throws>
                    NullPointerException if <code>component1</code>,
                      <code>component2</code> or <code>type</code> is
                      <code>null</code>                    
                </throws>
                <throws>
                    IllegalArgumentException if <code>position</code> is not
                      one of <code>SwingConstants.NORTH</code>,
                      <code>SwingConstants.SOUTH</code>,
                      <code>SwingConstants.EAST</code> or
                      <code>SwingConstants.WEST</code>                    
                </throws>
                <see>
                    LookAndFeel#getLayoutStyle                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getContainerGap" type="int" line="194"/>
            <javadoc line="194">
                Returns the amount of space to place between the component and specified
                  edge of its parent.                
                <param>
                    component the <code>JComponent</code> being positioned                    
                </param>
                <param>
                    position the position <code>component</code> is being placed
                      relative to its parent; one of
                      <code>SwingConstants.NORTH</code>,
                      <code>SwingConstants.SOUTH</code>,
                      <code>SwingConstants.EAST</code> or
                      <code>SwingConstants.WEST</code>                    
                </param>
                <param>
                    parent the parent of <code>component</code>; this may differ
                      from the actual parent and may be <code>null</code>                    
                </param>
                <return>
                    the amount of space to place between the component and specified
                      edge                    
                </return>
                <throws>
                    IllegalArgumentException if <code>position</code> is not
                      one of <code>SwingConstants.NORTH</code>,
                      <code>SwingConstants.SOUTH</code>,
                      <code>SwingConstants.EAST</code> or
                      <code>SwingConstants.WEST</code>                    
                </throws>
            </javadoc>
        </class>
    </source>