<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Container"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="sun.awt.AppContext"/>
        <class name="LayoutStyle" line="5">
            <javadoc line="5">
                &lt;code&gt;LayoutStyle&lt;/code&gt; provides information about how to position
                  components.  This class is primarily useful for visual tools and
                  layout managers.  Most developers will not need to use this class.
                  &lt;p&gt;
                  You typically don&apos;t set or create a
                  &lt;code&gt;LayoutStyle&lt;/code&gt;.  Instead use the static method
                  &lt;code&gt;getInstance&lt;/code&gt; to obtain the current instance.                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <javadoc line="16">
                Sets the shared instance of &lt;code&gt;LayoutStyle&lt;/code&gt;.  Specifying
                  &lt;code&gt;null&lt;/code&gt; results in using the &lt;code&gt;LayoutStyle&lt;/code&gt; from
                  the current &lt;code&gt;LookAndFeel&lt;/code&gt;.                
                <param>
                    style the &lt;code&gt;LayoutStyle&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <see>
                    #getInstance                    
                </see>
            </javadoc>
            <method name="setInstance" type="void" line="23">
                <params>
                    <param name="style" type="LayoutStyle"/>
                </params>
                <scope line="24">
                    <scope line="25"/>
                    <scope line="28"/>
                </scope>
            </method>
            <javadoc line="33">
                Returns the shared instance of &lt;code&gt;LayoutStyle&lt;/code&gt;.  If an instance
                  has not been specified in &lt;code&gt;setInstance&lt;/code&gt;, this will return
                  the &lt;code&gt;LayoutStyle&lt;/code&gt; from the current &lt;code&gt;LookAndFeel&lt;/code&gt;.                
                <see>
                    LookAndFeel#getLayoutStyle                    
                </see>
                <return>
                    the shared instance of &lt;code&gt;LayoutStyle&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getInstance" type="LayoutStyle" line="40">
                <declaration name="style" type="LayoutStyle" line="41"/>
                <scope line="42"/>
                <scope line="45"/>
            </method>
            <declaration name="ComponentPlacement" type="enum" line="50"/>
            <javadoc line="50">
                &lt;code&gt;ComponentPlacement&lt;/code&gt; is an enumeration of the
                  possible ways two components can be placed relative to each
                  other.  &lt;code&gt;ComponentPlacement&lt;/code&gt; is used by the
                  &lt;code&gt;LayoutStyle&lt;/code&gt; method &lt;code&gt;getPreferredGap&lt;/code&gt;.  Refer to
                  &lt;code&gt;LayoutStyle&lt;/code&gt; for more information.                
                <see>
                    LayoutStyle#getPreferredGap(JComponent,JComponent,ComponentPlacement,int,Container)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="59"/>
            <javadoc line="84">
                Creates a new &lt;code&gt;LayoutStyle&lt;/code&gt;.  You generally don&apos;t
                  create a &lt;code&gt;LayoutStyle&lt;/code&gt;.  Instead use the method
                  &lt;code&gt;getInstance&lt;/code&gt; to obtain the current
                  &lt;code&gt;LayoutStyle&lt;/code&gt;.                
            </javadoc>
            <method name="LayoutStyle" type="constructor" line="90"/>
            <method name="getPreferredGap" type="int" line="92"/>
            <javadoc line="92">
                Returns the amount of space to use between two components.
                  The return value indicates the distance to place
                  &lt;code&gt;component2&lt;/code&gt; relative to &lt;code&gt;component1&lt;/code&gt;.
                  For example, the following returns the amount of space to place
                  between &lt;code&gt;component2&lt;/code&gt; and &lt;code&gt;component1&lt;/code&gt;
                  when &lt;code&gt;component2&lt;/code&gt; is placed vertically above
                  &lt;code&gt;component1&lt;/code&gt;:
                  &lt;pre&gt;
                  int gap = getPreferredGap(component1, component2,
                  ComponentPlacement.RELATED,
                  SwingConstants.NORTH, parent);
                  &lt;/pre&gt;
                  The &lt;code&gt;type&lt;/code&gt; parameter indicates the relation between
                  the two components.  If the two components will be contained in
                  the same parent and are showing similar logically related
                  items, use &lt;code&gt;RELATED&lt;/code&gt;.  If the two components will be
                  contained in the same parent but show logically unrelated items
                  use &lt;code&gt;UNRELATED&lt;/code&gt;.  Some look and feels may not
                  distinguish between the &lt;code&gt;RELATED&lt;/code&gt; and
                  &lt;code&gt;UNRELATED&lt;/code&gt; types.
                  &lt;p&gt;
                  The return value is not intended to take into account the
                  current size and position of &lt;code&gt;component2&lt;/code&gt; or
                  &lt;code&gt;component1&lt;/code&gt;.  The return value may take into
                  consideration various properties of the components.  For
                  example, the space may vary based on font size, or the preferred
                  size of the component.                
                <param>
                    component1 the &lt;code&gt;JComponent&lt;/code&gt;
                      &lt;code&gt;component2&lt;/code&gt; is being placed relative to                    
                </param>
                <param>
                    component2 the &lt;code&gt;JComponent&lt;/code&gt; being placed                    
                </param>
                <param>
                    position the position &lt;code&gt;component2&lt;/code&gt; is being placed
                      relative to &lt;code&gt;component1&lt;/code&gt;; one of
                      &lt;code&gt;SwingConstants.NORTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.EAST&lt;/code&gt; or
                      &lt;code&gt;SwingConstants.WEST&lt;/code&gt;                    
                </param>
                <param>
                    type how the two components are being placed                    
                </param>
                <param>
                    parent the parent of &lt;code&gt;component2&lt;/code&gt;; this may differ
                      from the actual parent and it may be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the amount of space to place between the two components                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;component1&lt;/code&gt;,
                      &lt;code&gt;component2&lt;/code&gt; or &lt;code&gt;type&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;position&lt;/code&gt; is not
                      one of &lt;code&gt;SwingConstants.NORTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.EAST&lt;/code&gt; or
                      &lt;code&gt;SwingConstants.WEST&lt;/code&gt;                    
                </throws>
                <see>
                    LookAndFeel#getLayoutStyle                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getContainerGap" type="int" line="145"/>
            <javadoc line="145">
                Returns the amount of space to place between the component and specified
                  edge of its parent.                
                <param>
                    component the &lt;code&gt;JComponent&lt;/code&gt; being positioned                    
                </param>
                <param>
                    position the position &lt;code&gt;component&lt;/code&gt; is being placed
                      relative to its parent; one of
                      &lt;code&gt;SwingConstants.NORTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.EAST&lt;/code&gt; or
                      &lt;code&gt;SwingConstants.WEST&lt;/code&gt;                    
                </param>
                <param>
                    parent the parent of &lt;code&gt;component&lt;/code&gt;; this may differ
                      from the actual parent and may be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    the amount of space to place between the component and specified
                      edge                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;position&lt;/code&gt; is not
                      one of &lt;code&gt;SwingConstants.NORTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;,
                      &lt;code&gt;SwingConstants.EAST&lt;/code&gt; or
                      &lt;code&gt;SwingConstants.WEST&lt;/code&gt;                    
                </throws>
            </javadoc>
        </class>
    </source>