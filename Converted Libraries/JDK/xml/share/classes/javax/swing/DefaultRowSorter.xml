<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.text.Collator"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Arrays"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Comparator"/>
        <import package="java.util.List"/>
        <import package="javax.swing.SortOrder"/>
        <class name="DefaultRowSorter" line="35">
            <type_params>
                <type_param name="M"/>
                <type_param name="I"/>
            </type_params>
            <extends class="RowSorter">
                <type_params>
                    <type_param name="M"/>
                </type_params>
            </extends>
            <comment line="788">
                Returns the Comparator to use during sorting.  Where as
                 getComparator() may return null, this will never return null.                
            </comment>
            <javadoc line="35">
                An implementation of &lt;code&gt;RowSorter&lt;/code&gt; that provides sorting and
                  filtering around a grid-based data model.
                  Beyond creating and installing a &lt;code&gt;RowSorter&lt;/code&gt;, you very rarely
                  need to interact with one directly.  Refer to{@link javax.swing.table.TableRowSorter TableRowSorter} for a concrete
                  implementation of &lt;code&gt;RowSorter&lt;/code&gt; for &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  Sorting is done based on the current &lt;code&gt;SortKey&lt;/code&gt;s, in order.
                  If two objects are equal (the &lt;code&gt;Comparator&lt;/code&gt; for the
                  column returns 0) the next &lt;code&gt;SortKey&lt;/code&gt; is used.  If no
                  &lt;code&gt;SortKey&lt;/code&gt;s remain or the order is &lt;code&gt;UNSORTED&lt;/code&gt;, then
                  the order of the rows in the model is used.
                  &lt;p&gt;
                  Sorting of each column is done by way of a &lt;code&gt;Comparator&lt;/code&gt;
                  that you can specify using the &lt;code&gt;setComparator&lt;/code&gt; method.
                  If a &lt;code&gt;Comparator&lt;/code&gt; has not been specified, the
                  &lt;code&gt;Comparator&lt;/code&gt; returned by
                  &lt;code&gt;Collator.getInstance()&lt;/code&gt; is used on the results of
                  calling &lt;code&gt;toString&lt;/code&gt; on the underlying objects.  The
                  &lt;code&gt;Comparator&lt;/code&gt; is never passed &lt;code&gt;null&lt;/code&gt;.  A
                  &lt;code&gt;null&lt;/code&gt; value is treated as occuring before a
                  non-&lt;code&gt;null&lt;/code&gt; value, and two &lt;code&gt;null&lt;/code&gt; values are
                  considered equal.
                  &lt;p&gt;
                  If you specify a &lt;code&gt;Comparator&lt;/code&gt; that casts its argument to
                  a type other than that provided by the model, a
                  &lt;code&gt;ClassCastException&lt;/code&gt; will be thrown when the data is sorted.
                  &lt;p&gt;
                  In addition to sorting, &lt;code&gt;DefaultRowSorter&lt;/code&gt; provides the
                  ability to filter rows.  Filtering is done by way of a
                  &lt;code&gt;RowFilter&lt;/code&gt; that is specified using the
                  &lt;code&gt;setRowFilter&lt;/code&gt; method.  If no filter has been specified all
                  rows are included.
                  &lt;p&gt;
                  By default, rows are in unsorted order (the same as the model) and
                  every column is sortable. The default &lt;code&gt;Comparator&lt;/code&gt;s are
                  documented in the subclasses (for example, {@link javax.swing.table.TableRowSorter TableRowSorter}).
                  &lt;p&gt;
                  If the underlying model structure changes (the
                  &lt;code&gt;modelStructureChanged&lt;/code&gt; method is invoked) the following
                  are reset to their default values: &lt;code&gt;Comparator&lt;/code&gt;s by
                  column, current sort order, and whether each column is sortable. To
                  find the default &lt;code&gt;Comparator&lt;/code&gt;s, see the concrete
                  implementation (for example, {@link javax.swing.table.TableRowSorter TableRowSorter}).  The default
                  sort order is unsorted (the same as the model), and columns are
                  sortable by default.
                  &lt;p&gt;
                  If the underlying model structure changes (the
                  &lt;code&gt;modelStructureChanged&lt;/code&gt; method is invoked) the following
                  are reset to their default values: &lt;code&gt;Comparator&lt;/code&gt;s by column,
                  current sort order and whether a column is sortable.
                  &lt;p&gt;
                  &lt;code&gt;DefaultRowSorter&lt;/code&gt; is an abstract class.  Concrete
                  subclasses must provide access to the underlying data by invoking{@code setModelWrapper}. The {@code setModelWrapper} method
                  &lt;b&gt;must&lt;/b&gt; be invoked soon after the constructor is
                  called, ideally from within the subclass&apos;s constructor.
                  Undefined behavior will result if you use a {@codeDefaultRowSorter} without specifying a {@code ModelWrapper}.
                  &lt;p&gt;
                  &lt;code&gt;DefaultRowSorter&lt;/code&gt; has two formal type parameters.  The
                  first type parameter corresponds to the class of the model, for example
                  &lt;code&gt;DefaultTableModel&lt;/code&gt;.  The second type parameter
                  corresponds to the class of the identifier passed to the
                  &lt;code&gt;RowFilter&lt;/code&gt;.  Refer to &lt;code&gt;TableRowSorter&lt;/code&gt; and
                  &lt;code&gt;RowFilter&lt;/code&gt; for more details on the type parameters.                
                <param>
                    &lt;M&gt;
                       the type of the model                    
                </param>
                <param>
                    &lt;I&gt;
                       the type of the identifier passed to the &lt;code&gt;RowFilter&lt;/code&gt;                    
                </param>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <see>
                    javax.swing.table.DefaultTableModel                    
                </see>
                <see>
                    java.text.Collator                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="sortsOnUpdates" type="boolean" line="113"/>
            <javadoc line="113">
                Whether or not we resort on TableModelEvent.UPDATEs.                
            </javadoc>
            <declaration name="viewToModel" type="Row[]" line="118"/>
            <javadoc line="118">
                View (JTable) -&gt; model.                
            </javadoc>
            <declaration name="modelToView" type="int[]" line="123"/>
            <javadoc line="123">
                model -&gt; view (JTable)                
            </javadoc>
            <declaration name="comparators" type="Comparator[]" line="128"/>
            <javadoc line="128">
                Comparators specified by column.                
            </javadoc>
            <declaration name="isSortable" type="boolean[]" line="133"/>
            <javadoc line="133">
                Whether or not the specified column is sortable, by column.                
            </javadoc>
            <declaration name="cachedSortKeys" type="SortKey[]" line="138"/>
            <javadoc line="138">
                Cached SortKeys for the current sort.                
            </javadoc>
            <declaration name="sortComparators" type="Comparator[]" line="143"/>
            <javadoc line="143">
                Cached comparators for the current sort                
            </javadoc>
            <declaration name="filter" type="RowFilter&lt;? super M,? super I&gt;" line="148"/>
            <javadoc line="148">
                Developer supplied Filter.                
            </javadoc>
            <declaration name="filterEntry" type="FilterEntry" line="153"/>
            <javadoc line="153">
                Value passed to the filter.  The same instance is passed to the
                  filter for different rows.                
            </javadoc>
            <declaration name="sortKeys" type="List&lt;SortKey&gt;" line="159"/>
            <javadoc line="159">
                The sort keys.                
            </javadoc>
            <declaration name="useToString" type="boolean[]" line="164"/>
            <javadoc line="164">
                Whether or not to use getStringValueAt.  This is indexed by column.                
            </javadoc>
            <declaration name="sorted" type="boolean" line="169"/>
            <javadoc line="169">
                Indicates the contents are sorted.  This is used if
                  getSortsOnUpdates is false and an update event is received.                
            </javadoc>
            <declaration name="maxSortKeys" type="int" line="175"/>
            <javadoc line="175">
                Maximum number of sort keys.                
            </javadoc>
            <declaration name="modelWrapper" type="ModelWrapper&lt;M,I&gt;" line="180"/>
            <javadoc line="180">
                Provides access to the data we&apos;re sorting/filtering.                
            </javadoc>
            <declaration name="modelRowCount" type="int" line="185"/>
            <javadoc line="185">
                Size of the model. This is used to enforce error checking within
                  the table changed notification methods (such as rowsInserted).                
            </javadoc>
            <javadoc line="192">
                Creates an empty &lt;code&gt;DefaultRowSorter&lt;/code&gt;.                
            </javadoc>
            <method name="DefaultRowSorter" type="constructor" line="195"/>
            <javadoc line="200">
                Sets the model wrapper providing the data that is being sorted and
                  filtered.                
                <param>
                    modelWrapper the model wrapper responsible for providing the
                      data that gets sorted and filtered                    
                </param>
                <throws>
                    IllegalArgumentException if {@code modelWrapper} is{@code null}                    
                </throws>
            </javadoc>
            <method name="setModelWrapper" type="void" line="209">
                <params>
                    <param name="modelWrapper" type="ModelWrapper<M,I>"/>
                </params>
                <comment line="220">
                    If last is null, we&apos;re in the constructor. If we&apos;re in
                     the constructor we don&apos;t want to call to overridable methods.                    
                </comment>
                <scope line="210"/>
                <declaration name="last" type="ModelWrapper&lt;M,I&gt;" line="214"/>
                <scope line="216"/>
                <scope line="218"/>
            </method>
            <javadoc line="225">
                Returns the model wrapper providing the data that is being sorted and
                  filtered.                
                <return>
                    the model wrapper responsible for providing the data that
                      gets sorted and filtered                    
                </return>
            </javadoc>
            <method name="getModelWrapper" type="ModelWrapper<M,I>" line="232"/>
            <javadoc line="236">
                Returns the underlying model.                
                <return>
                    the underlying model                    
                </return>
            </javadoc>
            <method name="getModel" type="M" line="241"/>
            <javadoc line="245">
                Sets whether or not the specified column is sortable.  The specified
                  value is only checked when &lt;code&gt;toggleSortOrder&lt;/code&gt; is invoked.
                  It is still possible to sort on a column that has been marked as
                  unsortable by directly setting the sort keys.  The default is
                  true.                
                <param>
                    column the column to enable or disable sorting on, in terms
                      of the underlying model                    
                </param>
                <param>
                    sortable whether or not the specified column is sortable                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;column&lt;/code&gt; is outside
                      the range of the model                    
                </throws>
                <see>
                    #toggleSortOrder                    
                </see>
                <see>
                    #setSortKeys                    
                </see>
            </javadoc>
            <method name="setSortable" type="void" line="260">
                <params>
                    <param name="column" type="int"/>
                    <param name="sortable" type="boolean"/>
                </params>
                <scope line="262">
                    <scope line="264"/>
                </scope>
            </method>
            <javadoc line="271">
                Returns true if the specified column is sortable; otherwise, false.                
                <param>
                    column the column to check sorting for, in terms of the
                      underlying model                    
                </param>
                <return>
                    true if the column is sortable                    
                </return>
                <throws>
                    IndexOutOfBoundsException if column is outside
                      the range of the underlying model                    
                </throws>
            </javadoc>
            <method name="isSortable" type="boolean" line="280">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="285">
                Sets the sort keys. This creates a copy of the supplied{@code List}; subsequent changes to the supplied{@code List} do not effect this {@code DefaultRowSorter}.
                  If the sort keys have changed this triggers a sort.                
                <param>
                    sortKeys the new &lt;code&gt;SortKeys&lt;/code&gt;; &lt;code&gt;null&lt;/code&gt;
                      is a shorthand for specifying an empty list,
                      indicating that the view should be unsorted                    
                </param>
                <throws>
                    IllegalArgumentException if any of the values in
                      &lt;code&gt;sortKeys&lt;/code&gt; are null or have a column index outside
                      the range of the model                    
                </throws>
            </javadoc>
            <method name="setSortKeys" type="void" line="298">
                <params>
                    <param name="sortKeys" type="List<? extends SortKey>"/>
                </params>
                <comment line="318">
                    Currently unsorted, use sort so that internal fields
                     are correctly set.                    
                </comment>
                <declaration name="old" type="List&lt;SortKey&gt;" line="299"/>
                <scope line="300">
                    <declaration name="max" type="int" line="301"/>
                    <scope line="302">
                        <scope line="304"/>
                    </scope>
                </scope>
                <scope line="311"/>
                <scope line="314">
                    <scope line="316"/>
                    <scope line="320"/>
                </scope>
            </method>
            <javadoc line="326">
                Returns the current sort keys.  This returns an unmodifiable{@code non-null List}. If you need to change the sort keys,
                  make a copy of the returned {@code List}, mutate the copy
                  and invoke {@code setSortKeys} with the new list.                
                <return>
                    the current sort order                    
                </return>
            </javadoc>
            <method name="getSortKeys" type="List<? extends SortKey>" line="334"/>
            <javadoc line="338">
                Sets the maximum number of sort keys.  The number of sort keys
                  determines how equal values are resolved when sorting.  For
                  example, assume a table row sorter is created and
                  &lt;code&gt;setMaxSortKeys(2)&lt;/code&gt; is invoked on it. The user
                  clicks the header for column 1, causing the table rows to be
                  sorted based on the items in column 1.  Next, the user clicks
                  the header for column 2, causing the table to be sorted based
                  on the items in column 2; if any items in column 2 are equal,
                  then those particular rows are ordered based on the items in
                  column 1. In this case, we say that the rows are primarily
                  sorted on column 2, and secondarily on column 1.  If the user
                  then clicks the header for column 3, then the items are
                  primarily sorted on column 3 and secondarily sorted on column
                  2.  Because the maximum number of sort keys has been set to 2
                  with &lt;code&gt;setMaxSortKeys&lt;/code&gt;, column 1 no longer has an
                  effect on the order.
                  &lt;p&gt;
                  The maximum number of sort keys is enforced by
                  &lt;code&gt;toggleSortOrder&lt;/code&gt;.  You can specify more sort
                  keys by invoking &lt;code&gt;setSortKeys&lt;/code&gt; directly and they will
                  all be honored.  However if &lt;code&gt;toggleSortOrder&lt;/code&gt; is subsequently
                  invoked the maximum number of sort keys will be enforced.
                  The default value is 3.                
                <param>
                    max the maximum number of sort keys                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;max&lt;/code&gt; &amp;lt; 1                    
                </throws>
            </javadoc>
            <method name="setMaxSortKeys" type="void" line="366">
                <params>
                    <param name="max" type="int"/>
                </params>
                <scope line="367"/>
            </method>
            <javadoc line="373">
                Returns the maximum number of sort keys.                
                <return>
                    the maximum number of sort keys                    
                </return>
            </javadoc>
            <method name="getMaxSortKeys" type="int" line="378"/>
            <javadoc line="382">
                If true, specifies that a sort should happen when the underlying
                  model is updated (&lt;code&gt;rowsUpdated&lt;/code&gt; is invoked).  For
                  example, if this is true and the user edits an entry the
                  location of that item in the view may change.  The default is
                  false.                
                <param>
                    sortsOnUpdates whether or not to sort on update events                    
                </param>
            </javadoc>
            <method name="setSortsOnUpdates" type="void" line="391">
                <params>
                    <param name="sortsOnUpdates" type="boolean"/>
                </params>
            </method>
            <javadoc line="395">
                Returns true if  a sort should happen when the underlying
                  model is updated; otherwise, returns false.                
                <return>
                    whether or not to sort when the model is updated                    
                </return>
            </javadoc>
            <method name="getSortsOnUpdates" type="boolean" line="401"/>
            <javadoc line="405">
                Sets the filter that determines which rows, if any, should be
                  hidden from the view.  The filter is applied before sorting.  A value
                  of &lt;code&gt;null&lt;/code&gt; indicates all values from the model should be
                  included.
                  &lt;p&gt;
                  &lt;code&gt;RowFilter&lt;/code&gt;&apos;s &lt;code&gt;include&lt;/code&gt; method is passed an
                  &lt;code&gt;Entry&lt;/code&gt; that wraps the underlying model.  The number
                  of columns in the &lt;code&gt;Entry&lt;/code&gt; corresponds to the
                  number of columns in the &lt;code&gt;ModelWrapper&lt;/code&gt;.  The identifier
                  comes from the &lt;code&gt;ModelWrapper&lt;/code&gt; as well.
                  &lt;p&gt;
                  This method triggers a sort.                
                <param>
                    filter the filter used to determine what entries should be
                      included                    
                </param>
            </javadoc>
            <method name="setRowFilter" type="void" line="422">
                <params>
                    <param name="filter" type="RowFilter<? super M,? super I>"/>
                </params>
            </method>
            <javadoc line="427">
                Returns the filter that determines which rows, if any, should
                  be hidden from view.                
                <return>
                    the filter                    
                </return>
            </javadoc>
            <method name="getRowFilter" type="RowFilter<? super M,? super I>" line="433"/>
            <javadoc line="437">
                Reverses the sort order from ascending to descending (or
                  descending to ascending) if the specified column is already the
                  primary sorted column; otherwise, makes the specified column
                  the primary sorted column, with an ascending sort order.  If
                  the specified column is not sortable, this method has no
                  effect.                
                <param>
                    column index of the column to make the primary sorted column,
                      in terms of the underlying model                    
                </param>
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
                <see>
                    #setSortable(int,boolean)                    
                </see>
                <see>
                    #setMaxSortKeys(int)                    
                </see>
            </javadoc>
            <method name="toggleSortOrder" type="void" line="451">
                <params>
                    <param name="column" type="int"/>
                </params>
                <comment line="464">
                    Key doesn&apos;t exist                    
                </comment>
                <comment line="469">
                    It&apos;s the primary sorting key, toggle it                    
                </comment>
                <comment line="473">
                    It&apos;s not the first, but was sorted on, remove old
                     entry, insert as first with ascending.                    
                </comment>
                <scope line="453">
                    <declaration name="keys" type="List&lt;SortKey&gt;" line="454"/>
                    <declaration name="sortKey" type="SortKey" line="455"/>
                    <declaration name="sortIndex" type="int" line="456"/>
                    <scope line="457">
                        <scope line="458"/>
                    </scope>
                    <scope line="462"/>
                    <scope line="467"/>
                    <scope line="471"/>
                    <scope line="477"/>
                </scope>
            </method>
            <method name="toggle" type="SortKey" line="484">
                <params>
                    <param name="key" type="SortKey"/>
                </params>
                <scope line="485"/>
            </method>
            <javadoc line="491">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="convertRowIndexToView" type="int" line="496">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="497">
                    <scope line="498"/>
                </scope>
            </method>
            <javadoc line="506">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="convertRowIndexToModel" type="int" line="511">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="512">
                    <scope line="513"/>
                </scope>
            </method>
            <method name="isUnsorted" type="boolean" line="521">
                <declaration name="keys" type="List&lt;? extends SortKey&gt;" line="522"/>
                <declaration name="keySize" type="int" line="523"/>
            </method>
            <javadoc line="528">
                Sorts the existing filtered data.  This should only be used if
                  the filter hasn&apos;t changed.                
            </javadoc>
            <method name="sortExistingData" type="void" line="532">
                <comment line="553">
                    sort the data                    
                </comment>
                <comment line="556">
                    Update the modelToView array                    
                </comment>
                <declaration name="lastViewToModel" type="int[]" line="533"/>
                <scope line="538">
                    <scope line="539"/>
                    <scope line="542">
                        <declaration name="included" type="int" line="543"/>
                        <scope line="544">
                            <scope line="545"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="551"/>
            </method>
            <javadoc line="561">
                Sorts and filters the rows in the view based on the sort keys
                  of the columns currently being sorted and the filter, if any,
                  associated with this sorter.  An empty &lt;code&gt;sortKeys&lt;/code&gt; list
                  indicates that the view should unsorted, the same as the model.                
                <see>
                    #setRowFilter                    
                </see>
                <see>
                    #setSortKeys                    
                </see>
            </javadoc>
            <method name="sort" type="void" line="570">
                <comment line="576">
                    Unsorted                    
                </comment>
                <comment line="579">
                    No filter &amp; unsorted                    
                </comment>
                <comment line="581">
                    sorted -&gt; unsorted                    
                </comment>
                <comment line="586">
                    unsorted -&gt; unsorted
                     No need to do anything.                    
                </comment>
                <comment line="592">
                    There is filter, reset mappings                    
                </comment>
                <comment line="607">
                    sort them                    
                </comment>
                <comment line="610">
                    Update the modelToView array                    
                </comment>
                <declaration name="lastViewToModel" type="int[]" line="572"/>
                <scope line="574">
                    <scope line="577">
                        <scope line="579"/>
                        <scope line="584"/>
                    </scope>
                    <scope line="590"/>
                </scope>
                <scope line="595">
                    <scope line="598"/>
                    <scope line="601"/>
                </scope>
            </method>
            <javadoc line="615">
                Updates the useToString mapping before a sort.                
            </javadoc>
            <method name="updateUseToString" type="void" line="618">
                <declaration name="i" type="int" line="619"/>
                <scope line="620"/>
                <scope line="623"/>
            </method>
            <javadoc line="628">
                Resets the viewToModel and modelToView mappings based on
                  the current Filter.                
            </javadoc>
            <method name="initializeFilteredMapping" type="void" line="632">
                <comment line="638">
                    Update model -&gt; view                    
                </comment>
                <comment line="650">
                    Update view -&gt; model                    
                </comment>
                <declaration name="rowCount" type="int" line="633"/>
                <declaration name="i" type="int" line="634"/>
                <declaration name="excludedCount" type="int" line="635"/>
                <scope line="639">
                    <scope line="640"/>
                    <scope line="643"/>
                </scope>
                <scope line="651">
                    <scope line="652"/>
                </scope>
            </method>
            <javadoc line="658">
                Makes sure the modelToView array is of size rowCount.                
            </javadoc>
            <method name="createModelToView" type="void" line="661">
                <params>
                    <param name="rowCount" type="int"/>
                </params>
                <scope line="662"/>
            </method>
            <javadoc line="667">
                Resets the viewToModel array to be of size rowCount.                
            </javadoc>
            <method name="createViewToModel" type="void" line="670">
                <params>
                    <param name="rowCount" type="int"/>
                </params>
                <declaration name="recreateFrom" type="int" line="671"/>
                <scope line="672">
                    <scope line="674">
                        <declaration name="oldViewToModel" type="Row[]" line="675"/>
                    </scope>
                </scope>
                <scope line="681"/>
                <declaration name="i" type="int" line="684"/>
                <scope line="685"/>
                <scope line="688"/>
            </method>
            <javadoc line="693">
                Caches the sort keys before a sort.                
            </javadoc>
            <method name="cacheSortKeys" type="void" line="696">
                <params>
                    <param name="keys" type="List<? extends SortKey>"/>
                </params>
                <declaration name="keySize" type="int" line="697"/>
                <scope line="699"/>
            </method>
            <javadoc line="705">
                Returns whether or not to convert the value to a string before
                  doing comparisons when sorting.  If true
                  &lt;code&gt;ModelWrapper.getStringValueAt&lt;/code&gt; will be used, otherwise
                  &lt;code&gt;ModelWrapper.getValueAt&lt;/code&gt; will be used.  It is up to
                  subclasses, such as &lt;code&gt;TableRowSorter&lt;/code&gt;, to honor this value
                  in their &lt;code&gt;ModelWrapper&lt;/code&gt; implementation.                
                <param>
                    column the index of the column to test, in terms of the
                      underlying model                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;column&lt;/code&gt; is not valid                    
                </throws>
            </javadoc>
            <method name="useToString" type="boolean" line="717">
                <params>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="721">
                Refreshes the modelToView mapping from that of viewToModel.
                  If &lt;code&gt;unsetFirst&lt;/code&gt; is true, all indices in modelToView are
                  first set to -1.                
            </javadoc>
            <method name="setModelToViewFromViewToModel" type="void" line="726">
                <params>
                    <param name="unsetFirst" type="boolean"/>
                </params>
                <declaration name="i" type="int" line="727"/>
                <scope line="728">
                    <scope line="729"/>
                </scope>
                <scope line="733"/>
            </method>
            <method name="getViewToModelAsInts" type="int[]" line="738">
                <params>
                    <param name="viewToModel" type="Row[]"/>
                </params>
                <scope line="739">
                    <declaration name="viewToModelI" type="int[]" line="740"/>
                    <scope line="741"/>
                </scope>
            </method>
            <javadoc line="749">
                Sets the &lt;code&gt;Comparator&lt;/code&gt; to use when sorting the specified
                  column.  This does not trigger a sort.  If you want to sort after
                  setting the comparator you need to explicitly invoke &lt;code&gt;sort&lt;/code&gt;.                
                <param>
                    column the index of the column the &lt;code&gt;Comparator&lt;/code&gt; is
                      to be used for, in terms of the underlying model                    
                </param>
                <param>
                    comparator the &lt;code&gt;Comparator&lt;/code&gt; to use                    
                </param>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;column&lt;/code&gt; is outside
                      the range of the underlying model                    
                </throws>
            </javadoc>
            <method name="setComparator" type="void" line="760">
                <params>
                    <param name="column" type="int"/>
                    <param name="comparator" type="Comparator<?>"/>
                </params>
                <scope line="762"/>
            </method>
            <javadoc line="768">
                Returns the &lt;code&gt;Comparator&lt;/code&gt; for the specified
                  column.  This will return &lt;code&gt;null&lt;/code&gt; if a &lt;code&gt;Comparator&lt;/code&gt;
                  has not been specified for the column.                
                <param>
                    column the column to fetch the &lt;code&gt;Comparator&lt;/code&gt; for, in
                      terms of the underlying model                    
                </param>
                <return>
                    the &lt;code&gt;Comparator&lt;/code&gt; for the specified column                    
                </return>
                <throws>
                    IndexOutOfBoundsException if column is outside
                      the range of the underlying model                    
                </throws>
            </javadoc>
            <method name="getComparator" type="Comparator<?>" line="779">
                <params>
                    <param name="column" type="int"/>
                </params>
                <scope line="781"/>
            </method>
            <method name="getComparator0" type="Comparator" line="789">
                <params>
                    <param name="column" type="int"/>
                </params>
                <comment line="795">
                    This should be ok as useToString(column) should have returned
                     true in this case.                    
                </comment>
                <declaration name="comparator" type="Comparator" line="790"/>
                <scope line="791"/>
            </method>
            <method name="getFilterEntry" type="RowFilter.Entry<M,I>" line="799">
                <params>
                    <param name="modelIndex" type="int"/>
                </params>
                <scope line="800"/>
            </method>
            <javadoc line="807">
                {@inheritDoc}                
            </javadoc>
            <method name="getViewRowCount" type="int" line="810">
                <comment line="813">
                    When filtering this may differ from getModelWrapper().getRowCount()                    
                </comment>
                <scope line="811"/>
            </method>
            <javadoc line="818">
                {@inheritDoc}                
            </javadoc>
            <method name="getModelRowCount" type="int" line="821"/>
            <method name="allChanged" type="void" line="825">
                <comment line="832">
                    Keys are already empty, to force a resort we have to
                     call sort                    
                </comment>
                <scope line="830"/>
                <scope line="834"/>
            </method>
            <javadoc line="839">
                {@inheritDoc}                
            </javadoc>
            <method name="modelStructureChanged" type="void" line="842"/>
            <javadoc line="847">
                {@inheritDoc}                
            </javadoc>
            <method name="allRowsChanged" type="void" line="850"/>
            <javadoc line="855">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="rowsInserted" type="void" line="860">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="endRow" type="int"/>
                </params>
                <declaration name="newModelRowCount" type="int" line="862"/>
                <scope line="863"/>
                <scope line="867"/>
            </method>
            <javadoc line="872">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="rowsDeleted" type="void" line="877">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="endRow" type="int"/>
                </params>
                <scope line="879"/>
                <scope line="883"/>
            </method>
            <javadoc line="888">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="rowsUpdated" type="void" line="893">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="endRow" type="int"/>
                </params>
                <scope line="895"/>
                <scope line="898">
                    <scope line="899"/>
                </scope>
                <scope line="903"/>
            </method>
            <javadoc line="908">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="rowsUpdated" type="void" line="913">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="endRow" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <method name="checkAgainstModel" type="void" line="918">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="endRow" type="int"/>
                </params>
                <scope line="920"/>
            </method>
            <javadoc line="925">
                Returns true if the specified row should be included.                
            </javadoc>
            <method name="include" type="boolean" line="928">
                <params>
                    <param name="row" type="int"/>
                </params>
                <comment line="934">
                    null filter, always include the row.                    
                </comment>
                <declaration name="filter" type="RowFilter&lt;? super M,? super I&gt;" line="929"/>
                <scope line="930"/>
            </method>
            <method name="compare" type="int" line="938">
                <params>
                    <param name="model1" type="int"/>
                    <param name="model2" type="int"/>
                </params>
                <comment line="951">
                    v1 != null &amp;&amp; v2 != null                    
                </comment>
                <comment line="959">
                    Treat nulls as &lt; then non-null                    
                </comment>
                <comment line="979">
                    If we get here, they&apos;re equal. Fallback to model order.                    
                </comment>
                <declaration name="column" type="int" line="939"/>
                <declaration name="sortOrder" type="SortOrder" line="940"/>
                <declaration name="v1" type="Object" line="941"/>
                <declaration name="result" type="int" line="942"/>
                <scope line="944">
                    <scope line="947"/>
                    <scope line="949">
                        <scope line="951"/>
                        <scope line="954"/>
                        <scope line="959">
                            <scope line="960"/>
                            <scope line="962"/>
                        </scope>
                        <scope line="965"/>
                        <scope line="967"/>
                        <scope line="970"/>
                    </scope>
                    <scope line="974"/>
                </scope>
            </method>
            <javadoc line="982">
                Whether not we are filtering/sorting.                
            </javadoc>
            <method name="isTransformed" type="boolean" line="985"/>
            <javadoc line="989">
                Insets new set of entries.                
                <param>
                    toAdd the Rows to add, sorted                    
                </param>
                <param>
                    current the array to insert the items into                    
                </param>
            </javadoc>
            <method name="insertInOrder" type="void" line="995">
                <params>
                    <param name="toAdd" type="List<Row>"/>
                    <param name="current" type="Row[]"/>
                </params>
                <declaration name="last" type="int" line="996"/>
                <declaration name="index" type="int" line="997"/>
                <declaration name="max" type="int" line="998"/>
                <scope line="999">
                    <scope line="1001"/>
                </scope>
            </method>
            <javadoc line="1013">
                Returns true if we should try and optimize the processing of the
                  &lt;code&gt;TableModelEvent&lt;/code&gt;.  If this returns false, assume the
                  event was dealt with and no further processing needs to happen.                
            </javadoc>
            <method name="shouldOptimizeChange" type="boolean" line="1018">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
                <comment line="1021">
                    Not transformed, nothing to do.                    
                </comment>
                <comment line="1025">
                    We either weren&apos;t sorted, or to much changed, sort it all                    
                </comment>
                <scope line="1019"/>
                <scope line="1023"/>
            </method>
            <method name="rowsInserted0" type="void" line="1031">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
                <comment line="1038">
                    Build the list of Rows to add into added                    
                </comment>
                <comment line="1045">
                    Adjust the model index of rows after the effected region                    
                </comment>
                <comment line="1054">
                    Insert newly added rows into viewToModel                    
                </comment>
                <comment line="1062">
                    Update modelToView                    
                </comment>
                <comment line="1066">
                    Notify of change                    
                </comment>
                <declaration name="oldViewToModel" type="int[]" line="1032"/>
                <declaration name="i" type="int" line="1033"/>
                <declaration name="delta" type="int" line="1034"/>
                <declaration name="added" type="List&lt;Row&gt;" line="1035"/>
                <scope line="1038">
                    <scope line="1039"/>
                </scope>
                <declaration name="viewIndex" type="int" line="1045"/>
                <scope line="1046">
                    <scope line="1048"/>
                </scope>
                <scope line="1054">
                    <declaration name="lastViewToModel" type="Row[]" line="1056"/>
                </scope>
            </method>
            <method name="rowsDeleted0" type="void" line="1069">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
                <comment line="1076">
                    Figure out how many visible rows are going to be effected.                    
                </comment>
                <comment line="1085">
                    Update the model index of rows after the effected region                    
                </comment>
                <comment line="1094">
                    Then patch up the viewToModel array                    
                </comment>
                <comment line="1113">
                    Update the modelToView mapping                    
                </comment>
                <comment line="1117">
                    And notify of change                    
                </comment>
                <declaration name="oldViewToModel" type="int[]" line="1070"/>
                <declaration name="removedFromView" type="int" line="1071"/>
                <declaration name="i" type="int" line="1072"/>
                <declaration name="viewIndex" type="int" line="1073"/>
                <scope line="1076">
                    <scope line="1078"/>
                </scope>
                <declaration name="delta" type="int" line="1085"/>
                <scope line="1086">
                    <scope line="1088"/>
                </scope>
                <scope line="1094">
                    <declaration name="newViewToModel" type="Row[]" line="1095"/>
                    <declaration name="newIndex" type="int" line="1097"/>
                    <declaration name="last" type="int" line="1098"/>
                    <scope line="1099">
                        <scope line="1100"/>
                    </scope>
                </scope>
            </method>
            <method name="rowsUpdated0" type="void" line="1120">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
                <comment line="1130">
                    Sorting only:                    
                </comment>
                <comment line="1132">
                    Remove the effected rows                    
                </comment>
                <comment line="1138">
                    Sort the update rows                    
                </comment>
                <comment line="1141">
                    Build the intermediary array: the array of
                     viewToModel without the effected rows.                    
                </comment>
                <comment line="1151">
                    Build the new viewToModel                    
                </comment>
                <comment line="1154">
                    Update modelToView                    
                </comment>
                <comment line="1158">
                    Sorting &amp; filtering.                    
                </comment>
                <comment line="1160">
                    Remove the effected rows, adding them to updated and setting
                     modelToView to -2 for any rows that were not filtered out                    
                </comment>
                <comment line="1168">
                    This row was filtered out                    
                </comment>
                <comment line="1170">
                    No longer filtered                    
                </comment>
                <comment line="1176">
                    This row was visible, make sure it should still be
                     visible.                    
                </comment>
                <comment line="1189">
                    Sort the updated rows                    
                </comment>
                <comment line="1192">
                    Build the intermediary array: the array of
                     viewToModel without the updated rows.                    
                </comment>
                <comment line="1202">
                    Recreate viewToModel, if necessary                    
                </comment>
                <comment line="1208">
                    Rebuild the new viewToModel array                    
                </comment>
                <comment line="1211">
                    Update modelToView                    
                </comment>
                <comment line="1214">
                    And finally fire a sort event.                    
                </comment>
                <declaration name="oldViewToModel" type="int[]" line="1121"/>
                <declaration name="i" type="int" line="1122"/>
                <declaration name="delta" type="int" line="1123"/>
                <declaration name="modelIndex" type="int" line="1124"/>
                <declaration name="last" type="int" line="1125"/>
                <declaration name="index" type="int" line="1126"/>
                <scope line="1128">
                    <declaration name="updated" type="Row[]" line="1132"/>
                    <scope line="1133"/>
                    <declaration name="intermediary" type="Row[]" line="1142"/>
                    <scope line="1143">
                        <scope line="1145"/>
                    </scope>
                </scope>
                <scope line="1156">
                    <declaration name="updated" type="List&lt;Row&gt;" line="1161"/>
                    <declaration name="newlyVisible" type="int" line="1162"/>
                    <declaration name="newlyHidden" type="int" line="1163"/>
                    <declaration name="effected" type="int" line="1164"/>
                    <scope line="1165">
                        <scope line="1166">
                            <scope line="1168"/>
                        </scope>
                        <scope line="1174">
                            <scope line="1177"/>
                            <scope line="1180"/>
                        </scope>
                    </scope>
                    <declaration name="intermediary" type="Row[]" line="1193"/>
                    <scope line="1194">
                        <scope line="1196"/>
                    </scope>
                    <scope line="1202"/>
                </scope>
            </method>
            <method name="checkColumn" type="void" line="1217">
                <params>
                    <param name="column" type="int"/>
                </params>
                <scope line="1218"/>
            </method>
            <class name="ModelWrapper" line="1225">
                <type_params>
                    <type_param name="M"/>
                    <type_param name="I"/>
                </type_params>
                <comment line="1366">
                    NOTE: this class is static so that it can be placed in an array                    
                </comment>
                <javadoc line="1225">
                    &lt;code&gt;DefaultRowSorter.ModelWrapper&lt;/code&gt; is responsible for providing
                      the data that gets sorted by &lt;code&gt;DefaultRowSorter&lt;/code&gt;.  You
                      normally do not interact directly with &lt;code&gt;ModelWrapper&lt;/code&gt;.
                      Subclasses of &lt;code&gt;DefaultRowSorter&lt;/code&gt; provide an
                      implementation of &lt;code&gt;ModelWrapper&lt;/code&gt; wrapping another model.
                      For example,
                      &lt;code&gt;TableRowSorter&lt;/code&gt; provides a &lt;code&gt;ModelWrapper&lt;/code&gt; that
                      wraps a &lt;code&gt;TableModel&lt;/code&gt;.
                      &lt;p&gt;
                      &lt;code&gt;ModelWrapper&lt;/code&gt; makes a distinction between values as
                      &lt;code&gt;Object&lt;/code&gt;s and &lt;code&gt;String&lt;/code&gt;s.  This allows
                      implementations to provide a custom string
                      converter to be used instead of invoking &lt;code&gt;toString&lt;/code&gt; on the
                      object.                    
                    <param>
                        &lt;M&gt;
                           the type of the underlying model                        
                    </param>
                    <param>
                        &lt;I&gt;
                           the identifier supplied to the filter                        
                    </param>
                    <since>
                        1.6                        
                    </since>
                    <see>
                        RowFilter                        
                    </see>
                    <see>
                        RowFilter.Entry                        
                    </see>
                </javadoc>
                <javadoc line="1248">
                    Creates a new &lt;code&gt;ModelWrapper&lt;/code&gt;.                    
                </javadoc>
                <method name="ModelWrapper" type="constructor" line="1251"/>
                <method name="getModel" type="M" line="1254"/>
                <javadoc line="1254">
                    Returns the underlying model that this &lt;code&gt;Model&lt;/code&gt; is
                      wrapping.                    
                    <return>
                        the underlying model                        
                    </return>
                </javadoc>
                <method name="getColumnCount" type="int" line="1262"/>
                <javadoc line="1262">
                    Returns the number of columns in the model.                    
                    <return>
                        the number of columns in the model                        
                    </return>
                </javadoc>
                <method name="getRowCount" type="int" line="1269"/>
                <javadoc line="1269">
                    Returns the number of rows in the model.                    
                    <return>
                        the number of rows in the model                        
                    </return>
                </javadoc>
                <method name="getValueAt" type="Object" line="1276"/>
                <javadoc line="1276">
                    Returns the value at the specified index.                    
                    <param>
                        row the row index                        
                    </param>
                    <param>
                        column the column index                        
                    </param>
                    <return>
                        the value at the specified index                        
                    </return>
                    <throws>
                        IndexOutOfBoundsException if the indices are outside
                          the range of the model                        
                    </throws>
                </javadoc>
                <javadoc line="1287">
                    Returns the value as a &lt;code&gt;String&lt;/code&gt; at the specified
                      index.  This implementation uses &lt;code&gt;toString&lt;/code&gt; on
                      the result from &lt;code&gt;getValueAt&lt;/code&gt; (making sure
                      to return an empty string for null values).  Subclasses that
                      override this method should never return null.                    
                    <param>
                        row the row index                        
                    </param>
                    <param>
                        column the column index                        
                    </param>
                    <return>
                        the value at the specified index as a &lt;code&gt;String&lt;/code&gt;                        
                    </return>
                    <throws>
                        IndexOutOfBoundsException if the indices are outside
                          the range of the model                        
                    </throws>
                </javadoc>
                <method name="getStringValueAt" type="String" line="1300">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                    <declaration name="o" type="Object" line="1301"/>
                    <scope line="1302"/>
                    <declaration name="string" type="String" line="1305"/>
                    <scope line="1306"/>
                </method>
                <method name="getIdentifier" type="I" line="1312"/>
                <javadoc line="1312">
                    Returns the identifier for the specified row.  The return value
                      of this is used as the identifier for the
                      &lt;code&gt;RowFilter.Entry&lt;/code&gt; that is passed to the
                      &lt;code&gt;RowFilter&lt;/code&gt;.                    
                    <param>
                        row the row to return the identifier for, in terms of
                          the underlying model                        
                    </param>
                    <return>
                        the identifier                        
                    </return>
                    <see>
                        RowFilter.Entry#getIdentifier                        
                    </see>
                </javadoc>
            </class>
            <class name="FilterEntry" line="1327">
                <extends class="RowFilter.Entry">
                    <type_params>
                        <type_param name="M"/>
                        <type_param name="I"/>
                    </type_params>
                </extends>
                <comment line="1366">
                    NOTE: this class is static so that it can be placed in an array                    
                </comment>
                <javadoc line="1327">
                    RowFilter.Entry implementation that delegates to the ModelWrapper.
                      getFilterEntry(int) creates the single instance of this that is
                      passed to the Filter.  Only call getFilterEntry(int) to get
                      the instance.                    
                </javadoc>
                <declaration name="modelIndex" type="int" line="1334"/>
                <javadoc line="1334">
                    The index into the model, set in getFilterEntry                    
                </javadoc>
                <method name="getModel" type="M" line="1339"/>
                <method name="getValueCount" type="int" line="1343"/>
                <method name="getValue" type="Object" line="1347">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="getStringValue" type="String" line="1351">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="getIdentifier" type="I" line="1355"/>
            </class>
            <class name="Row" line="1361">
                <comment line="1366">
                    NOTE: this class is static so that it can be placed in an array                    
                </comment>
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="Row"/>
                    </type_params>
                </implements>
                <javadoc line="1361">
                    Row is used to handle the actual sorting by way of Comparable.  It
                      will use the sortKeys to do the actual comparison.                    
                </javadoc>
                <declaration name="sorter" type="DefaultRowSorter" line="1367"/>
                <declaration name="modelIndex" type="int" line="1368"/>
                <method name="Row" type="constructor" line="1370">
                    <params>
                        <param name="sorter" type="DefaultRowSorter"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="1375">
                    <params>
                        <param name="o" type="Row"/>
                    </params>
                </method>
            </class>
        </class>
    </source>