<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.AWTKeyStroke"/>
        <import package="java.awt.event.KeyEvent"/>
        <class name="KeyStroke" line="30">
            <extends class="AWTKeyStroke"/>
            <javadoc line="30">
                A KeyStroke represents a key action on the keyboard, or equivalent input
                  device. KeyStrokes can correspond to only a press or release of a particular
                  key, just as KEY_PRESSED and KEY_RELEASED KeyEvents do; alternately, they
                  can correspond to typing a specific Java character, just as KEY_TYPED
                  KeyEvents do. In all cases, KeyStrokes can specify modifiers (alt, shift,
                  control, meta, altGraph, or a combination thereof) which must be present during the
                  action for an exact match.
                  &lt;p&gt;
                  KeyStrokes are used to define high-level (semantic) action events. Instead
                  of trapping every keystroke and throwing away the ones you are not
                  interested in, those keystrokes you care about automatically initiate
                  actions on the Components with which they are registered.
                  &lt;p&gt;
                  KeyStrokes are immutable, and are intended to be unique. Client code cannot
                  create a KeyStroke; a variant of &lt;code&gt;getKeyStroke&lt;/code&gt; must be used
                  instead. These factory methods allow the KeyStroke implementation to cache
                  and share instances efficiently.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.text.Keymap                    
                </see>
                <see>
                    #getKeyStroke                    
                </see>
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    David Mendenhall                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="66"/>
            <javadoc line="66">
                Serial Version ID.                
            </javadoc>
            <method name="KeyStroke" type="constructor" line="71"/>
            <method name="KeyStroke" type="constructor" line="74">
                <params>
                    <param name="keyChar" type="char"/>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
            </method>
            <javadoc line="78">
                Returns a shared instance of a &lt;code&gt;KeyStroke&lt;/code&gt;
                  that represents a &lt;code&gt;KEY_TYPED&lt;/code&gt; event for the
                  specified character.                
                <param>
                    keyChar the character value for a keyboard key                    
                </param>
                <return>
                    a KeyStroke object for that key                    
                </return>
            </javadoc>
            <method name="getKeyStroke" type="KeyStroke" line="86">
                <params>
                    <param name="keyChar" type="char"/>
                </params>
                <scope line="87"/>
            </method>
            <javadoc line="93">
                Returns an instance of a KeyStroke, specifying whether the key is
                  considered to be activated when it is pressed or released. Unlike all
                  other factory methods in this class, the instances returned by this
                  method are not necessarily cached or shared.                
                <param>
                    keyChar the character value for a keyboard key                    
                </param>
                <param>
                    onKeyRelease &lt;code&gt;true&lt;/code&gt; if this KeyStroke corresponds to a
                      key release; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </param>
                <return>
                    a KeyStroke object for that key                    
                </return>
                <deprecated>
                    use getKeyStroke(char)                    
                </deprecated>
            </javadoc>
            <method name="getKeyStroke" type="KeyStroke" line="106">
                <params>
                    <param name="keyChar" type="char"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
            </method>
            <javadoc line="110">
                Returns a shared instance of a {@code KeyStroke}that represents a {@code KEY_TYPED} event for the
                  specified Character object and a
                  set of modifiers. Note that the first parameter is of type Character
                  rather than char. This is to avoid inadvertent clashes with calls to
                  &lt;code&gt;getKeyStroke(int keyCode, int modifiers)&lt;/code&gt;.
                  The modifiers consist of any combination of following:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers listed below also can be used, but they are
                  mapped to _DOWN_ modifiers. &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyChar the Character object for a keyboard character                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <return>
                    an KeyStroke object for that key                    
                </return>
                <throws>
                    IllegalArgumentException if keyChar is null                    
                </throws>
                <see>
                    java.awt.event.InputEvent                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getKeyStroke" type="KeyStroke" line="147">
                <params>
                    <param name="keyChar" type="Character"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="148"/>
            </method>
            <javadoc line="154">
                Returns a shared instance of a KeyStroke, given a numeric key code and a
                  set of modifiers, specifying whether the key is activated when it is
                  pressed or released.
                  &lt;p&gt;
                  The &quot;virtual key&quot; constants defined in java.awt.event.KeyEvent can be
                  used to specify the key code. For example:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.KeyEvent.VK_ENTER
                  &lt;li&gt;java.awt.event.KeyEvent.VK_TAB
                  &lt;li&gt;java.awt.event.KeyEvent.VK_SPACE
                  &lt;/ul&gt;
                  Alternatively, the key code may be obtained by calling
                  &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;.
                  The modifiers consist of any combination of:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyCode an int specifying the numeric code for a keyboard key                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <param>
                    onKeyRelease &lt;code&gt;true&lt;/code&gt; if the KeyStroke should represent
                      a key release; &lt;code&gt;false&lt;/code&gt; otherwise.                    
                </param>
                <return>
                    a KeyStroke object for that key                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getKeyStroke" type="KeyStroke" line="198">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                    <param name="onKeyRelease" type="boolean"/>
                </params>
                <scope line="199"/>
            </method>
            <javadoc line="206">
                Returns a shared instance of a KeyStroke, given a numeric key code and a
                  set of modifiers. The returned KeyStroke will correspond to a key press.
                  &lt;p&gt;
                  The &quot;virtual key&quot; constants defined in java.awt.event.KeyEvent can be
                  used to specify the key code. For example:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.KeyEvent.VK_ENTER
                  &lt;li&gt;java.awt.event.KeyEvent.VK_TAB
                  &lt;li&gt;java.awt.event.KeyEvent.VK_SPACE
                  &lt;/ul&gt;
                  Alternatively, the key code may be obtained by calling
                  &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;.
                  The modifiers consist of any combination of:&lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_DOWN_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
                  &lt;/ul&gt;
                  The old modifiers &lt;ul&gt;
                  &lt;li&gt;java.awt.event.InputEvent.SHIFT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.CTRL_MASK
                  &lt;li&gt;java.awt.event.InputEvent.META_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_MASK
                  &lt;li&gt;java.awt.event.InputEvent.ALT_GRAPH_MASK
                  &lt;/ul&gt;
                  also can be used, but they are mapped to _DOWN_ modifiers.
                  Since these numbers are all different powers of two, any combination of
                  them is an integer in which each bit represents a different modifier
                  key. Use 0 to specify no modifiers.                
                <param>
                    keyCode an int specifying the numeric code for a keyboard key                    
                </param>
                <param>
                    modifiers a bitwise-ored combination of any modifiers                    
                </param>
                <return>
                    a KeyStroke object for that key                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    java.awt.event.InputEvent                    
                </see>
            </javadoc>
            <method name="getKeyStroke" type="KeyStroke" line="246">
                <params>
                    <param name="keyCode" type="int"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="247"/>
            </method>
            <javadoc line="253">
                Returns a KeyStroke which represents the stroke which generated a given
                  KeyEvent.
                  &lt;p&gt;
                  This method obtains the keyChar from a KeyTyped event, and the keyCode
                  from a KeyPressed or KeyReleased event. The KeyEvent modifiers are
                  obtained for all three types of KeyEvent.                
                <param>
                    anEvent the KeyEvent from which to obtain the KeyStroke                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;anEvent&lt;/code&gt; is null                    
                </throws>
                <return>
                    the KeyStroke that precipitated the event                    
                </return>
            </javadoc>
            <method name="getKeyStrokeForEvent" type="KeyStroke" line="265">
                <params>
                    <param name="anEvent" type="KeyEvent"/>
                </params>
                <scope line="266"/>
            </method>
            <javadoc line="272">
                Parses a string and returns a &lt;code&gt;KeyStroke&lt;/code&gt;.
                  The string must have the following syntax:
                  &lt;pre&gt;
                  &amp;lt;modifiers&amp;gt; (&amp;lt;typedID&amp;gt; | &amp;lt;pressedReleasedID&amp;gt;)
                  modifiers := shift | control | ctrl | meta | alt | altGraph
                  typedID := typed &amp;lt;typedKey&amp;gt;
                  typedKey := string of length 1 giving Unicode character.
                  pressedReleasedID := (pressed | released) key
                  key := KeyEvent key code name, i.e. the name following &quot;VK_&quot;.
                  &lt;/pre&gt;
                  If typed, pressed or released is not specified, pressed is assumed. Here
                  are some examples:
                  &lt;pre&gt;
                  &quot;INSERT&quot; =&gt; getKeyStroke(KeyEvent.VK_INSERT, 0);
                  &quot;control DELETE&quot; =&gt; getKeyStroke(KeyEvent.VK_DELETE, InputEvent.CTRL_MASK);
                  &quot;alt shift X&quot; =&gt; getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK);
                  &quot;alt shift released X&quot; =&gt; getKeyStroke(KeyEvent.VK_X, InputEvent.ALT_MASK | InputEvent.SHIFT_MASK, true);
                  &quot;typed a&quot; =&gt; getKeyStroke(&apos;a&apos;);
                  &lt;/pre&gt;
                  In order to maintain backward-compatibility, specifying a null String,
                  or a String which is formatted incorrectly, returns null.                
                <param>
                    s a String formatted as described above                    
                </param>
                <return>
                    a KeyStroke object for that String, or null if the specified
                      String is null, or is formatted incorrectly                    
                </return>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
            </javadoc>
            <method name="getKeyStroke" type="KeyStroke" line="303">
                <params>
                    <param name="s" type="String"/>
                </params>
                <scope line="304"/>
                <scope line="307">
                    <scope line="309"/>
                    <scope line="311"/>
                </scope>
            </method>
        </class>
    </source>