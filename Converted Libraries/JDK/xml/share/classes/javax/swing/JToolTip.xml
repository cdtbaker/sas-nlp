<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JToolTip" line="7">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="7">
                Used to display a &quot;Tip&quot; for a Component. Typically components provide api
                  to automate the process of using &lt;code&gt;ToolTip&lt;/code&gt;s.
                  For example, any Swing component can use the &lt;code&gt;JComponent&lt;/code&gt;
                  &lt;code&gt;setToolTipText&lt;/code&gt; method to specify the text
                  for a standard tooltip. A component that wants to create a custom
                  &lt;code&gt;ToolTip&lt;/code&gt;
                  display can override &lt;code&gt;JComponent&lt;/code&gt;&apos;s &lt;code&gt;createToolTip&lt;/code&gt;
                  method and use a subclass of this class.
                  &lt;p&gt;
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tooltip.html&quot;&gt;How to Use Tool Tips&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;
                  for further documentation.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JComponent#setToolTipText                    
                </see>
                <see>
                    JComponent#createToolTip                    
                </see>
                <author>
                    Dave Moore                    
                </author>
                <author>
                    Rich Shiavi                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="40"/>
            <javadoc line="40">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="tipText" type="String" line="45"/>
            <declaration name="component" type="JComponent" line="46"/>
            <javadoc line="47">
                Creates a tool tip.                
            </javadoc>
            <method name="JToolTip" type="constructor" line="50"/>
            <javadoc line="54">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the <code>ToolTipUI</code> object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="ToolTipUI" line="58"/>
            <javadoc line="61">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="65"/>
            <javadoc line="68">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "ToolTipUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="74"/>
            <javadoc line="77">
                Sets the text to show when the tool tip is displayed.
                  The string &lt;code&gt;tipText&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    tipText the <code>String</code> to display                    
                </param>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: Sets the text of the tooltip                    
                </beaninfopreferred>
            </javadoc>
            <method name="setTipText" type="void" line="85">
                <params>
                    <param name="tipText" type="String"/>
                </params>
                <declaration name="oldValue" type="String" line="86"/>
            </method>
            <javadoc line="90">
                Returns the text that is shown when the tool tip is displayed.
                  The returned value may be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>String</code> that is displayed                    
                </return>
            </javadoc>
            <method name="getTipText" type="String" line="95"/>
            <javadoc line="98">
                Specifies the component that the tooltip describes.
                  The component &lt;code&gt;c&lt;/code&gt; may be &lt;code&gt;null&lt;/code&gt;
                  and will have no effect.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    c the <code>JComponent</code> being described                    
                </param>
                <see>
                    JComponent#createToolTip                    
                </see>
                <beaninfobound>
                    : true
                      description: Sets the component that the tooltip describes.                    
                </beaninfobound>
            </javadoc>
            <method name="setComponent" type="void" line="109">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="oldValue" type="JComponent" line="110"/>
            </method>
            <javadoc line="114">
                Returns the component the tooltip applies to.
                  The returned value may be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the component that the tooltip describes                    
                </return>
                <see>
                    JComponent#createToolTip                    
                </see>
            </javadoc>
            <method name="getComponent" type="JComponent" line="120"/>
            <javadoc line="123">
                Always returns true since tooltips, by definition,
                  should always be on top of all other windows.                
            </javadoc>
            <method name="alwaysOnTop" type="boolean" line="127"/>
            <javadoc line="130">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt;
                  in &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="135">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="137">
                    <declaration name="count" type="byte" line="138"/>
                    <scope line="140"/>
                </scope>
            </method>
            <javadoc line="145">
                Returns a string representation of this &lt;code&gt;JToolTip&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JToolTip</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="154">
                <declaration name="tipTextString" type="String" line="155"/>
            </method>
            <javadoc line="158">
                Gets the AccessibleContext associated with this JToolTip.
                  For tool tips, the AccessibleContext takes the form of an
                  AccessibleJToolTip.
                  A new AccessibleJToolTip instance is created if necessary.                
                <return>
                    an AccessibleJToolTip that serves as the
                      AccessibleContext of this JToolTip                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="166">
                <scope line="167"/>
            </method>
            <class name="AccessibleJToolTip" line="172">
                <extends class="AccessibleJComponent"/>
                <javadoc line="172">
                    This class implements accessibility support for the
                      &lt;code&gt;JToolTip&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to tool tip user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="187">
                    Get the accessible description of this object.                    
                    <return>
                        a localized String describing this object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleDescription" type="String" line="191">
                    <declaration name="description" type="String" line="192"/>
                    <scope line="193"/>
                    <scope line="196"/>
                </method>
                <javadoc line="201">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="206"/>
            </class>
        </class>
    </source>