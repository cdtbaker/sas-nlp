<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JPanel" line="9">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="9">
                &lt;code&gt;JPanel&lt;/code&gt; is a generic lightweight container.
                  For examples and task-oriented documentation for JPanel, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/panel.html&quot;&gt;How to Use Panels&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfodescription>
                    : A generic lightweight container.                    
                </beaninfodescription>
                <author>
                    Arnaud Weber                    
                </author>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="34"/>
            <javadoc line="34">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <javadoc line="39">
                Creates a new JPanel with the specified layout manager and buffering
                  strategy.                
                <param>
                    layout  the LayoutManager to use                    
                </param>
                <param>
                    isDoubleBuffered  a boolean, true for double-buffering, which
                      uses additional memory space to achieve fast, flicker-free
                      updates                    
                </param>
            </javadoc>
            <method name="JPanel" type="constructor" line="47">
                <params>
                    <param name="layout" type="LayoutManager"/>
                    <param name="isDoubleBuffered" type="boolean"/>
                </params>
            </method>
            <javadoc line="53">
                Create a new buffered JPanel with the specified layout manager                
                <param>
                    layout  the LayoutManager to use                    
                </param>
            </javadoc>
            <method name="JPanel" type="constructor" line="57">
                <params>
                    <param name="layout" type="LayoutManager"/>
                </params>
            </method>
            <javadoc line="60">
                Creates a new &lt;code&gt;JPanel&lt;/code&gt; with &lt;code&gt;FlowLayout&lt;/code&gt;
                  and the specified buffering strategy.
                  If &lt;code&gt;isDoubleBuffered&lt;/code&gt; is true, the &lt;code&gt;JPanel&lt;/code&gt;
                  will use a double buffer.                
                <param>
                    isDoubleBuffered  a boolean, true for double-buffering, which
                      uses additional memory space to achieve fast, flicker-free
                      updates                    
                </param>
            </javadoc>
            <method name="JPanel" type="constructor" line="69">
                <params>
                    <param name="isDoubleBuffered" type="boolean"/>
                </params>
            </method>
            <javadoc line="72">
                Creates a new &lt;code&gt;JPanel&lt;/code&gt; with a double buffer
                  and a flow layout.                
            </javadoc>
            <method name="JPanel" type="constructor" line="76"/>
            <javadoc line="79">
                Resets the UI property with a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="83"/>
            <javadoc line="86">
                Returns the look and feel (L&amp;F) object that renders this component.                
                <return>
                    the PanelUI object that renders this component                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getUI" type="PanelUI" line="91"/>
            <javadoc line="94">
                Sets the look and feel (L&amp;F) object that renders this component.                
                <param>
                    ui  the PanelUI L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="104">
                <params>
                    <param name="ui" type="PanelUI"/>
                </params>
            </method>
            <javadoc line="107">
                Returns a string that specifies the name of the L&amp;F class
                  that renders this component.                
                <return>
                    &quot;PanelUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfoexpert>
                    : true
                      description: A string that specifies the name of the L&amp;F class.                    
                </beaninfoexpert>
            </javadoc>
            <method name="getUIClassID" type="String" line="116"/>
            <javadoc line="119">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="123">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="125">
                    <declaration name="count" type="byte" line="126"/>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="133">
                Returns a string representation of this JPanel. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JPanel.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="141"/>
            <javadoc line="144">
                Gets the AccessibleContext associated with this JPanel.
                  For JPanels, the AccessibleContext takes the form of an
                  AccessibleJPanel.
                  A new AccessibleJPanel instance is created if necessary.                
                <return>
                    an AccessibleJPanel that serves as the
                      AccessibleContext of this JPanel                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="152">
                <scope line="153"/>
            </method>
            <class name="AccessibleJPanel" line="158">
                <extends class="AccessibleJComponent"/>
                <javadoc line="158">
                    This class implements accessibility support for the
                      &lt;code&gt;JPanel&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to panel user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="174">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="179"/>
            </class>
        </class>
    </source>