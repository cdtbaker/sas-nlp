<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.io.Serializable"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Adjustable"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.event.AdjustmentListener"/>
        <import package="java.awt.event.AdjustmentEvent"/>
        <import package="java.awt.Graphics"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JScrollBar" line="15">
            <extends class="JComponent"/>
            <implements interface="Adjustable"/>
            <implements interface="Accessible"/>
            <javadoc line="15">
                An implementation of a scrollbar. The user positions the knob in the
                  scrollbar to determine the contents of the viewing area. The
                  program typically adjusts the display so that the end of the
                  scrollbar represents the end of the displayable contents, or 100%
                  of the contents. The start of the scrollbar is the beginning of the
                  displayable contents, or 0%. The position of the knob within
                  those bounds then translates to the corresponding percentage of
                  the displayable contents.
                  &lt;p&gt;
                  Typically, as the position of the knob in the scrollbar changes
                  a corresponding change is made to the position of the JViewport on
                  the underlying view, changing the contents of the JViewport.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JScrollPane                    
                </see>
                <beaninfoattribute>
                    : isContainer false
                      description: A component that helps determine the visible content range of an area.                    
                </beaninfoattribute>
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="48"/>
            <javadoc line="48">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="fwdAdjustmentEvents" type="ChangeListener" line="53"/>
            <javadoc line="53">
                All changes from the model are treated as though the user moved
                  the scrollbar knob.                
            </javadoc>
            <declaration name="model" type="BoundedRangeModel" line="58"/>
            <javadoc line="58">
                The model that represents the scrollbar&apos;s minimum, maximum, extent
                  (aka &quot;visibleAmount&quot;) and current value.                
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <declaration name="orientation" type="int" line="64"/>
            <javadoc line="64">
                @see #setOrientation                
            </javadoc>
            <declaration name="unitIncrement" type="int" line="68"/>
            <javadoc line="68">
                @see #setUnitIncrement                
            </javadoc>
            <declaration name="blockIncrement" type="int" line="72"/>
            <javadoc line="72">
                @see #setBlockIncrement                
            </javadoc>
            <method name="checkOrientation" type="void" line="76">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="85">
                Creates a scrollbar with the specified orientation,
                  value, extent, minimum, and maximum.
                  The &quot;extent&quot; is the size of the viewable area. It is also known
                  as the &quot;visible amount&quot;.
                  &lt;p&gt;
                  Note: Use &lt;code&gt;setBlockIncrement&lt;/code&gt; to set the block
                  increment to a size slightly smaller than the view&apos;s extent.
                  That way, when the user jumps the knob to an adjacent position,
                  one or two lines of the original contents remain in view.                
                <exception>
                    IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL                    
                </exception>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    #setVisibleAmount                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <method name="JScrollBar" type="constructor" line="102">
                <params>
                    <param name="orientation" type="int"/>
                    <param name="value" type="int"/>
                    <param name="extent" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="112">
                Creates a scrollbar with the specified orientation
                  and the following initial values:
                  &lt;pre&gt;
                  minimum = 0
                  maximum = 100
                  value = 0
                  extent = 10
                  &lt;/pre&gt;                
            </javadoc>
            <method name="JScrollBar" type="constructor" line="122">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="125">
                Creates a vertical scrollbar with the following initial values:
                  &lt;pre&gt;
                  minimum = 0
                  maximum = 100
                  value = 0
                  extent = 10
                  &lt;/pre&gt;                
            </javadoc>
            <method name="JScrollBar" type="constructor" line="134"/>
            <javadoc line="137">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the &lt;code&gt;ScrollBarUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="147">
                <params>
                    <param name="ui" type="ScrollBarUI"/>
                </params>
            </method>
            <javadoc line="150">
                Returns the delegate that implements the look and feel for
                  this component.                
                <see>
                    JComponent#setUI                    
                </see>
            </javadoc>
            <method name="getUI" type="ScrollBarUI" line="155"/>
            <javadoc line="158">
                Overrides &lt;code&gt;JComponent.updateUI&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="162"/>
            <javadoc line="165">
                Returns the name of the LookAndFeel class for this component.                
                <return>
                    &quot;ScrollBarUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="171"/>
            <javadoc line="174">
                Returns the component&apos;s orientation (horizontal or vertical).                
                <return>
                    VERTICAL or HORIZONTAL                    
                </return>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    java.awt.Adjustable#getOrientation                    
                </see>
            </javadoc>
            <method name="getOrientation" type="int" line="180"/>
            <javadoc line="183">
                Set the scrollbar&apos;s orientation to either VERTICAL or
                  HORIZONTAL.                
                <exception>
                    IllegalArgumentException if orientation is not one of VERTICAL, HORIZONTAL                    
                </exception>
                <see>
                    #getOrientation                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      attribute: visualUpdate true
                      description: The scrollbar&apos;s orientation.
                      enum: VERTICAL JScrollBar.VERTICAL
                      HORIZONTAL JScrollBar.HORIZONTAL                    
                </beaninfopreferred>
            </javadoc>
            <method name="setOrientation" type="void" line="195">
                <params>
                    <param name="orientation" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="197"/>
                <scope line="200"/>
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Returns data model that handles the scrollbar&apos;s four
                  fundamental properties: minimum, maximum, value, extent.                
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="getModel" type="BoundedRangeModel" line="212"/>
            <javadoc line="215">
                Sets the model that handles the scrollbar&apos;s four
                  fundamental properties: minimum, maximum, value, extent.                
                <see>
                    #getModel                    
                </see>
                <beaninfobound>
                    : true
                      expert: true
                      description: The scrollbar&apos;s BoundedRangeModel.                    
                </beaninfobound>
            </javadoc>
            <method name="setModel" type="void" line="223">
                <params>
                    <param name="newModel" type="BoundedRangeModel"/>
                </params>
                <declaration name="oldValue" type="Integer" line="224"/>
                <declaration name="oldModel" type="BoundedRangeModel" line="225"/>
                <scope line="226"/>
                <scope line="231"/>
                <scope line="235"/>
            </method>
            <javadoc line="239">
                Returns the amount to change the scrollbar&apos;s value by,
                  given a unit up/down request.  A ScrollBarUI implementation
                  typically calls this method when the user clicks on a scrollbar
                  up/down arrow and uses the result to update the scrollbar&apos;s
                  value.   Subclasses my override this method to compute
                  a value, e.g. the change required to scroll up or down one
                  (variable height) line text or one row in a table.
                  &lt;p&gt;
                  The JScrollPane component creates scrollbars (by default)
                  that override this method and delegate to the viewports
                  Scrollable view, if it has one.  The Scrollable interface
                  provides a more specialized version of this method.                
                <param>
                    direction is -1 or 1 for up/down respectively                    
                </param>
                <return>
                    the value of the unitIncrement property                    
                </return>
                <see>
                    #setUnitIncrement                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    Scrollable#getScrollableUnitIncrement                    
                </see>
            </javadoc>
            <method name="getUnitIncrement" type="int" line="258">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="261">
                Sets the unitIncrement property.
                  &lt;p&gt;
                  Note, that if the argument is equal to the value of Integer.MIN_VALUE,
                  the most look and feels will not provide the scrolling to the right/down.                
                <see>
                    #getUnitIncrement                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The scrollbar&apos;s unit increment.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setUnitIncrement" type="void" line="271">
                <params>
                    <param name="unitIncrement" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="272"/>
            </method>
            <javadoc line="276">
                Returns the amount to change the scrollbar&apos;s value by,
                  given a block (usually &quot;page&quot;) up/down request.  A ScrollBarUI
                  implementation typically calls this method when the user clicks
                  above or below the scrollbar &quot;knob&quot; to change the value
                  up or down by large amount.  Subclasses my override this
                  method to compute a value, e.g. the change required to scroll
                  up or down one paragraph in a text document.
                  &lt;p&gt;
                  The JScrollPane component creates scrollbars (by default)
                  that override this method and delegate to the viewports
                  Scrollable view, if it has one.  The Scrollable interface
                  provides a more specialized version of this method.                
                <param>
                    direction is -1 or 1 for up/down respectively                    
                </param>
                <return>
                    the value of the blockIncrement property                    
                </return>
                <see>
                    #setBlockIncrement                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    Scrollable#getScrollableBlockIncrement                    
                </see>
            </javadoc>
            <method name="getBlockIncrement" type="int" line="295">
                <params>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="298">
                Sets the blockIncrement property.
                  &lt;p&gt;
                  Note, that if the argument is equal to the value of Integer.MIN_VALUE,
                  the most look and feels will not provide the scrolling to the right/down.                
                <see>
                    #getBlockIncrement()                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The scrollbar&apos;s block increment.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setBlockIncrement" type="void" line="308">
                <params>
                    <param name="blockIncrement" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="309"/>
            </method>
            <javadoc line="313">
                For backwards compatibility with java.awt.Scrollbar.                
                <see>
                    Adjustable#getUnitIncrement                    
                </see>
                <see>
                    #getUnitIncrement(int)                    
                </see>
            </javadoc>
            <method name="getUnitIncrement" type="int" line="318"/>
            <javadoc line="321">
                For backwards compatibility with java.awt.Scrollbar.                
                <see>
                    Adjustable#getBlockIncrement                    
                </see>
                <see>
                    #getBlockIncrement(int)                    
                </see>
            </javadoc>
            <method name="getBlockIncrement" type="int" line="326"/>
            <javadoc line="329">
                Returns the scrollbar&apos;s value.                
                <return>
                    the model&apos;s value property                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="334"/>
            <javadoc line="337">
                Sets the scrollbar&apos;s value.  This method just forwards the value
                  to the model.                
                <see>
                    #getValue                    
                </see>
                <see>
                    BoundedRangeModel#setValue                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The scrollbar&apos;s current value.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setValue" type="void" line="345">
                <params>
                    <param name="value" type="int"/>
                </params>
                <declaration name="m" type="BoundedRangeModel" line="346"/>
                <declaration name="oldValue" type="int" line="347"/>
                <scope line="349"/>
            </method>
            <javadoc line="353">
                Returns the scrollbar&apos;s extent, aka its &quot;visibleAmount&quot;.  In many
                  scrollbar look and feel implementations the size of the
                  scrollbar &quot;knob&quot; or &quot;thumb&quot; is proportional to the extent.                
                <return>
                    the value of the model&apos;s extent property                    
                </return>
                <see>
                    #setVisibleAmount                    
                </see>
            </javadoc>
            <method name="getVisibleAmount" type="int" line="360"/>
            <javadoc line="363">
                Set the model&apos;s extent property.                
                <see>
                    #getVisibleAmount                    
                </see>
                <see>
                    BoundedRangeModel#setExtent                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The amount of the view that is currently visible.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setVisibleAmount" type="void" line="370">
                <params>
                    <param name="extent" type="int"/>
                </params>
            </method>
            <javadoc line="373">
                Returns the minimum value supported by the scrollbar
                  (usually zero).                
                <return>
                    the value of the model&apos;s minimum property                    
                </return>
                <see>
                    #setMinimum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="379"/>
            <javadoc line="382">
                Sets the model&apos;s minimum property.                
                <see>
                    #getMinimum                    
                </see>
                <see>
                    BoundedRangeModel#setMinimum                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The scrollbar&apos;s minimum value.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setMinimum" type="void" line="389">
                <params>
                    <param name="minimum" type="int"/>
                </params>
            </method>
            <javadoc line="392">
                The maximum value of the scrollbar is maximum - extent.                
                <return>
                    the value of the model&apos;s maximum property                    
                </return>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="397"/>
            <javadoc line="400">
                Sets the model&apos;s maximum property.  Note that the scrollbar&apos;s value
                  can only be set to maximum - extent.                
                <see>
                    #getMaximum                    
                </see>
                <see>
                    BoundedRangeModel#setMaximum                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The scrollbar&apos;s maximum value.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setMaximum" type="void" line="408">
                <params>
                    <param name="maximum" type="int"/>
                </params>
            </method>
            <javadoc line="411">
                True if the scrollbar knob is being dragged.                
                <return>
                    the value of the model&apos;s valueIsAdjusting property                    
                </return>
                <see>
                    #setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="416"/>
            <javadoc line="419">
                Sets the model&apos;s valueIsAdjusting property.  Scrollbar look and
                  feel implementations should set this property to true when
                  a knob drag begins, and to false when the drag ends.  The
                  scrollbar model will not generate ChangeEvents while
                  valueIsAdjusting is true.                
                <see>
                    #getValueIsAdjusting                    
                </see>
                <see>
                    BoundedRangeModel#setValueIsAdjusting                    
                </see>
                <beaninfoexpert>
                    : true
                      description: True if the scrollbar thumb is being dragged.                    
                </beaninfoexpert>
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="430">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="m" type="BoundedRangeModel" line="431"/>
                <declaration name="oldValue" type="boolean" line="432"/>
                <scope line="434"/>
            </method>
            <javadoc line="438">
                Sets the four BoundedRangeModel properties after forcing
                  the arguments to obey the usual constraints:
                  &lt;pre&gt;
                  minimum &lt;= value &lt;= value+extent &lt;= maximum
                  &lt;/pre&gt;
                  &lt;p&gt;                
                <see>
                    BoundedRangeModel#setRangeProperties                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    #setVisibleAmount                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <method name="setValues" type="void" line="451">
                <params>
                    <param name="newValue" type="int"/>
                    <param name="newExtent" type="int"/>
                    <param name="newMin" type="int"/>
                    <param name="newMax" type="int"/>
                </params>
                <declaration name="m" type="BoundedRangeModel" line="452"/>
                <declaration name="oldValue" type="int" line="453"/>
                <scope line="455"/>
            </method>
            <javadoc line="459">
                Adds an AdjustmentListener.  Adjustment listeners are notified
                  each time the scrollbar&apos;s model changes.  Adjustment events are
                  provided for backwards compatibility with java.awt.Scrollbar.
                  &lt;p&gt;
                  Note that the AdjustmentEvents type property will always have a
                  placeholder value of AdjustmentEvent.TRACK because all changes
                  to a BoundedRangeModels value are considered equivalent.  To change
                  the value of a BoundedRangeModel one just sets its value property,
                  i.e. model.setValue(123).  No information about the origin of the
                  change, e.g. it&apos;s a block decrement, is provided.  We don&apos;t try
                  fabricate the origin of the change here.                
                <param>
                    l the AdjustmentLister to add                    
                </param>
                <see>
                    #removeAdjustmentListener                    
                </see>
                <see>
                    BoundedRangeModel#addChangeListener                    
                </see>
            </javadoc>
            <method name="addAdjustmentListener" type="void" line="475">
                <params>
                    <param name="l" type="AdjustmentListener"/>
                </params>
            </method>
            <javadoc line="478">
                Removes an AdjustmentEvent listener.                
                <param>
                    l the AdjustmentLister to remove                    
                </param>
                <see>
                    #addAdjustmentListener                    
                </see>
            </javadoc>
            <method name="removeAdjustmentListener" type="void" line="483">
                <params>
                    <param name="l" type="AdjustmentListener"/>
                </params>
            </method>
            <javadoc line="486">
                Returns an array of all the &lt;code&gt;AdjustmentListener&lt;/code&gt;s added
                  to this JScrollBar with addAdjustmentListener().                
                <return>
                    all of the &lt;code&gt;AdjustmentListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getAdjustmentListeners" type="AdjustmentListener[]" line="493"/>
            <javadoc line="496">
                Notify listeners that the scrollbar&apos;s model has changed.                
                <see>
                    #addAdjustmentListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireAdjustmentValueChanged" type="void" line="501">
                <params>
                    <param name="id" type="int"/>
                    <param name="type" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="504">
                Notify listeners that the scrollbar&apos;s model has changed.                
                <see>
                    #addAdjustmentListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireAdjustmentValueChanged" type="void" line="509">
                <params>
                    <param name="id" type="int"/>
                    <param name="type" type="int"/>
                    <param name="value" type="int"/>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <declaration name="listeners" type="Object[]" line="510"/>
                <declaration name="e" type="AdjustmentEvent" line="511"/>
                <scope line="512">
                    <scope line="513">
                        <scope line="514"/>
                    </scope>
                </scope>
            </method>
            <class name="ModelListener" line="521">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <javadoc line="521">
                    This class listens to ChangeEvents on the model and forwards
                      AdjustmentEvents for the sake of backwards compatibility.
                      Unfortunately there&apos;s no way to determine the proper
                      type of the AdjustmentEvent as all updates to the model&apos;s
                      value are considered equivalent.                    
                </javadoc>
                <method name="stateChanged" type="void" line="529">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="obj" type="Object" line="530"/>
                    <scope line="531">
                        <declaration name="id" type="int" line="532"/>
                        <declaration name="type" type="int" line="533"/>
                        <declaration name="model" type="BoundedRangeModel" line="534"/>
                        <declaration name="value" type="int" line="535"/>
                        <declaration name="isAdjusting" type="boolean" line="536"/>
                    </scope>
                </method>
            </class>
            <javadoc line="541">
                The scrollbar is flexible along it&apos;s scrolling axis and
                  rigid along the other axis.                
            </javadoc>
            <method name="getMinimumSize" type="Dimension" line="545">
                <declaration name="pref" type="Dimension" line="546"/>
                <scope line="547"/>
                <scope line="550"/>
            </method>
            <javadoc line="554">
                The scrollbar is flexible along it&apos;s scrolling axis and
                  rigid along the other axis.                
            </javadoc>
            <method name="getMaximumSize" type="Dimension" line="558">
                <declaration name="pref" type="Dimension" line="559"/>
                <scope line="560"/>
                <scope line="563"/>
            </method>
            <javadoc line="567">
                Enables the component so that the knob position can be changed.
                  When the disabled, the knob position cannot be changed.                
                <param>
                    x a boolean value, where true enables the component and
                      false disables it                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="573">
                <params>
                    <param name="x" type="boolean"/>
                </params>
                <declaration name="children" type="Component[]" line="575"/>
                <scope line="576"/>
            </method>
            <javadoc line="580">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="584">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="586">
                    <declaration name="count" type="byte" line="587"/>
                    <scope line="589"/>
                </scope>
            </method>
            <javadoc line="594">
                Returns a string representation of this JScrollBar. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JScrollBar.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="602">
                <declaration name="orientationString" type="String" line="603"/>
            </method>
            <javadoc line="606">
                Gets the AccessibleContext associated with this JScrollBar.
                  For JScrollBar, the AccessibleContext takes the form of an
                  AccessibleJScrollBar.
                  A new AccessibleJScrollBar instance is created if necessary.                
                <return>
                    an AccessibleJScrollBar that serves as the
                      AccessibleContext of this JScrollBar                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="614">
                <scope line="615"/>
            </method>
            <class name="AccessibleJScrollBar" line="620">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="620">
                    This class implements accessibility support for the
                      &lt;code&gt;JScrollBar&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to scroll bar user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="636">
                    Get the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="642">
                    <declaration name="states" type="AccessibleStateSet" line="643"/>
                    <scope line="644"/>
                    <scope line="647"/>
                    <scope line="650"/>
                </method>
                <javadoc line="655">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="660"/>
                <javadoc line="663">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="670"/>
                <javadoc line="673">
                    Get the accessible value of this object.                    
                    <return>
                        The current value of this object.                        
                    </return>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="677"/>
                <javadoc line="680">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="684">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <scope line="685"/>
                </method>
                <javadoc line="691">
                    Get the minimum accessible value of this object.                    
                    <return>
                        The minimum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="695"/>
                <javadoc line="698">
                    Get the maximum accessible value of this object.                    
                    <return>
                        The maximum value of this object.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="702"/>
            </class>
        </class>
    </source>