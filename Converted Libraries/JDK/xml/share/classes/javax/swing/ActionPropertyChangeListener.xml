<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.lang.ref.ReferenceQueue"/>
        <class name="ActionPropertyChangeListener" line="33">
            <type_params>
                <type_param name="T"/>
            </type_params>
            <comment line="58">
                WeakReference&apos;s aren&apos;t serializable.                
            </comment>
            <comment line="60">
                The Component&apos;s that reference an Action do so through a strong
                 reference, so that there is no need to check for serialized.                
            </comment>
            <implements interface="PropertyChangeListener"/>
            <implements interface="Serializable"/>
            <javadoc line="33">
                A package-private PropertyChangeListener which listens for
                  property changes on an Action and updates the properties
                  of an ActionEvent source.
                  &lt;p&gt;
                  Subclasses must override the actionPropertyChanged method,
                  which is invoked from the propertyChange method as long as
                  the target is still valid.
                  &lt;/p&gt;
                  &lt;p&gt;
                  WARNING WARNING WARNING WARNING WARNING WARNING:&lt;br&gt;
                  Do NOT create an annonymous inner class that extends this!  If you do
                  a strong reference will be held to the containing class, which in most
                  cases defeats the purpose of this class.                
                <param>
                    T the type of JComponent the underlying Action is attached to                    
                </param>
                <author>
                    Georges Saab                    
                </author>
                <see>
                    AbstractButton                    
                </see>
            </javadoc>
            <declaration name="queue" type="ReferenceQueue&lt;JComponent&gt;" line="55"/>
            <declaration name="target" type="OwnedWeakReference&lt;T&gt;" line="58"/>
            <declaration name="action" type="Action" line="61"/>
            <method name="getQueue" type="ReferenceQueue<JComponent>" line="63">
                <scope line="64">
                    <scope line="65"/>
                </scope>
            </method>
            <method name="ActionPropertyChangeListener" type="constructor" line="72">
                <params>
                    <param name="c" type="T"/>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="78">
                PropertyChangeListener method.  If the target has been gc&apos;ed this
                  will remove the &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the Action,
                  otherwise this will invoke actionPropertyChanged.                
            </javadoc>
            <method name="propertyChange" type="void" line="83">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <declaration name="target" type="T" line="84"/>
                <scope line="85"/>
                <scope line="87"/>
            </method>
            <method name="actionPropertyChanged" type="void" line="92"/>
            <javadoc line="92">
                Invoked when a property changes on the Action and the target
                  still exists.                
            </javadoc>
            <method name="setTarget" type="void" line="99">
                <params>
                    <param name="c" type="T"/>
                </params>
                <comment line="102">
                    Check to see whether any old buttons have
                     been enqueued for GC.  If so, look up their
                     PCL instance and remove it from its Action.                    
                </comment>
                <declaration name="queue" type="ReferenceQueue&lt;JComponent&gt;" line="100"/>
                <declaration name="r" type="OwnedWeakReference" line="104"/>
                <scope line="105">
                    <declaration name="oldPCL" type="ActionPropertyChangeListener" line="106"/>
                    <declaration name="oldAction" type="Action" line="107"/>
                    <scope line="108"/>
                </scope>
            </method>
            <method name="getTarget" type="T" line="115">
                <comment line="118">
                    Will only happen if serialized and real target was null                    
                </comment>
                <scope line="116"/>
            </method>
            <method name="getAction" type="Action" line="123"/>
            <method name="writeObject" type="void" line="127">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="134">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="target" type="T" line="136"/>
                <scope line="137"/>
            </method>
            <class name="OwnedWeakReference" line="143">
                <type_params>
                    <type_param name="U"/>
                </type_params>
                <extends class="WeakReference">
                    <type_params>
                        <type_param name="U"/>
                    </type_params>
                </extends>
                <declaration name="owner" type="ActionPropertyChangeListener" line="145"/>
                <method name="OwnedWeakReference" type="constructor" line="148">
                    <params>
                        <param name="target" type="U"/>
                        <param name="queue" type="ReferenceQueue<? super U>"/>
                        <param name="owner" type="ActionPropertyChangeListener"/>
                    </params>
                </method>
                <method name="getOwner" type="ActionPropertyChangeListener" line="153"/>
            </class>
        </class>
    </source>