<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.Transient"/>
        <import package="java.util"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JTabbedPane" line="14">
            <extends class="JComponent"/>
            <implements interface="Serializable"/>
            <implements interface="Accessible"/>
            <implements interface="SwingConstants"/>
            <javadoc line="14">
                A component that lets the user switch between a group of components by
                  clicking on a tab with a given title and/or icon.
                  For examples and information on using tabbed panes see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tabbedpane.html&quot;&gt;How to Use Tabbed Panes&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  Tabs/components are added to a &lt;code&gt;TabbedPane&lt;/code&gt; object by using the
                  &lt;code&gt;addTab&lt;/code&gt; and &lt;code&gt;insertTab&lt;/code&gt; methods.
                  A tab is represented by an index corresponding
                  to the position it was added in, where the first tab has an index equal to 0
                  and the last tab has an index equal to the tab count minus 1.
                  &lt;p&gt;
                  The &lt;code&gt;TabbedPane&lt;/code&gt; uses a &lt;code&gt;SingleSelectionModel&lt;/code&gt;
                  to represent the set
                  of tab indices and the currently selected index.  If the tab count
                  is greater than 0, then there will always be a selected index, which
                  by default will be initialized to the first tab.  If the tab count is
                  0, then the selected index will be -1.
                  &lt;p&gt;
                  The tab title can be rendered by a &lt;code&gt;Component&lt;/code&gt;.
                  For example, the following produce similar results:
                  &lt;pre&gt;
                  // In this case the look and feel renders the title for the tab.
                  tabbedPane.addTab(&quot;Tab&quot;, myComponent);
                  // In this case the custom component is responsible for rendering the
                  // title of the tab.
                  tabbedPane.addTab(null, myComponent);
                  tabbedPane.setTabComponentAt(0, new JLabel(&quot;Tab&quot;));
                  &lt;/pre&gt;
                  The latter is typically used when you want a more complex user interaction
                  that requires custom components on the tab.  For example, you could
                  provide a custom component that animates or one that has widgets for
                  closing the tab.
                  &lt;p&gt;
                  If you specify a component for a tab, the &lt;code&gt;JTabbedPane&lt;/code&gt;
                  will not render any text or icon you have specified for the tab.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;
                  Do not use &lt;code&gt;setVisible&lt;/code&gt; directly on a tab component to make it visible,
                  use &lt;code&gt;setSelectedComponent&lt;/code&gt; or &lt;code&gt;setSelectedIndex&lt;/code&gt; methods instead.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfoattribute>
                    : isContainer true
                      description: A component which provides a tab folder metaphor for
                      displaying one component from a set of components.                    
                </beaninfoattribute>
                <author>
                    Dave Moore                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <see>
                    SingleSelectionModel                    
                </see>
            </javadoc>
            <declaration name="WRAP_TAB_LAYOUT" type="int" line="78"/>
            <javadoc line="78">
                The tab layout policy for wrapping tabs in multiple runs when all
                  tabs will not fit within a single run.                
            </javadoc>
            <declaration name="SCROLL_TAB_LAYOUT" type="int" line="83"/>
            <javadoc line="83">
                Tab layout policy for providing a subset of available tabs when all
                  the tabs will not fit within a single run.  If all the tabs do
                  not fit within a single run the look and feel will provide a way
                  to navigate to hidden tabs.                
            </javadoc>
            <declaration name="uiClassID" type="String" line="90"/>
            <javadoc line="90">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="tabPlacement" type="int" line="95"/>
            <javadoc line="95">
                Where the tabs are placed.                
                <see>
                    #setTabPlacement                    
                </see>
            </javadoc>
            <declaration name="tabLayoutPolicy" type="int" line="100"/>
            <declaration name="model" type="SingleSelectionModel" line="101"/>
            <javadoc line="101">
                The default selection model                
            </javadoc>
            <declaration name="haveRegistered" type="boolean" line="105"/>
            <declaration name="changeListener" type="ChangeListener" line="106"/>
            <javadoc line="106">
                The &lt;code&gt;changeListener&lt;/code&gt; is the listener we add to the
                  model.                
            </javadoc>
            <declaration name="pages" type="java.util.List&amp;lt;Page&amp;gt;" line="111"/>
            <declaration name="visComp" type="Component" line="112"/>
            <declaration name="changeEvent" type="ChangeEvent" line="113"/>
            <javadoc line="113">
                Only one &lt;code&gt;ChangeEvent&lt;/code&gt; is needed per &lt;code&gt;TabPane&lt;/code&gt;
                  instance since the
                  event&apos;s only (read-only) state is the source property.  The source
                  of events generated here is always &quot;this&quot;.                
            </javadoc>
            <javadoc line="120">
                Creates an empty &lt;code&gt;TabbedPane&lt;/code&gt; with a default
                  tab placement of &lt;code&gt;JTabbedPane.TOP&lt;/code&gt;.                
                <see>
                    #addTab                    
                </see>
            </javadoc>
            <method name="JTabbedPane" type="constructor" line="125"/>
            <javadoc line="128">
                Creates an empty &lt;code&gt;TabbedPane&lt;/code&gt; with the specified tab placement
                  of either: &lt;code&gt;JTabbedPane.TOP&lt;/code&gt;, &lt;code&gt;JTabbedPane.BOTTOM&lt;/code&gt;,
                  &lt;code&gt;JTabbedPane.LEFT&lt;/code&gt;, or &lt;code&gt;JTabbedPane.RIGHT&lt;/code&gt;.                
                <param>
                    tabPlacement the placement for the tabs relative to the content                    
                </param>
                <see>
                    #addTab                    
                </see>
            </javadoc>
            <method name="JTabbedPane" type="constructor" line="135">
                <params>
                    <param name="tabPlacement" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Creates an empty &lt;code&gt;TabbedPane&lt;/code&gt; with the specified tab placement
                  and tab layout policy.  Tab placement may be either:
                  &lt;code&gt;JTabbedPane.TOP&lt;/code&gt;, &lt;code&gt;JTabbedPane.BOTTOM&lt;/code&gt;,
                  &lt;code&gt;JTabbedPane.LEFT&lt;/code&gt;, or &lt;code&gt;JTabbedPane.RIGHT&lt;/code&gt;.
                  Tab layout policy may be either: &lt;code&gt;JTabbedPane.WRAP_TAB_LAYOUT&lt;/code&gt;
                  or &lt;code&gt;JTabbedPane.SCROLL_TAB_LAYOUT&lt;/code&gt;.                
                <param>
                    tabPlacement the placement for the tabs relative to the content                    
                </param>
                <param>
                    tabLayoutPolicy the policy for laying out tabs when all tabs will not fit on one run                    
                </param>
                <exception>
                    IllegalArgumentException if tab placement or tab layout policy are not
                      one of the above supported values                    
                </exception>
                <see>
                    #addTab                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="JTabbedPane" type="constructor" line="152">
                <params>
                    <param name="tabPlacement" type="int"/>
                    <param name="tabLayoutPolicy" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Returns the UI object which implements the L&amp;F for this component.                
                <return>
                    a &lt;code&gt;TabbedPaneUI&lt;/code&gt; object                    
                </return>
                <see>
                    #setUI                    
                </see>
            </javadoc>
            <method name="getUI" type="TabbedPaneUI" line="164"/>
            <javadoc line="167">
                Sets the UI object which implements the L&amp;F for this component.                
                <param>
                    ui the new UI object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the tabbedpane&apos;s LookAndFeel                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="176">
                <params>
                    <param name="ui" type="TabbedPaneUI"/>
                </params>
                <scope line="178">
                    <declaration name="icon" type="Icon" line="179"/>
                    <scope line="180"/>
                </scope>
            </method>
            <javadoc line="185">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="189"/>
            <javadoc line="192">
                Returns the name of the UI class that implements the
                  L&amp;F for this component.                
                <return>
                    the string &quot;TabbedPaneUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="199"/>
            <class name="ModelListener" line="202">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <javadoc line="202">
                    We pass &lt;code&gt;ModelChanged&lt;/code&gt; events along to the listeners with
                      the tabbedpane (instead of the model itself) as the event source.                    
                </javadoc>
                <method name="stateChanged" type="void" line="207">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="211">
                Subclasses that want to handle &lt;code&gt;ChangeEvents&lt;/code&gt; differently
                  can override this to return a subclass of &lt;code&gt;ModelListener&lt;/code&gt; or
                  another &lt;code&gt;ChangeListener&lt;/code&gt; implementation.                
                <see>
                    #fireStateChanged                    
                </see>
            </javadoc>
            <method name="createChangeListener" type="ChangeListener" line="217"/>
            <javadoc line="220">
                Adds a &lt;code&gt;ChangeListener&lt;/code&gt; to this tabbedpane.                
                <param>
                    l the &lt;code&gt;ChangeListener&lt;/code&gt; to add                    
                </param>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="226">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="229">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt; from this tabbedpane.                
                <param>
                    l the &lt;code&gt;ChangeListener&lt;/code&gt; to remove                    
                </param>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="235">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="238">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this &lt;code&gt;JTabbedPane&lt;/code&gt; with &lt;code&gt;addChangeListener&lt;/code&gt;.                
                <return>
                    all of the &lt;code&gt;ChangeListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="245"/>
            <javadoc line="248">
                Sends a {@code ChangeEvent}, with this {@code JTabbedPane} as the source,
                  to each registered listener. This method is called each time there is
                  a change to either the selected index or the selected tab in the{@code JTabbedPane}. Usually, the selected index and selected tab change
                  together. However, there are some cases, such as tab addition, where the
                  selected index changes and the same tab remains selected. There are other
                  cases, such as deleting the selected tab, where the index remains the
                  same, but a new tab moves to that index. Events are fired for all of
                  these cases.                
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="260">
                <declaration name="selIndex" type="int" line="261"/>
                <scope line="262">
                    <scope line="263"/>
                </scope>
                <scope line="268">
                    <declaration name="newComp" type="Component" line="269"/>
                    <scope line="270">
                        <declaration name="shouldChangeFocus" type="boolean" line="271"/>
                        <scope line="272">
                            <scope line="274"/>
                        </scope>
                        <scope line="278"/>
                        <scope line="281"/>
                    </scope>
                </scope>
                <declaration name="listeners" type="Object[]" line="287"/>
                <scope line="288">
                    <scope line="289"/>
                </scope>
            </method>
            <javadoc line="295">
                Returns the model associated with this tabbedpane.                
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="getModel" type="SingleSelectionModel" line="299"/>
            <javadoc line="302">
                Sets the model to be used with this tabbedpane.                
                <param>
                    model the model to be used                    
                </param>
                <see>
                    #getModel                    
                </see>
                <beaninfobound>
                    : true
                      description: The tabbedpane&apos;s SingleSelectionModel.                    
                </beaninfobound>
            </javadoc>
            <method name="setModel" type="void" line="309">
                <params>
                    <param name="model" type="SingleSelectionModel"/>
                </params>
                <declaration name="oldModel" type="SingleSelectionModel" line="310"/>
                <scope line="311"/>
                <scope line="316"/>
            </method>
            <javadoc line="323">
                Returns the placement of the tabs for this tabbedpane.                
                <see>
                    #setTabPlacement                    
                </see>
            </javadoc>
            <method name="getTabPlacement" type="int" line="327"/>
            <javadoc line="330">
                Sets the tab placement for this tabbedpane.
                  Possible values are:&lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;JTabbedPane.TOP&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTabbedPane.BOTTOM&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTabbedPane.LEFT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTabbedPane.RIGHT&lt;/code&gt;
                  &lt;/ul&gt;
                  The default value, if not set, is &lt;code&gt;SwingConstants.TOP&lt;/code&gt;.                
                <param>
                    tabPlacement the placement for the tabs relative to the content                    
                </param>
                <exception>
                    IllegalArgumentException if tab placement value isn&apos;t one
                      of the above valid values                    
                </exception>
                <beaninfopreferred>
                    : true
                      bound: true
                      attribute: visualUpdate true
                      enum: TOP JTabbedPane.TOP
                      LEFT JTabbedPane.LEFT
                      BOTTOM JTabbedPane.BOTTOM
                      RIGHT JTabbedPane.RIGHT
                      description: The tabbedpane&apos;s tab placement.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setTabPlacement" type="void" line="351">
                <params>
                    <param name="tabPlacement" type="int"/>
                </params>
                <scope line="352"/>
                <scope line="355">
                    <declaration name="oldValue" type="int" line="356"/>
                </scope>
            </method>
            <javadoc line="363">
                Returns the policy used by the tabbedpane to layout the tabs when all the
                  tabs will not fit within a single run.                
                <see>
                    #setTabLayoutPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTabLayoutPolicy" type="int" line="369"/>
            <javadoc line="372">
                Sets the policy which the tabbedpane will use in laying out the tabs
                  when all the tabs will not fit within a single run.
                  Possible values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;JTabbedPane.WRAP_TAB_LAYOUT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTabbedPane.SCROLL_TAB_LAYOUT&lt;/code&gt;
                  &lt;/ul&gt;
                  The default value, if not set by the UI, is &lt;code&gt;JTabbedPane.WRAP_TAB_LAYOUT&lt;/code&gt;.
                  &lt;p&gt;
                  Some look and feels might only support a subset of the possible
                  layout policies, in which case the value of this property may be
                  ignored.                
                <param>
                    tabLayoutPolicy the policy used to layout the tabs                    
                </param>
                <exception>
                    IllegalArgumentException if layoutPolicy value isn&apos;t one
                      of the above valid values                    
                </exception>
                <see>
                    #getTabLayoutPolicy                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfopreferred>
                    : true
                      bound: true
                      attribute: visualUpdate true
                      enum: WRAP_TAB_LAYOUT JTabbedPane.WRAP_TAB_LAYOUT
                      SCROLL_TAB_LAYOUT JTabbedPane.SCROLL_TAB_LAYOUT
                      description: The tabbedpane&apos;s policy for laying out the tabs                    
                </beaninfopreferred>
            </javadoc>
            <method name="setTabLayoutPolicy" type="void" line="397">
                <params>
                    <param name="tabLayoutPolicy" type="int"/>
                </params>
                <scope line="398"/>
                <scope line="401">
                    <declaration name="oldValue" type="int" line="402"/>
                </scope>
            </method>
            <javadoc line="409">
                Returns the currently selected index for this tabbedpane.
                  Returns -1 if there is no currently selected tab.                
                <return>
                    the index of the selected tab                    
                </return>
                <see>
                    #setSelectedIndex                    
                </see>
            </javadoc>
            <method name="getSelectedIndex" type="int" line="415"/>
            <javadoc line="418">
                Sets the selected index for this tabbedpane. The index must be
                  a valid tab index or -1, which indicates that no tab should be selected
                  (can also be used when there are no tabs in the tabbedpane).  If a -1
                  value is specified when the tabbedpane contains one or more tabs, then
                  the results will be implementation defined.                
                <param>
                    index  the index to be selected                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; -1 || index &gt;= tab count)                    
                </exception>
                <see>
                    #getSelectedIndex                    
                </see>
                <see>
                    SingleSelectionModel#setSelectedIndex                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The tabbedpane&apos;s selected tab index.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setSelectedIndex" type="void" line="432">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="433"/>
            </method>
            <method name="setSelectedIndexImpl" type="void" line="438">
                <params>
                    <param name="index" type="int"/>
                    <param name="doAccessibleChanges" type="boolean"/>
                </params>
                <declaration name="oldIndex" type="int" line="439"/>
                <declaration name="oldPage" type="Page" line="440"/>
                <declaration name="oldName" type="String" line="441"/>
                <scope line="443">
                    <scope line="444"/>
                    <scope line="447"/>
                    <scope line="450"/>
                </scope>
                <scope line="455"/>
            </method>
            <method name="changeAccessibleSelection" type="void" line="459">
                <params>
                    <param name="oldPage" type="Page"/>
                    <param name="oldName" type="String"/>
                    <param name="newPage" type="Page"/>
                </params>
                <scope line="460"/>
                <scope line="463"/>
                <scope line="466"/>
            </method>
            <javadoc line="471">
                Returns the currently selected component for this tabbedpane.
                  Returns &lt;code&gt;null&lt;/code&gt; if there is no currently selected tab.                
                <return>
                    the component corresponding to the selected tab                    
                </return>
                <see>
                    #setSelectedComponent                    
                </see>
            </javadoc>
            <method name="getSelectedComponent" type="Component" line="477">
                <declaration name="index" type="int" line="478"/>
                <scope line="479"/>
            </method>
            <javadoc line="484">
                Sets the selected component for this tabbedpane.  This
                  will automatically set the &lt;code&gt;selectedIndex&lt;/code&gt; to the index
                  corresponding to the specified component.                
                <exception>
                    IllegalArgumentException if component not found in tabbed
                      pane                    
                </exception>
                <see>
                    #getSelectedComponent                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The tabbedpane&apos;s selected component.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setSelectedComponent" type="void" line="494">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="index" type="int" line="495"/>
                <scope line="496"/>
                <scope line="499"/>
            </method>
            <javadoc line="503">
                Inserts a new tab for the given component, at the given index,
                  represented by the given title and/or icon, either of which may
                  be {@code null}.                
                <param>
                    title the title to be displayed on the tab                    
                </param>
                <param>
                    icon the icon to be displayed on the tab                    
                </param>
                <param>
                    component the component to be displayed when this tab is clicked.                    
                </param>
                <param>
                    tip the tooltip to be displayed for this tab                    
                </param>
                <param>
                    index the position to insert this new tab
                      ({@code &gt; 0 and &lt;= getTabCount()})                    
                </param>
                <throws>
                    IndexOutOfBoundsException if the index is out of range
                      ({@code &lt; 0 or &gt; getTabCount()})                    
                </throws>
                <see>
                    #addTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="insertTab" type="void" line="518">
                <params>
                    <param name="title" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="component" type="Component"/>
                    <param name="tip" type="String"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="newIndex" type="int" line="519"/>
                <declaration name="removeIndex" type="int" line="520"/>
                <scope line="521">
                    <scope line="523"/>
                </scope>
                <declaration name="selectedIndex" type="int" line="527"/>
                <scope line="529"/>
                <scope line="533"/>
                <scope line="536"/>
                <scope line="539"/>
                <scope line="542"/>
                <scope line="546"/>
            </method>
            <javadoc line="552">
                Adds a &lt;code&gt;component&lt;/code&gt; and &lt;code&gt;tip&lt;/code&gt;
                  represented by a &lt;code&gt;title&lt;/code&gt; and/or &lt;code&gt;icon&lt;/code&gt;,
                  either of which can be &lt;code&gt;null&lt;/code&gt;.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    title the title to be displayed in this tab                    
                </param>
                <param>
                    icon the icon to be displayed in this tab                    
                </param>
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <param>
                    tip the tooltip to be displayed for this tab                    
                </param>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="addTab" type="void" line="564">
                <params>
                    <param name="title" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="component" type="Component"/>
                    <param name="tip" type="String"/>
                </params>
            </method>
            <javadoc line="567">
                Adds a &lt;code&gt;component&lt;/code&gt; represented by a &lt;code&gt;title&lt;/code&gt;
                  and/or &lt;code&gt;icon&lt;/code&gt;, either of which can be &lt;code&gt;null&lt;/code&gt;.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    title the title to be displayed in this tab                    
                </param>
                <param>
                    icon the icon to be displayed in this tab                    
                </param>
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="addTab" type="void" line="577">
                <params>
                    <param name="title" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="580">
                Adds a &lt;code&gt;component&lt;/code&gt; represented by a &lt;code&gt;title&lt;/code&gt;
                  and no icon.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    title the title to be displayed in this tab                    
                </param>
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="addTab" type="void" line="589">
                <params>
                    <param name="title" type="String"/>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="592">
                Adds a &lt;code&gt;component&lt;/code&gt; with a tab title defaulting to
                  the name of the component which is the result of calling
                  &lt;code&gt;component.getName&lt;/code&gt;.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <return>
                    the component                    
                </return>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="add" type="Component" line="602">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="603"/>
                <scope line="606"/>
            </method>
            <javadoc line="611">
                Adds a &lt;code&gt;component&lt;/code&gt; with the specified tab title.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    title the title to be displayed in this tab                    
                </param>
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <return>
                    the component                    
                </return>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="add" type="Component" line="620">
                <params>
                    <param name="title" type="String"/>
                    <param name="component" type="Component"/>
                </params>
                <scope line="621"/>
                <scope line="624"/>
            </method>
            <javadoc line="629">
                Adds a &lt;code&gt;component&lt;/code&gt; at the specified tab index with a tab
                  title defaulting to the name of the component.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <param>
                    index the position to insert this new tab                    
                </param>
                <return>
                    the component                    
                </return>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="add" type="Component" line="639">
                <params>
                    <param name="component" type="Component"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="640"/>
                <scope line="643"/>
            </method>
            <javadoc line="648">
                Adds a &lt;code&gt;component&lt;/code&gt; to the tabbed pane.
                  If &lt;code&gt;constraints&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt; or an
                  &lt;code&gt;Icon&lt;/code&gt;, it will be used for the tab title,
                  otherwise the component&apos;s name will be used as the tab title.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <param>
                    constraints the object to be displayed in the tab                    
                </param>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="add" type="void" line="659">
                <params>
                    <param name="component" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
                <scope line="660">
                    <scope line="661"/>
                    <scope line="664"/>
                    <scope line="667"/>
                </scope>
                <scope line="671"/>
            </method>
            <javadoc line="675">
                Adds a &lt;code&gt;component&lt;/code&gt; at the specified tab index.
                  If &lt;code&gt;constraints&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt; or an
                  &lt;code&gt;Icon&lt;/code&gt;, it will be used for the tab title,
                  otherwise the component&apos;s name will be used as the tab title.
                  Cover method for &lt;code&gt;insertTab&lt;/code&gt;.                
                <param>
                    component the component to be displayed when this tab is clicked                    
                </param>
                <param>
                    constraints the object to be displayed in the tab                    
                </param>
                <param>
                    index the position to insert this new tab                    
                </param>
                <see>
                    #insertTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="add" type="void" line="687">
                <params>
                    <param name="component" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="688">
                    <declaration name="icon" type="Icon" line="689"/>
                    <declaration name="title" type="String" line="690"/>
                </scope>
                <scope line="693"/>
            </method>
            <javadoc line="697">
                Removes the tab at &lt;code&gt;index&lt;/code&gt;.
                  After the component associated with &lt;code&gt;index&lt;/code&gt; is removed,
                  its visibility is reset to true to ensure it will be visible
                  if added to other containers.                
                <param>
                    index the index of the tab to be removed                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #addTab                    
                </see>
                <see>
                    #insertTab                    
                </see>
            </javadoc>
            <method name="removeTabAt" type="void" line="708">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="component" type="Component" line="710"/>
                <declaration name="shouldChangeFocus" type="boolean" line="711"/>
                <declaration name="selected" type="int" line="712"/>
                <declaration name="oldName" type="String" line="713"/>
                <scope line="714"/>
                <scope line="718">
                    <scope line="719"/>
                </scope>
                <scope line="728"/>
                <scope line="731">
                    <declaration name="newSelected" type="Page" line="733"/>
                </scope>
                <scope line="736"/>
                <scope line="740">
                    <declaration name="components" type="Component" line="741"/>
                    <scope line="742">
                        <scope line="743"/>
                    </scope>
                </scope>
                <scope line="750"/>
            </method>
            <javadoc line="756">
                Removes the specified &lt;code&gt;Component&lt;/code&gt; from the
                  &lt;code&gt;JTabbedPane&lt;/code&gt;. The method does nothing
                  if the &lt;code&gt;component&lt;/code&gt; is null.                
                <param>
                    component the component to remove from the tabbedpane                    
                </param>
                <see>
                    #addTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="764">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="index" type="int" line="765"/>
                <scope line="766"/>
                <scope line="769">
                    <declaration name="children" type="Component" line="770"/>
                    <scope line="771">
                        <scope line="772"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="779">
                Removes the tab and component which corresponds to the specified index.                
                <param>
                    index the index of the component to remove from the
                      &lt;code&gt;tabbedpane&lt;/code&gt;                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #addTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="788">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="791">
                Removes all the tabs and their corresponding components
                  from the &lt;code&gt;tabbedpane&lt;/code&gt;.                
                <see>
                    #addTab                    
                </see>
                <see>
                    #removeTabAt                    
                </see>
            </javadoc>
            <method name="removeAll" type="void" line="797">
                <declaration name="tabCount" type="int" line="799"/>
                <scope line="800"/>
            </method>
            <javadoc line="804">
                Returns the number of tabs in this &lt;code&gt;tabbedpane&lt;/code&gt;.                
                <return>
                    an integer specifying the number of tabbed pages                    
                </return>
            </javadoc>
            <method name="getTabCount" type="int" line="808"/>
            <javadoc line="811">
                Returns the number of tab runs currently used to display
                  the tabs.                
                <return>
                    an integer giving the number of rows if the
                      &lt;code&gt;tabPlacement&lt;/code&gt;
                      is &lt;code&gt;TOP&lt;/code&gt; or &lt;code&gt;BOTTOM&lt;/code&gt;
                      and the number of columns if
                      &lt;code&gt;tabPlacement&lt;/code&gt;
                      is &lt;code&gt;LEFT&lt;/code&gt; or &lt;code&gt;RIGHT&lt;/code&gt;,
                      or 0 if there is no UI set on this &lt;code&gt;tabbedpane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getTabRunCount" type="int" line="822">
                <scope line="823"/>
            </method>
            <javadoc line="828">
                Returns the tab title at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the title at &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setTitleAt                    
                </see>
            </javadoc>
            <method name="getTitleAt" type="String" line="836">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="839">
                Returns the tab icon at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the icon at &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setIconAt                    
                </see>
            </javadoc>
            <method name="getIconAt" type="Icon" line="847">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="850">
                Returns the tab disabled icon at &lt;code&gt;index&lt;/code&gt;.
                  If the tab disabled icon doesn&apos;t exist at &lt;code&gt;index&lt;/code&gt;
                  this will forward the call to the look and feel to construct
                  an appropriate disabled Icon from the corresponding enabled
                  Icon. Some look and feels might not render the disabled Icon,
                  in which case it won&apos;t be created.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the icon at &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setDisabledIconAt                    
                </see>
            </javadoc>
            <method name="getDisabledIconAt" type="Icon" line="863">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="page" type="Page" line="864"/>
                <scope line="865"/>
            </method>
            <javadoc line="870">
                Returns the tab tooltip text at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    a string containing the tool tip text at &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setToolTipTextAt                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getToolTipTextAt" type="String" line="879">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="882">
                Returns the tab background color at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; of the tab background at
                      &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setBackgroundAt                    
                </see>
            </javadoc>
            <method name="getBackgroundAt" type="Color" line="891">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="894">
                Returns the tab foreground color at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; of the tab foreground at
                      &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setForegroundAt                    
                </see>
            </javadoc>
            <method name="getForegroundAt" type="Color" line="903">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="906">
                Returns whether or not the tab at &lt;code&gt;index&lt;/code&gt; is
                  currently enabled.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    true if the tab at &lt;code&gt;index&lt;/code&gt; is enabled;
                      false otherwise                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setEnabledAt                    
                </see>
            </javadoc>
            <method name="isEnabledAt" type="boolean" line="916">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="919">
                Returns the component at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the &lt;code&gt;Component&lt;/code&gt; at &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setComponentAt                    
                </see>
            </javadoc>
            <method name="getComponentAt" type="Component" line="927">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="930">
                Returns the keyboard mnemonic for accessing the specified tab.
                  The mnemonic is the key which when combined with the look and feel&apos;s
                  mouseless modifier (usually Alt) will activate the specified
                  tab.                
                <since>
                    1.4                    
                </since>
                <param>
                    tabIndex the index of the tab that the mnemonic refers to                    
                </param>
                <return>
                    the key code which represents the mnemonic;
                      -1 if a mnemonic is not specified for the tab                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (&lt;code&gt;tabIndex&lt;/code&gt; &amp;lt; 0 ||
                      &lt;code&gt;tabIndex&lt;/code&gt; &amp;gt;= tab count)                    
                </exception>
                <see>
                    #setDisplayedMnemonicIndexAt(int,int)                    
                </see>
                <see>
                    #setMnemonicAt(int,int)                    
                </see>
            </javadoc>
            <method name="getMnemonicAt" type="int" line="945">
                <params>
                    <param name="tabIndex" type="int"/>
                </params>
                <declaration name="page" type="Page" line="947"/>
            </method>
            <javadoc line="950">
                Returns the character, as an index, that the look and feel should
                  provide decoration for as representing the mnemonic character.                
                <since>
                    1.4                    
                </since>
                <param>
                    tabIndex the index of the tab that the mnemonic refers to                    
                </param>
                <return>
                    index representing mnemonic character if one exists;
                      otherwise returns -1                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (&lt;code&gt;tabIndex&lt;/code&gt; &amp;lt; 0 ||
                      &lt;code&gt;tabIndex&lt;/code&gt; &amp;gt;= tab count)                    
                </exception>
                <see>
                    #setDisplayedMnemonicIndexAt(int,int)                    
                </see>
                <see>
                    #setMnemonicAt(int,int)                    
                </see>
            </javadoc>
            <method name="getDisplayedMnemonicIndexAt" type="int" line="963">
                <params>
                    <param name="tabIndex" type="int"/>
                </params>
                <declaration name="page" type="Page" line="965"/>
            </method>
            <javadoc line="968">
                Returns the tab bounds at &lt;code&gt;index&lt;/code&gt;.  If the tab at
                  this index is not currently visible in the UI, then returns
                  &lt;code&gt;null&lt;/code&gt;.
                  If there is no UI set on this &lt;code&gt;tabbedpane&lt;/code&gt;,
                  then returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    index the index to be queried                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; containing the tab bounds at
                      &lt;code&gt;index&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if tab at
                      &lt;code&gt;index&lt;/code&gt; is not currently visible in the UI,
                      or if there is no UI set on this &lt;code&gt;tabbedpane&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
            </javadoc>
            <method name="getBoundsAt" type="Rectangle" line="982">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="984"/>
            </method>
            <javadoc line="989">
                Sets the title at &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;title&lt;/code&gt; which
                  can be &lt;code&gt;null&lt;/code&gt;.
                  The title is not shown if a tab component for this tab was specified.
                  An internal exception is raised if there is no tab at that index.                
                <param>
                    index the tab index where the title should be set                    
                </param>
                <param>
                    title the title to be displayed in the tab                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #getTitleAt                    
                </see>
                <see>
                    #setTabComponentAt                    
                </see>
                <beaninfopreferred>
                    : true
                      attribute: visualUpdate true
                      description: The title at the specified tab index.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setTitleAt" type="void" line="1004">
                <params>
                    <param name="index" type="int"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="page" type="Page" line="1005"/>
                <declaration name="oldTitle" type="String" line="1006"/>
                <scope line="1008"/>
                <scope line="1012"/>
                <scope line="1015"/>
            </method>
            <javadoc line="1020">
                Sets the icon at &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;icon&lt;/code&gt; which can be
                  &lt;code&gt;null&lt;/code&gt;. This does not set disabled icon at &lt;code&gt;icon&lt;/code&gt;.
                  If the new Icon is different than the current Icon and disabled icon
                  is not explicitly set, the LookAndFeel will be asked to generate a disabled
                  Icon. To explicitly set disabled icon, use &lt;code&gt;setDisableIconAt()&lt;/code&gt;.
                  The icon is not shown if a tab component for this tab was specified.
                  An internal exception is raised if there is no tab at that index.                
                <param>
                    index the tab index where the icon should be set                    
                </param>
                <param>
                    icon the icon to be displayed in the tab                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setDisabledIconAt                    
                </see>
                <see>
                    #getIconAt                    
                </see>
                <see>
                    #getDisabledIconAt                    
                </see>
                <see>
                    #setTabComponentAt                    
                </see>
                <beaninfopreferred>
                    : true
                      attribute: visualUpdate true
                      description: The icon at the specified tab index.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setIconAt" type="void" line="1040">
                <params>
                    <param name="index" type="int"/>
                    <param name="icon" type="Icon"/>
                </params>
                <declaration name="page" type="Page" line="1041"/>
                <declaration name="oldIcon" type="Icon" line="1042"/>
                <scope line="1043">
                    <scope line="1045"/>
                    <scope line="1048"/>
                </scope>
            </method>
            <javadoc line="1055">
                Sets the disabled icon at &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;icon&lt;/code&gt;
                  which can be &lt;code&gt;null&lt;/code&gt;.
                  An internal exception is raised if there is no tab at that index.                
                <param>
                    index the tab index where the disabled icon should be set                    
                </param>
                <param>
                    disabledIcon the icon to be displayed in the tab when disabled                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #getDisabledIconAt                    
                </see>
                <beaninfopreferred>
                    : true
                      attribute: visualUpdate true
                      description: The disabled icon at the specified tab index.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setDisabledIconAt" type="void" line="1068">
                <params>
                    <param name="index" type="int"/>
                    <param name="disabledIcon" type="Icon"/>
                </params>
                <declaration name="oldIcon" type="Icon" line="1069"/>
                <scope line="1071"/>
            </method>
            <javadoc line="1076">
                Sets the tooltip text at &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;toolTipText&lt;/code&gt;
                  which can be &lt;code&gt;null&lt;/code&gt;.
                  An internal exception is raised if there is no tab at that index.                
                <param>
                    index the tab index where the tooltip text should be set                    
                </param>
                <param>
                    toolTipText the tooltip text to be displayed for the tab                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #getToolTipTextAt                    
                </see>
                <beaninfopreferred>
                    : true
                      description: The tooltip text at the specified tab index.                    
                </beaninfopreferred>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setToolTipTextAt" type="void" line="1089">
                <params>
                    <param name="index" type="int"/>
                    <param name="toolTipText" type="String"/>
                </params>
                <declaration name="oldToolTipText" type="String" line="1090"/>
                <scope line="1092"/>
                <scope line="1095"/>
            </method>
            <javadoc line="1100">
                Sets the background color at &lt;code&gt;index&lt;/code&gt; to
                  &lt;code&gt;background&lt;/code&gt;
                  which can be &lt;code&gt;null&lt;/code&gt;, in which case the tab&apos;s background color
                  will default to the background color of the &lt;code&gt;tabbedpane&lt;/code&gt;.
                  An internal exception is raised if there is no tab at that index.
                  &lt;p/&gt;
                  It is up to the look and feel to honor this property, some may
                  choose to ignore it.                
                <param>
                    index the tab index where the background should be set                    
                </param>
                <param>
                    background the color to be displayed in the tab&apos;s background                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #getBackgroundAt                    
                </see>
                <beaninfopreferred>
                    : true
                      attribute: visualUpdate true
                      description: The background color at the specified tab index.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setBackgroundAt" type="void" line="1118">
                <params>
                    <param name="index" type="int"/>
                    <param name="background" type="Color"/>
                </params>
                <declaration name="oldBg" type="Color" line="1119"/>
                <scope line="1121">
                    <declaration name="tabBounds" type="Rectangle" line="1122"/>
                    <scope line="1123"/>
                </scope>
            </method>
            <javadoc line="1128">
                Sets the foreground color at &lt;code&gt;index&lt;/code&gt; to
                  &lt;code&gt;foreground&lt;/code&gt; which can be
                  &lt;code&gt;null&lt;/code&gt;, in which case the tab&apos;s foreground color
                  will default to the foreground color of this &lt;code&gt;tabbedpane&lt;/code&gt;.
                  An internal exception is raised if there is no tab at that index.
                  &lt;p/&gt;
                  It is up to the look and feel to honor this property, some may
                  choose to ignore it.                
                <param>
                    index the tab index where the foreground should be set                    
                </param>
                <param>
                    foreground the color to be displayed as the tab&apos;s foreground                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #getForegroundAt                    
                </see>
                <beaninfopreferred>
                    : true
                      attribute: visualUpdate true
                      description: The foreground color at the specified tab index.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setForegroundAt" type="void" line="1146">
                <params>
                    <param name="index" type="int"/>
                    <param name="foreground" type="Color"/>
                </params>
                <declaration name="oldFg" type="Color" line="1147"/>
                <scope line="1149">
                    <declaration name="tabBounds" type="Rectangle" line="1150"/>
                    <scope line="1151"/>
                </scope>
            </method>
            <javadoc line="1156">
                Sets whether or not the tab at &lt;code&gt;index&lt;/code&gt; is enabled.
                  An internal exception is raised if there is no tab at that index.                
                <param>
                    index the tab index which should be enabled/disabled                    
                </param>
                <param>
                    enabled whether or not the tab should be enabled                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #isEnabledAt                    
                </see>
            </javadoc>
            <method name="setEnabledAt" type="void" line="1165">
                <params>
                    <param name="index" type="int"/>
                    <param name="enabled" type="boolean"/>
                </params>
                <declaration name="oldEnabled" type="boolean" line="1166"/>
                <scope line="1168"/>
            </method>
            <javadoc line="1173">
                Sets the component at &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;component&lt;/code&gt;.
                  An internal exception is raised if there is no tab at that index.                
                <param>
                    index the tab index where this component is being placed                    
                </param>
                <param>
                    component the component for the tab                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &amp;lt; 0 || index &amp;gt;= tab count)                    
                </exception>
                <see>
                    #getComponentAt                    
                </see>
                <beaninfoattribute>
                    : visualUpdate true
                      description: The component at the specified tab index.                    
                </beaninfoattribute>
            </javadoc>
            <method name="setComponentAt" type="void" line="1184">
                <params>
                    <param name="index" type="int"/>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="page" type="Page" line="1185"/>
                <scope line="1186">
                    <declaration name="shouldChangeFocus" type="boolean" line="1187"/>
                    <scope line="1188">
                        <scope line="1190">
                            <declaration name="count" type="int" line="1191"/>
                            <declaration name="children" type="Component" line="1192"/>
                            <scope line="1193">
                                <scope line="1194"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="selectedPage" type="boolean" line="1201"/>
                    <scope line="1202"/>
                    <scope line="1205">
                        <scope line="1208"/>
                    </scope>
                    <scope line="1212"/>
                </scope>
            </method>
            <javadoc line="1218">
                Provides a hint to the look and feel as to which character in the
                  text should be decorated to represent the mnemonic. Not all look and
                  feels may support this. A value of -1 indicates either there is
                  no mnemonic for this tab, or you do not wish the mnemonic to be
                  displayed for this tab.
                  &lt;p&gt;
                  The value of this is updated as the properties relating to the
                  mnemonic change (such as the mnemonic itself, the text...).
                  You should only ever have to call this if
                  you do not wish the default character to be underlined. For example, if
                  the text at tab index 3 was &apos;Apple Price&apos;, with a mnemonic of &apos;p&apos;,
                  and you wanted the &apos;P&apos;
                  to be decorated, as &apos;Apple &lt;u&gt;P&lt;/u&gt;rice&apos;, you would have to invoke
                  &lt;code&gt;setDisplayedMnemonicIndex(3, 6)&lt;/code&gt; after invoking
                  &lt;code&gt;setMnemonicAt(3, KeyEvent.VK_P)&lt;/code&gt;.
                  &lt;p&gt;Note that it is the programmer&apos;s responsibility to ensure
                  that each tab has a unique mnemonic or unpredictable results may
                  occur.                
                <since>
                    1.4                    
                </since>
                <param>
                    tabIndex the index of the tab that the mnemonic refers to                    
                </param>
                <param>
                    mnemonicIndex index into the &lt;code&gt;String&lt;/code&gt; to underline                    
                </param>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;tabIndex&lt;/code&gt; is
                      out of range (&lt;code&gt;tabIndex &lt; 0 || tabIndex &gt;= tab
                      count&lt;/code&gt;)                    
                </exception>
                <exception>
                    IllegalArgumentException will be thrown if
                      &lt;code&gt;mnemonicIndex&lt;/code&gt; is &amp;gt;= length of the tab
                      title , or &amp;lt; -1                    
                </exception>
                <see>
                    #setMnemonicAt(int,int)                    
                </see>
                <see>
                    #getDisplayedMnemonicIndexAt(int)                    
                </see>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: the index into the String to draw the keyboard character
                      mnemonic at                    
                </beaninfobound>
            </javadoc>
            <method name="setDisplayedMnemonicIndexAt" type="void" line="1253">
                <params>
                    <param name="tabIndex" type="int"/>
                    <param name="mnemonicIndex" type="int"/>
                </params>
                <declaration name="page" type="Page" line="1255"/>
            </method>
            <javadoc line="1258">
                Sets the keyboard mnemonic for accessing the specified tab.
                  The mnemonic is the key which when combined with the look and feel&apos;s
                  mouseless modifier (usually Alt) will activate the specified
                  tab.
                  &lt;p&gt;
                  A mnemonic must correspond to a single key on the keyboard
                  and should be specified using one of the &lt;code&gt;VK_XXX&lt;/code&gt;
                  keycodes defined in &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt;
                  or one of the extended keycodes obtained through
                  &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;.
                  Mnemonics are case-insensitive, therefore a key event
                  with the corresponding keycode would cause the button to be
                  activated whether or not the Shift modifier was pressed.
                  &lt;p&gt;
                  This will update the displayed mnemonic property for the specified
                  tab.                
                <since>
                    1.4                    
                </since>
                <param>
                    tabIndex the index of the tab that the mnemonic refers to                    
                </param>
                <param>
                    mnemonic the key code which represents the mnemonic                    
                </param>
                <exception>
                    IndexOutOfBoundsException if &lt;code&gt;tabIndex&lt;/code&gt; is out
                      of range (&lt;code&gt;tabIndex &lt; 0 || tabIndex &gt;= tab count&lt;/code&gt;)                    
                </exception>
                <see>
                    #getMnemonicAt(int)                    
                </see>
                <see>
                    #setDisplayedMnemonicIndexAt(int,int)                    
                </see>
                <beaninfobound>
                    : true
                      attribute: visualUpdate true
                      description: The keyboard mnenmonic, as a KeyEvent VK constant,
                      for the specified tab                    
                </beaninfobound>
            </javadoc>
            <method name="setMnemonicAt" type="void" line="1287">
                <params>
                    <param name="tabIndex" type="int"/>
                    <param name="mnemonic" type="int"/>
                </params>
                <declaration name="page" type="Page" line="1289"/>
            </method>
            <javadoc line="1293">
                Returns the first tab index with a given &lt;code&gt;title&lt;/code&gt;,  or
                  -1 if no tab has this title.                
                <param>
                    title the title for the tab                    
                </param>
                <return>
                    the first tab index which matches &lt;code&gt;title&lt;/code&gt;, or
                      -1 if no tab has this title                    
                </return>
            </javadoc>
            <method name="indexOfTab" type="int" line="1300">
                <params>
                    <param name="title" type="String"/>
                </params>
                <scope line="1301">
                    <scope line="1302"/>
                </scope>
            </method>
            <javadoc line="1308">
                Returns the first tab index with a given &lt;code&gt;icon&lt;/code&gt;,
                  or -1 if no tab has this icon.                
                <param>
                    icon the icon for the tab                    
                </param>
                <return>
                    the first tab index which matches &lt;code&gt;icon&lt;/code&gt;,
                      or -1 if no tab has this icon                    
                </return>
            </javadoc>
            <method name="indexOfTab" type="int" line="1315">
                <params>
                    <param name="icon" type="Icon"/>
                </params>
                <scope line="1316">
                    <declaration name="tabIcon" type="Icon" line="1317"/>
                    <scope line="1318"/>
                </scope>
            </method>
            <javadoc line="1324">
                Returns the index of the tab for the specified component.
                  Returns -1 if there is no tab for this component.                
                <param>
                    component the component for the tab                    
                </param>
                <return>
                    the first tab which matches this component, or -1
                      if there is no tab for this component                    
                </return>
            </javadoc>
            <method name="indexOfComponent" type="int" line="1331">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="1332">
                    <declaration name="c" type="Component" line="1333"/>
                    <scope line="1334"/>
                </scope>
            </method>
            <javadoc line="1340">
                Returns the tab index corresponding to the tab whose bounds
                  intersect the specified location.  Returns -1 if no tab
                  intersects the location.                
                <param>
                    x the x location relative to this tabbedpane                    
                </param>
                <param>
                    y the y location relative to this tabbedpane                    
                </param>
                <return>
                    the tab index which intersects the location, or
                      -1 if no tab intersects the location                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="indexAtLocation" type="int" line="1350">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="1351"/>
            </method>
            <javadoc line="1356">
                Returns the tooltip text for the component determined by the
                  mouse event location.                
                <param>
                    event  the &lt;code&gt;MouseEvent&lt;/code&gt; that tells where the
                      cursor is lingering                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt; containing the tooltip text                    
                </return>
            </javadoc>
            <method name="getToolTipText" type="String" line="1363">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <scope line="1364">
                    <declaration name="index" type="int" line="1365"/>
                    <scope line="1366"/>
                </scope>
            </method>
            <method name="checkIndex" type="void" line="1372">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="1373"/>
            </method>
            <javadoc line="1377">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1382">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1384">
                    <declaration name="count" type="byte" line="1385"/>
                    <scope line="1387"/>
                </scope>
            </method>
            <method name="compWriteObjectNotify" type="void" line="1392">
                <scope line="1394"/>
            </method>
            <javadoc line="1398">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="readObject" type="void" line="1403">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1405"/>
                <scope line="1408"/>
            </method>
            <javadoc line="1412">
                Returns a string representation of this &lt;code&gt;JTabbedPane&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JTabbedPane.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1421">
                <declaration name="tabPlacementString" type="String" line="1422"/>
                <scope line="1423"/>
                <scope line="1426"/>
                <scope line="1429"/>
                <scope line="1432"/>
                <declaration name="haveRegisteredString" type="String" line="1436"/>
            </method>
            <javadoc line="1439">
                Gets the AccessibleContext associated with this JTabbedPane.
                  For tabbed panes, the AccessibleContext takes the form of an
                  AccessibleJTabbedPane.
                  A new AccessibleJTabbedPane instance is created if necessary.                
                <return>
                    an AccessibleJTabbedPane that serves as the
                      AccessibleContext of this JTabbedPane                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1447">
                <scope line="1448">
                    <declaration name="count" type="int" line="1450"/>
                    <scope line="1451"/>
                </scope>
            </method>
            <class name="AccessibleJTabbedPane" line="1457">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleSelection"/>
                <implements interface="ChangeListener"/>
                <javadoc line="1457">
                    This class implements accessibility support for the
                      &lt;code&gt;JTabbedPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to tabbed pane user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1473">
                    Returns the accessible name of this object, or {@code null} if
                      there is no accessible name.                    
                    <return>
                        the accessible name of this object, nor {@code null}.                        
                    </return>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getAccessibleName" type="String" line="1479">
                    <scope line="1480"/>
                    <declaration name="cp" type="String" line="1483"/>
                    <scope line="1484"/>
                    <declaration name="index" type="int" line="1487"/>
                    <scope line="1488"/>
                </method>
                <javadoc line="1493">
                    Constructs an AccessibleJTabbedPane                    
                </javadoc>
                <method name="AccessibleJTabbedPane" type="constructor" line="1496"/>
                <method name="stateChanged" type="void" line="1500">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="o" type="Object" line="1501"/>
                </method>
                <javadoc line="1504">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of
                          the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1509"/>
                <javadoc line="1512">
                    Returns the number of accessible children in the object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="1516"/>
                <javadoc line="1519">
                    Return the specified Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the Accessible child of the object                        
                    </return>
                    <exception>
                        IllegalArgumentException if index is out of bounds                        
                    </exception>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="1525">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1526"/>
                </method>
                <javadoc line="1531">
                    Gets the &lt;code&gt;AccessibleSelection&lt;/code&gt; associated with
                      this object.  In the implementation of the Java
                      Accessibility API for this class,
                      returns this object, which is responsible for implementing the
                      &lt;code&gt;AccessibleSelection&lt;/code&gt; interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="1539"/>
                <javadoc line="1542">
                    Returns the &lt;code&gt;Accessible&lt;/code&gt; child contained at
                      the local coordinate &lt;code&gt;Point&lt;/code&gt;, if one exists.
                      Otherwise returns the currently selected tab.                    
                    <return>
                        the &lt;code&gt;Accessible&lt;/code&gt; at the specified
                          location, if it exists                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="1549">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="tab" type="int" line="1550"/>
                    <scope line="1551"/>
                </method>
                <method name="getAccessibleSelectionCount" type="int" line="1556"/>
                <method name="getAccessibleSelection" type="Accessible" line="1559">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="index" type="int" line="1560"/>
                    <scope line="1561"/>
                </method>
                <method name="isAccessibleChildSelected" type="boolean" line="1566">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="addAccessibleSelection" type="void" line="1569">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="removeAccessibleSelection" type="void" line="1572">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="clearAccessibleSelection" type="void" line="1574"/>
                <method name="selectAllAccessibleSelection" type="void" line="1576"/>
            </class>
            <class name="Page" line="1579">
                <extends class="AccessibleContext"/>
                <implements interface="Serializable"/>
                <implements interface="Accessible"/>
                <implements interface="AccessibleComponent"/>
                <declaration name="title" type="String" line="1580"/>
                <declaration name="background" type="Color" line="1581"/>
                <declaration name="foreground" type="Color" line="1582"/>
                <declaration name="icon" type="Icon" line="1583"/>
                <declaration name="disabledIcon" type="Icon" line="1584"/>
                <declaration name="parent" type="JTabbedPane" line="1585"/>
                <declaration name="component" type="Component" line="1586"/>
                <declaration name="tip" type="String" line="1587"/>
                <declaration name="enabled" type="boolean" line="1588"/>
                <declaration name="needsUIUpdate" type="boolean" line="1589"/>
                <declaration name="mnemonic" type="int" line="1590"/>
                <declaration name="mnemonicIndex" type="int" line="1591"/>
                <declaration name="tabComponent" type="Component" line="1592"/>
                <method name="Page" type="constructor" line="1593">
                    <params>
                        <param name="parent" type="JTabbedPane"/>
                        <param name="title" type="String"/>
                        <param name="icon" type="Icon"/>
                        <param name="disabledIcon" type="Icon"/>
                        <param name="component" type="Component"/>
                        <param name="tip" type="String"/>
                    </params>
                </method>
                <method name="initAccessibleContext" type="void" line="1603">
                    <scope line="1604">
                        <declaration name="ac" type="AccessibleContext" line="1605"/>
                        <scope line="1607"/>
                    </scope>
                </method>
                <method name="setMnemonic" type="void" line="1612">
                    <params>
                        <param name="mnemonic" type="int"/>
                    </params>
                </method>
                <method name="getMnemonic" type="int" line="1616"/>
                <method name="setDisplayedMnemonicIndex" type="void" line="1619">
                    <params>
                        <param name="mnemonicIndex" type="int"/>
                    </params>
                    <scope line="1620">
                        <scope line="1621"/>
                    </scope>
                </method>
                <method name="getDisplayedMnemonicIndex" type="int" line="1628"/>
                <method name="updateDisplayedMnemonicIndex" type="void" line="1631"/>
                <method name="getAccessibleContext" type="AccessibleContext" line="1634"/>
                <method name="getAccessibleName" type="String" line="1637">
                    <scope line="1638"/>
                    <scope line="1641"/>
                </method>
                <method name="getAccessibleDescription" type="String" line="1646">
                    <scope line="1647"/>
                    <scope line="1650"/>
                </method>
                <method name="getAccessibleRole" type="AccessibleRole" line="1655"/>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1658">
                    <declaration name="states" type="AccessibleStateSet" line="1659"/>
                    <declaration name="i" type="int" line="1662"/>
                    <scope line="1663"/>
                </method>
                <method name="getAccessibleIndexInParent" type="int" line="1668"/>
                <method name="getAccessibleChildrenCount" type="int" line="1671">
                    <scope line="1672"/>
                    <scope line="1675"/>
                </method>
                <method name="getAccessibleChild" type="Accessible" line="1679">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1680"/>
                    <scope line="1683"/>
                </method>
                <method name="getLocale" type="Locale" line="1687"/>
                <method name="getAccessibleComponent" type="AccessibleComponent" line="1690"/>
                <method name="getBackground" type="Color" line="1693"/>
                <method name="setBackground" type="void" line="1696">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <method name="getForeground" type="Color" line="1699"/>
                <method name="setForeground" type="void" line="1702">
                    <params>
                        <param name="c" type="Color"/>
                    </params>
                </method>
                <method name="getCursor" type="Cursor" line="1705"/>
                <method name="setCursor" type="void" line="1708">
                    <params>
                        <param name="c" type="Cursor"/>
                    </params>
                </method>
                <method name="getFont" type="Font" line="1711"/>
                <method name="setFont" type="void" line="1714">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                </method>
                <method name="getFontMetrics" type="FontMetrics" line="1717">
                    <params>
                        <param name="f" type="Font"/>
                    </params>
                </method>
                <method name="isEnabled" type="boolean" line="1720"/>
                <method name="setEnabled" type="void" line="1723">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <method name="isVisible" type="boolean" line="1726"/>
                <method name="setVisible" type="void" line="1729">
                    <params>
                        <param name="b" type="boolean"/>
                    </params>
                </method>
                <method name="isShowing" type="boolean" line="1732"/>
                <method name="contains" type="boolean" line="1735">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="r" type="Rectangle" line="1736"/>
                </method>
                <method name="getLocationOnScreen" type="Point" line="1739">
                    <declaration name="parentLocation" type="Point" line="1740"/>
                    <declaration name="componentLocation" type="Point" line="1741"/>
                </method>
                <method name="getLocation" type="Point" line="1745">
                    <declaration name="r" type="Rectangle" line="1746"/>
                </method>
                <method name="setLocation" type="void" line="1749">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                </method>
                <method name="getBounds" type="Rectangle" line="1751"/>
                <method name="setBounds" type="void" line="1754">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                </method>
                <method name="getSize" type="Dimension" line="1756">
                    <declaration name="r" type="Rectangle" line="1757"/>
                </method>
                <method name="setSize" type="void" line="1760">
                    <params>
                        <param name="d" type="Dimension"/>
                    </params>
                </method>
                <method name="getAccessibleAt" type="Accessible" line="1762">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <scope line="1763"/>
                    <scope line="1766"/>
                </method>
                <method name="isFocusTraversable" type="boolean" line="1770"/>
                <method name="requestFocus" type="void" line="1773"/>
                <method name="addFocusListener" type="void" line="1775">
                    <params>
                        <param name="l" type="FocusListener"/>
                    </params>
                </method>
                <method name="removeFocusListener" type="void" line="1777">
                    <params>
                        <param name="l" type="FocusListener"/>
                    </params>
                </method>
                <javadoc line="1779">
                    Returns an AccessibleIcon                    
                    <return>
                        the enabled icon if one exists and the page
                          is enabled. Otherwise, returns the disabled icon if
                          one exists and the page is disabled.  Otherwise, null
                          is returned.                        
                    </return>
                </javadoc>
                <method name="getAccessibleIcon" type="AccessibleIcon[]" line="1786">
                    <declaration name="accessibleIcon" type="AccessibleIcon" line="1787"/>
                    <scope line="1788">
                        <declaration name="ac" type="AccessibleContext" line="1789"/>
                    </scope>
                    <scope line="1792">
                        <declaration name="ac" type="AccessibleContext" line="1793"/>
                    </scope>
                    <scope line="1796">
                        <declaration name="returnIcons" type="AccessibleIcon[]" line="1797"/>
                    </scope>
                    <scope line="1801"/>
                </method>
            </class>
            <javadoc line="1806">
                Sets the component that is responsible for rendering the
                  title for the specified tab.  A null value means
                  &lt;code&gt;JTabbedPane&lt;/code&gt; will render the title and/or icon for
                  the specified tab.  A non-null value means the component will
                  render the title and &lt;code&gt;JTabbedPane&lt;/code&gt; will not render
                  the title and/or icon.
                  &lt;p&gt;
                  Note: The component must not be one that the developer has
                  already added to the tabbed pane.                
                <param>
                    index the tab index where the component should be set                    
                </param>
                <param>
                    component the component to render the title for the
                      specified tab                    
                </param>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <exception>
                    IllegalArgumentException if component has already been
                      added to this &lt;code&gt;JTabbedPane&lt;/code&gt;                    
                </exception>
                <see>
                    #getTabComponentAt                    
                </see>
                <beaninfopreferred>
                    : true
                      attribute: visualUpdate true
                      description: The tab component at the specified tab index.                    
                </beaninfopreferred>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setTabComponentAt" type="void" line="1829">
                <params>
                    <param name="index" type="int"/>
                    <param name="component" type="Component"/>
                </params>
                <scope line="1830"/>
                <declaration name="oldValue" type="Component" line="1833"/>
                <scope line="1834">
                    <declaration name="tabComponentIndex" type="int" line="1835"/>
                    <scope line="1836"/>
                </scope>
            </method>
            <javadoc line="1843">
                Returns the tab component at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    index  the index of the item being queried                    
                </param>
                <return>
                    the tab component at &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <exception>
                    IndexOutOfBoundsException if index is out of range
                      (index &lt; 0 || index &gt;= tab count)                    
                </exception>
                <see>
                    #setTabComponentAt                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTabComponentAt" type="Component" line="1852">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="1855">
                Returns the index of the tab for the specified tab component.
                  Returns -1 if there is no tab for this tab component.                
                <param>
                    tabComponent the tab component for the tab                    
                </param>
                <return>
                    the first tab which matches this tab component, or -1
                      if there is no tab for this tab component                    
                </return>
                <see>
                    #setTabComponentAt                    
                </see>
                <see>
                    #getTabComponentAt                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="indexOfTabComponent" type="int" line="1865">
                <params>
                    <param name="tabComponent" type="Component"/>
                </params>
                <scope line="1866">
                    <declaration name="c" type="Component" line="1867"/>
                    <scope line="1868"/>
                </scope>
            </method>
        </class>
    </source>