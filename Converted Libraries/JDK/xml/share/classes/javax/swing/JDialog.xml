<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.accessibility"/>
        <class name="JDialog" line="31">
            <extends class="Dialog"/>
            <comment line="1221">
                ///////////////                
            </comment>
            <comment line="1222">
                Accessibility support                
            </comment>
            <comment line="1223">
                //////////////                
            </comment>
            <comment line="1293">
                inner class AccessibleJDialog                
            </comment>
            <implements interface="WindowConstants"/>
            <implements interface="Accessible"/>
            <implements interface="RootPaneContainer"/>
            <implements interface="TransferHandler.HasGetTransferHandler"/>
            <javadoc line="31">
                The main class for creating a dialog window. You can use this class
                  to create a custom dialog, or invoke the many class methods
                  in {@link JOptionPane} to create a variety of standard dialogs.
                  For information about creating dialogs, see
                  &lt;em&gt;The Java Tutorial&lt;/em&gt; section
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/dialog.html&quot;&gt;How
                  to Make Dialogs&lt;/a&gt;.
                  &lt;p&gt;
                  The {@code JDialog} component contains a {@code JRootPane}as its only child.
                  The {@code contentPane} should be the parent of any children of the{@code JDialog}.
                  As a convenience {@code add} and its variants, {@code remove} and{@code setLayout} have been overridden to forward to the{@code contentPane} as necessary. This means you can write:
                  &lt;pre&gt;
                  dialog.add(child);
                  &lt;/pre&gt;
                  And the child will be added to the contentPane.
                  The {@code contentPane} is always non-{@code null}.
                  Attempting to set it to {@code null} generates an exception.
                  The default {@code contentPane} has a {@code BorderLayout}manager set on it.
                  Refer to {@link javax.swing.RootPaneContainer}for details on adding, removing and setting the {@code LayoutManager}of a {@code JDialog}.
                  &lt;p&gt;
                  Please see the {@code JRootPane} documentation for a complete
                  description of the {@code contentPane}, {@code glassPane},
                  and {@code layeredPane} components.
                  &lt;p&gt;
                  In a multi-screen environment, you can create a {@code JDialog}on a different screen device than its owner.  See {@link java.awt.Frame} for
                  more information.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the {@code java.beans} package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JOptionPane                    
                </see>
                <see>
                    JRootPane                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfo>
                    attribute: isContainer true
                      attribute: containerDelegate getContentPane
                      description: A toplevel window for creating dialog boxes.                    
                </beaninfo>
                <author>
                    David Kloba                    
                </author>
                <author>
                    James Gosling                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="defaultLookAndFeelDecoratedKey" type="Object" line="102"/>
            <javadoc line="102">
                Key into the AppContext, used to check if should provide decorations
                  by default.                
            </javadoc>
            <declaration name="defaultCloseOperation" type="int" line="109"/>
            <declaration name="rootPane" type="JRootPane" line="111"/>
            <javadoc line="111">
                @see #getRootPane                
                <see>
                    #setRootPane                    
                </see>
            </javadoc>
            <declaration name="rootPaneCheckingEnabled" type="boolean" line="117"/>
            <javadoc line="117">
                If true then calls to {@code add} and {@code setLayout}will be forwarded to the {@code contentPane}. This is initially
                  false, but is set to true when the {@code JDialog} is constructed.                
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <declaration name="transferHandler" type="TransferHandler" line="128"/>
            <javadoc line="128">
                The {@code TransferHandler} for this dialog.                
            </javadoc>
            <javadoc line="133">
                Creates a modeless dialog without a title and without a specified{@code Frame} owner.  A shared, hidden frame will be
                  set as the owner of the dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.
                  &lt;p&gt;
                  NOTE: This constructor does not allow you to create an unowned{@code JDialog}. To create an unowned {@code JDialog}you must use either the {@code JDialog(Window)} or{@code JDialog(Dialog)} constructor with an argument of{@code null}.                
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="152"/>
            <javadoc line="156">
                Creates a modeless dialog with the specified {@code Frame}as its owner and an empty title. If {@code owner}is {@code null}, a shared, hidden frame will be set as the
                  owner of the dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.
                  &lt;p&gt;
                  NOTE: This constructor does not allow you to create an unowned{@code JDialog}. To create an unowned {@code JDialog}you must use either the {@code JDialog(Window)} or{@code JDialog(Dialog)} constructor with an argument of{@code null}.                
                <param>
                    owner the {@code Frame} from which the dialog is displayed                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="177">
                <params>
                    <param name="owner" type="Frame"/>
                </params>
            </method>
            <javadoc line="181">
                Creates a dialog with an empty title and the specified modality and{@code Frame} as its owner. If {@code owner} is {@code null},
                  a shared, hidden frame will be set as the owner of the dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.
                  &lt;p&gt;
                  NOTE: This constructor does not allow you to create an unowned{@code JDialog}. To create an unowned {@code JDialog}you must use either the {@code JDialog(Window)} or{@code JDialog(Dialog)} constructor with an argument of{@code null}.                
                <param>
                    owner the {@code Frame} from which the dialog is displayed                    
                </param>
                <param>
                    modal specifies whether dialog blocks user input to other top-level
                      windows when shown. If {@code true}, the modality type property is set to{@code DEFAULT_MODALITY_TYPE}, otherwise the dialog is modeless.                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="204">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="208">
                Creates a modeless dialog with the specified title and
                  with the specified owner frame.  If {@code owner}is {@code null}, a shared, hidden frame will be set as the
                  owner of the dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.
                  &lt;p&gt;
                  NOTE: This constructor does not allow you to create an unowned{@code JDialog}. To create an unowned {@code JDialog}you must use either the {@code JDialog(Window)} or{@code JDialog(Dialog)} constructor with an argument of{@code null}.                
                <param>
                    owner the {@code Frame} from which the dialog is displayed                    
                </param>
                <param>
                    title  the {@code String} to display in the dialog's
                      title bar                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="231">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="235">
                Creates a dialog with the specified title, owner {@code Frame}and modality. If {@code owner} is {@code null},
                  a shared, hidden frame will be set as the owner of this dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.
                  &lt;p&gt;
                  NOTE: Any popup components ({@code JComboBox},{@code JPopupMenu}, {@code JMenuBar})
                  created within a modal dialog will be forced to be lightweight.
                  &lt;p&gt;
                  NOTE: This constructor does not allow you to create an unowned{@code JDialog}. To create an unowned {@code JDialog}you must use either the {@code JDialog(Window)} or{@code JDialog(Dialog)} constructor with an argument of{@code null}.                
                <param>
                    owner the {@code Frame} from which the dialog is displayed                    
                </param>
                <param>
                    title  the {@code String} to display in the dialog's
                      title bar                    
                </param>
                <param>
                    modal specifies whether dialog blocks user input to other top-level
                      windows when shown. If {@code true}, the modality type property is set to{@code DEFAULT_MODALITY_TYPE} otherwise the dialog is modeless                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="270">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                </params>
                <scope line="273">
                    <declaration name="ownerShutdownListener" type="WindowListener" line="274"/>
                </scope>
            </method>
            <javadoc line="281">
                Creates a dialog with the specified title,
                  owner {@code Frame}, modality and {@code GraphicsConfiguration}.
                  If {@code owner} is {@code null},
                  a shared, hidden frame will be set as the owner of this dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.
                  &lt;p&gt;
                  NOTE: Any popup components ({@code JComboBox},{@code JPopupMenu}, {@code JMenuBar})
                  created within a modal dialog will be forced to be lightweight.
                  &lt;p&gt;
                  NOTE: This constructor does not allow you to create an unowned{@code JDialog}. To create an unowned {@code JDialog}you must use either the {@code JDialog(Window)} or{@code JDialog(Dialog)} constructor with an argument of{@code null}.                
                <param>
                    owner the {@code Frame} from which the dialog is displayed                    
                </param>
                <param>
                    title  the {@code String} to display in the dialog's
                      title bar                    
                </param>
                <param>
                    modal specifies whether dialog blocks user input to other top-level
                      windows when shown. If {@code true}, the modality type property is set to{@code DEFAULT_MODALITY_TYPE}, otherwise the dialog is modeless.                    
                </param>
                <param>
                    gc the {@code GraphicsConfiguration} of the target screen device;
                      if {@code null}, the default system {@code GraphicsConfiguration}is assumed                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="321">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="324">
                    <declaration name="ownerShutdownListener" type="WindowListener" line="325"/>
                </scope>
            </method>
            <javadoc line="332">
                Creates a modeless dialog with the specified {@code Dialog}as its owner and an empty title.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the owner {@code Dialog} from which the dialog is displayed
                      or {@code null} if this dialog has no owner                    
                </param>
                <throws>
                    HeadlessException {@code if GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="346">
                <params>
                    <param name="owner" type="Dialog"/>
                </params>
            </method>
            <javadoc line="350">
                Creates a dialog with an empty title and the specified modality and{@code Dialog} as its owner.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the owner {@code Dialog} from which the dialog is displayed
                      or {@code null} if this dialog has no owner                    
                </param>
                <param>
                    modal specifies whether dialog blocks user input to other top-level
                      windows when shown. If {@code true}, the modality type property is set to{@code DEFAULT_MODALITY_TYPE}, otherwise the dialog is modeless.                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="372">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="376">
                Creates a modeless dialog with the specified title and
                  with the specified owner dialog.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the owner {@code Dialog} from which the dialog is displayed
                      or {@code null} if this dialog has no owner                    
                </param>
                <param>
                    title  the {@code String} to display in the dialog's
                      title bar                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="392">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="396">
                Creates a dialog with the specified title, modality
                  and the specified owner {@code Dialog}.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the owner {@code Dialog} from which the dialog is displayed
                      or {@code null} if this dialog has no owner                    
                </param>
                <param>
                    title  the {@code String} to display in the dialog's
                      title bar                    
                </param>
                <param>
                    modal specifies whether dialog blocks user input to other top-level
                      windows when shown. If {@code true}, the modality type property is set to{@code DEFAULT_MODALITY_TYPE}, otherwise the dialog is modeless                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JDialog" type="constructor" line="420">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                </params>
            </method>
            <javadoc line="425">
                Creates a dialog with the specified title, owner {@code Dialog},
                  modality and {@code GraphicsConfiguration}.
                  &lt;p&gt;
                  NOTE: Any popup components ({@code JComboBox},{@code JPopupMenu}, {@code JMenuBar})
                  created within a modal dialog will be forced to be lightweight.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the owner {@code Dialog} from which the dialog is displayed
                      or {@code null} if this dialog has no owner                    
                </param>
                <param>
                    title  the {@code String} to display in the dialog's
                      title bar                    
                </param>
                <param>
                    modal specifies whether dialog blocks user input to other top-level
                      windows when shown. If {@code true}, the modality type property is set to{@code DEFAULT_MODALITY_TYPE}, otherwise the dialog is modeless                    
                </param>
                <param>
                    gc the {@code GraphicsConfiguration} of the target screen device;
                      if {@code null}, the default system {@code GraphicsConfiguration}is assumed                    
                </param>
                <throws>
                    HeadlessException if {@code GraphicsEnvironment.isHeadless()}returns {@code true}.                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog.ModalityType#MODELESS                    
                </see>
                <see>
                    java.awt.Dialog#DEFAULT_MODALITY_TYPE                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="459">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="464">
                Creates a modeless dialog with the specified {@code Window}as its owner and an empty title.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the {@code Window} from which the dialog is displayed or{@code null} if this dialog has no owner                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the {@code owner} is not an instance of {@link java.awt.Dialog Dialog}or {@link java.awt.Frame Frame}                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the {@code owner}'s {@code GraphicsConfiguration} is not from a screen device                    
                </throws>
                <throws>
                    HeadlessExceptionwhen {@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="487">
                <params>
                    <param name="owner" type="Window"/>
                </params>
            </method>
            <javadoc line="491">
                Creates a dialog with an empty title and the specified modality and{@code Window} as its owner.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the {@code Window} from which the dialog is displayed or{@code null} if this dialog has no owner                    
                </param>
                <param>
                    modalityType specifies whether dialog blocks input to other
                      windows when shown. {@code null} value and unsupported modality
                      types are equivalent to {@code MODELESS}                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the {@code owner} is not an instance of {@link java.awt.Dialog Dialog}or {@link java.awt.Frame Frame}                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the {@code owner}'s {@code GraphicsConfiguration} is not from a screen device                    
                </throws>
                <throws>
                    HeadlessExceptionwhen {@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    SecurityExceptionif the calling thread does not have permission to create modal dialogs
                      with the given {@code modalityType}                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="523">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="modalityType" type="ModalityType"/>
                </params>
            </method>
            <javadoc line="527">
                Creates a modeless dialog with the specified title and owner{@code Window}.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the {@code Window} from which the dialog is displayed or{@code null} if this dialog has no owner                    
                </param>
                <param>
                    title the {@code String} to display in the dialog's
                      title bar or {@code null} if the dialog has no title                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the {@code owner} is not an instance of {@link java.awt.Dialog Dialog}or {@link java.awt.Frame Frame}                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the {@code owner}'s {@code GraphicsConfiguration} is not from a screen device                    
                </throws>
                <throws>
                    HeadlessExceptionwhen {@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="552">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="556">
                Creates a dialog with the specified title, owner {@code Window} and
                  modality.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the {@code Window} from which the dialog is displayed or{@code null} if this dialog has no owner                    
                </param>
                <param>
                    title the {@code String} to display in the dialog's
                      title bar or {@code null} if the dialog has no title                    
                </param>
                <param>
                    modalityType specifies whether dialog blocks input to other
                      windows when shown. {@code null} value and unsupported modality
                      types are equivalent to {@code MODELESS}                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the {@code owner} is not an instance of {@link java.awt.Dialog Dialog}or {@link java.awt.Frame Frame}                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the {@code owner}'s {@code GraphicsConfiguration} is not from a screen device                    
                </throws>
                <throws>
                    HeadlessExceptionwhen {@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    SecurityExceptionif the calling thread does not have permission to create modal dialogs
                      with the given {@code modalityType}                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="590">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="title" type="String"/>
                    <param name="modalityType" type="Dialog.ModalityType"/>
                </params>
            </method>
            <javadoc line="595">
                Creates a dialog with the specified title, owner {@code Window},
                  modality and {@code GraphicsConfiguration}.
                  &lt;p&gt;
                  NOTE: Any popup components ({@code JComboBox},{@code JPopupMenu}, {@code JMenuBar})
                  created within a modal dialog will be forced to be lightweight.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by {@code JComponent.getDefaultLocale}.                
                <param>
                    owner the {@code Window} from which the dialog is displayed or{@code null} if this dialog has no owner                    
                </param>
                <param>
                    title the {@code String} to display in the dialog's
                      title bar or {@code null} if the dialog has no title                    
                </param>
                <param>
                    modalityType specifies whether dialog blocks input to other
                      windows when shown. {@code null} value and unsupported modality
                      types are equivalent to {@code MODELESS}                    
                </param>
                <param>
                    gc the {@code GraphicsConfiguration} of the target screen device;
                      if {@code null}, the default system {@code GraphicsConfiguration}is assumed                    
                </param>
                <throws>
                    IllegalArgumentExceptionif the {@code owner} is not an instance of {@link java.awt.Dialog Dialog}or {@link java.awt.Frame Frame}                    
                </throws>
                <throws>
                    IllegalArgumentExceptionif the {@code owner}'s {@code GraphicsConfiguration} is not from a screen device                    
                </throws>
                <throws>
                    HeadlessExceptionwhen {@code GraphicsEnvironment.isHeadless()} returns {@code true}                    
                </throws>
                <throws>
                    SecurityExceptionif the calling thread does not have permission to create modal dialogs
                      with the given {@code modalityType}                    
                </throws>
                <see>
                    java.awt.Dialog.ModalityType                    
                </see>
                <see>
                    java.awt.Dialog#setModal                    
                </see>
                <see>
                    java.awt.Dialog#setModalityType                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="JDialog" type="constructor" line="636">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="title" type="String"/>
                    <param name="modalityType" type="Dialog.ModalityType"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="641">
                Called by the constructors to init the {@code JDialog} properly.                
            </javadoc>
            <method name="dialogInit" type="void" line="644">
                <scope line="649">
                    <declaration name="supportsWindowDecorations" type="boolean" line="650"/>
                    <scope line="652"/>
                </scope>
            </method>
            <javadoc line="660">
                Called by the constructor methods to create the default{@code rootPane}.                
            </javadoc>
            <method name="createRootPane" type="JRootPane" line="664">
                <comment line="666">
                    NOTE: this uses setOpaque vs LookAndFeel.installProperty as there                    
                </comment>
                <comment line="667">
                    is NO reason for the RootPane not to be opaque. For painting to                    
                </comment>
                <comment line="668">
                    work the contentPane must be opaque, therefor the RootPane can                    
                </comment>
                <comment line="669">
                    also be opaque.                    
                </comment>
                <declaration name="rp" type="JRootPane" line="665"/>
            </method>
            <javadoc line="674">
                Handles window events depending on the state of the{@code defaultCloseOperation} property.                
                <see>
                    #setDefaultCloseOperation                    
                </see>
            </javadoc>
            <method name="processWindowEvent" type="void" line="680">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <scope line="683"/>
            </method>
            <javadoc line="699">
                Sets the operation that will happen by default when
                  the user initiates a &quot;close&quot; on this dialog.
                  You must specify one of the following choices:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;{@code DO_NOTHING_ON_CLOSE}(defined in {@code WindowConstants}):
                  Don&apos;t do anything; require the
                  program to handle the operation in the {@code windowClosing}method of a registered {@code WindowListener} object.
                  &lt;li&gt;{@code HIDE_ON_CLOSE}(defined in {@code WindowConstants}):
                  Automatically hide the dialog after
                  invoking any registered {@code WindowListener}objects.
                  &lt;li&gt;{@code DISPOSE_ON_CLOSE}(defined in {@code WindowConstants}):
                  Automatically hide and dispose the
                  dialog after invoking any registered {@code WindowListener}objects.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The value is set to {@code HIDE_ON_CLOSE} by default. Changes
                  to the value of this property cause the firing of a property
                  change event, with property name &quot;defaultCloseOperation&quot;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: When the last displayable window within the
                  Java virtual machine (VM) is disposed of, the VM may
                  terminate.  See &lt;a href=&quot;../../java/awt/doc-files/AWTThreadIssues.html&quot;&gt;
                  AWT Threading Issues&lt;/a&gt; for more information.                
                <param>
                    operation the operation which should be performed when the
                      user closes the dialog                    
                </param>
                <throws>
                    IllegalArgumentException if defaultCloseOperation value
                      isn't one of the above valid values                    
                </throws>
                <see>
                    #addWindowListener                    
                </see>
                <see>
                    #getDefaultCloseOperation                    
                </see>
                <see>
                    WindowConstants                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      enum: DO_NOTHING_ON_CLOSE WindowConstants.DO_NOTHING_ON_CLOSE
                      HIDE_ON_CLOSE       WindowConstants.HIDE_ON_CLOSE
                      DISPOSE_ON_CLOSE    WindowConstants.DISPOSE_ON_CLOSE
                      description: The dialog's default close operation.                    
                </beaninfo>
            </javadoc>
            <method name="setDefaultCloseOperation" type="void" line="749">
                <params>
                    <param name="operation" type="int"/>
                </params>
                <scope line="752"/>
                <declaration name="oldValue" type="int" line="756"/>
            </method>
            <javadoc line="761">
                Returns the operation which occurs when the user
                  initiates a &quot;close&quot; on this dialog.                
                <return>
                    an integer indicating the window-close operation                    
                </return>
                <see>
                    #setDefaultCloseOperation                    
                </see>
            </javadoc>
            <method name="getDefaultCloseOperation" type="int" line="768"/>
            <javadoc line="772">
                Sets the {@code transferHandler} property, which is a mechanism to
                  support transfer of data into this component. Use {@code null}if the component does not support data transfer operations.
                  &lt;p&gt;
                  If the system property {@code suppressSwingDropSupport} is {@code false}(the default) and the current drop target on this component is either{@code null} or not a user-set drop target, this method will change the
                  drop target as follows: If {@code newHandler} is {@code null} it will
                  clear the drop target. If not {@code null} it will install a new{@code DropTarget}.
                  &lt;p&gt;
                  Note: When used with {@code JDialog}, {@code TransferHandler} only
                  provides data import capability, as the data export related methods
                  are currently typed to {@code JComponent}.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html&quot;&gt;
                  How to Use Drag and Drop and Data Transfer&lt;/a&gt;, a section in
                  &lt;em&gt;The Java Tutorial&lt;/em&gt;, for more information.                
                <param>
                    newHandler the new {@code TransferHandler}                    
                </param>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #getTransferHandler                    
                </see>
                <see>
                    java.awt.Component#setDropTarget                    
                </see>
                <since>
                    1.6                    
                </since>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: Mechanism for transfer of data into the component                    
                </beaninfo>
            </javadoc>
            <method name="setTransferHandler" type="void" line="805">
                <params>
                    <param name="newHandler" type="TransferHandler"/>
                </params>
                <declaration name="oldHandler" type="TransferHandler" line="806"/>
            </method>
            <javadoc line="812">
                Gets the {@code transferHandler} property.                
                <return>
                    the value of the {@code transferHandler} property                    
                </return>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTransferHandler" type="TransferHandler" line="821"/>
            <javadoc line="825">
                Calls {@code paint(g)}.  This method was overridden to
                  prevent an unnecessary call to clear the background.                
                <param>
                    g  the {@code Graphics} context in which to paint                    
                </param>
            </javadoc>
            <method name="update" type="void" line="831">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="835">
                Sets the menubar for this dialog.                
                <param>
                    menu the menubar being placed in the dialog                    
                </param>
                <see>
                    #getJMenuBar                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The menubar for accessing pulldown menus from this dialog.                    
                </beaninfo>
            </javadoc>
            <method name="setJMenuBar" type="void" line="846">
                <params>
                    <param name="menu" type="JMenuBar"/>
                </params>
            </method>
            <javadoc line="850">
                Returns the menubar set on this dialog.                
                <see>
                    #setJMenuBar                    
                </see>
            </javadoc>
            <method name="getJMenuBar" type="JMenuBar" line="855"/>
            <javadoc line="860">
                Returns whether calls to {@code add} and{@code setLayout} are forwarded to the {@code contentPane}.                
                <return>
                    true if {@code add} and {@code setLayout}are fowarded; false otherwise                    
                </return>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="isRootPaneCheckingEnabled" type="boolean" line="872"/>
            <javadoc line="877">
                Sets whether calls to {@code add} and{@code setLayout} are forwarded to the {@code contentPane}.                
                <param>
                    enabled  true if {@code add} and {@code setLayout}are forwarded, false if they should operate directly on the{@code JDialog}.                    
                </param>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfo>
                    hidden: true
                      description: Whether the add and setLayout methods are forwarded                    
                </beaninfo>
            </javadoc>
            <method name="setRootPaneCheckingEnabled" type="void" line="893">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="897">
                Adds the specified child {@code Component}.
                  This method is overridden to conditionally forward calls to the{@code contentPane}.
                  By default, children are added to the {@code contentPane} instead
                  of the frame, refer to {@link javax.swing.RootPaneContainer} for
                  details.                
                <param>
                    comp the component to be enhanced                    
                </param>
                <param>
                    constraints the constraints to be respected                    
                </param>
                <param>
                    index the index                    
                </param>
                <throws>
                    IllegalArgumentException if {@code index} is invalid                    
                </throws>
                <throws>
                    IllegalArgumentException if adding the container's parent
                      to itself                    
                </throws>
                <throws>
                    IllegalArgumentException if adding a window to a container                    
                </throws>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="917">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="918"/>
                <scope line="921"/>
            </method>
            <javadoc line="926">
                Removes the specified component from the container. If{@code comp} is not the {@code rootPane}, this will forward
                  the call to the {@code contentPane}. This will do nothing if{@code comp} is not a child of the {@code JDialog} or{@code contentPane}.                
                <param>
                    comp the component to be removed                    
                </param>
                <throws>
                    NullPointerException if {@code comp} is null                    
                </throws>
                <see>
                    #add                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="938">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="939"/>
                <scope line="941"/>
            </method>
            <javadoc line="947">
                Sets the {@code LayoutManager}.
                  Overridden to conditionally forward the call to the{@code contentPane}.
                  Refer to {@link javax.swing.RootPaneContainer} for
                  more information.                
                <param>
                    manager the {@code LayoutManager}                    
                </param>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="setLayout" type="void" line="958">
                <params>
                    <param name="manager" type="LayoutManager"/>
                </params>
                <scope line="959"/>
                <scope line="962"/>
            </method>
            <javadoc line="968">
                Returns the {@code rootPane} object for this dialog.                
                <see>
                    #setRootPane                    
                </see>
                <see>
                    RootPaneContainer#getRootPane                    
                </see>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="974"/>
            <javadoc line="979">
                Sets the {@code rootPane} property.
                  This method is called by the constructor.                
                <param>
                    root the {@code rootPane} object for this dialog                    
                </param>
                <see>
                    #getRootPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: the RootPane object for this dialog.                    
                </beaninfo>
            </javadoc>
            <method name="setRootPane" type="void" line="991">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="992"/>
                <scope line="996">
                    <declaration name="checkingEnabled" type="boolean" line="997"/>
                    <scope line="998"/>
                    <scope line="1002"/>
                </scope>
            </method>
            <javadoc line="1009">
                Returns the {@code contentPane} object for this dialog.                
                <return>
                    the {@code contentPane} property                    
                </return>
                <see>
                    #setContentPane                    
                </see>
                <see>
                    RootPaneContainer#getContentPane                    
                </see>
            </javadoc>
            <method name="getContentPane" type="Container" line="1017"/>
            <javadoc line="1022">
                Sets the {@code contentPane} property.
                  This method is called by the constructor.
                  &lt;p&gt;
                  Swing&apos;s painting architecture requires an opaque {@code JComponent}in the containment hiearchy. This is typically provided by the
                  content pane. If you replace the content pane it is recommended you
                  replace it with an opaque {@code JComponent}.                
                <see>
                    JRootPane                    
                </see>
                <param>
                    contentPane the {@code contentPane} object for this dialog                    
                </param>
                <throws>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is {@code null}                    
                </throws>
                <see>
                    #getContentPane                    
                </see>
                <see>
                    RootPaneContainer#setContentPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The client area of the dialog where child
                      components are normally inserted.                    
                </beaninfo>
            </javadoc>
            <method name="setContentPane" type="void" line="1044">
                <params>
                    <param name="contentPane" type="Container"/>
                </params>
            </method>
            <javadoc line="1048">
                Returns the {@code layeredPane} object for this dialog.                
                <return>
                    the {@code layeredPane} property                    
                </return>
                <see>
                    #setLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#getLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="1056"/>
            <javadoc line="1060">
                Sets the {@code layeredPane} property.
                  This method is called by the constructor.                
                <param>
                    layeredPane the new {@code layeredPane} property                    
                </param>
                <throws>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the layered pane parameter is null                    
                </throws>
                <see>
                    #getLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#setLayeredPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The pane which holds the various dialog layers.                    
                </beaninfo>
            </javadoc>
            <method name="setLayeredPane" type="void" line="1075">
                <params>
                    <param name="layeredPane" type="JLayeredPane"/>
                </params>
            </method>
            <javadoc line="1079">
                Returns the {@code glassPane} object for this dialog.                
                <return>
                    the {@code glassPane} property                    
                </return>
                <see>
                    #setGlassPane                    
                </see>
                <see>
                    RootPaneContainer#getGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="1087"/>
            <javadoc line="1091">
                Sets the {@code glassPane} property.
                  This method is called by the constructor.                
                <param>
                    glassPane the {@code glassPane} object for this dialog                    
                </param>
                <see>
                    #getGlassPane                    
                </see>
                <see>
                    RootPaneContainer#setGlassPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: A transparent pane used for menu rendering.                    
                </beaninfo>
            </javadoc>
            <method name="setGlassPane" type="void" line="1103">
                <params>
                    <param name="glassPane" type="Component"/>
                </params>
            </method>
            <javadoc line="1107">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="1112"/>
            <javadoc line="1117">
                Repaints the specified rectangle of this component within{@code time} milliseconds.  Refer to {@code RepaintManager}for details on how the repaint is handled.                
                <param>
                    time   maximum time in milliseconds before update                    
                </param>
                <param>
                    x    the <i>x</i> coordinate                    
                </param>
                <param>
                    y    the <i>y</i> coordinate                    
                </param>
                <param>
                    width    the width                    
                </param>
                <param>
                    height   the height                    
                </param>
                <see>
                    RepaintManager                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="1130">
                <params>
                    <param name="time" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="1131"/>
                <scope line="1135"/>
            </method>
            <javadoc line="1140">
                Provides a hint as to whether or not newly created {@code JDialog}s
                  should have their Window decorations (such as borders, widgets to
                  close the window, title...) provided by the current look
                  and feel. If {@code defaultLookAndFeelDecorated} is true,
                  the current {@code LookAndFeel} supports providing window
                  decorations, and the current window manager supports undecorated
                  windows, then newly created {@code JDialog}s will have their
                  Window decorations provided by the current {@code LookAndFeel}.
                  Otherwise, newly created {@code JDialog}s will have their
                  Window decorations provided by the current window manager.
                  &lt;p&gt;
                  You can get the same effect on a single JDialog by doing the following:
                  &lt;pre&gt;
                  JDialog dialog = new JDialog();
                  dialog.setUndecorated(true);
                  dialog.getRootPane().setWindowDecorationStyle(JRootPane.PLAIN_DIALOG);
                  &lt;/pre&gt;                
                <param>
                    defaultLookAndFeelDecorated A hint as to whether or not current
                      look and feel should provide window decorations                    
                </param>
                <see>
                    javax.swing.LookAndFeel#getSupportsWindowDecorations                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDefaultLookAndFeelDecorated" type="void" line="1164">
                <params>
                    <param name="defaultLookAndFeelDecorated" type="boolean"/>
                </params>
                <scope line="1165"/>
                <scope line="1167"/>
            </method>
            <javadoc line="1172">
                Returns true if newly created {@code JDialog}s should have their
                  Window decorations provided by the current look and feel. This is only
                  a hint, as certain look and feels may not support this feature.                
                <return>
                    true if look and feel should provide Window decorations.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isDefaultLookAndFeelDecorated" type="boolean" line="1180">
                <declaration name="defaultLookAndFeelDecorated" type="Boolean" line="1181"/>
                <scope line="1183"/>
            </method>
            <javadoc line="1189">
                Returns a string representation of this {@code JDialog}.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be {@code null}.                
                <return>
                    a string representation of this {@code JDialog}.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1199">
                <declaration name="defaultCloseOperationString" type="String" line="1200"/>
                <scope line="1201"/>
                <scope line="1203"/>
                <scope line="1205"/>
                <declaration name="rootPaneString" type="String" line="1208"/>
                <declaration name="rootPaneCheckingEnabledString" type="String" line="1210"/>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="1224"/>
            <javadoc line="1226">
                Gets the AccessibleContext associated with this JDialog.
                  For JDialogs, the AccessibleContext takes the form of an
                  AccessibleJDialog.
                  A new AccessibleJDialog instance is created if necessary.                
                <return>
                    an AccessibleJDialog that serves as the
                      AccessibleContext of this JDialog                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1235">
                <scope line="1236"/>
            </method>
            <class name="AccessibleJDialog" line="1242">
                <extends class="AccessibleAWTDialog"/>
                <comment line="1251">
                    AccessibleContext methods                    
                </comment>
                <comment line="1252">
                                        
                </comment>
                <javadoc line="1242">
                    This class implements accessibility support for the{@code JDialog} class.  It provides an implementation of the
                      Java Accessibility API appropriate to dialog user-interface
                      elements.                    
                </javadoc>
                <javadoc line="1252">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be null if this
                          object does not have a name                        
                    </return>
                </javadoc>
                <method name="getAccessibleName" type="String" line="1258">
                    <scope line="1259"/>
                    <scope line="1261">
                        <scope line="1262"/>
                        <scope line="1264"/>
                    </scope>
                </method>
                <javadoc line="1270">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1277">
                    <declaration name="states" type="AccessibleStateSet" line="1278"/>
                    <scope line="1280"/>
                    <scope line="1283"/>
                    <scope line="1286"/>
                </method>
            </class>
        </class>
    </source>