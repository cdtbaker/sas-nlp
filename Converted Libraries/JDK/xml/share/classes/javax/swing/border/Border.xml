<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.border">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Component"/>
        <interface name="Border">
            <javadoc line="6">
                Interface describing an object capable of rendering a border
                  around the edges of a swing component.
                  For examples of using borders see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/border.html&quot;&gt;How to Use Borders&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  In the Swing component set, borders supercede Insets as the
                  mechanism for creating a (decorated or plain) area around the
                  edge of a component.
                  &lt;p&gt;
                  Usage Notes:
                  &lt;ul&gt;
                  &lt;li&gt;Use EmptyBorder to create a plain border (this mechanism
                  replaces its predecessor, &lt;code&gt;setInsets&lt;/code&gt;).
                  &lt;li&gt;Use CompoundBorder to nest multiple border objects, creating
                  a single, combined border.
                  &lt;li&gt;Border instances are designed to be shared. Rather than creating
                  a new border object using one of border classes, use the
                  BorderFactory methods, which produces a shared instance of the
                  common border types.
                  &lt;li&gt;Additional border styles include BevelBorder, SoftBevelBorder,
                  EtchedBorder, LineBorder, TitledBorder, and MatteBorder.
                  &lt;li&gt;To create a new border class, subclass AbstractBorder.
                  &lt;/ul&gt;                
                <author>
                    David Kloba                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <see>
                    javax.swing.BorderFactory                    
                </see>
                <see>
                    EmptyBorder                    
                </see>
                <see>
                    CompoundBorder                    
                </see>
            </javadoc>
            <method name="paintBorder" type="void" line="38"/>
            <javadoc line="38">
                Paints the border for the specified component with the specified
                  position and size.                
                <param>
                    c the component for which this border is being painted                    
                </param>
                <param>
                    g the paint graphics                    
                </param>
                <param>
                    x the x position of the painted border                    
                </param>
                <param>
                    y the y position of the painted border                    
                </param>
                <param>
                    width the width of the painted border                    
                </param>
                <param>
                    height the height of the painted border                    
                </param>
            </javadoc>
            <method name="getBorderInsets" type="Insets" line="49"/>
            <javadoc line="49">
                Returns the insets of the border.                
                <param>
                    c the component for which this border insets value applies                    
                </param>
            </javadoc>
            <method name="isBorderOpaque" type="boolean" line="54"/>
            <javadoc line="54">
                Returns whether or not the border is opaque.  If the border
                  is opaque, it is responsible for filling in it&apos;s own
                  background when painting.                
            </javadoc>
        </interface>
    </source>