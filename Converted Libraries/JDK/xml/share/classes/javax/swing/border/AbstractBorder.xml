<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.border">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.Component"/>
        <import package="java.io.Serializable"/>
        <class name="AbstractBorder" line="7">
            <implements interface="Border"/>
            <implements interface="Serializable"/>
            <javadoc line="7">
                A class that implements an empty border with no size.
                  This provides a convenient base class from which other border
                  classes can be easily derived.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <javadoc line="23">
                This default implementation does no painting.                
                <param>
                    c the component for which this border is being painted                    
                </param>
                <param>
                    g the paint graphics                    
                </param>
                <param>
                    x the x position of the painted border                    
                </param>
                <param>
                    y the y position of the painted border                    
                </param>
                <param>
                    width the width of the painted border                    
                </param>
                <param>
                    height the height of the painted border                    
                </param>
            </javadoc>
            <method name="paintBorder" type="void" line="32">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="34">
                This default implementation returns a new {@link Insets} object
                  that is initialized by the {@link #getBorderInsets(Component,Insets)}method.
                  By default the {@code top}, {@code left}, {@code bottom},
                  and {@code right} fields are set to {@code 0}.                
                <param>
                    c  the component for which this border insets value applies                    
                </param>
                <return>
                    a new {@link Insets} object                    
                </return>
            </javadoc>
            <method name="getBorderInsets" type="Insets" line="42">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="45">
                Reinitializes the insets parameter with this Border&apos;s current Insets.                
                <param>
                    c the component for which this border insets value applies                    
                </param>
                <param>
                    insets the object to be reinitialized                    
                </param>
                <return>
                    the &lt;code&gt;insets&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getBorderInsets" type="Insets" line="51">
                <params>
                    <param name="c" type="Component"/>
                    <param name="insets" type="Insets"/>
                </params>
            </method>
            <javadoc line="55">
                This default implementation returns false.                
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="isBorderOpaque" type="boolean" line="59"/>
            <javadoc line="62">
                This convenience method calls the static method.                
                <param>
                    c the component for which this border is being computed                    
                </param>
                <param>
                    x the x position of the border                    
                </param>
                <param>
                    y the y position of the border                    
                </param>
                <param>
                    width the width of the border                    
                </param>
                <param>
                    height the height of the border                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; containing the interior coordinates                    
                </return>
            </javadoc>
            <method name="getInteriorRectangle" type="Rectangle" line="71">
                <params>
                    <param name="c" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Returns a rectangle using the arguments minus the
                  insets of the border. This is useful for determining the area
                  that components should draw in that will not intersect the border.                
                <param>
                    c the component for which this border is being computed                    
                </param>
                <param>
                    b the &lt;code&gt;Border&lt;/code&gt; object                    
                </param>
                <param>
                    x the x position of the border                    
                </param>
                <param>
                    y the y position of the border                    
                </param>
                <param>
                    width the width of the border                    
                </param>
                <param>
                    height the height of the border                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; containing the interior coordinates                    
                </return>
            </javadoc>
            <method name="getInteriorRectangle" type="Rectangle" line="86">
                <params>
                    <param name="c" type="Component"/>
                    <param name="b" type="Border"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="insets" type="Insets" line="87"/>
            </method>
            <javadoc line="92">
                Returns the baseline.  A return value less than 0 indicates the border
                  does not have a reasonable baseline.
                  &lt;p&gt;
                  The default implementation returns -1.  Subclasses that support
                  baseline should override appropriately.  If a value &amp;gt;= 0 is
                  returned, then the component has a valid baseline for any
                  size &amp;gt;= the minimum size and &lt;code&gt;getBaselineResizeBehavior&lt;/code&gt;
                  can be used to determine how the baseline changes with size.                
                <param>
                    c &lt;code&gt;Component&lt;/code&gt; baseline is being requested for                    
                </param>
                <param>
                    width the width to get the baseline for                    
                </param>
                <param>
                    height the height to get the baseline for                    
                </param>
                <return>
                    the baseline or &amp;lt; 0 indicating there is no reasonable
                      baseline                    
                </return>
                <throws>
                    IllegalArgumentException if width or height is &amp;lt; 0                    
                </throws>
                <see>
                    java.awt.Component#getBaseline(int,int)                    
                </see>
                <see>
                    java.awt.Component#getBaselineResizeBehavior()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaseline" type="int" line="111">
                <params>
                    <param name="c" type="Component"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="112"/>
            </method>
            <javadoc line="117">
                Returns an enum indicating how the baseline of a component
                  changes as the size changes.  This method is primarily meant for
                  layout managers and GUI builders.
                  &lt;p&gt;
                  The default implementation returns
                  &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt;, subclasses that support
                  baseline should override appropriately.  Subclasses should
                  never return &lt;code&gt;null&lt;/code&gt;; if the baseline can not be
                  calculated return &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt;.  Callers
                  should first ask for the baseline using
                  &lt;code&gt;getBaseline&lt;/code&gt; and if a value &amp;gt;= 0 is returned use
                  this method.  It is acceptable for this method to return a
                  value other than &lt;code&gt;BaselineResizeBehavior.OTHER&lt;/code&gt; even if
                  &lt;code&gt;getBaseline&lt;/code&gt; returns a value less than 0.                
                <param>
                    c &lt;code&gt;Component&lt;/code&gt; to return baseline resize behavior for                    
                </param>
                <return>
                    an enum indicating how the baseline changes as the border is
                      resized                    
                </return>
                <see>
                    java.awt.Component#getBaseline(int,int)                    
                </see>
                <see>
                    java.awt.Component#getBaselineResizeBehavior()                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getBaselineResizeBehavior" type="Component.BaselineResizeBehavior" line="139">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="140"/>
            </method>
            <method name="isLeftToRight" type="boolean" line="145">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
        </class>
    </source>