<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.border">
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Component"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="CompoundBorder" line="6">
            <extends class="AbstractBorder"/>
            <javadoc line="6">
                A composite Border class used to compose two Border objects
                  into a single border by nesting an inside Border object within
                  the insets of an outside Border object.
                  For example, this class may be used to add blank margin space
                  to a component with an existing decorative border:
                  &lt;p&gt;
                  &lt;code&gt;&lt;pre&gt;
                  Border border = comp.getBorder();
                  Border margin = new EmptyBorder(10,10,10,10);
                  comp.setBorder(new CompoundBorder(border, margin));
                  &lt;/pre&gt;&lt;/code&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="outsideBorder" type="Border" line="30"/>
            <declaration name="insideBorder" type="Border" line="31"/>
            <javadoc line="32">
                Creates a compound border with null outside and inside borders.                
            </javadoc>
            <method name="CompoundBorder" type="constructor" line="35"/>
            <javadoc line="39">
                Creates a compound border with the specified outside and
                  inside borders.  Either border may be null.                
                <param>
                    outsideBorder the outside border                    
                </param>
                <param>
                    insideBorder the inside border to be nested                    
                </param>
            </javadoc>
            <method name="CompoundBorder" type="constructor" line="45">
                <params>
                    <param name="outsideBorder" type="Border"/>
                    <param name="insideBorder" type="Border"/>
                </params>
            </method>
            <javadoc line="49">
                Returns whether or not the compound border is opaque.                
                <return>
                    {@code true} if the inside and outside borders
                      are each either {@code null} or opaque;
                      or {@code false} otherwise                    
                </return>
            </javadoc>
            <method name="isBorderOpaque" type="boolean" line="55"/>
            <javadoc line="58">
                Paints the compound border by painting the outside border
                  with the specified position and size and then painting the
                  inside border at the specified position and size offset by
                  the insets of the outside border.                
                <param>
                    c the component for which this border is being painted                    
                </param>
                <param>
                    g the paint graphics                    
                </param>
                <param>
                    x the x position of the painted border                    
                </param>
                <param>
                    y the y position of the painted border                    
                </param>
                <param>
                    width the width of the painted border                    
                </param>
                <param>
                    height the height of the painted border                    
                </param>
            </javadoc>
            <method name="paintBorder" type="void" line="70">
                <params>
                    <param name="c" type="Component"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="nextInsets" type="Insets" line="71"/>
                <declaration name="px" type="int" line="72"/>
                <scope line="77"/>
            </method>
            <javadoc line="87">
                Reinitialize the insets parameter with this Border&apos;s current Insets.                
                <param>
                    c the component for which this border insets value applies                    
                </param>
                <param>
                    insets the object to be reinitialized                    
                </param>
            </javadoc>
            <method name="getBorderInsets" type="Insets" line="92">
                <params>
                    <param name="c" type="Component"/>
                    <param name="insets" type="Insets"/>
                </params>
                <declaration name="nextInsets" type="Insets" line="93"/>
                <scope line="95"/>
                <scope line="102"/>
            </method>
            <javadoc line="111">
                Returns the outside border object.                
            </javadoc>
            <method name="getOutsideBorder" type="Border" line="114"/>
            <javadoc line="117">
                Returns the inside border object.                
            </javadoc>
            <method name="getInsideBorder" type="Border" line="120"/>
        </class>
    </source>