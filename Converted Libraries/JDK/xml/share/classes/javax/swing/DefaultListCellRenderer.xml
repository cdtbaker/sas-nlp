<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.io.Serializable"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="DefaultListCellRenderer" line="10">
            <extends class="JLabel"/>
            <implements interface="ListCellRenderer">
                <type_params>
                    <type_param name="Object"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="10">
                Renders an item in a list.
                  &lt;p&gt;
                  &lt;strong&gt;&lt;a name=&quot;override&quot;&gt;Implementation Note:&lt;/a&gt;&lt;/strong&gt;
                  This class overrides
                  &lt;code&gt;invalidate&lt;/code&gt;,
                  &lt;code&gt;validate&lt;/code&gt;,
                  &lt;code&gt;revalidate&lt;/code&gt;,
                  &lt;code&gt;repaint&lt;/code&gt;,
                  &lt;code&gt;isOpaque&lt;/code&gt;,
                  and
                  &lt;code&gt;firePropertyChange&lt;/code&gt;
                  solely to improve performance.
                  If not overridden, these frequently called methods would execute code paths
                  that are unnecessary for the default list cell renderer.
                  If you write your own renderer,
                  take care to weigh the benefits and
                  drawbacks of overriding these methods.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Philip Milne                    
                </author>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="SAFE_NO_FOCUS_BORDER" type="Border" line="41"/>
            <javadoc line="41">
                An empty &lt;code&gt;Border&lt;/code&gt;. This field might not be used. To change the
                  &lt;code&gt;Border&lt;/code&gt; used by this renderer override the
                  &lt;code&gt;getListCellRendererComponent&lt;/code&gt; method and set the border
                  of the returned component directly.                
            </javadoc>
            <declaration name="DEFAULT_NO_FOCUS_BORDER" type="Border" line="48"/>
            <declaration name="noFocusBorder" type="Border" line="49"/>
            <javadoc line="50">
                Constructs a default renderer object for an item
                  in a list.                
            </javadoc>
            <method name="DefaultListCellRenderer" type="constructor" line="54"/>
            <method name="getNoFocusBorder" type="Border" line="60">
                <declaration name="border" type="Border" line="61"/>
                <scope line="62"/>
                <scope line="66">
                    <scope line="67"/>
                </scope>
            </method>
            <method name="getListCellRendererComponent" type="Component" line="73">
                <params>
                    <param name="list" type="JList&lt;?&gt;"/>
                    <param name="value" type="Object"/>
                    <param name="index" type="int"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="cellHasFocus" type="boolean"/>
                </params>
                <declaration name="bg" type="Color" line="75"/>
                <declaration name="fg" type="Color" line="76"/>
                <declaration name="dropLocation" type="JList.DropLocation" line="77"/>
                <scope line="78"/>
                <scope line="83"/>
                <scope line="87"/>
                <scope line="91"/>
                <scope line="95"/>
                <declaration name="border" type="Border" line="101"/>
                <scope line="102">
                    <scope line="103"/>
                    <scope line="106"/>
                </scope>
                <scope line="110"/>
            </method>
            <javadoc line="116">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the background is completely opaque
                      and differs from the JList&apos;s background;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="isOpaque" type="boolean" line="125">
                <declaration name="back" type="Color" line="126"/>
                <declaration name="p" type="Component" line="127"/>
                <scope line="128"/>
                <declaration name="colorMatch" type="boolean" line="131"/>
            </method>
            <javadoc line="134">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="validate" type="void" line="139"/>
            <javadoc line="141">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="invalidate" type="void" line="147"/>
            <javadoc line="149">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="155"/>
            <javadoc line="157">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="revalidate" type="void" line="162"/>
            <javadoc line="164">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="repaint" type="void" line="169">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="171">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="repaint" type="void" line="176">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="178">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="183">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="184"/>
            </method>
            <javadoc line="188">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="193">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="byte"/>
                    <param name="newValue" type="byte"/>
                </params>
            </method>
            <javadoc line="195">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="200">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="char"/>
                    <param name="newValue" type="char"/>
                </params>
            </method>
            <javadoc line="202">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="207">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="short"/>
                    <param name="newValue" type="short"/>
                </params>
            </method>
            <javadoc line="209">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="214">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="216">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="221">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="long"/>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="223">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="228">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="float"/>
                    <param name="newValue" type="float"/>
                </params>
            </method>
            <javadoc line="230">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="235">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="double"/>
                    <param name="newValue" type="double"/>
                </params>
            </method>
            <javadoc line="237">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="242">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="boolean"/>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <class name="UIResource" line="244">
                <extends class="DefaultListCellRenderer"/>
                <implements interface="javax.swing.plaf.UIResource"/>
                <javadoc line="244">
                    A subclass of DefaultListCellRenderer that implements UIResource.
                      DefaultListCellRenderer doesn&apos;t implement UIResource
                      directly so that applications can safely override the
                      cellRenderer property with DefaultListCellRenderer subclasses.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
            </class>
        </class>
    </source>