<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.event"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <class name="JTextField" line="42">
            <extends class="JTextComponent"/>
            <comment line="725">
                --- Scrolling support -----------------------------------                
            </comment>
            <comment line="799">
                --- variables -------------------------------------------                
            </comment>
            <comment line="824">
                --- Action implementations -----------------------------------                
            </comment>
            <comment line="826">
                Note that JFormattedTextField.CommitAction extends this                
            </comment>
            <comment line="909">
                ///////////////
                 Accessibility support                
            </comment>
            <implements interface="SwingConstants"/>
            <javadoc line="42">
                &lt;code&gt;JTextField&lt;/code&gt; is a lightweight component that allows the editing
                  of a single line of text.
                  For information on and examples of using text fields,
                  see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/textfield.html&quot;&gt;How to Use Text Fields&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;code&gt;JTextField&lt;/code&gt; is intended to be source-compatible
                  with &lt;code&gt;java.awt.TextField&lt;/code&gt; where it is reasonable to do so.  This
                  component has capabilities not found in the &lt;code&gt;java.awt.TextField&lt;/code&gt;
                  class.  The superclass should be consulted for additional capabilities.
                  &lt;p&gt;
                  &lt;code&gt;JTextField&lt;/code&gt; has a method to establish the string used as the
                  command string for the action event that gets fired.  The
                  &lt;code&gt;java.awt.TextField&lt;/code&gt; used the text of the field as the command
                  string for the &lt;code&gt;ActionEvent&lt;/code&gt;.
                  &lt;code&gt;JTextField&lt;/code&gt; will use the command
                  string set with the &lt;code&gt;setActionCommand&lt;/code&gt; method if not &lt;code&gt;null&lt;/code&gt;,
                  otherwise it will use the text of the field as a compatibility with
                  &lt;code&gt;java.awt.TextField&lt;/code&gt;.
                  &lt;p&gt;
                  The method &lt;code&gt;setEchoChar&lt;/code&gt; and &lt;code&gt;getEchoChar&lt;/code&gt;
                  are not provided directly to avoid a new implementation of a
                  pluggable look-and-feel inadvertently exposing password characters.
                  To provide password-like services a separate class &lt;code&gt;JPasswordField&lt;/code&gt;
                  extends &lt;code&gt;JTextField&lt;/code&gt; to provide this service with an independently
                  pluggable look-and-feel.
                  &lt;p&gt;
                  The &lt;code&gt;java.awt.TextField&lt;/code&gt; could be monitored for changes by adding
                  a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;&apos;s.
                  In the &lt;code&gt;JTextComponent&lt;/code&gt; based
                  components, changes are broadcasted from the model via a
                  &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;.
                  The &lt;code&gt;DocumentEvent&lt;/code&gt; gives
                  the location of the change and the kind of change if desired.
                  The code fragment might look something like:
                  &lt;pre&gt;&lt;code&gt;
                  &amp;nbsp;   DocumentListener myListener = ??;
                  &amp;nbsp;   JTextField myArea = ??;
                  &amp;nbsp;   myArea.getDocument().addDocumentListener(myListener);
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  The horizontal alignment of &lt;code&gt;JTextField&lt;/code&gt; can be set to be left
                  justified, leading justified, centered, right justified or trailing justified.
                  Right/trailing justification is useful if the required size
                  of the field text is smaller than the size allocated to it.
                  This is determined by the &lt;code&gt;setHorizontalAlignment&lt;/code&gt;
                  and &lt;code&gt;getHorizontalAlignment&lt;/code&gt; methods.  The default
                  is to be leading justified.
                  &lt;p&gt;
                  How the text field consumes VK_ENTER events depends
                  on whether the text field has any action listeners.
                  If so, then VK_ENTER results in the listeners
                  getting an ActionEvent,
                  and the VK_ENTER event is consumed.
                  This is compatible with how AWT text fields handle VK_ENTER events.
                  If the text field has no action listeners, then as of v 1.3 the VK_ENTER
                  event is not consumed.  Instead, the bindings of ancestor components
                  are processed, which enables the default button feature of
                  JFC/Swing to work.
                  &lt;p&gt;
                  Customized fields can easily be created by extending the model and
                  changing the default model provided.  For example, the following piece
                  of code will create a field that holds only upper case characters.  It
                  will work even if text is pasted into from the clipboard or it is altered via
                  programmatic changes.
                  &lt;pre&gt;&lt;code&gt;
                  &amp;nbsp;public class UpperCaseField extends JTextField {
                  &amp;nbsp;
                  &amp;nbsp;    public UpperCaseField(int cols) {
                  &amp;nbsp;        super(cols);
                  &amp;nbsp;    }
                  &amp;nbsp;
                  &amp;nbsp;    protected Document createDefaultModel() {
                  &amp;nbsp;        return new UpperCaseDocument();
                  &amp;nbsp;    }
                  &amp;nbsp;
                  &amp;nbsp;    static class UpperCaseDocument extends PlainDocument {
                  &amp;nbsp;
                  &amp;nbsp;        public void insertString(int offs, String str, AttributeSet a)
                  &amp;nbsp;            throws BadLocationException {
                  &amp;nbsp;
                  &amp;nbsp;            if (str == null) {
                  &amp;nbsp;                return;
                  &amp;nbsp;            }
                  &amp;nbsp;            char[] upper = str.toCharArray();
                  &amp;nbsp;            for (int i = 0; i &lt; upper.length; i++) {
                  &amp;nbsp;                upper[i] = Character.toUpperCase(upper[i]);
                  &amp;nbsp;            }
                  &amp;nbsp;            super.insertString(offs, new String(upper), a);
                  &amp;nbsp;        }
                  &amp;nbsp;    }
                  &amp;nbsp;}
                  &lt;/code&gt;&lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component which allows for the editing of a single line of text.                    
                </beaninfo>
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    #setActionCommand                    
                </see>
                <see>
                    JPasswordField                    
                </see>
                <see>
                    #addActionListener                    
                </see>
            </javadoc>
            <javadoc line="166">
                Constructs a new &lt;code&gt;TextField&lt;/code&gt;.  A default model is created,
                  the initial string is &lt;code&gt;null&lt;/code&gt;,
                  and the number of columns is set to 0.                
            </javadoc>
            <method name="JTextField" type="constructor" line="171"/>
            <javadoc line="175">
                Constructs a new &lt;code&gt;TextField&lt;/code&gt; initialized with the
                  specified text. A default model is created and the number of
                  columns is 0.                
                <param>
                    text the text to be displayed, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JTextField" type="constructor" line="182">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="186">
                Constructs a new empty &lt;code&gt;TextField&lt;/code&gt; with the specified
                  number of columns.
                  A default model is created and the initial string is set to
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    columns  the number of columns to use to calculate
                      the preferred width; if columns is set to zero, the
                      preferred width will be whatever naturally results from
                      the component implementation                    
                </param>
            </javadoc>
            <method name="JTextField" type="constructor" line="197">
                <params>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="201">
                Constructs a new &lt;code&gt;TextField&lt;/code&gt; initialized with the
                  specified text and columns.  A default model is created.                
                <param>
                    text the text to be displayed, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    columns  the number of columns to use to calculate
                      the preferred width; if columns is set to zero, the
                      preferred width will be whatever naturally results from
                      the component implementation                    
                </param>
            </javadoc>
            <method name="JTextField" type="constructor" line="211">
                <params>
                    <param name="text" type="String"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="215">
                Constructs a new &lt;code&gt;JTextField&lt;/code&gt; that uses the given text
                  storage model and the given number of columns.
                  This is the constructor through which the other constructors feed.
                  If the document is &lt;code&gt;null&lt;/code&gt;, a default model is created.                
                <param>
                    doc  the text storage to use; if this is &lt;code&gt;null&lt;/code&gt;,
                      a default will be provided by calling the
                      &lt;code&gt;createDefaultModel&lt;/code&gt; method                    
                </param>
                <param>
                    text  the initial string to display, or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    columns  the number of columns to use to calculate
                      the preferred width &gt;= 0; if &lt;code&gt;columns&lt;/code&gt;
                      is set to zero, the preferred width will be whatever
                      naturally results from the component implementation                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;columns&lt;/code&gt; &lt; 0                    
                </exception>
            </javadoc>
            <method name="JTextField" type="constructor" line="231">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="text" type="String"/>
                    <param name="columns" type="int"/>
                </params>
                <scope line="232"/>
                <scope line="238"/>
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Gets the class ID for a UI.                
                <return>
                    the string &quot;TextFieldUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="254"/>
            <javadoc line="259">
                Associates the editor with a text document.
                  The currently registered factory is used to build a view for
                  the document, which gets displayed by the editor after revalidation.
                  A PropertyChange event (&quot;document&quot;) is propagated to each listener.                
                <param>
                    doc  the document to display/edit                    
                </param>
                <see>
                    #getDocument                    
                </see>
                <beaninfo>
                    description: the text document model
                      bound: true
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setDocument" type="void" line="272">
                <params>
                    <param name="doc" type="Document"/>
                </params>
                <scope line="273"/>
            </method>
            <javadoc line="279">
                Calls to &lt;code&gt;revalidate&lt;/code&gt; that come from within the
                  textfield itself will
                  be handled by validating the textfield, unless the textfield
                  is contained within a &lt;code&gt;JViewport&lt;/code&gt;,
                  in which case this returns false.                
                <return>
                    if the parent of this textfield is a &lt;code&gt;JViewPort&lt;/code&gt;
                      return false, otherwise return true                    
                </return>
                <see>
                    JComponent#revalidate                    
                </see>
                <see>
                    JComponent#isValidateRoot                    
                </see>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
            </javadoc>
            <method name="isValidateRoot" type="boolean" line="294"/>
            <javadoc line="299">
                Returns the horizontal alignment of the text.
                  Valid keys are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.LEFT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.CENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.RIGHT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.LEADING&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.TRAILING&lt;/code&gt;
                  &lt;/ul&gt;                
                <return>
                    the horizontal alignment                    
                </return>
            </javadoc>
            <method name="getHorizontalAlignment" type="int" line="312"/>
            <javadoc line="316">
                Sets the horizontal alignment of the text.
                  Valid keys are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.LEFT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.CENTER&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.RIGHT&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.LEADING&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;JTextField.TRAILING&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;code&gt;invalidate&lt;/code&gt; and &lt;code&gt;repaint&lt;/code&gt; are called when the
                  alignment is set,
                  and a &lt;code&gt;PropertyChange&lt;/code&gt; event (&quot;horizontalAlignment&quot;) is fired.                
                <param>
                    alignment the alignment                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;alignment&lt;/code&gt;
                      is not a valid key                    
                </exception>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Set the field alignment to LEFT, CENTER, RIGHT,
                      LEADING (the default) or TRAILING
                      enum: LEFT JTextField.LEFT CENTER JTextField.CENTER RIGHT JTextField.RIGHT
                      LEADING JTextField.LEADING TRAILING JTextField.TRAILING                    
                </beaninfo>
            </javadoc>
            <method name="setHorizontalAlignment" type="void" line="341">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="343"/>
                <scope line="346"/>
                <scope line="348"/>
            </method>
            <javadoc line="356">
                Creates the default implementation of the model
                  to be used at construction if one isn&apos;t explicitly
                  given.  An instance of &lt;code&gt;PlainDocument&lt;/code&gt; is returned.                
                <return>
                    the default model implementation                    
                </return>
            </javadoc>
            <method name="createDefaultModel" type="Document" line="363"/>
            <javadoc line="367">
                Returns the number of columns in this &lt;code&gt;TextField&lt;/code&gt;.                
                <return>
                    the number of columns &gt;= 0                    
                </return>
            </javadoc>
            <method name="getColumns" type="int" line="372"/>
            <javadoc line="376">
                Sets the number of columns in this &lt;code&gt;TextField&lt;/code&gt;,
                  and then invalidate the layout.                
                <param>
                    columns the number of columns &gt;= 0                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;columns&lt;/code&gt;
                      is less than 0                    
                </exception>
                <beaninfo>
                    description: the number of columns preferred for display                    
                </beaninfo>
            </javadoc>
            <method name="setColumns" type="void" line="386">
                <params>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="387"/>
                <scope line="388"/>
                <scope line="391"/>
            </method>
            <javadoc line="397">
                Returns the column width.
                  The meaning of what a column is can be considered a fairly weak
                  notion for some fonts.  This method is used to define the width
                  of a column.  By default this is defined to be the width of the
                  character &lt;em&gt;m&lt;/em&gt; for the font used.  This method can be
                  redefined to be some alternative amount                
                <return>
                    the column width &gt;= 1                    
                </return>
            </javadoc>
            <method name="getColumnWidth" type="int" line="407">
                <scope line="408">
                    <declaration name="metrics" type="FontMetrics" line="409"/>
                </scope>
            </method>
            <javadoc line="415">
                Returns the preferred size &lt;code&gt;Dimensions&lt;/code&gt; needed for this
                  &lt;code&gt;TextField&lt;/code&gt;.  If a non-zero number of columns has been
                  set, the width is set to the columns multiplied by
                  the column width.                
                <return>
                    the dimension of this textfield                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="423">
                <declaration name="size" type="Dimension" line="424"/>
                <scope line="425">
                    <declaration name="insets" type="Insets" line="426"/>
                </scope>
            </method>
            <javadoc line="433">
                Sets the current font.  This removes cached row height and column
                  width so the new font will be reflected.
                  &lt;code&gt;revalidate&lt;/code&gt; is called after setting the font.                
                <param>
                    f the new font                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="440">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <javadoc line="445">
                Adds the specified action listener to receive
                  action events from this textfield.                
                <param>
                    l the action listener to be added                    
                </param>
            </javadoc>
            <method name="addActionListener" type="void" line="451">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="455">
                Removes the specified action listener so that it no longer
                  receives action events from this textfield.                
                <param>
                    l the action listener to be removed                    
                </param>
            </javadoc>
            <method name="removeActionListener" type="void" line="461">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="462"/>
                <scope line="464"/>
            </method>
            <javadoc line="469">
                Returns an array of all the &lt;code&gt;ActionListener&lt;/code&gt;s added
                  to this JTextField with addActionListener().                
                <return>
                    all of the &lt;code&gt;ActionListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="477"/>
            <javadoc line="481">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created.
                  The listener list is processed in last to
                  first order.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireActionPerformed" type="void" line="489">
                <comment line="491">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="505">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <declaration name="listeners" type="Object[]" line="491"/>
                <declaration name="modifiers" type="int" line="492"/>
                <declaration name="currentEvent" type="AWTEvent" line="493"/>
                <scope line="494"/>
                <scope line="496"/>
                <declaration name="e" type="ActionEvent" line="499"/>
                <scope line="506">
                    <scope line="507"/>
                </scope>
            </method>
            <javadoc line="513">
                Sets the command string used for action events.                
                <param>
                    command the command string                    
                </param>
            </javadoc>
            <method name="setActionCommand" type="void" line="518">
                <params>
                    <param name="command" type="String"/>
                </params>
            </method>
            <declaration name="action" type="Action" line="522"/>
            <declaration name="actionPropertyChangeListener" type="PropertyChangeListener" line="523"/>
            <javadoc line="525">
                Sets the &lt;code&gt;Action&lt;/code&gt; for the &lt;code&gt;ActionEvent&lt;/code&gt; source.
                  The new &lt;code&gt;Action&lt;/code&gt; replaces
                  any previously set &lt;code&gt;Action&lt;/code&gt; but does not affect
                  &lt;code&gt;ActionListeners&lt;/code&gt; independently
                  added with &lt;code&gt;addActionListener&lt;/code&gt;.
                  If the &lt;code&gt;Action&lt;/code&gt; is already a registered
                  &lt;code&gt;ActionListener&lt;/code&gt;
                  for the &lt;code&gt;ActionEvent&lt;/code&gt; source, it is not re-registered.
                  &lt;p&gt;
                  Setting the &lt;code&gt;Action&lt;/code&gt; results in immediately changing
                  all the properties described in &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;.
                  Subsequently, the textfield&apos;s properties are automatically updated
                  as the &lt;code&gt;Action&lt;/code&gt;&apos;s properties change.
                  &lt;p&gt;
                  This method uses three other methods to set
                  and help track the &lt;code&gt;Action&lt;/code&gt;&apos;s property values.
                  It uses the &lt;code&gt;configurePropertiesFromAction&lt;/code&gt; method
                  to immediately change the textfield&apos;s properties.
                  To track changes in the &lt;code&gt;Action&lt;/code&gt;&apos;s property values,
                  this method registers the &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                  returned by &lt;code&gt;createActionPropertyChangeListener&lt;/code&gt;. The
                  default {@code PropertyChangeListener} invokes the{@code actionPropertyChanged} method when a property in the{@code Action} changes.                
                <param>
                    a the &lt;code&gt;Action&lt;/code&gt; for the &lt;code&gt;JTextField&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #getAction                    
                </see>
                <see>
                    #configurePropertiesFromAction                    
                </see>
                <see>
                    #createActionPropertyChangeListener                    
                </see>
                <see>
                    #actionPropertyChanged                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the Action instance connected with this ActionEvent source                    
                </beaninfo>
            </javadoc>
            <method name="setAction" type="void" line="565">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <comment line="577">
                    Don&apos;t add if it is already a listener                    
                </comment>
                <comment line="581">
                    Reverse linkage:                    
                </comment>
                <declaration name="oldValue" type="Action" line="566"/>
                <scope line="567">
                    <scope line="569"/>
                    <scope line="575">
                        <scope line="577"/>
                    </scope>
                </scope>
            </method>
            <method name="isListener" type="boolean" line="588">
                <params>
                    <param name="c" type="Class"/>
                    <param name="a" type="ActionListener"/>
                </params>
                <declaration name="isListener" type="boolean" line="589"/>
                <declaration name="listeners" type="Object[]" line="590"/>
                <scope line="591">
                    <scope line="592"/>
                </scope>
            </method>
            <javadoc line="599">
                Returns the currently set &lt;code&gt;Action&lt;/code&gt; for this
                  &lt;code&gt;ActionEvent&lt;/code&gt; source, or &lt;code&gt;null&lt;/code&gt;
                  if no &lt;code&gt;Action&lt;/code&gt; is set.                
                <return>
                    the &lt;code&gt;Action&lt;/code&gt; for this &lt;code&gt;ActionEvent&lt;/code&gt; source,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="getAction" type="Action" line="610"/>
            <javadoc line="614">
                Sets the properties on this textfield to match those in the specified
                  &lt;code&gt;Action&lt;/code&gt;.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details as to which properties this sets.                
                <param>
                    a the &lt;code&gt;Action&lt;/code&gt; from which to get the properties,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="configurePropertiesFromAction" type="void" line="626">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="632">
                Updates the textfield&apos;s state in response to property changes in
                  associated action. This method is invoked from the{@code PropertyChangeListener} returned from{@code createActionPropertyChangeListener}. Subclasses do not normally
                  need to invoke this. Subclasses that support additional {@code Action}properties should override this and{@code configurePropertiesFromAction}.
                  &lt;p&gt;
                  Refer to the table at &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for a list of
                  the properties this method sets.                
                <param>
                    action the &lt;code&gt;Action&lt;/code&gt; associated with this textfield                    
                </param>
                <param>
                    propertyName the name of the property that changed                    
                </param>
                <since>
                    1.6                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #configurePropertiesFromAction                    
                </see>
            </javadoc>
            <method name="actionPropertyChanged" type="void" line="651">
                <params>
                    <param name="action" type="Action"/>
                    <param name="propertyName" type="String"/>
                </params>
                <scope line="652"/>
                <scope line="654"/>
                <scope line="656"/>
            </method>
            <method name="setActionCommandFromAction" type="void" line="661">
                <params>
                    <param name="action" type="Action"/>
                </params>
            </method>
            <javadoc line="666">
                Creates and returns a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that is
                  responsible for listening for changes from the specified
                  &lt;code&gt;Action&lt;/code&gt; and updating the appropriate properties.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; If you subclass this do not create an anonymous
                  inner class.  If you do the lifetime of the textfield will be tied to
                  that of the &lt;code&gt;Action&lt;/code&gt;.                
                <param>
                    a the textfield&apos;s action                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="createActionPropertyChangeListener" type="PropertyChangeListener" line="680">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <class name="TextFieldActionPropertyChangeListener" line="684">
                <extends class="ActionPropertyChangeListener">
                    <type_params>
                        <type_param name="JTextField"/>
                    </type_params>
                </extends>
                <method name="TextFieldActionPropertyChangeListener" type="constructor" line="686">
                    <params>
                        <param name="tf" type="JTextField"/>
                        <param name="a" type="Action"/>
                    </params>
                </method>
                <method name="actionPropertyChanged" type="void" line="692">
                    <params>
                        <param name="textField" type="JTextField"/>
                        <param name="action" type="Action"/>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="693"/>
                    <scope line="695"/>
                </method>
            </class>
            <javadoc line="701">
                Fetches the command list for the editor.  This is
                  the list of commands supported by the plugged-in UI
                  augmented by the collection of commands that the
                  editor itself supports.  These are useful for binding
                  to events, such as in a keymap.                
                <return>
                    the command list                    
                </return>
            </javadoc>
            <method name="getActions" type="Action[]" line="710"/>
            <javadoc line="714">
                Processes action events occurring on this textfield by
                  dispatching them to any registered &lt;code&gt;ActionListener&lt;/code&gt; objects.
                  This is normally called by the controller registered with
                  textfield.                
            </javadoc>
            <method name="postActionEvent" type="void" line="720"/>
            <javadoc line="726">
                Gets the visibility of the text field.  This can
                  be adjusted to change the location of the visible
                  area if the size of the field is greater than
                  the area that was allocated to the field.
                  &lt;p&gt;
                  The fields look-and-feel implementation manages
                  the values of the minimum, maximum, and extent
                  properties on the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.                
                <return>
                    the visibility                    
                </return>
                <see>
                    BoundedRangeModel                    
                </see>
            </javadoc>
            <method name="getHorizontalVisibility" type="BoundedRangeModel" line="740"/>
            <javadoc line="744">
                Gets the scroll offset, in pixels.                
                <return>
                    the offset &gt;= 0                    
                </return>
            </javadoc>
            <method name="getScrollOffset" type="int" line="749"/>
            <javadoc line="753">
                Sets the scroll offset, in pixels.                
                <param>
                    scrollOffset the offset &gt;= 0                    
                </param>
            </javadoc>
            <method name="setScrollOffset" type="void" line="758">
                <params>
                    <param name="scrollOffset" type="int"/>
                </params>
            </method>
            <javadoc line="762">
                Scrolls the field left or right.                
                <param>
                    r the region to scroll                    
                </param>
            </javadoc>
            <method name="scrollRectToVisible" type="void" line="767">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <comment line="769">
                    convert to coordinate system of the bounded range                    
                </comment>
                <comment line="774">
                    Scroll to the left                    
                </comment>
                <comment line="777">
                    Scroll to the right                    
                </comment>
                <declaration name="i" type="Insets" line="769"/>
                <declaration name="x0" type="int" line="770"/>
                <declaration name="x1" type="int" line="771"/>
                <scope line="772"/>
                <scope line="775"/>
            </method>
            <javadoc line="781">
                Returns true if the receiver has an &lt;code&gt;ActionListener&lt;/code&gt;
                  installed.                
            </javadoc>
            <method name="hasActionListener" type="boolean" line="785">
                <comment line="787">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="789">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <declaration name="listeners" type="Object[]" line="787"/>
                <scope line="790">
                    <scope line="791"/>
                </scope>
            </method>
            <declaration name="notifyAction" type="String" line="800"/>
            <javadoc line="800">
                Name of the action to send notification that the
                  contents of the field have been accepted.  Typically
                  this is bound to a carriage-return.                
            </javadoc>
            <declaration name="visibility" type="BoundedRangeModel" line="807"/>
            <declaration name="horizontalAlignment" type="int" line="808"/>
            <declaration name="columns" type="int" line="809"/>
            <declaration name="columnWidth" type="int" line="810"/>
            <declaration name="command" type="String" line="811"/>
            <declaration name="defaultActions" type="Action[]" line="813"/>
            <declaration name="uiClassID" type="String" line="817"/>
            <javadoc line="817">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <class name="NotifyAction" line="826">
                <extends class="TextAction"/>
                <method name="NotifyAction" type="constructor" line="828"/>
                <method name="actionPerformed" type="void" line="832">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="target" type="JTextComponent" line="833"/>
                    <scope line="834">
                        <declaration name="field" type="JTextField" line="835"/>
                    </scope>
                </method>
                <method name="isEnabled" type="boolean" line="840">
                    <declaration name="target" type="JTextComponent" line="841"/>
                    <scope line="842"/>
                </method>
            </class>
            <class name="ScrollRepainter" line="849">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <method name="stateChanged" type="void" line="851">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="858">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="863">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="865">
                    <declaration name="count" type="byte" line="866"/>
                    <scope line="868"/>
                </scope>
            </method>
            <javadoc line="875">
                Returns a string representation of this &lt;code&gt;JTextField&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes,
                  and the content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JTextField&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="884">
                <declaration name="horizontalAlignmentString" type="String" line="885"/>
                <scope line="886"/>
                <scope line="888"/>
                <scope line="890"/>
                <scope line="892"/>
                <scope line="894"/>
                <declaration name="commandString" type="String" line="897"/>
            </method>
            <javadoc line="913">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JTextField&lt;/code&gt;. For &lt;code&gt;JTextFields&lt;/code&gt;,
                  the &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJTextField&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJTextField&lt;/code&gt; instance is created
                  if necessary.                
                <return>
                    an &lt;code&gt;AccessibleJTextField&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;JTextField&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="924">
                <scope line="925"/>
            </method>
            <class name="AccessibleJTextField" line="931">
                <extends class="AccessibleJTextComponent"/>
                <javadoc line="931">
                    This class implements accessibility support for the
                      &lt;code&gt;JTextField&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to text field user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="948">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleStateSet describing the states
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="955">
                    <declaration name="states" type="AccessibleStateSet" line="956"/>
                </method>
            </class>
        </class>
    </source>