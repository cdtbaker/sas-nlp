<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util.EventObject"/>
        <import package="javax.swing.event"/>
        <interface name="CellEditor">
            <javadoc line="4">
                This interface defines the methods any general editor should be able
                  to implement. &lt;p&gt;
                  Having this interface enables complex components (the client of the
                  editor) such as &lt;code&gt;JTree&lt;/code&gt; and
                  &lt;code&gt;JTable&lt;/code&gt; to allow any generic editor to
                  edit values in a table cell, or tree cell, etc.  Without this generic
                  editor interface, &lt;code&gt;JTable&lt;/code&gt; would have to know about specific editors,
                  such as &lt;code&gt;JTextField&lt;/code&gt;, &lt;code&gt;JCheckBox&lt;/code&gt;, &lt;code&gt;JComboBox&lt;/code&gt;,
                  etc.  In addition, without this interface, clients of editors such as
                  &lt;code&gt;JTable&lt;/code&gt; would not be able
                  to work with any editors developed in the future by the user
                  or a 3rd party ISV. &lt;p&gt;
                  To use this interface, a developer creating a new editor can have the
                  new component implement the interface.  Or the developer can
                  choose a wrapper based approach and provide a companion object which
                  implements the &lt;code&gt;CellEditor&lt;/code&gt; interface (See
                  &lt;code&gt;JCellEditor&lt;/code&gt; for example).  The wrapper approach
                  is particularly useful if the user want to use a 3rd party ISV
                  editor with &lt;code&gt;JTable&lt;/code&gt;, but the ISV didn&apos;t implement the
                  &lt;code&gt;CellEditor&lt;/code&gt; interface.  The user can simply create an object
                  that contains an instance of the 3rd party editor object and &quot;translate&quot;
                  the &lt;code&gt;CellEditor&lt;/code&gt; API into the 3rd party editor&apos;s API.                
                <see>
                    javax.swing.event.CellEditorListener                    
                </see>
                <author>
                    Alan Chung                    
                </author>
            </javadoc>
            <method name="getCellEditorValue" type="Object" line="31"/>
            <javadoc line="31">
                Returns the value contained in the editor.                
                <return>
                    the value contained in the editor                    
                </return>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="36"/>
            <javadoc line="36">
                Asks the editor if it can start editing using &lt;code&gt;anEvent&lt;/code&gt;.
                  &lt;code&gt;anEvent&lt;/code&gt; is in the invoking component coordinate system.
                  The editor can not assume the Component returned by
                  &lt;code&gt;getCellEditorComponent&lt;/code&gt; is installed.  This method
                  is intended for the use of client to avoid the cost of setting up
                  and installing the editor component if editing is not possible.
                  If editing can be started this method returns true.                
                <param>
                    anEvent         the event the editor should use to consider
                      whether to begin editing or not                    
                </param>
                <return>
                    true if editing can be started                    
                </return>
                <see>
                    #shouldSelectCell                    
                </see>
            </javadoc>
            <method name="shouldSelectCell" type="boolean" line="50"/>
            <javadoc line="50">
                Returns true if the editing cell should be selected, false otherwise.
                  Typically, the return value is true, because is most cases the editing
                  cell should be selected.  However, it is useful to return false to
                  keep the selection from changing for some types of edits.
                  eg. A table that contains a column of check boxes, the user might
                  want to be able to change those checkboxes without altering the
                  selection.  (See Netscape Communicator for just such an example)
                  Of course, it is up to the client of the editor to use the return
                  value, but it doesn&apos;t need to if it doesn&apos;t want to.                
                <param>
                    anEvent         the event the editor should use to start
                      editing                    
                </param>
                <return>
                    true if the editor would like the editing cell to be selected;
                      otherwise returns false                    
                </return>
                <see>
                    #isCellEditable                    
                </see>
            </javadoc>
            <method name="stopCellEditing" type="boolean" line="67"/>
            <javadoc line="67">
                Tells the editor to stop editing and accept any partially edited
                  value as the value of the editor.  The editor returns false if
                  editing was not stopped; this is useful for editors that validate
                  and can not accept invalid entries.                
                <return>
                    true if editing was stopped; false otherwise                    
                </return>
            </javadoc>
            <method name="cancelCellEditing" type="void" line="75"/>
            <javadoc line="75">
                Tells the editor to cancel editing and not accept any partially
                  edited value.                
            </javadoc>
            <method name="addCellEditorListener" type="void" line="80"/>
            <javadoc line="80">
                Adds a listener to the list that&apos;s notified when the editor
                  stops, or cancels editing.                
                <param>
                    l               the CellEditorListener                    
                </param>
            </javadoc>
            <method name="removeCellEditorListener" type="void" line="86"/>
            <javadoc line="86">
                Removes a listener from the list that&apos;s notified                
                <param>
                    l               the CellEditorListener                    
                </param>
            </javadoc>
        </interface>
    </source>