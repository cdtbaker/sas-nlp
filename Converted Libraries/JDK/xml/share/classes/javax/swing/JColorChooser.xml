<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="javax.swing.colorchooser"/>
        <import package="javax.swing.plaf.ColorChooserUI"/>
        <import package="javax.accessibility"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="JColorChooser" line="40">
            <extends class="JComponent"/>
            <comment line="557">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="598">
                inner class AccessibleJColorChooser                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="40">
                &lt;code&gt;JColorChooser&lt;/code&gt; provides a pane of controls designed to allow
                  a user to manipulate and select a color.
                  For information about using color choosers, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/colorchooser.html&quot;&gt;How to Use Color Choosers&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  This class provides three levels of API:
                  &lt;ol&gt;
                  &lt;li&gt;A static convenience method which shows a modal color-chooser
                  dialog and returns the color selected by the user.
                  &lt;li&gt;A static convenience method for creating a color-chooser dialog
                  where &lt;code&gt;ActionListeners&lt;/code&gt; can be specified to be invoked when
                  the user presses one of the dialog buttons.
                  &lt;li&gt;The ability to create instances of &lt;code&gt;JColorChooser&lt;/code&gt; panes
                  directly (within any container). &lt;code&gt;PropertyChange&lt;/code&gt; listeners
                  can be added to detect when the current &quot;color&quot; property changes.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component that supports selecting a Color.                    
                </beaninfo>
                <author>
                    James Gosling                    
                </author>
                <author>
                    Amy Fowler                    
                </author>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="88"/>
            <javadoc line="88">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="selectionModel" type="ColorSelectionModel" line="94"/>
            <declaration name="previewPanel" type="JComponent" line="96"/>
            <declaration name="chooserPanels" type="AbstractColorChooserPanel[]" line="98"/>
            <declaration name="dragEnabled" type="boolean" line="100"/>
            <declaration name="SELECTION_MODEL_PROPERTY" type="String" line="102"/>
            <javadoc line="102">
                The selection model property name.                
            </javadoc>
            <declaration name="PREVIEW_PANEL_PROPERTY" type="String" line="107"/>
            <javadoc line="107">
                The preview panel property name.                
            </javadoc>
            <declaration name="CHOOSER_PANELS_PROPERTY" type="String" line="112"/>
            <javadoc line="112">
                The chooserPanel array property name.                
            </javadoc>
            <javadoc line="118">
                Shows a modal color-chooser dialog and blocks until the
                  dialog is hidden.  If the user presses the &quot;OK&quot; button, then
                  this method hides/disposes the dialog and returns the selected color.
                  If the user presses the &quot;Cancel&quot; button or closes the dialog without
                  pressing &quot;OK&quot;, then this method hides/disposes the dialog and returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    component    the parent <code>Component</code> for the dialog                    
                </param>
                <param>
                    title        the String containing the dialog's title                    
                </param>
                <param>
                    initialColor the initial Color set when the color-chooser is shown                    
                </param>
                <return>
                    the selected color or <code>null</code> if the user opted out                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showDialog" type="Color" line="135">
                <params>
                    <param name="component" type="Component"/>
                    <param name="title" type="String"/>
                    <param name="initialColor" type="Color"/>
                </params>
                <comment line="146">
                    blocks until user brings dialog down...                    
                </comment>
                <declaration name="pane" type="JColorChooser" line="137"/>
                <declaration name="ok" type="ColorTracker" line="140"/>
                <declaration name="dialog" type="JDialog" line="141"/>
            </method>
            <javadoc line="151">
                Creates and returns a new dialog containing the specified
                  &lt;code&gt;ColorChooser&lt;/code&gt; pane along with &quot;OK&quot;, &quot;Cancel&quot;, and &quot;Reset&quot;
                  buttons. If the &quot;OK&quot; or &quot;Cancel&quot; buttons are pressed, the dialog is
                  automatically hidden (but not disposed).  If the &quot;Reset&quot;
                  button is pressed, the color-chooser&apos;s color will be reset to the
                  color which was set the last time &lt;code&gt;show&lt;/code&gt; was invoked on the
                  dialog and the dialog will remain showing.                
                <param>
                    c              the parent component for the dialog                    
                </param>
                <param>
                    title          the title for the dialog                    
                </param>
                <param>
                    modal          a boolean. When true, the remainder of the program
                      is inactive until the dialog is closed.                    
                </param>
                <param>
                    chooserPane    the color-chooser to be placed inside the dialog                    
                </param>
                <param>
                    okListener     the ActionListener invoked when "OK" is pressed                    
                </param>
                <param>
                    cancelListener the ActionListener invoked when "Cancel" is pressed                    
                </param>
                <return>
                    a new dialog containing the color-chooser pane                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="createDialog" type="JDialog" line="174">
                <params>
                    <param name="c" type="Component"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="chooserPane" type="JColorChooser"/>
                    <param name="okListener" type="ActionListener"/>
                    <param name="cancelListener" type="ActionListener"/>
                </params>
                <declaration name="window" type="Window" line="176"/>
                <declaration name="dialog" type="ColorChooserDialog" line="177"/>
                <scope line="178"/>
                <scope line="181"/>
            </method>
            <javadoc line="188">
                Creates a color chooser pane with an initial color of white.                
            </javadoc>
            <method name="JColorChooser" type="constructor" line="191"/>
            <javadoc line="195">
                Creates a color chooser pane with the specified initial color.                
                <param>
                    initialColor the initial color set in the chooser                    
                </param>
            </javadoc>
            <method name="JColorChooser" type="constructor" line="200">
                <params>
                    <param name="initialColor" type="Color"/>
                </params>
            </method>
            <javadoc line="205">
                Creates a color chooser pane with the specified
                  &lt;code&gt;ColorSelectionModel&lt;/code&gt;.                
                <param>
                    model the <code>ColorSelectionModel</code> to be used                    
                </param>
            </javadoc>
            <method name="JColorChooser" type="constructor" line="211">
                <params>
                    <param name="model" type="ColorSelectionModel"/>
                </params>
            </method>
            <javadoc line="217">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the <code>ColorChooserUI</code> object that renders
                      this component                    
                </return>
            </javadoc>
            <method name="getUI" type="ColorChooserUI" line="223"/>
            <javadoc line="227">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the <code>ColorChooserUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: The UI object that implements the color chooser's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="238">
                <params>
                    <param name="ui" type="ColorChooserUI"/>
                </params>
            </method>
            <javadoc line="242">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the L&amp;F has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="249"/>
            <javadoc line="253">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "ColorChooserUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="260"/>
            <javadoc line="264">
                Gets the current color value from the color chooser.
                  By default, this delegates to the model.                
                <return>
                    the current color value of the color chooser                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="270"/>
            <javadoc line="274">
                Sets the current color of the color chooser to the specified color.
                  The &lt;code&gt;ColorSelectionModel&lt;/code&gt; will fire a &lt;code&gt;ChangeEvent&lt;/code&gt;                
                <param>
                    color the color to be set in the color chooser                    
                </param>
                <see>
                    JComponent#addPropertyChangeListener                    
                </see>
                <beaninfo>
                    bound: false
                      hidden: false
                      description: The current color the chooser is to display.                    
                </beaninfo>
            </javadoc>
            <method name="setColor" type="void" line="285">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="290">
                Sets the current color of the color chooser to the
                  specified RGB color.  Note that the values of red, green,
                  and blue should be between the numbers 0 and 255, inclusive.                
                <param>
                    r   an int specifying the amount of Red                    
                </param>
                <param>
                    g   an int specifying the amount of Green                    
                </param>
                <param>
                    b   an int specifying the amount of Blue                    
                </param>
                <exception>
                    IllegalArgumentException if r,g,b values are out of range                    
                </exception>
                <see>
                    java.awt.Color                    
                </see>
            </javadoc>
            <method name="setColor" type="void" line="301">
                <params>
                    <param name="r" type="int"/>
                    <param name="g" type="int"/>
                    <param name="b" type="int"/>
                </params>
            </method>
            <javadoc line="305">
                Sets the current color of the color chooser to the
                  specified color.                
                <param>
                    c an integer value that sets the current color in the chooser
                      where the low-order 8 bits specify the Blue value,
                      the next 8 bits specify the Green value, and the 8 bits
                      above that specify the Red value.                    
                </param>
            </javadoc>
            <method name="setColor" type="void" line="314">
                <params>
                    <param name="c" type="int"/>
                </params>
            </method>
            <javadoc line="318">
                Sets the &lt;code&gt;dragEnabled&lt;/code&gt; property,
                  which must be &lt;code&gt;true&lt;/code&gt; to enable
                  automatic drag handling (the first part of drag and drop)
                  on this component.
                  The &lt;code&gt;transferHandler&lt;/code&gt; property needs to be set
                  to a non-&lt;code&gt;null&lt;/code&gt; value for the drag to do
                  anything.  The default value of the &lt;code&gt;dragEnabled&lt;/code&gt;
                  property
                  is &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;
                  When automatic drag handling is enabled,
                  most look and feels begin a drag-and-drop operation
                  when the user presses the mouse button over the preview panel.
                  Some look and feels might not support automatic drag and drop;
                  they will ignore this property.  You can work around such
                  look and feels by modifying the component
                  to directly call the &lt;code&gt;exportAsDrag&lt;/code&gt; method of a
                  &lt;code&gt;TransferHandler&lt;/code&gt;.                
                <param>
                    b the value to set the <code>dragEnabled</code> property to                    
                </param>
                <exception>
                    HeadlessException if
                      <code>b</code> is <code>true</code> and
                      <code>GraphicsEnvironment.isHeadless()</code>
                      returns <code>true</code>                    
                </exception>
                <since>
                    1.4                    
                </since>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #getDragEnabled                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <beaninfo>
                    description: Determines whether automatic drag handling is enabled.
                      bound: false                    
                </beaninfo>
            </javadoc>
            <method name="setDragEnabled" type="void" line="357">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="358"/>
            </method>
            <javadoc line="364">
                Gets the value of the &lt;code&gt;dragEnabled&lt;/code&gt; property.                
                <return>
                    the value of the <code>dragEnabled</code> property                    
                </return>
                <see>
                    #setDragEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragEnabled" type="boolean" line="371"/>
            <javadoc line="375">
                Sets the current preview panel.
                  This will fire a &lt;code&gt;PropertyChangeEvent&lt;/code&gt; for the property
                  named &quot;previewPanel&quot;.                
                <param>
                    preview the <code>JComponent</code> which displays the current color                    
                </param>
                <see>
                    JComponent#addPropertyChangeListener                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: The UI component which displays the current color.                    
                </beaninfo>
            </javadoc>
            <method name="setPreviewPanel" type="void" line="388">
                <params>
                    <param name="preview" type="JComponent"/>
                </params>
                <scope line="390">
                    <declaration name="oldPreview" type="JComponent" line="391"/>
                </scope>
            </method>
            <javadoc line="397">
                Returns the preview panel that shows a chosen color.                
                <return>
                    a <code>JComponent</code> object -- the preview panel                    
                </return>
            </javadoc>
            <method name="getPreviewPanel" type="JComponent" line="402"/>
            <javadoc line="406">
                Adds a color chooser panel to the color chooser.                
                <param>
                    panel the <code>AbstractColorChooserPanel</code> to be added                    
                </param>
            </javadoc>
            <method name="addChooserPanel" type="void" line="411">
                <params>
                    <param name="panel" type="AbstractColorChooserPanel"/>
                </params>
                <declaration name="oldPanels" type="AbstractColorChooserPanel[]" line="412"/>
                <declaration name="newPanels" type="AbstractColorChooserPanel[]" line="413"/>
            </method>
            <javadoc line="419">
                Removes the Color Panel specified.                
                <param>
                    panel   a string that specifies the panel to be removed                    
                </param>
                <return>
                    the color panel                    
                </return>
                <exception>
                    IllegalArgumentException if panel is not in list of
                      known chooser panels                    
                </exception>
            </javadoc>
            <method name="removeChooserPanel" type="AbstractColorChooserPanel" line="427">
                <params>
                    <param name="panel" type="AbstractColorChooserPanel"/>
                </params>
                <comment line="445">
                    at end                    
                </comment>
                <comment line="448">
                    at start                    
                </comment>
                <comment line="451">
                    in middle                    
                </comment>
                <declaration name="containedAt" type="int" line="430"/>
                <scope line="432">
                    <scope line="433"/>
                </scope>
                <scope line="438"/>
                <declaration name="newArray" type="AbstractColorChooserPanel[]" line="442"/>
                <scope line="444"/>
                <scope line="447"/>
                <scope line="450"/>
            </method>
            <javadoc line="462">
                Specifies the Color Panels used to choose a color value.                
                <param>
                    panels  an array of <code>AbstractColorChooserPanel</code>
                      objects                    
                </param>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: An array of different chooser types.                    
                </beaninfo>
            </javadoc>
            <method name="setChooserPanels" type="void" line="473">
                <params>
                    <param name="panels" type="AbstractColorChooserPanel[]"/>
                </params>
                <declaration name="oldValue" type="AbstractColorChooserPanel[]" line="474"/>
            </method>
            <javadoc line="479">
                Returns the specified color panels.                
                <return>
                    an array of <code>AbstractColorChooserPanel</code> objects                    
                </return>
            </javadoc>
            <method name="getChooserPanels" type="AbstractColorChooserPanel[]" line="484"/>
            <javadoc line="488">
                Returns the data model that handles color selections.                
                <return>
                    a <code>ColorSelectionModel</code> object                    
                </return>
            </javadoc>
            <method name="getSelectionModel" type="ColorSelectionModel" line="493"/>
            <javadoc line="498">
                Sets the model containing the selected color.                
                <param>
                    newModel   the new <code>ColorSelectionModel</code> object                    
                </param>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: The model which contains the currently selected color.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionModel" type="void" line="508">
                <params>
                    <param name="newModel" type="ColorSelectionModel"/>
                </params>
                <declaration name="oldModel" type="ColorSelectionModel" line="509"/>
            </method>
            <javadoc line="515">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="520">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="522">
                    <declaration name="count" type="byte" line="523"/>
                    <scope line="525"/>
                </scope>
            </method>
            <javadoc line="532">
                Returns a string representation of this &lt;code&gt;JColorChooser&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JColorChooser</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="542">
                <declaration name="chooserPanelsString" type="StringBuffer" line="543"/>
                <scope line="544"/>
                <declaration name="previewPanelString" type="String" line="548"/>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="560"/>
            <javadoc line="562">
                Gets the AccessibleContext associated with this JColorChooser.
                  For color choosers, the AccessibleContext takes the form of an
                  AccessibleJColorChooser.
                  A new AccessibleJColorChooser instance is created if necessary.                
                <return>
                    an AccessibleJColorChooser that serves as the
                      AccessibleContext of this JColorChooser                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="571">
                <scope line="572"/>
            </method>
            <class name="AccessibleJColorChooser" line="578">
                <extends class="AccessibleJComponent"/>
                <javadoc line="578">
                    This class implements accessibility support for the
                      &lt;code&gt;JColorChooser&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to color chooser user-interface
                      elements.                    
                </javadoc>
                <javadoc line="586">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="593"/>
            </class>
        </class>
        <class name="ColorChooserDialog" line="607">
            <extends class="JDialog"/>
            <comment line="557">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="598">
                inner class AccessibleJColorChooser                
            </comment>
            <declaration name="initialColor" type="Color" line="608"/>
            <declaration name="chooserPane" type="JColorChooser" line="609"/>
            <declaration name="cancelButton" type="JButton" line="610"/>
            <method name="ColorChooserDialog" type="constructor" line="615">
                <params>
                    <param name="owner" type="Dialog"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="c" type="Component"/>
                    <param name="chooserPane" type="JColorChooser"/>
                    <param name="okListener" type="ActionListener"/>
                    <param name="cancelListener" type="ActionListener"/>
                </params>
            </method>
            <method name="ColorChooserDialog" type="constructor" line="623">
                <params>
                    <param name="owner" type="Frame"/>
                    <param name="title" type="String"/>
                    <param name="modal" type="boolean"/>
                    <param name="c" type="Component"/>
                    <param name="chooserPane" type="JColorChooser"/>
                    <param name="okListener" type="ActionListener"/>
                    <param name="cancelListener" type="ActionListener"/>
                </params>
            </method>
            <method name="initColorChooserDialog" type="void" line="629">
                <params>
                    <param name="c" type="Component"/>
                    <param name="chooserPane" type="JColorChooser"/>
                    <param name="okListener" type="ActionListener"/>
                    <param name="cancelListener" type="ActionListener"/>
                </params>
                <comment line="631">
                    setResizable(false);                    
                </comment>
                <comment line="644">
                    Create Lower button panel                    
                </comment>
                <comment line="664">
                    The following few lines are used to register esc to close the dialog                    
                </comment>
                <comment line="678">
                    end esc handling                    
                </comment>
                <declaration name="locale" type="Locale" line="634"/>
                <declaration name="okString" type="String" line="635"/>
                <declaration name="cancelString" type="String" line="636"/>
                <declaration name="resetString" type="String" line="637"/>
                <declaration name="contentPane" type="Container" line="639"/>
                <declaration name="buttonPane" type="JPanel" line="646"/>
                <declaration name="okButton" type="JButton" line="648"/>
                <anonymous_class line="651">
                    <method name="actionPerformed" type="void" line="652">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <scope line="656"/>
                <anonymous_class line="664">
                    <method name="actionPerformed" type="void" line="665">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="cancelKeyAction" type="Action" line="664"/>
                <declaration name="cancelKeyStroke" type="KeyStroke" line="669"/>
                <declaration name="inputMap" type="InputMap" line="670"/>
                <declaration name="actionMap" type="ActionMap" line="672"/>
                <scope line="673"/>
                <anonymous_class line="680">
                    <method name="actionPerformed" type="void" line="681">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <scope line="685"/>
                <declaration name="resetButton" type="JButton" line="690"/>
                <anonymous_class line="691">
                    <method name="actionPerformed" type="void" line="692">
                        <params>
                            <param name="e" type="ActionEvent"/>
                        </params>
                    </method>
                </anonymous_class>
                <declaration name="mnemonic" type="int" line="696"/>
                <scope line="697"/>
                <scope line="703">
                    <declaration name="supportsWindowDecorations" type="boolean" line="704"/>
                    <scope line="706"/>
                </scope>
            </method>
            <method name="show" type="void" line="718"/>
            <method name="reset" type="void" line="723"/>
            <class name="Closer" line="727">
                <extends class="WindowAdapter"/>
                <implements interface="Serializable"/>
                <method name="windowClosing" type="void" line="728">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="730"/>
                </method>
            </class>
            <class name="DisposeOnClose" line="735">
                <extends class="ComponentAdapter"/>
                <implements interface="Serializable"/>
                <method name="componentHidden" type="void" line="736">
                    <params>
                        <param name="e" type="ComponentEvent"/>
                    </params>
                    <declaration name="w" type="Window" line="737"/>
                </method>
            </class>
        </class>
        <class name="ColorTracker" line="744">
            <comment line="557">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="598">
                inner class AccessibleJColorChooser                
            </comment>
            <implements interface="ActionListener"/>
            <implements interface="Serializable"/>
            <declaration name="chooser" type="JColorChooser" line="745"/>
            <declaration name="color" type="Color" line="746"/>
            <method name="ColorTracker" type="constructor" line="748">
                <params>
                    <param name="c" type="JColorChooser"/>
                </params>
            </method>
            <method name="actionPerformed" type="void" line="752">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
            </method>
            <method name="getColor" type="Color" line="756"/>
        </class>
    </source>