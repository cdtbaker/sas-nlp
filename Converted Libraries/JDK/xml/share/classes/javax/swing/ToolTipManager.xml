<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.event"/>
        <import package="java.awt"/>
        <class name="ToolTipManager" line="4">
            <extends class="MouseAdapter"/>
            <implements interface="MouseMotionListener"/>
            <javadoc line="4">
                Manages all the &lt;code&gt;ToolTips&lt;/code&gt; in the system.
                  &lt;p&gt;
                  ToolTipManager contains numerous properties for configuring how long it
                  will take for the tooltips to become visible, and how long till they
                  hide. Consider a component that has a different tooltip based on where
                  the mouse is, such as JTree. When the mouse moves into the JTree and
                  over a region that has a valid tooltip, the tooltip will become
                  visibile after &lt;code&gt;initialDelay&lt;/code&gt; milliseconds. After
                  &lt;code&gt;dismissDelay&lt;/code&gt; milliseconds the tooltip will be hidden. If
                  the mouse is over a region that has a valid tooltip, and the tooltip
                  is currently visible, when the mouse moves to a region that doesn&apos;t have
                  a valid tooltip the tooltip will be hidden. If the mouse then moves back
                  into a region that has a valid tooltip within &lt;code&gt;reshowDelay&lt;/code&gt;
                  milliseconds, the tooltip will immediately be shown, otherwise the
                  tooltip will be shown again after &lt;code&gt;initialDelay&lt;/code&gt; milliseconds.                
                <see>
                    JComponent#createToolTip                    
                </see>
                <author>
                    Dave Moore                    
                </author>
                <author>
                    Rich Schiavi                    
                </author>
            </javadoc>
            <declaration name="enterTimer" type="Timer" line="25"/>
            <declaration name="toolTipText" type="String" line="26"/>
            <declaration name="preferredLocation" type="Point" line="27"/>
            <declaration name="insideComponent" type="JComponent" line="28"/>
            <declaration name="mouseEvent" type="MouseEvent" line="29"/>
            <declaration name="showImmediately" type="boolean" line="30"/>
            <declaration name="TOOL_TIP_MANAGER_KEY" type="Object" line="31"/>
            <declaration name="tipWindow" type="Popup" line="32"/>
            <declaration name="window" type="Window" line="33"/>
            <javadoc line="33">
                The Window tip is being displayed in. This will be non-null if
                  the Window tip is in differs from that of insideComponent&apos;s Window.                
            </javadoc>
            <declaration name="tip" type="JToolTip" line="38"/>
            <declaration name="popupRect" type="Rectangle" line="39"/>
            <declaration name="popupFrameRect" type="Rectangle" line="40"/>
            <declaration name="enabled" type="boolean" line="41"/>
            <declaration name="tipShowing" type="boolean" line="42"/>
            <declaration name="focusChangeListener" type="FocusListener" line="43"/>
            <declaration name="moveBeforeEnterListener" type="MouseMotionListener" line="44"/>
            <declaration name="accessibilityKeyListener" type="KeyListener" line="45"/>
            <declaration name="postTip" type="KeyStroke" line="46"/>
            <declaration name="hideTip" type="KeyStroke" line="47"/>
            <declaration name="lightWeightPopupEnabled" type="boolean" line="48"/>
            <declaration name="heavyWeightPopupEnabled" type="boolean" line="49"/>
            <method name="ToolTipManager" type="constructor" line="50"/>
            <javadoc line="62">
                Enables or disables the tooltip.                
                <param>
                    flag  true to enable the tip, false otherwise                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="66">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <scope line="68"/>
            </method>
            <javadoc line="72">
                Returns true if this object is enabled.                
                <return>
                    true if this object is enabled, false otherwise                    
                </return>
            </javadoc>
            <method name="isEnabled" type="boolean" line="76"/>
            <javadoc line="79">
                When displaying the &lt;code&gt;JToolTip&lt;/code&gt;, the
                  &lt;code&gt;ToolTipManager&lt;/code&gt; chooses to use a lightweight
                  &lt;code&gt;JPanel&lt;/code&gt; if it fits. This method allows you to
                  disable this feature. You have to do disable it if your
                  application mixes light weight and heavy weights components.                
                <param>
                    aFlag true if a lightweight panel is desired, false otherwise                    
                </param>
            </javadoc>
            <method name="setLightWeightPopupEnabled" type="void" line="87">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="90">
                Returns true if lightweight (all-Java) &lt;code&gt;Tooltips&lt;/code&gt;
                  are in use, or false if heavyweight (native peer)
                  &lt;code&gt;Tooltips&lt;/code&gt; are being used.                
                <return>
                    true if lightweight <code>ToolTips</code> are in use                    
                </return>
            </javadoc>
            <method name="isLightWeightPopupEnabled" type="boolean" line="96"/>
            <javadoc line="99">
                Specifies the initial delay value.                
                <param>
                    milliseconds  the number of milliseconds to delay
                      (after the cursor has paused) before displaying the
                      tooltip                    
                </param>
                <see>
                    #getInitialDelay                    
                </see>
            </javadoc>
            <method name="setInitialDelay" type="void" line="106">
                <params>
                    <param name="milliseconds" type="int"/>
                </params>
            </method>
            <javadoc line="109">
                Returns the initial delay value.                
                <return>
                    an integer representing the initial delay value,
                      in milliseconds                    
                </return>
                <see>
                    #setInitialDelay                    
                </see>
            </javadoc>
            <method name="getInitialDelay" type="int" line="115"/>
            <javadoc line="118">
                Specifies the dismissal delay value.                
                <param>
                    milliseconds  the number of milliseconds to delay
                      before taking away the tooltip                    
                </param>
                <see>
                    #getDismissDelay                    
                </see>
            </javadoc>
            <method name="setDismissDelay" type="void" line="124">
                <params>
                    <param name="milliseconds" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                Returns the dismissal delay value.                
                <return>
                    an integer representing the dismissal delay value,
                      in milliseconds                    
                </return>
                <see>
                    #setDismissDelay                    
                </see>
            </javadoc>
            <method name="getDismissDelay" type="int" line="133"/>
            <javadoc line="136">
                Used to specify the amount of time before the user has to wait
                  &lt;code&gt;initialDelay&lt;/code&gt; milliseconds before a tooltip will be
                  shown. That is, if the tooltip is hidden, and the user moves into
                  a region of the same Component that has a valid tooltip within
                  &lt;code&gt;milliseconds&lt;/code&gt; milliseconds the tooltip will immediately
                  be shown. Otherwise, if the user moves into a region with a valid
                  tooltip after &lt;code&gt;milliseconds&lt;/code&gt; milliseconds, the user
                  will have to wait an additional &lt;code&gt;initialDelay&lt;/code&gt;
                  milliseconds before the tooltip is shown again.                
                <param>
                    milliseconds time in milliseconds                    
                </param>
                <see>
                    #getReshowDelay                    
                </see>
            </javadoc>
            <method name="setReshowDelay" type="void" line="149">
                <params>
                    <param name="milliseconds" type="int"/>
                </params>
            </method>
            <javadoc line="152">
                Returns the reshow delay property.                
                <return>
                    reshown delay property                    
                </return>
                <see>
                    #setReshowDelay                    
                </see>
            </javadoc>
            <method name="getReshowDelay" type="int" line="157"/>
            <method name="showTipWindow" type="void" line="160">
                <declaration name="mode" type="String" line="162"/>
                <scope line="163">
                    <declaration name="kfm" type="KeyboardFocusManager" line="164"/>
                    <scope line="165"/>
                </scope>
                <scope line="169">
                    <declaration name="size" type="Dimension" line="170"/>
                    <declaration name="screenLocation" type="Point" line="171"/>
                    <declaration name="location" type="Point" line="172"/>
                    <declaration name="gc" type="GraphicsConfiguration" line="173"/>
                    <declaration name="sBounds" type="Rectangle" line="175"/>
                    <declaration name="screenInsets" type="Insets" line="176"/>
                    <declaration name="leftToRight" type="boolean" line="181"/>
                    <scope line="186">
                        <scope line="189"/>
                    </scope>
                    <scope line="193">
                        <scope line="196">
                            <scope line="197"/>
                        </scope>
                    </scope>
                    <scope line="202"/>
                    <scope line="206"/>
                    <scope line="209"/>
                    <scope line="212"/>
                    <scope line="215"/>
                    <declaration name="popupFactory" type="PopupFactory" line="218"/>
                    <scope line="219">
                        <declaration name="y" type="int" line="220"/>
                        <declaration name="x" type="int" line="221"/>
                        <scope line="222"/>
                        <scope line="225"/>
                    </scope>
                    <scope line="229"/>
                    <declaration name="componentWindow" type="Window" line="235"/>
                    <scope line="237"/>
                    <scope line="240"/>
                </scope>
            </method>
            <method name="hideTipWindow" type="void" line="247">
                <scope line="248">
                    <scope line="249"/>
                </scope>
            </method>
            <javadoc line="260">
                Returns a shared &lt;code&gt;ToolTipManager&lt;/code&gt; instance.                
                <return>
                    a shared <code>ToolTipManager</code> object                    
                </return>
            </javadoc>
            <method name="sharedInstance" type="ToolTipManager" line="264">
                <declaration name="value" type="Object" line="265"/>
                <scope line="266"/>
                <declaration name="manager" type="ToolTipManager" line="269"/>
            </method>
            <javadoc line="273">
                Registers a component for tooltip management.
                  &lt;p&gt;
                  This will register key bindings to show and hide the tooltip text
                  only if &lt;code&gt;component&lt;/code&gt; has focus bindings. This is done
                  so that components that are not normally focus traversable, such
                  as &lt;code&gt;JLabel&lt;/code&gt;, are not made focus traversable as a result
                  of invoking this method.                
                <param>
                    component  a <code>JComponent</code> object to add                    
                </param>
                <see>
                    JComponent#isFocusTraversable                    
                </see>
            </javadoc>
            <method name="registerComponent" type="void" line="284">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
            <javadoc line="292">
                Removes a component from tooltip control.                
                <param>
                    component  a <code>JComponent</code> object to remove                    
                </param>
            </javadoc>
            <method name="unregisterComponent" type="void" line="296">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
            <javadoc line="301">
                Called when the mouse enters the region of a component.
                  This determines whether the tool tip should be shown.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseEntered" type="void" line="306">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
            </method>
            <method name="initiateToolTip" type="void" line="309">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <scope line="310"/>
                <declaration name="component" type="JComponent" line="313"/>
                <declaration name="location" type="Point" line="316"/>
                <scope line="317"/>
                <scope line="320"/>
                <declaration name="sameComponent" type="boolean" line="325"/>
                <scope line="327">
                    <scope line="329">
                        <declaration name="newToolTipText" type="String" line="330"/>
                        <declaration name="newPreferredLocation" type="Point" line="331"/>
                        <declaration name="sameLoc" type="boolean" line="332"/>
                        <scope line="333"/>
                    </scope>
                    <scope line="339"/>
                </scope>
            </method>
            <javadoc line="344">
                Called when the mouse exits the region of a component.
                  Any tool tip showing should be hidden.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseExited" type="void" line="349">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <declaration name="shouldHide" type="boolean" line="350"/>
                <scope line="351"/>
                <scope line="353">
                    <declaration name="insideComponentWindow" type="Container" line="354"/>
                    <scope line="355">
                        <declaration name="location" type="Point" line="356"/>
                        <scope line="361"/>
                        <scope line="364"/>
                    </scope>
                </scope>
                <scope line="369">
                    <declaration name="win" type="Window" line="370"/>
                    <scope line="371">
                        <declaration name="location" type="Point" line="372"/>
                        <declaration name="bounds" type="Rectangle" line="373"/>
                        <declaration name="loc" type="Point" line="376"/>
                        <scope line="382"/>
                        <scope line="385"/>
                    </scope>
                </scope>
                <scope line="390">
                    <scope line="392"/>
                </scope>
            </method>
            <javadoc line="402">
                Called when the mouse is pressed.
                  Any tool tip showing should be hidden.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="407">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="414">
                Called when the mouse is pressed and dragged.
                  Does nothing.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseDragged" type="void" line="419">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="421">
                Called when the mouse is moved.
                  Determines whether the tool tip should be displayed.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseMoved" type="void" line="426">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <scope line="427"/>
                <scope line="430">
                    <declaration name="component" type="JComponent" line="431"/>
                    <scope line="433"/>
                </scope>
                <scope line="441"/>
            </method>
            <javadoc line="448">
                Checks to see if the tooltip needs to be changed in response to
                  the MouseMoved event &lt;code&gt;event&lt;/code&gt;.                
            </javadoc>
            <method name="checkForTipChange" type="void" line="452">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <declaration name="component" type="JComponent" line="453"/>
                <declaration name="newText" type="String" line="454"/>
                <declaration name="newPreferredLocation" type="Point" line="455"/>
                <scope line="456">
                    <scope line="458">
                        <scope line="459"/>
                        <scope line="462"/>
                    </scope>
                    <scope line="466">
                        <scope line="469"/>
                        <scope line="474"/>
                    </scope>
                </scope>
                <scope line="479"/>
            </method>
            <class name="insideTimerAction" line="489">
                <implements interface="ActionListener"/>
                <method name="actionPerformed" type="void" line="490">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="491">
                        <scope line="492"/>
                        <scope line="496"/>
                        <scope line="500"/>
                    </scope>
                </method>
            </class>
            <class name="outsideTimerAction" line="510">
                <implements interface="ActionListener"/>
                <method name="actionPerformed" type="void" line="511">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="stillInsideTimerAction" line="515">
                <implements interface="ActionListener"/>
                <method name="actionPerformed" type="void" line="516">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="MoveBeforeEnterListener" line="524">
                <extends class="MouseMotionAdapter"/>
                <method name="mouseMoved" type="void" line="525">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <method name="frameForComponent" type="Frame" line="529">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="530"/>
            </method>
            <method name="createFocusChangeListener" type="FocusListener" line="535">
                <anonymous_class line="536">
                    <method name="focusLost" type="void" line="537">
                        <params>
                            <param name="evt" type="FocusEvent"/>
                        </params>
                        <declaration name="c" type="JComponent" line="540"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getPopupFitWidth" type="int" line="546">
                <params>
                    <param name="popupRectInScreen" type="Rectangle"/>
                    <param name="invoker" type="Component"/>
                </params>
                <scope line="547">
                    <declaration name="parent" type="Container" line="548"/>
                    <scope line="549">
                        <scope line="550"/>
                        <scope line="553">
                            <scope line="554"/>
                            <declaration name="p" type="Point" line="557"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getPopupFitHeight" type="int" line="565">
                <params>
                    <param name="popupRectInScreen" type="Rectangle"/>
                    <param name="invoker" type="Component"/>
                </params>
                <scope line="566">
                    <declaration name="parent" type="Container" line="567"/>
                    <scope line="568">
                        <scope line="569"/>
                        <scope line="572">
                            <scope line="573"/>
                            <declaration name="p" type="Point" line="576"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getHeightAdjust" type="int" line="584">
                <params>
                    <param name="a" type="Rectangle"/>
                    <param name="b" type="Rectangle"/>
                </params>
            </method>
            <method name="getWidthAdjust" type="int" line="588">
                <params>
                    <param name="a" type="Rectangle"/>
                    <param name="b" type="Rectangle"/>
                </params>
                <scope line="589"/>
                <scope line="592"/>
            </method>
            <method name="show" type="void" line="596">
                <params>
                    <param name="source" type="JComponent"/>
                </params>
                <scope line="597"/>
                <scope line="601">
                    <scope line="607">
                        <scope line="611"/>
                    </scope>
                </scope>
            </method>
            <method name="hide" type="void" line="618">
                <params>
                    <param name="source" type="JComponent"/>
                </params>
            </method>
            <class name="AccessibilityKeyListener" line="624">
                <extends class="KeyAdapter"/>
                <method name="keyPressed" type="void" line="625">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <scope line="626">
                        <declaration name="source" type="JComponent" line="627"/>
                        <declaration name="keyStrokeForEvent" type="KeyStroke" line="628"/>
                        <scope line="629">
                            <scope line="630"/>
                        </scope>
                        <scope line="635"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>