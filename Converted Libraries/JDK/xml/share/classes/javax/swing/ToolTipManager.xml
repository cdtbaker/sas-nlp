<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.event"/>
        <import package="java.awt"/>
        <class name="ToolTipManager" line="32">
            <extends class="MouseAdapter"/>
            <comment line="82">
                PENDING(ges)                
            </comment>
            <comment line="361">
                add keylistener here to trigger tip for access                
            </comment>
            <comment line="394">
                implements java.awt.event.MouseListener                
            </comment>
            <comment line="457">
                implements java.awt.event.MouseListener                
            </comment>
            <comment line="528">
                implements java.awt.event.MouseListener                
            </comment>
            <comment line="543">
                implements java.awt.event.MouseMotionListener                
            </comment>
            <comment line="553">
                implements java.awt.event.MouseMotionListener                
            </comment>
            <comment line="665">
                This listener is registered when the tooltip is first registered
                 on a component in order to catch the situation where the tooltip
                 was turned on while the mouse was already within the bounds of
                 the component.  This way, the tooltip will be initiated on a
                 mouse-entered or mouse-moved, whichever occurs first.  Once the
                 tooltip has been initiated, we can remove this listener and rely
                 solely on mouse-entered to initiate the tooltip.                
            </comment>
            <comment line="697">
                Returns: 0 no adjust
                         -1 can&apos;t fit
                         &gt;0 adjust value by amount returned                
            </comment>
            <comment line="723">
                Returns:  0 no adjust
                          &gt;0 adjust by value return                
            </comment>
            <comment line="754">
                Return the number of pixels over the edge we are extending.
                 If we are over the edge the ToolTipManager can adjust.
                 REMIND: what if the Tooltip is just too big to fit at all - we currently will just clip                
            </comment>
            <comment line="769">
                Actions                
            </comment>
            <comment line="804">
                This listener is registered when the tooltip is first registered
                 on a component in order to process accessibility keybindings.
                 This will apply globally across L&amp;F
                
                 Post Tip: Ctrl+F1
                 Unpost Tip: Esc and Ctrl+F1                
            </comment>
            <implements interface="MouseMotionListener"/>
            <javadoc line="32">
                Manages all the &lt;code&gt;ToolTips&lt;/code&gt; in the system.
                  &lt;p&gt;
                  ToolTipManager contains numerous properties for configuring how long it
                  will take for the tooltips to become visible, and how long till they
                  hide. Consider a component that has a different tooltip based on where
                  the mouse is, such as JTree. When the mouse moves into the JTree and
                  over a region that has a valid tooltip, the tooltip will become
                  visibile after &lt;code&gt;initialDelay&lt;/code&gt; milliseconds. After
                  &lt;code&gt;dismissDelay&lt;/code&gt; milliseconds the tooltip will be hidden. If
                  the mouse is over a region that has a valid tooltip, and the tooltip
                  is currently visible, when the mouse moves to a region that doesn&apos;t have
                  a valid tooltip the tooltip will be hidden. If the mouse then moves back
                  into a region that has a valid tooltip within &lt;code&gt;reshowDelay&lt;/code&gt;
                  milliseconds, the tooltip will immediately be shown, otherwise the
                  tooltip will be shown again after &lt;code&gt;initialDelay&lt;/code&gt; milliseconds.                
                <see>
                    JComponent#createToolTip                    
                </see>
                <author>
                    Dave Moore                    
                </author>
                <author>
                    Rich Schiavi                    
                </author>
            </javadoc>
            <declaration name="enterTimer" type="Timer" line="54"/>
            <declaration name="toolTipText" type="String" line="55"/>
            <declaration name="preferredLocation" type="Point" line="56"/>
            <declaration name="insideComponent" type="JComponent" line="57"/>
            <declaration name="mouseEvent" type="MouseEvent" line="58"/>
            <declaration name="showImmediately" type="boolean" line="59"/>
            <declaration name="TOOL_TIP_MANAGER_KEY" type="Object" line="60"/>
            <declaration name="tipWindow" type="Popup" line="61"/>
            <declaration name="window" type="Window" line="62"/>
            <javadoc line="62">
                The Window tip is being displayed in. This will be non-null if
                  the Window tip is in differs from that of insideComponent&apos;s Window.                
            </javadoc>
            <declaration name="tip" type="JToolTip" line="66"/>
            <declaration name="popupRect" type="Rectangle" line="68"/>
            <declaration name="popupFrameRect" type="Rectangle" line="69"/>
            <declaration name="enabled" type="boolean" line="71"/>
            <declaration name="tipShowing" type="boolean" line="72"/>
            <declaration name="focusChangeListener" type="FocusListener" line="74"/>
            <declaration name="moveBeforeEnterListener" type="MouseMotionListener" line="75"/>
            <declaration name="accessibilityKeyListener" type="KeyListener" line="76"/>
            <declaration name="postTip" type="KeyStroke" line="78"/>
            <declaration name="hideTip" type="KeyStroke" line="79"/>
            <declaration name="lightWeightPopupEnabled" type="boolean" line="82"/>
            <declaration name="heavyWeightPopupEnabled" type="boolean" line="83"/>
            <method name="ToolTipManager" type="constructor" line="85"/>
            <javadoc line="100">
                Enables or disables the tooltip.                
                <param>
                    flag  true to enable the tip, false otherwise                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="105">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <scope line="107"/>
            </method>
            <javadoc line="112">
                Returns true if this object is enabled.                
                <return>
                    true if this object is enabled, false otherwise                    
                </return>
            </javadoc>
            <method name="isEnabled" type="boolean" line="117"/>
            <javadoc line="121">
                When displaying the &lt;code&gt;JToolTip&lt;/code&gt;, the
                  &lt;code&gt;ToolTipManager&lt;/code&gt; chooses to use a lightweight
                  &lt;code&gt;JPanel&lt;/code&gt; if it fits. This method allows you to
                  disable this feature. You have to do disable it if your
                  application mixes light weight and heavy weights components.                
                <param>
                    aFlag true if a lightweight panel is desired, false otherwise                    
                </param>
            </javadoc>
            <method name="setLightWeightPopupEnabled" type="void" line="131">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="135">
                Returns true if lightweight (all-Java) &lt;code&gt;Tooltips&lt;/code&gt;
                  are in use, or false if heavyweight (native peer)
                  &lt;code&gt;Tooltips&lt;/code&gt; are being used.                
                <return>
                    true if lightweight <code>ToolTips</code> are in use                    
                </return>
            </javadoc>
            <method name="isLightWeightPopupEnabled" type="boolean" line="142"/>
            <javadoc line="147">
                Specifies the initial delay value.                
                <param>
                    milliseconds  the number of milliseconds to delay
                      (after the cursor has paused) before displaying the
                      tooltip                    
                </param>
                <see>
                    #getInitialDelay                    
                </see>
            </javadoc>
            <method name="setInitialDelay" type="void" line="155">
                <params>
                    <param name="milliseconds" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Returns the initial delay value.                
                <return>
                    an integer representing the initial delay value,
                      in milliseconds                    
                </return>
                <see>
                    #setInitialDelay                    
                </see>
            </javadoc>
            <method name="getInitialDelay" type="int" line="166"/>
            <javadoc line="170">
                Specifies the dismissal delay value.                
                <param>
                    milliseconds  the number of milliseconds to delay
                      before taking away the tooltip                    
                </param>
                <see>
                    #getDismissDelay                    
                </see>
            </javadoc>
            <method name="setDismissDelay" type="void" line="177">
                <params>
                    <param name="milliseconds" type="int"/>
                </params>
            </method>
            <javadoc line="181">
                Returns the dismissal delay value.                
                <return>
                    an integer representing the dismissal delay value,
                      in milliseconds                    
                </return>
                <see>
                    #setDismissDelay                    
                </see>
            </javadoc>
            <method name="getDismissDelay" type="int" line="188"/>
            <javadoc line="192">
                Used to specify the amount of time before the user has to wait
                  &lt;code&gt;initialDelay&lt;/code&gt; milliseconds before a tooltip will be
                  shown. That is, if the tooltip is hidden, and the user moves into
                  a region of the same Component that has a valid tooltip within
                  &lt;code&gt;milliseconds&lt;/code&gt; milliseconds the tooltip will immediately
                  be shown. Otherwise, if the user moves into a region with a valid
                  tooltip after &lt;code&gt;milliseconds&lt;/code&gt; milliseconds, the user
                  will have to wait an additional &lt;code&gt;initialDelay&lt;/code&gt;
                  milliseconds before the tooltip is shown again.                
                <param>
                    milliseconds time in milliseconds                    
                </param>
                <see>
                    #getReshowDelay                    
                </see>
            </javadoc>
            <method name="setReshowDelay" type="void" line="206">
                <params>
                    <param name="milliseconds" type="int"/>
                </params>
            </method>
            <javadoc line="210">
                Returns the reshow delay property.                
                <return>
                    reshown delay property                    
                </return>
                <see>
                    #setReshowDelay                    
                </see>
            </javadoc>
            <method name="getReshowDelay" type="int" line="216"/>
            <method name="showTipWindow" type="void" line="220">
                <comment line="241">
                    Take into account screen insets, decrease viewport                    
                </comment>
                <comment line="249">
                    Just to be paranoid                    
                </comment>
                <comment line="273">
                    we do not adjust x/y when using awt.Window tips                    
                </comment>
                <comment line="280">
                    Fit as much of the tooltip on screen as possible                    
                </comment>
                <declaration name="mode" type="String" line="223"/>
                <scope line="224">
                    <declaration name="kfm" type="KeyboardFocusManager" line="225"/>
                    <scope line="227"/>
                </scope>
                <scope line="231">
                    <declaration name="size" type="Dimension" line="232"/>
                    <declaration name="screenLocation" type="Point" line="233"/>
                    <declaration name="location" type="Point" line="234"/>
                    <declaration name="gc" type="GraphicsConfiguration" line="235"/>
                    <declaration name="sBounds" type="Rectangle" line="237"/>
                    <declaration name="screenInsets" type="Insets" line="238"/>
                    <declaration name="leftToRight" type="boolean" line="245"/>
                    <scope line="255">
                        <scope line="258"/>
                    </scope>
                    <scope line="261">
                        <scope line="264">
                            <scope line="265"/>
                        </scope>
                    </scope>
                    <scope line="273"/>
                    <scope line="280"/>
                    <scope line="283"/>
                    <scope line="287"/>
                    <scope line="290"/>
                    <declaration name="popupFactory" type="PopupFactory" line="294"/>
                    <scope line="296">
                        <declaration name="y" type="int" line="297"/>
                        <declaration name="x" type="int" line="298"/>
                        <scope line="299"/>
                        <scope line="301"/>
                    </scope>
                    <scope line="305"/>
                    <declaration name="componentWindow" type="Window" line="315"/>
                    <scope line="319"/>
                    <scope line="322"/>
                </scope>
            </method>
            <method name="hideTipWindow" type="void" line="331">
                <scope line="332">
                    <scope line="333"/>
                </scope>
            </method>
            <javadoc line="345">
                Returns a shared &lt;code&gt;ToolTipManager&lt;/code&gt; instance.                
                <return>
                    a shared <code>ToolTipManager</code> object                    
                </return>
            </javadoc>
            <method name="sharedInstance" type="ToolTipManager" line="350">
                <declaration name="value" type="Object" line="351"/>
                <scope line="352"/>
                <declaration name="manager" type="ToolTipManager" line="355"/>
            </method>
            <javadoc line="361">
                Registers a component for tooltip management.
                  &lt;p&gt;
                  This will register key bindings to show and hide the tooltip text
                  only if &lt;code&gt;component&lt;/code&gt; has focus bindings. This is done
                  so that components that are not normally focus traversable, such
                  as &lt;code&gt;JLabel&lt;/code&gt;, are not made focus traversable as a result
                  of invoking this method.                
                <param>
                    component  a <code>JComponent</code> object to add                    
                </param>
                <see>
                    JComponent#isFocusTraversable                    
                </see>
            </javadoc>
            <method name="registerComponent" type="void" line="373">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
            <javadoc line="382">
                Removes a component from tooltip control.                
                <param>
                    component  a <code>JComponent</code> object to remove                    
                </param>
            </javadoc>
            <method name="unregisterComponent" type="void" line="387">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
            </method>
            <javadoc line="394">
                Called when the mouse enters the region of a component.
                  This determines whether the tool tip should be shown.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseEntered" type="void" line="400">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
            </method>
            <method name="initiateToolTip" type="void" line="404">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <comment line="415">
                    ensure tooltip shows only in proper place                    
                </comment>
                <comment line="426">
                    A component in an unactive internal frame is sent two
                     mouseEntered events, make sure we don&apos;t end up adding
                     ourselves an extra time.                    
                </comment>
                <scope line="405"/>
                <declaration name="component" type="JComponent" line="408"/>
                <declaration name="location" type="Point" line="413"/>
                <scope line="418"/>
                <scope line="422"/>
                <declaration name="sameComponent" type="boolean" line="431"/>
                <scope line="434">
                    <scope line="436">
                        <declaration name="newToolTipText" type="String" line="437"/>
                        <declaration name="newPreferredLocation" type="Point" line="438"/>
                        <declaration name="sameLoc" type="boolean" line="440"/>
                        <scope line="445"/>
                    </scope>
                    <scope line="450"/>
                </scope>
            </method>
            <javadoc line="457">
                Called when the mouse exits the region of a component.
                  Any tool tip showing should be hidden.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseExited" type="void" line="463">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <comment line="467">
                    Drag exit                    
                </comment>
                <comment line="470">
                    if we get an exit and have a heavy window
                     we need to check if it if overlapping the inside component                    
                </comment>
                <comment line="473">
                    insideComponent may be removed after tooltip is made visible                    
                </comment>
                <comment line="491">
                    insideComponent may have been hidden (e.g. in a menu)                    
                </comment>
                <declaration name="shouldHide" type="boolean" line="464"/>
                <scope line="465"/>
                <scope line="468">
                    <declaration name="insideComponentWindow" type="Container" line="471"/>
                    <scope line="473">
                        <declaration name="location" type="Point" line="474"/>
                        <scope line="482"/>
                        <scope line="484"/>
                    </scope>
                </scope>
                <scope line="488">
                    <declaration name="win" type="Window" line="489"/>
                    <scope line="490">
                        <declaration name="location" type="Point" line="491"/>
                        <declaration name="bounds" type="Rectangle" line="494"/>
                        <declaration name="loc" type="Point" line="498"/>
                        <scope line="506"/>
                        <scope line="508"/>
                    </scope>
                </scope>
                <scope line="514">
                    <scope line="516"/>
                </scope>
            </method>
            <javadoc line="528">
                Called when the mouse is pressed.
                  Any tool tip showing should be hidden.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mousePressed" type="void" line="534">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="543">
                Called when the mouse is pressed and dragged.
                  Does nothing.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseDragged" type="void" line="549">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="553">
                Called when the mouse is moved.
                  Determines whether the tool tip should be displayed.                
                <param>
                    event  the event in question                    
                </param>
            </javadoc>
            <method name="mouseMoved" type="void" line="559">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <comment line="576">
                    Lazily lookup the values from within insideTimerAction                    
                </comment>
                <scope line="560"/>
                <scope line="563">
                    <declaration name="component" type="JComponent" line="564"/>
                    <scope line="566"/>
                </scope>
                <scope line="574"/>
            </method>
            <javadoc line="583">
                Checks to see if the tooltip needs to be changed in response to
                  the MouseMoved event &lt;code&gt;event&lt;/code&gt;.                
            </javadoc>
            <method name="checkForTipChange" type="void" line="587">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <declaration name="component" type="JComponent" line="588"/>
                <declaration name="newText" type="String" line="589"/>
                <declaration name="newPreferredLocation" type="Point" line="590"/>
                <scope line="592">
                    <scope line="596">
                        <scope line="597"/>
                        <scope line="599"/>
                    </scope>
                    <scope line="602">
                        <scope line="605"/>
                        <scope line="609"/>
                    </scope>
                </scope>
                <scope line="613"/>
            </method>
            <class name="insideTimerAction" line="624">
                <implements interface="ActionListener"/>
                <method name="actionPerformed" type="void" line="625">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="628">
                        Lazy lookup                        
                    </comment>
                    <scope line="626">
                        <scope line="628"/>
                        <scope line="633"/>
                        <scope line="637"/>
                    </scope>
                </method>
            </class>
            <class name="outsideTimerAction" line="648">
                <implements interface="ActionListener"/>
                <method name="actionPerformed" type="void" line="649">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="stillInsideTimerAction" line="654">
                <implements interface="ActionListener"/>
                <method name="actionPerformed" type="void" line="655">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <class name="MoveBeforeEnterListener" line="672">
                <extends class="MouseMotionAdapter"/>
                <method name="mouseMoved" type="void" line="673">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                </method>
            </class>
            <method name="frameForComponent" type="Frame" line="678">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <scope line="679"/>
            </method>
            <method name="createFocusChangeListener" type="FocusListener" line="685">
                <anonymous_class line="686">
                    <method name="focusLost" type="void" line="687">
                        <params>
                            <param name="evt" type="FocusEvent"/>
                        </params>
                        <declaration name="c" type="JComponent" line="690"/>
                    </method>
                </anonymous_class>
            </method>
            <method name="getPopupFitWidth" type="int" line="699">
                <params>
                    <param name="popupRectInScreen" type="Rectangle"/>
                    <param name="invoker" type="Component"/>
                </params>
                <comment line="704">
                    fix internal frame size bug: 4139087 - 4159012                    
                </comment>
                <comment line="706">
                    no check for awt.Frame since we use Heavy tips                    
                </comment>
                <scope line="700">
                    <declaration name="parent" type="Container" line="701"/>
                    <scope line="702">
                        <scope line="705"/>
                        <scope line="707">
                            <scope line="708"/>
                            <declaration name="p" type="Point" line="711"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getPopupFitHeight" type="int" line="724">
                <params>
                    <param name="popupRectInScreen" type="Rectangle"/>
                    <param name="invoker" type="Component"/>
                </params>
                <scope line="725">
                    <declaration name="parent" type="Container" line="726"/>
                    <scope line="727">
                        <scope line="729"/>
                        <scope line="731">
                            <scope line="732"/>
                            <declaration name="p" type="Point" line="735"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="getHeightAdjust" type="int" line="746">
                <params>
                    <param name="a" type="Rectangle"/>
                    <param name="b" type="Rectangle"/>
                </params>
            </method>
            <method name="getWidthAdjust" type="int" line="756">
                <params>
                    <param name="a" type="Rectangle"/>
                    <param name="b" type="Rectangle"/>
                </params>
                <comment line="758">
                    System.out.println(&quot;width b.x/b.width: &quot; + b.x + &quot;/&quot; + b.width +
                                     &quot;a.x/a.width: &quot; + a.x + &quot;/&quot; + a.width);                    
                </comment>
                <scope line="759"/>
                <scope line="762"/>
            </method>
            <method name="show" type="void" line="771">
                <params>
                    <param name="source" type="JComponent"/>
                </params>
                <comment line="773">
                    showing we unshow                    
                </comment>
                <comment line="778">
                    be safe                    
                </comment>
                <comment line="786">
                    manual set                    
                </comment>
                <comment line="788">
                    put a focuschange listener on to bring the tip down                    
                </comment>
                <scope line="772"/>
                <scope line="776">
                    <scope line="782">
                        <scope line="788"/>
                    </scope>
                </scope>
            </method>
            <method name="hide" type="void" line="796">
                <params>
                    <param name="source" type="JComponent"/>
                </params>
            </method>
            <class name="AccessibilityKeyListener" line="810">
                <extends class="KeyAdapter"/>
                <method name="keyPressed" type="void" line="811">
                    <params>
                        <param name="e" type="KeyEvent"/>
                    </params>
                    <comment line="822">
                        Shown tooltip will be hidden                        
                    </comment>
                    <scope line="812">
                        <declaration name="source" type="JComponent" line="813"/>
                        <declaration name="keyStrokeForEvent" type="KeyStroke" line="814"/>
                        <scope line="815">
                            <scope line="816"/>
                        </scope>
                        <scope line="820"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>