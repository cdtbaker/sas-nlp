<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.UIAction"/>
        <import package="java.applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.dnd.DropTarget"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <import package="java.lang.reflect"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.event.MenuDragMouseEvent"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.text.View"/>
        <import package="java.security.AccessController"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.awt.AppContext"/>
        <class name="SwingUtilities" line="18">
            <implements interface="SwingConstants"/>
            <javadoc line="18">
                A collection of utility methods for Swing.                
                <author>
                    unknown                    
                </author>
            </javadoc>
            <declaration name="canAccessEventQueue" type="boolean" line="23"/>
            <declaration name="eventQueueTested" type="boolean" line="24"/>
            <declaration name="suppressDropSupport" type="boolean" line="25"/>
            <javadoc line="25">
                Indicates if we should change the drop target when a{@code TransferHandler} is set.                
            </javadoc>
            <declaration name="checkedSuppressDropSupport" type="boolean" line="29"/>
            <javadoc line="29">
                Indiciates if we&apos;ve checked the system property for suppressing
                  drop support.                
            </javadoc>
            <javadoc line="34">
                Returns true if &lt;code&gt;setTransferHandler&lt;/code&gt; should change the
                  &lt;code&gt;DropTarget&lt;/code&gt;.                
            </javadoc>
            <method name="getSuppressDropTarget" type="boolean" line="38">
                <scope line="39"/>
            </method>
            <javadoc line="45">
                Installs a {@code DropTarget} on the component as necessary for a{@code TransferHandler} change.                
            </javadoc>
            <method name="installSwingDropTargetAsNecessary" type="void" line="48">
                <params>
                    <param name="c" type="Component"/>
                    <param name="t" type="TransferHandler"/>
                </params>
                <scope line="49">
                    <declaration name="dropHandler" type="DropTarget" line="50"/>
                    <scope line="51">
                        <scope line="52"/>
                        <scope line="55"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="61">
                Return true if &lt;code&gt;a&lt;/code&gt; contains &lt;code&gt;b&lt;/code&gt;                
            </javadoc>
            <method name="isRectangleContainingRectangle" type="boolean" line="64">
                <params>
                    <param name="a" type="Rectangle"/>
                    <param name="b" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="67">
                Return the rectangle (0,0,bounds.width,bounds.height) for the component &lt;code&gt;aComponent&lt;/code&gt;                
            </javadoc>
            <method name="getLocalBounds" type="Rectangle" line="70">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
                <declaration name="b" type="Rectangle" line="71"/>
            </method>
            <javadoc line="75">
                Returns the first &lt;code&gt;Window &lt;/code&gt; ancestor of &lt;code&gt;c&lt;/code&gt;, or{@code null} if &lt;code&gt;c&lt;/code&gt; is not contained inside a &lt;code&gt;Window&lt;/code&gt;.                
                <param>
                    c &lt;code&gt;Component&lt;/code&gt; to get &lt;code&gt;Window&lt;/code&gt; ancestor
                      of.                    
                </param>
                <return>
                    the first &lt;code&gt;Window &lt;/code&gt; ancestor of &lt;code&gt;c&lt;/code&gt;, or{@code null} if &lt;code&gt;c&lt;/code&gt; is not contained inside a
                      &lt;code&gt;Window&lt;/code&gt;.                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getWindowAncestor" type="Window" line="83">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="84">
                    <scope line="85"/>
                </scope>
            </method>
            <javadoc line="91">
                Converts the location &lt;code&gt;x&lt;/code&gt; &lt;code&gt;y&lt;/code&gt; to the
                  parents coordinate system, returning the location.                
            </javadoc>
            <method name="convertScreenLocationToParent" type="Point" line="95">
                <params>
                    <param name="parent" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="96">
                    <scope line="97">
                        <declaration name="point" type="Point" line="98"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="105">
                Convert a &lt;code&gt;aPoint&lt;/code&gt; in &lt;code&gt;source&lt;/code&gt; coordinate system to
                  &lt;code&gt;destination&lt;/code&gt; coordinate system.
                  If &lt;code&gt;source&lt;/code&gt; is {@code null}, &lt;code&gt;aPoint&lt;/code&gt; is assumed to be in &lt;code&gt;destination&lt;/code&gt;&apos;s
                  root component coordinate system.
                  If &lt;code&gt;destination&lt;/code&gt; is {@code null}, &lt;code&gt;aPoint&lt;/code&gt; will be converted to &lt;code&gt;source&lt;/code&gt;&apos;s
                  root component coordinate system.
                  If both &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; are {@code null}, return &lt;code&gt;aPoint&lt;/code&gt;
                  without any conversion.                
            </javadoc>
            <method name="convertPoint" type="Point" line="115">
                <params>
                    <param name="source" type="Component"/>
                    <param name="aPoint" type="Point"/>
                    <param name="destination" type="Component"/>
                </params>
                <declaration name="p" type="Point" line="116"/>
                <scope line="118"/>
                <scope line="124"/>
            </method>
            <javadoc line="131">
                Convert the point &lt;code&gt;(x,y)&lt;/code&gt; in &lt;code&gt;source&lt;/code&gt; coordinate system to
                  &lt;code&gt;destination&lt;/code&gt; coordinate system.
                  If &lt;code&gt;source&lt;/code&gt; is {@code null}, &lt;code&gt;(x,y)&lt;/code&gt; is assumed to be in &lt;code&gt;destination&lt;/code&gt;&apos;s
                  root component coordinate system.
                  If &lt;code&gt;destination&lt;/code&gt; is {@code null}, &lt;code&gt;(x,y)&lt;/code&gt; will be converted to &lt;code&gt;source&lt;/code&gt;&apos;s
                  root component coordinate system.
                  If both &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; are {@code null}, return &lt;code&gt;(x,y)&lt;/code&gt;
                  without any conversion.                
            </javadoc>
            <method name="convertPoint" type="Point" line="141">
                <params>
                    <param name="source" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="destination" type="Component"/>
                </params>
                <declaration name="point" type="Point" line="142"/>
            </method>
            <javadoc line="145">
                Convert the rectangle &lt;code&gt;aRectangle&lt;/code&gt; in &lt;code&gt;source&lt;/code&gt; coordinate system to
                  &lt;code&gt;destination&lt;/code&gt; coordinate system.
                  If &lt;code&gt;source&lt;/code&gt; is {@code null}, &lt;code&gt;aRectangle&lt;/code&gt; is assumed to be in &lt;code&gt;destination&lt;/code&gt;&apos;s
                  root component coordinate system.
                  If &lt;code&gt;destination&lt;/code&gt; is {@code null}, &lt;code&gt;aRectangle&lt;/code&gt; will be converted to &lt;code&gt;source&lt;/code&gt;&apos;s
                  root component coordinate system.
                  If both &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;destination&lt;/code&gt; are {@code null}, return &lt;code&gt;aRectangle&lt;/code&gt;
                  without any conversion.                
            </javadoc>
            <method name="convertRectangle" type="Rectangle" line="155">
                <params>
                    <param name="source" type="Component"/>
                    <param name="aRectangle" type="Rectangle"/>
                    <param name="destination" type="Component"/>
                </params>
                <declaration name="point" type="Point" line="156"/>
            </method>
            <javadoc line="160">
                Convenience method for searching above &lt;code&gt;comp&lt;/code&gt; in the
                  component hierarchy and returns the first object of class &lt;code&gt;c&lt;/code&gt; it
                  finds. Can return {@code null}, if a class &lt;code&gt;c&lt;/code&gt; cannot be found.                
            </javadoc>
            <method name="getAncestorOfClass" type="Container" line="165">
                <params>
                    <param name="c" type="Class&lt;?&gt;"/>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="parent" type="Container" line="167"/>
            </method>
            <javadoc line="171">
                Convenience method for searching above &lt;code&gt;comp&lt;/code&gt; in the
                  component hierarchy and returns the first object of &lt;code&gt;name&lt;/code&gt; it
                  finds. Can return {@code null}, if &lt;code&gt;name&lt;/code&gt; cannot be found.                
            </javadoc>
            <method name="getAncestorNamed" type="Container" line="176">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
                <declaration name="parent" type="Container" line="178"/>
            </method>
            <javadoc line="182">
                Returns the deepest visible descendent Component of &lt;code&gt;parent&lt;/code&gt;
                  that contains the location &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;.
                  If &lt;code&gt;parent&lt;/code&gt; does not contain the specified location,
                  then &lt;code&gt;null&lt;/code&gt; is returned.  If &lt;code&gt;parent&lt;/code&gt; is not a
                  container, or none of &lt;code&gt;parent&lt;/code&gt;&apos;s visible descendents
                  contain the specified location, &lt;code&gt;parent&lt;/code&gt; is returned.                
                <param>
                    parent the root component to begin the search                    
                </param>
                <param>
                    x the x target location                    
                </param>
                <param>
                    y the y target location                    
                </param>
            </javadoc>
            <method name="getDeepestComponentAt" type="Component" line="193">
                <params>
                    <param name="parent" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="194"/>
                <scope line="197">
                    <declaration name="components" type="Component" line="198"/>
                    <scope line="199">
                        <scope line="200">
                            <declaration name="loc" type="Point" line="201"/>
                            <scope line="202"/>
                            <scope line="205"/>
                            <scope line="208"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="216">
                Returns a MouseEvent similar to &lt;code&gt;sourceEvent&lt;/code&gt; except that its x
                  and y members have been converted to &lt;code&gt;destination&lt;/code&gt;&apos;s coordinate
                  system.  If &lt;code&gt;source&lt;/code&gt; is {@code null}, &lt;code&gt;sourceEvent&lt;/code&gt; x and y members
                  are assumed to be into &lt;code&gt;destination&lt;/code&gt;&apos;s root component coordinate system.
                  If &lt;code&gt;destination&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the
                  returned MouseEvent will be in &lt;code&gt;source&lt;/code&gt;&apos;s coordinate system.
                  &lt;code&gt;sourceEvent&lt;/code&gt; will not be changed. A new event is returned.
                  the &lt;code&gt;source&lt;/code&gt; field of the returned event will be set
                  to &lt;code&gt;destination&lt;/code&gt; if destination is non-{@code null}use the translateMouseEvent() method to translate a mouse event from
                  one component to another without changing the source.                
            </javadoc>
            <method name="convertMouseEvent" type="MouseEvent" line="228">
                <params>
                    <param name="source" type="Component"/>
                    <param name="sourceEvent" type="MouseEvent"/>
                    <param name="destination" type="Component"/>
                </params>
                <declaration name="p" type="Point" line="229"/>
                <declaration name="newSource" type="Component" line="230"/>
                <declaration name="newEvent" type="MouseEvent" line="233"/>
                <scope line="234">
                    <declaration name="sourceWheelEvent" type="MouseWheelEvent" line="235"/>
                </scope>
                <scope line="238">
                    <declaration name="sourceMenuDragEvent" type="MenuDragMouseEvent" line="239"/>
                </scope>
                <scope line="242"/>
            </method>
            <javadoc line="247">
                Convert a point from a component&apos;s coordinate system to
                  screen coordinates.                
                <param>
                    p  a Point object (converted to the new coordinate system)                    
                </param>
                <param>
                    c  a Component object                    
                </param>
            </javadoc>
            <method name="convertPointToScreen" type="void" line="253">
                <params>
                    <param name="p" type="Point"/>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="b" type="Rectangle" line="254"/>
                <declaration name="x" type="int" line="255"/>
                <scope line="256">
                    <scope line="257"/>
                    <scope line="261">
                        <scope line="262">
                            <declaration name="pp" type="Point" line="263"/>
                        </scope>
                        <scope line="267"/>
                    </scope>
                    <scope line="272"/>
                </scope>
            </method>
            <javadoc line="283">
                Convert a point from a screen coordinates to a component&apos;s
                  coordinate system                
                <param>
                    p  a Point object (converted to the new coordinate system)                    
                </param>
                <param>
                    c  a Component object                    
                </param>
            </javadoc>
            <method name="convertPointFromScreen" type="void" line="289">
                <params>
                    <param name="p" type="Point"/>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="b" type="Rectangle" line="290"/>
                <declaration name="x" type="int" line="291"/>
                <scope line="292">
                    <scope line="293"/>
                    <scope line="297">
                        <scope line="298">
                            <declaration name="pp" type="Point" line="299"/>
                        </scope>
                        <scope line="303"/>
                    </scope>
                    <scope line="308"/>
                </scope>
            </method>
            <javadoc line="319">
                Returns the first &lt;code&gt;Window &lt;/code&gt; ancestor of &lt;code&gt;c&lt;/code&gt;, or{@code null} if &lt;code&gt;c&lt;/code&gt; is not contained inside a &lt;code&gt;Window&lt;/code&gt;.
                  &lt;p&gt;
                  Note: This method provides the same functionality as
                  &lt;code&gt;getWindowAncestor&lt;/code&gt;.                
                <param>
                    c &lt;code&gt;Component&lt;/code&gt; to get &lt;code&gt;Window&lt;/code&gt; ancestor
                      of.                    
                </param>
                <return>
                    the first &lt;code&gt;Window &lt;/code&gt; ancestor of &lt;code&gt;c&lt;/code&gt;, or{@code null} if &lt;code&gt;c&lt;/code&gt; is not contained inside a
                      &lt;code&gt;Window&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="windowForComponent" type="Window" line="329">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="332">
                Return &lt;code&gt;true&lt;/code&gt; if a component &lt;code&gt;a&lt;/code&gt; descends from a component &lt;code&gt;b&lt;/code&gt;                
            </javadoc>
            <method name="isDescendingFrom" type="boolean" line="335">
                <params>
                    <param name="a" type="Component"/>
                    <param name="b" type="Component"/>
                </params>
            </method>
            <javadoc line="340">
                Convenience to calculate the intersection of two rectangles
                  without allocating a new rectangle.
                  If the two rectangles don&apos;t intersect,
                  then the returned rectangle begins at (0,0)
                  and has zero width and height.                
                <param>
                    x       the X coordinate of the first rectangle&apos;s top-left point                    
                </param>
                <param>
                    y       the Y coordinate of the first rectangle&apos;s top-left point                    
                </param>
                <param>
                    width   the width of the first rectangle                    
                </param>
                <param>
                    height  the height of the first rectangle                    
                </param>
                <param>
                    dest    the second rectangle                    
                </param>
                <return>
                    &lt;code&gt;dest&lt;/code&gt;, modified to specify the intersection                    
                </return>
            </javadoc>
            <method name="computeIntersection" type="Rectangle" line="353">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="dest" type="Rectangle"/>
                </params>
                <declaration name="x1" type="int" line="354"/>
                <declaration name="x2" type="int" line="355"/>
                <declaration name="y1" type="int" line="356"/>
                <declaration name="y2" type="int" line="357"/>
                <scope line="362"/>
            </method>
            <javadoc line="367">
                Convenience method that calculates the union of two rectangles
                  without allocating a new rectangle.                
                <param>
                    x the x-coordinate of the first rectangle                    
                </param>
                <param>
                    y the y-coordinate of the first rectangle                    
                </param>
                <param>
                    width the width of the first rectangle                    
                </param>
                <param>
                    height the height of the first rectangle                    
                </param>
                <param>
                    dest  the coordinates of the second rectangle; the union
                      of the two rectangles is returned in this rectangle                    
                </param>
                <return>
                    the &lt;code&gt;dest&lt;/code&gt; &lt;code&gt;Rectangle&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="computeUnion" type="Rectangle" line="378">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                    <param name="dest" type="Rectangle"/>
                </params>
                <declaration name="x1" type="int" line="379"/>
                <declaration name="x2" type="int" line="380"/>
                <declaration name="y1" type="int" line="381"/>
                <declaration name="y2" type="int" line="382"/>
            </method>
            <javadoc line="389">
                Convenience returning an array of rect representing the regions within
                  &lt;code&gt;rectA&lt;/code&gt; that do not overlap with &lt;code&gt;rectB&lt;/code&gt;. If the
                  two Rects do not overlap, returns an empty array                
            </javadoc>
            <method name="computeDifference" type="Rectangle[]" line="394">
                <params>
                    <param name="rectA" type="Rectangle"/>
                    <param name="rectB" type="Rectangle"/>
                </params>
                <scope line="395"/>
                <declaration name="t" type="Rectangle" line="398"/>
                <declaration name="a" type="Rectangle" line="399"/>
                <declaration name="result" type="Rectangle" line="400"/>
                <declaration name="rectCount" type="int" line="401"/>
                <scope line="402">
                    <scope line="407"/>
                    <scope line="415"/>
                    <scope line="423"/>
                    <scope line="431"/>
                </scope>
                <scope line="436">
                    <scope line="437">
                        <scope line="438">
                            <scope line="443"/>
                        </scope>
                        <scope line="448">
                            <scope line="450"/>
                        </scope>
                        <scope line="455">
                            <scope line="457"/>
                            <scope line="462"/>
                        </scope>
                    </scope>
                    <scope line="468">
                        <scope line="469">
                            <scope line="471"/>
                        </scope>
                        <scope line="476">
                            <scope line="478"/>
                            <scope line="483"/>
                        </scope>
                    </scope>
                    <scope line="489">
                        <scope line="490">
                            <scope line="492"/>
                            <scope line="497"/>
                        </scope>
                        <scope line="502">
                            <scope line="504"/>
                            <scope line="509"/>
                            <scope line="514"/>
                        </scope>
                    </scope>
                    <scope line="520">
                        <scope line="521">
                            <scope line="523"/>
                        </scope>
                        <scope line="528">
                            <scope line="530"/>
                            <scope line="535"/>
                        </scope>
                        <scope line="540">
                            <scope line="542"/>
                            <scope line="547"/>
                        </scope>
                        <scope line="552">
                            <scope line="554"/>
                            <scope line="559"/>
                            <scope line="564"/>
                        </scope>
                    </scope>
                    <scope line="570">
                        <scope line="571">
                            <scope line="573"/>
                            <scope line="578"/>
                        </scope>
                        <scope line="583">
                            <scope line="585"/>
                            <scope line="590"/>
                            <scope line="595"/>
                        </scope>
                        <scope line="600">
                            <scope line="602"/>
                            <scope line="607"/>
                            <scope line="612"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="627">
                Returns true if the mouse event specifies the left mouse button.                
                <param>
                    anEvent  a MouseEvent object                    
                </param>
                <return>
                    true if the left mouse button was active                    
                </return>
            </javadoc>
            <method name="isLeftMouseButton" type="boolean" line="632">
                <params>
                    <param name="anEvent" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="635">
                Returns true if the mouse event specifies the middle mouse button.                
                <param>
                    anEvent  a MouseEvent object                    
                </param>
                <return>
                    true if the middle mouse button was active                    
                </return>
            </javadoc>
            <method name="isMiddleMouseButton" type="boolean" line="640">
                <params>
                    <param name="anEvent" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="643">
                Returns true if the mouse event specifies the right mouse button.                
                <param>
                    anEvent  a MouseEvent object                    
                </param>
                <return>
                    true if the right mouse button was active                    
                </return>
            </javadoc>
            <method name="isRightMouseButton" type="boolean" line="648">
                <params>
                    <param name="anEvent" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="651">
                Compute the width of the string using a font with the specified
                  &quot;metrics&quot; (sizes).                
                <param>
                    fm   a FontMetrics object to compute with                    
                </param>
                <param>
                    str  the String to compute                    
                </param>
                <return>
                    an int containing the string width                    
                </return>
            </javadoc>
            <method name="computeStringWidth" type="int" line="658">
                <params>
                    <param name="fm" type="FontMetrics"/>
                    <param name="str" type="String"/>
                </params>
            </method>
            <javadoc line="661">
                Compute and return the location of the icons origin, the
                  location of origin of the text baseline, and a possibly clipped
                  version of the compound labels string.  Locations are computed
                  relative to the viewR rectangle.
                  The JComponents orientation (LEADING/TRAILING) will also be taken
                  into account and translated into LEFT/RIGHT values accordingly.                
            </javadoc>
            <method name="layoutCompoundLabel" type="String" line="669">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="verticalAlignment" type="int"/>
                    <param name="horizontalAlignment" type="int"/>
                    <param name="verticalTextPosition" type="int"/>
                    <param name="horizontalTextPosition" type="int"/>
                    <param name="viewR" type="Rectangle"/>
                    <param name="iconR" type="Rectangle"/>
                    <param name="textR" type="Rectangle"/>
                    <param name="textIconGap" type="int"/>
                </params>
                <declaration name="orientationIsLeftToRight" type="boolean" line="670"/>
                <declaration name="hAlign" type="int" line="671"/>
                <declaration name="hTextPos" type="int" line="672"/>
                <scope line="673">
                    <scope line="674"/>
                </scope>
            </method>
            <javadoc line="696">
                Compute and return the location of the icons origin, the
                  location of origin of the text baseline, and a possibly clipped
                  version of the compound labels string.  Locations are computed
                  relative to the viewR rectangle.
                  This layoutCompoundLabel() does not know how to handle LEADING/TRAILING
                  values in horizontalTextPosition (they will default to RIGHT) and in
                  horizontalAlignment (they will default to CENTER).
                  Use the other version of layoutCompoundLabel() instead.                
            </javadoc>
            <method name="layoutCompoundLabel" type="String" line="706">
                <params>
                    <param name="fm" type="FontMetrics"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="verticalAlignment" type="int"/>
                    <param name="horizontalAlignment" type="int"/>
                    <param name="verticalTextPosition" type="int"/>
                    <param name="horizontalTextPosition" type="int"/>
                    <param name="viewR" type="Rectangle"/>
                    <param name="iconR" type="Rectangle"/>
                    <param name="textR" type="Rectangle"/>
                    <param name="textIconGap" type="int"/>
                </params>
            </method>
            <javadoc line="709">
                Compute and return the location of the icons origin, the
                  location of origin of the text baseline, and a possibly clipped
                  version of the compound labels string.  Locations are computed
                  relative to the viewR rectangle.
                  This layoutCompoundLabel() does not know how to handle LEADING/TRAILING
                  values in horizontalTextPosition (they will default to RIGHT) and in
                  horizontalAlignment (they will default to CENTER).
                  Use the other version of layoutCompoundLabel() instead.                
            </javadoc>
            <method name="layoutCompoundLabelImpl" type="String" line="719">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="fm" type="FontMetrics"/>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                    <param name="verticalAlignment" type="int"/>
                    <param name="horizontalAlignment" type="int"/>
                    <param name="verticalTextPosition" type="int"/>
                    <param name="horizontalTextPosition" type="int"/>
                    <param name="viewR" type="Rectangle"/>
                    <param name="iconR" type="Rectangle"/>
                    <param name="textR" type="Rectangle"/>
                    <param name="textIconGap" type="int"/>
                </params>
                <scope line="720"/>
                <scope line="724"/>
                <declaration name="textIsEmpty" type="boolean" line="727"/>
                <declaration name="lsb" type="int" line="728"/>
                <declaration name="rsb" type="int" line="729"/>
                <declaration name="gap" type="int" line="730"/>
                <declaration name="v" type="View" line="731"/>
                <scope line="732"/>
                <scope line="737">
                    <declaration name="availTextWidth" type="int" line="738"/>
                    <scope line="740"/>
                    <scope line="743"/>
                    <scope line="747"/>
                    <scope line="751">
                        <scope line="754"/>
                        <scope line="757"/>
                    </scope>
                </scope>
                <scope line="764">
                    <scope line="765"/>
                    <scope line="768"/>
                </scope>
                <scope line="772"/>
                <scope line="775">
                    <scope line="776"/>
                    <scope line="779"/>
                </scope>
                <scope line="783"/>
                <scope line="786"/>
                <scope line="789"/>
                <declaration name="labelR_x" type="int" line="792"/>
                <declaration name="labelR_width" type="int" line="793"/>
                <declaration name="labelR_y" type="int" line="794"/>
                <declaration name="labelR_height" type="int" line="795"/>
                <declaration name="dx" type="int" line="796"/>
                <scope line="797"/>
                <scope line="800"/>
                <scope line="803"/>
                <scope line="806"/>
                <scope line="809"/>
                <scope line="812"/>
                <scope line="819"/>
                <scope line="823"/>
            </method>
            <javadoc line="828">
                Paints a component to the specified &lt;code&gt;Graphics&lt;/code&gt;.
                  This method is primarily useful to render
                  &lt;code&gt;Component&lt;/code&gt;s that don&apos;t exist as part of the visible
                  containment hierarchy, but are used for rendering.  For
                  example, if you are doing your own rendering and want to render
                  some text (or even HTML), you could make use of
                  &lt;code&gt;JLabel&lt;/code&gt;&apos;s text rendering support and have it paint
                  directly by way of this method, without adding the label to the
                  visible containment hierarchy.
                  &lt;p&gt;
                  This method makes use of &lt;code&gt;CellRendererPane&lt;/code&gt; to handle
                  the actual painting, and is only recommended if you use one
                  component for rendering.  If you make use of multiple components
                  to handle the rendering, as &lt;code&gt;JTable&lt;/code&gt; does, use
                  &lt;code&gt;CellRendererPane&lt;/code&gt; directly.  Otherwise, as described
                  below, you could end up with a &lt;code&gt;CellRendererPane&lt;/code&gt;
                  per &lt;code&gt;Component&lt;/code&gt;.
                  &lt;p&gt;
                  If &lt;code&gt;c&lt;/code&gt;&apos;s parent is not a &lt;code&gt;CellRendererPane&lt;/code&gt;,
                  a new &lt;code&gt;CellRendererPane&lt;/code&gt; is created, &lt;code&gt;c&lt;/code&gt; is
                  added to it, and the &lt;code&gt;CellRendererPane&lt;/code&gt; is added to
                  &lt;code&gt;p&lt;/code&gt;.  If &lt;code&gt;c&lt;/code&gt;&apos;s parent is a
                  &lt;code&gt;CellRendererPane&lt;/code&gt; and the &lt;code&gt;CellRendererPane&lt;/code&gt;s
                  parent is not &lt;code&gt;p&lt;/code&gt;, it is added to &lt;code&gt;p&lt;/code&gt;.
                  &lt;p&gt;
                  The component should either descend from &lt;code&gt;JComponent&lt;/code&gt;
                  or be another kind of lightweight component.
                  A lightweight component is one whose &quot;lightweight&quot; property
                  (returned by the &lt;code&gt;Component&lt;/code&gt;
                  &lt;code&gt;isLightweight&lt;/code&gt; method)
                  is true. If the Component is not lightweight, bad things map happen:
                  crashes, exceptions, painting problems...                
                <param>
                    g  the &lt;code&gt;Graphics&lt;/code&gt; object to draw on                    
                </param>
                <param>
                    c  the &lt;code&gt;Component&lt;/code&gt; to draw                    
                </param>
                <param>
                    p  the intermediate &lt;code&gt;Container&lt;/code&gt;                    
                </param>
                <param>
                    x  an int specifying the left side of the area draw in, in pixels,
                      measured from the left edge of the graphics context                    
                </param>
                <param>
                    y  an int specifying the top of the area to draw in, in pixels
                      measured down from the top edge of the graphics context                    
                </param>
                <param>
                    w  an int specifying the width of the area draw in, in pixels                    
                </param>
                <param>
                    h  an int specifying the height of the area draw in, in pixels                    
                </param>
                <see>
                    CellRendererPane                    
                </see>
                <see>
                    java.awt.Component#isLightweight                    
                </see>
            </javadoc>
            <method name="paintComponent" type="void" line="873">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="Component"/>
                    <param name="p" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="876">
                Paints a component to the specified &lt;code&gt;Graphics&lt;/code&gt;.  This
                  is a cover method for{@link #paintComponent(Graphics,Component,Container,int,int,int,int)}.
                  Refer to it for more information.                
                <param>
                    g  the &lt;code&gt;Graphics&lt;/code&gt; object to draw on                    
                </param>
                <param>
                    c  the &lt;code&gt;Component&lt;/code&gt; to draw                    
                </param>
                <param>
                    p  the intermediate &lt;code&gt;Container&lt;/code&gt;                    
                </param>
                <param>
                    r  the &lt;code&gt;Rectangle&lt;/code&gt; to draw in                    
                </param>
                <see>
                    #paintComponent(Graphics,Component,Container,int,int,int,int)                    
                </see>
                <see>
                    CellRendererPane                    
                </see>
            </javadoc>
            <method name="paintComponent" type="void" line="887">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="Component"/>
                    <param name="p" type="Container"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <method name="getCellRendererPane" type="CellRendererPane" line="890">
                <params>
                    <param name="c" type="Component"/>
                    <param name="p" type="Container"/>
                </params>
                <declaration name="shell" type="Container" line="891"/>
                <scope line="892">
                    <scope line="893"/>
                </scope>
                <scope line="897"/>
            </method>
            <javadoc line="904">
                A simple minded look and feel change: ask each node in the tree
                  to &lt;code&gt;updateUI()&lt;/code&gt; -- that is, to initialize its UI property
                  with the current look and feel.                
            </javadoc>
            <method name="updateComponentTreeUI" type="void" line="909">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="updateComponentTreeUI0" type="void" line="915">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="916">
                    <declaration name="jc" type="JComponent" line="917"/>
                    <declaration name="jpm" type="JPopupMenu" line="919"/>
                    <scope line="920"/>
                </scope>
                <declaration name="children" type="Component[]" line="924"/>
                <scope line="925"/>
                <scope line="928"/>
                <scope line="931">
                    <scope line="932"/>
                </scope>
            </method>
            <javadoc line="937">
                Causes &lt;i&gt;doRun.run()&lt;/i&gt; to be executed asynchronously on the
                  AWT event dispatching thread.  This will happen after all
                  pending AWT events have been processed.  This method should
                  be used when an application thread needs to update the GUI.
                  In the following example the &lt;code&gt;invokeLater&lt;/code&gt; call queues
                  the &lt;code&gt;Runnable&lt;/code&gt; object &lt;code&gt;doHelloWorld&lt;/code&gt;
                  on the event dispatching thread and
                  then prints a message.
                  &lt;pre&gt;
                  Runnable doHelloWorld = new Runnable() {
                  public void run() {
                  System.out.println(&quot;Hello World on &quot; + Thread.currentThread());
                  }
                  };
                  SwingUtilities.invokeLater(doHelloWorld);
                  System.out.println(&quot;This might well be displayed before the other message.&quot;);
                  &lt;/pre&gt;
                  If invokeLater is called from the event dispatching thread --
                  for example, from a JButton&apos;s ActionListener -- the &lt;i&gt;doRun.run()&lt;/i&gt; will
                  still be deferred until all pending events have been processed.
                  Note that if the &lt;i&gt;doRun.run()&lt;/i&gt; throws an uncaught exception
                  the event dispatching thread will unwind (not the current thread).
                  &lt;p&gt;
                  Additional documentation and examples for this method can be
                  found in
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How to Use Threads&lt;/a&gt;,
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  As of 1.3 this method is just a cover for &lt;code&gt;java.awt.EventQueue.invokeLater()&lt;/code&gt;.
                  &lt;p&gt;
                  Unlike the rest of Swing, this method can be invoked from any thread.                
                <see>
                    #invokeAndWait                    
                </see>
            </javadoc>
            <method name="invokeLater" type="void" line="971">
                <params>
                    <param name="doRun" type="Runnable"/>
                </params>
            </method>
            <javadoc line="974">
                Causes &lt;code&gt;doRun.run()&lt;/code&gt; to be executed synchronously on the
                  AWT event dispatching thread.  This call blocks until
                  all pending AWT events have been processed and (then)
                  &lt;code&gt;doRun.run()&lt;/code&gt; returns. This method should
                  be used when an application thread needs to update the GUI.
                  It shouldn&apos;t be called from the event dispatching thread.
                  Here&apos;s an example that creates a new application thread
                  that uses &lt;code&gt;invokeAndWait&lt;/code&gt; to print a string from the event
                  dispatching thread and then, when that&apos;s finished, print
                  a string from the application thread.
                  &lt;pre&gt;
                  final Runnable doHelloWorld = new Runnable() {
                  public void run() {
                  System.out.println(&quot;Hello World on &quot; + Thread.currentThread());
                  }
                  };
                  Thread appThread = new Thread() {
                  public void run() {
                  try {
                  SwingUtilities.invokeAndWait(doHelloWorld);
                  }
                  catch (Exception e) {
                  e.printStackTrace();
                  }
                  System.out.println(&quot;Finished on &quot; + Thread.currentThread());
                  }
                  };
                  appThread.start();
                  &lt;/pre&gt;
                  Note that if the &lt;code&gt;Runnable.run&lt;/code&gt; method throws an
                  uncaught exception
                  (on the event dispatching thread) it&apos;s caught and rethrown, as
                  an &lt;code&gt;InvocationTargetException&lt;/code&gt;, on the caller&apos;s thread.
                  &lt;p&gt;
                  Additional documentation and examples for this method can be
                  found in
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How to Use Threads&lt;/a&gt;,
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  As of 1.3 this method is just a cover for
                  &lt;code&gt;java.awt.EventQueue.invokeAndWait()&lt;/code&gt;.                
                <exception>
                    InterruptedException if we&apos;re interrupted while waiting for
                      the event dispatching thread to finish excecuting
                      &lt;code&gt;doRun.run()&lt;/code&gt;                    
                </exception>
                <exception>
                    InvocationTargetException  if an exception is thrown
                      while running &lt;code&gt;doRun&lt;/code&gt;                    
                </exception>
                <see>
                    #invokeLater                    
                </see>
            </javadoc>
            <method name="invokeAndWait" type="void" line="1023">
                <params>
                    <param name="doRun" type="Runnable"/>
                </params>
            </method>
            <javadoc line="1026">
                Returns true if the current thread is an AWT event dispatching thread.
                  &lt;p&gt;
                  As of 1.3 this method is just a cover for
                  &lt;code&gt;java.awt.EventQueue.isDispatchThread()&lt;/code&gt;.                
                <return>
                    true if the current thread is an AWT event dispatching thread                    
                </return>
            </javadoc>
            <method name="isEventDispatchThread" type="boolean" line="1033"/>
            <javadoc line="1036">
                Get the index of this object in its accessible parent.&lt;p&gt;
                  Note: as of the Java 2 platform v1.3, it is recommended that developers call
                  Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
                  of using this method.                
                <return>
                    -1 of this object does not have an accessible parent.
                      Otherwise, the index of the child in its accessible parent.                    
                </return>
            </javadoc>
            <method name="getAccessibleIndexInParent" type="int" line="1044">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="1047">
                Returns the &lt;code&gt;Accessible&lt;/code&gt; child contained at the
                  local coordinate &lt;code&gt;Point&lt;/code&gt;, if one exists.
                  Otherwise returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;Accessible&lt;/code&gt; at the specified location,
                      if it exists; otherwise &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleAt" type="Accessible" line="1054">
                <params>
                    <param name="c" type="Component"/>
                    <param name="p" type="Point"/>
                </params>
                <scope line="1055"/>
                <scope line="1058">
                    <declaration name="a" type="Accessible" line="1059"/>
                    <scope line="1060">
                        <declaration name="ac" type="AccessibleContext" line="1061"/>
                        <scope line="1062">
                            <declaration name="acmp" type="AccessibleComponent" line="1063"/>
                            <declaration name="location" type="Point" line="1064"/>
                            <declaration name="nchildren" type="int" line="1065"/>
                            <scope line="1066">
                                <scope line="1068">
                                    <scope line="1070">
                                        <scope line="1072">
                                            <declaration name="np" type="Point" line="1074"/>
                                            <scope line="1075"/>
                                        </scope>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1088">
                Get the state of this object. &lt;p&gt;
                  Note: as of the Java 2 platform v1.3, it is recommended that developers call
                  Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
                  of using this method.                
                <return>
                    an instance of AccessibleStateSet containing the current state
                      set of the object                    
                </return>
                <see>
                    AccessibleState                    
                </see>
            </javadoc>
            <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1097">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="1100">
                Returns the number of accessible children in the object.  If all
                  of the children of this object implement Accessible, than this
                  method should return the number of children of this object. &lt;p&gt;
                  Note: as of the Java 2 platform v1.3, it is recommended that developers call
                  Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
                  of using this method.                
                <return>
                    the number of accessible children in the object.                    
                </return>
            </javadoc>
            <method name="getAccessibleChildrenCount" type="int" line="1109">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="1112">
                Return the nth Accessible child of the object. &lt;p&gt;
                  Note: as of the Java 2 platform v1.3, it is recommended that developers call
                  Component.AccessibleAWTComponent.getAccessibleIndexInParent() instead
                  of using this method.                
                <param>
                    i zero-based index of child                    
                </param>
                <return>
                    the nth Accessible child of the object                    
                </return>
            </javadoc>
            <method name="getAccessibleChild" type="Accessible" line="1120">
                <params>
                    <param name="c" type="Component"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="1123">
                Return the child &lt;code&gt;Component&lt;/code&gt; of the specified
                  &lt;code&gt;Component&lt;/code&gt; that is the focus owner, if any.                
                <param>
                    c the root of the &lt;code&gt;Component&lt;/code&gt; hierarchy to
                      search for the focus owner                    
                </param>
                <return>
                    the focus owner, or &lt;code&gt;null&lt;/code&gt; if there is no focus
                      owner, or if the focus owner is not &lt;code&gt;comp&lt;/code&gt;, or a
                      descendant of &lt;code&gt;comp&lt;/code&gt;                    
                </return>
                <see>
                    java.awt.KeyboardFocusManager#getFocusOwner                    
                </see>
                <deprecated>
                    As of 1.4, replaced by
                      &lt;code&gt;KeyboardFocusManager.getFocusOwner()&lt;/code&gt;.                    
                </deprecated>
            </javadoc>
            <method name="findFocusOwner" type="Component" line="1135">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="focusOwner" type="Component" line="1136"/>
                <scope line="1137">
                    <scope line="1138"/>
                </scope>
            </method>
            <javadoc line="1144">
                If c is a JRootPane descendant return its JRootPane ancestor.
                  If c is a RootPaneContainer then return its JRootPane.                
                <return>
                    the JRootPane for Component c or {@code null}.                    
                </return>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="1149">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="1150"/>
                <scope line="1153">
                    <scope line="1154"/>
                </scope>
            </method>
            <javadoc line="1160">
                Returns the root component for the current component tree.                
                <return>
                    the first ancestor of c that&apos;s a Window or the last Applet ancestor                    
                </return>
            </javadoc>
            <method name="getRoot" type="Component" line="1164">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="applet" type="Component" line="1165"/>
                <scope line="1166">
                    <scope line="1167"/>
                    <scope line="1170"/>
                </scope>
            </method>
            <method name="getPaintingOrigin" type="JComponent" line="1176">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="p" type="Container" line="1177"/>
                <scope line="1178">
                    <declaration name="jp" type="JComponent" line="1179"/>
                    <scope line="1180"/>
                </scope>
            </method>
            <javadoc line="1186">
                Process the key bindings for the &lt;code&gt;Component&lt;/code&gt; associated with
                  &lt;code&gt;event&lt;/code&gt;. This method is only useful if
                  &lt;code&gt;event.getComponent()&lt;/code&gt; does not descend from
                  &lt;code&gt;JComponent&lt;/code&gt;, or your are not invoking
                  &lt;code&gt;super.processKeyEvent&lt;/code&gt; from within your
                  &lt;code&gt;JComponent&lt;/code&gt; subclass. &lt;code&gt;JComponent&lt;/code&gt;
                  automatically processes bindings from within its
                  &lt;code&gt;processKeyEvent&lt;/code&gt; method, hence you rarely need
                  to directly invoke this method.                
                <param>
                    event KeyEvent used to identify which bindings to process, as
                      well as which Component has focus.                    
                </param>
                <return>
                    true if a binding has found and processed                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="processKeyBindings" type="boolean" line="1201">
                <params>
                    <param name="event" type="KeyEvent"/>
                </params>
                <scope line="1202">
                    <scope line="1203"/>
                    <declaration name="component" type="Component" line="1206"/>
                    <declaration name="pressed" type="boolean" line="1207"/>
                    <scope line="1208"/>
                    <scope line="1211">
                        <scope line="1212"/>
                        <scope line="1215"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1223">
                Returns true if the &lt;code&gt;e&lt;/code&gt; is a valid KeyEvent to use in
                  processing the key bindings associated with JComponents.                
            </javadoc>
            <method name="isValidKeyEventForKeyBindings" type="boolean" line="1227">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
            </method>
            <javadoc line="1230">
                Invokes &lt;code&gt;actionPerformed&lt;/code&gt; on &lt;code&gt;action&lt;/code&gt; if
                  &lt;code&gt;action&lt;/code&gt; is enabled (and non-{@code null}). The command for the
                  ActionEvent is determined by:
                  &lt;ol&gt;
                  &lt;li&gt;If the action was registered via
                  &lt;code&gt;registerKeyboardAction&lt;/code&gt;, then the command string
                  passed in ({@code null} will be used if {@code null} was passed in).
                  &lt;li&gt;Action value with name Action.ACTION_COMMAND_KEY, unless {@code null}.
                  &lt;li&gt;String value of the KeyEvent, unless &lt;code&gt;getKeyChar&lt;/code&gt;
                  returns KeyEvent.CHAR_UNDEFINED..
                  &lt;/ol&gt;
                  This will return true if &lt;code&gt;action&lt;/code&gt; is non-{@code null} and
                  actionPerformed is invoked on it.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="notifyAction" type="boolean" line="1246">
                <params>
                    <param name="action" type="Action"/>
                    <param name="ks" type="KeyStroke"/>
                    <param name="event" type="KeyEvent"/>
                    <param name="sender" type="Object"/>
                    <param name="modifiers" type="int"/>
                </params>
                <scope line="1247"/>
                <scope line="1250">
                    <scope line="1251"/>
                </scope>
                <scope line="1255"/>
                <declaration name="commandO" type="Object" line="1258"/>
                <declaration name="stayNull" type="boolean" line="1259"/>
                <scope line="1261"/>
                <scope line="1264"/>
                <declaration name="command" type="String" line="1267"/>
                <scope line="1268"/>
                <scope line="1271"/>
                <scope line="1274"/>
            </method>
            <javadoc line="1280">
                Convenience method to change the UI InputMap for &lt;code&gt;component&lt;/code&gt;
                  to &lt;code&gt;uiInputMap&lt;/code&gt;. If &lt;code&gt;uiInputMap&lt;/code&gt; is {@code null},
                  this removes any previously installed UI InputMap.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="replaceUIInputMap" type="void" line="1286">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="type" type="int"/>
                    <param name="uiInputMap" type="InputMap"/>
                </params>
                <declaration name="map" type="InputMap" line="1287"/>
                <scope line="1288">
                    <declaration name="parent" type="InputMap" line="1289"/>
                    <scope line="1290"/>
                </scope>
            </method>
            <javadoc line="1297">
                Convenience method to change the UI ActionMap for &lt;code&gt;component&lt;/code&gt;
                  to &lt;code&gt;uiActionMap&lt;/code&gt;. If &lt;code&gt;uiActionMap&lt;/code&gt; is {@code null},
                  this removes any previously installed UI ActionMap.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="replaceUIActionMap" type="void" line="1303">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="uiActionMap" type="ActionMap"/>
                </params>
                <declaration name="map" type="ActionMap" line="1304"/>
                <scope line="1305">
                    <declaration name="parent" type="ActionMap" line="1306"/>
                    <scope line="1307"/>
                </scope>
            </method>
            <javadoc line="1314">
                Returns the InputMap provided by the UI for condition
                  &lt;code&gt;condition&lt;/code&gt; in component &lt;code&gt;component&lt;/code&gt;.
                  &lt;p&gt;This will return {@code null} if the UI has not installed a InputMap
                  of the specified type.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getUIInputMap" type="InputMap" line="1321">
                <params>
                    <param name="component" type="JComponent"/>
                    <param name="condition" type="int"/>
                </params>
                <declaration name="map" type="InputMap" line="1322"/>
                <scope line="1323">
                    <declaration name="parent" type="InputMap" line="1324"/>
                    <scope line="1325"/>
                </scope>
            </method>
            <javadoc line="1332">
                Returns the ActionMap provided by the UI
                  in component &lt;code&gt;component&lt;/code&gt;.
                  &lt;p&gt;This will return {@code null} if the UI has not installed an ActionMap.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getUIActionMap" type="ActionMap" line="1338">
                <params>
                    <param name="component" type="JComponent"/>
                </params>
                <declaration name="map" type="ActionMap" line="1339"/>
                <scope line="1340">
                    <declaration name="parent" type="ActionMap" line="1341"/>
                    <scope line="1342"/>
                </scope>
            </method>
            <declaration name="sharedOwnerFrameKey" type="Object" line="1349"/>
            <class name="SharedOwnerFrame" line="1350">
                <extends class="Frame"/>
                <implements interface="WindowListener"/>
                <method name="addNotify" type="void" line="1351"/>
                <javadoc line="1355">
                    Install window listeners on owned windows to watch for displayability changes                    
                </javadoc>
                <method name="installListeners" type="void" line="1358">
                    <declaration name="windows" type="Window[]" line="1359"/>
                    <scope line="1360">
                        <scope line="1361"/>
                    </scope>
                </method>
                <javadoc line="1367">
                    Watches for displayability changes and disposes shared instance if there are no
                      displayable children left.                    
                </javadoc>
                <method name="windowClosed" type="void" line="1371">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                    <scope line="1372">
                        <declaration name="windows" type="Window[]" line="1373"/>
                        <scope line="1374">
                            <scope line="1375">
                                <scope line="1376"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="windowOpened" type="void" line="1385">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowClosing" type="void" line="1387">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowIconified" type="void" line="1389">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeiconified" type="void" line="1391">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowActivated" type="void" line="1393">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="windowDeactivated" type="void" line="1395">
                    <params>
                        <param name="e" type="WindowEvent"/>
                    </params>
                </method>
                <method name="show" type="void" line="1397"/>
                <method name="dispose" type="void" line="1399">
                    <scope line="1400"/>
                    <scope line="1404"/>
                </method>
            </class>
            <javadoc line="1408">
                Returns a toolkit-private, shared, invisible Frame
                  to be the owner for JDialogs and JWindows created with{@code null} owners.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getSharedOwnerFrame" type="Frame" line="1415">
                <declaration name="sharedOwnerFrame" type="Frame" line="1416"/>
                <scope line="1417"/>
            </method>
            <javadoc line="1423">
                Returns a SharedOwnerFrame&apos;s shutdown listener to dispose the SharedOwnerFrame
                  if it has no more displayable children.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getSharedOwnerFrameShutdownListener" type="WindowListener" line="1430">
                <declaration name="sharedOwnerFrame" type="Frame" line="1431"/>
            </method>
            <method name="appContextGet" type="Object" line="1434">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="appContextPut" type="void" line="1437">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <method name="appContextRemove" type="void" line="1440">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <method name="loadSystemClass" type="Class&lt;?&gt;" line="1443">
                <params>
                    <param name="className" type="String"/>
                </params>
            </method>
            <method name="isLeftToRight" type="boolean" line="1446">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <method name="SwingUtilities" type="constructor" line="1449"/>
            <javadoc line="1452">
                Returns true if the Icon &lt;code&gt;icon&lt;/code&gt; is an instance of
                  ImageIcon, and the image it contains is the same as &lt;code&gt;image&lt;/code&gt;.                
            </javadoc>
            <method name="doesIconReferenceImage" type="boolean" line="1456">
                <params>
                    <param name="icon" type="Icon"/>
                    <param name="image" type="Image"/>
                </params>
                <declaration name="iconImage" type="Image" line="1457"/>
            </method>
            <javadoc line="1460">
                Returns index of the first occurrence of &lt;code&gt;mnemonic&lt;/code&gt;
                  within string &lt;code&gt;text&lt;/code&gt;. Matching algorithm is not
                  case-sensitive.                
                <param>
                    text The text to search through, may be {@code null}                    
                </param>
                <param>
                    mnemonic The mnemonic to find the character for.                    
                </param>
                <return>
                    index into the string if exists, otherwise -1                    
                </return>
            </javadoc>
            <method name="findDisplayedMnemonicIndex" type="int" line="1468">
                <params>
                    <param name="text" type="String"/>
                    <param name="mnemonic" type="int"/>
                </params>
                <scope line="1469"/>
                <declaration name="uc" type="char" line="1472"/>
                <declaration name="lc" type="char" line="1473"/>
                <declaration name="uci" type="int" line="1474"/>
                <declaration name="lci" type="int" line="1475"/>
                <scope line="1476"/>
                <scope line="1479"/>
                <scope line="1482"/>
            </method>
            <javadoc line="1486">
                Stores the position and size of
                  the inner painting area of the specified component
                  in &lt;code&gt;r&lt;/code&gt; and returns &lt;code&gt;r&lt;/code&gt;.
                  The position and size specify the bounds of the component,
                  adjusted so as not to include the border area (the insets).
                  This method is useful for classes
                  that implement painting code.                
                <param>
                    c  the JComponent in question; if {@code null}, this method returns {@code null}                    
                </param>
                <param>
                    r  the Rectangle instance to be modified;
                      may be {@code null}                    
                </param>
                <return>
                    {@code null} if the Component is {@code null};
                      otherwise, returns the passed-in rectangle (if non-{@code null})
                      or a new rectangle specifying position and size information                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="calculateInnerArea" type="Rectangle" line="1502">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="r" type="Rectangle"/>
                </params>
                <scope line="1503"/>
                <declaration name="rect" type="Rectangle" line="1506"/>
                <declaration name="insets" type="Insets" line="1507"/>
                <scope line="1508"/>
            </method>
            <method name="updateRendererOrEditorUI" type="void" line="1517">
                <params>
                    <param name="rendererOrEditor" type="Object"/>
                </params>
                <scope line="1518"/>
                <declaration name="component" type="Component" line="1521"/>
                <scope line="1522"/>
                <scope line="1525"/>
                <scope line="1528"/>
            </method>
            <javadoc line="1532">
                Returns the first ancestor of the {@code component}which is not an instance of {@link JLayer}.                
                <param>
                    component {@code Component} to get
                      the first ancestor of, which is not a {@link JLayer} instance.                    
                </param>
                <return>
                    the first ancestor of the {@code component}which is not an instance of {@link JLayer}.
                      If such an ancestor can not be found, {@code null} is returned.                    
                </return>
                <throws>
                    NullPointerException if {@code component} is {@code null}                    
                </throws>
                <see>
                    JLayer                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getUnwrappedParent" type="Container" line="1542">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="parent" type="Container" line="1543"/>
                <scope line="1544"/>
            </method>
            <javadoc line="1549">
                Returns the first {@code JViewport}&apos;s descendant
                  which is not an instance of {@code JLayer}.
                  If such a descendant can not be found, {@code null} is returned.
                  If the {@code viewport}&apos;s view component is not a {@code JLayer},
                  this method is equivalent to {@link JViewport#getView()}otherwise {@link JLayer#getView()} will be recursively
                  called on all descending {@code JLayer}s.                
                <param>
                    viewport {@code JViewport} to get the first descendant of,
                      which in not a {@code JLayer} instance.                    
                </param>
                <return>
                    the first {@code JViewport}&apos;s descendant
                      which is not an instance of {@code JLayer}.
                      If such a descendant can not be found, {@code null} is returned.                    
                </return>
                <throws>
                    NullPointerException if {@code viewport} is {@code null}                    
                </throws>
                <see>
                    JViewport#getView()                    
                </see>
                <see>
                    JLayer                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getUnwrappedView" type="Component" line="1566">
                <params>
                    <param name="viewport" type="JViewport"/>
                </params>
                <declaration name="view" type="Component" line="1567"/>
                <scope line="1568"/>
            </method>
            <javadoc line="1573">
                Retrieves the validate root of a given container.
                  If the container is contained within a {@code CellRendererPane}, this
                  method returns {@code null} due to the synthetic nature of the {@codeCellRendererPane}.
                  &lt;p&gt;
                  The component hierarchy must be displayable up to the toplevel component
                  (either a {@code Frame} or an {@code Applet} object.) Otherwise this
                  method returns {@code null}.
                  &lt;p&gt;
                  If the {@code visibleOnly} argument is {@code true}, the found validate
                  root and all its parents up to the toplevel component must also be
                  visible. Otherwise this method returns {@code null}.                
                <return>
                    the validate root of the given container or null                    
                </return>
                <see>
                    java.awt.Component#isDisplayable()                    
                </see>
                <see>
                    java.awt.Component#isVisible()                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getValidateRoot" type="Container" line="1590">
                <params>
                    <param name="c" type="Container"/>
                    <param name="visibleOnly" type="boolean"/>
                </params>
                <declaration name="root" type="Container" line="1591"/>
                <scope line="1592">
                    <scope line="1593"/>
                    <scope line="1596"/>
                </scope>
                <scope line="1601"/>
                <scope line="1604">
                    <scope line="1605"/>
                    <scope line="1608"/>
                </scope>
            </method>
        </class>
    </source>