<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.event"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.lang.Boolean"/>
        <import package="javax.swing.table"/>
        <import package="javax.swing.event"/>
        <import package="java.util.EventObject"/>
        <import package="javax.swing.tree"/>
        <import package="java.io.Serializable"/>
        <class name="DefaultCellEditor" line="11">
            <extends class="AbstractCellEditor"/>
            <implements interface="TableCellEditor"/>
            <implements interface="TreeCellEditor"/>
            <javadoc line="11">
                The default editor for table and tree cells.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
            </javadoc>
            <declaration name="editorComponent" type="JComponent" line="26"/>
            <javadoc line="26">
                The Swing component being edited.                
            </javadoc>
            <declaration name="delegate" type="EditorDelegate" line="30"/>
            <javadoc line="30">
                The delegate class which handles all methods sent from the
                  &lt;code&gt;CellEditor&lt;/code&gt;.                
            </javadoc>
            <declaration name="clickCountToStart" type="int" line="35"/>
            <javadoc line="35">
                An integer specifying the number of clicks needed to start editing.
                  Even if &lt;code&gt;clickCountToStart&lt;/code&gt; is defined as zero, it
                  will not initiate until a click occurs.                
            </javadoc>
            <javadoc line="41">
                Constructs a &lt;code&gt;DefaultCellEditor&lt;/code&gt; that uses a text field.                
                <param>
                    textField  a <code>JTextField</code> object                    
                </param>
            </javadoc>
            <method name="DefaultCellEditor" type="constructor" line="45">
                <params>
                    <param name="textField" type="JTextField"/>
                </params>
                <anonymous_class line="48">
                    <method name="setValue" type="void" line="49">
                        <params>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="getCellEditorValue" type="Object" line="52"/>
                </anonymous_class>
            </method>
            <javadoc line="59">
                Constructs a &lt;code&gt;DefaultCellEditor&lt;/code&gt; object that uses a check box.                
                <param>
                    checkBox  a <code>JCheckBox</code> object                    
                </param>
            </javadoc>
            <method name="DefaultCellEditor" type="constructor" line="63">
                <params>
                    <param name="checkBox" type="JCheckBox"/>
                </params>
                <anonymous_class line="65">
                    <method name="setValue" type="void" line="66">
                        <params>
                            <param name="value" type="Object"/>
                        </params>
                        <declaration name="selected" type="boolean" line="67"/>
                        <scope line="68"/>
                        <scope line="71"/>
                    </method>
                    <method name="getCellEditorValue" type="Object" line="76"/>
                </anonymous_class>
            </method>
            <javadoc line="84">
                Constructs a &lt;code&gt;DefaultCellEditor&lt;/code&gt; object that uses a
                  combo box.                
                <param>
                    comboBox  a <code>JComboBox</code> object                    
                </param>
            </javadoc>
            <method name="DefaultCellEditor" type="constructor" line="89">
                <params>
                    <param name="comboBox" type="JComboBox"/>
                </params>
                <anonymous_class line="92">
                    <method name="setValue" type="void" line="93">
                        <params>
                            <param name="value" type="Object"/>
                        </params>
                    </method>
                    <method name="getCellEditorValue" type="Object" line="96"/>
                    <method name="shouldSelectCell" type="boolean" line="99">
                        <params>
                            <param name="anEvent" type="EventObject"/>
                        </params>
                        <scope line="100">
                            <declaration name="e" type="MouseEvent" line="101"/>
                        </scope>
                    </method>
                    <method name="stopCellEditing" type="boolean" line="106">
                        <scope line="107"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="116">
                Returns a reference to the editor component.                
                <return>
                    the editor <code>Component</code>                    
                </return>
            </javadoc>
            <method name="getComponent" type="Component" line="120"/>
            <javadoc line="123">
                Specifies the number of clicks needed to start editing.                
                <param>
                    count  an int specifying the number of clicks needed to start editing                    
                </param>
                <see>
                    #getClickCountToStart                    
                </see>
            </javadoc>
            <method name="setClickCountToStart" type="void" line="128">
                <params>
                    <param name="count" type="int"/>
                </params>
            </method>
            <javadoc line="131">
                Returns the number of clicks needed to start editing.                
                <return>
                    the number of clicks needed to start editing                    
                </return>
            </javadoc>
            <method name="getClickCountToStart" type="int" line="135"/>
            <javadoc line="138">
                Forwards the message from the &lt;code&gt;CellEditor&lt;/code&gt; to
                  the &lt;code&gt;delegate&lt;/code&gt;.                
                <see>
                    EditorDelegate#getCellEditorValue                    
                </see>
            </javadoc>
            <method name="getCellEditorValue" type="Object" line="143"/>
            <javadoc line="146">
                Forwards the message from the &lt;code&gt;CellEditor&lt;/code&gt; to
                  the &lt;code&gt;delegate&lt;/code&gt;.                
                <see>
                    EditorDelegate#isCellEditable(EventObject)                    
                </see>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="151">
                <params>
                    <param name="anEvent" type="EventObject"/>
                </params>
            </method>
            <javadoc line="154">
                Forwards the message from the &lt;code&gt;CellEditor&lt;/code&gt; to
                  the &lt;code&gt;delegate&lt;/code&gt;.                
                <see>
                    EditorDelegate#shouldSelectCell(EventObject)                    
                </see>
            </javadoc>
            <method name="shouldSelectCell" type="boolean" line="159">
                <params>
                    <param name="anEvent" type="EventObject"/>
                </params>
            </method>
            <javadoc line="162">
                Forwards the message from the &lt;code&gt;CellEditor&lt;/code&gt; to
                  the &lt;code&gt;delegate&lt;/code&gt;.                
                <see>
                    EditorDelegate#stopCellEditing                    
                </see>
            </javadoc>
            <method name="stopCellEditing" type="boolean" line="167"/>
            <javadoc line="170">
                Forwards the message from the &lt;code&gt;CellEditor&lt;/code&gt; to
                  the &lt;code&gt;delegate&lt;/code&gt;.                
                <see>
                    EditorDelegate#cancelCellEditing                    
                </see>
            </javadoc>
            <method name="cancelCellEditing" type="void" line="175"/>
            <javadoc line="178">
                Implements the &lt;code&gt;TreeCellEditor&lt;/code&gt; interface.                
            </javadoc>
            <method name="getTreeCellEditorComponent" type="Component" line="181">
                <params>
                    <param name="tree" type="JTree"/>
                    <param name="value" type="Object"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="expanded" type="boolean"/>
                    <param name="leaf" type="boolean"/>
                    <param name="row" type="int"/>
                </params>
                <declaration name="stringValue" type="String" line="182"/>
            </method>
            <javadoc line="186">
                Implements the &lt;code&gt;TableCellEditor&lt;/code&gt; interface.                
            </javadoc>
            <method name="getTableCellEditorComponent" type="Component" line="189">
                <params>
                    <param name="table" type="JTable"/>
                    <param name="value" type="Object"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="191">
                    <declaration name="renderer" type="TableCellRenderer" line="192"/>
                    <declaration name="c" type="Component" line="193"/>
                    <scope line="194">
                        <scope line="197"/>
                    </scope>
                    <scope line="201"/>
                </scope>
            </method>
            <class name="EditorDelegate" line="207">
                <implements interface="ActionListener"/>
                <implements interface="ItemListener"/>
                <implements interface="Serializable"/>
                <javadoc line="207">
                    The protected &lt;code&gt;EditorDelegate&lt;/code&gt; class.                    
                </javadoc>
                <declaration name="value" type="Object" line="211"/>
                <javadoc line="211">
                    The value of this cell.                    
                </javadoc>
                <javadoc line="215">
                    Returns the value of this cell.                    
                    <return>
                        the value of this cell                        
                    </return>
                </javadoc>
                <method name="getCellEditorValue" type="Object" line="219"/>
                <javadoc line="222">
                    Sets the value of this cell.                    
                    <param>
                        value the new value of this cell                        
                    </param>
                </javadoc>
                <method name="setValue" type="void" line="226">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="229">
                    Returns true if &lt;code&gt;anEvent&lt;/code&gt; is &lt;b&gt;not&lt;/b&gt; a
                      &lt;code&gt;MouseEvent&lt;/code&gt;.  Otherwise, it returns true
                      if the necessary number of clicks have occurred, and
                      returns false otherwise.                    
                    <param>
                        anEvent         the event                        
                    </param>
                    <return>
                        true  if cell is ready for editing, false otherwise                        
                    </return>
                    <see>
                        #setClickCountToStart                        
                    </see>
                    <see>
                        #shouldSelectCell                        
                    </see>
                </javadoc>
                <method name="isCellEditable" type="boolean" line="239">
                    <params>
                        <param name="anEvent" type="EventObject"/>
                    </params>
                    <scope line="240"/>
                </method>
                <javadoc line="245">
                    Returns true to indicate that the editing cell may
                      be selected.                    
                    <param>
                        anEvent         the event                        
                    </param>
                    <return>
                        true                        
                    </return>
                    <see>
                        #isCellEditable                        
                    </see>
                </javadoc>
                <method name="shouldSelectCell" type="boolean" line="252">
                    <params>
                        <param name="anEvent" type="EventObject"/>
                    </params>
                </method>
                <javadoc line="255">
                    Returns true to indicate that editing has begun.                    
                    <param>
                        anEvent          the event                        
                    </param>
                </javadoc>
                <method name="startCellEditing" type="boolean" line="259">
                    <params>
                        <param name="anEvent" type="EventObject"/>
                    </params>
                </method>
                <javadoc line="262">
                    Stops editing and
                      returns true to indicate that editing has stopped.
                      This method calls &lt;code&gt;fireEditingStopped&lt;/code&gt;.                    
                    <return>
                        true                        
                    </return>
                </javadoc>
                <method name="stopCellEditing" type="boolean" line="268"/>
                <javadoc line="272">
                    Cancels editing.  This method calls &lt;code&gt;fireEditingCanceled&lt;/code&gt;.                    
                </javadoc>
                <method name="cancelCellEditing" type="void" line="275"/>
                <javadoc line="278">
                    When an action is performed, editing is ended.                    
                    <param>
                        e the action event                        
                    </param>
                    <see>
                        #stopCellEditing                        
                    </see>
                </javadoc>
                <method name="actionPerformed" type="void" line="283">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                </method>
                <javadoc line="286">
                    When an item&apos;s state changes, editing is ended.                    
                    <param>
                        e the action event                        
                    </param>
                    <see>
                        #stopCellEditing                        
                    </see>
                </javadoc>
                <method name="itemStateChanged" type="void" line="291">
                    <params>
                        <param name="e" type="ItemEvent"/>
                    </params>
                </method>
            </class>
        </class>
    </source>