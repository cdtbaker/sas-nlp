<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.LayoutManager2"/>
        <import package="java.util"/>
        <import package="java.awt.Component.BaselineResizeBehavior"/>
        <import package="javax.swing.LayoutStyle.ComponentPlacement"/>
        <import package="javax.swing.SwingConstants.HORIZONTAL"/>
        <import package="javax.swing.SwingConstants.VERTICAL"/>
        <class name="GroupLayout" line="12">
            <implements interface="LayoutManager2"/>
            <javadoc line="12">
                {@code GroupLayout} is a {@code LayoutManager} that hierarchically
                  groups components in order to position them in a {@code Container}.{@code GroupLayout} is intended for use by builders, but may be
                  hand-coded as well.
                  Grouping is done by instances of the {@link Group Group} class. {@codeGroupLayout} supports two types of groups. A sequential group
                  positions its child elements sequentially, one after another. A
                  parallel group aligns its child elements in one of four ways.
                  &lt;p&gt;
                  Each group may contain any number of elements, where an element is
                  a {@code Group}, {@code Component}, or gap. A gap can be thought
                  of as an invisible component with a minimum, preferred and maximum
                  size. In addition {@code GroupLayout} supports a preferred gap,
                  whose value comes from {@code LayoutStyle}.
                  &lt;p&gt;
                  Elements are similar to a spring. Each element has a range as
                  specified by a minimum, preferred and maximum.  Gaps have either a
                  developer-specified range, or a range determined by {@codeLayoutStyle}. The range for {@code Component}s is determined from
                  the {@code Component}&apos;s {@code getMinimumSize}, {@codegetPreferredSize} and {@code getMaximumSize} methods. In addition,
                  when adding {@code Component}s you may specify a particular range
                  to use instead of that from the component. The range for a {@codeGroup} is determined by the type of group. A {@code ParallelGroup}&apos;s
                  range is the maximum of the ranges of its elements. A {@codeSequentialGroup}&apos;s range is the sum of the ranges of its elements.
                  &lt;p&gt;{@code GroupLayout} treats each axis independently.  That is, there
                  is a group representing the horizontal axis, and a group
                  representing the vertical axis.  The horizontal group is
                  responsible for determining the minimum, preferred and maximum size
                  along the horizontal axis as well as setting the x and width of the
                  components contained in it. The vertical group is responsible for
                  determining the minimum, preferred and maximum size along the
                  vertical axis as well as setting the y and height of the
                  components contained in it. Each {@code Component} must exist in both
                  a horizontal and vertical group, otherwise an {@code IllegalStateException}is thrown during layout, or when the minimum, preferred or
                  maximum size is requested.
                  &lt;p&gt;
                  The following diagram shows a sequential group along the horizontal
                  axis. The sequential group contains three components. A parallel group
                  was used along the vertical axis.
                  &lt;p align=&quot;center&quot;&gt;
                  &lt;img src=&quot;doc-files/groupLayout.1.gif&quot;&gt;
                  &lt;p&gt;
                  To reinforce that each axis is treated independently the diagram shows
                  the range of each group and element along each axis. The
                  range of each component has been projected onto the axes,
                  and the groups are rendered in blue (horizontal) and red (vertical).
                  For readability there is a gap between each of the elements in the
                  sequential group.
                  &lt;p&gt;
                  The sequential group along the horizontal axis is rendered as a solid
                  blue line. Notice the sequential group is the sum of the children elements
                  it contains.
                  &lt;p&gt;
                  Along the vertical axis the parallel group is the maximum of the height
                  of each of the components. As all three components have the same height,
                  the parallel group has the same height.
                  &lt;p&gt;
                  The following diagram shows the same three components, but with the
                  parallel group along the horizontal axis and the sequential group along
                  the vertical axis.
                  &lt;p&gt;
                  &lt;p align=&quot;center&quot;&gt;
                  &lt;img src=&quot;doc-files/groupLayout.2.gif&quot;&gt;
                  &lt;p&gt;
                  As {@code c1} is the largest of the three components, the parallel
                  group is sized to {@code c1}. As {@code c2} and {@code c3} are smaller
                  than {@code c1} they are aligned based on the alignment specified
                  for the component (if specified) or the default alignment of the
                  parallel group. In the diagram {@code c2} and {@code c3} were created
                  with an alignment of {@code LEADING}. If the component orientation were
                  right-to-left then {@code c2} and {@code c3} would be positioned on
                  the opposite side.
                  &lt;p&gt;
                  The following diagram shows a sequential group along both the horizontal
                  and vertical axis.
                  &lt;p align=&quot;center&quot;&gt;
                  &lt;img src=&quot;doc-files/groupLayout.3.gif&quot;&gt;
                  &lt;p&gt;{@code GroupLayout} provides the ability to insert gaps between{@code Component}s. The size of the gap is determined by an
                  instance of {@code LayoutStyle}. This may be turned on using the{@code setAutoCreateGaps} method.  Similarly, you may use
                  the {@code setAutoCreateContainerGaps} method to insert gaps
                  between components that touch the edge of the parent container and the
                  container.
                  &lt;p&gt;
                  The following builds a panel consisting of two labels in
                  one column, followed by two textfields in the next column:
                  &lt;pre&gt;
                  JComponent panel = ...;
                  GroupLayout layout = new GroupLayout(panel);
                  panel.setLayout(layout);
                  // Turn on automatically adding gaps between components
                  layout.setAutoCreateGaps(true);
                  // Turn on automatically creating gaps between components that touch
                  // the edge of the container and the container.
                  layout.setAutoCreateContainerGaps(true);
                  // Create a sequential group for the horizontal axis.
                  GroupLayout.SequentialGroup hGroup = layout.createSequentialGroup();
                  // The sequential group in turn contains two parallel groups.
                  // One parallel group contains the labels, the other the text fields.
                  // Putting the labels in a parallel group along the horizontal axis
                  // positions them at the same x location.
                  //
                  // Variable indentation is used to reinforce the level of grouping.
                  hGroup.addGroup(layout.createParallelGroup().
                  addComponent(label1).addComponent(label2));
                  hGroup.addGroup(layout.createParallelGroup().
                  addComponent(tf1).addComponent(tf2));
                  layout.setHorizontalGroup(hGroup);
                  // Create a sequential group for the vertical axis.
                  GroupLayout.SequentialGroup vGroup = layout.createSequentialGroup();
                  // The sequential group contains two parallel groups that align
                  // the contents along the baseline. The first parallel group contains
                  // the first label and text field, and the second parallel group contains
                  // the second label and text field. By using a sequential group
                  // the labels and text fields are positioned vertically after one another.
                  vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                  addComponent(label1).addComponent(tf1));
                  vGroup.addGroup(layout.createParallelGroup(Alignment.BASELINE).
                  addComponent(label2).addComponent(tf2));
                  layout.setVerticalGroup(vGroup);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  When run the following is produced.
                  &lt;p align=&quot;center&quot;&gt;
                  &lt;img src=&quot;doc-files/groupLayout.example.png&quot;&gt;
                  &lt;p&gt;
                  This layout consists of the following.
                  &lt;ul&gt;&lt;li&gt;The horizontal axis consists of a sequential group containing two
                  parallel groups.  The first parallel group contains the labels,
                  and the second parallel group contains the text fields.
                  &lt;li&gt;The vertical axis consists of a sequential group
                  containing two parallel groups.  The parallel groups are configured
                  to align their components along the baseline. The first parallel
                  group contains the first label and first text field, and
                  the second group consists of the second label and second
                  text field.
                  &lt;/ul&gt;
                  There are a couple of things to notice in this code:
                  &lt;ul&gt;
                  &lt;li&gt;You need not explicitly add the components to the container; this
                  is indirectly done by using one of the {@code add} methods of{@code Group}.
                  &lt;li&gt;The various {@code add} methods return
                  the caller.  This allows for easy chaining of invocations.  For
                  example, {@code group.addComponent(label1).addComponent(label2);} is
                  equivalent to{@code group.addComponent(label1); group.addComponent(label2);}.
                  &lt;li&gt;There are no public constructors for {@code Group}s; instead
                  use the create methods of {@code GroupLayout}.
                  &lt;/ul&gt;                
                <author>
                    Tomas Pavek                    
                </author>
                <author>
                    Jan Stola                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="MIN_SIZE" type="int" line="162"/>
            <declaration name="PREF_SIZE" type="int" line="163"/>
            <declaration name="MAX_SIZE" type="int" line="164"/>
            <declaration name="SPECIFIC_SIZE" type="int" line="165"/>
            <declaration name="UNSET" type="int" line="166"/>
            <declaration name="DEFAULT_SIZE" type="int" line="167"/>
            <javadoc line="167">
                Indicates the size from the component or gap should be used for a
                  particular range value.                
                <see>
                    Group                    
                </see>
            </javadoc>
            <declaration name="PREFERRED_SIZE" type="int" line="173"/>
            <javadoc line="173">
                Indicates the preferred size from the component or gap should
                  be used for a particular range value.                
                <see>
                    Group                    
                </see>
            </javadoc>
            <declaration name="autocreatePadding" type="boolean" line="179"/>
            <declaration name="autocreateContainerPadding" type="boolean" line="180"/>
            <declaration name="horizontalGroup" type="Group" line="181"/>
            <javadoc line="181">
                Group responsible for layout along the horizontal axis.  This is NOT
                  the user specified group, use getHorizontalGroup to dig that out.                
            </javadoc>
            <declaration name="verticalGroup" type="Group" line="186"/>
            <javadoc line="186">
                Group responsible for layout along the vertical axis.  This is NOT
                  the user specified group, use getVerticalGroup to dig that out.                
            </javadoc>
            <declaration name="componentInfos" type="Map&lt;Component,ComponentInfo&gt;" line="191"/>
            <declaration name="host" type="Container" line="192"/>
            <declaration name="tmpParallelSet" type="Set&lt;Spring&gt;" line="193"/>
            <declaration name="springsChanged" type="boolean" line="194"/>
            <declaration name="isValid" type="boolean" line="195"/>
            <declaration name="hasPreferredPaddingSprings" type="boolean" line="196"/>
            <declaration name="layoutStyle" type="LayoutStyle" line="197"/>
            <javadoc line="197">
                The LayoutStyle instance to use, if null the sharedInstance is used.                
            </javadoc>
            <declaration name="honorsVisibility" type="boolean" line="201"/>
            <javadoc line="201">
                If true, components that are not visible are treated as though they
                  aren&apos;t there.                
            </javadoc>
            <declaration name="Alignment" type="enum" line="206"/>
            <javadoc line="206">
                Enumeration of the possible ways {@code ParallelGroup} can align
                  its children.                
                <see>
                    #createParallelGroup(Alignment)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="212"/>
            <javadoc line="231">
                Indicates the elements should be aligned along
                  their baseline.                
                <see>
                    #createParallelGroup(Alignment)                    
                </see>
                <see>
                    #createBaselineGroup(boolean,boolean)                    
                </see>
            </javadoc>
            <method name="checkSize" type="void" line="238">
                <params>
                    <param name="min" type="int"/>
                    <param name="pref" type="int"/>
                    <param name="max" type="int"/>
                    <param name="isComponentSpring" type="boolean"/>
                </params>
                <scope line="240"/>
                <scope line="243"/>
            </method>
            <method name="checkResizeType" type="void" line="250">
                <params>
                    <param name="type" type="int"/>
                    <param name="isComponentSpring" type="boolean"/>
                </params>
                <scope line="251"/>
            </method>
            <method name="checkLessThan" type="void" line="255">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <scope line="256"/>
            </method>
            <javadoc line="260">
                Creates a {@code GroupLayout} for the specified {@code Container}.                
                <param>
                    host the {@code Container} the {@code GroupLayout} is
                      the {@code LayoutManager} for                    
                </param>
                <throws>
                    IllegalArgumentException if host is {@code null}                    
                </throws>
            </javadoc>
            <method name="GroupLayout" type="constructor" line="266">
                <params>
                    <param name="host" type="Container"/>
                </params>
                <scope line="267"/>
            </method>
            <javadoc line="277">
                Sets whether component visiblity is considered when sizing and
                  positioning components. A value of {@code true} indicates that
                  non-visible components should not be treated as part of the
                  layout. A value of {@code false} indicates that components should be
                  positioned and sized regardless of visibility.
                  &lt;p&gt;
                  A value of {@code false} is useful when the visibility of components
                  is dynamically adjusted and you don&apos;t want surrounding components and
                  the sizing to change.
                  &lt;p&gt;
                  The specified value is used for components that do not have an
                  explicit visibility specified.
                  &lt;p&gt;
                  The default is {@code true}.                
                <param>
                    honorsVisibility whether component visiblity is considered when
                      sizing and positioning components                    
                </param>
                <see>
                    #setHonorsVisibility(Component,Boolean)                    
                </see>
            </javadoc>
            <method name="setHonorsVisibility" type="void" line="296">
                <params>
                    <param name="honorsVisibility" type="boolean"/>
                </params>
                <scope line="297"/>
            </method>
            <javadoc line="304">
                Returns whether component visiblity is considered when sizing and
                  positioning components.                
                <return>
                    whether component visiblity is considered when sizing and
                      positioning components                    
                </return>
            </javadoc>
            <method name="getHonorsVisibility" type="boolean" line="310"/>
            <javadoc line="313">
                Sets whether the component&apos;s visiblity is considered for
                  sizing and positioning. A value of {@code Boolean.TRUE}indicates that if {@code component} is not visible it should
                  not be treated as part of the layout. A value of {@code false}indicates that {@code component} is positioned and sized
                  regardless of it&apos;s visibility.  A value of {@code null}indicates the value specified by the single argument method {@codesetHonorsVisibility} should be used.
                  &lt;p&gt;
                  If {@code component} is not a child of the {@code Container} this{@code GroupLayout} is managine, it will be added to the{@code Container}.                
                <param>
                    component the component                    
                </param>
                <param>
                    honorsVisibility whether {@code component}'s visiblity should be
                      considered for sizing and positioning                    
                </param>
                <throws>
                    IllegalArgumentException if {@code component} is {@code null}                    
                </throws>
                <see>
                    #setHonorsVisibility(Component,Boolean)                    
                </see>
            </javadoc>
            <method name="setHonorsVisibility" type="void" line="326">
                <params>
                    <param name="component" type="Component"/>
                    <param name="honorsVisibility" type="Boolean"/>
                </params>
                <scope line="327"/>
            </method>
            <javadoc line="335">
                Sets whether a gap between components should automatically be
                  created.  For example, if this is {@code true} and you add two
                  components to a {@code SequentialGroup} a gap between the
                  two components is automatically be created.  The default is{@code false}.                
                <param>
                    autoCreatePadding whether a gap between components is
                      automatically created                    
                </param>
            </javadoc>
            <method name="setAutoCreateGaps" type="void" line="343">
                <params>
                    <param name="autoCreatePadding" type="boolean"/>
                </params>
                <scope line="344"/>
            </method>
            <javadoc line="349">
                Returns {@code true} if gaps between components are automatically
                  created.                
                <return>
                    {@code true} if gaps between components are automatically
                      created                    
                </return>
            </javadoc>
            <method name="getAutoCreateGaps" type="boolean" line="355"/>
            <javadoc line="358">
                Sets whether a gap between the container and components that
                  touch the border of the container should automatically be
                  created. The default is {@code false}.                
                <param>
                    autoCreateContainerPadding whether a gap between the container and
                      components that touch the border of the container should
                      automatically be created                    
                </param>
            </javadoc>
            <method name="setAutoCreateContainerGaps" type="void" line="366">
                <params>
                    <param name="autoCreateContainerPadding" type="boolean"/>
                </params>
                <scope line="367"/>
            </method>
            <javadoc line="374">
                Returns {@code true} if gaps between the container and components that
                  border the container are automatically created.                
                <return>
                    {@code true} if gaps between the container and components that
                      border the container are automatically created                    
                </return>
            </javadoc>
            <method name="getAutoCreateContainerGaps" type="boolean" line="380"/>
            <javadoc line="383">
                Sets the {@code Group} that positions and sizes
                  components along the horizontal axis.                
                <param>
                    group the {@code Group} that positions and sizes
                      components along the horizontal axis                    
                </param>
                <throws>
                    IllegalArgumentException if group is {@code null}                    
                </throws>
            </javadoc>
            <method name="setHorizontalGroup" type="void" line="390">
                <params>
                    <param name="group" type="Group"/>
                </params>
                <scope line="391"/>
            </method>
            <javadoc line="397">
                Returns the {@code Group} that positions and sizes components
                  along the horizontal axis.                
                <return>
                    the {@code Group} responsible for positioning and
                      sizing component along the horizontal axis                    
                </return>
            </javadoc>
            <method name="getHorizontalGroup" type="Group" line="403">
                <declaration name="index" type="int" line="404"/>
                <scope line="405"/>
            </method>
            <javadoc line="410">
                Sets the {@code Group} that positions and sizes
                  components along the vertical axis.                
                <param>
                    group the {@code Group} that positions and sizes
                      components along the vertical axis                    
                </param>
                <throws>
                    IllegalArgumentException if group is {@code null}                    
                </throws>
            </javadoc>
            <method name="setVerticalGroup" type="void" line="417">
                <params>
                    <param name="group" type="Group"/>
                </params>
                <scope line="418"/>
            </method>
            <javadoc line="424">
                Returns the {@code Group} that positions and sizes components
                  along the vertical axis.                
                <return>
                    the {@code Group} responsible for positioning and
                      sizing component along the vertical axis                    
                </return>
            </javadoc>
            <method name="getVerticalGroup" type="Group" line="430">
                <declaration name="index" type="int" line="431"/>
                <scope line="432"/>
            </method>
            <javadoc line="437">
                Wraps the user specified group in a sequential group.  If
                  container gaps should be generated the necessary springs are
                  added.                
            </javadoc>
            <method name="createTopLevelGroup" type="Group" line="442">
                <params>
                    <param name="specifiedGroup" type="Group"/>
                </params>
                <declaration name="group" type="SequentialGroup" line="443"/>
                <scope line="444"/>
                <scope line="449"/>
            </method>
            <javadoc line="454">
                Creates and returns a {@code SequentialGroup}.                
                <return>
                    a new {@code SequentialGroup}                    
                </return>
            </javadoc>
            <method name="createSequentialGroup" type="SequentialGroup" line="458"/>
            <javadoc line="461">
                Creates and returns a {@code ParallelGroup} with an alignment of{@code Alignment.LEADING}.  This is a cover method for the more
                  general {@code createParallelGroup(Alignment)} method.                
                <return>
                    a new {@code ParallelGroup}                    
                </return>
                <see>
                    #createParallelGroup(Alignment)                    
                </see>
            </javadoc>
            <method name="createParallelGroup" type="ParallelGroup" line="467"/>
            <javadoc line="470">
                Creates and returns a {@code ParallelGroup} with the specified
                  alignment.  This is a cover method for the more general 
                   method with {@code true}supplied for the second argument.                
                <param>
                    alignment the alignment for the elements of the group                    
                </param>
                <throws>
                    IllegalArgumentException if {@code alignment} is {@code null}                    
                </throws>
                <return>
                    a new {@code ParallelGroup}                    
                </return>
                <see>
                    #createBaselineGroup                    
                </see>
                <see>
                    ParallelGroup                    
                </see>
            </javadoc>
            <method name="createParallelGroup" type="ParallelGroup" line="479">
                <params>
                    <param name="alignment" type="Alignment"/>
                </params>
            </method>
            <javadoc line="482">
                Creates and returns a {@code ParallelGroup} with the specified
                  alignment and resize behavior. The {@codealignment} argument specifies how children elements are
                  positioned that do not fill the group. For example, if a {@codeParallelGroup} with an alignment of {@code TRAILING} is given
                  100 and a child only needs 50, the child is
                  positioned at the position 50 (with a component orientation of
                  left-to-right).
                  &lt;p&gt;
                  Baseline alignment is only useful when used along the vertical
                  axis. A {@code ParallelGroup} created with a baseline alignment
                  along the horizontal axis is treated as {@code LEADING}.
                  &lt;p&gt;
                  Refer to {@link GroupLayout.ParallelGroup ParallelGroup} for details on
                  the behavior of baseline groups.                
                <param>
                    alignment the alignment for the elements of the group                    
                </param>
                <param>
                    resizable {@code true} if the group is resizable; if the group
                      is not resizable the preferred size is used for the
                      minimum and maximum size of the group                    
                </param>
                <throws>
                    IllegalArgumentException if {@code alignment} is {@code null}                    
                </throws>
                <return>
                    a new {@code ParallelGroup}                    
                </return>
                <see>
                    #createBaselineGroup                    
                </see>
                <see>
                    GroupLayout.ParallelGroup                    
                </see>
            </javadoc>
            <method name="createParallelGroup" type="ParallelGroup" line="505">
                <params>
                    <param name="alignment" type="Alignment"/>
                    <param name="resizable" type="boolean"/>
                </params>
                <scope line="506"/>
                <scope line="509"/>
            </method>
            <javadoc line="514">
                Creates and returns a {@code ParallelGroup} that aligns it&apos;s
                  elements along the baseline.                
                <param>
                    resizable whether the group is resizable                    
                </param>
                <param>
                    anchorBaselineToTop whether the baseline is anchored to
                      the top or bottom of the group                    
                </param>
                <see>
                    #createBaselineGroup                    
                </see>
                <see>
                    ParallelGroup                    
                </see>
            </javadoc>
            <method name="createBaselineGroup" type="ParallelGroup" line="523">
                <params>
                    <param name="resizable" type="boolean"/>
                    <param name="anchorBaselineToTop" type="boolean"/>
                </params>
            </method>
            <javadoc line="526">
                Forces the specified components to have the same size
                  regardless of their preferred, minimum or maximum sizes. Components that
                  are linked are given the maximum of the preferred size of each of
                  the linked components. For example, if you link two components with
                  a preferred width of 10 and 20, both components are given a width of 20.
                  &lt;p&gt;
                  This can be used multiple times to force any number of
                  components to share the same size.
                  &lt;p&gt;
                  Linked Components are not be resizable.                
                <param>
                    components the {@code Component}s that are to have the same size                    
                </param>
                <throws>
                    IllegalArgumentException if {@code components} is{@code null}, or contains {@code null}                    
                </throws>
                <see>
                    #linkSize(int,Component[])                    
                </see>
            </javadoc>
            <method name="linkSize" type="void" line="541">
                <params>
                    <param name="components" type="Component"/>
                </params>
            </method>
            <javadoc line="545">
                Forces the specified components to have the same size along the
                  specified axis regardless of their preferred, minimum or
                  maximum sizes. Components that are linked are given the maximum
                  of the preferred size of each of the linked components. For
                  example, if you link two components along the horizontal axis
                  and the preferred width is 10 and 20, both components are given
                  a width of 20.
                  &lt;p&gt;
                  This can be used multiple times to force any number of
                  components to share the same size.
                  &lt;p&gt;
                  Linked {@code Component}s are not be resizable.                
                <param>
                    components the {@code Component}s that are to have the same size                    
                </param>
                <param>
                    axis the axis to link the size along; one of{@code SwingConstants.HORIZONTAL} or{@code SwingConstans.VERTICAL}                    
                </param>
                <throws>
                    IllegalArgumentException if {@code components} is{@code null}, or contains {@code null}; or {@code axis}is not {@code SwingConstants.HORIZONTAL} or{@code SwingConstants.VERTICAL}                    
                </throws>
            </javadoc>
            <method name="linkSize" type="void" line="562">
                <params>
                    <param name="axis" type="int"/>
                    <param name="components" type="Component"/>
                </params>
                <scope line="563"/>
                <scope line="566">
                    <declaration name="c" type="Component" line="567"/>
                    <scope line="568"/>
                </scope>
                <declaration name="glAxis" type="int" line="573"/>
                <scope line="574"/>
                <scope line="577"/>
                <scope line="580"/>
                <declaration name="master" type="LinkInfo" line="583"/>
                <scope line="584"/>
            </method>
            <javadoc line="589">
                Replaces an existing component with a new one.                
                <param>
                    existingComponent the component that should be removed
                      and replaced with {@code newComponent}                    
                </param>
                <param>
                    newComponent the component to put in{@code existingComponent}'s place                    
                </param>
                <throws>
                    IllegalArgumentException if either of the components are{@code null} or {@code existingComponent} is not being managed
                      by this layout manager                    
                </throws>
            </javadoc>
            <method name="replace" type="void" line="597">
                <params>
                    <param name="existingComponent" type="Component"/>
                    <param name="newComponent" type="Component"/>
                </params>
                <scope line="598"/>
                <scope line="601"/>
                <declaration name="info" type="ComponentInfo" line="605"/>
                <scope line="606"/>
                <scope line="610"/>
            </method>
            <javadoc line="617">
                Sets the {@code LayoutStyle} used to calculate the preferred
                  gaps between components. A value of {@code null} indicates the
                  shared instance of {@code LayoutStyle} should be used.                
                <param>
                    layoutStyle the {@code LayoutStyle} to use                    
                </param>
                <see>
                    LayoutStyle                    
                </see>
            </javadoc>
            <method name="setLayoutStyle" type="void" line="624">
                <params>
                    <param name="layoutStyle" type="LayoutStyle"/>
                </params>
            </method>
            <javadoc line="628">
                Returns the {@code LayoutStyle} used for calculating the preferred
                  gap between components. This returns the value specified to{@code setLayoutStyle}, which may be {@code null}.                
                <return>
                    the {@code LayoutStyle} used for calculating the preferred
                      gap between components                    
                </return>
            </javadoc>
            <method name="getLayoutStyle" type="LayoutStyle" line="634"/>
            <method name="getLayoutStyle0" type="LayoutStyle" line="637">
                <declaration name="layoutStyle" type="LayoutStyle" line="638"/>
                <scope line="639"/>
            </method>
            <method name="invalidateHost" type="void" line="644">
                <scope line="645"/>
                <scope line="648"/>
            </method>
            <javadoc line="653">
                Notification that a {@code Component} has been added to
                  the parent container.  You should not invoke this method
                  directly, instead you should use one of the {@code Group}methods to add a {@code Component}.                
                <param>
                    name the string to be associated with the component                    
                </param>
                <param>
                    component the {@code Component} to be added                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="660">
                <params>
                    <param name="name" type="String"/>
                    <param name="component" type="Component"/>
                </params>
            </method>
            <javadoc line="662">
                Notification that a {@code Component} has been removed from
                  the parent container.  You should not invoke this method
                  directly, instead invoke {@code remove} on the parent{@code Container}.                
                <param>
                    component the component to be removed                    
                </param>
                <see>
                    java.awt.Component#remove                    
                </see>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="669">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="info" type="ComponentInfo" line="670"/>
                <scope line="671"/>
            </method>
            <javadoc line="677">
                Returns the preferred size for the specified container.                
                <param>
                    parent the container to return the preferred size for                    
                </param>
                <return>
                    the preferred size for {@code parent}                    
                </return>
                <throws>
                    IllegalArgumentException if {@code parent} is not
                      the same {@code Container} this was created with                    
                </throws>
                <throws>
                    IllegalStateException if any of the components added to
                      this layout are not in both a horizontal and vertical group                    
                </throws>
                <see>
                    java.awt.Container#getPreferredSize                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="687">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="692">
                Returns the minimum size for the specified container.                
                <param>
                    parent the container to return the size for                    
                </param>
                <return>
                    the minimum size for {@code parent}                    
                </return>
                <throws>
                    IllegalArgumentException if {@code parent} is not
                      the same {@code Container} that this was created with                    
                </throws>
                <throws>
                    IllegalStateException if any of the components added to
                      this layout are not in both a horizontal and vertical group                    
                </throws>
                <see>
                    java.awt.Container#getMinimumSize                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="702">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="707">
                Lays out the specified container.                
                <param>
                    parent the container to be laid out                    
                </param>
                <throws>
                    IllegalStateException if any of the components added to
                      this layout are not in both a horizontal and vertical group                    
                </throws>
            </javadoc>
            <method name="layoutContainer" type="void" line="713">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <declaration name="insets" type="Insets" line="715"/>
                <declaration name="width" type="int" line="716"/>
                <declaration name="height" type="int" line="717"/>
                <declaration name="ltr" type="boolean" line="718"/>
                <scope line="719"/>
                <scope line="725"/>
            </method>
            <javadoc line="729">
                Notification that a {@code Component} has been added to
                  the parent container.  You should not invoke this method
                  directly, instead you should use one of the {@code Group}methods to add a {@code Component}.                
                <param>
                    component the component added                    
                </param>
                <param>
                    constraints description of where to place the component                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="736">
                <params>
                    <param name="component" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
            </method>
            <javadoc line="738">
                Returns the maximum size for the specified container.                
                <param>
                    parent the container to return the size for                    
                </param>
                <return>
                    the maximum size for {@code parent}                    
                </return>
                <throws>
                    IllegalArgumentException if {@code parent} is not
                      the same {@code Container} that this was created with                    
                </throws>
                <throws>
                    IllegalStateException if any of the components added to
                      this layout are not in both a horizontal and vertical group                    
                </throws>
                <see>
                    java.awt.Container#getMaximumSize                    
                </see>
            </javadoc>
            <method name="maximumLayoutSize" type="Dimension" line="748">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="753">
                Returns the alignment along the x axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
                <param>
                    parent the {@code Container} hosting this {@code LayoutManager}                    
                </param>
                <throws>
                    IllegalArgumentException if {@code parent} is not
                      the same {@code Container} that this was created with                    
                </throws>
                <return>
                    the alignment; this implementation returns {@code .5}                    
                </return>
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="764">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="768">
                Returns the alignment along the y axis.  This specifies how
                  the component would like to be aligned relative to other
                  components.  The value should be a number between 0 and 1
                  where 0 represents alignment along the origin, 1 is aligned
                  the furthest away from the origin, 0.5 is centered, etc.                
                <param>
                    parent the {@code Container} hosting this {@code LayoutManager}                    
                </param>
                <throws>
                    IllegalArgumentException if {@code parent} is not
                      the same {@code Container} that this was created with                    
                </throws>
                <return>
                    alignment; this implementation returns {@code .5}                    
                </return>
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="779">
                <params>
                    <param name="parent" type="Container"/>
                </params>
            </method>
            <javadoc line="783">
                Invalidates the layout, indicating that if the layout manager
                  has cached information it should be discarded.                
                <param>
                    parent the {@code Container} hosting this LayoutManager                    
                </param>
                <throws>
                    IllegalArgumentException if {@code parent} is not
                      the same {@code Container} that this was created with                    
                </throws>
            </javadoc>
            <method name="invalidateLayout" type="void" line="790">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="792"/>
            </method>
            <method name="prepare" type="void" line="796">
                <params>
                    <param name="sizeType" type="int"/>
                </params>
                <declaration name="visChanged" type="boolean" line="797"/>
                <scope line="798">
                    <scope line="802">
                        <scope line="803"/>
                    </scope>
                </scope>
                <scope line="809"/>
                <scope line="813">
                    <scope line="817"/>
                    <scope line="820"/>
                </scope>
                <scope line="825"/>
            </method>
            <method name="calculateAutopadding" type="void" line="830">
                <params>
                    <param name="group" type="Group"/>
                    <param name="axis" type="int"/>
                    <param name="sizeType" type="int"/>
                    <param name="origin" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="checkComponents" type="void" line="848">
                <scope line="849">
                    <scope line="850"/>
                    <scope line="853"/>
                </scope>
            </method>
            <method name="registerComponents" type="void" line="858">
                <params>
                    <param name="group" type="Group"/>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="springs" type="List&lt;Spring&gt;" line="859"/>
                <scope line="860">
                    <declaration name="spring" type="Spring" line="861"/>
                    <scope line="862"/>
                    <scope line="865"/>
                </scope>
            </method>
            <method name="adjustSize" type="Dimension" line="870">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <declaration name="insets" type="Insets" line="871"/>
            </method>
            <method name="checkParent" type="void" line="874">
                <params>
                    <param name="parent" type="Container"/>
                </params>
                <scope line="875"/>
            </method>
            <javadoc line="879">
                Returns the {@code ComponentInfo} for the specified Component,
                  creating one if necessary.                
            </javadoc>
            <method name="getComponentInfo" type="ComponentInfo" line="883">
                <params>
                    <param name="component" type="Component"/>
                </params>
                <declaration name="info" type="ComponentInfo" line="884"/>
                <scope line="885">
                    <scope line="888"/>
                </scope>
            </method>
            <javadoc line="894">
                Adjusts the autopadding springs for the horizontal and vertical
                  groups.  If {@code insert} is {@code true} this will insert auto padding
                  springs, otherwise this will only adjust the springs that
                  comprise auto preferred padding springs.                
            </javadoc>
            <method name="insertAutopadding" type="void" line="900">
                <params>
                    <param name="insert" type="boolean"/>
                </params>
            </method>
            <javadoc line="904">
                Returns {@code true} if the two Components have a common ParallelGroup
                  ancestor along the particular axis.                
            </javadoc>
            <method name="areParallelSiblings" type="boolean" line="908">
                <params>
                    <param name="source" type="Component"/>
                    <param name="target" type="Component"/>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="sourceInfo" type="ComponentInfo" line="909"/>
                <declaration name="targetInfo" type="ComponentInfo" line="910"/>
                <declaration name="sourceSpring" type="Spring" line="911"/>
                <declaration name="targetSpring" type="Spring" line="912"/>
                <scope line="913"/>
                <scope line="917"/>
                <declaration name="sourcePath" type="Set&lt;Spring&gt;" line="921"/>
                <declaration name="spring" type="Spring" line="923"/>
                <scope line="924"/>
                <scope line="929">
                    <scope line="930">
                        <scope line="932">
                            <scope line="933"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isLeftToRight" type="boolean" line="945"/>
            <javadoc line="948">
                Returns a string representation of this {@code GroupLayout}.
                  This method is intended to be used for debugging purposes,
                  and the content and format of the returned string may vary
                  between implementations.                
                <return>
                    a string representation of this {@code GroupLayout}                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="955">
                <scope line="956"/>
                <declaration name="buffer" type="StringBuffer" line="960"/>
            </method>
            <method name="createSpringDescription" type="void" line="967">
                <params>
                    <param name="buffer" type="StringBuffer"/>
                    <param name="spring" type="Spring"/>
                    <param name="indent" type="String"/>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="origin" type="String" line="968"/>
                <declaration name="padding" type="String" line="969"/>
                <scope line="970">
                    <declaration name="cSpring" type="ComponentSpring" line="971"/>
                    <declaration name="name" type="String" line="973"/>
                    <scope line="974"/>
                </scope>
                <scope line="978">
                    <declaration name="paddingSpring" type="AutoPreferredGapSpring" line="979"/>
                </scope>
                <scope line="983">
                    <declaration name="springs" type="List&lt;Spring&gt;" line="984"/>
                    <scope line="986"/>
                </scope>
            </method>
            <class name="Spring" line="991">
                <javadoc line="991">
                    Spring consists of a range: min, pref and max, a value some where in
                      the middle of that, and a location. Spring caches the
                      min/max/pref.  If the min/pref/max has internally changes, or needs
                      to be updated you must invoke clear.                    
                </javadoc>
                <declaration name="size" type="int" line="998"/>
                <declaration name="min" type="int" line="999"/>
                <declaration name="max" type="int" line="1000"/>
                <declaration name="pref" type="int" line="1001"/>
                <declaration name="parent" type="Spring" line="1002"/>
                <declaration name="alignment" type="Alignment" line="1003"/>
                <method name="Spring" type="constructor" line="1004"/>
                <method name="calculateMinimumSize" type="int" line="1007"/>
                <javadoc line="1007">
                    Calculates and returns the minimum size.                    
                    <param>
                        axis the axis of layout; one of HORIZONTAL or VERTICAL                        
                    </param>
                    <return>
                        the minimum size                        
                    </return>
                </javadoc>
                <method name="calculatePreferredSize" type="int" line="1013"/>
                <javadoc line="1013">
                    Calculates and returns the preferred size.                    
                    <param>
                        axis the axis of layout; one of HORIZONTAL or VERTICAL                        
                    </param>
                    <return>
                        the preferred size                        
                    </return>
                </javadoc>
                <method name="calculateMaximumSize" type="int" line="1019"/>
                <javadoc line="1019">
                    Calculates and returns the minimum size.                    
                    <param>
                        axis the axis of layout; one of HORIZONTAL or VERTICAL                        
                    </param>
                    <return>
                        the minimum size                        
                    </return>
                </javadoc>
                <javadoc line="1025">
                    Sets the parent of this Spring.                    
                </javadoc>
                <method name="setParent" type="void" line="1028">
                    <params>
                        <param name="parent" type="Spring"/>
                    </params>
                </method>
                <javadoc line="1031">
                    Returns the parent of this spring.                    
                </javadoc>
                <method name="getParent" type="Spring" line="1034"/>
                <method name="setAlignment" type="void" line="1037">
                    <params>
                        <param name="alignment" type="Alignment"/>
                    </params>
                </method>
                <javadoc line="1040">
                    Alignment for this Spring, this may be null.                    
                </javadoc>
                <method name="getAlignment" type="Alignment" line="1043"/>
                <javadoc line="1046">
                    Returns the minimum size.                    
                </javadoc>
                <method name="getMinimumSize" type="int" line="1049">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="1050"/>
                </method>
                <javadoc line="1055">
                    Returns the preferred size.                    
                </javadoc>
                <method name="getPreferredSize" type="int" line="1058">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="1059"/>
                </method>
                <javadoc line="1064">
                    Returns the maximum size.                    
                </javadoc>
                <method name="getMaximumSize" type="int" line="1067">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="1068"/>
                </method>
                <javadoc line="1073">
                    Sets the value and location of the spring.  Subclasses
                      will want to invoke super, then do any additional sizing.                    
                    <param>
                        axis HORIZONTAL or VERTICAL                        
                    </param>
                    <param>
                        origin of this Spring                        
                    </param>
                    <param>
                        size of the Spring.  If size is UNSET, this invokes
                          clear.                        
                    </param>
                </javadoc>
                <method name="setSize" type="void" line="1081">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="1083"/>
                </method>
                <javadoc line="1087">
                    Resets the cached min/max/pref.                    
                </javadoc>
                <method name="unset" type="void" line="1090"/>
                <javadoc line="1093">
                    Returns the current size.                    
                </javadoc>
                <method name="getSize" type="int" line="1096"/>
                <method name="constrain" type="int" line="1099">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                </method>
                <method name="getBaseline" type="int" line="1102"/>
                <method name="getBaselineResizeBehavior" type="BaselineResizeBehavior" line="1105"/>
                <method name="isResizable" type="boolean" line="1108">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="min" type="int" line="1109"/>
                    <declaration name="pref" type="int" line="1110"/>
                </method>
                <method name="willHaveZeroSize" type="boolean" line="1113"/>
                <javadoc line="1113">
                    Returns {@code true} if this spring will ALWAYS have a zero
                      size. This should NOT check the current size, rather it&apos;s
                      meant to quickly test if this Spring will always have a
                      zero size.                    
                    <param>
                        treatAutopaddingAsZeroSized if {@code true}, auto padding
                          springs should be treated as having a size of {@code 0}                        
                    </param>
                    <return>
                        {@code true} if this spring will have a zero size,{@code false} otherwise                        
                    </return>
                </javadoc>
            </class>
            <class name="Group" line="1124">
                <extends class="Spring"/>
                <javadoc line="1124">
                    {@code Group} provides the basis for the two types of
                      operations supported by {@code GroupLayout}: laying out
                      components one after another ({@link SequentialGroup SequentialGroup})
                      or aligned ({@link ParallelGroup ParallelGroup}). {@code Group} and
                      its subclasses have no public constructor; to create one use
                      one of {@code createSequentialGroup} or{@code createParallelGroup}. Additionally, taking a {@code Group}created from one {@code GroupLayout} and using it with another
                      will produce undefined results.
                      &lt;p&gt;
                      Various methods in {@code Group} and its subclasses allow you
                      to explicitly specify the range. The arguments to these methods
                      can take two forms, either a value greater than or equal to 0,
                      or one of {@code DEFAULT_SIZE} or {@code PREFERRED_SIZE}. A
                      value greater than or equal to {@code 0} indicates a specific
                      size. {@code DEFAULT_SIZE} indicates the corresponding size
                      from the component should be used.  For example, if {@codeDEFAULT_SIZE} is passed as the minimum size argument, the
                      minimum size is obtained from invoking {@code getMinimumSize}on the component. Likewise, {@code PREFERRED_SIZE} indicates
                      the value from {@code getPreferredSize} should be used.
                      The following example adds {@code myComponent} to {@code group}with specific values for the range. That is, the minimum is
                      explicitly specified as 100, preferred as 200, and maximum as
                      300.
                      &lt;pre&gt;
                      group.addComponent(myComponent, 100, 200, 300);
                      &lt;/pre&gt;
                      The following example adds {@code myComponent} to {@code group} using
                      a combination of the forms. The minimum size is forced to be the
                      same as the preferred size, the preferred size is determined by
                      using {@code myComponent.getPreferredSize} and the maximum is
                      determined by invoking {@code getMaximumSize} on the component.
                      &lt;pre&gt;
                      group.addComponent(myComponent, GroupLayout.PREFERRED_SIZE,
                      GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE);
                      &lt;/pre&gt;
                      &lt;p&gt;
                      Unless otherwise specified all the methods of {@code Group} and
                      its subclasses that allow you to specify a range throw an{@code IllegalArgumentException} if passed an invalid range. An
                      invalid range is one in which any of the values are &amp;lt; 0 and
                      not one of {@code PREFERRED_SIZE} or {@code DEFAULT_SIZE}, or
                      the following is not met (for specific values): {@code min}&amp;lt;= {@code pref} &amp;lt;= {@code max}.
                      &lt;p&gt;
                      Similarly any methods that take a {@code Component} throw a{@code IllegalArgumentException} if passed {@code null} and any methods
                      that take a {@code Group} throw an {@code NullPointerException} if
                      passed {@code null}.                    
                    <see>
                        #createSequentialGroup                        
                    </see>
                    <see>
                        #createParallelGroup                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="springs" type="List&lt;Spring&gt;" line="1172"/>
                <method name="Group" type="constructor" line="1173"/>
                <javadoc line="1176">
                    Adds a {@code Group} to this {@code Group}.                    
                    <param>
                        group the {@code Group} to add                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addGroup" type="Group" line="1181">
                    <params>
                        <param name="group" type="Group"/>
                    </params>
                </method>
                <javadoc line="1184">
                    Adds a {@code Component} to this {@code Group}.                    
                    <param>
                        component the {@code Component} to add                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addComponent" type="Group" line="1189">
                    <params>
                        <param name="component" type="Component"/>
                    </params>
                </method>
                <javadoc line="1192">
                    Adds a {@code Component} to this {@code Group}with the specified size.                    
                    <param>
                        component the {@code Component} to add                        
                    </param>
                    <param>
                        min the minimum size or one of {@code DEFAULT_SIZE} or{@code PREFERRED_SIZE}                        
                    </param>
                    <param>
                        pref the preferred size or one of {@code DEFAULT_SIZE} or{@code PREFERRED_SIZE}                        
                    </param>
                    <param>
                        max the maximum size or one of {@code DEFAULT_SIZE} or{@code PREFERRED_SIZE}                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addComponent" type="Group" line="1200">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <javadoc line="1203">
                    Adds a rigid gap to this {@code Group}.                    
                    <param>
                        size the size of the gap                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code size} is less than{@code 0}                        
                    </throws>
                </javadoc>
                <method name="addGap" type="Group" line="1209">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <javadoc line="1212">
                    Adds a gap to this {@code Group} with the specified size.                    
                    <param>
                        min the minimum size of the gap                        
                    </param>
                    <param>
                        pref the preferred size of the gap                        
                    </param>
                    <param>
                        max the maximum size of the gap                        
                    </param>
                    <throws>
                        IllegalArgumentException if any of the values are
                          less than {@code 0}                        
                    </throws>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addGap" type="Group" line="1221">
                    <params>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="getSpring" type="Spring" line="1224">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <method name="indexOf" type="int" line="1227">
                    <params>
                        <param name="spring" type="Spring"/>
                    </params>
                </method>
                <javadoc line="1230">
                    Adds the Spring to the list of {@code Spring}s and returns
                      the receiver.                    
                </javadoc>
                <method name="addSpring" type="Group" line="1234">
                    <params>
                        <param name="spring" type="Spring"/>
                    </params>
                    <scope line="1237"/>
                </method>
                <method name="setSize" type="void" line="1242">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="1244">
                        <scope line="1245"/>
                    </scope>
                    <scope line="1249"/>
                </method>
                <method name="setValidSize" type="void" line="1253"/>
                <javadoc line="1253">
                    This is invoked from {@code setSize} if passed a value
                      other than UNSET.                    
                </javadoc>
                <method name="calculateMinimumSize" type="int" line="1258">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="calculatePreferredSize" type="int" line="1261">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="calculateMaximumSize" type="int" line="1264">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <javadoc line="1267">
                    Calculates the specified size.  This is called from
                      one of the {@code getMinimumSize0},{@code getPreferredSize0} or{@code getMaximumSize0} methods.  This will invoke
                      to {@code operator} to combine the values.                    
                </javadoc>
                <method name="calculateSize" type="int" line="1272">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="type" type="int"/>
                    </params>
                    <declaration name="count" type="int" line="1273"/>
                    <scope line="1274"/>
                    <scope line="1277"/>
                    <declaration name="size" type="int" line="1280"/>
                    <scope line="1281"/>
                </method>
                <method name="getSpringSize" type="int" line="1286">
                    <params>
                        <param name="spring" type="Spring"/>
                        <param name="axis" type="int"/>
                        <param name="type" type="int"/>
                    </params>
                </method>
                <method name="operator" type="int" line="1298"/>
                <javadoc line="1298">
                    Used to compute how the two values representing two springs
                      will be combined.  For example, a group that layed things out
                      one after the next would return {@code a + b}.                    
                </javadoc>
                <method name="insertAutopadding" type="void" line="1304"/>
                <javadoc line="1304">
                    Adjusts the autopadding springs in this group and its children.
                      If {@code insert} is true this will insert auto padding
                      springs, otherwise this will only adjust the springs that
                      comprise auto preferred padding springs.                    
                    <param>
                        axis the axis of the springs; HORIZONTAL or VERTICAL                        
                    </param>
                    <param>
                        leadingPadding List of AutopaddingSprings that occur before
                          this Group                        
                    </param>
                    <param>
                        trailingPadding any trailing autopadding springs are added
                          to this on exit                        
                    </param>
                    <param>
                        leading List of ComponentSprings that occur before this Group                        
                    </param>
                    <param>
                        trailing any trailing ComponentSpring are added to this
                          List                        
                    </param>
                    <param>
                        insert Whether or not to insert AutopaddingSprings or just
                          adjust any existing AutopaddingSprings.                        
                    </param>
                </javadoc>
                <javadoc line="1321">
                    Removes any AutopaddingSprings for this Group and its children.                    
                </javadoc>
                <method name="removeAutopadding" type="void" line="1324">
                    <scope line="1326">
                        <declaration name="spring" type="Spring" line="1327"/>
                        <scope line="1328">
                            <scope line="1329"/>
                            <scope line="1332"/>
                        </scope>
                        <scope line="1336"/>
                    </scope>
                </method>
                <method name="unsetAutopadding" type="void" line="1341">
                    <scope line="1343">
                        <declaration name="spring" type="Spring" line="1344"/>
                        <scope line="1345"/>
                        <scope line="1348"/>
                    </scope>
                </method>
                <method name="calculateAutopadding" type="void" line="1353">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="1354">
                        <declaration name="spring" type="Spring" line="1355"/>
                        <scope line="1356"/>
                        <scope line="1360"/>
                    </scope>
                </method>
                <method name="willHaveZeroSize" type="boolean" line="1366">
                    <params>
                        <param name="treatAutopaddingAsZeroSized" type="boolean"/>
                    </params>
                    <scope line="1367">
                        <declaration name="spring" type="Spring" line="1368"/>
                        <scope line="1369"/>
                    </scope>
                </method>
            </class>
            <class name="SequentialGroup" line="1376">
                <extends class="Group"/>
                <javadoc line="1376">
                    A {@code Group} that positions and sizes its elements
                      sequentially, one after another.  This class has no public
                      constructor, use the {@code createSequentialGroup} method
                      to create one.
                      &lt;p&gt;
                      In order to align a {@code SequentialGroup} along the baseline
                      of a baseline aligned {@code ParallelGroup} you need to specify
                      which of the elements of the {@code SequentialGroup} is used to
                      determine the baseline.  The element used to calculate the
                      baseline is specified using one of the {@code add} methods that
                      take a {@code boolean}. The last element added with a value of{@code true} for {@code useAsBaseline} is used to calculate the
                      baseline.                    
                    <see>
                        #createSequentialGroup                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="baselineSpring" type="Spring" line="1393"/>
                <method name="SequentialGroup" type="constructor" line="1394"/>
                <javadoc line="1396">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addGroup" type="SequentialGroup" line="1399">
                    <params>
                        <param name="group" type="Group"/>
                    </params>
                </method>
                <javadoc line="1402">
                    Adds a {@code Group} to this {@code Group}.                    
                    <param>
                        group the {@code Group} to add                        
                    </param>
                    <param>
                        useAsBaseline whether the specified {@code Group} should
                          be used to calculate the baseline for this {@code Group}                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addGroup" type="SequentialGroup" line="1409">
                    <params>
                        <param name="useAsBaseline" type="boolean"/>
                        <param name="group" type="Group"/>
                    </params>
                    <scope line="1411"/>
                </method>
                <javadoc line="1416">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addComponent" type="SequentialGroup" line="1419">
                    <params>
                        <param name="component" type="Component"/>
                    </params>
                </method>
                <javadoc line="1422">
                    Adds a {@code Component} to this {@code Group}.                    
                    <param>
                        useAsBaseline whether the specified {@code Component} should
                          be used to calculate the baseline for this {@code Group}                        
                    </param>
                    <param>
                        component the {@code Component} to add                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addComponent" type="SequentialGroup" line="1429">
                    <params>
                        <param name="useAsBaseline" type="boolean"/>
                        <param name="component" type="Component"/>
                    </params>
                    <scope line="1431"/>
                </method>
                <javadoc line="1436">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addComponent" type="SequentialGroup" line="1439">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <javadoc line="1442">
                    Adds a {@code Component} to this {@code Group}with the specified size.                    
                    <param>
                        useAsBaseline whether the specified {@code Component} should
                          be used to calculate the baseline for this {@code Group}                        
                    </param>
                    <param>
                        component the {@code Component} to add                        
                    </param>
                    <param>
                        min the minimum size or one of {@code DEFAULT_SIZE} or{@code PREFERRED_SIZE}                        
                    </param>
                    <param>
                        pref the preferred size or one of {@code DEFAULT_SIZE} or{@code PREFERRED_SIZE}                        
                    </param>
                    <param>
                        max the maximum size or one of {@code DEFAULT_SIZE} or{@code PREFERRED_SIZE}                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addComponent" type="SequentialGroup" line="1452">
                    <params>
                        <param name="useAsBaseline" type="boolean"/>
                        <param name="component" type="Component"/>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="1454"/>
                </method>
                <javadoc line="1459">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addGap" type="SequentialGroup" line="1462">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <javadoc line="1465">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addGap" type="SequentialGroup" line="1468">
                    <params>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <javadoc line="1471">
                    Adds an element representing the preferred gap between two
                      components. The element created to represent the gap is not
                      resizable.                    
                    <param>
                        comp1 the first component                        
                    </param>
                    <param>
                        comp2 the second component                        
                    </param>
                    <param>
                        type the type of gap; one of the constants defined by{@code LayoutStyle}                        
                    </param>
                    <return>
                        this {@code SequentialGroup}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code type}, {@code comp1} or{@code comp2} is {@code null}                        
                    </throws>
                    <see>
                        LayoutStyle                        
                    </see>
                </javadoc>
                <method name="addPreferredGap" type="SequentialGroup" line="1482">
                    <params>
                        <param name="comp1" type="JComponent"/>
                        <param name="comp2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                    </params>
                </method>
                <javadoc line="1485">
                    Adds an element representing the preferred gap between two
                      components.                    
                    <param>
                        comp1 the first component                        
                    </param>
                    <param>
                        comp2 the second component                        
                    </param>
                    <param>
                        type the type of gap                        
                    </param>
                    <param>
                        pref the preferred size of the grap; one of{@code DEFAULT_SIZE} or a value &gt;= 0                        
                    </param>
                    <param>
                        max the maximum size of the gap; one of{@code DEFAULT_SIZE}, {@code PREFERRED_SIZE}or a value &gt;= 0                        
                    </param>
                    <return>
                        this {@code SequentialGroup}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code type}, {@code comp1} or{@code comp2} is {@code null}                        
                    </throws>
                    <see>
                        LayoutStyle                        
                    </see>
                </javadoc>
                <method name="addPreferredGap" type="SequentialGroup" line="1497">
                    <params>
                        <param name="comp1" type="JComponent"/>
                        <param name="comp2" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="1498"/>
                    <scope line="1501"/>
                </method>
                <javadoc line="1507">
                    Adds an element representing the preferred gap between the
                      nearest components.  During layout, neighboring
                      components are found, and the size of the added gap is set
                      based on the preferred gap between the components.  If no
                      neighboring components are found the gap has a size of {@code 0}.
                      &lt;p&gt;
                      The element created to represent the gap is not
                      resizable.                    
                    <param>
                        type the type of gap; one of{@code LayoutStyle.ComponentPlacement.RELATED} or{@code LayoutStyle.ComponentPlacement.UNRELATED}                        
                    </param>
                    <return>
                        this {@code SequentialGroup}                        
                    </return>
                    <see>
                        LayoutStyle                        
                    </see>
                    <throws>
                        IllegalArgumentException if {@code type} is not one of{@code LayoutStyle.ComponentPlacement.RELATED} or{@code LayoutStyle.ComponentPlacement.UNRELATED}                        
                    </throws>
                </javadoc>
                <method name="addPreferredGap" type="SequentialGroup" line="1521">
                    <params>
                        <param name="type" type="ComponentPlacement"/>
                    </params>
                </method>
                <javadoc line="1524">
                    Adds an element representing the preferred gap between the
                      nearest components.  During layout, neighboring
                      components are found, and the minimum of this
                      gap is set based on the size of the preferred gap between the
                      neighboring components.  If no neighboring components are found the
                      minimum size is set to 0.                    
                    <param>
                        type the type of gap; one of{@code LayoutStyle.ComponentPlacement.RELATED} or{@code LayoutStyle.ComponentPlacement.UNRELATED}                        
                    </param>
                    <param>
                        pref the preferred size of the grap; one of{@code DEFAULT_SIZE} or a value &gt;= 0                        
                    </param>
                    <param>
                        max the maximum size of the gap; one of{@code DEFAULT_SIZE}, {@code PREFERRED_SIZE}or a value &gt;= 0                        
                    </param>
                    <return>
                        this {@code SequentialGroup}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code type} is not one of{@code LayoutStyle.ComponentPlacement.RELATED} or{@code LayoutStyle.ComponentPlacement.UNRELATED}                        
                    </throws>
                    <see>
                        LayoutStyle                        
                    </see>
                </javadoc>
                <method name="addPreferredGap" type="SequentialGroup" line="1538">
                    <params>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="1539"/>
                </method>
                <javadoc line="1546">
                    Adds an element representing the preferred gap between an edge
                      the container and components that touch the border of the
                      container. This has no effect if the added gap does not
                      touch an edge of the parent container.
                      &lt;p&gt;
                      The element created to represent the gap is not
                      resizable.                    
                    <return>
                        this {@code SequentialGroup}                        
                    </return>
                </javadoc>
                <method name="addContainerGap" type="SequentialGroup" line="1556"/>
                <javadoc line="1559">
                    Adds an element representing the preferred gap between one
                      edge of the container and the next or previous {@codeComponent} with the specified size. This has no
                      effect if the next or previous element is not a {@codeComponent} and does not touch one edge of the parent
                      container.                    
                    <param>
                        pref the preferred size; one of {@code DEFAULT_SIZE} or a
                          value &gt;= 0                        
                    </param>
                    <param>
                        max the maximum size; one of {@code DEFAULT_SIZE},{@code PREFERRED_SIZE} or a value &gt;= 0                        
                    </param>
                    <return>
                        this {@code SequentialGroup}                        
                    </return>
                </javadoc>
                <method name="addContainerGap" type="SequentialGroup" line="1569">
                    <params>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="1570"/>
                </method>
                <method name="operator" type="int" line="1576">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="setValidSize" type="void" line="1579">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <declaration name="pref" type="int" line="1580"/>
                    <scope line="1581">
                        <scope line="1582">
                            <declaration name="springPref" type="int" line="1583"/>
                        </scope>
                    </scope>
                    <scope line="1588">
                        <declaration name="spring" type="Spring" line="1589"/>
                    </scope>
                    <scope line="1592"/>
                </method>
                <method name="setValidSizeNotPreferred" type="void" line="1596">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                </method>
                <javadoc line="1646">
                    Returns the sorted list of SpringDelta&apos;s for the current set of
                      Springs. The list is ordered based on the amount of flexibility of
                      the springs.                    
                </javadoc>
                <method name="buildResizableList" type="List<SpringDelta>" line="1651">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="useMin" type="boolean"/>
                    </params>
                    <declaration name="size" type="int" line="1652"/>
                    <declaration name="sorted" type="List&lt;SpringDelta&gt;" line="1653"/>
                    <scope line="1654">
                        <declaration name="spring" type="Spring" line="1655"/>
                        <declaration name="sDelta" type="int" line="1656"/>
                        <scope line="1657"/>
                        <scope line="1660"/>
                        <scope line="1663"/>
                    </scope>
                </method>
                <method name="indexOfNextNonZeroSpring" type="int" line="1670">
                    <params>
                        <param name="index" type="int"/>
                        <param name="treatAutopaddingAsZeroSized" type="boolean"/>
                    </params>
                    <scope line="1671">
                        <declaration name="spring" type="Spring" line="1672"/>
                        <scope line="1673"/>
                    </scope>
                </method>
                <method name="insertAutopadding" type="void" line="1680">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="leadingPadding" type="List<AutoPreferredGapSpring>"/>
                        <param name="trailingPadding" type="List<AutoPreferredGapSpring>"/>
                        <param name="leading" type="List<ComponentSpring>"/>
                        <param name="trailing" type="List<ComponentSpring>"/>
                        <param name="insert" type="boolean"/>
                    </params>
                    <declaration name="newLeadingPadding" type="List&lt;AutoPreferredGapSpring&gt;" line="1681"/>
                    <declaration name="newTrailingPadding" type="List&lt;AutoPreferredGapSpring&gt;" line="1682"/>
                    <declaration name="newLeading" type="List&lt;ComponentSpring&gt;" line="1683"/>
                    <declaration name="newTrailing" type="List&lt;ComponentSpring&gt;" line="1684"/>
                    <declaration name="counter" type="int" line="1685"/>
                    <scope line="1686">
                        <declaration name="spring" type="Spring" line="1687"/>
                        <scope line="1688">
                            <scope line="1689">
                                <declaration name="padding" type="AutoPreferredGapSpring" line="1690"/>
                                <scope line="1694">
                                    <scope line="1695"/>
                                </scope>
                                <scope line="1699"/>
                            </scope>
                            <scope line="1704"/>
                        </scope>
                        <scope line="1708">
                            <scope line="1709">
                                <declaration name="padding" type="AutoPreferredGapSpring" line="1710"/>
                            </scope>
                            <scope line="1714">
                                <declaration name="cSpring" type="ComponentSpring" line="1715"/>
                                <scope line="1716"/>
                                <scope line="1720"/>
                                <scope line="1726"/>
                                <scope line="1729"/>
                            </scope>
                            <scope line="1733">
                                <scope line="1734"/>
                                <scope line="1737"/>
                                <scope line="1745"/>
                                <scope line="1749"/>
                            </scope>
                            <scope line="1754"/>
                        </scope>
                    </scope>
                </method>
                <method name="getBaseline" type="int" line="1762">
                    <scope line="1763">
                        <declaration name="baseline" type="int" line="1764"/>
                        <scope line="1765">
                            <declaration name="size" type="int" line="1766"/>
                            <scope line="1767">
                                <scope line="1768"/>
                                <scope line="1771"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="getBaselineResizeBehavior" type="BaselineResizeBehavior" line="1779">
                    <scope line="1780">
                        <scope line="1781">
                            <declaration name="leadingResizable" type="boolean" line="1782"/>
                            <scope line="1783">
                                <scope line="1784"/>
                                <scope line="1787"/>
                            </scope>
                            <declaration name="trailingResizable" type="boolean" line="1792"/>
                            <scope line="1793">
                                <declaration name="spring" type="Spring" line="1794"/>
                                <scope line="1795"/>
                                <scope line="1798"/>
                            </scope>
                            <scope line="1803"/>
                            <scope line="1806"/>
                        </scope>
                        <scope line="1810">
                            <declaration name="brb" type="BaselineResizeBehavior" line="1811"/>
                            <scope line="1812">
                                <scope line="1813">
                                    <scope line="1814"/>
                                    <scope line="1817"/>
                                </scope>
                            </scope>
                            <scope line="1822">
                                <scope line="1823">
                                    <declaration name="spring" type="Spring" line="1824"/>
                                    <scope line="1825"/>
                                    <scope line="1828"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="checkPreferredGapValues" type="void" line="1838">
                    <params>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="1839"/>
                </method>
            </class>
            <class name="SpringDelta" line="1844">
                <implements interface="Comparable">
                    <type_params>
                        <type_param name="SpringDelta"/>
                    </type_params>
                </implements>
                <javadoc line="1844">
                    Used by SequentialGroup in calculating resizability of springs.                    
                </javadoc>
                <declaration name="index" type="int" line="1848"/>
                <declaration name="delta" type="int" line="1849"/>
                <method name="SpringDelta" type="constructor" line="1850">
                    <params>
                        <param name="index" type="int"/>
                        <param name="delta" type="int"/>
                    </params>
                </method>
                <method name="compareTo" type="int" line="1854">
                    <params>
                        <param name="o" type="SpringDelta"/>
                    </params>
                </method>
                <method name="toString" type="String" line="1857"/>
            </class>
            <class name="ParallelGroup" line="1861">
                <extends class="Group"/>
                <javadoc line="1861">
                    A {@code Group} that aligns and sizes it&apos;s children.{@code ParallelGroup} aligns it&apos;s children in
                      four possible ways: along the baseline, centered, anchored to the
                      leading edge, or anchored to the trailing edge.
                      &lt;h3&gt;Baseline&lt;/h3&gt;
                      A {@code ParallelGroup} that aligns it&apos;s children along the
                      baseline must first decide where the baseline is
                      anchored. The baseline can either be anchored to the top, or
                      anchored to the bottom of the group. That is, the distance between the
                      baseline and the beginning of the group can be a constant
                      distance, or the distance between the end of the group and the
                      baseline can be a constant distance. The possible choices
                      correspond to the {@code BaselineResizeBehavior} constants{@link java.awt.Component.BaselineResizeBehavior#CONSTANT_ASCENT CONSTANT_ASCENT} and{@link java.awt.Component.BaselineResizeBehavior#CONSTANT_DESCENT CONSTANT_DESCENT}.
                      &lt;p&gt;
                      The baseline anchor may be explicitly specified by the{@code createBaselineGroup} method, or determined based on the elements.
                      If not explicitly specified, the baseline will be anchored to
                      the bottom if all the elements with a baseline, and that are
                      aligned to the baseline, have a baseline resize behavior of{@code CONSTANT_DESCENT}; otherwise the baseline is anchored to the top
                      of the group.
                      &lt;p&gt;
                      Elements aligned to the baseline are resizable if they have have
                      a baseline resize behavior of {@code CONSTANT_ASCENT} or{@code CONSTANT_DESCENT}. Elements with a baseline resize
                      behavior of {@code OTHER} or {@code CENTER_OFFSET} are not resizable.
                      &lt;p&gt;
                      The baseline is calculated based on the preferred height of each
                      of the elements that have a baseline. The baseline is
                      calculated using the following algorithm:{@code max(maxNonBaselineHeight, maxAscent + maxDescent)}, where the{@code maxNonBaselineHeight} is the maximum height of all elements
                      that do not have a baseline, or are not aligned along the baseline.{@code maxAscent} is the maximum ascent (baseline) of all elements that
                      have a baseline and are aligned along the baseline.{@code maxDescent} is the maximum descent (preferred height - baseline)
                      of all elements that have a baseline and are aligned along the baseline.
                      &lt;p&gt;
                      A {@code ParallelGroup} that aligns it&apos;s elements along the baseline
                      is only useful along the vertical axis. If you create a
                      baseline group and use it along the horizontal axis an{@code IllegalStateException} is thrown when you ask{@code GroupLayout} for the minimum, preferred or maximum size or
                      attempt to layout the components.
                      &lt;p&gt;
                      Elements that are not aligned to the baseline and smaller than the size
                      of the {@code ParallelGroup} are positioned in one of three
                      ways: centered, anchored to the leading edge, or anchored to the
                      trailing edge.
                      &lt;h3&gt;Non-baseline {@code ParallelGroup}&lt;/h3&gt;{@code ParallelGroup}s created with an alignment other than{@code BASELINE} align elements that are smaller than the size
                      of the group in one of three ways: centered, anchored to the
                      leading edge, or anchored to the trailing edge.
                      &lt;p&gt;
                      The leading edge is based on the axis and {@codeComponentOrientation}.  For the vertical axis the top edge is
                      always the leading edge, and the bottom edge is always the
                      trailing edge. When the {@code ComponentOrientation} is {@codeLEFT_TO_RIGHT}, the leading edge is the left edge and the
                      trailing edge the right edge. A {@code ComponentOrientation} of{@code RIGHT_TO_LEFT} flips the left and right edges. Child
                      elements are aligned based on the specified alignment the
                      element was added with. If you do not specify an alignment, the
                      alignment specified for the {@code ParallelGroup} is used.
                      &lt;p&gt;
                      To align elements along the baseline you {@code createBaselineGroup},
                      or {@code createParallelGroup} with an alignment of {@code BASELINE}.
                      If the group was not created with a baseline alignment, and you attempt
                      to add an element specifying a baseline alignment, an{@code IllegalArgumentException} is thrown.                    
                    <see>
                        #createParallelGroup()                        
                    </see>
                    <see>
                        #createBaselineGroup(boolean,boolean)                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="childAlignment" type="Alignment" line="1922"/>
                <declaration name="resizable" type="boolean" line="1923"/>
                <method name="ParallelGroup" type="constructor" line="1924">
                    <params>
                        <param name="childAlignment" type="Alignment"/>
                        <param name="resizable" type="boolean"/>
                    </params>
                </method>
                <javadoc line="1928">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addGroup" type="ParallelGroup" line="1931">
                    <params>
                        <param name="group" type="Group"/>
                    </params>
                </method>
                <javadoc line="1934">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addComponent" type="ParallelGroup" line="1937">
                    <params>
                        <param name="component" type="Component"/>
                    </params>
                </method>
                <javadoc line="1940">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addComponent" type="ParallelGroup" line="1943">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <javadoc line="1946">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addGap" type="ParallelGroup" line="1949">
                    <params>
                        <param name="pref" type="int"/>
                    </params>
                </method>
                <javadoc line="1952">
                    {@inheritDoc}                    
                </javadoc>
                <method name="addGap" type="ParallelGroup" line="1955">
                    <params>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <javadoc line="1958">
                    Adds a {@code Group} to this {@code ParallelGroup} with the
                      specified alignment. If the child is smaller than the{@code Group} it is aligned based on the specified
                      alignment.                    
                    <param>
                        alignment the alignment                        
                    </param>
                    <param>
                        group the {@code Group} to add                        
                    </param>
                    <return>
                        this {@code ParallelGroup}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code alignment} is{@code null}                        
                    </throws>
                </javadoc>
                <method name="addGroup" type="ParallelGroup" line="1967">
                    <params>
                        <param name="alignment" type="Alignment"/>
                        <param name="group" type="Group"/>
                    </params>
                </method>
                <javadoc line="1972">
                    Adds a {@code Component} to this {@code ParallelGroup} with
                      the specified alignment.                    
                    <param>
                        alignment the alignment                        
                    </param>
                    <param>
                        component the {@code Component} to add                        
                    </param>
                    <return>
                        this {@code Group}                        
                    </return>
                    <throws>
                        IllegalArgumentException if {@code alignment} is{@code null}                        
                    </throws>
                </javadoc>
                <method name="addComponent" type="ParallelGroup" line="1980">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="alignment" type="Alignment"/>
                    </params>
                </method>
                <javadoc line="1983">
                    Adds a {@code Component} to this {@code ParallelGroup} with the
                      specified alignment and size.                    
                    <param>
                        alignment the alignment                        
                    </param>
                    <param>
                        component the {@code Component} to add                        
                    </param>
                    <param>
                        min the minimum size                        
                    </param>
                    <param>
                        pref the preferred size                        
                    </param>
                    <param>
                        max the maximum size                        
                    </param>
                    <throws>
                        IllegalArgumentException if {@code alignment} is{@code null}                        
                    </throws>
                    <return>
                        this {@code Group}                        
                    </return>
                </javadoc>
                <method name="addComponent" type="ParallelGroup" line="1994">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="alignment" type="Alignment"/>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <declaration name="spring" type="ComponentSpring" line="1996"/>
                </method>
                <method name="isResizable" type="boolean" line="2000"/>
                <method name="operator" type="int" line="2003">
                    <params>
                        <param name="a" type="int"/>
                        <param name="b" type="int"/>
                    </params>
                </method>
                <method name="calculateMinimumSize" type="int" line="2006">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2007"/>
                </method>
                <method name="calculateMaximumSize" type="int" line="2012">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2013"/>
                </method>
                <method name="setValidSize" type="void" line="2018">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="2019"/>
                </method>
                <method name="setChildSize" type="void" line="2023">
                    <params>
                        <param name="spring" type="Spring"/>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <declaration name="alignment" type="Alignment" line="2024"/>
                    <declaration name="springSize" type="int" line="2025"/>
                    <scope line="2026"/>
                </method>
                <method name="insertAutopadding" type="void" line="2041">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="leadingPadding" type="List<AutoPreferredGapSpring>"/>
                        <param name="trailingPadding" type="List<AutoPreferredGapSpring>"/>
                        <param name="leading" type="List<ComponentSpring>"/>
                        <param name="trailing" type="List<ComponentSpring>"/>
                        <param name="insert" type="boolean"/>
                    </params>
                    <scope line="2042">
                        <scope line="2043">
                            <scope line="2044">
                                <scope line="2045"/>
                            </scope>
                        </scope>
                        <scope line="2051"/>
                        <scope line="2054"/>
                    </scope>
                </method>
                <method name="checkChildAlignment" type="void" line="2060">
                    <params>
                        <param name="alignment" type="Alignment"/>
                    </params>
                </method>
                <method name="checkChildAlignment" type="void" line="2063">
                    <params>
                        <param name="alignment" type="Alignment"/>
                        <param name="allowsBaseline" type="boolean"/>
                    </params>
                    <scope line="2064"/>
                    <scope line="2067"/>
                </method>
            </class>
            <class name="BaselineGroup" line="2072">
                <extends class="ParallelGroup"/>
                <javadoc line="2072">
                    An extension of {@code ParallelGroup} that aligns its
                      constituent {@code Spring}s along the baseline.                    
                </javadoc>
                <declaration name="allSpringsHaveBaseline" type="boolean" line="2077"/>
                <declaration name="prefAscent" type="int" line="2078"/>
                <declaration name="prefDescent" type="int" line="2079"/>
                <declaration name="baselineAnchorSet" type="boolean" line="2080"/>
                <declaration name="baselineAnchoredToTop" type="boolean" line="2081"/>
                <declaration name="calcedBaseline" type="boolean" line="2082"/>
                <method name="BaselineGroup" type="constructor" line="2083">
                    <params>
                        <param name="resizable" type="boolean"/>
                    </params>
                </method>
                <method name="BaselineGroup" type="constructor" line="2088">
                    <params>
                        <param name="resizable" type="boolean"/>
                        <param name="baselineAnchoredToTop" type="boolean"/>
                    </params>
                </method>
                <method name="unset" type="void" line="2093"/>
                <method name="setValidSize" type="void" line="2098">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="2100"/>
                    <scope line="2103"/>
                </method>
                <method name="calculateSize" type="int" line="2107">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="type" type="int"/>
                    </params>
                    <scope line="2109"/>
                    <scope line="2112"/>
                    <scope line="2115"/>
                    <scope line="2118"/>
                </method>
                <method name="calculateBaselineAndResizeBehavior" type="void" line="2123">
                    <declaration name="baselineSpringCount" type="int" line="2126"/>
                    <declaration name="resizeBehavior" type="BaselineResizeBehavior" line="2127"/>
                    <scope line="2128">
                        <scope line="2129">
                            <declaration name="baseline" type="int" line="2130"/>
                            <scope line="2131">
                                <scope line="2132">
                                    <declaration name="brb" type="BaselineResizeBehavior" line="2133"/>
                                    <scope line="2134"/>
                                    <scope line="2137"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2147">
                        <scope line="2148"/>
                        <scope line="2151"/>
                    </scope>
                </method>
                <method name="calculateMaxSize" type="int" line="2158">
                    <declaration name="maxAscent" type="int" line="2159"/>
                    <declaration name="maxDescent" type="int" line="2160"/>
                    <declaration name="nonBaselineMax" type="int" line="2161"/>
                    <scope line="2162">
                        <declaration name="baseline" type="int" line="2163"/>
                        <declaration name="springMax" type="int" line="2164"/>
                        <scope line="2165">
                            <declaration name="springPref" type="int" line="2166"/>
                            <scope line="2167">
                                <scope line="2170"/>
                                <scope line="2175"/>
                            </scope>
                        </scope>
                        <scope line="2184"/>
                    </scope>
                </method>
                <method name="calculateMinSize" type="int" line="2190">
                    <declaration name="minAscent" type="int" line="2191"/>
                    <declaration name="minDescent" type="int" line="2192"/>
                    <declaration name="nonBaselineMin" type="int" line="2193"/>
                    <scope line="2194"/>
                    <scope line="2197"/>
                    <scope line="2200">
                        <declaration name="springMin" type="int" line="2201"/>
                        <declaration name="baseline" type="int" line="2202"/>
                        <scope line="2203">
                            <declaration name="springPref" type="int" line="2204"/>
                            <declaration name="brb" type="BaselineResizeBehavior" line="2205"/>
                            <scope line="2208"/>
                            <scope line="2211"/>
                            <scope line="2216"/>
                            <scope line="2219"/>
                        </scope>
                        <scope line="2229"/>
                    </scope>
                </method>
                <javadoc line="2235">
                    Lays out springs that have a baseline along the baseline.  All
                      others are centered.                    
                </javadoc>
                <method name="baselineLayout" type="void" line="2239">
                    <params>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <declaration name="ascent" type="int" line="2240"/>
                    <declaration name="descent" type="int" line="2241"/>
                    <scope line="2242"/>
                    <scope line="2246"/>
                    <scope line="2250">
                        <declaration name="alignment" type="Alignment" line="2251"/>
                        <scope line="2252">
                            <declaration name="baseline" type="int" line="2253"/>
                            <scope line="2254">
                                <declaration name="springMax" type="int" line="2255"/>
                                <declaration name="springPref" type="int" line="2256"/>
                                <declaration name="height" type="int" line="2257"/>
                                <declaration name="y" type="int" line="2258"/>
                            </scope>
                            <scope line="2274"/>
                        </scope>
                        <scope line="2278"/>
                    </scope>
                </method>
                <method name="getBaseline" type="int" line="2283">
                    <scope line="2284"/>
                    <scope line="2288"/>
                </method>
                <method name="getBaselineResizeBehavior" type="BaselineResizeBehavior" line="2293">
                    <scope line="2294"/>
                    <scope line="2297"/>
                </method>
                <method name="checkAxis" type="void" line="2302">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2303"/>
                </method>
            </class>
            <class name="ComponentSpring" line="2308">
                <extends class="Spring"/>
                <declaration name="component" type="Component" line="2309"/>
                <declaration name="origin" type="int" line="2310"/>
                <declaration name="min" type="int" line="2311"/>
                <declaration name="pref" type="int" line="2312"/>
                <declaration name="max" type="int" line="2313"/>
                <declaration name="baseline" type="int" line="2314"/>
                <declaration name="installed" type="boolean" line="2315"/>
                <method name="ComponentSpring" type="constructor" line="2316">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="2318"/>
                </method>
                <method name="calculateMinimumSize" type="int" line="2327">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2328"/>
                </method>
                <method name="calculatePreferredSize" type="int" line="2333">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2334"/>
                    <declaration name="min" type="int" line="2337"/>
                    <declaration name="pref" type="int" line="2338"/>
                    <declaration name="max" type="int" line="2339"/>
                </method>
                <method name="calculateMaximumSize" type="int" line="2342">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2343"/>
                </method>
                <method name="isVisible" type="boolean" line="2348"/>
                <method name="calculateNonlinkedMinimumSize" type="int" line="2351">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2352"/>
                    <scope line="2355"/>
                    <scope line="2358"/>
                </method>
                <method name="calculateNonlinkedPreferredSize" type="int" line="2364">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2365"/>
                    <scope line="2368"/>
                </method>
                <method name="calculateNonlinkedMaximumSize" type="int" line="2374">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2375"/>
                    <scope line="2378"/>
                    <scope line="2381"/>
                </method>
                <method name="getSizeAlongAxis" type="int" line="2387">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="size" type="Dimension"/>
                    </params>
                </method>
                <method name="getLinkSize" type="int" line="2390">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="type" type="int"/>
                    </params>
                    <scope line="2391"/>
                    <declaration name="ci" type="ComponentInfo" line="2394"/>
                </method>
                <method name="setSize" type="void" line="2397">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="origin" type="int"/>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="2400"/>
                </method>
                <method name="getOrigin" type="int" line="2404"/>
                <method name="setComponent" type="void" line="2407">
                    <params>
                        <param name="component" type="Component"/>
                    </params>
                </method>
                <method name="getComponent" type="Component" line="2410"/>
                <method name="getBaseline" type="int" line="2413">
                    <scope line="2414">
                        <declaration name="horizontalSpring" type="Spring" line="2415"/>
                        <declaration name="width" type="int" line="2416"/>
                        <declaration name="height" type="int" line="2417"/>
                        <scope line="2418"/>
                    </scope>
                </method>
                <method name="getBaselineResizeBehavior" type="BaselineResizeBehavior" line="2424"/>
                <method name="isLinked" type="boolean" line="2427">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="installIfNecessary" type="void" line="2430">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2431">
                        <scope line="2433"/>
                        <scope line="2436"/>
                    </scope>
                </method>
                <method name="willHaveZeroSize" type="boolean" line="2441">
                    <params>
                        <param name="treatAutopaddingAsZeroSized" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="PreferredGapSpring" line="2445">
                <extends class="Spring"/>
                <javadoc line="2445">
                    Spring representing the preferred distance between two components.                    
                </javadoc>
                <declaration name="source" type="JComponent" line="2449"/>
                <declaration name="target" type="JComponent" line="2450"/>
                <declaration name="type" type="ComponentPlacement" line="2451"/>
                <declaration name="pref" type="int" line="2452"/>
                <declaration name="max" type="int" line="2453"/>
                <method name="PreferredGapSpring" type="constructor" line="2454">
                    <params>
                        <param name="source" type="JComponent"/>
                        <param name="target" type="JComponent"/>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="calculateMinimumSize" type="int" line="2461">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="calculatePreferredSize" type="int" line="2464">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2465"/>
                    <declaration name="min" type="int" line="2468"/>
                    <declaration name="max" type="int" line="2469"/>
                </method>
                <method name="calculateMaximumSize" type="int" line="2472">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2473"/>
                </method>
                <method name="getPadding" type="int" line="2478">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="position" type="int" line="2479"/>
                    <scope line="2480"/>
                    <scope line="2483"/>
                </method>
                <method name="willHaveZeroSize" type="boolean" line="2488">
                    <params>
                        <param name="treatAutopaddingAsZeroSized" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="GapSpring" line="2492">
                <extends class="Spring"/>
                <javadoc line="2492">
                    Spring represented a certain amount of space.                    
                </javadoc>
                <declaration name="min" type="int" line="2496"/>
                <declaration name="pref" type="int" line="2497"/>
                <declaration name="max" type="int" line="2498"/>
                <method name="GapSpring" type="constructor" line="2499">
                    <params>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="calculateMinimumSize" type="int" line="2505">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2506"/>
                </method>
                <method name="calculatePreferredSize" type="int" line="2511">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="calculateMaximumSize" type="int" line="2514">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2515"/>
                </method>
                <method name="willHaveZeroSize" type="boolean" line="2520">
                    <params>
                        <param name="treatAutopaddingAsZeroSized" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="AutoPreferredGapSpring" line="2524">
                <extends class="Spring"/>
                <javadoc line="2524">
                    Spring reprensenting the distance between any number of sources and
                      targets.  The targets and sources are computed during layout.  An
                      instance of this can either be dynamically created when
                      autocreatePadding is true, or explicitly created by the developer.                    
                </javadoc>
                <declaration name="sources" type="List&lt;ComponentSpring&gt;" line="2531"/>
                <declaration name="source" type="ComponentSpring" line="2532"/>
                <declaration name="matches" type="List&lt;AutoPreferredGapMatch&gt;" line="2533"/>
                <declaration name="size" type="int" line="2534"/>
                <declaration name="lastSize" type="int" line="2535"/>
                <declaration name="pref" type="int" line="2536"/>
                <declaration name="max" type="int" line="2537"/>
                <declaration name="type" type="ComponentPlacement" line="2538"/>
                <declaration name="userCreated" type="boolean" line="2539"/>
                <method name="AutoPreferredGapSpring" type="constructor" line="2540"/>
                <method name="AutoPreferredGapSpring" type="constructor" line="2545">
                    <params>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="AutoPreferredGapSpring" type="constructor" line="2549">
                    <params>
                        <param name="type" type="ComponentPlacement"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="setSource" type="void" line="2555">
                    <params>
                        <param name="source" type="ComponentSpring"/>
                    </params>
                </method>
                <method name="setSources" type="void" line="2558">
                    <params>
                        <param name="sources" type="List<ComponentSpring>"/>
                    </params>
                </method>
                <method name="setUserCreated" type="void" line="2561">
                    <params>
                        <param name="userCreated" type="boolean"/>
                    </params>
                </method>
                <method name="getUserCreated" type="boolean" line="2564"/>
                <method name="unset" type="void" line="2567"/>
                <method name="reset" type="void" line="2572"/>
                <method name="calculatePadding" type="void" line="2578">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="maxPadding" type="int" line="2580"/>
                    <scope line="2581">
                        <declaration name="p" type="LayoutStyle" line="2582"/>
                        <declaration name="position" type="int" line="2583"/>
                        <scope line="2584">
                            <scope line="2585"/>
                            <scope line="2588"/>
                        </scope>
                        <scope line="2592"/>
                        <scope line="2595">
                            <declaration name="match" type="AutoPreferredGapMatch" line="2596"/>
                        </scope>
                    </scope>
                    <scope line="2600"/>
                    <scope line="2603"/>
                    <scope line="2606"/>
                </method>
                <method name="calculatePadding" type="int" line="2610">
                    <params>
                        <param name="p" type="LayoutStyle"/>
                        <param name="position" type="int"/>
                        <param name="source" type="ComponentSpring"/>
                        <param name="target" type="ComponentSpring"/>
                    </params>
                    <declaration name="delta" type="int" line="2611"/>
                    <scope line="2612">
                        <declaration name="padding" type="int" line="2613"/>
                        <scope line="2614"/>
                        <scope line="2617"/>
                        <scope line="2620"/>
                    </scope>
                </method>
                <method name="addTarget" type="void" line="2627">
                    <params>
                        <param name="spring" type="ComponentSpring"/>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="oAxis" type="int" line="2628"/>
                    <scope line="2629">
                        <scope line="2630"/>
                    </scope>
                    <scope line="2634">
                        <declaration name="component" type="Component" line="2635"/>
                        <scope line="2636">
                            <declaration name="source" type="ComponentSpring" line="2637"/>
                            <scope line="2638"/>
                        </scope>
                    </scope>
                </method>
                <method name="addValidTarget" type="void" line="2644">
                    <params>
                        <param name="source" type="ComponentSpring"/>
                        <param name="target" type="ComponentSpring"/>
                    </params>
                    <scope line="2645"/>
                </method>
                <method name="calculateMinimumSize" type="int" line="2650">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="calculatePreferredSize" type="int" line="2653">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2654"/>
                </method>
                <method name="calculateMaximumSize" type="int" line="2659">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2660"/>
                </method>
                <method name="getMatchDescription" type="String" line="2665"/>
                <method name="toString" type="String" line="2668"/>
                <method name="willHaveZeroSize" type="boolean" line="2671">
                    <params>
                        <param name="treatAutopaddingAsZeroSized" type="boolean"/>
                    </params>
                </method>
            </class>
            <class name="AutoPreferredGapMatch" line="2675">
                <javadoc line="2675">
                    Represents two springs that should have autopadding inserted between
                      them.                    
                </javadoc>
                <declaration name="source" type="ComponentSpring" line="2680"/>
                <declaration name="target" type="ComponentSpring" line="2681"/>
                <method name="AutoPreferredGapMatch" type="constructor" line="2682">
                    <params>
                        <param name="source" type="ComponentSpring"/>
                        <param name="target" type="ComponentSpring"/>
                    </params>
                </method>
                <method name="toString" type="String" line="2686">
                    <params>
                        <param name="spring" type="ComponentSpring"/>
                    </params>
                </method>
                <method name="toString" type="String" line="2689"/>
            </class>
            <class name="ContainerAutoPreferredGapSpring" line="2693">
                <extends class="AutoPreferredGapSpring"/>
                <javadoc line="2693">
                    An extension of AutopaddingSpring used for container level padding.                    
                </javadoc>
                <declaration name="targets" type="List&lt;ComponentSpring&gt;" line="2697"/>
                <method name="ContainerAutoPreferredGapSpring" type="constructor" line="2698"/>
                <method name="ContainerAutoPreferredGapSpring" type="constructor" line="2702">
                    <params>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="addTarget" type="void" line="2706">
                    <params>
                        <param name="spring" type="ComponentSpring"/>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2707"/>
                </method>
                <method name="calculatePadding" type="void" line="2712">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="p" type="LayoutStyle" line="2713"/>
                    <declaration name="maxPadding" type="int" line="2714"/>
                    <declaration name="position" type="int" line="2715"/>
                    <scope line="2717">
                        <scope line="2718">
                            <scope line="2719"/>
                            <scope line="2722"/>
                        </scope>
                        <scope line="2726"/>
                        <scope line="2729">
                            <declaration name="targetSpring" type="ComponentSpring" line="2730"/>
                            <declaration name="padding" type="int" line="2731"/>
                            <scope line="2732"/>
                            <scope line="2737"/>
                        </scope>
                    </scope>
                    <scope line="2743">
                        <scope line="2744">
                            <scope line="2745"/>
                            <scope line="2748"/>
                        </scope>
                        <scope line="2752"/>
                        <scope line="2755">
                            <scope line="2756">
                                <declaration name="sourceSpring" type="ComponentSpring" line="2757"/>
                            </scope>
                        </scope>
                        <scope line="2761"/>
                    </scope>
                    <scope line="2765"/>
                </method>
                <method name="updateSize" type="int" line="2769">
                    <params>
                        <param name="p" type="LayoutStyle"/>
                        <param name="sourceSpring" type="ComponentSpring"/>
                        <param name="position" type="int"/>
                    </params>
                    <declaration name="padding" type="int" line="2770"/>
                    <scope line="2771"/>
                    <declaration name="delta" type="int" line="2774"/>
                </method>
                <method name="getMatchDescription" type="String" line="2778">
                    <scope line="2779"/>
                    <scope line="2782"/>
                </method>
            </class>
            <class name="LinkInfo" line="2788">
                <declaration name="axis" type="int" line="2789"/>
                <declaration name="linked" type="List&lt;ComponentInfo&gt;" line="2790"/>
                <declaration name="size" type="int" line="2791"/>
                <method name="LinkInfo" type="constructor" line="2792">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="add" type="void" line="2797">
                    <params>
                        <param name="child" type="ComponentInfo"/>
                    </params>
                    <declaration name="childMaster" type="LinkInfo" line="2798"/>
                    <scope line="2799"/>
                    <scope line="2803">
                        <scope line="2805"/>
                    </scope>
                </method>
                <method name="remove" type="void" line="2811">
                    <params>
                        <param name="info" type="ComponentInfo"/>
                    </params>
                    <scope line="2814"/>
                </method>
                <method name="clearCachedSize" type="void" line="2819"/>
                <method name="getSize" type="int" line="2822">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2823"/>
                </method>
                <method name="calculateLinkedSize" type="int" line="2828">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="size" type="int" line="2829"/>
                    <scope line="2830">
                        <declaration name="spring" type="ComponentSpring" line="2831"/>
                        <scope line="2832"/>
                        <scope line="2835"/>
                    </scope>
                </method>
            </class>
            <class name="ComponentInfo" line="2844">
                <javadoc line="2844">
                    Tracks the horizontal/vertical Springs for a Component.
                      This class is also used to handle Springs that have their sizes
                      linked.                    
                </javadoc>
                <declaration name="component" type="Component" line="2850"/>
                <declaration name="horizontalSpring" type="ComponentSpring" line="2851"/>
                <declaration name="verticalSpring" type="ComponentSpring" line="2852"/>
                <declaration name="horizontalMaster" type="LinkInfo" line="2853"/>
                <declaration name="verticalMaster" type="LinkInfo" line="2854"/>
                <declaration name="visible" type="boolean" line="2855"/>
                <declaration name="honorsVisibility" type="Boolean" line="2856"/>
                <method name="ComponentInfo" type="constructor" line="2857">
                    <params>
                        <param name="component" type="Component"/>
                    </params>
                </method>
                <method name="dispose" type="void" line="2861">
                    <scope line="2866"/>
                    <scope line="2869"/>
                </method>
                <method name="setHonorsVisibility" type="void" line="2873">
                    <params>
                        <param name="honorsVisibility" type="Boolean"/>
                    </params>
                </method>
                <method name="removeSpring" type="void" line="2876">
                    <params>
                        <param name="spring" type="Spring"/>
                    </params>
                    <scope line="2877"/>
                </method>
                <method name="isVisible" type="boolean" line="2881"/>
                <javadoc line="2884">
                    Updates the cached visibility.                    
                    <return>
                        true if the visibility changed                        
                    </return>
                </javadoc>
                <method name="updateVisibility" type="boolean" line="2888">
                    <declaration name="honorsVisibility" type="boolean" line="2889"/>
                    <scope line="2890"/>
                    <scope line="2893"/>
                    <declaration name="newVisible" type="boolean" line="2896"/>
                    <scope line="2897"/>
                </method>
                <method name="setBounds" type="void" line="2903">
                    <params>
                        <param name="insets" type="Insets"/>
                        <param name="parentWidth" type="int"/>
                        <param name="ltr" type="boolean"/>
                    </params>
                    <declaration name="x" type="int" line="2904"/>
                    <declaration name="w" type="int" line="2905"/>
                    <declaration name="y" type="int" line="2906"/>
                    <declaration name="h" type="int" line="2907"/>
                    <scope line="2908"/>
                </method>
                <method name="setComponent" type="void" line="2913">
                    <params>
                        <param name="component" type="Component"/>
                    </params>
                    <scope line="2915"/>
                    <scope line="2918"/>
                </method>
                <method name="getComponent" type="Component" line="2922"/>
                <javadoc line="2925">
                    Returns true if this component has its size linked to
                      other components.                    
                </javadoc>
                <method name="isLinked" type="boolean" line="2929">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="2930"/>
                </method>
                <method name="setLinkInfo" type="void" line="2936">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="linkInfo" type="LinkInfo"/>
                    </params>
                    <scope line="2937"/>
                    <scope line="2940"/>
                </method>
                <method name="getLinkInfo" type="LinkInfo" line="2945">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <method name="getLinkInfo" type="LinkInfo" line="2948">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="create" type="boolean"/>
                    </params>
                    <scope line="2949">
                        <scope line="2950"/>
                    </scope>
                    <scope line="2955">
                        <scope line="2957"/>
                    </scope>
                </method>
                <method name="clearCachedSize" type="void" line="2963">
                    <scope line="2964"/>
                    <scope line="2967"/>
                </method>
                <method name="getLinkSize" type="int" line="2971">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="type" type="int"/>
                    </params>
                    <scope line="2972"/>
                    <scope line="2975"/>
                </method>
            </class>
        </class>
    </source>