<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util.ArrayList"/>
        <import package="java.math.BigDecimal"/>
        <import package="java.math.BigInteger"/>
        <import package="java.util.Date"/>
        <import package="java.util.List"/>
        <import package="java.util.regex.Matcher"/>
        <import package="java.util.regex.Pattern"/>
        <class name="RowFilter" line="9">
            <type_params>
                <type_param name="M"/>
                <type_param name="I"/>
            </type_params>
            <javadoc line="9">
                &lt;code&gt;RowFilter&lt;/code&gt; is used to filter out entries from the
                  model so that they are not shown in the view.  For example, a
                  &lt;code&gt;RowFilter&lt;/code&gt; associated with a &lt;code&gt;JTable&lt;/code&gt; might
                  only allow rows that contain a column with a specific string. The
                  meaning of &lt;em&gt;entry&lt;/em&gt; depends on the component type.
                  For example, when a filter is
                  associated with a &lt;code&gt;JTable&lt;/code&gt;, an entry corresponds to a
                  row; when associated with a &lt;code&gt;JTree&lt;/code&gt;, an entry corresponds
                  to a node.
                  &lt;p&gt;
                  Subclasses must override the &lt;code&gt;include&lt;/code&gt; method to
                  indicate whether the entry should be shown in the
                  view.  The &lt;code&gt;Entry&lt;/code&gt; argument can be used to obtain the values in
                  each of the columns in that entry.  The following example shows an
                  &lt;code&gt;include&lt;/code&gt; method that allows only entries containing one or
                  more values starting with the string &quot;a&quot;:
                  &lt;pre&gt;
                  RowFilter&amp;lt;Object,Object&amp;gt; startsWithAFilter = new RowFilter&amp;lt;Object,Object&amp;gt;() {
                  public boolean include(Entry&amp;lt;? extends Object, ? extends Object&amp;gt; entry) {
                  for (int i = entry.getValueCount() - 1; i &amp;gt;= 0; i--) {
                  if (entry.getStringValue(i).startsWith(&quot;a&quot;)) {
                  // The value starts with &quot;a&quot;, include it
                  return true;
                  }
                  }
                  // None of the columns start with &quot;a&quot;; return false so that this
                  // entry is not shown
                  return false;
                  }
                  };
                  &lt;/pre&gt;
                  &lt;code&gt;RowFilter&lt;/code&gt; has two formal type parameters that allow
                  you to create a &lt;code&gt;RowFilter&lt;/code&gt; for a specific model. For
                  example, the following assumes a specific model that is wrapping
                  objects of type &lt;code&gt;Person&lt;/code&gt;.  Only &lt;code&gt;Person&lt;/code&gt;s
                  with an age over 20 will be shown:
                  &lt;pre&gt;
                  RowFilter&amp;lt;PersonModel,Integer&amp;gt; ageFilter = new RowFilter&amp;lt;PersonModel,Integer&amp;gt;() {
                  public boolean include(Entry&amp;lt;? extends PersonModel, ? extends Integer&amp;gt; entry) {
                  PersonModel personModel = entry.getModel();
                  Person person = personModel.getPerson(entry.getIdentifier());
                  if (person.getAge() &amp;gt; 20) {
                  // Returning true indicates this row should be shown.
                  return true;
                  }
                  // Age is &amp;lt;= 20, don&apos;t show it.
                  return false;
                  }
                  };
                  PersonModel model = createPersonModel();
                  TableRowSorter&amp;lt;PersonModel&amp;gt; sorter = new TableRowSorter&amp;lt;PersonModel&amp;gt;(model);
                  sorter.setRowFilter(ageFilter);
                  &lt;/pre&gt;                
                <param>
                    &lt;M&gt;
                      the type of the model; for example &lt;code&gt;PersonModel&lt;/code&gt;                    
                </param>
                <param>
                    &lt;I&gt;
                      the type of the identifier; when using
                      &lt;code&gt;TableRowSorter&lt;/code&gt; this will be &lt;code&gt;Integer&lt;/code&gt;                    
                </param>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="ComparisonType" type="enum" line="72"/>
            <javadoc line="72">
                Enumeration of the possible comparison values supported by
                  some of the default &lt;code&gt;RowFilter&lt;/code&gt;s.                
                <see>
                    RowFilter                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <scope line="78"/>
            <javadoc line="95">
                Throws an IllegalArgumentException if any of the values in
                  columns are &lt; 0.                
            </javadoc>
            <method name="checkIndices" type="void" line="99">
                <params>
                    <param name="columns" type="int[]"/>
                </params>
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="106">
                Returns a &lt;code&gt;RowFilter&lt;/code&gt; that uses a regular
                  expression to determine which entries to include.  Only entries
                  with at least one matching value are included.  For
                  example, the following creates a &lt;code&gt;RowFilter&lt;/code&gt; that
                  includes entries with at least one value starting with
                  &quot;a&quot;:
                  &lt;pre&gt;
                  RowFilter.regexFilter(&quot;^a&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The returned filter uses {@link java.util.regex.Matcher#find}to test for inclusion.  To test for exact matches use the
                  characters &apos;^&apos; and &apos;$&apos; to match the beginning and end of the
                  string respectively.  For example, &quot;^foo$&quot; includes only rows whose
                  string is exactly &quot;foo&quot; and not, for example, &quot;food&quot;.  See{@link java.util.regex.Pattern} for a complete description of
                  the supported regular-expression constructs.                
                <param>
                    regex the regular expression to filter on                    
                </param>
                <param>
                    indices the indices of the values to check.  If not supplied all
                      values are evaluated                    
                </param>
                <return>
                    a &lt;code&gt;RowFilter&lt;/code&gt; implementing the specified criteria                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;regex&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if any of the &lt;code&gt;indices&lt;/code&gt;
                      are &amp;lt; 0                    
                </throws>
                <throws>
                    PatternSyntaxException if &lt;code&gt;regex&lt;/code&gt; is
                      not a valid regular expression.                    
                </throws>
                <see>
                    java.util.regex.Pattern                    
                </see>
            </javadoc>
            <method name="regexFilter" type="RowFilter&lt;M,I&gt;" line="134">
                <params>
                    <param name="regex" type="String"/>
                    <param name="indices" type="int"/>
                </params>
            </method>
            <javadoc line="137">
                Returns a &lt;code&gt;RowFilter&lt;/code&gt; that includes entries that
                  have at least one &lt;code&gt;Date&lt;/code&gt; value meeting the specified
                  criteria.  For example, the following &lt;code&gt;RowFilter&lt;/code&gt; includes
                  only entries with at least one date value after the current date:
                  &lt;pre&gt;
                  RowFilter.dateFilter(ComparisonType.AFTER, new Date());
                  &lt;/pre&gt;                
                <param>
                    type the type of comparison to perform                    
                </param>
                <param>
                    date the date to compare against                    
                </param>
                <param>
                    indices the indices of the values to check.  If not supplied all
                      values are evaluated                    
                </param>
                <return>
                    a &lt;code&gt;RowFilter&lt;/code&gt; implementing the specified criteria                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;date&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    IllegalArgumentException if any of the &lt;code&gt;indices&lt;/code&gt;
                      are &amp;lt; 0 or &lt;code&gt;type&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    java.util.Calendar                    
                </see>
                <see>
                    java.util.Date                    
                </see>
            </javadoc>
            <method name="dateFilter" type="RowFilter&lt;M,I&gt;" line="158">
                <params>
                    <param name="type" type="ComparisonType"/>
                    <param name="date" type="Date"/>
                    <param name="indices" type="int"/>
                </params>
            </method>
            <javadoc line="161">
                Returns a &lt;code&gt;RowFilter&lt;/code&gt; that includes entries that
                  have at least one &lt;code&gt;Number&lt;/code&gt; value meeting the
                  specified criteria.  For example, the following
                  filter will only include entries with at
                  least one number value equal to 10:
                  &lt;pre&gt;
                  RowFilter.numberFilter(ComparisonType.EQUAL, 10);
                  &lt;/pre&gt;                
                <param>
                    type the type of comparison to perform                    
                </param>
                <param>
                    indices the indices of the values to check.  If not supplied all
                      values are evaluated                    
                </param>
                <return>
                    a &lt;code&gt;RowFilter&lt;/code&gt; implementing the specified criteria                    
                </return>
                <throws>
                    IllegalArgumentException if any of the &lt;code&gt;indices&lt;/code&gt;
                      are &amp;lt; 0, &lt;code&gt;type&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;
                      or &lt;code&gt;number&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="numberFilter" type="RowFilter&lt;M,I&gt;" line="178">
                <params>
                    <param name="type" type="ComparisonType"/>
                    <param name="number" type="Number"/>
                    <param name="indices" type="int"/>
                </params>
            </method>
            <javadoc line="181">
                Returns a &lt;code&gt;RowFilter&lt;/code&gt; that includes entries if any
                  of the supplied filters includes the entry.
                  &lt;p&gt;
                  The following example creates a &lt;code&gt;RowFilter&lt;/code&gt; that will
                  include any entries containing the string &quot;foo&quot; or the string
                  &quot;bar&quot;:
                  &lt;pre&gt;
                  List&amp;lt;RowFilter&amp;lt;Object,Object&amp;gt;&amp;gt; filters = new ArrayList&amp;lt;RowFilter&amp;lt;Object,Object&amp;gt;&amp;gt;(2);
                  filters.add(RowFilter.regexFilter(&quot;foo&quot;));
                  filters.add(RowFilter.regexFilter(&quot;bar&quot;));
                  RowFilter&amp;lt;Object,Object&amp;gt; fooBarFilter = RowFilter.orFilter(filters);
                  &lt;/pre&gt;                
                <param>
                    filters the &lt;code&gt;RowFilter&lt;/code&gt;s to test                    
                </param>
                <throws>
                    IllegalArgumentException if any of the filters
                      are &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;filters&lt;/code&gt; is null                    
                </throws>
                <return>
                    a &lt;code&gt;RowFilter&lt;/code&gt; implementing the specified criteria                    
                </return>
                <see>
                    java.util.Arrays#asList                    
                </see>
            </javadoc>
            <method name="orFilter" type="RowFilter&lt;M,I&gt;" line="201">
                <params>
                    <param name="filters" type="Iterable&lt;? extends RowFilter&lt;? super M,? super I&gt;&gt;"/>
                </params>
            </method>
            <javadoc line="204">
                Returns a &lt;code&gt;RowFilter&lt;/code&gt; that includes entries if all
                  of the supplied filters include the entry.
                  &lt;p&gt;
                  The following example creates a &lt;code&gt;RowFilter&lt;/code&gt; that will
                  include any entries containing the string &quot;foo&quot; and the string
                  &quot;bar&quot;:
                  &lt;pre&gt;
                  List&amp;lt;RowFilter&amp;lt;Object,Object&amp;gt;&amp;gt; filters = new ArrayList&amp;lt;RowFilter&amp;lt;Object,Object&amp;gt;&amp;gt;(2);
                  filters.add(RowFilter.regexFilter(&quot;foo&quot;));
                  filters.add(RowFilter.regexFilter(&quot;bar&quot;));
                  RowFilter&amp;lt;Object,Object&amp;gt; fooBarFilter = RowFilter.andFilter(filters);
                  &lt;/pre&gt;                
                <param>
                    filters the &lt;code&gt;RowFilter&lt;/code&gt;s to test                    
                </param>
                <return>
                    a &lt;code&gt;RowFilter&lt;/code&gt; implementing the specified criteria                    
                </return>
                <throws>
                    IllegalArgumentException if any of the filters
                      are &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <throws>
                    NullPointerException if &lt;code&gt;filters&lt;/code&gt; is null                    
                </throws>
                <see>
                    java.util.Arrays#asList                    
                </see>
            </javadoc>
            <method name="andFilter" type="RowFilter&lt;M,I&gt;" line="224">
                <params>
                    <param name="filters" type="Iterable&lt;? extends RowFilter&lt;? super M,? super I&gt;&gt;"/>
                </params>
            </method>
            <javadoc line="227">
                Returns a &lt;code&gt;RowFilter&lt;/code&gt; that includes entries if the
                  supplied filter does not include the entry.                
                <param>
                    filter the &lt;code&gt;RowFilter&lt;/code&gt; to negate                    
                </param>
                <return>
                    a &lt;code&gt;RowFilter&lt;/code&gt; implementing the specified criteria                    
                </return>
                <throws>
                    IllegalArgumentException if &lt;code&gt;filter&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="notFilter" type="RowFilter&lt;M,I&gt;" line="235">
                <params>
                    <param name="filter" type="RowFilter&lt;M,I&gt;"/>
                </params>
            </method>
            <method name="include" type="boolean" line="238"/>
            <javadoc line="238">
                Returns true if the specified entry should be shown;
                  returns false if the entry should be hidden.
                  &lt;p&gt;
                  The &lt;code&gt;entry&lt;/code&gt; argument is valid only for the duration of
                  the invocation.  Using &lt;code&gt;entry&lt;/code&gt; after the call returns
                  results in undefined behavior.                
                <param>
                    entry a non-&lt;code&gt;null&lt;/code&gt; object that wraps the underlying
                      object from the model                    
                </param>
                <return>
                    true if the entry should be shown                    
                </return>
            </javadoc>
            <class name="Entry" line="250">
                <type_params>
                    <type_param name="M"/>
                    <type_param name="I"/>
                </type_params>
                <javadoc line="250">
                    An &lt;code&gt;Entry&lt;/code&gt; object is passed to instances of
                      &lt;code&gt;RowFilter&lt;/code&gt;, allowing the filter to get the value of the
                      entry&apos;s data, and thus to determine whether the entry should be shown.
                      An &lt;code&gt;Entry&lt;/code&gt; object contains information about the model
                      as well as methods for getting the underlying values from the model.                    
                    <param>
                        &lt;M&gt;
                          the type of the model; for example &lt;code&gt;PersonModel&lt;/code&gt;                        
                    </param>
                    <param>
                        &lt;I&gt;
                          the type of the identifier; when using
                          &lt;code&gt;TableRowSorter&lt;/code&gt; this will be &lt;code&gt;Integer&lt;/code&gt;                        
                    </param>
                    <see>
                        javax.swing.RowFilter                        
                    </see>
                    <see>
                        javax.swing.DefaultRowSorter#setRowFilter(javax.swing.RowFilter)                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <javadoc line="266">
                    Creates an &lt;code&gt;Entry&lt;/code&gt;.                    
                </javadoc>
                <method name="Entry" type="constructor" line="269"/>
                <method name="getModel" type="M" line="271"/>
                <javadoc line="271">
                    Returns the underlying model.                    
                    <return>
                        the model containing the data that this entry represents                        
                    </return>
                </javadoc>
                <method name="getValueCount" type="int" line="276"/>
                <javadoc line="276">
                    Returns the number of values in the entry.  For
                      example, when used with a table this corresponds to the
                      number of columns.                    
                    <return>
                        number of values in the object being filtered                        
                    </return>
                </javadoc>
                <method name="getValue" type="Object" line="283"/>
                <javadoc line="283">
                    Returns the value at the specified index.  This may return
                      &lt;code&gt;null&lt;/code&gt;.  When used with a table, index
                      corresponds to the column number in the model.                    
                    <param>
                        index the index of the value to get                        
                    </param>
                    <return>
                        value at the specified index                        
                    </return>
                    <throws>
                        &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if index &amp;lt; 0 or
                          &amp;gt;= getValueCount                        
                    </throws>
                </javadoc>
                <javadoc line="293">
                    Returns the string value at the specified index.  If
                      filtering is being done based on &lt;code&gt;String&lt;/code&gt; values
                      this method is preferred to that of &lt;code&gt;getValue&lt;/code&gt;
                      as &lt;code&gt;getValue(index).toString()&lt;/code&gt; may return a
                      different result than &lt;code&gt;getStringValue(index)&lt;/code&gt;.
                      &lt;p&gt;
                      This implementation calls &lt;code&gt;getValue(index).toString()&lt;/code&gt;
                      after checking for &lt;code&gt;null&lt;/code&gt;.  Subclasses that provide
                      different string conversion should override this method if
                      necessary.                    
                    <param>
                        index the index of the value to get                        
                    </param>
                    <return>
                        {@code non-null} string at the specified index                        
                    </return>
                    <throws>
                        &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if index &amp;lt; 0 ||
                          &amp;gt;= getValueCount                        
                    </throws>
                </javadoc>
                <method name="getStringValue" type="String" line="309">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="value" type="Object" line="310"/>
                </method>
                <method name="getIdentifier" type="I" line="313"/>
                <javadoc line="313">
                    Returns the identifer (in the model) of the entry.
                      For a table this corresponds to the index of the row in the model,
                      expressed as an &lt;code&gt;Integer&lt;/code&gt;.                    
                    <return>
                        a model-based (not view-based) identifier for
                          this entry                        
                    </return>
                </javadoc>
            </class>
            <class name="GeneralFilter" line="322">
                <extends class="RowFilter">
                    <type_params>
                        <type_param name="Object"/>
                        <type_param name="Object"/>
                    </type_params>
                </extends>
                <declaration name="columns" type="int[]" line="323"/>
                <method name="GeneralFilter" type="constructor" line="324">
                    <params>
                        <param name="columns" type="int[]"/>
                    </params>
                </method>
                <method name="include" type="boolean" line="328">
                    <params>
                        <param name="value" type="Entry&lt;? extends Object,? extends Object&gt;"/>
                    </params>
                    <declaration name="count" type="int" line="329"/>
                    <scope line="330">
                        <scope line="331">
                            <declaration name="index" type="int" line="332"/>
                            <scope line="333">
                                <scope line="334"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="340">
                        <scope line="341">
                            <scope line="342"/>
                        </scope>
                    </scope>
                </method>
                <method name="include" type="boolean" line="349"/>
            </class>
            <class name="RegexFilter" line="351">
                <extends class="GeneralFilter"/>
                <declaration name="matcher" type="Matcher" line="352"/>
                <method name="RegexFilter" type="constructor" line="353">
                    <params>
                        <param name="regex" type="Pattern"/>
                        <param name="columns" type="int[]"/>
                    </params>
                    <scope line="355"/>
                </method>
                <method name="include" type="boolean" line="360">
                    <params>
                        <param name="value" type="Entry&lt;? extends Object,? extends Object&gt;"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
            <class name="DateFilter" line="365">
                <extends class="GeneralFilter"/>
                <declaration name="date" type="long" line="366"/>
                <declaration name="type" type="ComparisonType" line="367"/>
                <method name="DateFilter" type="constructor" line="368">
                    <params>
                        <param name="type" type="ComparisonType"/>
                        <param name="date" type="long"/>
                        <param name="columns" type="int[]"/>
                    </params>
                    <scope line="370"/>
                </method>
                <method name="include" type="boolean" line="376">
                    <params>
                        <param name="value" type="Entry&lt;? extends Object,? extends Object&gt;"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="v" type="Object" line="377"/>
                    <scope line="378">
                        <declaration name="vDate" type="long" line="379"/>
                    </scope>
                </method>
            </class>
            <class name="NumberFilter" line="396">
                <extends class="GeneralFilter"/>
                <declaration name="isComparable" type="boolean" line="397"/>
                <declaration name="number" type="Number" line="398"/>
                <declaration name="type" type="ComparisonType" line="399"/>
                <method name="NumberFilter" type="constructor" line="400">
                    <params>
                        <param name="type" type="ComparisonType"/>
                        <param name="number" type="Number"/>
                        <param name="columns" type="int[]"/>
                    </params>
                    <scope line="402"/>
                </method>
                <method name="include" type="boolean" line="409">
                    <params>
                        <param name="value" type="Entry&lt;? extends Object,? extends Object&gt;"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="v" type="Object" line="410"/>
                    <scope line="411">
                        <declaration name="compared" type="boolean" line="412"/>
                        <declaration name="compareResult" type="int" line="413"/>
                        <declaration name="vClass" type="Class" line="414"/>
                        <scope line="415"/>
                        <scope line="418"/>
                    </scope>
                </method>
                <method name="longCompare" type="int" line="436">
                    <params>
                        <param name="o" type="Number"/>
                    </params>
                    <declaration name="diff" type="long" line="437"/>
                    <scope line="438"/>
                    <scope line="441"/>
                </method>
            </class>
            <class name="OrFilter" line="447">
                <type_params>
                    <type_param name="M"/>
                    <type_param name="I"/>
                </type_params>
                <extends class="RowFilter">
                    <type_params>
                        <type_param name="M"/>
                        <type_param name="I"/>
                    </type_params>
                </extends>
                <declaration name="filters" type="List&amp;lt;RowFilter&amp;lt;? super M,? super I&amp;gt;&amp;gt;" line="448"/>
                <method name="OrFilter" type="constructor" line="449">
                    <params>
                        <param name="filters" type="Iterable&lt;? extends RowFilter&lt;? super M,? super I&gt;&gt;"/>
                    </params>
                    <scope line="451">
                        <scope line="452"/>
                    </scope>
                </method>
                <method name="include" type="boolean" line="458">
                    <params>
                        <param name="value" type="Entry&lt;? extends M,? extends I&gt;"/>
                    </params>
                    <scope line="459">
                        <scope line="460"/>
                    </scope>
                </method>
            </class>
            <class name="AndFilter" line="467">
                <type_params>
                    <type_param name="M"/>
                    <type_param name="I"/>
                </type_params>
                <extends class="OrFilter">
                    <type_params>
                        <type_param name="M"/>
                        <type_param name="I"/>
                    </type_params>
                </extends>
                <method name="AndFilter" type="constructor" line="468">
                    <params>
                        <param name="filters" type="Iterable&lt;? extends RowFilter&lt;? super M,? super I&gt;&gt;"/>
                    </params>
                </method>
                <method name="include" type="boolean" line="471">
                    <params>
                        <param name="value" type="Entry&lt;? extends M,? extends I&gt;"/>
                    </params>
                    <scope line="472">
                        <scope line="473"/>
                    </scope>
                </method>
            </class>
            <class name="NotFilter" line="480">
                <type_params>
                    <type_param name="M"/>
                    <type_param name="I"/>
                </type_params>
                <extends class="RowFilter">
                    <type_params>
                        <type_param name="M"/>
                        <type_param name="I"/>
                    </type_params>
                </extends>
                <declaration name="filter" type="RowFilter&amp;lt;M,I&amp;gt;" line="481"/>
                <method name="NotFilter" type="constructor" line="482">
                    <params>
                        <param name="filter" type="RowFilter&lt;M,I&gt;"/>
                    </params>
                    <scope line="483"/>
                </method>
                <method name="include" type="boolean" line="488">
                    <params>
                        <param name="value" type="Entry&lt;? extends M,? extends I&gt;"/>
                    </params>
                </method>
            </class>
        </class>
    </source>