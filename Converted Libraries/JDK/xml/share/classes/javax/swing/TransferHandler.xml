<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.datatransfer"/>
        <import package="java.awt.dnd"/>
        <import package="java.beans"/>
        <import package="java.lang.reflect"/>
        <import package="java.io"/>
        <import package="java.util.TooManyListenersException"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text.JTextComponent"/>
        <import package="sun.reflect.misc.MethodUtil"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.swing"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.ProtectionDomain"/>
        <import package="sun.misc.SharedSecrets"/>
        <import package="sun.misc.JavaSecurityAccess"/>
        <import package="sun.awt.AWTAccessor"/>
        <class name="TransferHandler" line="55">
            <implements interface="Serializable"/>
            <javadoc line="55">
                This class is used to handle the transfer of a &lt;code&gt;Transferable&lt;/code&gt;
                  to and from Swing components.  The &lt;code&gt;Transferable&lt;/code&gt; is used to
                  represent data that is exchanged via a cut, copy, or paste
                  to/from a clipboard.  It is also used in drag-and-drop operations
                  to represent a drag from a component, and a drop to a component.
                  Swing provides functionality that automatically supports cut, copy,
                  and paste keyboard bindings that use the functionality provided by
                  an implementation of this class.  Swing also provides functionality
                  that automatically supports drag and drop that uses the functionality
                  provided by an implementation of this class.  The Swing developer can
                  concentrate on specifying the semantics of a transfer primarily by setting
                  the &lt;code&gt;transferHandler&lt;/code&gt; property on a Swing component.
                  &lt;p&gt;
                  This class is implemented to provide a default behavior of transferring
                  a component property simply by specifying the name of the property in
                  the constructor.  For example, to transfer the foreground color from
                  one component to another either via the clipboard or a drag and drop operation
                  a &lt;code&gt;TransferHandler&lt;/code&gt; can be constructed with the string &quot;foreground&quot;.  The
                  built in support will use the color returned by &lt;code&gt;getForeground&lt;/code&gt; as the source
                  of the transfer, and &lt;code&gt;setForeground&lt;/code&gt; for the target of a transfer.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html&quot;&gt;
                  How to Use Drag and Drop and Data Transfer&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;, for more information.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Shannon Hickey                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="NONE" type="int" line="90"/>
            <javadoc line="90">
                An &lt;code&gt;int&lt;/code&gt; representing no transfer action.                
            </javadoc>
            <declaration name="COPY" type="int" line="95"/>
            <javadoc line="95">
                An &lt;code&gt;int&lt;/code&gt; representing a &amp;quot;copy&amp;quot; transfer action.
                  This value is used when data is copied to a clipboard
                  or copied elsewhere in a drag and drop operation.                
            </javadoc>
            <declaration name="MOVE" type="int" line="102"/>
            <javadoc line="102">
                An &lt;code&gt;int&lt;/code&gt; representing a &amp;quot;move&amp;quot; transfer action.
                  This value is used when data is moved to a clipboard (i.e. a cut)
                  or moved elsewhere in a drag and drop operation.                
            </javadoc>
            <declaration name="COPY_OR_MOVE" type="int" line="109"/>
            <javadoc line="109">
                An &lt;code&gt;int&lt;/code&gt; representing a source action capability of either
                  &amp;quot;copy&amp;quot; or &amp;quot;move&amp;quot;.                
            </javadoc>
            <declaration name="LINK" type="int" line="115"/>
            <javadoc line="115">
                An &lt;code&gt;int&lt;/code&gt; representing a &amp;quot;link&amp;quot; transfer action.
                  This value is used to specify that data should be linked in a drag
                  and drop operation.                
                <see>
                    java.awt.dnd.DnDConstants#ACTION_LINK                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <interface name="HasGetTransferHandler">
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <javadoc line="125">
                    An interface to tag things with a {@code getTransferHandler} method.                    
                </javadoc>
                <method name="getTransferHandler" type="TransferHandler" line="130"/>
                <javadoc line="130">
                    Returns the {@code TransferHandler}.                    
                    <return>
                        The {@code TransferHandler} or {@code null}                        
                    </return>
                </javadoc>
            </interface>
            <class name="DropLocation" line="137">
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <javadoc line="137">
                    Represents a location where dropped data should be inserted.
                      This is a base class that only encapsulates a point.
                      Components supporting drop may provide subclasses of this
                      containing more information.
                      &lt;p&gt;
                      Developers typically shouldn&apos;t create instances of, or extend, this
                      class. Instead, these are something provided by the DnD
                      implementation by &lt;code&gt;TransferSupport&lt;/code&gt; instances and by
                      components with a &lt;code&gt;getDropLocation()&lt;/code&gt; method.                    
                    <see>
                        javax.swing.TransferHandler.TransferSupport#getDropLocation                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="dropPoint" type="Point" line="152"/>
                <javadoc line="154">
                    Constructs a drop location for the given point.                    
                    <param>
                        dropPoint the drop point, representing the mouse&apos;s
                          current location within the component.                        
                    </param>
                    <throws>
                        IllegalArgumentException if the point
                          is &lt;code&gt;null&lt;/code&gt;                        
                    </throws>
                </javadoc>
                <method name="DropLocation" type="constructor" line="162">
                    <params>
                        <param name="dropPoint" type="Point"/>
                    </params>
                    <scope line="163"/>
                </method>
                <javadoc line="170">
                    Returns the drop point, representing the mouse&apos;s
                      current location within the component.                    
                    <return>
                        the drop point.                        
                    </return>
                </javadoc>
                <method name="getDropPoint" type="Point" line="176"/>
                <javadoc line="180">
                    Returns a string representation of this drop location.
                      This method is intended to be used for debugging purposes,
                      and the content and format of the returned string may vary
                      between implementations.                    
                    <return>
                        a string representation of this drop location                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="188"/>
            </class>
            <class name="TransferSupport" line="193">
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <javadoc line="193">
                    This class encapsulates all relevant details of a clipboard
                      or drag and drop transfer, and also allows for customizing
                      aspects of the drag and drop experience.
                      &lt;p&gt;
                      The main purpose of this class is to provide the information
                      needed by a developer to determine the suitability of a
                      transfer or to import the data contained within. But it also
                      doubles as a controller for customizing properties during drag
                      and drop, such as whether or not to show the drop location,
                      and which drop action to use.
                      &lt;p&gt;
                      Developers typically need not create instances of this
                      class. Instead, they are something provided by the DnD
                      implementation to certain methods in &lt;code&gt;TransferHandler&lt;/code&gt;.                    
                    <see>
                        #canImport(TransferHandler.TransferSupport)                        
                    </see>
                    <see>
                        #importData(TransferHandler.TransferSupport)                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="isDrop" type="boolean" line="214"/>
                <declaration name="component" type="Component" line="215"/>
                <declaration name="showDropLocationIsSet" type="boolean" line="217"/>
                <declaration name="showDropLocation" type="boolean" line="218"/>
                <declaration name="dropAction" type="int" line="220"/>
                <declaration name="source" type="Object" line="222"/>
                <javadoc line="222">
                    The source is a {@code DropTargetDragEvent} or{@code DropTargetDropEvent} for drops,
                      and a {@code Transferable} otherwise                    
                </javadoc>
                <declaration name="dropLocation" type="DropLocation" line="229"/>
                <javadoc line="231">
                    Create a &lt;code&gt;TransferSupport&lt;/code&gt; with &lt;code&gt;isDrop()&lt;/code&gt;
                      &lt;code&gt;true&lt;/code&gt; for the given component, event, and index.                    
                    <param>
                        component the target component                        
                    </param>
                    <param>
                        event a &lt;code&gt;DropTargetEvent&lt;/code&gt;                        
                    </param>
                </javadoc>
                <method name="TransferSupport" type="constructor" line="239">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="event" type="DropTargetEvent"/>
                    </params>
                </method>
                <javadoc line="245">
                    Create a &lt;code&gt;TransferSupport&lt;/code&gt; with &lt;code&gt;isDrop()&lt;/code&gt;
                      &lt;code&gt;false&lt;/code&gt; for the given component and
                      &lt;code&gt;Transferable&lt;/code&gt;.                    
                    <param>
                        component the target component                        
                    </param>
                    <param>
                        transferable the transferable                        
                    </param>
                    <throws>
                        NullPointerException if either parameter
                          is &lt;code&gt;null&lt;/code&gt;                        
                    </throws>
                </javadoc>
                <method name="TransferSupport" type="constructor" line="255">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="transferable" type="Transferable"/>
                    </params>
                    <scope line="256"/>
                    <scope line="260"/>
                </method>
                <javadoc line="269">
                    Allows for a single instance to be reused during DnD.                    
                    <param>
                        component the target component                        
                    </param>
                    <param>
                        event a &lt;code&gt;DropTargetEvent&lt;/code&gt;                        
                    </param>
                </javadoc>
                <method name="setDNDVariables" type="void" line="276">
                    <params>
                        <param name="component" type="Component"/>
                        <param name="event" type="DropTargetEvent"/>
                    </params>
                    <comment line="305">
                        The drop location may be null at this point if the component
                         doesn&apos;t return custom drop locations. In this case, a point-only
                         drop location will be created lazily when requested.                        
                    </comment>
                    <scope line="286"/>
                    <declaration name="p" type="Point" line="293"/>
                    <scope line="297"/>
                    <scope line="300"/>
                </method>
                <javadoc line="311">
                    Returns whether or not this &lt;code&gt;TransferSupport&lt;/code&gt;
                      represents a drop operation.                    
                    <return>
                        &lt;code&gt;true&lt;/code&gt; if this is a drop operation,
                          &lt;code&gt;false&lt;/code&gt; otherwise.                        
                    </return>
                </javadoc>
                <method name="isDrop" type="boolean" line="318"/>
                <javadoc line="322">
                    Returns the target component of this transfer.                    
                    <return>
                        the target component                        
                    </return>
                </javadoc>
                <method name="getComponent" type="Component" line="327"/>
                <javadoc line="331">
                    Checks that this is a drop and throws an{@code IllegalStateException} if it isn&apos;t.                    
                    <throws>
                        IllegalStateException if {@code isDrop} is false.                        
                    </throws>
                </javadoc>
                <method name="assureIsDrop" type="void" line="337">
                    <scope line="338"/>
                </method>
                <javadoc line="343">
                    Returns the current (non-{@code null}) drop location for the component,
                      when this {@code TransferSupport} represents a drop.
                      &lt;p&gt;
                      Note: For components with built-in drop support, this location
                      will be a subclass of {@code DropLocation} of the same type
                      returned by that component&apos;s {@code getDropLocation} method.
                      &lt;p&gt;
                      This method is only for use with drag and drop transfers.
                      Calling it when {@code isDrop()} is {@code false} results
                      in an {@code IllegalStateException}.                    
                    <return>
                        the drop location                        
                    </return>
                    <throws>
                        IllegalStateException if this is not a drop                        
                    </throws>
                    <see>
                        #isDrop()                        
                    </see>
                </javadoc>
                <method name="getDropLocation" type="DropLocation" line="359">
                    <comment line="364">
                        component didn&apos;t give us a custom drop location,
                         so lazily create a point-only location                        
                    </comment>
                    <scope line="362">
                        <declaration name="p" type="Point" line="367"/>
                    </scope>
                </method>
                <javadoc line="377">
                    Sets whether or not the drop location should be visually indicated
                      for the transfer - which must represent a drop. This is applicable to
                      those components that automatically
                      show the drop location when appropriate during a drag and drop
                      operation). By default, the drop location is shown only when the{@code TransferHandler} has said it can accept the import represented
                      by this {@code TransferSupport}. With this method you can force the
                      drop location to always be shown, or always not be shown.
                      &lt;p&gt;
                      This method is only for use with drag and drop transfers.
                      Calling it when {@code isDrop()} is {@code false} results
                      in an {@code IllegalStateException}.                    
                    <param>
                        showDropLocation whether or not to indicate the drop location                        
                    </param>
                    <throws>
                        IllegalStateException if this is not a drop                        
                    </throws>
                    <see>
                        #isDrop()                        
                    </see>
                </javadoc>
                <method name="setShowDropLocation" type="void" line="395">
                    <params>
                        <param name="showDropLocation" type="boolean"/>
                    </params>
                </method>
                <javadoc line="402">
                    Sets the drop action for the transfer - which must represent a drop
                      - to the given action,
                      instead of the default user drop action. The action must be
                      supported by the source&apos;s drop actions, and must be one
                      of {@code COPY}, {@code MOVE} or {@code LINK}.
                      &lt;p&gt;
                      This method is only for use with drag and drop transfers.
                      Calling it when {@code isDrop()} is {@code false} results
                      in an {@code IllegalStateException}.                    
                    <param>
                        dropAction the drop action                        
                    </param>
                    <throws>
                        IllegalStateException if this is not a drop                        
                    </throws>
                    <throws>
                        IllegalArgumentException if an invalid action is specified                        
                    </throws>
                    <see>
                        #getDropAction                        
                    </see>
                    <see>
                        #getUserDropAction                        
                    </see>
                    <see>
                        #getSourceDropActions                        
                    </see>
                    <see>
                        #isDrop()                        
                    </see>
                </javadoc>
                <method name="setDropAction" type="void" line="421">
                    <params>
                        <param name="dropAction" type="int"/>
                    </params>
                    <declaration name="action" type="int" line="424"/>
                    <scope line="426"/>
                </method>
                <javadoc line="433">
                    Returns the action chosen for the drop, when this{@code TransferSupport} represents a drop.
                      &lt;p&gt;
                      Unless explicitly chosen by way of {@code setDropAction},
                      this returns the user drop action provided by{@code getUserDropAction}.
                      &lt;p&gt;
                      You may wish to query this in {@code TransferHandler}&apos;s{@code importData} method to customize processing based
                      on the action.
                      &lt;p&gt;
                      This method is only for use with drag and drop transfers.
                      Calling it when {@code isDrop()} is {@code false} results
                      in an {@code IllegalStateException}.                    
                    <return>
                        the action chosen for the drop                        
                    </return>
                    <throws>
                        IllegalStateException if this is not a drop                        
                    </throws>
                    <see>
                        #setDropAction                        
                    </see>
                    <see>
                        #getUserDropAction                        
                    </see>
                    <see>
                        #isDrop()                        
                    </see>
                </javadoc>
                <method name="getDropAction" type="int" line="455"/>
                <javadoc line="459">
                    Returns the user drop action for the drop, when this{@code TransferSupport} represents a drop.
                      &lt;p&gt;
                      The user drop action is chosen for a drop as described in the
                      documentation for {@link java.awt.dnd.DropTargetDragEvent} and{@link java.awt.dnd.DropTargetDropEvent}. A different action
                      may be chosen as the drop action by way of the {@code setDropAction}method.
                      &lt;p&gt;
                      You may wish to query this in {@code TransferHandler}&apos;s{@code canImport} method when determining the suitability of a
                      drop or when deciding on a drop action to explicitly choose.
                      &lt;p&gt;
                      This method is only for use with drag and drop transfers.
                      Calling it when {@code isDrop()} is {@code false} results
                      in an {@code IllegalStateException}.                    
                    <return>
                        the user drop action                        
                    </return>
                    <throws>
                        IllegalStateException if this is not a drop                        
                    </throws>
                    <see>
                        #setDropAction                        
                    </see>
                    <see>
                        #getDropAction                        
                    </see>
                    <see>
                        #isDrop()                        
                    </see>
                </javadoc>
                <method name="getUserDropAction" type="int" line="483"/>
                <javadoc line="491">
                    Returns the drag source&apos;s supported drop actions, when this{@code TransferSupport} represents a drop.
                      &lt;p&gt;
                      The source actions represent the set of actions supported by the
                      source of this transfer, and are represented as some bitwise-OR
                      combination of {@code COPY}, {@code MOVE} and {@code LINK}.
                      You may wish to query this in {@code TransferHandler}&apos;s{@code canImport} method when determining the suitability of a drop
                      or when deciding on a drop action to explicitly choose. To determine
                      if a particular action is supported by the source, bitwise-AND
                      the action with the source drop actions, and then compare the result
                      against the original action. For example:
                      &lt;pre&gt;
                      boolean copySupported = (COPY &amp; getSourceDropActions()) == COPY;
                      &lt;/pre&gt;
                      &lt;p&gt;
                      This method is only for use with drag and drop transfers.
                      Calling it when {@code isDrop()} is {@code false} results
                      in an {@code IllegalStateException}.                    
                    <return>
                        the drag source&apos;s supported drop actions                        
                    </return>
                    <throws>
                        IllegalStateException if this is not a drop                        
                    </throws>
                    <see>
                        #isDrop()                        
                    </see>
                </javadoc>
                <method name="getSourceDropActions" type="int" line="516"/>
                <javadoc line="524">
                    Returns the data flavors for this transfer.                    
                    <return>
                        the data flavors for this transfer                        
                    </return>
                </javadoc>
                <method name="getDataFlavors" type="DataFlavor[]" line="529">
                    <scope line="530">
                        <scope line="531"/>
                        <scope line="533"/>
                    </scope>
                </method>
                <javadoc line="541">
                    Returns whether or not the given data flavor is supported.                    
                    <param>
                        df the &lt;code&gt;DataFlavor&lt;/code&gt; to test                        
                    </param>
                    <return>
                        whether or not the given flavor is supported.                        
                    </return>
                </javadoc>
                <method name="isDataFlavorSupported" type="boolean" line="547">
                    <params>
                        <param name="df" type="DataFlavor"/>
                    </params>
                    <scope line="548">
                        <scope line="549"/>
                        <scope line="551"/>
                    </scope>
                </method>
                <javadoc line="559">
                    Returns the &lt;code&gt;Transferable&lt;/code&gt; associated with this transfer.
                      &lt;p&gt;
                      Note: Unless it is necessary to fetch the &lt;code&gt;Transferable&lt;/code&gt;
                      directly, use one of the other methods on this class to inquire about
                      the transfer. This may perform better than fetching the
                      &lt;code&gt;Transferable&lt;/code&gt; and asking it directly.                    
                    <return>
                        the &lt;code&gt;Transferable&lt;/code&gt; associated with this transfer                        
                    </return>
                </javadoc>
                <method name="getTransferable" type="Transferable" line="569">
                    <scope line="570">
                        <scope line="571"/>
                        <scope line="573"/>
                    </scope>
                </method>
            </class>
            <javadoc line="583">
                Returns an {@code Action} that performs cut operations to the
                  clipboard. When performed, this action operates on the {@code JComponent}source of the {@code ActionEvent} by invoking {@code exportToClipboard},
                  with a {@code MOVE} action, on the component&apos;s {@code TransferHandler}.                
                <return>
                    an {@code Action} for performing cuts to the clipboard                    
                </return>
            </javadoc>
            <method name="getCutAction" type="Action" line="591"/>
            <javadoc line="595">
                Returns an {@code Action} that performs copy operations to the
                  clipboard. When performed, this action operates on the {@code JComponent}source of the {@code ActionEvent} by invoking {@code exportToClipboard},
                  with a {@code COPY} action, on the component&apos;s {@code TransferHandler}.                
                <return>
                    an {@code Action} for performing copies to the clipboard                    
                </return>
            </javadoc>
            <method name="getCopyAction" type="Action" line="603"/>
            <javadoc line="607">
                Returns an {@code Action} that performs paste operations from the
                  clipboard. When performed, this action operates on the {@code JComponent}source of the {@code ActionEvent} by invoking {@code importData},
                  with the clipboard contents, on the component&apos;s {@code TransferHandler}.                
                <return>
                    an {@code Action} for performing pastes from the clipboard                    
                </return>
            </javadoc>
            <method name="getPasteAction" type="Action" line="615"/>
            <javadoc line="620">
                Constructs a transfer handler that can transfer a Java Bean property
                  from one component to another via the clipboard or a drag and drop
                  operation.                
                <param>
                    property  the name of the property to transfer; this can
                      be &lt;code&gt;null&lt;/code&gt; if there is no property associated with the transfer
                      handler (a subclass that performs some other kind of transfer, for example)                    
                </param>
            </javadoc>
            <method name="TransferHandler" type="constructor" line="629">
                <params>
                    <param name="property" type="String"/>
                </params>
            </method>
            <javadoc line="633">
                Convenience constructor for subclasses.                
            </javadoc>
            <method name="TransferHandler" type="constructor" line="636"/>
            <declaration name="dragImage" type="Image" line="641"/>
            <javadoc line="641">
                image for the {@code startDrag} method                
                <see>
                    java.awt.dnd.DragGestureEvent#startDrag(Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl)                    
                </see>
            </javadoc>
            <declaration name="dragImageOffset" type="Point" line="648"/>
            <javadoc line="648">
                anchor offset for the {@code startDrag} method                
                <see>
                    java.awt.dnd.DragGestureEvent#startDrag(Cursor dragCursor,Image dragImage,Point imageOffset,Transferable transferable,DragSourceListener dsl)                    
                </see>
            </javadoc>
            <javadoc line="655">
                Sets the drag image parameter. The image has to be prepared
                  for rendering by the moment of the call. The image is stored
                  by reference because of some performance reasons.                
                <param>
                    img an image to drag                    
                </param>
            </javadoc>
            <method name="setDragImage" type="void" line="662">
                <params>
                    <param name="img" type="Image"/>
                </params>
            </method>
            <javadoc line="666">
                Returns the drag image. If there is no image to drag,
                  the returned value is {@code null}.                
                <return>
                    the reference to the drag image                    
                </return>
            </javadoc>
            <method name="getDragImage" type="Image" line="672"/>
            <javadoc line="676">
                Sets an anchor offset for the image to drag.
                  It can not be {@code null}.                
                <param>
                    p a {@code Point} object that corresponds
                      to coordinates of an anchor offset of the image
                      relative to the upper left corner of the image                    
                </param>
            </javadoc>
            <method name="setDragImageOffset" type="void" line="684">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="688">
                Returns an anchor offset for the image to drag.                
                <return>
                    a {@code Point} object that corresponds
                      to coordinates of an anchor offset of the image
                      relative to the upper left corner of the image.
                      The point {@code (0,0)} returns by default.                    
                </return>
            </javadoc>
            <method name="getDragImageOffset" type="Point" line="696">
                <scope line="697"/>
            </method>
            <javadoc line="703">
                Causes the Swing drag support to be initiated.  This is called by
                  the various UI implementations in the &lt;code&gt;javax.swing.plaf.basic&lt;/code&gt;
                  package if the dragEnabled property is set on the component.
                  This can be called by custom UI
                  implementations to use the Swing drag support.  This method can also be called
                  by a Swing extension written as a subclass of &lt;code&gt;JComponent&lt;/code&gt;
                  to take advantage of the Swing drag support.
                  &lt;p&gt;
                  The transfer &lt;em&gt;will not necessarily&lt;/em&gt; have been completed at the
                  return of this call (i.e. the call does not block waiting for the drop).
                  The transfer will take place through the Swing implementation of the
                  &lt;code&gt;java.awt.dnd&lt;/code&gt; mechanism, requiring no further effort
                  from the developer. The &lt;code&gt;exportDone&lt;/code&gt; method will be called
                  when the transfer has completed.                
                <param>
                    comp  the component holding the data to be transferred;
                      provided to enable sharing of &lt;code&gt;TransferHandler&lt;/code&gt;s                    
                </param>
                <param>
                    e     the event that triggered the transfer                    
                </param>
                <param>
                    action the transfer action initially requested;
                      either {@code COPY}, {@code MOVE} or {@code LINK};
                      the DnD system may change the action used during the
                      course of the drag operation                    
                </param>
            </javadoc>
            <method name="exportAsDrag" type="void" line="727">
                <params>
                    <param name="comp" type="JComponent"/>
                    <param name="e" type="InputEvent"/>
                    <param name="action" type="int"/>
                </params>
                <comment line="731">
                    only mouse events supported for drag operations                    
                </comment>
                <comment line="733">
                    only support known actions                    
                </comment>
                <comment line="735">
                    only support valid source actions                    
                </comment>
                <declaration name="srcActions" type="int" line="728"/>
                <scope line="735"/>
                <scope line="740">
                    <scope line="741"/>
                </scope>
                <scope line="745"/>
            </method>
            <javadoc line="750">
                Causes a transfer from the given component to the
                  given clipboard.  This method is called by the default cut and
                  copy actions registered in a component&apos;s action map.
                  &lt;p&gt;
                  The transfer will take place using the &lt;code&gt;java.awt.datatransfer&lt;/code&gt;
                  mechanism, requiring no further effort from the developer. Any data
                  transfer &lt;em&gt;will&lt;/em&gt; be complete and the &lt;code&gt;exportDone&lt;/code&gt;
                  method will be called with the action that occurred, before this method
                  returns. Should the clipboard be unavailable when attempting to place
                  data on it, the &lt;code&gt;IllegalStateException&lt;/code&gt; thrown by{@link Clipboard#setContents(Transferable,ClipboardOwner)} will
                  be propogated through this method. However,
                  &lt;code&gt;exportDone&lt;/code&gt; will first be called with an action
                  of &lt;code&gt;NONE&lt;/code&gt; for consistency.                
                <param>
                    comp  the component holding the data to be transferred;
                      provided to enable sharing of &lt;code&gt;TransferHandler&lt;/code&gt;s                    
                </param>
                <param>
                    clip  the clipboard to transfer the data into                    
                </param>
                <param>
                    action the transfer action requested; this should
                      be a value of either &lt;code&gt;COPY&lt;/code&gt; or &lt;code&gt;MOVE&lt;/code&gt;;
                      the operation performed is the intersection  of the transfer
                      capabilities given by getSourceActions and the requested action;
                      the intersection may result in an action of &lt;code&gt;NONE&lt;/code&gt;
                      if the requested action isn&apos;t supported                    
                </param>
                <throws>
                    IllegalStateException if the clipboard is currently unavailable                    
                </throws>
                <see>
                    Clipboard#setContents(Transferable,ClipboardOwner)                    
                </see>
            </javadoc>
            <method name="exportToClipboard" type="void" line="779">
                <params>
                    <param name="comp" type="JComponent"/>
                    <param name="clip" type="Clipboard"/>
                    <param name="action" type="int"/>
                </params>
                <scope line="782">
                    <declaration name="t" type="Transferable" line="784"/>
                    <scope line="785">
                        <scope line="786"/>
                        <scope line="790"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="800">
                Causes a transfer to occur from a clipboard or a drag and
                  drop operation. The &lt;code&gt;Transferable&lt;/code&gt; to be
                  imported and the component to transfer to are contained
                  within the &lt;code&gt;TransferSupport&lt;/code&gt;.
                  &lt;p&gt;
                  While the drag and drop implementation calls {@code canImport}to determine the suitability of a transfer before calling this
                  method, the implementation of paste does not. As such, it cannot
                  be assumed that the transfer is acceptable upon a call to
                  this method for paste. It is recommended that {@code canImport} be
                  explicitly called to cover this case.
                  &lt;p&gt;
                  Note: The &lt;code&gt;TransferSupport&lt;/code&gt; object passed to this method
                  is only valid for the duration of the method call. It is undefined
                  what values it may contain after this method returns.                
                <param>
                    support the object containing the details of
                      the transfer, not &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    true if the data was inserted into the component,
                      false otherwise                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;support&lt;/code&gt; is {@code null}                    
                </throws>
                <see>
                    #canImport(TransferHandler.TransferSupport)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="importData" type="boolean" line="825">
                <params>
                    <param name="support" type="TransferSupport"/>
                </params>
            </method>
            <javadoc line="831">
                Causes a transfer to a component from a clipboard or a
                  DND drop operation.  The &lt;code&gt;Transferable&lt;/code&gt; represents
                  the data to be imported into the component.
                  &lt;p&gt;
                  Note: Swing now calls the newer version of &lt;code&gt;importData&lt;/code&gt;
                  that takes a &lt;code&gt;TransferSupport&lt;/code&gt;, which in turn calls this
                  method (if the component in the {@code TransferSupport} is a{@code JComponent}). Developers are encouraged to call and override the
                  newer version as it provides more information (and is the only
                  version that supports use with a {@code TransferHandler} set directly
                  on a {@code JFrame} or other non-{@code JComponent}).                
                <param>
                    comp  the component to receive the transfer;
                      provided to enable sharing of &lt;code&gt;TransferHandler&lt;/code&gt;s                    
                </param>
                <param>
                    t     the data to import                    
                </param>
                <return>
                    true if the data was inserted into the component, false otherwise                    
                </return>
                <see>
                    #importData(TransferHandler.TransferSupport)                    
                </see>
            </javadoc>
            <method name="importData" type="boolean" line="850">
                <params>
                    <param name="comp" type="JComponent"/>
                    <param name="t" type="Transferable"/>
                </params>
                <comment line="856">
                    read-only property. ignore                    
                </comment>
                <comment line="861">
                    zero or more than one argument, ignore                    
                </comment>
                <comment line="873">
                    invocation code                    
                </comment>
                <declaration name="prop" type="PropertyDescriptor" line="851"/>
                <scope line="852">
                    <declaration name="writer" type="Method" line="853"/>
                    <scope line="854"/>
                    <declaration name="params" type="Class&lt;?&gt;[]" line="858"/>
                    <scope line="859"/>
                    <declaration name="flavor" type="DataFlavor" line="863"/>
                    <scope line="864">
                        <scope line="865">
                            <declaration name="value" type="Object" line="866"/>
                            <declaration name="args" type="Object[]" line="867"/>
                        </scope>
                        <scope line="870"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="879">
                This method is called repeatedly during a drag and drop operation
                  to allow the developer to configure properties of, and to return
                  the acceptability of transfers; with a return value of {@code true}indicating that the transfer represented by the given{@code TransferSupport} (which contains all of the details of the
                  transfer) is acceptable at the current time, and a value of {@code false}rejecting the transfer.
                  &lt;p&gt;
                  For those components that automatically display a drop location during
                  drag and drop, accepting the transfer, by default, tells them to show
                  the drop location. This can be changed by calling{@code setShowDropLocation} on the {@code TransferSupport}.
                  &lt;p&gt;
                  By default, when the transfer is accepted, the chosen drop action is that
                  picked by the user via their drag gesture. The developer can override
                  this and choose a different action, from the supported source
                  actions, by calling {@code setDropAction} on the {@code TransferSupport}.
                  &lt;p&gt;
                  On every call to {@code canImport}, the {@code TransferSupport} contains
                  fresh state. As such, any properties set on it must be set on every
                  call. Upon a drop, {@code canImport} is called one final time before
                  calling into {@code importData}. Any state set on the{@code TransferSupport} during that last call will be available in{@code importData}.
                  &lt;p&gt;
                  This method is not called internally in response to paste operations.
                  As such, it is recommended that implementations of {@code importData}explicitly call this method for such cases and that this method
                  be prepared to return the suitability of paste operations as well.
                  &lt;p&gt;
                  Note: The &lt;code&gt;TransferSupport&lt;/code&gt; object passed to this method
                  is only valid for the duration of the method call. It is undefined
                  what values it may contain after this method returns.                
                <param>
                    support the object containing the details of
                      the transfer, not &lt;code&gt;null&lt;/code&gt;.                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the import can happen,
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
                <throws>
                    NullPointerException if &lt;code&gt;support&lt;/code&gt; is {@code null}                    
                </throws>
                <see>
                    #importData(TransferHandler.TransferSupport)                    
                </see>
                <see>
                    javax.swing.TransferHandler.TransferSupport#setShowDropLocation                    
                </see>
                <see>
                    javax.swing.TransferHandler.TransferSupport#setDropAction                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="canImport" type="boolean" line="924">
                <params>
                    <param name="support" type="TransferSupport"/>
                </params>
            </method>
            <javadoc line="930">
                Indicates whether a component will accept an import of the given
                  set of data flavors prior to actually attempting to import it.
                  &lt;p&gt;
                  Note: Swing now calls the newer version of &lt;code&gt;canImport&lt;/code&gt;
                  that takes a &lt;code&gt;TransferSupport&lt;/code&gt;, which in turn calls this
                  method (only if the component in the {@code TransferSupport} is a{@code JComponent}). Developers are encouraged to call and override the
                  newer version as it provides more information (and is the only
                  version that supports use with a {@code TransferHandler} set directly
                  on a {@code JFrame} or other non-{@code JComponent}).                
                <param>
                    comp  the component to receive the transfer;
                      provided to enable sharing of &lt;code&gt;TransferHandler&lt;/code&gt;s                    
                </param>
                <param>
                    transferFlavors  the data formats available                    
                </param>
                <return>
                    true if the data can be inserted into the component, false otherwise                    
                </return>
                <see>
                    #canImport(TransferHandler.TransferSupport)                    
                </see>
            </javadoc>
            <method name="canImport" type="boolean" line="948">
                <params>
                    <param name="comp" type="JComponent"/>
                    <param name="transferFlavors" type="DataFlavor[]"/>
                </params>
                <comment line="954">
                    read-only property. ignore                    
                </comment>
                <comment line="959">
                    zero or more than one argument, ignore                    
                </comment>
                <declaration name="prop" type="PropertyDescriptor" line="949"/>
                <scope line="950">
                    <declaration name="writer" type="Method" line="951"/>
                    <scope line="952"/>
                    <declaration name="params" type="Class&lt;?&gt;[]" line="956"/>
                    <scope line="957"/>
                    <declaration name="flavor" type="DataFlavor" line="961"/>
                    <scope line="962"/>
                </scope>
            </method>
            <javadoc line="969">
                Returns the type of transfer actions supported by the source;
                  any bitwise-OR combination of {@code COPY}, {@code MOVE}and {@code LINK}.
                  &lt;p&gt;
                  Some models are not mutable, so a transfer operation of {@code MOVE}should not be advertised in that case. Returning {@code NONE}disables transfers from the component.                
                <param>
                    c  the component holding the data to be transferred;
                      provided to enable sharing of &lt;code&gt;TransferHandler&lt;/code&gt;s                    
                </param>
                <return>
                    {@code COPY} if the transfer property can be found,
                      otherwise returns &lt;code&gt;NONE&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getSourceActions" type="int" line="983">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="prop" type="PropertyDescriptor" line="984"/>
                <scope line="985"/>
            </method>
            <javadoc line="991">
                Returns an object that establishes the look of a transfer.  This is
                  useful for both providing feedback while performing a drag operation and for
                  representing the transfer in a clipboard implementation that has a visual
                  appearance.  The implementation of the &lt;code&gt;Icon&lt;/code&gt; interface should
                  not alter the graphics clip or alpha level.
                  The icon implementation need not be rectangular or paint all of the
                  bounding rectangle and logic that calls the icons paint method should
                  not assume the all bits are painted. &lt;code&gt;null&lt;/code&gt; is a valid return value
                  for this method and indicates there is no visual representation provided.
                  In that case, the calling logic is free to represent the
                  transferable however it wants.
                  &lt;p&gt;
                  The default Swing logic will not do an alpha blended drag animation if
                  the return is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    t  the data to be transferred; this value is expected to have been
                      created by the &lt;code&gt;createTransferable&lt;/code&gt; method                    
                </param>
                <return>
                    &lt;code&gt;null&lt;/code&gt;, indicating
                      there is no default visual representation                    
                </return>
            </javadoc>
            <method name="getVisualRepresentation" type="Icon" line="1012">
                <params>
                    <param name="t" type="Transferable"/>
                </params>
            </method>
            <javadoc line="1016">
                Creates a &lt;code&gt;Transferable&lt;/code&gt; to use as the source for
                  a data transfer. Returns the representation of the data to
                  be transferred, or &lt;code&gt;null&lt;/code&gt; if the component&apos;s
                  property is &lt;code&gt;null&lt;/code&gt;                
                <param>
                    c  the component holding the data to be transferred;
                      provided to enable sharing of &lt;code&gt;TransferHandler&lt;/code&gt;s                    
                </param>
                <return>
                    the representation of the data to be transferred, or
                      &lt;code&gt;null&lt;/code&gt; if the property associated with &lt;code&gt;c&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createTransferable" type="Transferable" line="1029">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <declaration name="property" type="PropertyDescriptor" line="1030"/>
                <scope line="1031"/>
            </method>
            <javadoc line="1037">
                Invoked after data has been exported.  This method should remove
                  the data that was transferred if the action was &lt;code&gt;MOVE&lt;/code&gt;.
                  &lt;p&gt;
                  This method is implemented to do nothing since &lt;code&gt;MOVE&lt;/code&gt;
                  is not a supported action of this implementation
                  (&lt;code&gt;getSourceActions&lt;/code&gt; does not include &lt;code&gt;MOVE&lt;/code&gt;).                
                <param>
                    source the component that was the source of the data                    
                </param>
                <param>
                    data   The data that was transferred or possibly null
                      if the action is &lt;code&gt;NONE&lt;/code&gt;.                    
                </param>
                <param>
                    action the actual action that was performed                    
                </param>
            </javadoc>
            <method name="exportDone" type="void" line="1050">
                <params>
                    <param name="source" type="JComponent"/>
                    <param name="data" type="Transferable"/>
                    <param name="action" type="int"/>
                </params>
            </method>
            <javadoc line="1053">
                Fetches the property descriptor for the property assigned to this transfer
                  handler on the given component (transfer handler may be shared).  This
                  returns &lt;code&gt;null&lt;/code&gt; if the property descriptor can&apos;t be found
                  or there is an error attempting to fetch the property descriptor.                
            </javadoc>
            <method name="getPropertyDescriptor" type="PropertyDescriptor" line="1059">
                <params>
                    <param name="comp" type="JComponent"/>
                </params>
                <comment line="1080">
                    found the desired descriptor                    
                </comment>
                <scope line="1060"/>
                <declaration name="k" type="Class&lt;?&gt;" line="1063"/>
                <declaration name="bi" type="BeanInfo" line="1064"/>
                <scope line="1065"/>
                <scope line="1067"/>
                <declaration name="props" type="PropertyDescriptor" line="1070"/>
                <scope line="1071">
                    <scope line="1072">
                        <declaration name="reader" type="Method" line="1073"/>
                        <scope line="1075">
                            <declaration name="params" type="Class&lt;?&gt;[]" line="1076"/>
                            <scope line="1078"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1088">
                Fetches the data flavor from the array of possible flavors that
                  has data of the type represented by property type.  Null is
                  returned if there is no match.                
            </javadoc>
            <method name="getPropertyDataFlavor" type="DataFlavor" line="1093">
                <params>
                    <param name="k" type="Class<?>"/>
                    <param name="flavors" type="DataFlavor[]"/>
                </params>
                <scope line="1094">
                    <declaration name="flavor" type="DataFlavor" line="1095"/>
                    <scope line="1098"/>
                </scope>
            </method>
            <declaration name="propertyName" type="String" line="1107"/>
            <declaration name="recognizer" type="SwingDragGestureRecognizer" line="1108"/>
            <method name="getDropTargetListener" type="DropTargetListener" line="1110">
                <scope line="1111">
                    <declaration name="handler" type="DropHandler" line="1112"/>
                    <scope line="1115"/>
                </scope>
            </method>
            <class name="PropertyTransferable" line="1124">
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <implements interface="Transferable"/>
                <method name="PropertyTransferable" type="constructor" line="1126">
                    <params>
                        <param name="p" type="PropertyDescriptor"/>
                        <param name="c" type="JComponent"/>
                    </params>
                </method>
                <javadoc line="1133">
                    Returns an array of &lt;code&gt;DataFlavor&lt;/code&gt; objects indicating the flavors the data
                      can be provided in.  The array should be ordered according to preference
                      for providing the data (from most richly descriptive to least descriptive).                    
                    <return>
                        an array of data flavors in which this data can be transferred                        
                    </return>
                </javadoc>
                <method name="getTransferDataFlavors" type="DataFlavor[]" line="1139">
                    <declaration name="flavors" type="DataFlavor[]" line="1140"/>
                    <declaration name="propertyType" type="Class&lt;?&gt;" line="1141"/>
                    <declaration name="mimeType" type="String" line="1142"/>
                    <scope line="1143"/>
                    <scope line="1145"/>
                </method>
                <javadoc line="1151">
                    Returns whether the specified data flavor is supported for
                      this object.                    
                    <param>
                        flavor the requested flavor for the data                        
                    </param>
                    <return>
                        true if this &lt;code&gt;DataFlavor&lt;/code&gt; is supported,
                          otherwise false                        
                    </return>
                </javadoc>
                <method name="isDataFlavorSupported" type="boolean" line="1158">
                    <params>
                        <param name="flavor" type="DataFlavor"/>
                    </params>
                    <declaration name="propertyType" type="Class&lt;?&gt;" line="1159"/>
                    <scope line="1162"/>
                </method>
                <javadoc line="1169">
                    Returns an object which represents the data to be transferred.  The class
                      of the object returned is defined by the representation class of the flavor.                    
                    <param>
                        flavor the requested flavor for the data                        
                    </param>
                    <see>
                        DataFlavor#getRepresentationClass                        
                    </see>
                    <exception>
                        IOException                if the data is no longer available
                          in the requested flavor.                        
                    </exception>
                    <exception>
                        UnsupportedFlavorException if the requested data flavor is
                          not supported.                        
                    </exception>
                </javadoc>
                <method name="getTransferData" type="Object" line="1180">
                    <params>
                        <param name="flavor" type="DataFlavor"/>
                    </params>
                    <scope line="1181"/>
                    <declaration name="reader" type="Method" line="1184"/>
                    <declaration name="value" type="Object" line="1185"/>
                    <scope line="1186"/>
                    <scope line="1188"/>
                </method>
                <declaration name="component" type="JComponent" line="1194"/>
                <declaration name="property" type="PropertyDescriptor" line="1195"/>
            </class>
            <class name="SwingDropTarget" line="1198">
                <extends class="DropTarget"/>
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <implements interface="UIResource"/>
                <javadoc line="1198">
                    This is the default drop target for drag and drop operations if
                      one isn&apos;t provided by the developer.  &lt;code&gt;DropTarget&lt;/code&gt;
                      only supports one &lt;code&gt;DropTargetListener&lt;/code&gt; and doesn&apos;t
                      function properly if it isn&apos;t set.
                      This class sets the one listener as the linkage of drop handling
                      to the &lt;code&gt;TransferHandler&lt;/code&gt;, and adds support for
                      additional listeners which some of the &lt;code&gt;ComponentUI&lt;/code&gt;
                      implementations install to manipulate a drop insertion location.                    
                </javadoc>
                <method name="SwingDropTarget" type="constructor" line="1210">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                    <comment line="1214">
                        addDropTargetListener is overridden
                         we specifically need to add to the superclass                        
                    </comment>
                    <scope line="1212"/>
                    <scope line="1216"/>
                </method>
                <method name="addDropTargetListener" type="void" line="1219">
                    <params>
                        <param name="dtl" type="DropTargetListener"/>
                    </params>
                    <comment line="1221">
                        Since the super class only supports one DropTargetListener,
                         and we add one from the constructor, we always add to the
                         extended list.                        
                    </comment>
                    <scope line="1223"/>
                </method>
                <method name="removeDropTargetListener" type="void" line="1229">
                    <params>
                        <param name="dtl" type="DropTargetListener"/>
                    </params>
                    <scope line="1230"/>
                </method>
                <method name="dragEnter" type="void" line="1237">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <scope line="1239">
                        <declaration name="listeners" type="Object[]" line="1240"/>
                        <scope line="1241">
                            <scope line="1242"/>
                        </scope>
                    </scope>
                </method>
                <method name="dragOver" type="void" line="1249">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <scope line="1251">
                        <declaration name="listeners" type="Object[]" line="1252"/>
                        <scope line="1253">
                            <scope line="1254"/>
                        </scope>
                    </scope>
                </method>
                <method name="dragExit" type="void" line="1261">
                    <params>
                        <param name="e" type="DropTargetEvent"/>
                    </params>
                    <scope line="1263">
                        <declaration name="listeners" type="Object[]" line="1264"/>
                        <scope line="1265">
                            <scope line="1266"/>
                        </scope>
                    </scope>
                </method>
                <method name="drop" type="void" line="1273">
                    <params>
                        <param name="e" type="DropTargetDropEvent"/>
                    </params>
                    <scope line="1275">
                        <declaration name="listeners" type="Object[]" line="1276"/>
                        <scope line="1277">
                            <scope line="1278"/>
                        </scope>
                    </scope>
                </method>
                <method name="dropActionChanged" type="void" line="1285">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <scope line="1287">
                        <declaration name="listeners" type="Object[]" line="1288"/>
                        <scope line="1289">
                            <scope line="1290"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="listenerList" type="EventListenerList" line="1297"/>
            </class>
            <class name="DropHandler" line="1300">
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <implements interface="DropTargetListener"/>
                <implements interface="Serializable"/>
                <implements interface="ActionListener"/>
                <declaration name="timer" type="Timer" line="1304"/>
                <declaration name="lastPosition" type="Point" line="1305"/>
                <declaration name="outer" type="Rectangle" line="1306"/>
                <declaration name="inner" type="Rectangle" line="1307"/>
                <declaration name="hysteresis" type="int" line="1308"/>
                <declaration name="component" type="Component" line="1310"/>
                <declaration name="state" type="Object" line="1311"/>
                <declaration name="support" type="TransferSupport" line="1312"/>
                <declaration name="AUTOSCROLL_INSET" type="int" line="1315"/>
                <javadoc line="1317">
                    Update the geometry of the autoscroll region.  The geometry is
                      maintained as a pair of rectangles.  The region can cause
                      a scroll if the pointer sits inside it for the duration of the
                      timer.  The region that causes the timer countdown is the area
                      between the two rectangles.
                      &lt;p&gt;
                      This is implemented to use the visible area of the component
                      as the outer rectangle, and the insets are fixed at 10. Should
                      the component be smaller than a total of 20 in any direction,
                      autoscroll will not occur in that direction.                    
                </javadoc>
                <method name="updateAutoscrollRegion" type="void" line="1329">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                    <comment line="1331">
                        compute the outer                        
                    </comment>
                    <comment line="1335">
                        compute the insets                        
                    </comment>
                    <comment line="1349">
                        set the inner from the insets                        
                    </comment>
                    <declaration name="visible" type="Rectangle" line="1331"/>
                    <declaration name="i" type="Insets" line="1335"/>
                    <scope line="1336">
                        <declaration name="minSize" type="int" line="1337"/>
                        <scope line="1339"/>
                        <scope line="1343"/>
                    </scope>
                </method>
                <javadoc line="1355">
                    Perform an autoscroll operation.  This is implemented to scroll by the
                      unit increment of the Scrollable using scrollRectToVisible.  If the
                      cursor is in a corner of the autoscroll region, more than one axis will
                      scroll.                    
                </javadoc>
                <method name="autoscroll" type="void" line="1361">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="pos" type="Point"/>
                    </params>
                    <comment line="1366">
                        scroll upward                        
                    </comment>
                    <comment line="1371">
                        scroll downard                        
                    </comment>
                    <comment line="1378">
                        scroll left                        
                    </comment>
                    <comment line="1383">
                        scroll right                        
                    </comment>
                    <scope line="1362">
                        <declaration name="s" type="Scrollable" line="1363"/>
                        <scope line="1364">
                            <declaration name="dy" type="int" line="1366"/>
                            <declaration name="r" type="Rectangle" line="1367"/>
                        </scope>
                        <scope line="1369">
                            <declaration name="dy" type="int" line="1371"/>
                            <declaration name="r" type="Rectangle" line="1372"/>
                        </scope>
                        <scope line="1376">
                            <declaration name="dx" type="int" line="1378"/>
                            <declaration name="r" type="Rectangle" line="1379"/>
                        </scope>
                        <scope line="1381">
                            <declaration name="dx" type="int" line="1383"/>
                            <declaration name="r" type="Rectangle" line="1384"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1390">
                    Initializes the internal properties if they haven&apos;t been already
                      inited. This is done lazily to avoid loading of desktop properties.                    
                </javadoc>
                <method name="initPropertiesIfNecessary" type="void" line="1394">
                    <scope line="1395">
                        <declaration name="t" type="Toolkit" line="1396"/>
                        <declaration name="prop" type="Integer" line="1397"/>
                        <scope line="1412"/>
                    </scope>
                </method>
                <javadoc line="1418">
                    The timer fired, perform autoscroll if the pointer is within the
                      autoscroll region.
                      &lt;P&gt;                    
                    <param>
                        e the &lt;code&gt;ActionEvent&lt;/code&gt;                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="1424">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="1426"/>
                </method>
                <method name="setComponentDropLocation" type="void" line="1434">
                    <params>
                        <param name="support" type="TransferSupport"/>
                        <param name="forDrop" type="boolean"/>
                    </params>
                    <declaration name="dropLocation" type="DropLocation" line="1436"/>
                    <scope line="1440"/>
                    <scope line="1443"/>
                </method>
                <method name="handleDrag" type="void" line="1448">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <declaration name="importer" type="TransferHandler" line="1449"/>
                    <scope line="1452"/>
                    <declaration name="canImport" type="boolean" line="1459"/>
                    <scope line="1461"/>
                    <scope line="1463"/>
                    <declaration name="showLocation" type="boolean" line="1467"/>
                </method>
                <method name="dragEnter" type="void" line="1474">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <scope line="1480"/>
                </method>
                <method name="dragOver" type="void" line="1487">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <comment line="1499">
                        no autoscroll                        
                    </comment>
                    <scope line="1490"/>
                    <declaration name="p" type="Point" line="1494"/>
                    <scope line="1497"/>
                    <scope line="1500"/>
                </method>
                <method name="dragExit" type="void" line="1507">
                    <params>
                        <param name="e" type="DropTargetEvent"/>
                    </params>
                </method>
                <method name="drop" type="void" line="1511">
                    <params>
                        <param name="e" type="DropTargetDropEvent"/>
                    </params>
                    <declaration name="importer" type="TransferHandler" line="1512"/>
                    <scope line="1515"/>
                    <declaration name="canImport" type="boolean" line="1522"/>
                    <scope line="1524">
                        <declaration name="showLocation" type="boolean" line="1527"/>
                        <declaration name="success" type="boolean" line="1533"/>
                        <scope line="1535"/>
                        <scope line="1537"/>
                    </scope>
                    <scope line="1543"/>
                </method>
                <method name="dropActionChanged" type="void" line="1549">
                    <params>
                        <param name="e" type="DropTargetDragEvent"/>
                    </params>
                    <comment line="1551">
                        Work-around for Linux bug where dropActionChanged
                         is called before dragEnter.                        
                    </comment>
                    <scope line="1554"/>
                </method>
                <method name="cleanup" type="void" line="1561">
                    <params>
                        <param name="forDrop" type="boolean"/>
                    </params>
                    <scope line="1563"/>
                    <scope line="1567"/>
                </method>
            </class>
            <class name="DragHandler" line="1577">
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <implements interface="DragGestureListener"/>
                <implements interface="DragSourceListener"/>
                <javadoc line="1577">
                    This is the default drag handler for drag and drop operations that
                      use the &lt;code&gt;TransferHandler&lt;/code&gt;.                    
                </javadoc>
                <declaration name="scrolls" type="boolean" line="1583"/>
                <javadoc line="1587">
                    a Drag gesture has been recognized                    
                </javadoc>
                <method name="dragGestureRecognized" type="void" line="1590">
                    <params>
                        <param name="dge" type="DragGestureEvent"/>
                    </params>
                    <declaration name="c" type="JComponent" line="1591"/>
                    <declaration name="th" type="TransferHandler" line="1592"/>
                    <declaration name="t" type="Transferable" line="1593"/>
                    <scope line="1594">
                        <scope line="1597">
                            <declaration name="im" type="Image" line="1598"/>
                            <scope line="1599"/>
                            <scope line="1601"/>
                        </scope>
                        <scope line="1605"/>
                    </scope>
                </method>
                <javadoc line="1615">
                    as the hotspot enters a platform dependent drop site                    
                </javadoc>
                <method name="dragEnter" type="void" line="1618">
                    <params>
                        <param name="dsde" type="DragSourceDragEvent"/>
                    </params>
                </method>
                <javadoc line="1621">
                    as the hotspot moves over a platform dependent drop site                    
                </javadoc>
                <method name="dragOver" type="void" line="1624">
                    <params>
                        <param name="dsde" type="DragSourceDragEvent"/>
                    </params>
                </method>
                <javadoc line="1627">
                    as the hotspot exits a platform dependent drop site                    
                </javadoc>
                <method name="dragExit" type="void" line="1630">
                    <params>
                        <param name="dsde" type="DragSourceEvent"/>
                    </params>
                </method>
                <javadoc line="1633">
                    as the operation completes                    
                </javadoc>
                <method name="dragDropEnd" type="void" line="1636">
                    <params>
                        <param name="dsde" type="DragSourceDropEvent"/>
                    </params>
                    <declaration name="dsc" type="DragSourceContext" line="1637"/>
                    <declaration name="c" type="JComponent" line="1638"/>
                    <scope line="1639"/>
                    <scope line="1641"/>
                </method>
                <method name="dropActionChanged" type="void" line="1647">
                    <params>
                        <param name="dsde" type="DragSourceDragEvent"/>
                    </params>
                </method>
            </class>
            <class name="SwingDragGestureRecognizer" line="1651">
                <extends class="DragGestureRecognizer"/>
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <method name="SwingDragGestureRecognizer" type="constructor" line="1653">
                    <params>
                        <param name="dgl" type="DragGestureListener"/>
                    </params>
                </method>
                <method name="gestured" type="void" line="1657">
                    <params>
                        <param name="c" type="JComponent"/>
                        <param name="e" type="MouseEvent"/>
                        <param name="srcActions" type="int"/>
                        <param name="action" type="int"/>
                    </params>
                </method>
                <javadoc line="1664">
                    register this DragGestureRecognizer&apos;s Listeners with the Component                    
                </javadoc>
                <method name="registerListeners" type="void" line="1667"/>
                <javadoc line="1670">
                    unregister this DragGestureRecognizer&apos;s Listeners with the Component
                      subclasses must override this method                    
                </javadoc>
                <method name="unregisterListeners" type="void" line="1675"/>
            </class>
            <declaration name="cutAction" type="Action" line="1680"/>
            <declaration name="copyAction" type="Action" line="1681"/>
            <declaration name="pasteAction" type="Action" line="1682"/>
            <class name="TransferAction" line="1684">
                <extends class="UIAction"/>
                <comment line="1132">
                    --- Transferable methods ----------------------------------------------                    
                </comment>
                <comment line="1236">
                    --- DropTargetListener methods (multicast) --------------------------                    
                </comment>
                <comment line="1432">
                    --- DropTargetListener methods -----------------------------------                    
                </comment>
                <comment line="1586">
                    --- DragGestureListener methods -----------------------------------                    
                </comment>
                <comment line="1614">
                    --- DragSourceListener methods -----------------------------------                    
                </comment>
                <implements interface="UIResource"/>
                <method name="TransferAction" type="constructor" line="1686">
                    <params>
                        <param name="name" type="String"/>
                    </params>
                </method>
                <method name="isEnabled" type="boolean" line="1690">
                    <params>
                        <param name="sender" type="Object"/>
                    </params>
                    <scope line="1692"/>
                </method>
                <declaration name="javaSecurityAccess" type="JavaSecurityAccess" line="1699"/>
                <method name="actionPerformed" type="void" line="1702">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <declaration name="src" type="Object" line="1703"/>
                    <anonymous_class line="1705">
                        <method name="run" type="Void" line="1706"/>
                    </anonymous_class>
                    <declaration name="action" type="PrivilegedAction&lt;Void&gt;" line="1705"/>
                    <declaration name="stack" type="AccessControlContext" line="1712"/>
                    <declaration name="srcAcc" type="AccessControlContext" line="1713"/>
                    <declaration name="eventAcc" type="AccessControlContext" line="1714"/>
                    <scope line="1716"/>
                    <scope line="1718">
                        <anonymous_class line="1720">
                            <method name="run" type="Void" line="1721"/>
                        </anonymous_class>
                    </scope>
                </method>
                <method name="actionPerformedImpl" type="void" line="1729">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <comment line="1740">
                        any of these calls may throw IllegalStateException                        
                    </comment>
                    <comment line="1752">
                        clipboard was unavailable                        
                    </comment>
                    <comment line="1757">
                        this is a paste action, import data into the component                        
                    </comment>
                    <declaration name="src" type="Object" line="1730"/>
                    <scope line="1731">
                        <declaration name="c" type="JComponent" line="1732"/>
                        <declaration name="th" type="TransferHandler" line="1733"/>
                        <declaration name="clipboard" type="Clipboard" line="1734"/>
                        <declaration name="name" type="String" line="1735"/>
                        <declaration name="trans" type="Transferable" line="1737"/>
                        <scope line="1740">
                            <scope line="1741">
                                <scope line="1742"/>
                                <scope line="1744"/>
                                <scope line="1746"/>
                            </scope>
                        </scope>
                        <scope line="1750"/>
                        <scope line="1757"/>
                    </scope>
                </method>
                <javadoc line="1763">
                    Returns the clipboard to use for cut/copy/paste.                    
                </javadoc>
                <method name="getClipboard" type="Clipboard" line="1766">
                    <params>
                        <param name="c" type="JComponent"/>
                    </params>
                    <scope line="1767"/>
                    <declaration name="clipboard" type="Clipboard" line="1770"/>
                    <scope line="1772"/>
                </method>
                <declaration name="SandboxClipboardKey" type="Object" line="1780"/>
                <javadoc line="1780">
                    Key used in app context to lookup Clipboard to use if access to
                      System clipboard is denied.                    
                </javadoc>
            </class>
        </class>
    </source>