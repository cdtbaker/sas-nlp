<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util.Comparator"/>
        <import package="java.util.LinkedList"/>
        <import package="java.util.ListIterator"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.ComponentOrientation"/>
        <import package="java.awt.Window"/>
        <class name="LayoutComparator" line="35">
            <implements interface="Comparator">
                <type_params>
                    <type_param name="Component"/>
                </type_params>
            </implements>
            <implements interface="java.io.Serializable"/>
            <javadoc line="35">
                Comparator which attempts to sort Components based on their size and
                  position. Code adapted from original javax.swing.DefaultFocusManager
                  implementation.                
                <author>
                    David Mendenhall                    
                </author>
            </javadoc>
            <declaration name="ROW_TOLERANCE" type="int" line="44"/>
            <declaration name="horizontal" type="boolean" line="46"/>
            <declaration name="leftToRight" type="boolean" line="47"/>
            <method name="setComponentOrientation" type="void" line="49">
                <params>
                    <param name="orientation" type="ComponentOrientation"/>
                </params>
            </method>
            <method name="compare" type="int" line="54">
                <params>
                    <param name="a" type="Component"/>
                    <param name="b" type="Component"/>
                </params>
                <comment line="59">
                    Row/Column algorithm only applies to siblings. If &apos;a&apos; and &apos;b&apos;                    
                </comment>
                <comment line="60">
                    aren&apos;t siblings, then we need to find their most inferior                    
                </comment>
                <comment line="61">
                    ancestors which share a parent. Compute the ancestory lists for                    
                </comment>
                <comment line="62">
                    each Component and then search from the Window down until the                    
                </comment>
                <comment line="63">
                    hierarchy branches.                    
                </comment>
                <comment line="74">
                    &apos;a&apos; is not part of a Window hierarchy. Can&apos;t cope.                    
                </comment>
                <comment line="87">
                    &apos;b&apos; is not part of a Window hierarchy. Can&apos;t cope.                    
                </comment>
                <comment line="97">
                    a is an ancestor of b                    
                </comment>
                <comment line="104">
                    b is an ancestor of a                    
                </comment>
                <comment line="120">
                    LT - Western Europe (optional for Japanese, Chinese, Korean)                    
                </comment>
                <comment line="127">
                    !leftToRight                    
                </comment>
                <comment line="129">
                    RT - Middle East (Arabic, Hebrew)                    
                </comment>
                <comment line="137">
                    !horizontal                    
                </comment>
                <comment line="140">
                    TL - Mongolian                    
                </comment>
                <comment line="147">
                    !leftToRight                    
                </comment>
                <comment line="149">
                    TR - Japanese, Chinese, Korean                    
                </comment>
                <scope line="55"/>
                <scope line="64">
                    <declaration name="aAncestory" type="LinkedList&lt;Component&gt;" line="65"/>
                    <scope line="67">
                        <scope line="69"/>
                    </scope>
                    <scope line="73"/>
                    <declaration name="bAncestory" type="LinkedList&lt;Component&gt;" line="78"/>
                    <scope line="80">
                        <scope line="82"/>
                    </scope>
                    <scope line="86"/>
                    <scope line="93">
                        <scope line="94"/>
                        <scope line="96"/>
                        <scope line="101"/>
                        <scope line="103"/>
                        <scope line="108"/>
                    </scope>
                </scope>
                <declaration name="ax" type="int" line="114"/>
                <declaration name="zOrder" type="int" line="116"/>
                <scope line="117">
                    <scope line="118">
                        <scope line="122"/>
                        <scope line="124"/>
                    </scope>
                    <scope line="127">
                        <scope line="131"/>
                        <scope line="133"/>
                    </scope>
                </scope>
                <scope line="137">
                    <scope line="138">
                        <scope line="142"/>
                        <scope line="144"/>
                    </scope>
                    <scope line="147">
                        <scope line="151"/>
                        <scope line="153"/>
                    </scope>
                </scope>
            </method>
        </class>
    </source>