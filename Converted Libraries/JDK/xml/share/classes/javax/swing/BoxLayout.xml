<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.PrintStream"/>
        <class name="BoxLayout" line="34">
            <implements interface="LayoutManager2"/>
            <implements interface="Serializable"/>
            <javadoc line="34">
                A layout manager that allows multiple components to be laid out either
                  vertically or horizontally. The components will not wrap so, for
                  example, a vertical arrangement of components will stay vertically
                  arranged when the frame is resized.
                  &lt;TABLE ALIGN=&quot;RIGHT&quot; BORDER=&quot;0&quot; SUMMARY=&quot;layout&quot;&gt;
                  &lt;TR&gt;
                  &lt;TD ALIGN=&quot;CENTER&quot;&gt;
                  &lt;P ALIGN=&quot;CENTER&quot;&gt;&lt;IMG SRC=&quot;doc-files/BoxLayout-1.gif&quot;
                  alt=&quot;The following text describes this graphic.&quot;
                  WIDTH=&quot;191&quot; HEIGHT=&quot;201&quot; ALIGN=&quot;BOTTOM&quot; BORDER=&quot;0&quot;&gt;
                  &lt;/TD&gt;
                  &lt;/TR&gt;
                  &lt;/TABLE&gt;
                  &lt;p&gt;
                  Nesting multiple panels with different combinations of horizontal and
                  vertical gives an effect similar to GridBagLayout, without the
                  complexity. The diagram shows two panels arranged horizontally, each
                  of which contains 3 components arranged vertically.
                  &lt;p&gt; The BoxLayout manager is constructed with an axis parameter that
                  specifies the type of layout that will be done. There are four choices:
                  &lt;blockquote&gt;&lt;b&gt;&lt;tt&gt;X_AXIS&lt;/tt&gt;&lt;/b&gt; - Components are laid out horizontally
                  from left to right.&lt;/blockquote&gt;
                  &lt;blockquote&gt;&lt;b&gt;&lt;tt&gt;Y_AXIS&lt;/tt&gt;&lt;/b&gt; - Components are laid out vertically
                  from top to bottom.&lt;/blockquote&gt;
                  &lt;blockquote&gt;&lt;b&gt;&lt;tt&gt;LINE_AXIS&lt;/tt&gt;&lt;/b&gt; - Components are laid out the way
                  words are laid out in a line, based on the container&apos;s
                  &lt;tt&gt;ComponentOrientation&lt;/tt&gt; property. If the container&apos;s
                  &lt;tt&gt;ComponentOrientation&lt;/tt&gt; is horizontal then components are laid out
                  horizontally, otherwise they are laid out vertically.  For horizontal
                  orientations, if the container&apos;s &lt;tt&gt;ComponentOrientation&lt;/tt&gt; is left to
                  right then components are laid out left to right, otherwise they are laid
                  out right to left. For vertical orientations components are always laid out
                  from top to bottom.&lt;/blockquote&gt;
                  &lt;blockquote&gt;&lt;b&gt;&lt;tt&gt;PAGE_AXIS&lt;/tt&gt;&lt;/b&gt; - Components are laid out the way
                  text lines are laid out on a page, based on the container&apos;s
                  &lt;tt&gt;ComponentOrientation&lt;/tt&gt; property. If the container&apos;s
                  &lt;tt&gt;ComponentOrientation&lt;/tt&gt; is horizontal then components are laid out
                  vertically, otherwise they are laid out horizontally.  For horizontal
                  orientations, if the container&apos;s &lt;tt&gt;ComponentOrientation&lt;/tt&gt; is left to
                  right then components are laid out left to right, otherwise they are laid
                  out right to left.&amp;nbsp; For vertical orientations components are always
                  laid out from top to bottom.&lt;/blockquote&gt;
                  &lt;p&gt;
                  For all directions, components are arranged in the same order as they were
                  added to the container.
                  &lt;p&gt;
                  BoxLayout attempts to arrange components
                  at their preferred widths (for horizontal layout)
                  or heights (for vertical layout).
                  For a horizontal layout,
                  if not all the components are the same height,
                  BoxLayout attempts to make all the components
                  as high as the highest component.
                  If that&apos;s not possible for a particular component,
                  then BoxLayout aligns that component vertically,
                  according to the component&apos;s Y alignment.
                  By default, a component has a Y alignment of 0.5,
                  which means that the vertical center of the component
                  should have the same Y coordinate as
                  the vertical centers of other components with 0.5 Y alignment.
                  &lt;p&gt;
                  Similarly, for a vertical layout,
                  BoxLayout attempts to make all components in the column
                  as wide as the widest component.
                  If that fails, it aligns them horizontally
                  according to their X alignments.  For &lt;code&gt;PAGE_AXIS&lt;/code&gt; layout,
                  horizontal alignment is done based on the leading edge of the component.
                  In other words, an X alignment value of 0.0 means the left edge of a
                  component if the container&apos;s &lt;code&gt;ComponentOrientation&lt;/code&gt; is left to
                  right and it means the right edge of the component otherwise.
                  &lt;p&gt;
                  Instead of using BoxLayout directly, many programs use the Box class.
                  The Box class is a lightweight container that uses a BoxLayout.
                  It also provides handy methods to help you use BoxLayout well.
                  Adding components to multiple nested boxes is a powerful way to get
                  the arrangement you want.
                  &lt;p&gt;
                  For further information and examples see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/layout/box.html&quot;&gt;How to Use BoxLayout&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    Box                    
                </see>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <see>
                    JComponent#getAlignmentX                    
                </see>
                <see>
                    JComponent#getAlignmentY                    
                </see>
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="X_AXIS" type="int" line="140"/>
            <javadoc line="140">
                Specifies that components should be laid out left to right.                
            </javadoc>
            <declaration name="Y_AXIS" type="int" line="145"/>
            <javadoc line="145">
                Specifies that components should be laid out top to bottom.                
            </javadoc>
            <declaration name="LINE_AXIS" type="int" line="150"/>
            <javadoc line="150">
                Specifies that components should be laid out in the direction of
                  a line of text as determined by the target container&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; property.                
            </javadoc>
            <declaration name="PAGE_AXIS" type="int" line="157"/>
            <javadoc line="157">
                Specifies that components should be laid out in the direction that
                  lines flow across a page as determined by the target container&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; property.                
            </javadoc>
            <javadoc line="164">
                Creates a layout manager that will lay out components along the
                  given axis.                
                <param>
                    target  the container that needs to be laid out                    
                </param>
                <param>
                    axis  the axis to lay out components along. Can be one of:
                      <code>BoxLayout.X_AXIS</code>,
                      <code>BoxLayout.Y_AXIS</code>,
                      <code>BoxLayout.LINE_AXIS</code> or
                      <code>BoxLayout.PAGE_AXIS</code>                    
                </param>
                <exception>
                    AWTError  if the value of <code>axis</code> is invalid                    
                </exception>
            </javadoc>
            <method name="BoxLayout" type="constructor" line="178">
                <params>
                    <param name="target" type="Container"/>
                    <param name="axis" type="int"/>
                </params>
                <scope line="180"/>
            </method>
            <javadoc line="187">
                Constructs a BoxLayout that
                  produces debugging messages.                
                <param>
                    target  the container that needs to be laid out                    
                </param>
                <param>
                    axis  the axis to lay out components along. Can be one of:
                      <code>BoxLayout.X_AXIS</code>,
                      <code>BoxLayout.Y_AXIS</code>,
                      <code>BoxLayout.LINE_AXIS</code> or
                      <code>BoxLayout.PAGE_AXIS</code>                    
                </param>
                <param>
                    dbg  the stream to which debugging messages should be sent,
                      null if none                    
                </param>
            </javadoc>
            <method name="BoxLayout" type="constructor" line="201">
                <params>
                    <param name="target" type="Container"/>
                    <param name="axis" type="int"/>
                    <param name="dbg" type="PrintStream"/>
                </params>
            </method>
            <javadoc line="206">
                Returns the container that uses this layout manager.                
                <return>
                    the container that uses this layout manager                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTarget" type="Container" line="213"/>
            <javadoc line="217">
                Returns the axis that was used to lay out components.
                  Returns one of:
                  &lt;code&gt;BoxLayout.X_AXIS&lt;/code&gt;,
                  &lt;code&gt;BoxLayout.Y_AXIS&lt;/code&gt;,
                  &lt;code&gt;BoxLayout.LINE_AXIS&lt;/code&gt; or
                  &lt;code&gt;BoxLayout.PAGE_AXIS&lt;/code&gt;                
                <return>
                    the axis that was used to lay out components                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getAxis" type="int" line="229"/>
            <javadoc line="233">
                Indicates that a child has changed its layout related information,
                  and thus any cached calculations should be flushed.
                  &lt;p&gt;
                  This method is called by AWT when the invalidate method is called
                  on the Container.  Since the invalidate method may be called
                  asynchronously to the event thread, this method may be called
                  asynchronously.                
                <param>
                    target  the affected container                    
                </param>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
            </javadoc>
            <method name="invalidateLayout" type="void" line="247">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="255">
                Not used by this class.                
                <param>
                    name the name of the component                    
                </param>
                <param>
                    comp the component                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="261">
                <params>
                    <param name="name" type="String"/>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="265">
                Not used by this class.                
                <param>
                    comp the component                    
                </param>
            </javadoc>
            <method name="removeLayoutComponent" type="void" line="270">
                <params>
                    <param name="comp" type="Component"/>
                </params>
            </method>
            <javadoc line="274">
                Not used by this class.                
                <param>
                    comp the component                    
                </param>
                <param>
                    constraints constraints                    
                </param>
            </javadoc>
            <method name="addLayoutComponent" type="void" line="280">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                </params>
            </method>
            <javadoc line="284">
                Returns the preferred dimensions for this layout, given the components
                  in the specified target container.                
                <param>
                    target  the container that needs to be laid out                    
                </param>
                <return>
                    the dimensions >= 0 && <= Integer.MAX_VALUE                    
                </return>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
                <see>
                    Container                    
                </see>
                <see>
                    #minimumLayoutSize                    
                </see>
                <see>
                    #maximumLayoutSize                    
                </see>
            </javadoc>
            <method name="preferredLayoutSize" type="Dimension" line="296">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="size" type="Dimension" line="297"/>
                <scope line="298"/>
                <declaration name="insets" type="Insets" line="304"/>
            </method>
            <javadoc line="310">
                Returns the minimum dimensions needed to lay out the components
                  contained in the specified target container.                
                <param>
                    target  the container that needs to be laid out                    
                </param>
                <return>
                    the dimensions >= 0 && <= Integer.MAX_VALUE                    
                </return>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
                <see>
                    #preferredLayoutSize                    
                </see>
                <see>
                    #maximumLayoutSize                    
                </see>
            </javadoc>
            <method name="minimumLayoutSize" type="Dimension" line="321">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="size" type="Dimension" line="322"/>
                <scope line="323"/>
                <declaration name="insets" type="Insets" line="329"/>
            </method>
            <javadoc line="335">
                Returns the maximum dimensions the target container can use
                  to lay out the components it contains.                
                <param>
                    target  the container that needs to be laid out                    
                </param>
                <return>
                    the dimenions >= 0 && <= Integer.MAX_VALUE                    
                </return>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
                <see>
                    #preferredLayoutSize                    
                </see>
                <see>
                    #minimumLayoutSize                    
                </see>
            </javadoc>
            <method name="maximumLayoutSize" type="Dimension" line="346">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <declaration name="size" type="Dimension" line="347"/>
                <scope line="348"/>
                <declaration name="insets" type="Insets" line="354"/>
            </method>
            <javadoc line="360">
                Returns the alignment along the X axis for the container.
                  If the box is horizontal, the default
                  alignment will be returned. Otherwise, the alignment needed
                  to place the children along the X axis will be returned.                
                <param>
                    target  the container                    
                </param>
                <return>
                    the alignment >= 0.0f && <= 1.0f                    
                </return>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
            </javadoc>
            <method name="getLayoutAlignmentX" type="float" line="371">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="377">
                Returns the alignment along the Y axis for the container.
                  If the box is vertical, the default
                  alignment will be returned. Otherwise, the alignment needed
                  to place the children along the Y axis will be returned.                
                <param>
                    target  the container                    
                </param>
                <return>
                    the alignment >= 0.0f && <= 1.0f                    
                </return>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
            </javadoc>
            <method name="getLayoutAlignmentY" type="float" line="388">
                <params>
                    <param name="target" type="Container"/>
                </params>
            </method>
            <javadoc line="394">
                Called by the AWT &lt;!-- XXX CHECK! --&gt; when the specified container
                  needs to be laid out.                
                <param>
                    target  the container to lay out                    
                </param>
                <exception>
                    AWTError  if the target isn't the container specified to the
                      BoxLayout constructor                    
                </exception>
            </javadoc>
            <method name="layoutContainer" type="void" line="403">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <comment line="417">
                    Resolve axis to an absolute value (either X_AXIS or Y_AXIS)                    
                </comment>
                <comment line="423">
                    determine the child placements                    
                </comment>
                <comment line="444">
                    flush changes to the container                    
                </comment>
                <declaration name="nChildren" type="int" line="405"/>
                <declaration name="xOffsets" type="int[]" line="406"/>
                <declaration name="xSpans" type="int[]" line="407"/>
                <declaration name="yOffsets" type="int[]" line="408"/>
                <declaration name="ySpans" type="int[]" line="409"/>
                <declaration name="alloc" type="Dimension" line="411"/>
                <declaration name="in" type="Insets" line="412"/>
                <declaration name="o" type="ComponentOrientation" line="417"/>
                <declaration name="absoluteAxis" type="int" line="418"/>
                <declaration name="ltr" type="boolean" line="419"/>
                <scope line="423">
                    <scope line="426"/>
                    <scope line="433"/>
                </scope>
                <scope line="444">
                    <declaration name="c" type="Component" line="445"/>
                </scope>
                <scope line="451">
                    <scope line="452">
                        <declaration name="c" type="Component" line="453"/>
                    </scope>
                </scope>
            </method>
            <method name="checkContainer" type="void" line="462">
                <params>
                    <param name="target" type="Container"/>
                </params>
                <scope line="463"/>
            </method>
            <method name="checkRequests" type="void" line="468">
                <comment line="471">
                    The requests have been invalidated... recalculate
                     the request information.                    
                </comment>
                <comment line="494">
                    Resolve axis to an absolute value (either X_AXIS or Y_AXIS)                    
                </comment>
                <scope line="469">
                    <declaration name="n" type="int" line="472"/>
                    <scope line="475">
                        <declaration name="c" type="Component" line="476"/>
                        <scope line="477"/>
                        <declaration name="min" type="Dimension" line="482"/>
                        <declaration name="typ" type="Dimension" line="483"/>
                        <declaration name="max" type="Dimension" line="484"/>
                    </scope>
                    <declaration name="absoluteAxis" type="int" line="494"/>
                    <scope line="496"/>
                    <scope line="499"/>
                </scope>
            </method>
            <javadoc line="506">
                Given one of the 4 axis values, resolve it to an absolute axis.
                  The relative axis values, PAGE_AXIS and LINE_AXIS are converted
                  to their absolute couterpart given the target&apos;s ComponentOrientation
                  value.  The absolute axes, X_AXIS and Y_AXIS are returned unmodified.                
                <param>
                    axis the axis to resolve                    
                </param>
                <param>
                    o the ComponentOrientation to resolve against                    
                </param>
                <return>
                    the resolved axis                    
                </return>
            </javadoc>
            <method name="resolveAxis" type="int" line="516">
                <params>
                    <param name="axis" type="int"/>
                    <param name="o" type="ComponentOrientation"/>
                </params>
                <declaration name="absoluteAxis" type="int" line="517"/>
                <scope line="518"/>
                <scope line="520"/>
                <scope line="522"/>
            </method>
            <declaration name="axis" type="int" line="529"/>
            <declaration name="target" type="Container" line="530"/>
            <declaration name="xChildren" type="SizeRequirements[]" line="532"/>
            <declaration name="yChildren" type="SizeRequirements[]" line="533"/>
            <declaration name="xTotal" type="SizeRequirements" line="534"/>
            <declaration name="yTotal" type="SizeRequirements" line="535"/>
            <declaration name="dbg" type="PrintStream" line="537"/>
        </class>
    </source>