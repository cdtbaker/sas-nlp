<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.io"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="javax.accessibility"/>
        <class name="CellRendererPane" line="9">
            <extends class="Container"/>
            <implements interface="Accessible"/>
            <javadoc line="9">
                This class is inserted in between cell renderers and the components that
                  use them.  It just exists to thwart the repaint() and invalidate() methods
                  which would otherwise propagate up the tree when the renderer was configured.
                  It&apos;s used by the implementations of JTable, JTree, and JList.  For example,
                  here&apos;s how CellRendererPane is used in the code the paints each row
                  in a JList:
                  &lt;pre&gt;
                  cellRendererPane = new CellRendererPane();
                  ...
                  Component rendererComponent = renderer.getListCellRendererComponent();
                  renderer.configureListCellRenderer(dataModel.getElementAt(row), row);
                  cellRendererPane.paintComponent(g, rendererComponent, this, x, y, w, h);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  A renderer component must override isShowing() and unconditionally return
                  true to work correctly because the Swing paint does nothing for components
                  with isShowing false.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <javadoc line="39">
                Construct a CellRendererPane object.                
            </javadoc>
            <method name="CellRendererPane" type="constructor" line="42"/>
            <javadoc line="47">
                Overridden to avoid propagating a invalidate up the tree when the
                  cell renderer child is configured.                
            </javadoc>
            <method name="invalidate" type="void" line="51"/>
            <javadoc line="53">
                Shouldn&apos;t be called.                
            </javadoc>
            <method name="paint" type="void" line="56">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="58">
                Shouldn&apos;t be called.                
            </javadoc>
            <method name="update" type="void" line="61">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="63">
                If the specified component is already a child of this then we don&apos;t
                  bother doing anything - stacking order doesn&apos;t matter for cell
                  renderer components (CellRendererPane doesn&apos;t paint anyway).&lt;                
            </javadoc>
            <method name="addImpl" type="void" line="68">
                <params>
                    <param name="x" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="69"/>
                <scope line="72"/>
            </method>
            <javadoc line="76">
                Paint a cell renderer component c on graphics object g.  Before the component
                  is drawn it&apos;s reparented to this (if that&apos;s necessary), it&apos;s bounds
                  are set to w,h and the graphics object is (effectively) translated to x,y.
                  If it&apos;s a JComponent, double buffering is temporarily turned off. After
                  the component is painted it&apos;s bounds are reset to -w, -h, 0, 0 so that, if
                  it&apos;s the last renderer component painted, it will not start consuming input.
                  The Container p is the component we&apos;re actually drawing on, typically it&apos;s
                  equal to this.getParent(). If shouldValidate is true the component c will be
                  validated before painted.                
            </javadoc>
            <method name="paintComponent" type="void" line="87">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="Component"/>
                    <param name="p" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="shouldValidate" type="boolean"/>
                </params>
                <scope line="88">
                    <scope line="89">
                        <declaration name="oldColor" type="Color" line="90"/>
                    </scope>
                </scope>
                <scope line="97"/>
                <scope line="101"/>
                <declaration name="wasDoubleBuffered" type="boolean" line="104"/>
                <scope line="105"/>
                <declaration name="cg" type="Graphics" line="109"/>
                <scope line="110"/>
                <scope line="113"/>
                <scope line="116"/>
            </method>
            <javadoc line="121">
                Calls this.paintComponent(g, c, p, x, y, w, h, false).                
            </javadoc>
            <method name="paintComponent" type="void" line="124">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="Component"/>
                    <param name="p" type="Container"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
            </method>
            <javadoc line="127">
                Calls this.paintComponent() with the rectangles x,y,width,height fields.                
            </javadoc>
            <method name="paintComponent" type="void" line="130">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="c" type="Component"/>
                    <param name="p" type="Container"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="133">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="137"/>
            <javadoc line="138">
                Gets the AccessibleContext associated with this CellRendererPane.
                  For CellRendererPanes, the AccessibleContext takes the form of an
                  AccessibleCellRendererPane.
                  A new AccessibleCellRendererPane instance is created if necessary.                
                <return>
                    an AccessibleCellRendererPane that serves as the
                      AccessibleContext of this CellRendererPane                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="146">
                <scope line="147"/>
            </method>
            <class name="AccessibleCellRendererPane" line="152">
                <extends class="AccessibleAWTContainer"/>
                <javadoc line="152">
                    This class implements accessibility support for the
                      &lt;code&gt;CellRendererPane&lt;/code&gt; class.                    
                </javadoc>
                <javadoc line="157">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="163"/>
            </class>
        </class>
    </source>