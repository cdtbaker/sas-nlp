<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.accessibility"/>
        <class name="JFrame" line="37">
            <extends class="Frame"/>
            <comment line="319">
                public void setMenuBar(MenuBar menu) {
                        throw new IllegalComponentStateException(&quot;Please use setJMenuBar() with JFrame.&quot;);
                    }                
            </comment>
            <comment line="870">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="940">
                inner class AccessibleJFrame                
            </comment>
            <implements interface="WindowConstants"/>
            <implements interface="Accessible"/>
            <implements interface="RootPaneContainer"/>
            <implements interface="TransferHandler.HasGetTransferHandler"/>
            <javadoc line="37">
                An extended version of &lt;code&gt;java.awt.Frame&lt;/code&gt; that adds support for
                  the JFC/Swing component architecture.
                  You can find task-oriented documentation about using &lt;code&gt;JFrame&lt;/code&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;, in the section
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/frame.html&quot;&gt;How to Make Frames&lt;/a&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;JFrame&lt;/code&gt; class is slightly incompatible with &lt;code&gt;Frame&lt;/code&gt;.
                  Like all other JFC/Swing top-level containers,
                  a &lt;code&gt;JFrame&lt;/code&gt; contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child.
                  The &lt;b&gt;content pane&lt;/b&gt; provided by the root pane should,
                  as a rule, contain
                  all the non-menu components displayed by the &lt;code&gt;JFrame&lt;/code&gt;.
                  This is different from the AWT &lt;code&gt;Frame&lt;/code&gt; case.
                  As a conveniance &lt;code&gt;add&lt;/code&gt; and its variants, &lt;code&gt;remove&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; have been overridden to forward to the
                  &lt;code&gt;contentPane&lt;/code&gt; as necessary. This means you can write:
                  &lt;pre&gt;
                  frame.add(child);
                  &lt;/pre&gt;
                  And the child will be added to the contentPane.
                  The content pane will
                  always be non-null. Attempting to set it to null will cause the JFrame
                  to throw an exception. The default content pane will have a BorderLayout
                  manager set on it.
                  Refer to {@link javax.swing.RootPaneContainer}for details on adding, removing and setting the &lt;code&gt;LayoutManager&lt;/code&gt;
                  of a &lt;code&gt;JFrame&lt;/code&gt;.
                  &lt;p&gt;
                  Unlike a &lt;code&gt;Frame&lt;/code&gt;, a &lt;code&gt;JFrame&lt;/code&gt; has some notion of how to
                  respond when the user attempts to close the window. The default behavior
                  is to simply hide the JFrame when the user closes the window. To change the
                  default behavior, you invoke the method{@link #setDefaultCloseOperation}.
                  To make the &lt;code&gt;JFrame&lt;/code&gt; behave the same as a &lt;code&gt;Frame&lt;/code&gt;
                  instance, use
                  &lt;code&gt;setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE)&lt;/code&gt;.
                  &lt;p&gt;
                  For more information on content panes
                  and other features that root panes provide,
                  see &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/toplevel.html&quot;&gt;Using Top-Level Containers&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  In a multi-screen environment, you can create a &lt;code&gt;JFrame&lt;/code&gt;
                  on a different screen device.  See {@link java.awt.Frame} for more
                  information.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JRootPane                    
                </see>
                <see>
                    #setDefaultCloseOperation                    
                </see>
                <see>
                    java.awt.event.WindowListener#windowClosing                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfo>
                    attribute: isContainer true
                      attribute: containerDelegate getContentPane
                      description: A toplevel window which can be minimized to an icon.                    
                </beaninfo>
                <author>
                    Jeff Dinkins                    
                </author>
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="EXIT_ON_CLOSE" type="int" line="119"/>
            <javadoc line="119">
                The exit application default window close operation. If a window
                  has this set as the close operation and is closed in an applet,
                  a &lt;code&gt;SecurityException&lt;/code&gt; may be thrown.
                  It is recommended you only use this in an application.
                  &lt;p&gt;                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="defaultLookAndFeelDecoratedKey" type="Object" line="129"/>
            <javadoc line="129">
                Key into the AppContext, used to check if should provide decorations
                  by default.                
            </javadoc>
            <declaration name="defaultCloseOperation" type="int" line="136"/>
            <declaration name="transferHandler" type="TransferHandler" line="138"/>
            <javadoc line="138">
                The &lt;code&gt;TransferHandler&lt;/code&gt; for this frame.                
            </javadoc>
            <declaration name="rootPane" type="JRootPane" line="143"/>
            <javadoc line="143">
                The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the
                  &lt;code&gt;contentPane&lt;/code&gt;
                  and optional &lt;code&gt;menuBar&lt;/code&gt; for this frame, as well as the
                  &lt;code&gt;glassPane&lt;/code&gt;.                
                <see>
                    JRootPane                    
                </see>
                <see>
                    RootPaneContainer                    
                </see>
            </javadoc>
            <declaration name="rootPaneCheckingEnabled" type="boolean" line="154"/>
            <javadoc line="154">
                If true then calls to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt;
                  will be forwarded to the &lt;code&gt;contentPane&lt;/code&gt;. This is initially
                  false, but is set to true when the &lt;code&gt;JFrame&lt;/code&gt; is constructed.                
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <javadoc line="166">
                Constructs a new frame that is initially invisible.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JFrame" type="constructor" line="179"/>
            <javadoc line="184">
                Creates a &lt;code&gt;Frame&lt;/code&gt; in the specified
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of
                  a screen device and a blank title.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    gc the <code>GraphicsConfiguration</code> that is used
                      to construct the new <code>Frame</code>;
                      if <code>gc</code> is <code>null</code>, the system
                      default <code>GraphicsConfiguration</code> is assumed                    
                </param>
                <exception>
                    IllegalArgumentException if <code>gc</code> is not from
                      a screen device.  This exception is always thrown when
                      GraphicsEnvironment.isHeadless() returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JFrame" type="constructor" line="203">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="208">
                Creates a new, initially invisible &lt;code&gt;Frame&lt;/code&gt; with the
                  specified title.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    title the title for the frame                    
                </param>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    Component#setSize                    
                </see>
                <see>
                    Component#setVisible                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JFrame" type="constructor" line="223">
                <params>
                    <param name="title" type="String"/>
                </params>
            </method>
            <javadoc line="228">
                Creates a &lt;code&gt;JFrame&lt;/code&gt; with the specified title and the
                  specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of a screen device.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    title the title to be displayed in the
                      frame's border. A <code>null</code> value is treated as
                      an empty string, "".                    
                </param>
                <param>
                    gc the <code>GraphicsConfiguration</code> that is used
                      to construct the new <code>JFrame</code> with;
                      if <code>gc</code> is <code>null</code>, the system
                      default <code>GraphicsConfiguration</code> is assumed                    
                </param>
                <exception>
                    IllegalArgumentException if <code>gc</code> is not from
                      a screen device.  This exception is always thrown when
                      GraphicsEnvironment.isHeadless() returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JFrame" type="constructor" line="249">
                <params>
                    <param name="title" type="String"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="254">
                Called by the constructors to init the &lt;code&gt;JFrame&lt;/code&gt; properly.                
            </javadoc>
            <method name="frameInit" type="void" line="255">
                <scope line="261">
                    <declaration name="supportsWindowDecorations" type="boolean" line="262"/>
                    <scope line="264"/>
                </scope>
            </method>
            <javadoc line="272">
                Called by the constructor methods to create the default
                  &lt;code&gt;rootPane&lt;/code&gt;.                
            </javadoc>
            <method name="createRootPane" type="JRootPane" line="276">
                <comment line="279">
                    NOTE: this uses setOpaque vs LookAndFeel.installProperty as there
                     is NO reason for the RootPane not to be opaque. For painting to
                     work the contentPane must be opaque, therefor the RootPane can
                     also be opaque.                    
                </comment>
                <declaration name="rp" type="JRootPane" line="277"/>
            </method>
            <javadoc line="286">
                Processes window events occurring on this component.
                  Hides the window or disposes of it, as specified by the setting
                  of the &lt;code&gt;defaultCloseOperation&lt;/code&gt; property.                
                <param>
                    e  the window event                    
                </param>
                <see>
                    #setDefaultCloseOperation                    
                </see>
                <see>
                    java.awt.Window#processWindowEvent                    
                </see>
            </javadoc>
            <method name="processWindowEvent" type="void" line="295">
                <params>
                    <param name="e" type="WindowEvent"/>
                </params>
                <comment line="311">
                    This needs to match the checkExit call in
                     setDefaultCloseOperation                    
                </comment>
                <scope line="298"/>
            </method>
            <javadoc line="322">
                Sets the operation that will happen by default when
                  the user initiates a &quot;close&quot; on this frame.
                  You must specify one of the following choices:
                  &lt;p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;DO_NOTHING_ON_CLOSE&lt;/code&gt;
                  (defined in &lt;code&gt;WindowConstants&lt;/code&gt;):
                  Don&apos;t do anything; require the
                  program to handle the operation in the &lt;code&gt;windowClosing&lt;/code&gt;
                  method of a registered &lt;code&gt;WindowListener&lt;/code&gt; object.
                  &lt;li&gt;&lt;code&gt;HIDE_ON_CLOSE&lt;/code&gt;
                  (defined in &lt;code&gt;WindowConstants&lt;/code&gt;):
                  Automatically hide the frame after
                  invoking any registered &lt;code&gt;WindowListener&lt;/code&gt;
                  objects.
                  &lt;li&gt;&lt;code&gt;DISPOSE_ON_CLOSE&lt;/code&gt;
                  (defined in &lt;code&gt;WindowConstants&lt;/code&gt;):
                  Automatically hide and dispose the
                  frame after invoking any registered &lt;code&gt;WindowListener&lt;/code&gt;
                  objects.
                  &lt;li&gt;&lt;code&gt;EXIT_ON_CLOSE&lt;/code&gt;
                  (defined in &lt;code&gt;JFrame&lt;/code&gt;):
                  Exit the application using the &lt;code&gt;System&lt;/code&gt;
                  &lt;code&gt;exit&lt;/code&gt; method.  Use this only in applications.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The value is set to &lt;code&gt;HIDE_ON_CLOSE&lt;/code&gt; by default. Changes
                  to the value of this property cause the firing of a property
                  change event, with property name &quot;defaultCloseOperation&quot;.
                  &lt;p&gt;
                  &lt;b&gt;Note&lt;/b&gt;: When the last displayable window within the
                  Java virtual machine (VM) is disposed of, the VM may
                  terminate.  See &lt;a href=&quot;../../java/awt/doc-files/AWTThreadIssues.html&quot;&gt;
                  AWT Threading Issues&lt;/a&gt; for more information.                
                <param>
                    operation the operation which should be performed when the
                      user closes the frame                    
                </param>
                <exception>
                    IllegalArgumentException if defaultCloseOperation value
                      isn't one of the above valid values                    
                </exception>
                <see>
                    #addWindowListener                    
                </see>
                <see>
                    #getDefaultCloseOperation                    
                </see>
                <see>
                    WindowConstants                    
                </see>
                <throws>
                    SecurityExceptionif <code>EXIT_ON_CLOSE</code> has been specified and the
                      <code>SecurityManager</code> will
                      not allow the caller to invoke <code>System.exit</code>                    
                </throws>
                <see>
                    java.lang.Runtime#exit(int)                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      enum: DO_NOTHING_ON_CLOSE WindowConstants.DO_NOTHING_ON_CLOSE
                      HIDE_ON_CLOSE       WindowConstants.HIDE_ON_CLOSE
                      DISPOSE_ON_CLOSE    WindowConstants.DISPOSE_ON_CLOSE
                      EXIT_ON_CLOSE       WindowConstants.EXIT_ON_CLOSE
                      description: The frame's default close operation.                    
                </beaninfo>
            </javadoc>
            <method name="setDefaultCloseOperation" type="void" line="383">
                <params>
                    <param name="operation" type="int"/>
                </params>
                <scope line="387"/>
                <scope line="390">
                    <scope line="391">
                        <declaration name="security" type="SecurityManager" line="392"/>
                        <scope line="393"/>
                    </scope>
                    <declaration name="oldValue" type="int" line="397"/>
                </scope>
            </method>
            <javadoc line="404">
                Returns the operation that occurs when the user
                  initiates a &quot;close&quot; on this frame.                
                <return>
                    an integer indicating the window-close operation                    
                </return>
                <see>
                    #setDefaultCloseOperation                    
                </see>
            </javadoc>
            <method name="getDefaultCloseOperation" type="int" line="411"/>
            <javadoc line="415">
                Sets the {@code transferHandler} property, which is a mechanism to
                  support transfer of data into this component. Use {@code null}if the component does not support data transfer operations.
                  &lt;p&gt;
                  If the system property {@code suppressSwingDropSupport} is {@code false}(the default) and the current drop target on this component is either{@code null} or not a user-set drop target, this method will change the
                  drop target as follows: If {@code newHandler} is {@code null} it will
                  clear the drop target. If not {@code null} it will install a new{@code DropTarget}.
                  &lt;p&gt;
                  Note: When used with {@code JFrame}, {@code TransferHandler} only
                  provides data import capability, as the data export related methods
                  are currently typed to {@code JComponent}.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html&quot;&gt;
                  How to Use Drag and Drop and Data Transfer&lt;/a&gt;, a section in
                  &lt;em&gt;The Java Tutorial&lt;/em&gt;, for more information.                
                <param>
                    newHandler the new {@code TransferHandler}                    
                </param>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #getTransferHandler                    
                </see>
                <see>
                    java.awt.Component#setDropTarget                    
                </see>
                <since>
                    1.6                    
                </since>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: Mechanism for transfer of data into the component                    
                </beaninfo>
            </javadoc>
            <method name="setTransferHandler" type="void" line="448">
                <params>
                    <param name="newHandler" type="TransferHandler"/>
                </params>
                <declaration name="oldHandler" type="TransferHandler" line="449"/>
            </method>
            <javadoc line="455">
                Gets the &lt;code&gt;transferHandler&lt;/code&gt; property.                
                <return>
                    the value of the <code>transferHandler</code> property                    
                </return>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTransferHandler" type="TransferHandler" line="464"/>
            <javadoc line="468">
                Just calls &lt;code&gt;paint(g)&lt;/code&gt;.  This method was overridden to
                  prevent an unnecessary call to clear the background.                
                <param>
                    g the Graphics context in which to paint                    
                </param>
            </javadoc>
            <method name="update" type="void" line="474">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="478">
                Sets the menubar for this frame.                
                <param>
                    menubar the menubar being placed in the frame                    
                </param>
                <see>
                    #getJMenuBar                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The menubar for accessing pulldown menus from this frame.                    
                </beaninfo>
            </javadoc>
            <method name="setJMenuBar" type="void" line="488">
                <params>
                    <param name="menubar" type="JMenuBar"/>
                </params>
            </method>
            <javadoc line="492">
                Returns the menubar set on this frame.                
                <return>
                    the menubar for this frame                    
                </return>
                <see>
                    #setJMenuBar                    
                </see>
            </javadoc>
            <method name="getJMenuBar" type="JMenuBar" line="498"/>
            <javadoc line="502">
                Returns whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <return>
                    true if <code>add</code> and <code>setLayout</code>
                      are fowarded; false otherwise                    
                </return>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="isRootPaneCheckingEnabled" type="boolean" line="514"/>
            <javadoc line="519">
                Sets whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    enabled  true if <code>add</code> and <code>setLayout</code>
                      are forwarded, false if they should operate directly on the
                      <code>JFrame</code>.                    
                </param>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfo>
                    hidden: true
                      description: Whether the add and setLayout methods are forwarded                    
                </beaninfo>
            </javadoc>
            <method name="setRootPaneCheckingEnabled" type="void" line="535">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="540">
                Adds the specified child &lt;code&gt;Component&lt;/code&gt;.
                  This method is overridden to conditionally forward calls to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  By default, children are added to the &lt;code&gt;contentPane&lt;/code&gt; instead
                  of the frame, refer to {@link javax.swing.RootPaneContainer} for
                  details.                
                <param>
                    comp the component to be enhanced                    
                </param>
                <param>
                    constraints the constraints to be respected                    
                </param>
                <param>
                    index the index                    
                </param>
                <exception>
                    IllegalArgumentException if <code>index</code> is invalid                    
                </exception>
                <exception>
                    IllegalArgumentException if adding the container's parent
                      to itself                    
                </exception>
                <exception>
                    IllegalArgumentException if adding a window to a container                    
                </exception>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="560">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="561"/>
                <scope line="564"/>
            </method>
            <javadoc line="569">
                Removes the specified component from the container. If
                  &lt;code&gt;comp&lt;/code&gt; is not the &lt;code&gt;rootPane&lt;/code&gt;, this will forward
                  the call to the &lt;code&gt;contentPane&lt;/code&gt;. This will do nothing if
                  &lt;code&gt;comp&lt;/code&gt; is not a child of the &lt;code&gt;JFrame&lt;/code&gt; or
                  &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    comp the component to be removed                    
                </param>
                <throws>
                    NullPointerException if <code>comp</code> is null                    
                </throws>
                <see>
                    #add                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="581">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="582"/>
                <scope line="584"/>
            </method>
            <javadoc line="590">
                Sets the &lt;code&gt;LayoutManager&lt;/code&gt;.
                  Overridden to conditionally forward the call to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  Refer to {@link javax.swing.RootPaneContainer} for
                  more information.                
                <param>
                    manager the <code>LayoutManager</code>                    
                </param>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="setLayout" type="void" line="601">
                <params>
                    <param name="manager" type="LayoutManager"/>
                </params>
                <scope line="602"/>
                <scope line="605"/>
            </method>
            <javadoc line="611">
                Returns the &lt;code&gt;rootPane&lt;/code&gt; object for this frame.                
                <return>
                    the <code>rootPane</code> property                    
                </return>
                <see>
                    #setRootPane                    
                </see>
                <see>
                    RootPaneContainer#getRootPane                    
                </see>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="618"/>
            <javadoc line="623">
                Sets the &lt;code&gt;rootPane&lt;/code&gt; property.
                  This method is called by the constructor.                
                <param>
                    root the <code>rootPane</code> object for this frame                    
                </param>
                <see>
                    #getRootPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: the RootPane object for this frame.                    
                </beaninfo>
            </javadoc>
            <method name="setRootPane" type="void" line="635">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="636"/>
                <scope line="640">
                    <declaration name="checkingEnabled" type="boolean" line="641"/>
                    <scope line="642"/>
                    <scope line="646"/>
                </scope>
            </method>
            <javadoc line="652">
                {@inheritDoc}                
            </javadoc>
            <method name="setIconImage" type="void" line="655">
                <params>
                    <param name="image" type="Image"/>
                </params>
            </method>
            <javadoc line="659">
                Returns the &lt;code&gt;contentPane&lt;/code&gt; object for this frame.                
                <return>
                    the <code>contentPane</code> property                    
                </return>
                <see>
                    #setContentPane                    
                </see>
                <see>
                    RootPaneContainer#getContentPane                    
                </see>
            </javadoc>
            <method name="getContentPane" type="Container" line="666"/>
            <javadoc line="670">
                Sets the &lt;code&gt;contentPane&lt;/code&gt; property.
                  This method is called by the constructor.
                  &lt;p&gt;
                  Swing&apos;s painting architecture requires an opaque &lt;code&gt;JComponent&lt;/code&gt;
                  in the containment hiearchy. This is typically provided by the
                  content pane. If you replace the content pane it is recommended you
                  replace it with an opaque &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    contentPane the <code>contentPane</code> object for this frame                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is <code>null</code>                    
                </exception>
                <see>
                    #getContentPane                    
                </see>
                <see>
                    RootPaneContainer#setContentPane                    
                </see>
                <see>
                    JRootPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The client area of the frame where child
                      components are normally inserted.                    
                </beaninfo>
            </javadoc>
            <method name="setContentPane" type="void" line="692">
                <params>
                    <param name="contentPane" type="Container"/>
                </params>
            </method>
            <javadoc line="696">
                Returns the &lt;code&gt;layeredPane&lt;/code&gt; object for this frame.                
                <return>
                    the <code>layeredPane</code> property                    
                </return>
                <see>
                    #setLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#getLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="703"/>
            <javadoc line="707">
                Sets the &lt;code&gt;layeredPane&lt;/code&gt; property.
                  This method is called by the constructor.                
                <param>
                    layeredPane the <code>layeredPane</code> object for this frame                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the layered pane parameter is <code>null</code>                    
                </exception>
                <see>
                    #getLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#setLayeredPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The pane that holds the various frame layers.                    
                </beaninfo>
            </javadoc>
            <method name="setLayeredPane" type="void" line="721">
                <params>
                    <param name="layeredPane" type="JLayeredPane"/>
                </params>
            </method>
            <javadoc line="725">
                Returns the &lt;code&gt;glassPane&lt;/code&gt; object for this frame.                
                <return>
                    the <code>glassPane</code> property                    
                </return>
                <see>
                    #setGlassPane                    
                </see>
                <see>
                    RootPaneContainer#getGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="732"/>
            <javadoc line="736">
                Sets the &lt;code&gt;glassPane&lt;/code&gt; property.
                  This method is called by the constructor.                
                <param>
                    glassPane the <code>glassPane</code> object for this frame                    
                </param>
                <see>
                    #getGlassPane                    
                </see>
                <see>
                    RootPaneContainer#setGlassPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: A transparent pane used for menu rendering.                    
                </beaninfo>
            </javadoc>
            <method name="setGlassPane" type="void" line="748">
                <params>
                    <param name="glassPane" type="Component"/>
                </params>
            </method>
            <javadoc line="752">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="757"/>
            <javadoc line="762">
                Repaints the specified rectangle of this component within
                  &lt;code&gt;time&lt;/code&gt; milliseconds.  Refer to &lt;code&gt;RepaintManager&lt;/code&gt;
                  for details on how the repaint is handled.                
                <param>
                    time   maximum time in milliseconds before update                    
                </param>
                <param>
                    x    the <i>x</i> coordinate                    
                </param>
                <param>
                    y    the <i>y</i> coordinate                    
                </param>
                <param>
                    width    the width                    
                </param>
                <param>
                    height   the height                    
                </param>
                <see>
                    RepaintManager                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="775">
                <params>
                    <param name="time" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="776"/>
                <scope line="780"/>
            </method>
            <javadoc line="785">
                Provides a hint as to whether or not newly created &lt;code&gt;JFrame&lt;/code&gt;s
                  should have their Window decorations (such as borders, widgets to
                  close the window, title...) provided by the current look
                  and feel. If &lt;code&gt;defaultLookAndFeelDecorated&lt;/code&gt; is true,
                  the current &lt;code&gt;LookAndFeel&lt;/code&gt; supports providing window
                  decorations, and the current window manager supports undecorated
                  windows, then newly created &lt;code&gt;JFrame&lt;/code&gt;s will have their
                  Window decorations provided by the current &lt;code&gt;LookAndFeel&lt;/code&gt;.
                  Otherwise, newly created &lt;code&gt;JFrame&lt;/code&gt;s will have their
                  Window decorations provided by the current window manager.
                  &lt;p&gt;
                  You can get the same effect on a single JFrame by doing the following:
                  &lt;pre&gt;
                  JFrame frame = new JFrame();
                  frame.setUndecorated(true);
                  frame.getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
                  &lt;/pre&gt;                
                <param>
                    defaultLookAndFeelDecorated A hint as to whether or not current
                      look and feel should provide window decorations                    
                </param>
                <see>
                    javax.swing.LookAndFeel#getSupportsWindowDecorations                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDefaultLookAndFeelDecorated" type="void" line="809">
                <params>
                    <param name="defaultLookAndFeelDecorated" type="boolean"/>
                </params>
                <scope line="810"/>
                <scope line="812"/>
            </method>
            <javadoc line="818">
                Returns true if newly created &lt;code&gt;JFrame&lt;/code&gt;s should have their
                  Window decorations provided by the current look and feel. This is only
                  a hint, as certain look and feels may not support this feature.                
                <return>
                    true if look and feel should provide Window decorations.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isDefaultLookAndFeelDecorated" type="boolean" line="826">
                <declaration name="defaultLookAndFeelDecorated" type="Boolean" line="827"/>
                <scope line="829"/>
            </method>
            <javadoc line="835">
                Returns a string representation of this &lt;code&gt;JFrame&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JFrame</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="845">
                <declaration name="defaultCloseOperationString" type="String" line="846"/>
                <scope line="847"/>
                <scope line="849"/>
                <scope line="851"/>
                <scope line="853"/>
                <declaration name="rootPaneString" type="String" line="856"/>
                <declaration name="rootPaneCheckingEnabledString" type="String" line="858"/>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="873"/>
            <javadoc line="873">
                The accessible context property.                
            </javadoc>
            <javadoc line="876">
                Gets the AccessibleContext associated with this JFrame.
                  For JFrames, the AccessibleContext takes the form of an
                  AccessibleJFrame.
                  A new AccessibleJFrame instance is created if necessary.                
                <return>
                    an AccessibleJFrame that serves as the
                      AccessibleContext of this JFrame                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="885">
                <scope line="886"/>
            </method>
            <class name="AccessibleJFrame" line="892">
                <extends class="AccessibleAWTFrame"/>
                <comment line="901">
                    AccessibleContext methods                    
                </comment>
                <javadoc line="892">
                    This class implements accessibility support for the
                      &lt;code&gt;JFrame&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to frame user-interface
                      elements.                    
                </javadoc>
                <javadoc line="901">
                    Get the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be null if this
                          object does not have a name                        
                    </return>
                </javadoc>
                <method name="getAccessibleName" type="String" line="907">
                    <scope line="908"/>
                    <scope line="910">
                        <scope line="911"/>
                        <scope line="913"/>
                    </scope>
                </method>
                <javadoc line="919">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="926">
                    <comment line="936">
                        FIXME:  [[[WDW - should also return ICONIFIED and ICONIFIABLE
                         if we can ever figure these out]]]                        
                    </comment>
                    <declaration name="states" type="AccessibleStateSet" line="927"/>
                    <scope line="929"/>
                    <scope line="932"/>
                </method>
            </class>
        </class>
    </source>