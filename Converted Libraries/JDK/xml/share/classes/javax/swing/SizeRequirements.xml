<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.io.Serializable"/>
        <class name="SizeRequirements" line="4">
            <implements interface="Serializable"/>
            <javadoc line="4">
                For the convenience of layout managers,
                  calculates information about the size and position of components.
                  All size and position calculation methods are class methods
                  that take arrays of SizeRequirements as arguments.
                  The SizeRequirements class supports two types of layout:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt; tiled
                  &lt;dd&gt; The components are placed end-to-end,
                  starting either at coordinate 0 (the leftmost or topmost position)
                  or at the coordinate representing the end of the allocated span
                  (the rightmost or bottommost position).
                  &lt;dt&gt; aligned
                  &lt;dd&gt; The components are aligned as specified
                  by each component&apos;s X or Y alignment value.
                  &lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  Each SizeRequirements object contains information
                  about either the width (and X alignment)
                  or height (and Y alignment)
                  of a single component or a group of components:
                  &lt;blockquote&gt;
                  &lt;dl&gt;
                  &lt;dt&gt; &lt;code&gt;minimum&lt;/code&gt;
                  &lt;dd&gt; The smallest reasonable width/height of the component
                  or component group, in pixels.
                  &lt;dt&gt; &lt;code&gt;preferred&lt;/code&gt;
                  &lt;dd&gt; The natural width/height of the component
                  or component group, in pixels.
                  &lt;dt&gt; &lt;code&gt;maximum&lt;/code&gt;
                  &lt;dd&gt; The largest reasonable width/height of the component
                  or component group, in pixels.
                  &lt;dt&gt; &lt;code&gt;alignment&lt;/code&gt;
                  &lt;dd&gt; The X/Y alignment of the component
                  or component group.
                  &lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    Component#getMinimumSize                    
                </see>
                <see>
                    Component#getPreferredSize                    
                </see>
                <see>
                    Component#getMaximumSize                    
                </see>
                <see>
                    Component#getAlignmentX                    
                </see>
                <see>
                    Component#getAlignmentY                    
                </see>
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <declaration name="minimum" type="int" line="60"/>
            <javadoc line="60">
                The minimum size required.
                  For a component &lt;code&gt;comp&lt;/code&gt;, this should be equal to either
                  &lt;code&gt;comp.getMinimumSize().width&lt;/code&gt; or
                  &lt;code&gt;comp.getMinimumSize().height&lt;/code&gt;.                
            </javadoc>
            <declaration name="preferred" type="int" line="67"/>
            <javadoc line="67">
                The preferred (natural) size.
                  For a component &lt;code&gt;comp&lt;/code&gt;, this should be equal to either
                  &lt;code&gt;comp.getPreferredSize().width&lt;/code&gt; or
                  &lt;code&gt;comp.getPreferredSize().height&lt;/code&gt;.                
            </javadoc>
            <declaration name="maximum" type="int" line="74"/>
            <javadoc line="74">
                The maximum size allowed.
                  For a component &lt;code&gt;comp&lt;/code&gt;, this should be equal to either
                  &lt;code&gt;comp.getMaximumSize().width&lt;/code&gt; or
                  &lt;code&gt;comp.getMaximumSize().height&lt;/code&gt;.                
            </javadoc>
            <declaration name="alignment" type="float" line="81"/>
            <javadoc line="81">
                The alignment, specified as a value between 0.0 and 1.0,
                  inclusive.
                  To specify centering, the alignment should be 0.5.                
            </javadoc>
            <javadoc line="87">
                Creates a SizeRequirements object with the minimum, preferred,
                  and maximum sizes set to zero and an alignment value of 0.5
                  (centered).                
            </javadoc>
            <method name="SizeRequirements" type="constructor" line="92"/>
            <javadoc line="98">
                Creates a SizeRequirements object with the specified minimum, preferred,
                  and maximum sizes and the specified alignment.                
                <param>
                    min the minimum size &gt;= 0                    
                </param>
                <param>
                    pref the preferred size &gt;= 0                    
                </param>
                <param>
                    max the maximum size &gt;= 0                    
                </param>
                <param>
                    a the alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f                    
                </param>
            </javadoc>
            <method name="SizeRequirements" type="constructor" line="106">
                <params>
                    <param name="min" type="int"/>
                    <param name="pref" type="int"/>
                    <param name="max" type="int"/>
                    <param name="a" type="float"/>
                </params>
            </method>
            <javadoc line="112">
                Returns a string describing the minimum, preferred, and maximum
                  size requirements, along with the alignment.                
                <return>
                    the string                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="117"/>
            <javadoc line="120">
                Determines the total space necessary to
                  place a set of components end-to-end.  The needs
                  of each component in the set are represented by an entry in the
                  passed-in SizeRequirements array.
                  The returned SizeRequirements object has an alignment of 0.5
                  (centered).  The space requirement is never more than
                  Integer.MAX_VALUE.                
                <param>
                    children  the space requirements for a set of components.
                      The vector may be of zero length, which will result in a
                      default SizeRequirements object instance being passed back.                    
                </param>
                <return>
                    the total space requirements.                    
                </return>
            </javadoc>
            <method name="getTiledSizeRequirements" type="SizeRequirements" line="133">
                <params>
                    <param name="children" type="SizeRequirements[]"/>
                </params>
                <declaration name="total" type="SizeRequirements" line="134"/>
                <scope line="135">
                    <declaration name="req" type="SizeRequirements" line="136"/>
                </scope>
            </method>
            <javadoc line="143">
                Determines the total space necessary to
                  align a set of components.  The needs
                  of each component in the set are represented by an entry in the
                  passed-in SizeRequirements array.  The total space required will
                  never be more than Integer.MAX_VALUE.                
                <param>
                    children  the set of child requirements.  If of zero length,
                      the returns result will be a default instance of SizeRequirements.                    
                </param>
                <return>
                    the total space requirements.                    
                </return>
            </javadoc>
            <method name="getAlignedSizeRequirements" type="SizeRequirements" line="153">
                <params>
                    <param name="children" type="SizeRequirements[]"/>
                </params>
                <declaration name="totalAscent" type="SizeRequirements" line="154"/>
                <declaration name="totalDescent" type="SizeRequirements" line="155"/>
                <scope line="156">
                    <declaration name="req" type="SizeRequirements" line="157"/>
                    <declaration name="ascent" type="int" line="158"/>
                    <declaration name="descent" type="int" line="159"/>
                </scope>
                <declaration name="min" type="int" line="171"/>
                <declaration name="pref" type="int" line="172"/>
                <declaration name="max" type="int" line="173"/>
                <declaration name="alignment" type="float" line="174"/>
                <scope line="175"/>
            </method>
            <javadoc line="181">
                Creates a set of offset/span pairs representing how to
                  lay out a set of components end-to-end.
                  This method requires that you specify
                  the total amount of space to be allocated,
                  the size requirements for each component to be placed
                  (specified as an array of SizeRequirements), and
                  the total size requirement of the set of components.
                  You can get the total size requirement
                  by invoking the getTiledSizeRequirements method.  The components
                  will be tiled in the forward direction with offsets increasing from 0.                
                <param>
                    allocated the total span to be allocated &gt;= 0.                    
                </param>
                <param>
                    total     the total of the children requests.  This argument
                      is optional and may be null.                    
                </param>
                <param>
                    children  the size requirements for each component.                    
                </param>
                <param>
                    offsets   the offset from 0 for each child where
                      the spans were allocated (determines placement of the span).                    
                </param>
                <param>
                    spans     the span allocated for each child to make the
                      total target span.                    
                </param>
            </javadoc>
            <method name="calculateTiledPositions" type="void" line="201">
                <params>
                    <param name="allocated" type="int"/>
                    <param name="total" type="SizeRequirements"/>
                    <param name="children" type="SizeRequirements[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
            </method>
            <javadoc line="204">
                Creates a set of offset/span pairs representing how to
                  lay out a set of components end-to-end.
                  This method requires that you specify
                  the total amount of space to be allocated,
                  the size requirements for each component to be placed
                  (specified as an array of SizeRequirements), and
                  the total size requirement of the set of components.
                  You can get the total size requirement
                  by invoking the getTiledSizeRequirements method.
                  This method also requires a flag indicating whether components
                  should be tiled in the forward direction (offsets increasing
                  from 0) or reverse direction (offsets decreasing from the end
                  of the allocated space).  The forward direction represents
                  components tiled from left to right or top to bottom.  The
                  reverse direction represents components tiled from right to left
                  or bottom to top.                
                <param>
                    allocated the total span to be allocated &gt;= 0.                    
                </param>
                <param>
                    total     the total of the children requests.  This argument
                      is optional and may be null.                    
                </param>
                <param>
                    children  the size requirements for each component.                    
                </param>
                <param>
                    offsets   the offset from 0 for each child where
                      the spans were allocated (determines placement of the span).                    
                </param>
                <param>
                    spans     the span allocated for each child to make the
                      total target span.                    
                </param>
                <param>
                    forward   tile with offsets increasing from 0 if true
                      and with offsets decreasing from the end of the allocated space
                      if false.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="calculateTiledPositions" type="void" line="234">
                <params>
                    <param name="allocated" type="int"/>
                    <param name="total" type="SizeRequirements"/>
                    <param name="children" type="SizeRequirements[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                    <param name="forward" type="boolean"/>
                </params>
                <declaration name="min" type="long" line="235"/>
                <declaration name="pref" type="long" line="236"/>
                <declaration name="max" type="long" line="237"/>
                <scope line="238"/>
                <scope line="243"/>
                <scope line="246"/>
            </method>
            <method name="compressedTile" type="void" line="250">
                <params>
                    <param name="allocated" type="int"/>
                    <param name="min" type="long"/>
                    <param name="pref" type="long"/>
                    <param name="max" type="long"/>
                    <param name="request" type="SizeRequirements[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                    <param name="forward" type="boolean"/>
                </params>
                <declaration name="totalPlay" type="float" line="251"/>
                <declaration name="factor" type="float" line="252"/>
                <declaration name="totalOffset" type="int" line="253"/>
                <scope line="254">
                    <scope line="256">
                        <declaration name="req" type="SizeRequirements" line="258"/>
                        <declaration name="play" type="float" line="259"/>
                    </scope>
                </scope>
                <scope line="264">
                    <scope line="266">
                        <declaration name="req" type="SizeRequirements" line="267"/>
                        <declaration name="play" type="float" line="268"/>
                    </scope>
                </scope>
            </method>
            <method name="expandedTile" type="void" line="275">
                <params>
                    <param name="allocated" type="int"/>
                    <param name="min" type="long"/>
                    <param name="pref" type="long"/>
                    <param name="max" type="long"/>
                    <param name="request" type="SizeRequirements[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                    <param name="forward" type="boolean"/>
                </params>
                <declaration name="totalPlay" type="float" line="276"/>
                <declaration name="factor" type="float" line="277"/>
                <declaration name="totalOffset" type="int" line="278"/>
                <scope line="279">
                    <scope line="281">
                        <declaration name="req" type="SizeRequirements" line="283"/>
                        <declaration name="play" type="int" line="284"/>
                    </scope>
                </scope>
                <scope line="289">
                    <scope line="291">
                        <declaration name="req" type="SizeRequirements" line="292"/>
                        <declaration name="play" type="int" line="293"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="300">
                Creates a bunch of offset/span pairs specifying how to
                  lay out a set of components with the specified alignments.
                  The resulting span allocations will overlap, with each one
                  fitting as well as possible into the given total allocation.
                  This method requires that you specify
                  the total amount of space to be allocated,
                  the size requirements for each component to be placed
                  (specified as an array of SizeRequirements), and
                  the total size requirements of the set of components
                  (only the alignment field of which is actually used).
                  You can get the total size requirement by invoking
                  getAlignedSizeRequirements.
                  Normal alignment will be done with an alignment value of 0.0f
                  representing the left/top edge of a component.                
                <param>
                    allocated the total span to be allocated &gt;= 0.                    
                </param>
                <param>
                    total     the total of the children requests.                    
                </param>
                <param>
                    children  the size requirements for each component.                    
                </param>
                <param>
                    offsets   the offset from 0 for each child where
                      the spans were allocated (determines placement of the span).                    
                </param>
                <param>
                    spans     the span allocated for each child to make the
                      total target span.                    
                </param>
            </javadoc>
            <method name="calculateAlignedPositions" type="void" line="323">
                <params>
                    <param name="allocated" type="int"/>
                    <param name="total" type="SizeRequirements"/>
                    <param name="children" type="SizeRequirements[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
            </method>
            <javadoc line="326">
                Creates a set of offset/span pairs specifying how to
                  lay out a set of components with the specified alignments.
                  The resulting span allocations will overlap, with each one
                  fitting as well as possible into the given total allocation.
                  This method requires that you specify
                  the total amount of space to be allocated,
                  the size requirements for each component to be placed
                  (specified as an array of SizeRequirements), and
                  the total size requirements of the set of components
                  (only the alignment field of which is actually used)
                  You can get the total size requirement by invoking
                  getAlignedSizeRequirements.
                  This method also requires a flag indicating whether normal or
                  reverse alignment should be performed.  With normal alignment
                  the value 0.0f represents the left/top edge of the component
                  to be aligned.  With reverse alignment, 0.0f represents the
                  right/bottom edge.                
                <param>
                    allocated the total span to be allocated &gt;= 0.                    
                </param>
                <param>
                    total     the total of the children requests.                    
                </param>
                <param>
                    children  the size requirements for each component.                    
                </param>
                <param>
                    offsets   the offset from 0 for each child where
                      the spans were allocated (determines placement of the span).                    
                </param>
                <param>
                    spans     the span allocated for each child to make the
                      total target span.                    
                </param>
                <param>
                    normal    when true, the alignment value 0.0f means
                      left/top; when false, it means right/bottom.                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="calculateAlignedPositions" type="void" line="355">
                <params>
                    <param name="allocated" type="int"/>
                    <param name="total" type="SizeRequirements"/>
                    <param name="children" type="SizeRequirements[]"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                    <param name="normal" type="boolean"/>
                </params>
                <declaration name="totalAlignment" type="float" line="356"/>
                <declaration name="totalAscent" type="int" line="357"/>
                <declaration name="totalDescent" type="int" line="358"/>
                <scope line="359">
                    <declaration name="req" type="SizeRequirements" line="360"/>
                    <declaration name="alignment" type="float" line="361"/>
                    <declaration name="maxAscent" type="int" line="362"/>
                    <declaration name="maxDescent" type="int" line="363"/>
                    <declaration name="ascent" type="int" line="364"/>
                    <declaration name="descent" type="int" line="365"/>
                </scope>
            </method>
            <javadoc line="370">
                Adjust a specified array of sizes by a given amount.                
                <param>
                    delta     an int specifying the size difference                    
                </param>
                <param>
                    children  an array of SizeRequirements objects                    
                </param>
                <return>
                    an array of ints containing the final size for each item                    
                </return>
            </javadoc>
            <method name="adjustSizes" type="int[]" line="376">
                <params>
                    <param name="delta" type="int"/>
                    <param name="children" type="SizeRequirements[]"/>
                </params>
            </method>
        </class>
    </source>