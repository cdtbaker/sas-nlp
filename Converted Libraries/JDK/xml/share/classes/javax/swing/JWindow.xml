<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.accessibility"/>
        <class name="JWindow" line="9">
            <extends class="Window"/>
            <implements interface="Accessible"/>
            <implements interface="RootPaneContainer"/>
            <implements interface="TransferHandler.HasGetTransferHandler"/>
            <javadoc line="9">
                A &lt;code&gt;JWindow&lt;/code&gt; is a container that can be displayed anywhere on the
                  user&apos;s desktop. It does not have the title bar, window-management buttons,
                  or other trimmings associated with a &lt;code&gt;JFrame&lt;/code&gt;, but it is still a
                  &quot;first-class citizen&quot; of the user&apos;s desktop, and can exist anywhere
                  on it.
                  &lt;p&gt;
                  The &lt;code&gt;JWindow&lt;/code&gt; component contains a &lt;code&gt;JRootPane&lt;/code&gt;
                  as its only child.  The &lt;code&gt;contentPane&lt;/code&gt; should be the parent
                  of any children of the &lt;code&gt;JWindow&lt;/code&gt;.
                  As a conveniance &lt;code&gt;add&lt;/code&gt; and its variants, &lt;code&gt;remove&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; have been overridden to forward to the
                  &lt;code&gt;contentPane&lt;/code&gt; as necessary. This means you can write:
                  &lt;pre&gt;
                  window.add(child);
                  &lt;/pre&gt;
                  And the child will be added to the contentPane.
                  The &lt;code&gt;contentPane&lt;/code&gt; will always be non-&lt;code&gt;null&lt;/code&gt;.
                  Attempting to set it to &lt;code&gt;null&lt;/code&gt; will cause the &lt;code&gt;JWindow&lt;/code&gt;
                  to throw an exception. The default &lt;code&gt;contentPane&lt;/code&gt; will have a
                  &lt;code&gt;BorderLayout&lt;/code&gt; manager set on it.
                  Refer to {@link javax.swing.RootPaneContainer}for details on adding, removing and setting the &lt;code&gt;LayoutManager&lt;/code&gt;
                  of a &lt;code&gt;JWindow&lt;/code&gt;.
                  &lt;p&gt;
                  Please see the {@link JRootPane} documentation for a complete description of
                  the &lt;code&gt;contentPane&lt;/code&gt;, &lt;code&gt;glassPane&lt;/code&gt;, and
                  &lt;code&gt;layeredPane&lt;/code&gt; components.
                  &lt;p&gt;
                  In a multi-screen environment, you can create a &lt;code&gt;JWindow&lt;/code&gt;
                  on a different screen device.  See {@link java.awt.Window} for more
                  information.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JRootPane                    
                </see>
                <beaninfoattribute>
                    : isContainer true
                      attribute: containerDelegate getContentPane
                      description: A toplevel window which has no system border or controls.                    
                </beaninfoattribute>
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="rootPane" type="JRootPane" line="61"/>
            <javadoc line="61">
                The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the
                  &lt;code&gt;contentPane&lt;/code&gt;
                  and optional &lt;code&gt;menuBar&lt;/code&gt; for this frame, as well as the
                  &lt;code&gt;glassPane&lt;/code&gt;.                
                <see>
                    #getRootPane                    
                </see>
                <see>
                    #setRootPane                    
                </see>
            </javadoc>
            <declaration name="rootPaneCheckingEnabled" type="boolean" line="70"/>
            <javadoc line="70">
                If true then calls to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt;
                  will be forwarded to the &lt;code&gt;contentPane&lt;/code&gt;. This is initially
                  false, but is set to true when the &lt;code&gt;JWindow&lt;/code&gt; is constructed.                
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <declaration name="transferHandler" type="TransferHandler" line="79"/>
            <javadoc line="79">
                The &lt;code&gt;TransferHandler&lt;/code&gt; for this window.                
            </javadoc>
            <javadoc line="83">
                Creates a window with no specified owner. This window will not be
                  focusable.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <throws>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns true.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JWindow" type="constructor" line="95"/>
            <javadoc line="98">
                Creates a window with the specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;
                  of a screen device. This window will not be focusable.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    gc the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; that is used
                      to construct the new window with; if gc is &lt;code&gt;null&lt;/code&gt;,
                      the system default &lt;code&gt;GraphicsConfiguration&lt;/code&gt;
                      is assumed                    
                </param>
                <throws>
                    HeadlessException If
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns true.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;gc&lt;/code&gt; is not from
                      a screen device.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JWindow" type="constructor" line="117">
                <params>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
            </method>
            <javadoc line="121">
                Creates a window with the specified owner frame.
                  If &lt;code&gt;owner&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the shared owner
                  will be used and this window will not be focusable. Also,
                  this window will not be focusable unless its owner is showing
                  on the screen.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    owner the frame from which the window is displayed                    
                </param>
                <throws>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JWindow" type="constructor" line="137">
                <params>
                    <param name="owner" type="Frame"/>
                </params>
                <scope line="139">
                    <declaration name="ownerShutdownListener" type="WindowListener" line="140"/>
                </scope>
            </method>
            <javadoc line="145">
                Creates a window with the specified owner window. This window
                  will not be focusable unless its owner is showing on the screen.
                  If &lt;code&gt;owner&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the shared owner
                  will be used and this window will not be focusable.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    owner the window from which the window is displayed                    
                </param>
                <throws>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns true.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JWindow" type="constructor" line="160">
                <params>
                    <param name="owner" type="Window"/>
                </params>
                <scope line="162">
                    <declaration name="ownerShutdownListener" type="WindowListener" line="163"/>
                </scope>
            </method>
            <javadoc line="168">
                Creates a window with the specified owner window and
                  &lt;code&gt;GraphicsConfiguration&lt;/code&gt; of a screen device. If
                  &lt;code&gt;owner&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the shared owner will be used
                  and this window will not be focusable.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <param>
                    owner the window from which the window is displayed                    
                </param>
                <param>
                    gc the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; that is used
                      to construct the new window with; if gc is &lt;code&gt;null&lt;/code&gt;,
                      the system default &lt;code&gt;GraphicsConfiguration&lt;/code&gt;
                      is assumed, unless &lt;code&gt;owner&lt;/code&gt; is also null, in which
                      case the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; from the
                      shared owner frame will be used.                    
                </param>
                <throws>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt; returns true.                    
                </throws>
                <throws>
                    IllegalArgumentException if &lt;code&gt;gc&lt;/code&gt; is not from
                      a screen device.                    
                </throws>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #isFocusableWindow                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JWindow" type="constructor" line="192">
                <params>
                    <param name="owner" type="Window"/>
                    <param name="gc" type="GraphicsConfiguration"/>
                </params>
                <scope line="194">
                    <declaration name="ownerShutdownListener" type="WindowListener" line="195"/>
                </scope>
            </method>
            <javadoc line="200">
                Called by the constructors to init the &lt;code&gt;JWindow&lt;/code&gt; properly.                
            </javadoc>
            <method name="windowInit" type="void" line="203"/>
            <javadoc line="209">
                Called by the constructor methods to create the default
                  &lt;code&gt;rootPane&lt;/code&gt;.                
            </javadoc>
            <method name="createRootPane" type="JRootPane" line="213">
                <declaration name="rp" type="JRootPane" line="214"/>
            </method>
            <javadoc line="218">
                Returns whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <return>
                    true if &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt;
                      are fowarded; false otherwise                    
                </return>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="isRootPaneCheckingEnabled" type="boolean" line="228"/>
            <javadoc line="231">
                Sets the {@code transferHandler} property, which is a mechanism to
                  support transfer of data into this component. Use {@code null}if the component does not support data transfer operations.
                  &lt;p&gt;
                  If the system property {@code suppressSwingDropSupport} is {@code false}(the default) and the current drop target on this component is either{@code null} or not a user-set drop target, this method will change the
                  drop target as follows: If {@code newHandler} is {@code null} it will
                  clear the drop target. If not {@code null} it will install a new{@code DropTarget}.
                  &lt;p&gt;
                  Note: When used with {@code JWindow}, {@code TransferHandler} only
                  provides data import capability, as the data export related methods
                  are currently typed to {@code JComponent}.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html&quot;&gt;
                  How to Use Drag and Drop and Data Transfer&lt;/a&gt;, a section in
                  &lt;em&gt;The Java Tutorial&lt;/em&gt;, for more information.                
                <param>
                    newHandler the new {@code TransferHandler}                    
                </param>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #getTransferHandler                    
                </see>
                <see>
                    java.awt.Component#setDropTarget                    
                </see>
                <since>
                    1.6                    
                </since>
                <beaninfobound>
                    : true
                      hidden: true
                      description: Mechanism for transfer of data into the component                    
                </beaninfobound>
            </javadoc>
            <method name="setTransferHandler" type="void" line="256">
                <params>
                    <param name="newHandler" type="TransferHandler"/>
                </params>
                <declaration name="oldHandler" type="TransferHandler" line="257"/>
            </method>
            <javadoc line="262">
                Gets the &lt;code&gt;transferHandler&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;transferHandler&lt;/code&gt; property                    
                </return>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTransferHandler" type="TransferHandler" line="269"/>
            <javadoc line="272">
                Calls &lt;code&gt;paint(g)&lt;/code&gt;.  This method was overridden to
                  prevent an unnecessary call to clear the background.                
                <param>
                    g  the &lt;code&gt;Graphics&lt;/code&gt; context in which to paint                    
                </param>
            </javadoc>
            <method name="update" type="void" line="277">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="280">
                Sets whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    enabled  true if &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt;
                      are forwarded, false if they should operate directly on the
                      &lt;code&gt;JWindow&lt;/code&gt;.                    
                </param>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfohidden>
                    : true
                      description: Whether the add and setLayout methods are forwarded                    
                </beaninfohidden>
            </javadoc>
            <method name="setRootPaneCheckingEnabled" type="void" line="293">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="296">
                Adds the specified child &lt;code&gt;Component&lt;/code&gt;.
                  This method is overridden to conditionally forward calls to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  By default, children are added to the &lt;code&gt;contentPane&lt;/code&gt; instead
                  of the frame, refer to {@link javax.swing.RootPaneContainer} for
                  details.                
                <param>
                    comp the component to be enhanced                    
                </param>
                <param>
                    constraints the constraints to be respected                    
                </param>
                <param>
                    index the index                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;index&lt;/code&gt; is invalid                    
                </exception>
                <exception>
                    IllegalArgumentException if adding the container&apos;s parent
                      to itself                    
                </exception>
                <exception>
                    IllegalArgumentException if adding a window to a container                    
                </exception>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="313">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="314"/>
                <scope line="317"/>
            </method>
            <javadoc line="321">
                Removes the specified component from the container. If
                  &lt;code&gt;comp&lt;/code&gt; is not the &lt;code&gt;rootPane&lt;/code&gt;, this will forward
                  the call to the &lt;code&gt;contentPane&lt;/code&gt;. This will do nothing if
                  &lt;code&gt;comp&lt;/code&gt; is not a child of the &lt;code&gt;JWindow&lt;/code&gt; or
                  &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    comp the component to be removed                    
                </param>
                <throws>
                    NullPointerException if &lt;code&gt;comp&lt;/code&gt; is null                    
                </throws>
                <see>
                    #add                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="332">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="333"/>
                <scope line="336"/>
            </method>
            <javadoc line="340">
                Sets the &lt;code&gt;LayoutManager&lt;/code&gt;.
                  Overridden to conditionally forward the call to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  Refer to {@link javax.swing.RootPaneContainer} for
                  more information.                
                <param>
                    manager the &lt;code&gt;LayoutManager&lt;/code&gt;                    
                </param>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="setLayout" type="void" line="350">
                <params>
                    <param name="manager" type="LayoutManager"/>
                </params>
                <scope line="351"/>
                <scope line="354"/>
            </method>
            <javadoc line="358">
                Returns the &lt;code&gt;rootPane&lt;/code&gt; object for this window.                
                <return>
                    the &lt;code&gt;rootPane&lt;/code&gt; property for this window                    
                </return>
                <see>
                    #setRootPane                    
                </see>
                <see>
                    RootPaneContainer#getRootPane                    
                </see>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="364"/>
            <javadoc line="367">
                Sets the new &lt;code&gt;rootPane&lt;/code&gt; object for this window.
                  This method is called by the constructor.                
                <param>
                    root the new &lt;code&gt;rootPane&lt;/code&gt; property                    
                </param>
                <see>
                    #getRootPane                    
                </see>
                <beaninfohidden>
                    : true
                      description: the RootPane object for this window.                    
                </beaninfohidden>
            </javadoc>
            <method name="setRootPane" type="void" line="375">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="376"/>
                <scope line="380">
                    <declaration name="checkingEnabled" type="boolean" line="381"/>
                    <scope line="382"/>
                    <scope line="386"/>
                </scope>
            </method>
            <javadoc line="391">
                Returns the &lt;code&gt;Container&lt;/code&gt; which is the &lt;code&gt;contentPane&lt;/code&gt;
                  for this window.                
                <return>
                    the &lt;code&gt;contentPane&lt;/code&gt; property                    
                </return>
                <see>
                    #setContentPane                    
                </see>
                <see>
                    RootPaneContainer#getContentPane                    
                </see>
            </javadoc>
            <method name="getContentPane" type="Container" line="398"/>
            <javadoc line="401">
                Sets the &lt;code&gt;contentPane&lt;/code&gt; property for this window.
                  This method is called by the constructor.                
                <param>
                    contentPane the new &lt;code&gt;contentPane&lt;/code&gt;                    
                </param>
                <exception>
                    IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    #getContentPane                    
                </see>
                <see>
                    RootPaneContainer#setContentPane                    
                </see>
                <beaninfohidden>
                    : true
                      description: The client area of the window where child
                      components are normally inserted.                    
                </beaninfohidden>
            </javadoc>
            <method name="setContentPane" type="void" line="413">
                <params>
                    <param name="contentPane" type="Container"/>
                </params>
            </method>
            <javadoc line="416">
                Returns the &lt;code&gt;layeredPane&lt;/code&gt; object for this window.                
                <return>
                    the &lt;code&gt;layeredPane&lt;/code&gt; property                    
                </return>
                <see>
                    #setLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#getLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="422"/>
            <javadoc line="425">
                Sets the &lt;code&gt;layeredPane&lt;/code&gt; property.
                  This method is called by the constructor.                
                <param>
                    layeredPane the new &lt;code&gt;layeredPane&lt;/code&gt; object                    
                </param>
                <exception>
                    IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    #getLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#setLayeredPane                    
                </see>
                <beaninfohidden>
                    : true
                      description: The pane which holds the various window layers.                    
                </beaninfohidden>
            </javadoc>
            <method name="setLayeredPane" type="void" line="436">
                <params>
                    <param name="layeredPane" type="JLayeredPane"/>
                </params>
            </method>
            <javadoc line="439">
                Returns the &lt;code&gt;glassPane Component&lt;/code&gt; for this window.                
                <return>
                    the &lt;code&gt;glassPane&lt;/code&gt; property                    
                </return>
                <see>
                    #setGlassPane                    
                </see>
                <see>
                    RootPaneContainer#getGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="445"/>
            <javadoc line="448">
                Sets the &lt;code&gt;glassPane&lt;/code&gt; property.
                  This method is called by the constructor.                
                <param>
                    glassPane the &lt;code&gt;glassPane&lt;/code&gt; object for this window                    
                </param>
                <see>
                    #getGlassPane                    
                </see>
                <see>
                    RootPaneContainer#setGlassPane                    
                </see>
                <beaninfohidden>
                    : true
                      description: A transparent pane used for menu rendering.                    
                </beaninfohidden>
            </javadoc>
            <method name="setGlassPane" type="void" line="457">
                <params>
                    <param name="glassPane" type="Component"/>
                </params>
            </method>
            <javadoc line="460">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="464"/>
            <javadoc line="468">
                Repaints the specified rectangle of this component within
                  &lt;code&gt;time&lt;/code&gt; milliseconds.  Refer to &lt;code&gt;RepaintManager&lt;/code&gt;
                  for details on how the repaint is handled.                
                <param>
                    time   maximum time in milliseconds before update                    
                </param>
                <param>
                    x    the &lt;i&gt;x&lt;/i&gt; coordinate                    
                </param>
                <param>
                    y    the &lt;i&gt;y&lt;/i&gt; coordinate                    
                </param>
                <param>
                    width    the width                    
                </param>
                <param>
                    height   the height                    
                </param>
                <see>
                    RepaintManager                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="480">
                <params>
                    <param name="time" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="481"/>
                <scope line="484"/>
            </method>
            <javadoc line="488">
                Returns a string representation of this &lt;code&gt;JWindow&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JWindow&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="497">
                <declaration name="rootPaneCheckingEnabledString" type="String" line="498"/>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="501"/>
            <javadoc line="501">
                The accessible context property.                
            </javadoc>
            <javadoc line="505">
                Gets the AccessibleContext associated with this JWindow.
                  For JWindows, the AccessibleContext takes the form of an
                  AccessibleJWindow.
                  A new AccessibleJWindow instance is created if necessary.                
                <return>
                    an AccessibleJWindow that serves as the
                      AccessibleContext of this JWindow                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="513">
                <scope line="514"/>
            </method>
            <class name="AccessibleJWindow" line="519">
                <extends class="AccessibleAWTWindow"/>
                <javadoc line="519">
                    This class implements accessibility support for the
                      &lt;code&gt;JWindow&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to window user-interface
                      elements.                    
                </javadoc>
            </class>
        </class>
    </source>