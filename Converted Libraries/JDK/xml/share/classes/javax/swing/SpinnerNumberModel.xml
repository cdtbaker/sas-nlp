<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <import package="java.io.Serializable"/>
        <class name="SpinnerNumberModel" line="32">
            <extends class="AbstractSpinnerModel"/>
            <implements interface="Serializable"/>
            <javadoc line="32">
                A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers.
                  The upper and lower bounds of the sequence are defined
                  by properties called &lt;code&gt;minimum&lt;/code&gt; and
                  &lt;code&gt;maximum&lt;/code&gt;. The size of the increase or decrease
                  computed by the &lt;code&gt;nextValue&lt;/code&gt; and
                  &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called
                  &lt;code&gt;stepSize&lt;/code&gt;.  The &lt;code&gt;minimum&lt;/code&gt; and
                  &lt;code&gt;maximum&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt;
                  to indicate that the sequence has no lower or upper limit.
                  All of the properties in this class are defined in terms of two
                  generic types: &lt;code&gt;Number&lt;/code&gt; and
                  &lt;code&gt;Comparable&lt;/code&gt;, so that all Java numeric types
                  may be accommodated.  Internally, there&apos;s only support for
                  values whose type is one of the primitive &lt;code&gt;Number&lt;/code&gt; types:
                  &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;,
                  &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, or &lt;code&gt;Byte&lt;/code&gt;.
                  &lt;p&gt;
                  To create a &lt;code&gt;SpinnerNumberModel&lt;/code&gt; for the integer
                  range zero to one hundred, with
                  fifty as the initial value, one could write:
                  &lt;pre&gt;
                  Integer value = new Integer(50);
                  Integer min = new Integer(0);
                  Integer max = new Integer(100);
                  Integer step = new Integer(1);
                  SpinnerNumberModel model = new SpinnerNumberModel(value, min, max, step);
                  int fifty = model.getNumber().intValue();
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Spinners for integers and doubles are common, so special constructors
                  for these cases are provided.  For example to create the model in
                  the previous example, one could also write:
                  &lt;pre&gt;
                  SpinnerNumberModel model = new SpinnerNumberModel(50, 0, 100, 1);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This model inherits a &lt;code&gt;ChangeListener&lt;/code&gt;.
                  The &lt;code&gt;ChangeListeners&lt;/code&gt; are notified
                  whenever the model&apos;s &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;stepSize&lt;/code&gt;,
                  &lt;code&gt;minimum&lt;/code&gt;, or &lt;code&gt;maximum&lt;/code&gt; properties changes.                
                <see>
                    JSpinner                    
                </see>
                <see>
                    SpinnerModel                    
                </see>
                <see>
                    AbstractSpinnerModel                    
                </see>
                <see>
                    SpinnerListModel                    
                </see>
                <see>
                    SpinnerDateModel                    
                </see>
                <author>
                    Hans Muller                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="stepSize" type="Number" line="85"/>
            <declaration name="minimum" type="Comparable" line="86"/>
            <javadoc line="89">
                Constructs a &lt;code&gt;SpinnerModel&lt;/code&gt; that represents
                  a closed sequence of
                  numbers from &lt;code&gt;minimum&lt;/code&gt; to &lt;code&gt;maximum&lt;/code&gt;.  The
                  &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods
                  compute elements of the sequence by adding or subtracting
                  &lt;code&gt;stepSize&lt;/code&gt; respectively.  All of the parameters
                  must be mutually &lt;code&gt;Comparable&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;
                  and &lt;code&gt;stepSize&lt;/code&gt; must be instances of &lt;code&gt;Integer&lt;/code&gt;
                  &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, or &lt;code&gt;Double&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; parameters
                  can be &lt;code&gt;null&lt;/code&gt; to indicate that the range doesn&apos;t
                  have an upper or lower bound.
                  If &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;stepSize&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  or if both &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt;
                  are specified and &lt;code&gt;mininum &amp;gt; maximum&lt;/code&gt; then an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  Similarly if &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum&lt;/code&gt;) is false,
                  an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.                
                <param>
                    value the current (non &lt;code&gt;null&lt;/code&gt;) value of the model                    
                </param>
                <param>
                    minimum the first number in the sequence or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    maximum the last number in the sequence or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    stepSize the difference between elements of the sequence                    
                </param>
                <throws>
                    IllegalArgumentException if stepSize or value is
                      &lt;code&gt;null&lt;/code&gt; or if the following expression is false:
                      &lt;code&gt;minimum &amp;lt;= value &amp;lt;= maximum&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="SpinnerNumberModel" type="constructor" line="119">
                <params>
                    <param name="value" type="Number"/>
                    <param name="minimum" type="Comparable"/>
                    <param name="maximum" type="Comparable"/>
                    <param name="stepSize" type="Number"/>
                </params>
                <scope line="120"/>
                <scope line="124"/>
            </method>
            <javadoc line="134">
                Constructs a &lt;code&gt;SpinnerNumberModel&lt;/code&gt; with the specified
                  &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;minimum&lt;/code&gt;/&lt;code&gt;maximum&lt;/code&gt; bounds,
                  and &lt;code&gt;stepSize&lt;/code&gt;.                
                <param>
                    value the current value of the model                    
                </param>
                <param>
                    minimum the first number in the sequence                    
                </param>
                <param>
                    maximum the last number in the sequence                    
                </param>
                <param>
                    stepSize the difference between elements of the sequence                    
                </param>
                <throws>
                    IllegalArgumentException if the following expression is false:
                      &lt;code&gt;minimum &amp;lt;= value &amp;lt;= maximum&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="SpinnerNumberModel" type="constructor" line="146">
                <params>
                    <param name="value" type="int"/>
                    <param name="minimum" type="int"/>
                    <param name="maximum" type="int"/>
                    <param name="stepSize" type="int"/>
                </params>
            </method>
            <javadoc line="151">
                Constructs a &lt;code&gt;SpinnerNumberModel&lt;/code&gt; with the specified
                  &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;minimum&lt;/code&gt;/&lt;code&gt;maximum&lt;/code&gt; bounds,
                  and &lt;code&gt;stepSize&lt;/code&gt;.                
                <param>
                    value the current value of the model                    
                </param>
                <param>
                    minimum the first number in the sequence                    
                </param>
                <param>
                    maximum the last number in the sequence                    
                </param>
                <param>
                    stepSize the difference between elements of the sequence                    
                </param>
                <throws>
                    IllegalArgumentException   if the following expression is false:
                      &lt;code&gt;minimum &amp;lt;= value &amp;lt;= maximum&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="SpinnerNumberModel" type="constructor" line="163">
                <params>
                    <param name="value" type="double"/>
                    <param name="minimum" type="double"/>
                    <param name="maximum" type="double"/>
                    <param name="stepSize" type="double"/>
                </params>
            </method>
            <javadoc line="168">
                Constructs a &lt;code&gt;SpinnerNumberModel&lt;/code&gt; with no
                  &lt;code&gt;minimum&lt;/code&gt; or &lt;code&gt;maximum&lt;/code&gt; value,
                  &lt;code&gt;stepSize&lt;/code&gt; equal to one, and an initial value of zero.                
            </javadoc>
            <method name="SpinnerNumberModel" type="constructor" line="173"/>
            <javadoc line="178">
                Changes the lower bound for numbers in this sequence.
                  If &lt;code&gt;minimum&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  then there is no lower bound.  No bounds checking is done here;
                  the new &lt;code&gt;minimum&lt;/code&gt; value may invalidate the
                  &lt;code&gt;(minimum &amp;lt;= value &amp;lt= maximum)&lt;/code&gt;
                  invariant enforced by the constructors.  This is to simplify updating
                  the model, naturally one should ensure that the invariant is true
                  before calling the &lt;code&gt;getNextValue&lt;/code&gt;,
                  &lt;code&gt;getPreviousValue&lt;/code&gt;, or &lt;code&gt;setValue&lt;/code&gt; methods.
                  &lt;p&gt;
                  Typically this property is a &lt;code&gt;Number&lt;/code&gt; of the same type
                  as the &lt;code&gt;value&lt;/code&gt; however it&apos;s possible to use any
                  &lt;code&gt;Comparable&lt;/code&gt; with a &lt;code&gt;compareTo&lt;/code&gt;
                  method for a &lt;code&gt;Number&lt;/code&gt; with the same type as the value.
                  For example if value was a &lt;code&gt;Long&lt;/code&gt;,
                  &lt;code&gt;minimum&lt;/code&gt; might be a Date subclass defined like this:
                  &lt;pre&gt;
                  MyDate extends Date {  // Date already implements Comparable
                  public int compareTo(Long o) {
                  long t = getTime();
                  return (t &lt; o.longValue() ? -1 : (t == o.longValue() ? 0 : 1));
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt;
                  if the &lt;code&gt;minimum&lt;/code&gt; has changed.                
                <param>
                    minimum a &lt;code&gt;Comparable&lt;/code&gt; that has a
                      &lt;code&gt;compareTo&lt;/code&gt; method for &lt;code&gt;Number&lt;/code&gt;s with
                      the same type as &lt;code&gt;value&lt;/code&gt;                    
                </param>
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    SpinnerModel#addChangeListener                    
                </see>
            </javadoc>
            <method name="setMinimum" type="void" line="214">
                <params>
                    <param name="minimum" type="Comparable"/>
                </params>
                <scope line="215"/>
            </method>
            <javadoc line="222">
                Returns the first number in this sequence.                
                <return>
                    the value of the &lt;code&gt;minimum&lt;/code&gt; property                    
                </return>
                <see>
                    #setMinimum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="Comparable" line="228"/>
            <javadoc line="233">
                Changes the upper bound for numbers in this sequence.
                  If &lt;code&gt;maximum&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then there
                  is no upper bound.  No bounds checking is done here; the new
                  &lt;code&gt;maximum&lt;/code&gt; value may invalidate the
                  &lt;code&gt;(minimum &lt;= value &lt; maximum)&lt;/code&gt;
                  invariant enforced by the constructors.  This is to simplify updating
                  the model, naturally one should ensure that the invariant is true
                  before calling the &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;previous&lt;/code&gt;,
                  or &lt;code&gt;setValue&lt;/code&gt; methods.
                  &lt;p&gt;
                  Typically this property is a &lt;code&gt;Number&lt;/code&gt; of the same type
                  as the &lt;code&gt;value&lt;/code&gt; however it&apos;s possible to use any
                  &lt;code&gt;Comparable&lt;/code&gt; with a &lt;code&gt;compareTo&lt;/code&gt;
                  method for a &lt;code&gt;Number&lt;/code&gt; with the same type as the value.
                  See &lt;a href=&quot;#setMinimum(java.lang.Comparable)&quot;&gt;
                  &lt;code&gt;setMinimum&lt;/code&gt;&lt;/a&gt; for an example.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the
                  &lt;code&gt;maximum&lt;/code&gt; has changed.                
                <param>
                    maximum a &lt;code&gt;Comparable&lt;/code&gt; that has a
                      &lt;code&gt;compareTo&lt;/code&gt; method for &lt;code&gt;Number&lt;/code&gt;s with
                      the same type as &lt;code&gt;value&lt;/code&gt;                    
                </param>
                <see>
                    #getMaximum                    
                </see>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    SpinnerModel#addChangeListener                    
                </see>
            </javadoc>
            <method name="setMaximum" type="void" line="261">
                <params>
                    <param name="maximum" type="Comparable"/>
                </params>
                <scope line="262"/>
            </method>
            <javadoc line="269">
                Returns the last number in the sequence.                
                <return>
                    the value of the &lt;code&gt;maximum&lt;/code&gt; property                    
                </return>
                <see>
                    #setMaximum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="Comparable" line="275"/>
            <javadoc line="280">
                Changes the size of the value change computed by the
                  &lt;code&gt;getNextValue&lt;/code&gt; and &lt;code&gt;getPreviousValue&lt;/code&gt;
                  methods.  An &lt;code&gt;IllegalArgumentException&lt;/code&gt;
                  is thrown if &lt;code&gt;stepSize&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the
                  &lt;code&gt;stepSize&lt;/code&gt; has changed.                
                <param>
                    stepSize the size of the value change computed by the
                      &lt;code&gt;getNextValue&lt;/code&gt; and &lt;code&gt;getPreviousValue&lt;/code&gt; methods                    
                </param>
                <see>
                    #getNextValue                    
                </see>
                <see>
                    #getPreviousValue                    
                </see>
                <see>
                    #getStepSize                    
                </see>
                <see>
                    SpinnerModel#addChangeListener                    
                </see>
            </javadoc>
            <method name="setStepSize" type="void" line="296">
                <params>
                    <param name="stepSize" type="Number"/>
                </params>
                <scope line="297"/>
                <scope line="300"/>
            </method>
            <javadoc line="307">
                Returns the size of the value change computed by the
                  &lt;code&gt;getNextValue&lt;/code&gt;
                  and &lt;code&gt;getPreviousValue&lt;/code&gt; methods.                
                <return>
                    the value of the &lt;code&gt;stepSize&lt;/code&gt; property                    
                </return>
                <see>
                    #setStepSize                    
                </see>
            </javadoc>
            <method name="getStepSize" type="Number" line="315"/>
            <method name="incrValue" type="Number" line="321">
                <params>
                    <param name="dir" type="int"/>
                </params>
                <declaration name="newValue" type="Number" line="322"/>
                <scope line="323">
                    <declaration name="v" type="double" line="324"/>
                    <scope line="325"/>
                    <scope line="328"/>
                </scope>
                <scope line="332">
                    <declaration name="v" type="long" line="333"/>
                    <scope line="335"/>
                    <scope line="338"/>
                    <scope line="341"/>
                    <scope line="344"/>
                </scope>
                <scope line="349"/>
                <scope line="352"/>
                <scope line="355"/>
            </method>
            <javadoc line="361">
                Returns the next number in the sequence.                
                <return>
                    &lt;code&gt;value + stepSize&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if the sum
                      exceeds &lt;code&gt;maximum&lt;/code&gt;.                    
                </return>
                <see>
                    SpinnerModel#getNextValue                    
                </see>
                <see>
                    #getPreviousValue                    
                </see>
                <see>
                    #setStepSize                    
                </see>
            </javadoc>
            <method name="getNextValue" type="Object" line="371"/>
            <javadoc line="376">
                Returns the previous number in the sequence.                
                <return>
                    &lt;code&gt;value - stepSize&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; if the sum is less
                      than &lt;code&gt;minimum&lt;/code&gt;.                    
                </return>
                <see>
                    SpinnerModel#getPreviousValue                    
                </see>
                <see>
                    #getNextValue                    
                </see>
                <see>
                    #setStepSize                    
                </see>
            </javadoc>
            <method name="getPreviousValue" type="Object" line="387"/>
            <javadoc line="392">
                Returns the value of the current element of the sequence.                
                <return>
                    the value property                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="getNumber" type="Number" line="398"/>
            <javadoc line="403">
                Returns the value of the current element of the sequence.                
                <return>
                    the value property                    
                </return>
                <see>
                    #setValue                    
                </see>
                <see>
                    #getNumber                    
                </see>
            </javadoc>
            <method name="getValue" type="Object" line="410"/>
            <javadoc line="415">
                Sets the current value for this sequence.  If &lt;code&gt;value&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, or not a &lt;code&gt;Number&lt;/code&gt;, an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.  No
                  bounds checking is done here; the new value may invalidate the
                  &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code&gt;
                  invariant enforced by the constructors.   It&apos;s also possible to set
                  the value to be something that wouldn&apos;t naturally occur in the sequence,
                  i.e. a value that&apos;s not modulo the &lt;code&gt;stepSize&lt;/code&gt;.
                  This is to simplify updating the model, and to accommodate
                  spinners that don&apos;t want to restrict values that have been
                  directly entered by the user. Naturally, one should ensure that the
                  &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code&gt; invariant is true
                  before calling the &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;previous&lt;/code&gt;, or
                  &lt;code&gt;setValue&lt;/code&gt; methods.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the value has changed.                
                <param>
                    value the current (non &lt;code&gt;null&lt;/code&gt;) &lt;code&gt;Number&lt;/code&gt;
                      for this sequence                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;value&lt;/code&gt; is
                      &lt;code&gt;null&lt;/code&gt; or not a &lt;code&gt;Number&lt;/code&gt;                    
                </throws>
                <see>
                    #getNumber                    
                </see>
                <see>
                    #getValue                    
                </see>
                <see>
                    SpinnerModel#addChangeListener                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="441">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="442"/>
                <scope line="445"/>
            </method>
        </class>
    </source>