<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <interface name="ListCellRenderer">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <javadoc line="31">
                Identifies components that can be used as &quot;rubber stamps&quot; to paint
                  the cells in a JList.  For example, to use a JLabel as a
                  ListCellRenderer, you would write something like this:
                  &lt;pre&gt;{@code}class MyCellRenderer extends JLabel implements ListCellRenderer&lt;Object&gt; 
                  public MyCellRenderer() {
                  setOpaque(true);
                  }
                  public Component getListCellRendererComponent(JList&lt;?&gt; list,
                  Object value,
                  int index,
                  boolean isSelected,
                  boolean cellHasFocus) {
                  setText(value.toString());
                  Color background;
                  Color foreground;
                  // check if this cell represents the current DnD drop location
                  JList.DropLocation dropLocation = list.getDropLocation();
                  if (dropLocation != null
                  &amp;&amp; !dropLocation.isInsert()
                  &amp;&amp; dropLocation.getIndex() == index) {
                  background = Color.BLUE;
                  foreground = Color.WHITE;
                  // check if this cell is selected
                  } else if (isSelected) {
                  background = Color.RED;
                  foreground = Color.WHITE;
                  // unselected, and not the DnD drop location
                  } else {
                  background = Color.WHITE;
                  foreground = Color.BLACK;
                  };
                  setBackground(background);
                  setForeground(foreground);
                  return this;
                  }
                  }
                  }
                  &lt;/pre&gt;                
                <param>
                    &lt;E&gt;
                       the type of values this renderer can be used for                    
                </param>
                <see>
                    JList                    
                </see>
                <see>
                    DefaultListCellRenderer                    
                </see>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <method name="getListCellRendererComponent" type="Component" line="91"/>
            <javadoc line="91">
                Return a component that has been configured to display the specified
                  value. That component&apos;s &lt;code&gt;paint&lt;/code&gt; method is then called to
                  &quot;render&quot; the cell.  If it is necessary to compute the dimensions
                  of a list because the list cells do not have a fixed size, this method
                  is called to generate a component on which &lt;code&gt;getPreferredSize&lt;/code&gt;
                  can be invoked.                
                <param>
                    list The JList we&apos;re painting.                    
                </param>
                <param>
                    value The value returned by list.getModel().getElementAt(index).                    
                </param>
                <param>
                    index The cells index.                    
                </param>
                <param>
                    isSelected True if the specified cell was selected.                    
                </param>
                <param>
                    cellHasFocus True if the specified cell has the focus.                    
                </param>
                <return>
                    A component whose paint() method will render the specified value.                    
                </return>
                <see>
                    JList                    
                </see>
                <see>
                    ListSelectionModel                    
                </see>
                <see>
                    ListModel                    
                </see>
            </javadoc>
        </interface>
    </source>