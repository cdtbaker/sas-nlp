<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.security.AccessController"/>
        <import package="javax.swing.event.SwingPropertyChangeSupport"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <class name="AbstractAction" line="40">
            <implements interface="Action"/>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="40">
                This class provides default implementations for the JFC &lt;code&gt;Action&lt;/code&gt;
                  interface. Standard behaviors like the get and set methods for
                  &lt;code&gt;Action&lt;/code&gt; object properties (icon, text, and enabled) are defined
                  here. The developer need only subclass this abstract class and
                  define the &lt;code&gt;actionPerformed&lt;/code&gt; method.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Georges Saab                    
                </author>
                <see>
                    Action                    
                </see>
            </javadoc>
            <declaration name="RECONFIGURE_ON_NULL" type="Boolean" line="61"/>
            <javadoc line="61">
                Whether or not actions should reconfigure all properties on null.                
            </javadoc>
            <declaration name="enabled" type="boolean" line="66"/>
            <javadoc line="66">
                Specifies whether action is enabled; the default is true.                
            </javadoc>
            <declaration name="arrayTable" type="ArrayTable" line="72"/>
            <javadoc line="72">
                Contains the array of key bindings.                
            </javadoc>
            <javadoc line="77">
                Whether or not to reconfigure all action properties from the
                  specified event.                
            </javadoc>
            <method name="shouldReconfigure" type="boolean" line="81">
                <params>
                    <param name="e" type="PropertyChangeEvent"/>
                </params>
                <scope line="82">
                    <scope line="83">
                        <scope line="84"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="95">
                Sets the enabled state of a component from an Action.                
                <param>
                    c the Component to set the enabled state on                    
                </param>
                <param>
                    a the Action to set the enabled state from, may be null                    
                </param>
            </javadoc>
            <method name="setEnabledFromAction" type="void" line="101">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="105">
                Sets the tooltip text of a component from an Action.                
                <param>
                    c the Component to set the tooltip text on                    
                </param>
                <param>
                    a the Action to set the tooltip text from, may be null                    
                </param>
            </javadoc>
            <method name="setToolTipTextFromAction" type="void" line="111">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="hasSelectedKey" type="boolean" line="116">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="isSelected" type="boolean" line="120">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="126">
                Creates an {@code Action}.                
            </javadoc>
            <method name="AbstractAction" type="constructor" line="129"/>
            <javadoc line="132">
                Creates an {@code Action} with the specified name.                
                <param>
                    name the name ({@code Action.NAME}) for the action; a
                      value of {@code null} is ignored                    
                </param>
            </javadoc>
            <method name="AbstractAction" type="constructor" line="138">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="142">
                Creates an {@code Action} with the specified name and small icon.                
                <param>
                    name the name ({@code Action.NAME}) for the action; a
                      value of {@code null} is ignored                    
                </param>
                <param>
                    icon the small icon ({@code Action.SMALL_ICON}) for the action; a
                      value of {@code null} is ignored                    
                </param>
            </javadoc>
            <method name="AbstractAction" type="constructor" line="150">
                <params>
                    <param name="name" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="155">
                Gets the &lt;code&gt;Object&lt;/code&gt; associated with the specified key.                
                <param>
                    key a string containing the specified &lt;code&gt;key&lt;/code&gt;                    
                </param>
                <return>
                    the binding &lt;code&gt;Object&lt;/code&gt; stored with this key; if there
                      are no keys, it will return &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    Action#getValue                    
                </see>
            </javadoc>
            <method name="getValue" type="Object" line="163">
                <params>
                    <param name="key" type="String"/>
                </params>
                <scope line="164"/>
                <scope line="167"/>
            </method>
            <javadoc line="173">
                Sets the &lt;code&gt;Value&lt;/code&gt; associated with the specified key.                
                <param>
                    key  the &lt;code&gt;String&lt;/code&gt; that identifies the stored object                    
                </param>
                <param>
                    newValue the &lt;code&gt;Object&lt;/code&gt; to store using this key                    
                </param>
                <see>
                    Action#putValue                    
                </see>
            </javadoc>
            <method name="putValue" type="void" line="180">
                <params>
                    <param name="key" type="String"/>
                    <param name="newValue" type="Object"/>
                </params>
                <comment line="184">
                    Treat putValue(&quot;enabled&quot;) the same way as a call to setEnabled.
                     If we don&apos;t do this it means the two may get out of sync, and a
                     bogus property change notification would be sent.
                    
                     To avoid dependencies between putValue &amp; setEnabled this
                     directly changes enabled. If we instead called setEnabled
                     to change enabled, it would be possible for stack
                     overflow in the case where a developer implemented setEnabled
                     in terms of putValue.                    
                </comment>
                <comment line="204">
                    Remove the entry for key if newValue is null
                     else put in the newValue for key.                    
                </comment>
                <declaration name="oldValue" type="Object" line="181"/>
                <scope line="182">
                    <scope line="192"/>
                </scope>
                <scope line="197">
                    <scope line="198"/>
                    <scope line="205"/>
                    <scope line="207"/>
                </scope>
            </method>
            <javadoc line="214">
                Returns true if the action is enabled.                
                <return>
                    true if the action is enabled, false otherwise                    
                </return>
                <see>
                    Action#isEnabled                    
                </see>
            </javadoc>
            <method name="isEnabled" type="boolean" line="220"/>
            <javadoc line="224">
                Sets whether the {@code Action} is enabled. The default is {@code true}.                
                <param>
                    newValue  {@code true} to enable the action, {@code false} to
                      disable it                    
                </param>
                <see>
                    Action#setEnabled                    
                </see>
            </javadoc>
            <method name="setEnabled" type="void" line="231">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="232"/>
                <scope line="234"/>
            </method>
            <javadoc line="242">
                Returns an array of &lt;code&gt;Object&lt;/code&gt;s which are keys for
                  which values have been set for this &lt;code&gt;AbstractAction&lt;/code&gt;,
                  or &lt;code&gt;null&lt;/code&gt; if no keys have values set.                
                <return>
                    an array of key objects, or &lt;code&gt;null&lt;/code&gt; if no
                      keys have values set                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getKeys" type="Object[]" line="250">
                <scope line="251"/>
                <declaration name="keys" type="Object[]" line="254"/>
            </method>
            <declaration name="changeSupport" type="SwingPropertyChangeSupport" line="259"/>
            <javadoc line="259">
                If any &lt;code&gt;PropertyChangeListeners&lt;/code&gt; have been registered, the
                  &lt;code&gt;changeSupport&lt;/code&gt; field describes them.                
            </javadoc>
            <javadoc line="265">
                Supports reporting bound property changes.  This method can be called
                  when a bound property has changed and it will send the appropriate
                  &lt;code&gt;PropertyChangeEvent&lt;/code&gt; to any registered
                  &lt;code&gt;PropertyChangeListeners&lt;/code&gt;.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="271">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="273"/>
            </method>
            <javadoc line="280">
                Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.
                  The listener is registered for all properties.
                  &lt;p&gt;
                  A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired in response to setting
                  a bound property, e.g. &lt;code&gt;setFont&lt;/code&gt;, &lt;code&gt;setBackground&lt;/code&gt;,
                  or &lt;code&gt;setForeground&lt;/code&gt;.
                  Note that if the current component is inheriting its foreground,
                  background, or font from its container, then no event will be
                  fired in response to a change in the inherited property.                
                <param>
                    listener  The &lt;code&gt;PropertyChangeListener&lt;/code&gt; to be added                    
                </param>
                <see>
                    Action#addPropertyChangeListener                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="295">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="296"/>
            </method>
            <javadoc line="303">
                Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the listener list.
                  This removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that was registered
                  for all properties.                
                <param>
                    listener  the &lt;code&gt;PropertyChangeListener&lt;/code&gt; to be removed                    
                </param>
                <see>
                    Action#removePropertyChangeListener                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="312">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="313"/>
            </method>
            <javadoc line="320">
                Returns an array of all the &lt;code&gt;PropertyChangeListener&lt;/code&gt;s added
                  to this AbstractAction with addPropertyChangeListener().                
                <return>
                    all of the &lt;code&gt;PropertyChangeListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="328">
                <scope line="329"/>
            </method>
            <javadoc line="336">
                Clones the abstract action. This gives the clone
                  its own copy of the key/value list,
                  which is not handled for you by &lt;code&gt;Object.clone()&lt;/code&gt;.                
            </javadoc>
            <method name="clone" type="Object" line="342">
                <declaration name="newAction" type="AbstractAction" line="343"/>
                <scope line="344">
                    <scope line="345"/>
                </scope>
            </method>
            <method name="writeObject" type="void" line="352">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="354">
                    Store the default fields                    
                </comment>
                <comment line="357">
                    And the keys                    
                </comment>
            </method>
            <method name="readObject" type="void" line="361">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="363"/>
            </method>
        </class>
    </source>