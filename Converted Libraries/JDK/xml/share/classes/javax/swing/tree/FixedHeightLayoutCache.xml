<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="javax.swing.event.TreeModelEvent"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Stack"/>
        <class name="FixedHeightLayoutCache" line="36">
            <extends class="AbstractLayoutCache"/>
            <comment line="330">
                TreeModelListener methods                
            </comment>
            <comment line="520">
                Local methods                
            </comment>
            <comment line="1450">
                FixedHeightLayoutCache.FHTreeStateNode                
            </comment>
            <comment line="1471">
                FixedHeightLayoutCache.SearchInfo                
            </comment>
            <comment line="1601">
                FixedHeightLayoutCache.VisibleFHTreeStateNodeEnumeration                
            </comment>
            <javadoc line="36">
                NOTE: This will become more open in a future release.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="root" type="FHTreeStateNode" line="52"/>
            <javadoc line="52">
                Root node.                
            </javadoc>
            <declaration name="rowCount" type="int" line="55"/>
            <javadoc line="55">
                Number of rows currently visible.                
            </javadoc>
            <declaration name="boundsBuffer" type="Rectangle" line="58"/>
            <javadoc line="58">
                Used in getting sizes for nodes to avoid creating a new Rectangle
                  every time a size is needed.                
            </javadoc>
            <declaration name="treePathMapping" type="Hashtable&lt;TreePath,FHTreeStateNode&gt;" line="64"/>
            <javadoc line="64">
                Maps from TreePath to a FHTreeStateNode.                
            </javadoc>
            <declaration name="info" type="SearchInfo" line="69"/>
            <javadoc line="69">
                Used for getting path/row information.                
            </javadoc>
            <declaration name="tempStacks" type="Stack&lt;Stack&lt;TreePath&gt;&gt;" line="74"/>
            <method name="FixedHeightLayoutCache" type="constructor" line="77"/>
            <javadoc line="86">
                Sets the TreeModel that will provide the data.                
                <param>
                    newModel the TreeModel that is to provide the data                    
                </param>
            </javadoc>
            <method name="setModel" type="void" line="91">
                <params>
                    <param name="newModel" type="TreeModel"/>
                </params>
            </method>
            <javadoc line="96">
                Determines whether or not the root node from
                  the TreeModel is visible.                
                <param>
                    rootVisible true if the root node of the tree is to be displayed                    
                </param>
                <see>
                    #rootVisible                    
                </see>
            </javadoc>
            <method name="setRootVisible" type="void" line="103">
                <params>
                    <param name="rootVisible" type="boolean"/>
                </params>
                <scope line="104">
                    <scope line="106">
                        <scope line="107"/>
                        <scope line="111"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="120">
                Sets the height of each cell. If rowHeight is less than or equal to
                  0 this will throw an IllegalArgumentException.                
                <param>
                    rowHeight the height of each cell, in pixels                    
                </param>
            </javadoc>
            <method name="setRowHeight" type="void" line="126">
                <params>
                    <param name="rowHeight" type="int"/>
                </params>
                <scope line="129"/>
            </method>
            <javadoc line="135">
                Returns the number of visible rows.                
            </javadoc>
            <method name="getRowCount" type="int" line="138"/>
            <javadoc line="142">
                Does nothing, FixedHeightLayoutCache doesn&apos;t cache width, and that
                  is all that could change.                
            </javadoc>
            <method name="invalidatePathBounds" type="void" line="146">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="150">
                Informs the TreeState that it needs to recalculate all the sizes
                  it is referencing.                
            </javadoc>
            <method name="invalidateSizes" type="void" line="154">
                <comment line="156">
                    Nothing to do here, rowHeight still same, which is all
                     this is interested in, visible region may have changed though.                    
                </comment>
            </method>
            <javadoc line="160">
                Returns true if the value identified by row is currently expanded.                
            </javadoc>
            <method name="isExpanded" type="boolean" line="163">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="164">
                    <declaration name="lastNode" type="FHTreeStateNode" line="165"/>
                </scope>
            </method>
            <javadoc line="172">
                Returns a rectangle giving the bounds needed to draw path.                
                <param>
                    path     a TreePath specifying a node                    
                </param>
                <param>
                    placeIn  a Rectangle object giving the available space                    
                </param>
                <return>
                    a Rectangle object specifying the space to be used                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="179">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="placeIn" type="Rectangle"/>
                </params>
                <comment line="189">
                    node hasn&apos;t been created yet.                    
                </comment>
                <declaration name="node" type="FHTreeStateNode" line="183"/>
                <declaration name="parentPath" type="TreePath" line="189"/>
                <scope line="192">
                    <declaration name="childIndex" type="int" line="193"/>
                </scope>
            </method>
            <javadoc line="203">
                Returns the path for passed in row.  If row is not visible
                  null is returned.                
            </javadoc>
            <method name="getPathForRow" type="TreePath" line="207">
                <params>
                    <param name="row" type="int"/>
                </params>
                <scope line="208">
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="216">
                Returns the row that the last item identified in path is visible
                  at.  Will return -1 if any of the elements in path are not
                  currently visible.                
            </javadoc>
            <method name="getRowForPath" type="int" line="221">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="FHTreeStateNode" line="225"/>
                <declaration name="parentPath" type="TreePath" line="230"/>
                <scope line="233"/>
            </method>
            <javadoc line="241">
                Returns the path to the node that is closest to x,y.  If
                  there is nothing currently visible this will return null, otherwise
                  it&apos;ll always return a valid path.  If you need to test if the
                  returned object is exactly at x, y you should get the bounds for
                  the returned path and test x, y against that.                
            </javadoc>
            <method name="getPathClosestTo" type="TreePath" line="248">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="row" type="int" line="252"/>
            </method>
            <javadoc line="257">
                Returns the number of visible children for row.                
            </javadoc>
            <method name="getVisibleChildCount" type="int" line="260">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="FHTreeStateNode" line="261"/>
            </method>
            <javadoc line="268">
                Returns an Enumerator that increments over the visible paths
                  starting at the passed in location. The ordering of the enumeration
                  is based on how the paths are displayed.                
            </javadoc>
            <method name="getVisiblePathsFrom" type="Enumeration<TreePath>" line="273">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="FHTreeStateNode" line="277"/>
                <scope line="279"/>
                <declaration name="parentPath" type="TreePath" line="282"/>
                <scope line="285"/>
            </method>
            <javadoc line="293">
                Marks the path &lt;code&gt;path&lt;/code&gt; expanded state to
                  &lt;code&gt;isExpanded&lt;/code&gt;.                
            </javadoc>
            <method name="setExpandedState" type="void" line="297">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="isExpanded" type="boolean"/>
                </params>
                <comment line="304">
                    YECK! Make the parent expanded.                    
                </comment>
                <comment line="311">
                    And collapse the child.                    
                </comment>
                <scope line="300">
                    <declaration name="parentPath" type="TreePath" line="301"/>
                    <scope line="304">
                        <declaration name="parentNode" type="FHTreeStateNode" line="305"/>
                    </scope>
                    <declaration name="childNode" type="FHTreeStateNode" line="311"/>
                </scope>
            </method>
            <javadoc line="319">
                Returns true if the path is expanded, and visible.                
            </javadoc>
            <method name="getExpandedState" type="boolean" line="322">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="FHTreeStateNode" line="323"/>
            </method>
            <javadoc line="333">
                &lt;p&gt;Invoked after a node (or a set of siblings) has changed in some
                  way. The node(s) have not changed locations in the tree or
                  altered their children arrays, but other attributes have
                  changed and may affect presentation. Example: the name of a
                  file has changed, but it is in the same location in the file
                  system.&lt;/p&gt;
                  &lt;p&gt;e.path() returns the path the parent of the changed node(s).&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns the index(es) of the changed node(s).&lt;/p&gt;                
            </javadoc>
            <method name="treeNodesChanged" type="void" line="345">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="354">
                    Only need to update the children if the node has been                    
                </comment>
                <comment line="356">
                    PENDING(scott): make sure childIndexs is sorted!                    
                </comment>
                <comment line="374">
                    Null for root indicates it changed.                    
                </comment>
                <scope line="346">
                    <declaration name="changedIndexs" type="int" line="347"/>
                    <declaration name="changedParent" type="FHTreeStateNode" line="348"/>
                    <declaration name="maxCounter" type="int" line="350"/>
                    <scope line="356">
                        <scope line="358">
                            <declaration name="parentValue" type="Object" line="359"/>
                            <scope line="361">
                                <declaration name="child" type="FHTreeStateNode" line="362"/>
                                <scope line="365"/>
                            </scope>
                        </scope>
                        <scope line="375"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="382">
                &lt;p&gt;Invoked after nodes have been inserted into the tree.&lt;/p&gt;
                  &lt;p&gt;e.path() returns the parent of the new nodes
                  &lt;p&gt;e.childIndices() returns the indices of the new nodes in
                  ascending order.                
            </javadoc>
            <method name="treeNodesInserted" type="void" line="389">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="398">
                    Only need to update the children if the node has been                    
                </comment>
                <comment line="400">
                    PENDING(scott): make sure childIndexs is sorted!                    
                </comment>
                <scope line="390">
                    <declaration name="changedIndexs" type="int" line="391"/>
                    <declaration name="changedParent" type="FHTreeStateNode" line="392"/>
                    <declaration name="maxCounter" type="int" line="394"/>
                    <scope line="401">
                        <declaration name="isVisible" type="boolean" line="402"/>
                        <scope line="406"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="418">
                &lt;p&gt;Invoked after nodes have been removed from the tree.  Note that
                  if a subtree is removed from the tree, this method may only be
                  invoked once for the root of the removed subtree, not once for
                  each individual set of siblings removed.&lt;/p&gt;
                  &lt;p&gt;e.path() returns the former parent of the deleted nodes.&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns the indices the nodes had before they were deleted in ascending order.&lt;/p&gt;                
            </javadoc>
            <method name="treeNodesRemoved" type="void" line="428">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="438">
                    PENDING(scott): make sure that changedIndexs are sorted in
                     ascending order.                    
                </comment>
                <comment line="457">
                    Node has become a leaf, collapse it.                    
                </comment>
                <scope line="429">
                    <declaration name="changedIndexs" type="int" line="430"/>
                    <declaration name="maxCounter" type="int" line="431"/>
                    <declaration name="parentPath" type="TreePath" line="432"/>
                    <declaration name="changedParentNode" type="FHTreeStateNode" line="433"/>
                    <scope line="440">
                        <declaration name="children" type="Object[]" line="441"/>
                        <declaration name="isVisible" type="boolean" line="442"/>
                        <scope line="446"/>
                        <scope line="450">
                            <scope line="455"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="467">
                &lt;p&gt;Invoked after the tree has drastically changed structure from a
                  given node down.  If the path returned by e.getPath() is of length
                  one and the first element does not identify the current root node
                  the first element should become the new root of the tree.&lt;p&gt;
                  &lt;p&gt;e.path() holds the path to the node.&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns null.&lt;/p&gt;                
            </javadoc>
            <method name="treeStructureChanged" type="void" line="476">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="483">
                    Check if root has changed, either to a null root, or
                     to an entirely new root.                    
                </comment>
                <scope line="477">
                    <declaration name="changedPath" type="TreePath" line="478"/>
                    <declaration name="changedNode" type="FHTreeStateNode" line="479"/>
                    <scope line="488"/>
                    <scope line="491">
                        <declaration name="wasExpanded" type="boolean" line="492"/>
                        <declaration name="parent" type="FHTreeStateNode" line="493"/>
                        <declaration name="index" type="int" line="499"/>
                        <scope line="503">
                            <declaration name="row" type="int" line="504"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="visibleNodesChanged" type="void" line="523"/>
            <javadoc line="526">
                Returns the bounds for the given node. If &lt;code&gt;childIndex&lt;/code&gt;
                  is -1, the bounds of &lt;code&gt;parent&lt;/code&gt; are returned, otherwise
                  the bounds of the node at &lt;code&gt;childIndex&lt;/code&gt; are returned.                
            </javadoc>
            <method name="getBounds" type="Rectangle" line="532">
                <params>
                    <param name="parent" type="FHTreeStateNode"/>
                    <param name="childIndex" type="int"/>
                    <param name="placeIn" type="Rectangle"/>
                </params>
                <comment line="540">
                    Getting bounds for parent                    
                </comment>
                <comment line="555">
                    No node dimensions, bail.                    
                </comment>
                <declaration name="expanded" type="boolean" line="533"/>
                <declaration name="level" type="int" line="534"/>
                <declaration name="row" type="int" line="535"/>
                <declaration name="value" type="Object" line="536"/>
                <scope line="538"/>
                <scope line="545"/>
                <declaration name="bounds" type="Rectangle" line="552"/>
            </method>
            <javadoc line="568">
                Adjust the large row count of the AbstractTreeUI the receiver was
                  created with.                
            </javadoc>
            <method name="adjustRowCountBy" type="void" line="572">
                <params>
                    <param name="changeAmount" type="int"/>
                </params>
            </method>
            <javadoc line="576">
                Adds a mapping for node.                
            </javadoc>
            <method name="addMapping" type="void" line="579">
                <params>
                    <param name="node" type="FHTreeStateNode"/>
                </params>
            </method>
            <javadoc line="583">
                Removes the mapping for a previously added node.                
            </javadoc>
            <method name="removeMapping" type="void" line="586">
                <params>
                    <param name="node" type="FHTreeStateNode"/>
                </params>
            </method>
            <javadoc line="590">
                Returns the node previously added for &lt;code&gt;path&lt;/code&gt;. This may
                  return null, if you to create a node use getNodeForPath.                
            </javadoc>
            <method name="getMapping" type="FHTreeStateNode" line="594">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="598">
                Sent to completely rebuild the visible tree. All nodes are collapsed.                
            </javadoc>
            <method name="rebuild" type="void" line="601">
                <params>
                    <param name="clearSelection" type="boolean"/>
                </params>
                <declaration name="rootUO" type="Object" line="602"/>
                <scope line="605">
                    <scope line="609"/>
                    <scope line="613"/>
                </scope>
                <scope line="619"/>
                <scope line="623"/>
            </method>
            <javadoc line="629">
                Returns the index of the row containing location.  If there
                  are no rows, -1 is returned.  If location is beyond the last
                  row index, the last row index is returned.                
            </javadoc>
            <method name="getRowContainingYLocation" type="int" line="634">
                <params>
                    <param name="location" type="int"/>
                </params>
            </method>
            <javadoc line="641">
                Ensures that all the path components in path are expanded, accept
                  for the last component which will only be expanded if expandLast
                  is true.
                  Returns true if succesful in finding the path.                
            </javadoc>
            <method name="ensurePathIsExpanded" type="boolean" line="648">
                <params>
                    <param name="aPath" type="TreePath"/>
                    <param name="expandLast" type="boolean"/>
                </params>
                <comment line="651">
                    Make sure the last entry isn&apos;t a leaf.                    
                </comment>
                <scope line="649">
                    <scope line="651"/>
                    <scope line="655">
                        <declaration name="lastNode" type="FHTreeStateNode" line="656"/>
                        <scope line="659"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="670">
                Creates and returns an instance of FHTreeStateNode.                
            </javadoc>
            <method name="createNodeForValue" type="FHTreeStateNode" line="673">
                <params>
                    <param name="value" type="Object"/>
                    <param name="childIndex" type="int"/>
                </params>
            </method>
            <javadoc line="677">
                Messages getTreeNodeForPage(path, onlyIfVisible, shouldCreate,
                  path.length) as long as path is non-null and the length is &gt; 0.
                  Otherwise returns null.                
            </javadoc>
            <method name="getNodeForPath" type="FHTreeStateNode" line="684">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="onlyIfVisible" type="boolean"/>
                    <param name="shouldCreate" type="boolean"/>
                </params>
                <comment line="698">
                    Check all the parent paths, until a match is found.                    
                </comment>
                <comment line="715">
                    Found a match, create entries for all paths in
                     paths.                    
                </comment>
                <comment line="732">
                    If we get here it means they share a different root!                    
                </comment>
                <scope line="685">
                    <declaration name="node" type="FHTreeStateNode" line="686"/>
                    <scope line="689"/>
                    <declaration name="paths" type="Stack&lt;TreePath&gt;" line="698"/>
                    <scope line="700"/>
                    <scope line="703"/>
                    <scope line="707">
                        <scope line="711">
                            <scope line="713">
                                <scope line="716"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="727"/>
                </scope>
            </method>
            <class name="FHTreeStateNode" line="737">
                <extends class="DefaultMutableTreeNode"/>
                <comment line="769">
                    Overriden DefaultMutableTreeNode methods                    
                </comment>
                <comment line="812">
                                        
                </comment>
                <comment line="1477">
                    This is very similiar to
                     VariableHeightTreeState.VisibleTreeStateNodeEnumeration                    
                </comment>
                <javadoc line="737">
                    FHTreeStateNode is used to track what has been expanded.
                      FHTreeStateNode differs from VariableHeightTreeState.TreeStateNode
                      in that it is highly model intensive. That is almost all queries to a
                      FHTreeStateNode result in the TreeModel being queried. And it
                      obviously does not support variable sized row heights.                    
                </javadoc>
                <declaration name="isExpanded" type="boolean" line="745"/>
                <javadoc line="745">
                    Is this node expanded?                    
                </javadoc>
                <declaration name="childIndex" type="int" line="748"/>
                <javadoc line="748">
                    Index of this node from the model.                    
                </javadoc>
                <declaration name="childCount" type="int" line="751"/>
                <javadoc line="751">
                    Child count of the receiver.                    
                </javadoc>
                <declaration name="row" type="int" line="754"/>
                <javadoc line="754">
                    Row of the receiver. This is only valid if the row is expanded.                    
                </javadoc>
                <declaration name="path" type="TreePath" line="758"/>
                <javadoc line="758">
                    Path of this node.                    
                </javadoc>
                <method name="FHTreeStateNode" type="constructor" line="762">
                    <params>
                        <param name="userObject" type="Object"/>
                        <param name="childIndex" type="int"/>
                        <param name="row" type="int"/>
                    </params>
                </method>
                <javadoc line="772">
                    Messaged when this node is added somewhere, resets the path
                      and adds a mapping from path to this node.                    
                </javadoc>
                <method name="setParent" type="void" line="776">
                    <params>
                        <param name="parent" type="MutableTreeNode"/>
                    </params>
                    <scope line="778"/>
                </method>
                <javadoc line="785">
                    Messaged when this node is removed from its parent, this messages
                      &lt;code&gt;removedFromMapping&lt;/code&gt; to remove all the children.                    
                </javadoc>
                <method name="remove" type="void" line="789">
                    <params>
                        <param name="childIndex" type="int"/>
                    </params>
                    <declaration name="node" type="FHTreeStateNode" line="790"/>
                </method>
                <javadoc line="796">
                    Messaged to set the user object. This resets the path.                    
                </javadoc>
                <method name="setUserObject" type="void" line="799">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="801">
                        <declaration name="parent" type="FHTreeStateNode" line="802"/>
                    </scope>
                </method>
                <javadoc line="814">
                    Returns the index of the receiver in the model.                    
                </javadoc>
                <method name="getChildIndex" type="int" line="817"/>
                <javadoc line="821">
                    Returns the &lt;code&gt;TreePath&lt;/code&gt; of the receiver.                    
                </javadoc>
                <method name="getTreePath" type="TreePath" line="824"/>
                <javadoc line="828">
                    Returns the child for the passed in model index, this will
                      return &lt;code&gt;null&lt;/code&gt; if the child for &lt;code&gt;index&lt;/code&gt;
                      has not yet been created (expanded).                    
                </javadoc>
                <method name="getChildAtModelIndex" type="FHTreeStateNode" line="833">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <comment line="835">
                        PENDING: Make this a binary search!                        
                    </comment>
                </method>
                <javadoc line="841">
                    Returns true if this node is visible. This is determined by
                      asking all the parents if they are expanded.                    
                </javadoc>
                <method name="isVisible" type="boolean" line="845">
                    <declaration name="parent" type="FHTreeStateNode" line="846"/>
                </method>
                <javadoc line="853">
                    Returns the row of the receiver.                    
                </javadoc>
                <method name="getRow" type="int" line="856"/>
                <javadoc line="860">
                    Returns the row of the child with a model index of
                      &lt;code&gt;index&lt;/code&gt;.                    
                </javadoc>
                <method name="getRowToModelIndex" type="int" line="864">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <comment line="870">
                        This too could be a binary search!                        
                    </comment>
                    <comment line="882">
                        YECK!                        
                    </comment>
                    <declaration name="child" type="FHTreeStateNode" line="865"/>
                    <declaration name="lastRow" type="int" line="866"/>
                    <declaration name="retValue" type="int" line="867"/>
                    <scope line="871">
                        <scope line="873"/>
                    </scope>
                </method>
                <javadoc line="886">
                    Returns the number of children in the receiver by descending all
                      expanded nodes and messaging them with getTotalChildCount.                    
                </javadoc>
                <method name="getTotalChildCount" type="int" line="890">
                    <comment line="898">
                        This node has a created sibling, to calc total
                         child count directly from that!                        
                    </comment>
                    <scope line="891">
                        <declaration name="parent" type="FHTreeStateNode" line="892"/>
                        <declaration name="pIndex" type="int" line="893"/>
                        <scope line="896">
                            <declaration name="nextSibling" type="FHTreeStateNode" line="899"/>
                        </scope>
                        <scope line="905">
                            <declaration name="retCount" type="int" line="906"/>
                            <scope line="909"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="919">
                    Returns true if this node is expanded.                    
                </javadoc>
                <method name="isExpanded" type="boolean" line="922"/>
                <javadoc line="926">
                    The highest visible nodes have a depth of 0.                    
                </javadoc>
                <method name="getVisibleLevel" type="int" line="929">
                    <scope line="930"/>
                    <scope line="932"/>
                </method>
                <javadoc line="937">
                    Recreates the receivers path, and all its childrens paths.                    
                </javadoc>
                <method name="resetChildrenPaths" type="void" line="940">
                    <params>
                        <param name="parentPath" type="TreePath"/>
                    </params>
                </method>
                <javadoc line="952">
                    Removes the receiver, and all its children, from the mapping
                      table.                    
                </javadoc>
                <method name="removeFromMapping" type="void" line="956">
                    <scope line="957"/>
                </method>
                <javadoc line="964">
                    Creates a new node to represent &lt;code&gt;userObject&lt;/code&gt;.
                      This does NOT check to ensure there isn&apos;t already a child node
                      to manage &lt;code&gt;userObject&lt;/code&gt;.                    
                </javadoc>
                <method name="createChildFor" type="FHTreeStateNode" line="969">
                    <params>
                        <param name="userObject" type="Object"/>
                    </params>
                    <declaration name="newChildIndex" type="int" line="970"/>
                    <declaration name="aNode" type="FHTreeStateNode" line="976"/>
                    <declaration name="child" type="FHTreeStateNode" line="977"/>
                    <declaration name="childRow" type="int" line="979"/>
                    <scope line="981"/>
                    <scope line="984"/>
                    <scope line="989">
                        <scope line="991"/>
                    </scope>
                </method>
                <javadoc line="1000">
                    Adjusts the receiver, and all its children rows by
                      &lt;code&gt;amount&lt;/code&gt;.                    
                </javadoc>
                <method name="adjustRowBy" type="void" line="1004">
                    <params>
                        <param name="amount" type="int"/>
                    </params>
                    <scope line="1006"/>
                </method>
                <javadoc line="1013">
                    Adjusts this node, its child, and its parent starting at
                      an index of &lt;code&gt;index&lt;/code&gt; index is the index of the child
                      to start adjusting from, which is not necessarily the model
                      index.                    
                </javadoc>
                <method name="adjustRowBy" type="void" line="1019">
                    <params>
                        <param name="amount" type="int"/>
                        <param name="startIndex" type="int"/>
                    </params>
                    <comment line="1021">
                        Could check isVisible, but probably isn&apos;t worth it.                        
                    </comment>
                    <comment line="1023">
                        children following startIndex.                        
                    </comment>
                    <comment line="1028">
                        Parent                        
                    </comment>
                    <scope line="1021"/>
                    <declaration name="parent" type="FHTreeStateNode" line="1028"/>
                    <scope line="1030"/>
                </method>
                <javadoc line="1035">
                    Messaged when the node has expanded. This updates all of
                      the receivers children rows, as well as the total row count.                    
                </javadoc>
                <method name="didExpand" type="void" line="1039">
                    <declaration name="nextRow" type="int" line="1040"/>
                    <declaration name="parent" type="FHTreeStateNode" line="1041"/>
                    <declaration name="childRowCount" type="int" line="1042"/>
                    <scope line="1044"/>
                </method>
                <javadoc line="1050">
                    Sets the receivers row to &lt;code&gt;nextRow&lt;/code&gt; and recursively
                      updates all the children of the receivers rows. The index the
                      next row is to be placed as is returned.                    
                </javadoc>
                <method name="setRowAndChildren" type="int" line="1055">
                    <params>
                        <param name="nextRow" type="int"/>
                    </params>
                    <declaration name="lastRow" type="int" line="1061"/>
                    <declaration name="lastModelIndex" type="int" line="1062"/>
                    <declaration name="child" type="FHTreeStateNode" line="1063"/>
                    <declaration name="maxCounter" type="int" line="1064"/>
                    <scope line="1066">
                        <scope line="1070"/>
                        <scope line="1073"/>
                    </scope>
                </method>
                <javadoc line="1080">
                    Resets the receivers childrens rows. Starting with the child
                      at &lt;code&gt;childIndex&lt;/code&gt; (and &lt;code&gt;modelIndex&lt;/code&gt;) to
                      &lt;code&gt;newRow&lt;/code&gt;. This uses &lt;code&gt;setRowAndChildren&lt;/code&gt;
                      to recursively descend children, and uses
                      &lt;code&gt;resetRowSelection&lt;/code&gt; to ascend parents.                    
                </javadoc>
                <method name="resetChildrenRowsFrom" type="void" line="1093">
                    <params>
                        <param name="newRow" type="int"/>
                        <param name="childIndex" type="int"/>
                        <param name="modelIndex" type="int"/>
                    </params>
                    <comment line="1088">
                        This can be rather expensive, but is needed for the collapse
                         case this is resulting from a remove (although I could fix
                         that by having instances of FHTreeStateNode hold a ref to
                         the number of children). I prefer this though, making determing
                         the row of a particular node fast is very nice!                        
                    </comment>
                    <comment line="1117">
                        This is the root, reset total ROWCOUNT!                        
                    </comment>
                    <declaration name="lastRow" type="int" line="1094"/>
                    <declaration name="lastModelIndex" type="int" line="1095"/>
                    <declaration name="node" type="FHTreeStateNode" line="1096"/>
                    <declaration name="maxCounter" type="int" line="1097"/>
                    <scope line="1099">
                        <scope line="1103"/>
                        <scope line="1106"/>
                    </scope>
                    <scope line="1112"/>
                    <scope line="1116"/>
                </method>
                <javadoc line="1121">
                    Makes the receiver visible, but invoking
                      &lt;code&gt;expandParentAndReceiver&lt;/code&gt; on the superclass.                    
                </javadoc>
                <method name="makeVisible" type="void" line="1125">
                    <declaration name="parent" type="FHTreeStateNode" line="1126"/>
                </method>
                <javadoc line="1132">
                    Invokes &lt;code&gt;expandParentAndReceiver&lt;/code&gt; on the parent,
                      and expands the receiver.                    
                </javadoc>
                <method name="expandParentAndReceiver" type="void" line="1136">
                    <declaration name="parent" type="FHTreeStateNode" line="1137"/>
                </method>
                <javadoc line="1144">
                    Expands the receiver.                    
                </javadoc>
                <method name="expand" type="void" line="1147">
                    <comment line="1159">
                        Update the selection model.                        
                    </comment>
                    <scope line="1148">
                        <declaration name="visible" type="boolean" line="1149"/>
                        <scope line="1154"/>
                        <scope line="1159"/>
                    </scope>
                </method>
                <javadoc line="1165">
                    Collapses the receiver. If &lt;code&gt;adjustRows&lt;/code&gt; is true,
                      the rows of nodes after the receiver are adjusted.                    
                </javadoc>
                <method name="collapse" type="void" line="1169">
                    <params>
                        <param name="adjustRows" type="boolean"/>
                    </params>
                    <comment line="1177">
                        We can do this because adjustRowBy won&apos;t descend
                         the children.                        
                    </comment>
                    <scope line="1170">
                        <scope line="1171">
                            <declaration name="childCount" type="int" line="1172"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1188">
                    Returns true if the receiver is a leaf.                    
                </javadoc>
                <method name="isLeaf" type="boolean" line="1191">
                    <declaration name="model" type="TreeModel" line="1192"/>
                </method>
                <javadoc line="1198">
                    Adds newChild to this nodes children at the appropriate location.
                      The location is determined from the childIndex of newChild.                    
                </javadoc>
                <method name="addNode" type="void" line="1202">
                    <params>
                        <param name="newChild" type="FHTreeStateNode"/>
                    </params>
                    <declaration name="added" type="boolean" line="1203"/>
                    <declaration name="childIndex" type="int" line="1204"/>
                    <scope line="1207">
                        <scope line="1209"/>
                    </scope>
                </method>
                <javadoc line="1219">
                    Removes the child at &lt;code&gt;modelIndex&lt;/code&gt;.
                      &lt;code&gt;isChildVisible&lt;/code&gt; should be true if the receiver
                      is visible and expanded.                    
                </javadoc>
                <method name="removeChildAtModelIndex" type="void" line="1225">
                    <params>
                        <param name="modelIndex" type="int"/>
                        <param name="isChildVisible" type="boolean"/>
                    </params>
                    <comment line="1238">
                        Adjust the rows.                        
                    </comment>
                    <comment line="1253">
                        Since matched and children are always sorted by
                         index, no need to continue testing with the
                         above.                        
                    </comment>
                    <comment line="1263">
                        No children to adjust, but it was a child, so we still need
                         to adjust nodes after this one.                        
                    </comment>
                    <declaration name="childNode" type="FHTreeStateNode" line="1226"/>
                    <scope line="1228">
                        <declaration name="row" type="int" line="1229"/>
                        <declaration name="index" type="int" line="1230"/>
                        <scope line="1236"/>
                    </scope>
                    <scope line="1241">
                        <declaration name="maxCounter" type="int" line="1242"/>
                        <declaration name="aChild" type="FHTreeStateNode" line="1243"/>
                        <scope line="1245">
                            <scope line="1247">
                                <scope line="1248"/>
                            </scope>
                        </scope>
                        <scope line="1264"/>
                    </scope>
                </method>
                <javadoc line="1272">
                    Adjusts the child indexs of the receivers children by
                      &lt;code&gt;amount&lt;/code&gt;, starting at &lt;code&gt;index&lt;/code&gt;.                    
                </javadoc>
                <method name="adjustChildIndexs" type="void" line="1276">
                    <params>
                        <param name="index" type="int"/>
                        <param name="amount" type="int"/>
                    </params>
                    <scope line="1278"/>
                </method>
                <javadoc line="1283">
                    Messaged when a child has been inserted at index. For all the
                      children that have a childIndex &gt;= index their index is incremented
                      by one.                    
                </javadoc>
                <method name="childInsertedAtModelIndex" type="void" line="1289">
                    <params>
                        <param name="index" type="int"/>
                        <param name="isExpandedAndVisible" type="boolean"/>
                    </params>
                    <comment line="1301">
                        Since matched and children are always sorted by                        
                    </comment>
                    <comment line="1309">
                        No children to adjust, but it was a child, so we still need
                         to adjust nodes after this one.                        
                    </comment>
                    <declaration name="aChild" type="FHTreeStateNode" line="1290"/>
                    <declaration name="maxCounter" type="int" line="1291"/>
                    <scope line="1293">
                        <scope line="1295">
                            <scope line="1296"/>
                        </scope>
                    </scope>
                    <scope line="1310"/>
                </method>
                <javadoc line="1317">
                    Returns true if there is a row for &lt;code&gt;row&lt;/code&gt;.
                      &lt;code&gt;nextRow&lt;/code&gt; gives the bounds of the receiver.
                      Information about the found row is returned in &lt;code&gt;info&lt;/code&gt;.
                      This should be invoked on root with &lt;code&gt;nextRow&lt;/code&gt; set
                      to &lt;code&gt;getRowCount&lt;/code&gt;().                    
                </javadoc>
                <method name="getPathForRow" type="boolean" line="1325">
                    <params>
                        <param name="row" type="int"/>
                        <param name="nextRow" type="int"/>
                        <param name="info" type="SearchInfo"/>
                    </params>
                    <comment line="1342">
                        No node exists for it, and is first.                        
                    </comment>
                    <comment line="1349">
                        May have been in last childs bounds.                        
                    </comment>
                    <comment line="1357">
                        Between last child and child, but not in last child                        
                    </comment>
                    <comment line="1368">
                        Not in children, but we should have it, offset from
                         nextRow.                        
                    </comment>
                    <comment line="1377">
                        Between last child and child, but not in last child                        
                    </comment>
                    <comment line="1385">
                        No children.                        
                    </comment>
                    <scope line="1326"/>
                    <declaration name="child" type="FHTreeStateNode" line="1333"/>
                    <declaration name="lastChild" type="FHTreeStateNode" line="1334"/>
                    <scope line="1337">
                        <scope line="1339">
                            <scope line="1340"/>
                            <scope line="1347">
                                <declaration name="lastChildEndRow" type="int" line="1349"/>
                                <scope line="1352"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1369">
                        <declaration name="lastChildEndRow" type="int" line="1370"/>
                        <scope line="1373"/>
                    </scope>
                    <scope line="1383">
                        <declaration name="retChildIndex" type="int" line="1385"/>
                        <scope line="1387"/>
                    </scope>
                </method>
                <javadoc line="1397">
                    Asks all the children of the receiver for their totalChildCount
                      and returns this value (plus stopIndex).                    
                </javadoc>
                <method name="getCountTo" type="int" line="1401">
                    <params>
                        <param name="stopIndex" type="int"/>
                    </params>
                    <declaration name="aChild" type="FHTreeStateNode" line="1402"/>
                    <declaration name="retCount" type="int" line="1403"/>
                    <scope line="1406"/>
                </method>
                <javadoc line="1421">
                    Returns the number of children that are expanded to
                      &lt;code&gt;stopIndex&lt;/code&gt;. This does not include the number
                      of children that the child at &lt;code&gt;stopIndex&lt;/code&gt; might
                      have.                    
                </javadoc>
                <method name="getNumExpandedChildrenTo" type="int" line="1427">
                    <params>
                        <param name="stopIndex" type="int"/>
                    </params>
                    <declaration name="aChild" type="FHTreeStateNode" line="1428"/>
                    <declaration name="retCount" type="int" line="1429"/>
                    <scope line="1432">
                        <scope line="1436"/>
                    </scope>
                </method>
                <javadoc line="1443">
                    Messaged when this node either expands or collapses.                    
                </javadoc>
                <method name="didAdjustTree" type="void" line="1446"/>
            </class>
            <class name="SearchInfo" line="1452">
                <comment line="769">
                    Overriden DefaultMutableTreeNode methods                    
                </comment>
                <comment line="812">
                                        
                </comment>
                <comment line="1477">
                    This is very similiar to
                     VariableHeightTreeState.VisibleTreeStateNodeEnumeration                    
                </comment>
                <javadoc line="1452">
                    Used as a placeholder when getting the path in FHTreeStateNodes.                    
                </javadoc>
                <declaration name="node" type="FHTreeStateNode" line="1456"/>
                <declaration name="isNodeParentNode" type="boolean" line="1457"/>
                <declaration name="childIndex" type="int" line="1458"/>
                <method name="getPath" type="TreePath" line="1460"/>
            </class>
            <class name="VisibleFHTreeStateNodeEnumeration" line="1473">
                <comment line="769">
                    Overriden DefaultMutableTreeNode methods                    
                </comment>
                <comment line="812">
                                        
                </comment>
                <comment line="1477">
                    This is very similiar to
                     VariableHeightTreeState.VisibleTreeStateNodeEnumeration                    
                </comment>
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="TreePath"/>
                    </type_params>
                </implements>
                <javadoc line="1473">
                    An enumerator to iterate through visible nodes.                    
                </javadoc>
                <declaration name="parent" type="FHTreeStateNode" line="1481"/>
                <javadoc line="1481">
                    Parent thats children are being enumerated.                    
                </javadoc>
                <declaration name="nextIndex" type="int" line="1483"/>
                <javadoc line="1483">
                    Index of next child. An index of -1 signifies parent should be
                      visibled next.                    
                </javadoc>
                <declaration name="childCount" type="int" line="1486"/>
                <javadoc line="1486">
                    Number of children in parent.                    
                </javadoc>
                <method name="VisibleFHTreeStateNodeEnumeration" type="constructor" line="1489">
                    <params>
                        <param name="node" type="FHTreeStateNode"/>
                    </params>
                </method>
                <method name="VisibleFHTreeStateNodeEnumeration" type="constructor" line="1494">
                    <params>
                        <param name="parent" type="FHTreeStateNode"/>
                        <param name="startIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="1501">
                    @return true if more visible nodes.                    
                </javadoc>
                <method name="hasMoreElements" type="boolean" line="1504"/>
                <javadoc line="1508">
                    @return next visible TreePath.                    
                </javadoc>
                <method name="nextElement" type="TreePath" line="1511">
                    <declaration name="retObject" type="TreePath" line="1515"/>
                    <scope line="1519">
                        <declaration name="node" type="FHTreeStateNode" line="1520"/>
                    </scope>
                </method>
                <javadoc line="1533">
                    Determines the next object by invoking &lt;code&gt;updateNextIndex&lt;/code&gt;
                      and if not succesful &lt;code&gt;findNextValidParent&lt;/code&gt;.                    
                </javadoc>
                <method name="updateNextObject" type="void" line="1537">
                    <scope line="1538"/>
                </method>
                <javadoc line="1543">
                    Finds the next valid parent, this should be called when nextIndex
                      is beyond the number of children of the current parent.                    
                </javadoc>
                <method name="findNextValidParent" type="boolean" line="1547">
                    <comment line="1550">
                        mark as invalid!                        
                    </comment>
                    <scope line="1548"/>
                    <scope line="1553">
                        <declaration name="newParent" type="FHTreeStateNode" line="1554"/>
                        <scope line="1557"/>
                    </scope>
                </method>
                <javadoc line="1571">
                    Updates &lt;code&gt;nextIndex&lt;/code&gt; returning false if it is beyond
                      the number of children of parent.                    
                </javadoc>
                <method name="updateNextIndex" type="boolean" line="1575">
                    <comment line="1577">
                        nextIndex == -1 identifies receiver, make sure is expanded
                         before descend.                        
                    </comment>
                    <comment line="1583">
                        Check that it can have kids                        
                    </comment>
                    <comment line="1587">
                        Make sure next index not beyond child count.                        
                    </comment>
                    <scope line="1578"/>
                    <scope line="1583"/>
                    <scope line="1587"/>
                    <declaration name="child" type="FHTreeStateNode" line="1591"/>
                    <scope line="1593"/>
                </method>
            </class>
        </class>
    </source>