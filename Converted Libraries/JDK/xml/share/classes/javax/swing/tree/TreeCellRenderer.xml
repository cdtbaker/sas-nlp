<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="java.awt.Component"/>
        <import package="javax.swing.JTree"/>
        <interface name="TreeCellRenderer">
            <javadoc line="4">
                Defines the requirements for an object that displays a tree node.
                  See &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;
                  for an example of implementing a tree cell renderer
                  that displays custom icons.                
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <method name="getTreeCellRendererComponent" type="Component" line="16"/>
            <javadoc line="16">
                Sets the value of the current tree cell to &lt;code&gt;value&lt;/code&gt;.
                  If &lt;code&gt;selected&lt;/code&gt; is true, the cell will be drawn as if
                  selected. If &lt;code&gt;expanded&lt;/code&gt; is true the node is currently
                  expanded and if &lt;code&gt;leaf&lt;/code&gt; is true the node represents a
                  leaf and if &lt;code&gt;hasFocus&lt;/code&gt; is true the node currently has
                  focus. &lt;code&gt;tree&lt;/code&gt; is the &lt;code&gt;JTree&lt;/code&gt; the receiver is being
                  configured for.  Returns the &lt;code&gt;Component&lt;/code&gt; that the renderer
                  uses to draw the value.
                  &lt;p&gt;
                  The &lt;code&gt;TreeCellRenderer&lt;/code&gt; is also responsible for rendering the
                  the cell representing the tree&apos;s current DnD drop location if
                  it has one. If this renderer cares about rendering
                  the DnD drop location, it should query the tree directly to
                  see if the given row represents the drop location:
                  &lt;pre&gt;
                  JTree.DropLocation dropLocation = tree.getDropLocation();
                  if (dropLocation != null
                  &amp;&amp; dropLocation.getChildIndex() == -1
                  &amp;&amp; tree.getRowForPath(dropLocation.getPath()) == row) {
                  // this row represents the current drop location
                  // so render it specially, perhaps with a different color
                  }
                  &lt;/pre&gt;                
                <return>
                    the &lt;code&gt;Component&lt;/code&gt; that the renderer uses to draw the value                    
                </return>
            </javadoc>
        </interface>
    </source>