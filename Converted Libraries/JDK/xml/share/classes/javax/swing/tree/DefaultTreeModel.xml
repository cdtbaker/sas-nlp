<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="java.util"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.io"/>
        <import package="javax.swing.event"/>
        <class name="DefaultTreeModel" line="33">
            <comment line="419">
                Events                
            </comment>
            <comment line="653">
                Serialization support.                
            </comment>
            <implements interface="Serializable"/>
            <implements interface="TreeModel"/>
            <javadoc line="33">
                A simple tree data model that uses TreeNodes.
                  For further information and examples that use DefaultTreeModel,
                  see &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="root" type="TreeNode" line="53"/>
            <javadoc line="53">
                Root of the tree.                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="55"/>
            <javadoc line="55">
                Listeners.                
            </javadoc>
            <declaration name="asksAllowsChildren" type="boolean" line="57"/>
            <javadoc line="57">
                Determines how the &lt;code&gt;isLeaf&lt;/code&gt; method figures
                  out if a node is a leaf node. If true, a node is a leaf
                  node if it does not allow children. (If it allows
                  children, it is not a leaf node, even if no children
                  are present.) That lets you distinguish between &lt;i&gt;folder&lt;/i&gt;
                  nodes and &lt;i&gt;file&lt;/i&gt; nodes in a file system, for example.
                  &lt;p&gt;
                  If this value is false, then any node which has no
                  children is a leaf node, and any node may acquire
                  children.                
                <see>
                    TreeNode#getAllowsChildren                    
                </see>
                <see>
                    TreeModel#isLeaf                    
                </see>
                <see>
                    #setAsksAllowsChildren                    
                </see>
            </javadoc>
            <javadoc line="76">
                Creates a tree in which any node can have children.                
                <param>
                    root a TreeNode object that is the root of the tree                    
                </param>
                <see>
                    #DefaultTreeModel(TreeNode,boolean)                    
                </see>
            </javadoc>
            <method name="DefaultTreeModel" type="constructor" line="83">
                <params>
                    <param name="root" type="TreeNode"/>
                </params>
            </method>
            <javadoc line="87">
                Creates a tree specifying whether any node can have children,
                  or whether only certain nodes can have children.                
                <param>
                    root a TreeNode object that is the root of the tree                    
                </param>
                <param>
                    asksAllowsChildren a boolean, false if any node can
                      have children, true if each node is asked to see if
                      it can have children                    
                </param>
                <see>
                    #asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="DefaultTreeModel" type="constructor" line="97">
                <params>
                    <param name="root" type="TreeNode"/>
                    <param name="asksAllowsChildren" type="boolean"/>
                </params>
            </method>
            <javadoc line="103">
                Sets whether or not to test leafness by asking getAllowsChildren()
                  or isLeaf() to the TreeNodes.  If newvalue is true, getAllowsChildren()
                  is messaged, otherwise isLeaf() is messaged.                
            </javadoc>
            <method name="setAsksAllowsChildren" type="void" line="108">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <javadoc line="112">
                Tells how leaf nodes are determined.                
                <return>
                    true if only nodes which do not allow children are
                      leaf nodes, false if nodes which have no children
                      (even if allowed) are leaf nodes                    
                </return>
                <see>
                    #asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="asksAllowsChildren" type="boolean" line="120"/>
            <javadoc line="124">
                Sets the root to &lt;code&gt;root&lt;/code&gt;. A null &lt;code&gt;root&lt;/code&gt; implies
                  the tree is to display nothing, and is legal.                
            </javadoc>
            <method name="setRoot" type="void" line="128">
                <params>
                    <param name="root" type="TreeNode"/>
                </params>
                <declaration name="oldRoot" type="Object" line="129"/>
                <scope line="131"/>
                <scope line="134"/>
            </method>
            <javadoc line="139">
                Returns the root of the tree.  Returns null only if the tree has
                  no nodes.                
                <return>
                    the root of the tree                    
                </return>
            </javadoc>
            <method name="getRoot" type="Object" line="145"/>
            <javadoc line="149">
                Returns the index of child in parent.
                  If either the parent or child is &lt;code&gt;null&lt;/code&gt;, returns -1.                
                <param>
                    parent a note in the tree, obtained from this data source                    
                </param>
                <param>
                    child the node we are interested in                    
                </param>
                <return>
                    the index of the child in the parent, or -1
                      if either the parent or the child is <code>null</code>                    
                </return>
            </javadoc>
            <method name="getIndexOfChild" type="int" line="157">
                <params>
                    <param name="parent" type="Object"/>
                    <param name="child" type="Object"/>
                </params>
            </method>
            <javadoc line="163">
                Returns the child of &lt;I&gt;parent&lt;/I&gt; at index &lt;I&gt;index&lt;/I&gt; in the parent&apos;s
                  child array.  &lt;I&gt;parent&lt;/I&gt; must be a node previously obtained from
                  this data source. This should not return null if &lt;i&gt;index&lt;/i&gt;
                  is a valid index for &lt;i&gt;parent&lt;/i&gt; (that is &lt;i&gt;index&lt;/i&gt; &gt;= 0 &amp;&amp;
                  &lt;i&gt;index&lt;/i&gt; &lt; getChildCount(&lt;i&gt;parent&lt;/i&gt;)).                
                <param>
                    parent  a node in the tree, obtained from this data source                    
                </param>
                <return>
                    the child of <I>parent</I> at index <I>index</I>                    
                </return>
            </javadoc>
            <method name="getChild" type="Object" line="173">
                <params>
                    <param name="parent" type="Object"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Returns the number of children of &lt;I&gt;parent&lt;/I&gt;.  Returns 0 if the node
                  is a leaf or if it has no children.  &lt;I&gt;parent&lt;/I&gt; must be a node
                  previously obtained from this data source.                
                <param>
                    parent  a node in the tree, obtained from this data source                    
                </param>
                <return>
                    the number of children of the node <I>parent</I>                    
                </return>
            </javadoc>
            <method name="getChildCount" type="int" line="185">
                <params>
                    <param name="parent" type="Object"/>
                </params>
            </method>
            <javadoc line="189">
                Returns whether the specified node is a leaf node.
                  The way the test is performed depends on the
                  &lt;code&gt;askAllowsChildren&lt;/code&gt; setting.                
                <param>
                    node the node to check                    
                </param>
                <return>
                    true if the node is a leaf node                    
                </return>
                <see>
                    #asksAllowsChildren                    
                </see>
                <see>
                    TreeModel#isLeaf                    
                </see>
            </javadoc>
            <method name="isLeaf" type="boolean" line="200">
                <params>
                    <param name="node" type="Object"/>
                </params>
            </method>
            <javadoc line="206">
                Invoke this method if you&apos;ve modified the {@code TreeNode}s upon which
                  this model depends. The model will notify all of its listeners that the
                  model has changed.                
            </javadoc>
            <method name="reload" type="void" line="211"/>
            <javadoc line="215">
                This sets the user object of the TreeNode identified by path
                  and posts a node changed.  If you use custom user objects in
                  the TreeModel you&apos;re going to need to subclass this and
                  set the user object of the changed node to something meaningful.                
            </javadoc>
            <method name="valueForPathChanged" type="void" line="221">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="newValue" type="Object"/>
                </params>
                <declaration name="aNode" type="MutableTreeNode" line="222"/>
            </method>
            <javadoc line="228">
                Invoked this to insert newChild at location index in parents children.
                  This will then message nodesWereInserted to create the appropriate
                  event. This is the preferred way to add children as it will create
                  the appropriate event.                
            </javadoc>
            <method name="insertNodeInto" type="void" line="235">
                <params>
                    <param name="newChild" type="MutableTreeNode"/>
                    <param name="parent" type="MutableTreeNode"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="newIndexs" type="int[]" line="238"/>
            </method>
            <javadoc line="244">
                Message this to remove node from its parent. This will message
                  nodesWereRemoved to create the appropriate event. This is the
                  preferred way to remove a node as it handles the event creation
                  for you.                
            </javadoc>
            <method name="removeNodeFromParent" type="void" line="250">
                <params>
                    <param name="node" type="MutableTreeNode"/>
                </params>
                <declaration name="parent" type="MutableTreeNode" line="251"/>
                <declaration name="childIndex" type="int[]" line="256"/>
                <declaration name="removedArray" type="Object[]" line="257"/>
            </method>
            <javadoc line="265">
                Invoke this method after you&apos;ve changed how node is to be
                  represented in the tree.                
            </javadoc>
            <method name="nodeChanged" type="void" line="269">
                <params>
                    <param name="node" type="TreeNode"/>
                </params>
                <scope line="270">
                    <declaration name="parent" type="TreeNode" line="271"/>
                    <scope line="273">
                        <declaration name="anIndex" type="int" line="274"/>
                        <scope line="275">
                            <declaration name="cIndexs" type="int[]" line="276"/>
                        </scope>
                    </scope>
                    <scope line="282"/>
                </scope>
            </method>
            <javadoc line="288">
                Invoke this method if you&apos;ve modified the {@code TreeNode}s upon which
                  this model depends. The model will notify all of its listeners that the
                  model has changed below the given node.                
                <param>
                    node the node below which the model has changed                    
                </param>
            </javadoc>
            <method name="reload" type="void" line="295">
                <params>
                    <param name="node" type="TreeNode"/>
                </params>
                <scope line="296"/>
            </method>
            <javadoc line="301">
                Invoke this method after you&apos;ve inserted some TreeNodes into
                  node.  childIndices should be the index of the new elements and
                  must be sorted in ascending order.                
            </javadoc>
            <method name="nodesWereInserted" type="void" line="306">
                <params>
                    <param name="node" type="TreeNode"/>
                    <param name="childIndices" type="int[]"/>
                </params>
                <scope line="308">
                    <declaration name="cCount" type="int" line="309"/>
                    <declaration name="newChildren" type="Object[]" line="310"/>
                </scope>
            </method>
            <javadoc line="319">
                Invoke this method after you&apos;ve removed some TreeNodes from
                  node.  childIndices should be the index of the removed elements and
                  must be sorted in ascending order. And removedChildren should be
                  the array of the children objects that were removed.                
            </javadoc>
            <method name="nodesWereRemoved" type="void" line="326">
                <params>
                    <param name="node" type="TreeNode"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="removedChildren" type="Object[]"/>
                </params>
                <scope line="327"/>
            </method>
            <javadoc line="333">
                Invoke this method after you&apos;ve changed how the children identified by
                  childIndicies are to be represented in the tree.                
            </javadoc>
            <method name="nodesChanged" type="void" line="337">
                <params>
                    <param name="node" type="TreeNode"/>
                    <param name="childIndices" type="int[]"/>
                </params>
                <scope line="338">
                    <scope line="339">
                        <declaration name="cCount" type="int" line="340"/>
                        <scope line="342">
                            <declaration name="cChildren" type="Object[]" line="343"/>
                        </scope>
                    </scope>
                    <scope line="352"/>
                </scope>
            </method>
            <javadoc line="358">
                Invoke this method if you&apos;ve totally changed the children of
                  node and its childrens children...  This will post a
                  treeStructureChanged event.                
            </javadoc>
            <method name="nodeStructureChanged" type="void" line="363">
                <params>
                    <param name="node" type="TreeNode"/>
                </params>
                <scope line="364"/>
            </method>
            <javadoc line="369">
                Builds the parents of node up to and including the root node,
                  where the original node is the last element in the returned array.
                  The length of the returned array gives the node&apos;s depth in the
                  tree.                
                <param>
                    aNode the TreeNode to get the path for                    
                </param>
            </javadoc>
            <method name="getPathToRoot" type="TreeNode[]" line="377">
                <params>
                    <param name="aNode" type="TreeNode"/>
                </params>
            </method>
            <javadoc line="381">
                Builds the parents of node up to and including the root node,
                  where the original node is the last element in the returned array.
                  The length of the returned array gives the node&apos;s depth in the
                  tree.                
                <param>
                    aNode  the TreeNode to get the path for                    
                </param>
                <param>
                    depth  an int giving the number of steps already taken towards
                      the root (on recursive calls), used to size the returned array                    
                </param>
                <return>
                    an array of TreeNodes giving the path from the root to the
                      specified node                    
                </return>
            </javadoc>
            <method name="getPathToRoot" type="TreeNode[]" line="393">
                <params>
                    <param name="aNode" type="TreeNode"/>
                    <param name="depth" type="int"/>
                </params>
                <comment line="396">
                    This method recurses, traversing towards the root in order
                     size the array. On the way back, it fills in the nodes,
                     starting from the root and working back to the original node.                    
                </comment>
                <comment line="400">
                    Check for null, in case someone passed in a null node, or                    
                </comment>
                <declaration name="retNodes" type="TreeNode[]" line="394"/>
                <scope line="401"/>
                <scope line="407"/>
            </method>
            <javadoc line="422">
                Adds a listener for the TreeModelEvent posted after the tree changes.                
                <see>
                    #removeTreeModelListener                    
                </see>
                <param>
                    l       the listener to add                    
                </param>
            </javadoc>
            <method name="addTreeModelListener" type="void" line="428">
                <params>
                    <param name="l" type="TreeModelListener"/>
                </params>
            </method>
            <javadoc line="432">
                Removes a listener previously added with &lt;B&gt;addTreeModelListener()&lt;/B&gt;.                
                <see>
                    #addTreeModelListener                    
                </see>
                <param>
                    l       the listener to remove                    
                </param>
            </javadoc>
            <method name="removeTreeModelListener" type="void" line="438">
                <params>
                    <param name="l" type="TreeModelListener"/>
                </params>
            </method>
            <javadoc line="442">
                Returns an array of all the tree model listeners
                  registered on this model.                
                <return>
                    all of this model's <code>TreeModelListener</code>s
                      or an empty
                      array if no tree model listeners are currently registered                    
                </return>
                <see>
                    #addTreeModelListener                    
                </see>
                <see>
                    #removeTreeModelListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTreeModelListeners" type="TreeModelListener[]" line="455"/>
            <javadoc line="459">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    source the source of the {@code TreeModelEvent};
                      typically {@code this}                    
                </param>
                <param>
                    path the path to the parent of the nodes that changed; use{@code null} to identify the root has changed                    
                </param>
                <param>
                    childIndices the indices of the changed elements                    
                </param>
                <param>
                    children the changed elements                    
                </param>
            </javadoc>
            <method name="fireTreeNodesChanged" type="void" line="474">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="Object[]"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="children" type="Object[]"/>
                </params>
                <comment line="476">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="479">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="483">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="476"/>
                <declaration name="e" type="TreeModelEvent" line="477"/>
                <scope line="480">
                    <scope line="481"/>
                </scope>
            </method>
            <javadoc line="491">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    source the source of the {@code TreeModelEvent};
                      typically {@code this}                    
                </param>
                <param>
                    path the path to the parent the nodes were added to                    
                </param>
                <param>
                    childIndices the indices of the new elements                    
                </param>
                <param>
                    children the new elements                    
                </param>
            </javadoc>
            <method name="fireTreeNodesInserted" type="void" line="505">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="Object[]"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="children" type="Object[]"/>
                </params>
                <comment line="507">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="510">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="514">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="507"/>
                <declaration name="e" type="TreeModelEvent" line="508"/>
                <scope line="511">
                    <scope line="512"/>
                </scope>
            </method>
            <javadoc line="522">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    source the source of the {@code TreeModelEvent};
                      typically {@code this}                    
                </param>
                <param>
                    path the path to the parent the nodes were removed from                    
                </param>
                <param>
                    childIndices the indices of the removed elements                    
                </param>
                <param>
                    children the removed elements                    
                </param>
            </javadoc>
            <method name="fireTreeNodesRemoved" type="void" line="536">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="Object[]"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="children" type="Object[]"/>
                </params>
                <comment line="538">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="541">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="545">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="538"/>
                <declaration name="e" type="TreeModelEvent" line="539"/>
                <scope line="542">
                    <scope line="543"/>
                </scope>
            </method>
            <javadoc line="553">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    source the source of the {@code TreeModelEvent};
                      typically {@code this}                    
                </param>
                <param>
                    path the path to the parent of the structure that has changed;
                      use {@code null} to identify the root has changed                    
                </param>
                <param>
                    childIndices the indices of the affected elements                    
                </param>
                <param>
                    children the affected elements                    
                </param>
            </javadoc>
            <method name="fireTreeStructureChanged" type="void" line="568">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="Object[]"/>
                    <param name="childIndices" type="int[]"/>
                    <param name="children" type="Object[]"/>
                </params>
                <comment line="570">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="573">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="577">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="570"/>
                <declaration name="e" type="TreeModelEvent" line="571"/>
                <scope line="574">
                    <scope line="575"/>
                </scope>
            </method>
            <javadoc line="585">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    source the source of the {@code TreeModelEvent};
                      typically {@code this}                    
                </param>
                <param>
                    path the path to the parent of the structure that has changed;
                      use {@code null} to identify the root has changed                    
                </param>
            </javadoc>
            <method name="fireTreeStructureChanged" type="void" line="596">
                <params>
                    <param name="source" type="Object"/>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="598">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="601">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="605">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="598"/>
                <declaration name="e" type="TreeModelEvent" line="599"/>
                <scope line="602">
                    <scope line="603"/>
                </scope>
            </method>
            <javadoc line="612">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal,
                  such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;DefaultTreeModel&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;
                  for its tree model listeners with the following code:
                  &lt;pre&gt;TreeModelListener[] tmls = (TreeModelListener[])(m.getListeners(TreeModelListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this component,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getTreeModelListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="648">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="653">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="658">
                    Save the root, if its Serializable.                    
                </comment>
                <declaration name="values" type="Vector&lt;Object&gt;" line="654"/>
                <scope line="658"/>
            </method>
            <method name="readObject" type="void" line="666">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="values" type="Vector" line="669"/>
                <declaration name="indexCounter" type="int" line="670"/>
                <declaration name="maxCounter" type="int" line="671"/>
                <scope line="674"/>
            </method>
        </class>
    </source>