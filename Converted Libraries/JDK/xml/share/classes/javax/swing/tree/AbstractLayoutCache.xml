<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="javax.swing.event.TreeModelEvent"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Enumeration"/>
        <class name="AbstractLayoutCache" line="6">
            <implements interface="RowMapper"/>
            <javadoc line="6">
                &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="nodeDimensions" type="NodeDimensions" line="18"/>
            <javadoc line="18">
                Object responsible for getting the size of a node.                
            </javadoc>
            <declaration name="treeModel" type="TreeModel" line="22"/>
            <javadoc line="22">
                Model providing information.                
            </javadoc>
            <declaration name="treeSelectionModel" type="TreeSelectionModel" line="26"/>
            <javadoc line="26">
                Selection model.                
            </javadoc>
            <declaration name="rootVisible" type="boolean" line="30"/>
            <javadoc line="30">
                True if the root node is displayed, false if its children are
                  the highest visible nodes.                
            </javadoc>
            <declaration name="rowHeight" type="int" line="35"/>
            <javadoc line="35">
                Height to use for each row.  If this is &lt;= 0 the renderer will be
                  used to determine the height for each row.                
            </javadoc>
            <javadoc line="40">
                Sets the renderer that is responsible for drawing nodes in the tree
                  and which is threfore responsible for calculating the dimensions of
                  individual nodes.                
                <param>
                    nd a &lt;code&gt;NodeDimensions&lt;/code&gt; object                    
                </param>
            </javadoc>
            <method name="setNodeDimensions" type="void" line="46">
                <params>
                    <param name="nd" type="NodeDimensions"/>
                </params>
            </method>
            <javadoc line="49">
                Returns the object that renders nodes in the tree, and which is
                  responsible for calculating the dimensions of individual nodes.                
                <return>
                    the &lt;code&gt;NodeDimensions&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getNodeDimensions" type="NodeDimensions" line="54"/>
            <javadoc line="57">
                Sets the &lt;code&gt;TreeModel&lt;/code&gt; that will provide the data.                
                <param>
                    newModel the &lt;code&gt;TreeModel&lt;/code&gt; that is to
                      provide the data                    
                </param>
            </javadoc>
            <method name="setModel" type="void" line="62">
                <params>
                    <param name="newModel" type="TreeModel"/>
                </params>
            </method>
            <javadoc line="65">
                Returns the &lt;code&gt;TreeModel&lt;/code&gt; that is providing the data.                
                <return>
                    the &lt;code&gt;TreeModel&lt;/code&gt; that is providing the data                    
                </return>
            </javadoc>
            <method name="getModel" type="TreeModel" line="69"/>
            <javadoc line="72">
                Determines whether or not the root node from
                  the &lt;code&gt;TreeModel&lt;/code&gt; is visible.                
                <param>
                    rootVisible true if the root node of the tree is to be displayed                    
                </param>
                <see>
                    #rootVisible                    
                </see>
                <beaninfobound>
                    : true
                      description: Whether or not the root node
                      from the TreeModel is visible.                    
                </beaninfobound>
            </javadoc>
            <method name="setRootVisible" type="void" line="81">
                <params>
                    <param name="rootVisible" type="boolean"/>
                </params>
            </method>
            <javadoc line="84">
                Returns true if the root node of the tree is displayed.                
                <return>
                    true if the root node of the tree is displayed                    
                </return>
                <see>
                    #rootVisible                    
                </see>
            </javadoc>
            <method name="isRootVisible" type="boolean" line="89"/>
            <javadoc line="92">
                Sets the height of each cell.  If the specified value
                  is less than or equal to zero the current cell renderer is
                  queried for each row&apos;s height.                
                <param>
                    rowHeight the height of each cell, in pixels                    
                </param>
                <beaninfobound>
                    : true
                      description: The height of each cell.                    
                </beaninfobound>
            </javadoc>
            <method name="setRowHeight" type="void" line="100">
                <params>
                    <param name="rowHeight" type="int"/>
                </params>
            </method>
            <javadoc line="103">
                Returns the height of each row.  If the returned value is less than
                  or equal to 0 the height for each row is determined by the
                  renderer.                
            </javadoc>
            <method name="getRowHeight" type="int" line="108"/>
            <javadoc line="111">
                Sets the &lt;code&gt;TreeSelectionModel&lt;/code&gt; used to manage the
                  selection to new LSM.                
                <param>
                    newLSM  the new &lt;code&gt;TreeSelectionModel&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="setSelectionModel" type="void" line="116">
                <params>
                    <param name="newLSM" type="TreeSelectionModel"/>
                </params>
            </method>
            <javadoc line="121">
                Returns the model used to maintain the selection.                
                <return>
                    the &lt;code&gt;treeSelectionModel&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getSelectionModel" type="TreeSelectionModel" line="125"/>
            <javadoc line="128">
                Returns the preferred height.                
                <return>
                    the preferred height                    
                </return>
            </javadoc>
            <method name="getPreferredHeight" type="int" line="132">
                <declaration name="rowCount" type="int" line="133"/>
                <scope line="134">
                    <declaration name="bounds" type="Rectangle" line="135"/>
                </scope>
            </method>
            <javadoc line="140">
                Returns the preferred width for the passed in region.
                  The region is defined by the path closest to
                  &lt;code&gt;(bounds.x, bounds.y)&lt;/code&gt; and
                  ends at &lt;code&gt;bounds.height + bounds.y&lt;/code&gt;.
                  If &lt;code&gt;bounds&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  the preferred width for all the nodes
                  will be returned (and this may be a VERY expensive
                  computation).                
                <param>
                    bounds the region being queried                    
                </param>
                <return>
                    the preferred width for the passed in region                    
                </return>
            </javadoc>
            <method name="getPreferredWidth" type="int" line="152">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
                <declaration name="rowCount" type="int" line="153"/>
                <scope line="154">
                    <declaration name="firstPath" type="TreePath" line="155"/>
                    <declaration name="endY" type="int" line="156"/>
                    <scope line="157"/>
                    <scope line="161"/>
                    <declaration name="paths" type="Enumeration" line="165"/>
                    <scope line="166">
                        <declaration name="pBounds" type="Rectangle" line="167"/>
                        <declaration name="width" type="int" line="168"/>
                        <scope line="169">
                            <scope line="171"/>
                        </scope>
                        <scope line="176">
                            <scope line="178"/>
                            <scope line="181"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="isExpanded" type="boolean" line="190"/>
            <javadoc line="190">
                Returns true if the value identified by row is currently expanded.                
            </javadoc>
            <method name="getBounds" type="Rectangle" line="194"/>
            <javadoc line="194">
                Returns a rectangle giving the bounds needed to draw path.                
                <param>
                    path     a &lt;code&gt;TreePath&lt;/code&gt; specifying a node                    
                </param>
                <param>
                    placeIn  a &lt;code&gt;Rectangle&lt;/code&gt; object giving the
                      available space                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; object specifying the space to be used                    
                </return>
            </javadoc>
            <method name="getPathForRow" type="TreePath" line="202"/>
            <javadoc line="202">
                Returns the path for passed in row.  If row is not visible
                  &lt;code&gt;null&lt;/code&gt; is returned.                
                <param>
                    row  the row being queried                    
                </param>
                <return>
                    the &lt;code&gt;TreePath&lt;/code&gt; for the given row                    
                </return>
            </javadoc>
            <method name="getRowForPath" type="int" line="209"/>
            <javadoc line="209">
                Returns the row that the last item identified in path is visible
                  at.  Will return -1 if any of the elements in path are not
                  currently visible.                
                <param>
                    path the &lt;code&gt;TreePath&lt;/code&gt; being queried                    
                </param>
                <return>
                    the row where the last item in path is visible or -1
                      if any elements in path aren&apos;t currently visible                    
                </return>
            </javadoc>
            <method name="getPathClosestTo" type="TreePath" line="218"/>
            <javadoc line="218">
                Returns the path to the node that is closest to x,y.  If
                  there is nothing currently visible this will return &lt;code&gt;null&lt;/code&gt;,
                  otherwise it&apos;ll always return a valid path.
                  If you need to test if the
                  returned object is exactly at x, y you should get the bounds for
                  the returned path and test x, y against that.                
                <param>
                    x the horizontal component of the desired location                    
                </param>
                <param>
                    y the vertical component of the desired location                    
                </param>
                <return>
                    the &lt;code&gt;TreePath&lt;/code&gt; closest to the specified point                    
                </return>
            </javadoc>
            <method name="getVisiblePathsFrom" type="Enumeration&lt;TreePath&gt;" line="230"/>
            <javadoc line="230">
                Returns an &lt;code&gt;Enumerator&lt;/code&gt; that increments over the visible
                  paths starting at the passed in location. The ordering of the
                  enumeration is based on how the paths are displayed.
                  The first element of the returned enumeration will be path,
                  unless it isn&apos;t visible,
                  in which case &lt;code&gt;null&lt;/code&gt; will be returned.                
                <param>
                    path the starting location for the enumeration                    
                </param>
                <return>
                    the &lt;code&gt;Enumerator&lt;/code&gt; starting at the desired location                    
                </return>
            </javadoc>
            <method name="getVisibleChildCount" type="int" line="241"/>
            <javadoc line="241">
                Returns the number of visible children for row.                
                <param>
                    path  the path being queried                    
                </param>
                <return>
                    the number of visible children for the specified path                    
                </return>
            </javadoc>
            <method name="setExpandedState" type="void" line="247"/>
            <javadoc line="247">
                Marks the path &lt;code&gt;path&lt;/code&gt; expanded state to
                  &lt;code&gt;isExpanded&lt;/code&gt;.                
                <param>
                    path  the path being expanded or collapsed                    
                </param>
                <param>
                    isExpanded true if the path should be expanded, false otherwise                    
                </param>
            </javadoc>
            <method name="getExpandedState" type="boolean" line="254"/>
            <javadoc line="254">
                Returns true if the path is expanded, and visible.                
                <param>
                    path  the path being queried                    
                </param>
                <return>
                    true if the path is expanded and visible, false otherwise                    
                </return>
            </javadoc>
            <method name="getRowCount" type="int" line="260"/>
            <javadoc line="260">
                Number of rows being displayed.                
                <return>
                    the number of rows being displayed                    
                </return>
            </javadoc>
            <method name="invalidateSizes" type="void" line="265"/>
            <javadoc line="265">
                Informs the &lt;code&gt;TreeState&lt;/code&gt; that it needs to recalculate
                  all the sizes it is referencing.                
            </javadoc>
            <method name="invalidatePathBounds" type="void" line="270"/>
            <javadoc line="270">
                Instructs the &lt;code&gt;LayoutCache&lt;/code&gt; that the bounds for
                  &lt;code&gt;path&lt;/code&gt; are invalid, and need to be updated.                
                <param>
                    path the path being updated                    
                </param>
            </javadoc>
            <method name="treeNodesChanged" type="void" line="276"/>
            <javadoc line="276">
                &lt;p&gt;
                  Invoked after a node (or a set of siblings) has changed in some
                  way. The node(s) have not changed locations in the tree or
                  altered their children arrays, but other attributes have
                  changed and may affect presentation. Example: the name of a
                  file has changed, but it is in the same location in the file
                  system.&lt;/p&gt;
                  &lt;p&gt;e.path() returns the path the parent of the changed node(s).&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns the index(es) of the changed node(s).&lt;/p&gt;                
                <param>
                    e  the &lt;code&gt;TreeModelEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="treeNodesInserted" type="void" line="289"/>
            <javadoc line="289">
                &lt;p&gt;Invoked after nodes have been inserted into the tree.&lt;/p&gt;
                  &lt;p&gt;e.path() returns the parent of the new nodes&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns the indices of the new nodes in
                  ascending order.&lt;/p&gt;                
                <param>
                    e the &lt;code&gt;TreeModelEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="treeNodesRemoved" type="void" line="297"/>
            <javadoc line="297">
                &lt;p&gt;Invoked after nodes have been removed from the tree.  Note that
                  if a subtree is removed from the tree, this method may only be
                  invoked once for the root of the removed subtree, not once for
                  each individual set of siblings removed.&lt;/p&gt;
                  &lt;p&gt;e.path() returns the former parent of the deleted nodes.&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns the indices the nodes had before they were deleted in ascending order.&lt;/p&gt;                
                <param>
                    e the &lt;code&gt;TreeModelEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="treeStructureChanged" type="void" line="307"/>
            <javadoc line="307">
                &lt;p&gt;Invoked after the tree has drastically changed structure from a
                  given node down.  If the path returned by &lt;code&gt;e.getPath()&lt;/code&gt;
                  is of length one and the first element does not identify the
                  current root node the first element should become the new root
                  of the tree.&lt;/p&gt;
                  &lt;p&gt;e.path() holds the path to the node.&lt;/p&gt;
                  &lt;p&gt;e.childIndices() returns null.&lt;/p&gt;                
                <param>
                    e the &lt;code&gt;TreeModelEvent&lt;/code&gt;                    
                </param>
            </javadoc>
            <javadoc line="318">
                Returns the rows that the &lt;code&gt;TreePath&lt;/code&gt; instances in
                  &lt;code&gt;path&lt;/code&gt; are being displayed at.
                  This method should return an array of the same length as that passed
                  in, and if one of the &lt;code&gt;TreePaths&lt;/code&gt;
                  in &lt;code&gt;path&lt;/code&gt; is not valid its entry in the array should
                  be set to -1.                
                <param>
                    paths the array of &lt;code&gt;TreePath&lt;/code&gt;s being queried                    
                </param>
                <return>
                    an array of the same length that is passed in containing
                      the rows that each corresponding where each
                      &lt;code&gt;TreePath&lt;/code&gt; is displayed; if &lt;code&gt;paths&lt;/code&gt;
                      is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; is returned                    
                </return>
            </javadoc>
            <method name="getRowsForPaths" type="int[]" line="331">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
                <declaration name="numPaths" type="int" line="333"/>
                <declaration name="rows" type="int[]" line="334"/>
            </method>
            <javadoc line="338">
                Returns, by reference in &lt;code&gt;placeIn&lt;/code&gt;,
                  the size needed to represent &lt;code&gt;value&lt;/code&gt;.
                  If &lt;code&gt;inPlace&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a newly created
                  &lt;code&gt;Rectangle&lt;/code&gt; should be returned, otherwise the value
                  should be placed in &lt;code&gt;inPlace&lt;/code&gt; and returned. This will
                  return &lt;code&gt;null&lt;/code&gt; if there is no renderer.                
                <param>
                    value the &lt;code&gt;value&lt;/code&gt; to be represented                    
                </param>
                <param>
                    row  row being queried                    
                </param>
                <param>
                    depth the depth of the row                    
                </param>
                <param>
                    expanded true if row is expanded, false otherwise                    
                </param>
                <param>
                    placeIn  a &lt;code&gt;Rectangle&lt;/code&gt; containing the size needed
                      to represent &lt;code&gt;value&lt;/code&gt;                    
                </param>
                <return>
                    a &lt;code&gt;Rectangle&lt;/code&gt; containing the node dimensions,
                      or &lt;code&gt;null&lt;/code&gt; if node has no dimension                    
                </return>
            </javadoc>
            <method name="getNodeDimensions" type="Rectangle" line="354">
                <params>
                    <param name="value" type="Object"/>
                    <param name="row" type="int"/>
                    <param name="depth" type="int"/>
                    <param name="expanded" type="boolean"/>
                    <param name="placeIn" type="Rectangle"/>
                </params>
                <declaration name="nd" type="NodeDimensions" line="355"/>
                <scope line="356"/>
            </method>
            <javadoc line="361">
                Returns true if the height of each row is a fixed size.                
            </javadoc>
            <method name="isFixedRowHeight" type="boolean" line="364"/>
            <class name="NodeDimensions" line="367">
                <javadoc line="367">
                    Used by &lt;code&gt;AbstractLayoutCache&lt;/code&gt; to determine the size
                      and x origin of a particular node.                    
                </javadoc>
                <method name="getNodeDimensions" type="Rectangle" line="372"/>
                <javadoc line="372">
                    Returns, by reference in bounds, the size and x origin to
                      place value at. The calling method is responsible for determining
                      the Y location. If bounds is &lt;code&gt;null&lt;/code&gt;, a newly created
                      &lt;code&gt;Rectangle&lt;/code&gt; should be returned,
                      otherwise the value should be placed in bounds and returned.                    
                    <param>
                        value the &lt;code&gt;value&lt;/code&gt; to be represented                        
                    </param>
                    <param>
                        row row being queried                        
                    </param>
                    <param>
                        depth the depth of the row                        
                    </param>
                    <param>
                        expanded true if row is expanded, false otherwise                        
                    </param>
                    <param>
                        bounds  a &lt;code&gt;Rectangle&lt;/code&gt; containing the size needed
                          to represent &lt;code&gt;value&lt;/code&gt;                        
                    </param>
                    <return>
                        a &lt;code&gt;Rectangle&lt;/code&gt; containing the node dimensions,
                          or &lt;code&gt;null&lt;/code&gt; if node has no dimension                        
                    </return>
                </javadoc>
            </class>
        </class>
    </source>