<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Rectangle"/>
        <import package="javax.swing.plaf.ColorUIResource"/>
        <import package="javax.swing.plaf.FontUIResource"/>
        <import package="javax.swing.plaf.UIResource"/>
        <import package="javax.swing.plaf.basic.BasicGraphicsUtils"/>
        <import package="javax.swing.Icon"/>
        <import package="javax.swing.JLabel"/>
        <import package="javax.swing.JTree"/>
        <import package="javax.swing.LookAndFeel"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.border.EmptyBorder"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="DefaultTreeCellRenderer" line="20">
            <extends class="JLabel"/>
            <implements interface="TreeCellRenderer"/>
            <javadoc line="20">
                Displays an entry in a tree.
                  &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; is not opaque and
                  unless you subclass paint you should not change this.
                  See &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;
                  for examples of customizing node display using this class.
                  &lt;p&gt;
                  The set of icons and colors used by {@code DefaultTreeCellRenderer}can be configured using the various setter methods. The value for
                  each property is initialized from the defaults table. When the
                  look and feel changes ({@code updateUI} is invoked), any properties
                  that have a value of type {@code UIResource} are refreshed from the
                  defaults table. The following table lists the mapping between{@code DefaultTreeCellRenderer} property and defaults table key:
                  &lt;table border=&quot;1&quot; cellpadding=&quot;1&quot; cellspacing=&quot;0&quot;
                  valign=&quot;top&quot; &gt;
                  &lt;tr valign=&quot;top&quot;  align=&quot;left&quot;&gt;
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Property:
                  &lt;th bgcolor=&quot;#CCCCFF&quot; align=&quot;left&quot;&gt;Key:
                  &lt;tr&gt;&lt;td&gt;&quot;leafIcon&quot;&lt;td&gt;&quot;Tree.leafIcon&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;closedIcon&quot;&lt;td&gt;&quot;Tree.closedIcon&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;openIcon&quot;&lt;td&gt;&quot;Tree.openIcon&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;textSelectionColor&quot;&lt;td&gt;&quot;Tree.selectionForeground&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;textNonSelectionColor&quot;&lt;td&gt;&quot;Tree.textForeground&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;backgroundSelectionColor&quot;&lt;td&gt;&quot;Tree.selectionBackground&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;backgroundNonSelectionColor&quot;&lt;td&gt;&quot;Tree.textBackground&quot;
                  &lt;tr&gt;&lt;td&gt;&quot;borderSelectionColor&quot;&lt;td&gt;&quot;Tree.selectionBorderColor&quot;
                  &lt;/table&gt;
                  &lt;p&gt;
                  &lt;strong&gt;&lt;a name=&quot;override&quot;&gt;Implementation Note:&lt;/a&gt;&lt;/strong&gt;
                  This class overrides
                  &lt;code&gt;invalidate&lt;/code&gt;,
                  &lt;code&gt;validate&lt;/code&gt;,
                  &lt;code&gt;revalidate&lt;/code&gt;,
                  &lt;code&gt;repaint&lt;/code&gt;,
                  and
                  &lt;code&gt;firePropertyChange&lt;/code&gt;
                  solely to improve performance.
                  If not overridden, these frequently called methods would execute code paths
                  that are unnecessary for the default tree cell renderer.
                  If you write your own renderer,
                  take care to weigh the benefits and
                  drawbacks of overriding these methods.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="tree" type="JTree" line="77"/>
            <javadoc line="77">
                Last tree the renderer was painted in.                
            </javadoc>
            <declaration name="selected" type="boolean" line="81"/>
            <javadoc line="81">
                Is the value currently selected.                
            </javadoc>
            <declaration name="hasFocus" type="boolean" line="85"/>
            <javadoc line="85">
                True if has focus.                
            </javadoc>
            <declaration name="drawsFocusBorderAroundIcon" type="boolean" line="89"/>
            <javadoc line="89">
                True if draws focus border around icon as well.                
            </javadoc>
            <declaration name="drawDashedFocusIndicator" type="boolean" line="93"/>
            <javadoc line="93">
                If true, a dashed line is drawn as the focus indicator.                
            </javadoc>
            <declaration name="treeBGColor" type="Color" line="97"/>
            <javadoc line="97">
                Background color of the tree.                
            </javadoc>
            <declaration name="focusBGColor" type="Color" line="101"/>
            <javadoc line="101">
                Color to draw the focus indicator in, determined from the background.
                  color.                
            </javadoc>
            <declaration name="closedIcon" type="Icon" line="106"/>
            <javadoc line="106">
                Icon used to show non-leaf nodes that aren&apos;t expanded.                
            </javadoc>
            <declaration name="leafIcon" type="Icon" line="110"/>
            <javadoc line="110">
                Icon used to show leaf nodes.                
            </javadoc>
            <declaration name="openIcon" type="Icon" line="114"/>
            <javadoc line="114">
                Icon used to show non-leaf nodes that are expanded.                
            </javadoc>
            <declaration name="textSelectionColor" type="Color" line="118"/>
            <javadoc line="118">
                Color to use for the foreground for selected nodes.                
            </javadoc>
            <declaration name="textNonSelectionColor" type="Color" line="122"/>
            <javadoc line="122">
                Color to use for the foreground for non-selected nodes.                
            </javadoc>
            <declaration name="backgroundSelectionColor" type="Color" line="126"/>
            <javadoc line="126">
                Color to use for the background when a node is selected.                
            </javadoc>
            <declaration name="backgroundNonSelectionColor" type="Color" line="130"/>
            <javadoc line="130">
                Color to use for the background when the node isn&apos;t selected.                
            </javadoc>
            <declaration name="borderSelectionColor" type="Color" line="134"/>
            <javadoc line="134">
                Color to use for the focus indicator when the node has focus.                
            </javadoc>
            <declaration name="isDropCell" type="boolean" line="138"/>
            <declaration name="fillBackground" type="boolean" line="139"/>
            <declaration name="inited" type="boolean" line="140"/>
            <javadoc line="140">
                Set to true after the constructor has run.                
            </javadoc>
            <javadoc line="144">
                Creates a {@code DefaultTreeCellRenderer}. Icons and text color are
                  determined from the {@code UIManager}.                
            </javadoc>
            <method name="DefaultTreeCellRenderer" type="constructor" line="148"/>
            <javadoc line="151">
                {@inheritDoc}                
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="updateUI" type="void" line="155">
                <scope line="157"/>
                <scope line="160"/>
                <scope line="163"/>
                <scope line="166"/>
                <scope line="169"/>
                <scope line="172"/>
                <scope line="175"/>
                <scope line="178"/>
                <declaration name="margins" type="Insets" line="184"/>
                <scope line="185"/>
            </method>
            <javadoc line="190">
                Returns the default icon, for the current laf, that is used to
                  represent non-leaf nodes that are expanded.                
            </javadoc>
            <method name="getDefaultOpenIcon" type="Icon" line="194"/>
            <javadoc line="197">
                Returns the default icon, for the current laf, that is used to
                  represent non-leaf nodes that are not expanded.                
            </javadoc>
            <method name="getDefaultClosedIcon" type="Icon" line="201"/>
            <javadoc line="204">
                Returns the default icon, for the current laf, that is used to
                  represent leaf nodes.                
            </javadoc>
            <method name="getDefaultLeafIcon" type="Icon" line="208"/>
            <javadoc line="211">
                Sets the icon used to represent non-leaf nodes that are expanded.                
            </javadoc>
            <method name="setOpenIcon" type="void" line="214">
                <params>
                    <param name="newIcon" type="Icon"/>
                </params>
            </method>
            <javadoc line="217">
                Returns the icon used to represent non-leaf nodes that are expanded.                
            </javadoc>
            <method name="getOpenIcon" type="Icon" line="220"/>
            <javadoc line="223">
                Sets the icon used to represent non-leaf nodes that are not expanded.                
            </javadoc>
            <method name="setClosedIcon" type="void" line="226">
                <params>
                    <param name="newIcon" type="Icon"/>
                </params>
            </method>
            <javadoc line="229">
                Returns the icon used to represent non-leaf nodes that are not
                  expanded.                
            </javadoc>
            <method name="getClosedIcon" type="Icon" line="233"/>
            <javadoc line="236">
                Sets the icon used to represent leaf nodes.                
            </javadoc>
            <method name="setLeafIcon" type="void" line="239">
                <params>
                    <param name="newIcon" type="Icon"/>
                </params>
            </method>
            <javadoc line="242">
                Returns the icon used to represent leaf nodes.                
            </javadoc>
            <method name="getLeafIcon" type="Icon" line="245"/>
            <javadoc line="248">
                Sets the color the text is drawn with when the node is selected.                
            </javadoc>
            <method name="setTextSelectionColor" type="void" line="251">
                <params>
                    <param name="newColor" type="Color"/>
                </params>
            </method>
            <javadoc line="254">
                Returns the color the text is drawn with when the node is selected.                
            </javadoc>
            <method name="getTextSelectionColor" type="Color" line="257"/>
            <javadoc line="260">
                Sets the color the text is drawn with when the node isn&apos;t selected.                
            </javadoc>
            <method name="setTextNonSelectionColor" type="void" line="263">
                <params>
                    <param name="newColor" type="Color"/>
                </params>
            </method>
            <javadoc line="266">
                Returns the color the text is drawn with when the node isn&apos;t selected.                
            </javadoc>
            <method name="getTextNonSelectionColor" type="Color" line="269"/>
            <javadoc line="272">
                Sets the color to use for the background if node is selected.                
            </javadoc>
            <method name="setBackgroundSelectionColor" type="void" line="275">
                <params>
                    <param name="newColor" type="Color"/>
                </params>
            </method>
            <javadoc line="278">
                Returns the color to use for the background if node is selected.                
            </javadoc>
            <method name="getBackgroundSelectionColor" type="Color" line="281"/>
            <javadoc line="284">
                Sets the background color to be used for non selected nodes.                
            </javadoc>
            <method name="setBackgroundNonSelectionColor" type="void" line="287">
                <params>
                    <param name="newColor" type="Color"/>
                </params>
            </method>
            <javadoc line="290">
                Returns the background color to be used for non selected nodes.                
            </javadoc>
            <method name="getBackgroundNonSelectionColor" type="Color" line="293"/>
            <javadoc line="296">
                Sets the color to use for the border.                
            </javadoc>
            <method name="setBorderSelectionColor" type="void" line="299">
                <params>
                    <param name="newColor" type="Color"/>
                </params>
            </method>
            <javadoc line="302">
                Returns the color the border is drawn.                
            </javadoc>
            <method name="getBorderSelectionColor" type="Color" line="305"/>
            <javadoc line="308">
                Subclassed to map &lt;code&gt;FontUIResource&lt;/code&gt;s to null. If
                  &lt;code&gt;font&lt;/code&gt; is null, or a &lt;code&gt;FontUIResource&lt;/code&gt;, this
                  has the effect of letting the font of the JTree show
                  through. On the other hand, if &lt;code&gt;font&lt;/code&gt; is non-null, and not
                  a &lt;code&gt;FontUIResource&lt;/code&gt;, the font becomes &lt;code&gt;font&lt;/code&gt;.                
            </javadoc>
            <method name="setFont" type="void" line="315">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="319">
                Gets the font of this component.                
                <return>
                    this component's font; if a font has not been set
                      for this component, the font of its parent is returned                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="324">
                <declaration name="font" type="Font" line="325"/>
                <scope line="326"/>
            </method>
            <javadoc line="331">
                Subclassed to map &lt;code&gt;ColorUIResource&lt;/code&gt;s to null. If
                  &lt;code&gt;color&lt;/code&gt; is null, or a &lt;code&gt;ColorUIResource&lt;/code&gt;, this
                  has the effect of letting the background color of the JTree show
                  through. On the other hand, if &lt;code&gt;color&lt;/code&gt; is non-null, and not
                  a &lt;code&gt;ColorUIResource&lt;/code&gt;, the background becomes
                  &lt;code&gt;color&lt;/code&gt;.                
            </javadoc>
            <method name="setBackground" type="void" line="339">
                <params>
                    <param name="color" type="Color"/>
                </params>
            </method>
            <javadoc line="343">
                Configures the renderer based on the passed in components.
                  The value is set from messaging the tree with
                  &lt;code&gt;convertValueToText&lt;/code&gt;, which ultimately invokes
                  &lt;code&gt;toString&lt;/code&gt; on &lt;code&gt;value&lt;/code&gt;.
                  The foreground color is set based on the selection and the icon
                  is set based on the &lt;code&gt;leaf&lt;/code&gt; and &lt;code&gt;expanded&lt;/code&gt;
                  parameters.                
            </javadoc>
            <method name="getTreeCellRendererComponent" type="Component" line="352">
                <params>
                    <param name="tree" type="JTree"/>
                    <param name="value" type="Object"/>
                    <param name="sel" type="boolean"/>
                    <param name="expanded" type="boolean"/>
                    <param name="leaf" type="boolean"/>
                    <param name="row" type="int"/>
                    <param name="hasFocus" type="boolean"/>
                </params>
                <declaration name="stringValue" type="String" line="353"/>
                <declaration name="fg" type="Color" line="357"/>
                <declaration name="dropLocation" type="JTree.DropLocation" line="359"/>
                <scope line="360">
                    <declaration name="col" type="Color" line="361"/>
                    <scope line="362"/>
                    <scope line="365"/>
                </scope>
                <scope line="370"/>
                <scope line="373"/>
                <declaration name="icon" type="Icon" line="377"/>
                <scope line="378"/>
                <scope line="381"/>
                <scope line="384"/>
                <scope line="387">
                    <declaration name="laf" type="LookAndFeel" line="389"/>
                    <declaration name="disabledIcon" type="Icon" line="390"/>
                </scope>
                <scope line="394"/>
            </method>
            <javadoc line="402">
                Paints the value.  The background is filled based on selected.                
            </javadoc>
            <method name="paint" type="void" line="405">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <declaration name="bColor" type="Color" line="406"/>
                <scope line="407">
                    <scope line="409"/>
                </scope>
                <scope line="413"/>
                <scope line="416">
                    <scope line="418"/>
                </scope>
                <declaration name="imageOffset" type="int" line="422"/>
                <scope line="423">
                    <scope line="426"/>
                    <scope line="429"/>
                </scope>
                <scope line="433">
                    <scope line="434"/>
                    <scope line="437"/>
                    <scope line="440"/>
                    <scope line="443"/>
                </scope>
            </method>
            <method name="paintFocus" type="void" line="449">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                    <param name="notColor" type="Color"/>
                </params>
                <declaration name="bsColor" type="Color" line="450"/>
                <scope line="451"/>
                <scope line="455">
                    <scope line="456"/>
                </scope>
            </method>
            <method name="getLabelStart" type="int" line="464">
                <declaration name="currentI" type="Icon" line="465"/>
                <scope line="466"/>
            </method>
            <javadoc line="471">
                Overrides &lt;code&gt;JComponent.getPreferredSize&lt;/code&gt; to
                  return slightly wider preferred size value.                
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="475">
                <declaration name="retDimension" type="Dimension" line="476"/>
            </method>
            <javadoc line="480">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="validate" type="void" line="485"/>
            <javadoc line="487">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="invalidate" type="void" line="493"/>
            <javadoc line="495">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="revalidate" type="void" line="500"/>
            <javadoc line="502">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="repaint" type="void" line="507">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="509">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="repaint" type="void" line="514">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="516">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="522"/>
            <javadoc line="524">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="529">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="530"/>
            </method>
            <javadoc line="534">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="539">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="byte"/>
                    <param name="newValue" type="byte"/>
                </params>
            </method>
            <javadoc line="541">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="546">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="char"/>
                    <param name="newValue" type="char"/>
                </params>
            </method>
            <javadoc line="548">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="553">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="short"/>
                    <param name="newValue" type="short"/>
                </params>
            </method>
            <javadoc line="555">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="560">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
            </method>
            <javadoc line="562">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="567">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="long"/>
                    <param name="newValue" type="long"/>
                </params>
            </method>
            <javadoc line="569">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="574">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="float"/>
                    <param name="newValue" type="float"/>
                </params>
            </method>
            <javadoc line="576">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="581">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="double"/>
                    <param name="newValue" type="double"/>
                </params>
            </method>
            <javadoc line="583">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="588">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="boolean"/>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
        </class>
    </source>