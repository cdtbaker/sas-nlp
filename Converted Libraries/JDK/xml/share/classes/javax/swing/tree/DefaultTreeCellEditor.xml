<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf.FontUIResource"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.io"/>
        <import package="java.util.EventObject"/>
        <import package="java.util.Vector"/>
        <class name="DefaultTreeCellEditor" line="12">
            <implements interface="ActionListener"/>
            <implements interface="TreeCellEditor"/>
            <implements interface="TreeSelectionListener"/>
            <javadoc line="12">
                A &lt;code&gt;TreeCellEditor&lt;/code&gt;. You need to supply an
                  instance of &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;
                  so that the icons can be obtained. You can optionally supply
                  a &lt;code&gt;TreeCellEditor&lt;/code&gt; that will be layed out according
                  to the icon in the &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;.
                  If you do not supply a &lt;code&gt;TreeCellEditor&lt;/code&gt;,
                  a &lt;code&gt;TextField&lt;/code&gt; will be used. Editing is started
                  on a triple mouse click, or after a click, pause, click and
                  a delay of 1200 miliseconds.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.JTree                    
                </see>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="realEditor" type="TreeCellEditor" line="35"/>
            <javadoc line="35">
                Editor handling the editing.                
            </javadoc>
            <declaration name="renderer" type="DefaultTreeCellRenderer" line="39"/>
            <javadoc line="39">
                Renderer, used to get border and offsets from.                
            </javadoc>
            <declaration name="editingContainer" type="Container" line="43"/>
            <javadoc line="43">
                Editing container, will contain the &lt;code&gt;editorComponent&lt;/code&gt;.                
            </javadoc>
            <declaration name="editingComponent" type="Component" line="47"/>
            <javadoc line="47">
                Component used in editing, obtained from the
                  &lt;code&gt;editingContainer&lt;/code&gt;.                
            </javadoc>
            <declaration name="canEdit" type="boolean" line="52"/>
            <javadoc line="52">
                As of Java 2 platform v1.4 this field should no longer be used. If
                  you wish to provide similar behavior you should directly override
                  &lt;code&gt;isCellEditable&lt;/code&gt;.                
            </javadoc>
            <declaration name="offset" type="int" line="58"/>
            <javadoc line="58">
                Used in editing. Indicates x position to place
                  &lt;code&gt;editingComponent&lt;/code&gt;.                
            </javadoc>
            <declaration name="tree" type="JTree" line="63"/>
            <javadoc line="63">
                &lt;code&gt;JTree&lt;/code&gt; instance listening too.                
            </javadoc>
            <declaration name="lastPath" type="TreePath" line="67"/>
            <javadoc line="67">
                Last path that was selected.                
            </javadoc>
            <declaration name="timer" type="Timer" line="71"/>
            <javadoc line="71">
                Used before starting the editing session.                
            </javadoc>
            <declaration name="lastRow" type="int" line="75"/>
            <javadoc line="75">
                Row that was last passed into
                  &lt;code&gt;getTreeCellEditorComponent&lt;/code&gt;.                
            </javadoc>
            <declaration name="borderSelectionColor" type="Color" line="80"/>
            <javadoc line="80">
                True if the border selection color should be drawn.                
            </javadoc>
            <declaration name="editingIcon" type="Icon" line="84"/>
            <javadoc line="84">
                Icon to use when editing.                
            </javadoc>
            <declaration name="font" type="Font" line="88"/>
            <javadoc line="88">
                Font to paint with, &lt;code&gt;null&lt;/code&gt; indicates
                  font of renderer is to be used.                
            </javadoc>
            <javadoc line="93">
                Constructs a &lt;code&gt;DefaultTreeCellEditor&lt;/code&gt;
                  object for a JTree using the specified renderer and
                  a default editor. (Use this constructor for normal editing.)                
                <param>
                    tree      a &lt;code&gt;JTree&lt;/code&gt; object                    
                </param>
                <param>
                    renderer  a &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; object                    
                </param>
            </javadoc>
            <method name="DefaultTreeCellEditor" type="constructor" line="100">
                <params>
                    <param name="tree" type="JTree"/>
                    <param name="renderer" type="DefaultTreeCellRenderer"/>
                </params>
            </method>
            <javadoc line="103">
                Constructs a &lt;code&gt;DefaultTreeCellEditor&lt;/code&gt;
                  object for a &lt;code&gt;JTree&lt;/code&gt; using the
                  specified renderer and the specified editor. (Use this constructor
                  for specialized editing.)                
                <param>
                    tree      a &lt;code&gt;JTree&lt;/code&gt; object                    
                </param>
                <param>
                    renderer  a &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; object                    
                </param>
                <param>
                    editor    a &lt;code&gt;TreeCellEditor&lt;/code&gt; object                    
                </param>
            </javadoc>
            <method name="DefaultTreeCellEditor" type="constructor" line="112">
                <params>
                    <param name="tree" type="JTree"/>
                    <param name="renderer" type="DefaultTreeCellRenderer"/>
                    <param name="editor" type="TreeCellEditor"/>
                </params>
            </method>
            <javadoc line="120">
                Sets the color to use for the border.                
                <param>
                    newColor the new border color                    
                </param>
            </javadoc>
            <method name="setBorderSelectionColor" type="void" line="124">
                <params>
                    <param name="newColor" type="Color"/>
                </params>
            </method>
            <javadoc line="127">
                Returns the color the border is drawn.                
                <return>
                    the border selection color                    
                </return>
            </javadoc>
            <method name="getBorderSelectionColor" type="Color" line="131"/>
            <javadoc line="134">
                Sets the font to edit with. &lt;code&gt;null&lt;/code&gt; indicates
                  the renderers font should be used. This will NOT
                  override any font you have set in the editor
                  the receiver was instantied with. If &lt;code&gt;null&lt;/code&gt;
                  for an editor was passed in a default editor will be
                  created that will pick up this font.                
                <param>
                    font  the editing &lt;code&gt;Font&lt;/code&gt;                    
                </param>
                <see>
                    #getFont                    
                </see>
            </javadoc>
            <method name="setFont" type="void" line="144">
                <params>
                    <param name="font" type="Font"/>
                </params>
            </method>
            <javadoc line="147">
                Gets the font used for editing.                
                <return>
                    the editing &lt;code&gt;Font&lt;/code&gt;                    
                </return>
                <see>
                    #setFont                    
                </see>
            </javadoc>
            <method name="getFont" type="Font" line="152"/>
            <javadoc line="155">
                Configures the editor.  Passed onto the &lt;code&gt;realEditor&lt;/code&gt;.                
            </javadoc>
            <method name="getTreeCellEditorComponent" type="Component" line="158">
                <params>
                    <param name="tree" type="JTree"/>
                    <param name="value" type="Object"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="expanded" type="boolean"/>
                    <param name="leaf" type="boolean"/>
                    <param name="row" type="int"/>
                </params>
                <scope line="162"/>
                <declaration name="newPath" type="TreePath" line="166"/>
                <declaration name="font" type="Font" line="168"/>
                <scope line="169"/>
            </method>
            <javadoc line="177">
                Returns the value currently being edited.                
                <return>
                    the value currently being edited                    
                </return>
            </javadoc>
            <method name="getCellEditorValue" type="Object" line="181"/>
            <javadoc line="184">
                If the &lt;code&gt;realEditor&lt;/code&gt; returns true to this
                  message, &lt;code&gt;prepareForEditing&lt;/code&gt;
                  is messaged and true is returned.                
            </javadoc>
            <method name="isCellEditable" type="boolean" line="189">
                <params>
                    <param name="event" type="EventObject"/>
                </params>
                <declaration name="retValue" type="boolean" line="190"/>
                <declaration name="editable" type="boolean" line="191"/>
                <scope line="192">
                    <scope line="193">
                        <scope line="195">
                            <declaration name="path" type="TreePath" line="196"/>
                            <scope line="198">
                                <declaration name="value" type="Object" line="200"/>
                                <declaration name="isSelected" type="boolean" line="201"/>
                                <declaration name="expanded" type="boolean" line="202"/>
                                <declaration name="treeModel" type="TreeModel" line="203"/>
                                <declaration name="leaf" type="boolean" line="204"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="212"/>
            </method>
            <javadoc line="219">
                Messages the &lt;code&gt;realEditor&lt;/code&gt; for the return value.                
            </javadoc>
            <method name="shouldSelectCell" type="boolean" line="222">
                <params>
                    <param name="event" type="EventObject"/>
                </params>
            </method>
            <javadoc line="225">
                If the &lt;code&gt;realEditor&lt;/code&gt; will allow editing to stop,
                  the &lt;code&gt;realEditor&lt;/code&gt; is removed and true is returned,
                  otherwise false is returned.                
            </javadoc>
            <method name="stopCellEditing" type="boolean" line="230">
                <scope line="231"/>
            </method>
            <javadoc line="237">
                Messages &lt;code&gt;cancelCellEditing&lt;/code&gt; to the
                  &lt;code&gt;realEditor&lt;/code&gt; and removes it from this instance.                
            </javadoc>
            <method name="cancelCellEditing" type="void" line="241"/>
            <javadoc line="245">
                Adds the &lt;code&gt;CellEditorListener&lt;/code&gt;.                
                <param>
                    l the listener to be added                    
                </param>
            </javadoc>
            <method name="addCellEditorListener" type="void" line="249">
                <params>
                    <param name="l" type="CellEditorListener"/>
                </params>
            </method>
            <javadoc line="252">
                Removes the previously added &lt;code&gt;CellEditorListener&lt;/code&gt;.                
                <param>
                    l the listener to be removed                    
                </param>
            </javadoc>
            <method name="removeCellEditorListener" type="void" line="256">
                <params>
                    <param name="l" type="CellEditorListener"/>
                </params>
            </method>
            <javadoc line="259">
                Returns an array of all the &lt;code&gt;CellEditorListener&lt;/code&gt;s added
                  to this DefaultTreeCellEditor with addCellEditorListener().                
                <return>
                    all of the &lt;code&gt;CellEditorListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCellEditorListeners" type="CellEditorListener[]" line="266"/>
            <javadoc line="269">
                Resets &lt;code&gt;lastPath&lt;/code&gt;.                
            </javadoc>
            <method name="valueChanged" type="void" line="272">
                <params>
                    <param name="e" type="TreeSelectionEvent"/>
                </params>
                <scope line="273"/>
                <scope line="277"/>
            </method>
            <javadoc line="281">
                Messaged when the timer fires, this will start the editing
                  session.                
            </javadoc>
            <method name="actionPerformed" type="void" line="285">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <scope line="286"/>
            </method>
            <javadoc line="290">
                Sets the tree currently editing for. This is needed to add
                  a selection listener.                
                <param>
                    newTree the new tree to be edited                    
                </param>
            </javadoc>
            <method name="setTree" type="void" line="295">
                <params>
                    <param name="newTree" type="JTree"/>
                </params>
                <scope line="296">
                    <scope line="300"/>
                </scope>
            </method>
            <javadoc line="305">
                Returns true if &lt;code&gt;event&lt;/code&gt; is a &lt;code&gt;MouseEvent&lt;/code&gt;
                  and the click count is 1.                
                <param>
                    event  the event being studied                    
                </param>
            </javadoc>
            <method name="shouldStartEditingTimer" type="boolean" line="310">
                <params>
                    <param name="event" type="EventObject"/>
                </params>
                <scope line="311">
                    <declaration name="me" type="MouseEvent" line="312"/>
                </scope>
            </method>
            <javadoc line="317">
                Starts the editing timer.                
            </javadoc>
            <method name="startEditingTimer" type="void" line="320">
                <scope line="321"/>
            </method>
            <javadoc line="327">
                Returns true if &lt;code&gt;event&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  or it is a &lt;code&gt;MouseEvent&lt;/code&gt; with a click count &gt; 2
                  and &lt;code&gt;inHitRegion&lt;/code&gt; returns true.                
                <param>
                    event the event being studied                    
                </param>
            </javadoc>
            <method name="canEditImmediately" type="boolean" line="333">
                <params>
                    <param name="event" type="EventObject"/>
                </params>
                <scope line="334">
                    <declaration name="me" type="MouseEvent" line="335"/>
                </scope>
            </method>
            <javadoc line="340">
                Returns true if the passed in location is a valid mouse location
                  to start editing from. This is implemented to return false if
                  &lt;code&gt;x&lt;/code&gt; is &lt;= the width of the icon and icon gap displayed
                  by the renderer. In other words this returns true if the user
                  clicks over the text part displayed by the renderer, and false
                  otherwise.                
                <param>
                    x the x-coordinate of the point                    
                </param>
                <param>
                    y the y-coordinate of the point                    
                </param>
                <return>
                    true if the passed in location is a valid mouse location                    
                </return>
            </javadoc>
            <method name="inHitRegion" type="boolean" line="351">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="352">
                    <declaration name="bounds" type="Rectangle" line="353"/>
                    <declaration name="treeOrientation" type="ComponentOrientation" line="354"/>
                    <scope line="355">
                        <scope line="356"/>
                    </scope>
                    <scope line="360"/>
                </scope>
            </method>
            <method name="determineOffset" type="void" line="366">
                <params>
                    <param name="tree" type="JTree"/>
                    <param name="value" type="Object"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="expanded" type="boolean"/>
                    <param name="leaf" type="boolean"/>
                    <param name="row" type="int"/>
                </params>
                <scope line="367"/>
                <scope line="374"/>
            </method>
            <javadoc line="379">
                Invoked just before editing is to start. Will add the
                  &lt;code&gt;editingComponent&lt;/code&gt; to the
                  &lt;code&gt;editingContainer&lt;/code&gt;.                
            </javadoc>
            <method name="prepareForEditing" type="void" line="384">
                <scope line="385"/>
            </method>
            <javadoc line="389">
                Creates the container to manage placement of
                  &lt;code&gt;editingComponent&lt;/code&gt;.                
            </javadoc>
            <method name="createContainer" type="Container" line="393"/>
            <javadoc line="396">
                This is invoked if a &lt;code&gt;TreeCellEditor&lt;/code&gt;
                  is not supplied in the constructor.
                  It returns a &lt;code&gt;TextField&lt;/code&gt; editor.                
                <return>
                    a new &lt;code&gt;TextField&lt;/code&gt; editor                    
                </return>
            </javadoc>
            <method name="createTreeCellEditor" type="TreeCellEditor" line="402">
                <declaration name="aBorder" type="Border" line="403"/>
                <anonymous_class line="404">
                    <method name="shouldSelectCell" type="boolean" line="405">
                        <params>
                            <param name="event" type="EventObject"/>
                        </params>
                        <declaration name="retValue" type="boolean" line="406"/>
                    </method>
                </anonymous_class>
                <declaration name="editor" type="DefaultCellEditor" line="404"/>
            </method>
            <javadoc line="414">
                Cleans up any state after editing has completed. Removes the
                  &lt;code&gt;editingComponent&lt;/code&gt; the &lt;code&gt;editingContainer&lt;/code&gt;.                
            </javadoc>
            <method name="cleanupAfterEditing" type="void" line="418">
                <scope line="419"/>
            </method>
            <method name="writeObject" type="void" line="424">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="values" type="Vector&amp;lt;Object&amp;gt;" line="425"/>
                <scope line="427"/>
            </method>
            <method name="readObject" type="void" line="433">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="values" type="Vector" line="435"/>
                <declaration name="indexCounter" type="int" line="436"/>
                <declaration name="maxCounter" type="int" line="437"/>
                <scope line="438"/>
            </method>
            <class name="DefaultTextField" line="443">
                <extends class="JTextField"/>
                <javadoc line="443">
                    &lt;code&gt;TextField&lt;/code&gt; used when no editor is supplied.
                      This textfield locks into the border it is constructed with.
                      It also prefers its parents font over its font. And if the
                      renderer is not &lt;code&gt;null&lt;/code&gt; and no font
                      has been specified the preferred height is that of the renderer.                    
                </javadoc>
                <declaration name="border" type="Border" line="451"/>
                <javadoc line="451">
                    Border to use.                    
                </javadoc>
                <javadoc line="455">
                    Constructs a
                      &lt;code&gt;DefaultTreeCellEditor.DefaultTextField&lt;/code&gt; object.                    
                    <param>
                        border  a &lt;code&gt;Border&lt;/code&gt; object                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="DefaultTextField" type="constructor" line="461">
                    <params>
                        <param name="border" type="Border"/>
                    </params>
                </method>
                <javadoc line="464">
                    Sets the border of this component.&lt;p&gt;
                      This is a bound property.                    
                    <param>
                        border the border to be rendered for this component                        
                    </param>
                    <see>
                        Border                        
                    </see>
                    <see>
                        CompoundBorder                        
                    </see>
                    <beaninfobound>
                        : true
                          preferred: true
                          attribute: visualUpdate true
                          description: The component&apos;s border.                        
                    </beaninfobound>
                </javadoc>
                <method name="setBorder" type="void" line="475">
                    <params>
                        <param name="border" type="Border"/>
                    </params>
                </method>
                <javadoc line="479">
                    Overrides &lt;code&gt;JComponent.getBorder&lt;/code&gt; to
                      returns the current border.                    
                </javadoc>
                <method name="getBorder" type="Border" line="483"/>
                <method name="getFont" type="Font" line="486">
                    <declaration name="font" type="Font" line="487"/>
                    <scope line="488">
                        <declaration name="parent" type="Container" line="489"/>
                    </scope>
                </method>
                <javadoc line="494">
                    Overrides &lt;code&gt;JTextField.getPreferredSize&lt;/code&gt; to
                      return the preferred size based on current font, if set,
                      or else use renderer&apos;s font.                    
                    <return>
                        a &lt;code&gt;Dimension&lt;/code&gt; object containing
                          the preferred size                        
                    </return>
                </javadoc>
                <method name="getPreferredSize" type="Dimension" line="501">
                    <declaration name="size" type="Dimension" line="502"/>
                    <scope line="503">
                        <declaration name="rSize" type="Dimension" line="504"/>
                    </scope>
                </method>
            </class>
            <class name="EditorContainer" line="510">
                <extends class="Container"/>
                <javadoc line="510">
                    Container responsible for placing the &lt;code&gt;editingComponent&lt;/code&gt;.                    
                </javadoc>
                <javadoc line="514">
                    Constructs an &lt;code&gt;EditorContainer&lt;/code&gt; object.                    
                </javadoc>
                <method name="EditorContainer" type="constructor" line="517"/>
                <method name="EditorContainer" type="void" line="520"/>
                <javadoc line="523">
                    Overrides &lt;code&gt;Container.paint&lt;/code&gt; to paint the node&apos;s
                      icon and use the selection color for the background.                    
                </javadoc>
                <method name="paint" type="void" line="527">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <declaration name="width" type="int" line="528"/>
                    <declaration name="height" type="int" line="529"/>
                    <scope line="530">
                        <declaration name="yLoc" type="int" line="531"/>
                        <scope line="532"/>
                        <scope line="535"/>
                    </scope>
                    <declaration name="background" type="Color" line="539"/>
                    <scope line="540"/>
                </method>
                <javadoc line="546">
                    Lays out this &lt;code&gt;Container&lt;/code&gt;.  If editing,
                      the editor will be placed at
                      &lt;code&gt;offset&lt;/code&gt; in the x direction and 0 for y.                    
                </javadoc>
                <method name="doLayout" type="void" line="551">
                    <scope line="552">
                        <declaration name="width" type="int" line="553"/>
                        <declaration name="height" type="int" line="554"/>
                        <scope line="555"/>
                        <scope line="558"/>
                    </scope>
                </method>
                <javadoc line="563">
                    Calculate the y location for the icon.                    
                </javadoc>
                <method name="calculateIconY" type="int" line="566">
                    <params>
                        <param name="icon" type="Icon"/>
                    </params>
                    <declaration name="iconHeight" type="int" line="567"/>
                    <declaration name="textHeight" type="int" line="568"/>
                    <declaration name="textY" type="int" line="569"/>
                    <declaration name="totalY" type="int" line="570"/>
                    <declaration name="totalHeight" type="int" line="571"/>
                </method>
                <javadoc line="574">
                    Returns the preferred size for the &lt;code&gt;Container&lt;/code&gt;.
                      This will be at least preferred size of the editor plus
                      &lt;code&gt;offset&lt;/code&gt;.                    
                    <return>
                        a &lt;code&gt;Dimension&lt;/code&gt; containing the preferred
                          size for the &lt;code&gt;Container&lt;/code&gt;; if
                          &lt;code&gt;editingComponent&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; the
                          &lt;code&gt;Dimension&lt;/code&gt; returned is 0, 0                        
                    </return>
                </javadoc>
                <method name="getPreferredSize" type="Dimension" line="583">
                    <scope line="584">
                        <declaration name="pSize" type="Dimension" line="585"/>
                        <declaration name="rSize" type="Dimension" line="587"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>