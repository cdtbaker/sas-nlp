<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="java.io"/>
        <import package="java.beans.ConstructorProperties"/>
        <class name="TreePath" line="31">
            <extends class="Object"/>
            <implements interface="Serializable"/>
            <javadoc line="31">
                {@code TreePath} represents an array of objects that uniquely
                  identify the path to a node in a tree. The elements of the array
                  are ordered with the root as the first element of the array. For
                  example, a file on the file system is uniquely identified based on
                  the array of parent directories and the name of the file. The path{@code /tmp/foo/bar} could be represented by a {@code TreePath} as{@code} new TreePath(new Object[] 
                  &quot;tmp&quot;, &quot;foo&quot;, &quot;bar&quot;})}.
                  &lt;p&gt;{@code TreePath} is used extensively by {@code JTree} and related classes.
                  For example, {@code JTree} represents the selection as an array of{@code TreePath}s. When used with {@code JTree}, the elements of the
                  path are the objects returned from the {@code TreeModel}. When {@code JTree}is paired with {@code DefaultTreeModel}, the elements of the
                  path are {@code TreeNode}s. The following example illustrates extracting
                  the user object from the selection of a {@code JTree}:
                  &lt;pre&gt;
                  DefaultMutableTreeNode root = ...;
                  DefaultTreeModel model = new DefaultTreeModel(root);
                  JTree tree = new JTree(model);
                  ...
                  TreePath selectedPath = tree.getSelectionPath();
                  DefaultMutableTreeNode selectedNode =
                  ((DefaultMutableTreeNode)selectedPath.getLastPathComponent()).
                  getUserObject();
                  &lt;/pre&gt;
                  Subclasses typically need override only {@codegetLastPathComponent}, and {@code getParentPath}. As {@code JTree}internally creates {@code TreePath}s at various points, it&apos;s
                  generally not useful to subclass {@code TreePath} and use with{@code JTree}.
                  &lt;p&gt;
                  While {@code TreePath} is serializable, a {@codeNotSerializableException} is thrown if any elements of the path are
                  not serializable.
                  &lt;p&gt;
                  For further information and examples of using tree paths,
                  see &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Scott Violet                    
                </author>
                <author>
                    Philip Milne                    
                </author>
            </javadoc>
            <declaration name="parentPath" type="TreePath" line="85"/>
            <javadoc line="85">
                Path representing the parent, null if lastPathComponent represents
                  the root.                
            </javadoc>
            <declaration name="lastPathComponent" type="Object" line="88"/>
            <javadoc line="88">
                Last path component.                
            </javadoc>
            <javadoc line="91">
                Creates a {@code TreePath} from an array. The array uniquely
                  identifies the path to a node.                
                <param>
                    path an array of objects representing the path to a node                    
                </param>
                <throws>
                    IllegalArgumentException if {@code path} is {@code null},
                      empty, or contains a {@code null} value                    
                </throws>
            </javadoc>
            <method name="TreePath" type="constructor" line="100">
                <params>
                    <param name="path" type="Object[]"/>
                </params>
                <scope line="104"/>
            </method>
            <javadoc line="112">
                Creates a {@code TreePath} containing a single element. This is
                  used to construct a {@code TreePath} identifying the root.                
                <param>
                    lastPathComponent the root                    
                </param>
                <see>
                    #TreePath(Object[])                    
                </see>
                <throws>
                    IllegalArgumentException if {@code lastPathComponent} is{@code null}                    
                </throws>
            </javadoc>
            <method name="TreePath" type="constructor" line="121">
                <params>
                    <param name="lastPathComponent" type="Object"/>
                </params>
            </method>
            <javadoc line="128">
                Creates a {@code TreePath} with the specified parent and element.                
                <param>
                    parent the path to the parent, or {@code null} to indicate
                      the root                    
                </param>
                <param>
                    lastPathComponent the last path element                    
                </param>
                <throws>
                    IllegalArgumentException if {@code lastPathComponent} is{@code null}                    
                </throws>
            </javadoc>
            <method name="TreePath" type="constructor" line="137">
                <params>
                    <param name="parent" type="TreePath"/>
                    <param name="lastPathComponent" type="Object"/>
                </params>
            </method>
            <javadoc line="144">
                Creates a {@code TreePath} from an array. The returned{@code TreePath} represents the elements of the array from{@code 0} to {@code length - 1}.
                  &lt;p&gt;
                  This constructor is used internally, and generally not useful outside
                  of subclasses.                
                <param>
                    path the array to create the {@code TreePath} from                    
                </param>
                <param>
                    length identifies the number of elements in {@code path} to
                      create the {@code TreePath} from                    
                </param>
                <throws>
                    NullPointerException if {@code path} is {@code null}                    
                </throws>
                <throws>
                    ArrayIndexOutOfBoundsException if {@code length - 1} is
                      outside the range of the array                    
                </throws>
                <throws>
                    IllegalArgumentException if any of the elements from{@code 0} to {@code length - 1} are {@code null}                    
                </throws>
            </javadoc>
            <method name="TreePath" type="constructor" line="161">
                <params>
                    <param name="path" type="Object[]"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="163"/>
            </method>
            <javadoc line="171">
                Creates an empty {@code TreePath}.  This is provided for
                  subclasses that represent paths in a different
                  manner. Subclasses that use this constructor must override{@code getLastPathComponent}, and {@code getParentPath}.                
            </javadoc>
            <method name="TreePath" type="constructor" line="177"/>
            <javadoc line="180">
                Returns an ordered array of the elements of this {@code TreePath}.
                  The first element is the root.                
                <return>
                    an array of the elements in this {@code TreePath}                    
                </return>
            </javadoc>
            <method name="getPath" type="Object[]" line="186">
                <declaration name="i" type="int" line="187"/>
                <declaration name="result" type="Object[]" line="188"/>
                <scope line="190"/>
            </method>
            <javadoc line="196">
                Returns the last element of this path.                
                <return>
                    the last element in the path                    
                </return>
            </javadoc>
            <method name="getLastPathComponent" type="Object" line="201"/>
            <javadoc line="205">
                Returns the number of elements in the path.                
                <return>
                    the number of elements in the path                    
                </return>
            </javadoc>
            <method name="getPathCount" type="int" line="210">
                <declaration name="result" type="int" line="211"/>
                <scope line="212"/>
            </method>
            <javadoc line="218">
                Returns the path element at the specified index.                
                <param>
                    index the index of the element requested                    
                </param>
                <return>
                    the element at the specified index                    
                </return>
                <throws>
                    IllegalArgumentException if the index is outside the
                      range of this path                    
                </throws>
            </javadoc>
            <method name="getPathComponent" type="Object" line="226">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="pathLength" type="int" line="227"/>
                <declaration name="path" type="TreePath" line="233"/>
                <scope line="235"/>
            </method>
            <javadoc line="241">
                Compares this {@code TreePath} to the specified object. This returns{@code true} if {@code o} is a {@code TreePath} with the exact
                  same elements (as determined by using {@code equals} on each
                  element of the path).                
                <param>
                    o the object to compare                    
                </param>
            </javadoc>
            <method name="equals" type="boolean" line="249">
                <params>
                    <param name="o" type="Object"/>
                </params>
                <scope line="252">
                    <declaration name="oTreePath" type="TreePath" line="253"/>
                    <scope line="258">
                        <scope line="260"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="270">
                Returns the hash code of this {@code TreePath}. The hash code of a{@code TreePath} is the hash code of the last element in the path.                
                <return>
                    the hashCode for the object                    
                </return>
            </javadoc>
            <method name="hashCode" type="int" line="276"/>
            <javadoc line="280">
                Returns true if &lt;code&gt;aTreePath&lt;/code&gt; is a
                  descendant of this{@code TreePath}. A {@code TreePath} {@code P1} is a descendant of a{@code TreePath} {@code P2}if {@code P1} contains all of the elements that make up{@code P2&apos;s} path.
                  For example, if this object has the path {@code [a, b]},
                  and &lt;code&gt;aTreePath&lt;/code&gt; has the path {@code [a, b, c]},
                  then &lt;code&gt;aTreePath&lt;/code&gt; is a descendant of this object.
                  However, if &lt;code&gt;aTreePath&lt;/code&gt; has the path {@code [a]},
                  then it is not a descendant of this object.  By this definition
                  a {@code TreePath} is always considered a descendant of itself.
                  That is, &lt;code&gt;aTreePath.isDescendant(aTreePath)&lt;/code&gt; returns{@code true}.                
                <param>
                    aTreePath the {@code TreePath} to check                    
                </param>
                <return>
                    true if <code>aTreePath</code> is a descendant of this path                    
                </return>
            </javadoc>
            <method name="isDescendant" type="boolean" line="299">
                <params>
                    <param name="aTreePath" type="TreePath"/>
                </params>
                <comment line="308">
                    Can&apos;t be a descendant, has fewer components in the path.                    
                </comment>
                <scope line="303">
                    <declaration name="pathLength" type="int" line="304"/>
                    <declaration name="oPathLength" type="int" line="305"/>
                </scope>
            </method>
            <javadoc line="317">
                Returns a new path containing all the elements of this path
                  plus &lt;code&gt;child&lt;/code&gt;. &lt;code&gt;child&lt;/code&gt; is the last element
                  of the newly created {@code TreePath}.                
                <param>
                    child the path element to add                    
                </param>
                <throws>
                    NullPointerException if {@code child} is {@code null}                    
                </throws>
            </javadoc>
            <method name="pathByAddingChild" type="TreePath" line="325">
                <params>
                    <param name="child" type="Object"/>
                </params>
            </method>
            <javadoc line="332">
                Returns the {@code TreePath} of the parent. A return value of{@code null} indicates this is the root node.                
                <return>
                    the parent path                    
                </return>
            </javadoc>
            <method name="getParentPath" type="TreePath" line="338"/>
            <javadoc line="342">
                Returns a string that displays and identifies this
                  object&apos;s properties.                
                <return>
                    a String representation of this object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="348">
                <declaration name="tempSpot" type="StringBuffer" line="349"/>
                <scope line="352"/>
            </method>
        </class>
    </source>