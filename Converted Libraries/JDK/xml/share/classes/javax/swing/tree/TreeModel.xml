<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="javax.swing.event"/>
        <interface name="TreeModel">
            <javadoc line="3">
                The model used by &lt;code&gt;JTree&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;JTree&lt;/code&gt; and its related classes make extensive use of
                  &lt;code&gt;TreePath&lt;/code&gt;s for indentifying nodes in the &lt;code&gt;TreeModel&lt;/code&gt;.
                  If a &lt;code&gt;TreeModel&lt;/code&gt; returns the same object, as compared by
                  &lt;code&gt;equals&lt;/code&gt;, at two different indices under the same parent
                  than the resulting &lt;code&gt;TreePath&lt;/code&gt; objects will be considered equal
                  as well. Some implementations may assume that if two
                  &lt;code&gt;TreePath&lt;/code&gt;s are equal, they identify the same node. If this
                  condition is not met, painting problems and other oddities may result.
                  In other words, if &lt;code&gt;getChild&lt;/code&gt; for a given parent returns
                  the same Object (as determined by &lt;code&gt;equals&lt;/code&gt;) problems may
                  result, and it is recommended you avoid doing this.
                  &lt;p&gt;
                  Similarly &lt;code&gt;JTree&lt;/code&gt; and its related classes place
                  &lt;code&gt;TreePath&lt;/code&gt;s in &lt;code&gt;Map&lt;/code&gt;s.  As such if
                  a node is requested twice, the return values must be equal
                  (using the &lt;code&gt;equals&lt;/code&gt; method) and have the same
                  &lt;code&gt;hashCode&lt;/code&gt;.
                  &lt;p&gt;
                  For further information on tree models,
                  including an example of a custom implementation,
                  see &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;                
                <see>
                    TreePath                    
                </see>
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
            </javadoc>
            <method name="getRoot" type="Object" line="34"/>
            <javadoc line="34">
                Returns the root of the tree.  Returns &lt;code&gt;null&lt;/code&gt;
                  only if the tree has no nodes.                
                <return>
                    the root of the tree                    
                </return>
            </javadoc>
            <method name="getChild" type="Object" line="40"/>
            <javadoc line="40">
                Returns the child of &lt;code&gt;parent&lt;/code&gt; at index &lt;code&gt;index&lt;/code&gt;
                  in the parent&apos;s
                  child array.  &lt;code&gt;parent&lt;/code&gt; must be a node previously obtained
                  from this data source. This should not return &lt;code&gt;null&lt;/code&gt;
                  if &lt;code&gt;index&lt;/code&gt;
                  is a valid index for &lt;code&gt;parent&lt;/code&gt; (that is &lt;code&gt;index &gt;= 0 &amp;&amp;
                  index &lt; getChildCount(parent&lt;/code&gt;)).                
                <param>
                    parent  a node in the tree, obtained from this data source                    
                </param>
                <return>
                    the child of &lt;code&gt;parent&lt;/code&gt; at index &lt;code&gt;index&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getChildCount" type="int" line="52"/>
            <javadoc line="52">
                Returns the number of children of &lt;code&gt;parent&lt;/code&gt;.
                  Returns 0 if the node
                  is a leaf or if it has no children.  &lt;code&gt;parent&lt;/code&gt; must be a node
                  previously obtained from this data source.                
                <param>
                    parent  a node in the tree, obtained from this data source                    
                </param>
                <return>
                    the number of children of the node &lt;code&gt;parent&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="isLeaf" type="boolean" line="61"/>
            <javadoc line="61">
                Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;node&lt;/code&gt; is a leaf.
                  It is possible for this method to return &lt;code&gt;false&lt;/code&gt;
                  even if &lt;code&gt;node&lt;/code&gt; has no children.
                  A directory in a filesystem, for example,
                  may contain no files; the node representing
                  the directory is not a leaf, but it also has no children.                
                <param>
                    node  a node in the tree, obtained from this data source                    
                </param>
                <return>
                    true if &lt;code&gt;node&lt;/code&gt; is a leaf                    
                </return>
            </javadoc>
            <method name="valueForPathChanged" type="void" line="72"/>
            <javadoc line="72">
                Messaged when the user has altered the value for the item identified
                  by &lt;code&gt;path&lt;/code&gt; to &lt;code&gt;newValue&lt;/code&gt;.
                  If &lt;code&gt;newValue&lt;/code&gt; signifies a truly new value
                  the model should post a &lt;code&gt;treeNodesChanged&lt;/code&gt; event.                
                <param>
                    path path to the node that the user has altered                    
                </param>
                <param>
                    newValue the new value from the TreeCellEditor                    
                </param>
            </javadoc>
            <method name="getIndexOfChild" type="int" line="81"/>
            <javadoc line="81">
                Returns the index of child in parent.  If either &lt;code&gt;parent&lt;/code&gt;
                  or &lt;code&gt;child&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, returns -1.
                  If either &lt;code&gt;parent&lt;/code&gt; or &lt;code&gt;child&lt;/code&gt; don&apos;t
                  belong to this tree model, returns -1.                
                <param>
                    parent a node in the tree, obtained from this data source                    
                </param>
                <param>
                    child the node we are interested in                    
                </param>
                <return>
                    the index of the child in the parent, or -1 if either
                      &lt;code&gt;child&lt;/code&gt; or &lt;code&gt;parent&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;
                      or don&apos;t belong to this tree model                    
                </return>
            </javadoc>
            <method name="addTreeModelListener" type="void" line="93"/>
            <javadoc line="93">
                Adds a listener for the &lt;code&gt;TreeModelEvent&lt;/code&gt;
                  posted after the tree changes.                
                <param>
                    l       the listener to add                    
                </param>
                <see>
                    #removeTreeModelListener                    
                </see>
            </javadoc>
            <method name="removeTreeModelListener" type="void" line="100"/>
            <javadoc line="100">
                Removes a listener previously added with
                  &lt;code&gt;addTreeModelListener&lt;/code&gt;.                
                <see>
                    #addTreeModelListener                    
                </see>
                <param>
                    l       the listener to remove                    
                </param>
            </javadoc>
        </interface>
    </source>