<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="java.io"/>
        <import package="java.util"/>
        <class name="DefaultMutableTreeNode" line="4">
            <implements interface="Cloneable"/>
            <implements interface="MutableTreeNode"/>
            <implements interface="Serializable"/>
            <javadoc line="4">
                A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; is a general-purpose node in a tree data
                  structure.
                  For examples of using default mutable tree nodes, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  A tree node may have at most one parent and 0 or more children.
                  &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; provides operations for examining and modifying a
                  node&apos;s parent and children and also operations for examining the tree that
                  the node is a part of.  A node&apos;s tree is the set of all nodes that can be
                  reached by starting at the node and following all the possible links to
                  parents and children.  A node with no parent is the root of its tree; a
                  node with no children is a leaf.  A tree may consist of many subtrees,
                  each node acting as the root for its own subtree.
                  &lt;p&gt;
                  This class provides enumerations for efficiently traversing a tree or
                  subtree in various orders or for following the path between two nodes.
                  A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; may also hold a reference to a user object, the
                  use of which is left to the user.  Asking a &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; for its
                  string representation with &lt;code&gt;toString()&lt;/code&gt; returns the string
                  representation of its user object.
                  &lt;p&gt;
                  &lt;b&gt;This is not a thread safe class.&lt;/b&gt;If you intend to use
                  a DefaultMutableTreeNode (or a tree of TreeNodes) in more than one thread, you
                  need to do your own synchronizing. A good convention to adopt is
                  synchronizing on the root node of a tree.
                  &lt;p&gt;
                  While DefaultMutableTreeNode implements the MutableTreeNode interface and
                  will allow you to add in any implementation of MutableTreeNode not all
                  of the methods in DefaultMutableTreeNode will be applicable to all
                  MutableTreeNodes implementations. Especially with some of the enumerations
                  that are provided, using some of these methods assumes the
                  DefaultMutableTreeNode contains only DefaultMutableNode instances. All
                  of the TreeNode/MutableTreeNode methods will behave as defined no
                  matter what implementations are added.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    MutableTreeNode                    
                </see>
                <author>
                    Rob Davis                    
                </author>
            </javadoc>
            <declaration name="serialVersionUID" type="long" line="54"/>
            <declaration name="EMPTY_ENUMERATION" type="Enumeration&lt;TreeNode&gt;" line="55"/>
            <javadoc line="55">
                An enumeration that is always empty. This is used when an enumeration
                  of a leaf node&apos;s children is requested.                
            </javadoc>
            <declaration name="parent" type="MutableTreeNode" line="60"/>
            <javadoc line="60">
                this node&apos;s parent, or null if this node has no parent                
            </javadoc>
            <declaration name="children" type="Vector" line="64"/>
            <javadoc line="64">
                array of children, may be null if this node has no children                
            </javadoc>
            <declaration name="userObject" type="Object" line="68"/>
            <javadoc line="68">
                optional user object                
            </javadoc>
            <declaration name="allowsChildren" type="boolean" line="72"/>
            <javadoc line="72">
                true if the node is able to have children                
            </javadoc>
            <javadoc line="76">
                Creates a tree node that has no parent and no children, but which
                  allows children.                
            </javadoc>
            <method name="DefaultMutableTreeNode" type="constructor" line="80"/>
            <javadoc line="83">
                Creates a tree node with no parent, no children, but which allows
                  children, and initializes it with the specified user object.                
                <param>
                    userObject an Object provided by the user that constitutes
                      the node's data                    
                </param>
            </javadoc>
            <method name="DefaultMutableTreeNode" type="constructor" line="89">
                <params>
                    <param name="userObject" type="Object"/>
                </params>
            </method>
            <javadoc line="92">
                Creates a tree node with no parent, no children, initialized with
                  the specified user object, and that allows children only if
                  specified.                
                <param>
                    userObject an Object provided by the user that constitutes
                      the node's data                    
                </param>
                <param>
                    allowsChildren if true, the node is allowed to have child
                      nodes -- otherwise, it is always a leaf node                    
                </param>
            </javadoc>
            <method name="DefaultMutableTreeNode" type="constructor" line="101">
                <params>
                    <param name="userObject" type="Object"/>
                    <param name="allowsChildren" type="boolean"/>
                </params>
            </method>
            <javadoc line="107">
                Removes &lt;code&gt;newChild&lt;/code&gt; from its present parent (if it has a
                  parent), sets the child&apos;s parent to this node, and then adds the child
                  to this node&apos;s child array at index &lt;code&gt;childIndex&lt;/code&gt;.
                  &lt;code&gt;newChild&lt;/code&gt; must not be null and must not be an ancestor of
                  this node.                
                <param>
                    newChild        the MutableTreeNode to insert under this node                    
                </param>
                <param>
                    childIndex      the index in this node's child array
                      where this node is to be inserted                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if
                      <code>childIndex</code> is out of bounds                    
                </exception>
                <exception>
                    IllegalArgumentException        if
                      <code>newChild</code> is null or is an
                      ancestor of this node                    
                </exception>
                <exception>
                    IllegalStateException   if this node does not allow
                      children                    
                </exception>
                <see>
                    #isNodeDescendant                    
                </see>
            </javadoc>
            <method name="insert" type="void" line="125">
                <params>
                    <param name="newChild" type="MutableTreeNode"/>
                    <param name="childIndex" type="int"/>
                </params>
                <scope line="126"/>
                <scope line="129"/>
                <scope line="132"/>
                <declaration name="oldParent" type="MutableTreeNode" line="135"/>
                <scope line="136"/>
                <scope line="140"/>
            </method>
            <javadoc line="145">
                Removes the child at the specified index from this node&apos;s children
                  and sets that node&apos;s parent to null. The child node to remove
                  must be a &lt;code&gt;MutableTreeNode&lt;/code&gt;.                
                <param>
                    childIndex      the index in this node's child array
                      of the child to remove                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if
                      <code>childIndex</code> is out of bounds                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="154">
                <params>
                    <param name="childIndex" type="int"/>
                </params>
                <declaration name="child" type="MutableTreeNode" line="155"/>
            </method>
            <javadoc line="159">
                Sets this node&apos;s parent to &lt;code&gt;newParent&lt;/code&gt; but does not
                  change the parent&apos;s child array.  This method is called from
                  &lt;code&gt;insert()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt; to
                  reassign a child&apos;s parent, it should not be messaged from anywhere
                  else.                
                <param>
                    newParent       this node's new parent                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="167">
                <params>
                    <param name="newParent" type="MutableTreeNode"/>
                </params>
            </method>
            <javadoc line="170">
                Returns this node&apos;s parent or null if this node has no parent.                
                <return>
                    this node's parent TreeNode, or null if this node has no parent                    
                </return>
            </javadoc>
            <method name="getParent" type="TreeNode" line="174"/>
            <javadoc line="177">
                Returns the child at the specified index in this node&apos;s child array.                
                <param>
                    index   an index into this node's child array                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if <code>index</code>
                      is out of bounds                    
                </exception>
                <return>
                    the TreeNode in this node's child array at  the specified index                    
                </return>
            </javadoc>
            <method name="getChildAt" type="TreeNode" line="184">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="185"/>
            </method>
            <javadoc line="190">
                Returns the number of children of this node.                
                <return>
                    an int giving the number of children of this node                    
                </return>
            </javadoc>
            <method name="getChildCount" type="int" line="194">
                <scope line="195"/>
                <scope line="198"/>
            </method>
            <javadoc line="202">
                Returns the index of the specified child in this node&apos;s child array.
                  If the specified node is not a child of this node, returns
                  &lt;code&gt;-1&lt;/code&gt;.  This method performs a linear search and is O(n)
                  where n is the number of children.                
                <param>
                    aChild  the TreeNode to search for among this node's children                    
                </param>
                <exception>
                    IllegalArgumentException        if <code>aChild</code>
                      is null                    
                </exception>
                <return>
                    an int giving the index of the node in this node's child
                      array, or <code>-1</code> if the specified node is a not
                      a child of this node                    
                </return>
            </javadoc>
            <method name="getIndex" type="int" line="214">
                <params>
                    <param name="aChild" type="TreeNode"/>
                </params>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="223">
                Creates and returns a forward-order enumeration of this node&apos;s
                  children.  Modifying this node&apos;s child array invalidates any child
                  enumerations created before the modification.                
                <return>
                    an Enumeration of this node's children                    
                </return>
            </javadoc>
            <method name="children" type="Enumeration" line="229">
                <scope line="230"/>
                <scope line="233"/>
            </method>
            <javadoc line="237">
                Determines whether or not this node is allowed to have children.
                  If &lt;code&gt;allows&lt;/code&gt; is false, all of this node&apos;s children are
                  removed.
                  &lt;p&gt;
                  Note: By default, a node allows children.                
                <param>
                    allows  true if this node is allowed to have children                    
                </param>
            </javadoc>
            <method name="setAllowsChildren" type="void" line="245">
                <params>
                    <param name="allows" type="boolean"/>
                </params>
                <scope line="246">
                    <scope line="248"/>
                </scope>
            </method>
            <javadoc line="253">
                Returns true if this node is allowed to have children.                
                <return>
                    true if this node allows children, else false                    
                </return>
            </javadoc>
            <method name="getAllowsChildren" type="boolean" line="257"/>
            <javadoc line="260">
                Sets the user object for this node to &lt;code&gt;userObject&lt;/code&gt;.                
                <param>
                    userObject      the Object that constitutes this node's
                      user-specified data                    
                </param>
                <see>
                    #getUserObject                    
                </see>
                <see>
                    #toString                    
                </see>
            </javadoc>
            <method name="setUserObject" type="void" line="267">
                <params>
                    <param name="userObject" type="Object"/>
                </params>
            </method>
            <javadoc line="270">
                Returns this node&apos;s user object.                
                <return>
                    the Object stored at this node by the user                    
                </return>
                <see>
                    #setUserObject                    
                </see>
                <see>
                    #toString                    
                </see>
            </javadoc>
            <method name="getUserObject" type="Object" line="276"/>
            <javadoc line="279">
                Removes the subtree rooted at this node from the tree, giving this
                  node a null parent.  Does nothing if this node is the root of its
                  tree.                
            </javadoc>
            <method name="removeFromParent" type="void" line="284">
                <declaration name="parent" type="MutableTreeNode" line="285"/>
                <scope line="286"/>
            </method>
            <javadoc line="290">
                Removes &lt;code&gt;aChild&lt;/code&gt; from this node&apos;s child array, giving it a
                  null parent.                
                <param>
                    aChild  a child of this node to remove                    
                </param>
                <exception>
                    IllegalArgumentException        if <code>aChild</code>
                      is null or is not a child of this node                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="297">
                <params>
                    <param name="aChild" type="MutableTreeNode"/>
                </params>
                <scope line="298"/>
                <scope line="301"/>
            </method>
            <javadoc line="306">
                Removes all of this node&apos;s children, setting their parents to null.
                  If this node has no children, this method does nothing.                
            </javadoc>
            <method name="removeAllChildren" type="void" line="310">
                <scope line="311"/>
            </method>
            <javadoc line="315">
                Removes &lt;code&gt;newChild&lt;/code&gt; from its parent and makes it a child of
                  this node by adding it to the end of this node&apos;s child array.                
                <see>
                    #insert                    
                </see>
                <param>
                    newChild        node to add as a child of this node                    
                </param>
                <exception>
                    IllegalArgumentException    if <code>newChild</code>
                      is null                    
                </exception>
                <exception>
                    IllegalStateException   if this node does not allow
                      children                    
                </exception>
            </javadoc>
            <method name="add" type="void" line="325">
                <params>
                    <param name="newChild" type="MutableTreeNode"/>
                </params>
            </method>
            <javadoc line="329">
                Returns true if &lt;code&gt;anotherNode&lt;/code&gt; is an ancestor of this node
                  -- if it is this node, this node&apos;s parent, or an ancestor of this
                  node&apos;s parent.  (Note that a node is considered an ancestor of itself.)
                  If &lt;code&gt;anotherNode&lt;/code&gt; is null, this method returns false.  This
                  operation is at worst O(h) where h is the distance from the root to
                  this node.                
                <see>
                    #isNodeDescendant                    
                </see>
                <see>
                    #getSharedAncestor                    
                </see>
                <param>
                    anotherNode     node to test as an ancestor of this node                    
                </param>
                <return>
                    true if this node is a descendant of <code>anotherNode</code>                    
                </return>
            </javadoc>
            <method name="isNodeAncestor" type="boolean" line="341">
                <params>
                    <param name="anotherNode" type="TreeNode"/>
                </params>
                <scope line="342"/>
                <declaration name="ancestor" type="TreeNode" line="345"/>
                <scope line="346">
                    <scope line="347"/>
                </scope>
            </method>
            <javadoc line="354">
                Returns true if &lt;code&gt;anotherNode&lt;/code&gt; is a descendant of this node
                  -- if it is this node, one of this node&apos;s children, or a descendant of
                  one of this node&apos;s children.  Note that a node is considered a
                  descendant of itself.  If &lt;code&gt;anotherNode&lt;/code&gt; is null, returns
                  false.  This operation is at worst O(h) where h is the distance from the
                  root to &lt;code&gt;anotherNode&lt;/code&gt;.                
                <see>
                    #isNodeAncestor                    
                </see>
                <see>
                    #getSharedAncestor                    
                </see>
                <param>
                    anotherNode     node to test as descendant of this node                    
                </param>
                <return>
                    true if this node is an ancestor of <code>anotherNode</code>                    
                </return>
            </javadoc>
            <method name="isNodeDescendant" type="boolean" line="366">
                <params>
                    <param name="anotherNode" type="DefaultMutableTreeNode"/>
                </params>
            </method>
            <javadoc line="370">
                Returns the nearest common ancestor to this node and &lt;code&gt;aNode&lt;/code&gt;.
                  Returns null, if no such ancestor exists -- if this node and
                  &lt;code&gt;aNode&lt;/code&gt; are in different trees or if &lt;code&gt;aNode&lt;/code&gt; is
                  null.  A node is considered an ancestor of itself.                
                <see>
                    #isNodeAncestor                    
                </see>
                <see>
                    #isNodeDescendant                    
                </see>
                <param>
                    aNode   node to find common ancestor with                    
                </param>
                <return>
                    nearest ancestor common to this node and <code>aNode</code>,
                      or null if none                    
                </return>
            </javadoc>
            <method name="getSharedAncestor" type="TreeNode" line="381">
                <params>
                    <param name="aNode" type="DefaultMutableTreeNode"/>
                </params>
                <scope line="382"/>
                <scope line="385"/>
                <declaration name="level1" type="int" line="388"/>
                <declaration name="node1" type="TreeNode" line="389"/>
                <scope line="392"/>
                <scope line="397"/>
                <scope line="402"/>
                <scope line="406">
                    <scope line="407"/>
                </scope>
                <scope line="414"/>
            </method>
            <javadoc line="419">
                Returns true if and only if &lt;code&gt;aNode&lt;/code&gt; is in the same tree
                  as this node.  Returns false if &lt;code&gt;aNode&lt;/code&gt; is null.                
                <see>
                    #getSharedAncestor                    
                </see>
                <see>
                    #getRoot                    
                </see>
                <return>
                    true if <code>aNode</code> is in the same tree as this node;
                      false if <code>aNode</code> is null                    
                </return>
            </javadoc>
            <method name="isNodeRelated" type="boolean" line="427">
                <params>
                    <param name="aNode" type="DefaultMutableTreeNode"/>
                </params>
            </method>
            <javadoc line="430">
                Returns the depth of the tree rooted at this node -- the longest
                  distance from this node to a leaf.  If this node has no children,
                  returns 0.  This operation is much more expensive than
                  &lt;code&gt;getLevel()&lt;/code&gt; because it must effectively traverse the entire
                  tree rooted at this node.                
                <see>
                    #getLevel                    
                </see>
                <return>
                    the depth of the tree whose root is this node                    
                </return>
            </javadoc>
            <method name="getDepth" type="int" line="439">
                <declaration name="last" type="Object" line="440"/>
                <declaration name="enum_" type="Enumeration" line="441"/>
                <scope line="442"/>
                <scope line="445"/>
            </method>
            <javadoc line="450">
                Returns the number of levels above this node -- the distance from
                  the root to this node.  If this node is the root, returns 0.                
                <see>
                    #getDepth                    
                </see>
                <return>
                    the number of levels above this node                    
                </return>
            </javadoc>
            <method name="getLevel" type="int" line="456">
                <declaration name="ancestor" type="TreeNode" line="457"/>
                <declaration name="levels" type="int" line="458"/>
                <scope line="460"/>
            </method>
            <javadoc line="465">
                Returns the path from the root, to get to this node.  The last
                  element in the path is this node.                
                <return>
                    an array of TreeNode objects giving the path, where the
                      first element in the path is the root and the last
                      element is this node.                    
                </return>
            </javadoc>
            <method name="getPath" type="TreeNode[]" line="472"/>
            <javadoc line="475">
                Builds the parents of node up to and including the root node,
                  where the original node is the last element in the returned array.
                  The length of the returned array gives the node&apos;s depth in the
                  tree.                
                <param>
                    aNode  the TreeNode to get the path for                    
                </param>
                <param>
                    depth  an int giving the number of steps already taken towards
                      the root (on recursive calls), used to size the returned array                    
                </param>
                <return>
                    an array of TreeNodes giving the path from the root to the
                      specified node                    
                </return>
            </javadoc>
            <method name="getPathToRoot" type="TreeNode[]" line="486">
                <params>
                    <param name="aNode" type="TreeNode"/>
                    <param name="depth" type="int"/>
                </params>
                <declaration name="retNodes" type="TreeNode[]" line="487"/>
                <scope line="488"/>
                <scope line="492"/>
            </method>
            <javadoc line="499">
                Returns the user object path, from the root, to get to this node.
                  If some of the TreeNodes in the path have null user objects, the
                  returned path will contain nulls.                
            </javadoc>
            <method name="getUserObjectPath" type="Object[]" line="504">
                <declaration name="realPath" type="TreeNode[]" line="505"/>
                <declaration name="retPath" type="Object[]" line="506"/>
            </method>
            <javadoc line="510">
                Returns the root of the tree that contains this node.  The root is
                  the ancestor with a null parent.                
                <see>
                    #isNodeAncestor                    
                </see>
                <return>
                    the root of the tree that contains this node                    
                </return>
            </javadoc>
            <method name="getRoot" type="TreeNode" line="516">
                <declaration name="ancestor" type="TreeNode" line="517"/>
                <declaration name="previous" type="TreeNode" line="518"/>
                <scope line="519"/>
            </method>
            <javadoc line="526">
                Returns true if this node is the root of the tree.  The root is
                  the only node in the tree with a null parent; every tree has exactly
                  one root.                
                <return>
                    true if this node is the root of its tree                    
                </return>
            </javadoc>
            <method name="isRoot" type="boolean" line="532"/>
            <javadoc line="535">
                Returns the node that follows this node in a preorder traversal of this
                  node&apos;s tree.  Returns null if this node is the last node of the
                  traversal.  This is an inefficient way to traverse the entire tree; use
                  an enumeration, instead.                
                <see>
                    #preorderEnumeration                    
                </see>
                <return>
                    the node that follows this node in a preorder traversal, or
                      null if this node is last                    
                </return>
            </javadoc>
            <method name="getNextNode" type="DefaultMutableTreeNode" line="544">
                <scope line="545">
                    <declaration name="nextSibling" type="DefaultMutableTreeNode" line="546"/>
                    <scope line="547">
                        <declaration name="aNode" type="DefaultMutableTreeNode" line="548"/>
                        <scope line="549">
                            <scope line="550"/>
                            <scope line="554"/>
                        </scope>
                    </scope>
                    <scope line="561"/>
                </scope>
                <scope line="565"/>
            </method>
            <javadoc line="569">
                Returns the node that precedes this node in a preorder traversal of
                  this node&apos;s tree.  Returns &lt;code&gt;null&lt;/code&gt; if this node is the
                  first node of the traversal -- the root of the tree.
                  This is an inefficient way to
                  traverse the entire tree; use an enumeration, instead.                
                <see>
                    #preorderEnumeration                    
                </see>
                <return>
                    the node that precedes this node in a preorder traversal, or
                      null if this node is the first                    
                </return>
            </javadoc>
            <method name="getPreviousNode" type="DefaultMutableTreeNode" line="579">
                <declaration name="previousSibling" type="DefaultMutableTreeNode" line="580"/>
                <declaration name="myParent" type="DefaultMutableTreeNode" line="581"/>
                <scope line="582"/>
                <scope line="586"/>
                <scope line="590"/>
            </method>
            <javadoc line="594">
                Creates and returns an enumeration that traverses the subtree rooted at
                  this node in preorder.  The first node returned by the enumeration&apos;s
                  &lt;code&gt;nextElement()&lt;/code&gt; method is this node.&lt;P&gt;
                  Modifying the tree by inserting, removing, or moving a node invalidates
                  any enumerations created before the modification.                
                <see>
                    #postorderEnumeration                    
                </see>
                <return>
                    an enumeration for traversing the tree in preorder                    
                </return>
            </javadoc>
            <method name="preorderEnumeration" type="Enumeration" line="603"/>
            <javadoc line="606">
                Creates and returns an enumeration that traverses the subtree rooted at
                  this node in postorder.  The first node returned by the enumeration&apos;s
                  &lt;code&gt;nextElement()&lt;/code&gt; method is the leftmost leaf.  This is the
                  same as a depth-first traversal.&lt;P&gt;
                  Modifying the tree by inserting, removing, or moving a node invalidates
                  any enumerations created before the modification.                
                <see>
                    #depthFirstEnumeration                    
                </see>
                <see>
                    #preorderEnumeration                    
                </see>
                <return>
                    an enumeration for traversing the tree in postorder                    
                </return>
            </javadoc>
            <method name="postorderEnumeration" type="Enumeration" line="617"/>
            <javadoc line="620">
                Creates and returns an enumeration that traverses the subtree rooted at
                  this node in breadth-first order.  The first node returned by the
                  enumeration&apos;s &lt;code&gt;nextElement()&lt;/code&gt; method is this node.&lt;P&gt;
                  Modifying the tree by inserting, removing, or moving a node invalidates
                  any enumerations created before the modification.                
                <see>
                    #depthFirstEnumeration                    
                </see>
                <return>
                    an enumeration for traversing the tree in breadth-first order                    
                </return>
            </javadoc>
            <method name="breadthFirstEnumeration" type="Enumeration" line="629"/>
            <javadoc line="632">
                Creates and returns an enumeration that traverses the subtree rooted at
                  this node in depth-first order.  The first node returned by the
                  enumeration&apos;s &lt;code&gt;nextElement()&lt;/code&gt; method is the leftmost leaf.
                  This is the same as a postorder traversal.&lt;P&gt;
                  Modifying the tree by inserting, removing, or moving a node invalidates
                  any enumerations created before the modification.                
                <see>
                    #breadthFirstEnumeration                    
                </see>
                <see>
                    #postorderEnumeration                    
                </see>
                <return>
                    an enumeration for traversing the tree in depth-first order                    
                </return>
            </javadoc>
            <method name="depthFirstEnumeration" type="Enumeration" line="643"/>
            <javadoc line="646">
                Creates and returns an enumeration that follows the path from
                  &lt;code&gt;ancestor&lt;/code&gt; to this node.  The enumeration&apos;s
                  &lt;code&gt;nextElement()&lt;/code&gt; method first returns &lt;code&gt;ancestor&lt;/code&gt;,
                  then the child of &lt;code&gt;ancestor&lt;/code&gt; that is an ancestor of this
                  node, and so on, and finally returns this node.  Creation of the
                  enumeration is O(m) where m is the number of nodes between this node
                  and &lt;code&gt;ancestor&lt;/code&gt;, inclusive.  Each &lt;code&gt;nextElement()&lt;/code&gt;
                  message is O(1).&lt;P&gt;
                  Modifying the tree by inserting, removing, or moving a node invalidates
                  any enumerations created before the modification.                
                <see>
                    #isNodeAncestor                    
                </see>
                <see>
                    #isNodeDescendant                    
                </see>
                <exception>
                    IllegalArgumentException if <code>ancestor</code> is
                      not an ancestor of this node                    
                </exception>
                <return>
                    an enumeration for following the path from an ancestor of
                      this node to this one                    
                </return>
            </javadoc>
            <method name="pathFromAncestorEnumeration" type="Enumeration" line="664">
                <params>
                    <param name="ancestor" type="TreeNode"/>
                </params>
            </method>
            <javadoc line="667">
                Returns true if &lt;code&gt;aNode&lt;/code&gt; is a child of this node.  If
                  &lt;code&gt;aNode&lt;/code&gt; is null, this method returns false.                
                <return>
                    true if <code>aNode</code> is a child of this node; false if
                      <code>aNode</code> is null                    
                </return>
            </javadoc>
            <method name="isNodeChild" type="boolean" line="673">
                <params>
                    <param name="aNode" type="TreeNode"/>
                </params>
                <declaration name="retval" type="boolean" line="674"/>
                <scope line="675"/>
                <scope line="678">
                    <scope line="679"/>
                    <scope line="682"/>
                </scope>
            </method>
            <javadoc line="688">
                Returns this node&apos;s first child.  If this node has no children,
                  throws NoSuchElementException.                
                <return>
                    the first child of this node                    
                </return>
                <exception>
                    NoSuchElementException  if this node has no children                    
                </exception>
            </javadoc>
            <method name="getFirstChild" type="TreeNode" line="694">
                <scope line="695"/>
            </method>
            <javadoc line="700">
                Returns this node&apos;s last child.  If this node has no children,
                  throws NoSuchElementException.                
                <return>
                    the last child of this node                    
                </return>
                <exception>
                    NoSuchElementException  if this node has no children                    
                </exception>
            </javadoc>
            <method name="getLastChild" type="TreeNode" line="706">
                <scope line="707"/>
            </method>
            <javadoc line="712">
                Returns the child in this node&apos;s child array that immediately
                  follows &lt;code&gt;aChild&lt;/code&gt;, which must be a child of this node.  If
                  &lt;code&gt;aChild&lt;/code&gt; is the last child, returns null.  This method
                  performs a linear search of this node&apos;s children for
                  &lt;code&gt;aChild&lt;/code&gt; and is O(n) where n is the number of children; to
                  traverse the entire array of children, use an enumeration instead.                
                <see>
                    #children                    
                </see>
                <exception>
                    IllegalArgumentException if <code>aChild</code> is
                      null or is not a child of this node                    
                </exception>
                <return>
                    the child of this node that immediately follows
                      <code>aChild</code>                    
                </return>
            </javadoc>
            <method name="getChildAfter" type="TreeNode" line="725">
                <params>
                    <param name="aChild" type="TreeNode"/>
                </params>
                <scope line="726"/>
                <declaration name="index" type="int" line="729"/>
                <scope line="730"/>
                <scope line="733"/>
                <scope line="736"/>
            </method>
            <javadoc line="740">
                Returns the child in this node&apos;s child array that immediately
                  precedes &lt;code&gt;aChild&lt;/code&gt;, which must be a child of this node.  If
                  &lt;code&gt;aChild&lt;/code&gt; is the first child, returns null.  This method
                  performs a linear search of this node&apos;s children for &lt;code&gt;aChild&lt;/code&gt;
                  and is O(n) where n is the number of children.                
                <exception>
                    IllegalArgumentException if <code>aChild</code> is null
                      or is not a child of this node                    
                </exception>
                <return>
                    the child of this node that immediately precedes
                      <code>aChild</code>                    
                </return>
            </javadoc>
            <method name="getChildBefore" type="TreeNode" line="751">
                <params>
                    <param name="aChild" type="TreeNode"/>
                </params>
                <scope line="752"/>
                <declaration name="index" type="int" line="755"/>
                <scope line="756"/>
                <scope line="759"/>
                <scope line="762"/>
            </method>
            <javadoc line="766">
                Returns true if &lt;code&gt;anotherNode&lt;/code&gt; is a sibling of (has the
                  same parent as) this node.  A node is its own sibling.  If
                  &lt;code&gt;anotherNode&lt;/code&gt; is null, returns false.                
                <param>
                    anotherNode     node to test as sibling of this node                    
                </param>
                <return>
                    true if <code>anotherNode</code> is a sibling of this node                    
                </return>
            </javadoc>
            <method name="isNodeSibling" type="boolean" line="773">
                <params>
                    <param name="anotherNode" type="TreeNode"/>
                </params>
                <declaration name="retval" type="boolean" line="774"/>
                <scope line="775"/>
                <scope line="778"/>
                <scope line="781">
                    <declaration name="myParent" type="TreeNode" line="782"/>
                    <scope line="784"/>
                </scope>
            </method>
            <javadoc line="790">
                Returns the number of siblings of this node.  A node is its own sibling
                  (if it has no parent or no siblings, this method returns
                  &lt;code&gt;1&lt;/code&gt;).                
                <return>
                    the number of siblings of this node                    
                </return>
            </javadoc>
            <method name="getSiblingCount" type="int" line="796">
                <declaration name="myParent" type="TreeNode" line="797"/>
                <scope line="798"/>
                <scope line="801"/>
            </method>
            <javadoc line="805">
                Returns the next sibling of this node in the parent&apos;s children array.
                  Returns null if this node has no parent or is the parent&apos;s last child.
                  This method performs a linear search that is O(n) where n is the number
                  of children; to traverse the entire array, use the parent&apos;s child
                  enumeration instead.                
                <see>
                    #children                    
                </see>
                <return>
                    the sibling of this node that immediately follows this node                    
                </return>
            </javadoc>
            <method name="getNextSibling" type="DefaultMutableTreeNode" line="814">
                <declaration name="retval" type="DefaultMutableTreeNode" line="815"/>
                <declaration name="myParent" type="DefaultMutableTreeNode" line="816"/>
                <scope line="817"/>
                <scope line="820"/>
                <scope line="823"/>
            </method>
            <javadoc line="828">
                Returns the previous sibling of this node in the parent&apos;s children
                  array.  Returns null if this node has no parent or is the parent&apos;s
                  first child.  This method performs a linear search that is O(n) where n
                  is the number of children.                
                <return>
                    the sibling of this node that immediately precedes this node                    
                </return>
            </javadoc>
            <method name="getPreviousSibling" type="DefaultMutableTreeNode" line="835">
                <declaration name="retval" type="DefaultMutableTreeNode" line="836"/>
                <declaration name="myParent" type="DefaultMutableTreeNode" line="837"/>
                <scope line="838"/>
                <scope line="841"/>
                <scope line="844"/>
            </method>
            <javadoc line="849">
                Returns true if this node has no children.  To distinguish between
                  nodes that have no children and nodes that &lt;i&gt;cannot&lt;/i&gt; have
                  children (e.g. to distinguish files from empty directories), use this
                  method in conjunction with &lt;code&gt;getAllowsChildren&lt;/code&gt;                
                <see>
                    #getAllowsChildren                    
                </see>
                <return>
                    true if this node has no children                    
                </return>
            </javadoc>
            <method name="isLeaf" type="boolean" line="857"/>
            <javadoc line="860">
                Finds and returns the first leaf that is a descendant of this node --
                  either this node or its first child&apos;s first leaf.
                  Returns this node if it is a leaf.                
                <see>
                    #isLeaf                    
                </see>
                <see>
                    #isNodeDescendant                    
                </see>
                <return>
                    the first leaf in the subtree rooted at this node                    
                </return>
            </javadoc>
            <method name="getFirstLeaf" type="DefaultMutableTreeNode" line="868">
                <declaration name="node" type="DefaultMutableTreeNode" line="869"/>
                <scope line="870"/>
            </method>
            <javadoc line="875">
                Finds and returns the last leaf that is a descendant of this node --
                  either this node or its last child&apos;s last leaf.
                  Returns this node if it is a leaf.                
                <see>
                    #isLeaf                    
                </see>
                <see>
                    #isNodeDescendant                    
                </see>
                <return>
                    the last leaf in the subtree rooted at this node                    
                </return>
            </javadoc>
            <method name="getLastLeaf" type="DefaultMutableTreeNode" line="883">
                <declaration name="node" type="DefaultMutableTreeNode" line="884"/>
                <scope line="885"/>
            </method>
            <javadoc line="890">
                Returns the leaf after this node or null if this node is the
                  last leaf in the tree.
                  &lt;p&gt;
                  In this implementation of the &lt;code&gt;MutableNode&lt;/code&gt; interface,
                  this operation is very inefficient. In order to determine the
                  next node, this method first performs a linear search in the
                  parent&apos;s child-list in order to find the current node.
                  &lt;p&gt;
                  That implementation makes the operation suitable for short
                  traversals from a known position. But to traverse all of the
                  leaves in the tree, you should use &lt;code&gt;depthFirstEnumeration&lt;/code&gt;
                  to enumerate the nodes in the tree and use &lt;code&gt;isLeaf&lt;/code&gt;
                  on each node to determine which are leaves.                
                <see>
                    #depthFirstEnumeration                    
                </see>
                <see>
                    #isLeaf                    
                </see>
                <return>
                    returns the next leaf past this node                    
                </return>
            </javadoc>
            <method name="getNextLeaf" type="DefaultMutableTreeNode" line="908">
                <declaration name="nextSibling" type="DefaultMutableTreeNode" line="909"/>
                <declaration name="myParent" type="DefaultMutableTreeNode" line="910"/>
            </method>
            <javadoc line="916">
                Returns the leaf before this node or null if this node is the
                  first leaf in the tree.
                  &lt;p&gt;
                  In this implementation of the &lt;code&gt;MutableNode&lt;/code&gt; interface,
                  this operation is very inefficient. In order to determine the
                  previous node, this method first performs a linear search in the
                  parent&apos;s child-list in order to find the current node.
                  &lt;p&gt;
                  That implementation makes the operation suitable for short
                  traversals from a known position. But to traverse all of the
                  leaves in the tree, you should use &lt;code&gt;depthFirstEnumeration&lt;/code&gt;
                  to enumerate the nodes in the tree and use &lt;code&gt;isLeaf&lt;/code&gt;
                  on each node to determine which are leaves.                
                <see>
                    #depthFirstEnumeration                    
                </see>
                <see>
                    #isLeaf                    
                </see>
                <return>
                    returns the leaf before this node                    
                </return>
            </javadoc>
            <method name="getPreviousLeaf" type="DefaultMutableTreeNode" line="934">
                <declaration name="previousSibling" type="DefaultMutableTreeNode" line="935"/>
                <declaration name="myParent" type="DefaultMutableTreeNode" line="936"/>
            </method>
            <javadoc line="942">
                Returns the total number of leaves that are descendants of this node.
                  If this node is a leaf, returns &lt;code&gt;1&lt;/code&gt;.  This method is O(n)
                  where n is the number of descendants of this node.                
                <see>
                    #isNodeAncestor                    
                </see>
                <return>
                    the number of leaves beneath this node                    
                </return>
            </javadoc>
            <method name="getLeafCount" type="int" line="949">
                <declaration name="count" type="int" line="950"/>
                <declaration name="node" type="TreeNode" line="951"/>
                <declaration name="enum_" type="Enumeration" line="952"/>
                <scope line="953">
                    <scope line="955"/>
                </scope>
                <scope line="959"/>
            </method>
            <javadoc line="964">
                Returns the result of sending &lt;code&gt;toString()&lt;/code&gt; to this node&apos;s
                  user object, or the empty string if the node has no user object.                
                <see>
                    #getUserObject                    
                </see>
            </javadoc>
            <method name="toString" type="String" line="969">
                <scope line="970"/>
                <scope line="973"/>
            </method>
            <javadoc line="977">
                Overridden to make clone public.  Returns a shallow copy of this node;
                  the new node has no parent or children and has a reference to the same
                  user object, if any.                
                <return>
                    a copy of this node                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="983">
                <declaration name="newNode" type="DefaultMutableTreeNode" line="984"/>
                <scope line="985"/>
                <scope line="990"/>
            </method>
            <method name="writeObject" type="void" line="995">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="tValues" type="Object[]" line="996"/>
                <scope line="998"/>
            </method>
            <method name="readObject" type="void" line="1006">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="tValues" type="Object[]" line="1007"/>
            </method>
            <class name="PreorderEnumeration" line="1012">
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="TreeNode"/>
                    </type_params>
                </implements>
                <declaration name="stack" type="Stack&lt;Enumeration&gt;" line="1013"/>
                <method name="PreorderEnumeration" type="constructor" line="1014">
                    <params>
                        <param name="rootNode" type="TreeNode"/>
                    </params>
                    <declaration name="v" type="Vector&lt;TreeNode&gt;" line="1016"/>
                </method>
                <method name="hasMoreElements" type="boolean" line="1020"/>
                <method name="nextElement" type="TreeNode" line="1023">
                    <declaration name="enumer" type="Enumeration" line="1024"/>
                    <declaration name="node" type="TreeNode" line="1025"/>
                    <declaration name="children" type="Enumeration" line="1026"/>
                    <scope line="1027"/>
                    <scope line="1030"/>
                </method>
            </class>
            <class name="PostorderEnumeration" line="1036">
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="TreeNode"/>
                    </type_params>
                </implements>
                <declaration name="root" type="TreeNode" line="1037"/>
                <declaration name="children" type="Enumeration&lt;TreeNode&gt;" line="1038"/>
                <declaration name="subtree" type="Enumeration&lt;TreeNode&gt;" line="1039"/>
                <method name="PostorderEnumeration" type="constructor" line="1040">
                    <params>
                        <param name="rootNode" type="TreeNode"/>
                    </params>
                </method>
                <method name="hasMoreElements" type="boolean" line="1046"/>
                <method name="nextElement" type="TreeNode" line="1049">
                    <declaration name="retval" type="TreeNode" line="1050"/>
                    <scope line="1051"/>
                    <scope line="1054"/>
                    <scope line="1058"/>
                </method>
            </class>
            <class name="BreadthFirstEnumeration" line="1065">
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="TreeNode"/>
                    </type_params>
                </implements>
                <declaration name="queue" type="Queue" line="1066"/>
                <method name="BreadthFirstEnumeration" type="constructor" line="1067">
                    <params>
                        <param name="rootNode" type="TreeNode"/>
                    </params>
                    <declaration name="v" type="Vector&lt;TreeNode&gt;" line="1069"/>
                </method>
                <method name="hasMoreElements" type="boolean" line="1074"/>
                <method name="nextElement" type="TreeNode" line="1077">
                    <declaration name="enumer" type="Enumeration" line="1078"/>
                    <declaration name="node" type="TreeNode" line="1079"/>
                    <declaration name="children" type="Enumeration" line="1080"/>
                    <scope line="1081"/>
                    <scope line="1084"/>
                </method>
                <class name="Queue" line="1089">
                    <declaration name="head" type="QNode" line="1090"/>
                    <declaration name="tail" type="QNode" line="1091"/>
                    <class name="QNode" line="1092">
                        <declaration name="object" type="Object" line="1093"/>
                        <declaration name="next" type="QNode" line="1094"/>
                        <method name="QNode" type="constructor" line="1095">
                            <params>
                                <param name="object" type="Object"/>
                                <param name="next" type="QNode"/>
                            </params>
                        </method>
                    </class>
                    <method name="enqueue" type="void" line="1100">
                        <params>
                            <param name="anObject" type="Object"/>
                        </params>
                        <scope line="1101"/>
                        <scope line="1104"/>
                    </method>
                    <method name="dequeue" type="Object" line="1109">
                        <scope line="1110"/>
                        <declaration name="retval" type="Object" line="1113"/>
                        <declaration name="oldHead" type="QNode" line="1114"/>
                        <scope line="1116"/>
                        <scope line="1119"/>
                    </method>
                    <method name="firstObject" type="Object" line="1124">
                        <scope line="1125"/>
                    </method>
                    <method name="isEmpty" type="boolean" line="1130"/>
                </class>
            </class>
            <class name="PathBetweenNodesEnumeration" line="1135">
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="TreeNode"/>
                    </type_params>
                </implements>
                <declaration name="stack" type="Stack&lt;TreeNode&gt;" line="1136"/>
                <method name="PathBetweenNodesEnumeration" type="constructor" line="1137">
                    <params>
                        <param name="ancestor" type="TreeNode"/>
                        <param name="descendant" type="TreeNode"/>
                    </params>
                    <scope line="1139"/>
                    <declaration name="current" type="TreeNode" line="1142"/>
                    <scope line="1146">
                        <scope line="1148"/>
                    </scope>
                </method>
                <method name="hasMoreElements" type="boolean" line="1154"/>
                <method name="nextElement" type="TreeNode" line="1157">
                    <scope line="1158"/>
                    <scope line="1161"/>
                </method>
            </class>
        </class>
    </source>