<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="javax.swing.event.TreeModelEvent"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.util.Stack"/>
        <import package="java.util.Vector"/>
        <class name="VariableHeightLayoutCache" line="37">
            <extends class="AbstractLayoutCache"/>
            <comment line="391">
                                
            </comment>
            <comment line="392">
                TreeModelListener methods                
            </comment>
            <comment line="393">
                                
            </comment>
            <comment line="682">
                                
            </comment>
            <comment line="683">
                Local methods                
            </comment>
            <comment line="684">
                                
            </comment>
            <comment line="1647">
                End of VariableHeightLayoutCache.TreeStateNode                
            </comment>
            <comment line="1767">
                VariableHeightLayoutCache.VisibleTreeStateNodeEnumeration                
            </comment>
            <javadoc line="37">
                NOTE: This will become more open in a future release.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="visibleNodes" type="Vector&lt;Object&gt;" line="55"/>
            <javadoc line="55">
                The array of nodes that are currently visible, in the order they
                  are displayed.                
            </javadoc>
            <declaration name="updateNodeSizes" type="boolean" line="61"/>
            <javadoc line="61">
                This is set to true if one of the entries has an invalid size.                
            </javadoc>
            <declaration name="root" type="TreeStateNode" line="66"/>
            <javadoc line="66">
                The root node of the internal cache of nodes that have been shown.
                  If the treeModel is vending a network rather than a true tree,
                  there may be one cached node for each path to a modeled node.                
            </javadoc>
            <declaration name="boundsBuffer" type="Rectangle" line="73"/>
            <javadoc line="73">
                Used in getting sizes for nodes to avoid creating a new Rectangle
                  every time a size is needed.                
            </javadoc>
            <declaration name="treePathMapping" type="Hashtable&lt;TreePath,TreeStateNode&gt;" line="79"/>
            <javadoc line="79">
                Maps from &lt;code&gt;TreePath&lt;/code&gt; to a &lt;code&gt;TreeStateNode&lt;/code&gt;.                
            </javadoc>
            <declaration name="tempStacks" type="Stack&lt;Stack&lt;TreePath&gt;&gt;" line="84"/>
            <javadoc line="84">
                A stack of stacks.                
            </javadoc>
            <method name="VariableHeightLayoutCache" type="constructor" line="90"/>
            <javadoc line="98">
                Sets the &lt;code&gt;TreeModel&lt;/code&gt; that will provide the data.                
                <param>
                    newModel the <code>TreeModel</code> that is to provide the data                    
                </param>
                <beaninfo>
                    bound: true
                      description: The TreeModel that will provide the data.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="106">
                <params>
                    <param name="newModel" type="TreeModel"/>
                </params>
            </method>
            <javadoc line="111">
                Determines whether or not the root node from
                  the &lt;code&gt;TreeModel&lt;/code&gt; is visible.                
                <param>
                    rootVisible true if the root node of the tree is to be displayed                    
                </param>
                <see>
                    #rootVisible                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether or not the root node
                      from the TreeModel is visible.                    
                </beaninfo>
            </javadoc>
            <method name="setRootVisible" type="void" line="122">
                <params>
                    <param name="rootVisible" type="boolean"/>
                </params>
                <scope line="123">
                    <scope line="124"/>
                    <scope line="128"/>
                </scope>
            </method>
            <javadoc line="144">
                Sets the height of each cell.  If the specified value
                  is less than or equal to zero the current cell renderer is
                  queried for each row&apos;s height.                
                <param>
                    rowHeight the height of each cell, in pixels                    
                </param>
                <beaninfo>
                    bound: true
                      description: The height of each cell.                    
                </beaninfo>
            </javadoc>
            <method name="setRowHeight" type="void" line="154">
                <params>
                    <param name="rowHeight" type="int"/>
                </params>
                <scope line="155"/>
            </method>
            <javadoc line="162">
                Sets the renderer that is responsible for drawing nodes in the tree.                
                <param>
                    nd the renderer                    
                </param>
            </javadoc>
            <method name="setNodeDimensions" type="void" line="166">
                <params>
                    <param name="nd" type="NodeDimensions"/>
                </params>
            </method>
            <javadoc line="172">
                Marks the path &lt;code&gt;path&lt;/code&gt; expanded state to
                  &lt;code&gt;isExpanded&lt;/code&gt;.                
                <param>
                    path the <code>TreePath</code> of interest                    
                </param>
                <param>
                    isExpanded true if the path should be expanded, otherwise false                    
                </param>
            </javadoc>
            <method name="setExpandedState" type="void" line="178">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="isExpanded" type="boolean"/>
                </params>
                <scope line="179">
                    <scope line="182">
                        <declaration name="node" type="TreeStateNode" line="183"/>
                        <scope line="185"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="193">
                Returns true if the path is expanded, and visible.                
                <return>
                    true if the path is expanded and visible, otherwise false                    
                </return>
            </javadoc>
            <method name="getExpandedState" type="boolean" line="197">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="TreeStateNode" line="198"/>
            </method>
            <javadoc line="204">
                Returns the &lt;code&gt;Rectangle&lt;/code&gt; enclosing the label portion
                  into which the item identified by &lt;code&gt;path&lt;/code&gt; will be drawn.                
                <param>
                    path  the path to be drawn                    
                </param>
                <param>
                    placeIn the bounds of the enclosing rectangle                    
                </param>
                <return>
                    the bounds of the enclosing rectangle or <code>null</code>
                      if the node could not be ascertained                    
                </return>
            </javadoc>
            <method name="getBounds" type="Rectangle" line="213">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="placeIn" type="Rectangle"/>
                </params>
                <declaration name="node" type="TreeStateNode" line="214"/>
                <scope line="216"/>
            </method>
            <javadoc line="224">
                Returns the path for &lt;code&gt;row&lt;/code&gt;.  If &lt;code&gt;row&lt;/code&gt;
                  is not visible, &lt;code&gt;null&lt;/code&gt; is returned.                
                <param>
                    row the location of interest                    
                </param>
                <return>
                    the path for <code>row</code>, or <code>null</code>
                      if <code>row</code> is not visible                    
                </return>
            </javadoc>
            <method name="getPathForRow" type="TreePath" line="232">
                <params>
                    <param name="row" type="int"/>
                </params>
                <scope line="233"/>
            </method>
            <javadoc line="239">
                Returns the row where the last item identified in path is visible.
                  Will return -1 if any of the elements in path are not
                  currently visible.                
                <param>
                    path the <code>TreePath</code> of interest                    
                </param>
                <return>
                    the row where the last item in path is visible                    
                </return>
            </javadoc>
            <method name="getRowForPath" type="int" line="247">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="visNode" type="TreeStateNode" line="251"/>
            </method>
            <javadoc line="258">
                Returns the number of visible rows.                
                <return>
                    the number of visible rows                    
                </return>
            </javadoc>
            <method name="getRowCount" type="int" line="262"/>
            <javadoc line="266">
                Instructs the &lt;code&gt;LayoutCache&lt;/code&gt; that the bounds for
                  &lt;code&gt;path&lt;/code&gt; are invalid, and need to be updated.                
                <param>
                    path the <code>TreePath</code> which is now invalid                    
                </param>
            </javadoc>
            <method name="invalidatePathBounds" type="void" line="272">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="TreeStateNode" line="273"/>
                <scope line="275"/>
            </method>
            <javadoc line="282">
                Returns the preferred height.                
                <return>
                    the preferred height                    
                </return>
            </javadoc>
            <method name="getPreferredHeight" type="int" line="286">
                <comment line="287">
                    Get the height                    
                </comment>
                <declaration name="rowCount" type="int" line="288"/>
                <scope line="290">
                    <declaration name="node" type="TreeStateNode" line="291"/>
                </scope>
            </method>
            <javadoc line="298">
                Returns the preferred width and height for the region in
                  &lt;code&gt;visibleRegion&lt;/code&gt;.                
                <param>
                    bounds  the region being queried                    
                </param>
            </javadoc>
            <method name="getPreferredWidth" type="int" line="304">
                <params>
                    <param name="bounds" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="311">
                Returns the path to the node that is closest to x,y.  If
                  there is nothing currently visible this will return &lt;code&gt;null&lt;/code&gt;,
                  otherwise it will always return a valid path.
                  If you need to test if the
                  returned object is exactly at x, y you should get the bounds for
                  the returned path and test x, y against that.                
                <param>
                    x  the x-coordinate                    
                </param>
                <param>
                    y  the y-coordinate                    
                </param>
                <return>
                    the path to the node that is closest to x, y                    
                </return>
            </javadoc>
            <method name="getPathClosestTo" type="TreePath" line="323">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="row" type="int" line="330"/>
            </method>
            <javadoc line="335">
                Returns an &lt;code&gt;Enumerator&lt;/code&gt; that increments over the visible paths
                  starting at the passed in location. The ordering of the enumeration
                  is based on how the paths are displayed.                
                <param>
                    path the location in the <code>TreePath</code> to start                    
                </param>
                <return>
                    an <code>Enumerator</code> that increments over the visible
                      paths                    
                </return>
            </javadoc>
            <method name="getVisiblePathsFrom" type="Enumeration<TreePath>" line="344">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="TreeStateNode" line="345"/>
                <scope line="347"/>
            </method>
            <javadoc line="353">
                Returns the number of visible children for &lt;code&gt;path&lt;/code&gt;.                
                <return>
                    the number of visible children for <code>path</code>                    
                </return>
            </javadoc>
            <method name="getVisibleChildCount" type="int" line="357">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="node" type="TreeStateNode" line="358"/>
            </method>
            <javadoc line="363">
                Informs the &lt;code&gt;TreeState&lt;/code&gt; that it needs to recalculate
                  all the sizes it is referencing.                
            </javadoc>
            <method name="invalidateSizes" type="void" line="367">
                <scope line="370"/>
            </method>
            <javadoc line="375">
                Returns true if the value identified by &lt;code&gt;path&lt;/code&gt; is
                  currently expanded.                
                <return>
                    true if the value identified by <code>path</code> is
                      currently expanded                    
                </return>
            </javadoc>
            <method name="isExpanded" type="boolean" line="381">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="382">
                    <declaration name="lastNode" type="TreeStateNode" line="383"/>
                </scope>
            </method>
            <javadoc line="394">
                Invoked after a node (or a set of siblings) has changed in some
                  way. The node(s) have not changed locations in the tree or
                  altered their children arrays, but other attributes have
                  changed and may affect presentation. Example: the name of a
                  file has changed, but it is in the same location in the file
                  system.
                  &lt;p&gt;&lt;code&gt;e.path&lt;/code&gt; returns the path the parent of the
                  changed node(s).
                  &lt;p&gt;&lt;code&gt;e.childIndices&lt;/code&gt; returns the index(es) of the
                  changed node(s).                
                <param>
                    e the <code>TreeModelEvent</code> of interest                    
                </param>
            </javadoc>
            <method name="treeNodesChanged" type="void" line="410">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="420">
                    Update the size of the changed node, as well as all the                    
                </comment>
                <comment line="431">
                                        
                </comment>
                <comment line="439">
                    Null indicies for root indicates it changed.                    
                </comment>
                <scope line="411">
                    <declaration name="changedIndexs" type="int" line="412"/>
                    <declaration name="changedNode" type="TreeStateNode" line="413"/>
                    <scope line="417">
                        <declaration name="changedValue" type="Object" line="418"/>
                        <scope line="423">
                            <declaration name="counter" type="int" line="424"/>
                            <declaration name="changedChildNode" type="TreeStateNode" line="425"/>
                            <scope line="428"/>
                        </scope>
                        <scope line="438"/>
                        <scope line="442">
                            <declaration name="aRow" type="int" line="443"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="454">
                Invoked after nodes have been inserted into the tree.
                  &lt;p&gt;&lt;code&gt;e.path&lt;/code&gt; returns the parent of the new nodes.
                  &lt;p&gt;&lt;code&gt;e.childIndices&lt;/code&gt; returns the indices of the new nodes in
                  ascending order.                
                <param>
                    e the <code>TreeModelEvent</code> of interest                    
                </param>
            </javadoc>
            <method name="treeNodesInserted" type="void" line="463">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="470">
                    Only need to update the children if the node has been                    
                </comment>
                <comment line="472">
                    PENDING(scott): make sure childIndexs is sorted!                    
                </comment>
                <comment line="494">
                    Update the size of the parent.                    
                </comment>
                <comment line="499">
                    Update the y origins from the index of the parent                    
                </comment>
                <scope line="464">
                    <declaration name="changedIndexs" type="int" line="465"/>
                    <declaration name="changedParentNode" type="TreeStateNode" line="466"/>
                    <scope line="474">
                        <scope line="475">
                            <declaration name="makeVisible" type="boolean" line="476"/>
                            <declaration name="counter" type="int" line="477"/>
                            <declaration name="changedParent" type="Object" line="478"/>
                            <declaration name="newNode" type="TreeStateNode" line="479"/>
                            <declaration name="oldChildCount" type="int" line="480"/>
                            <scope line="489"/>
                            <scope line="493"/>
                            <scope line="503"/>
                        </scope>
                        <scope line="515"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="524">
                Invoked after nodes have been removed from the tree.  Note that
                  if a subtree is removed from the tree, this method may only be
                  invoked once for the root of the removed subtree, not once for
                  each individual set of siblings removed.
                  &lt;p&gt;&lt;code&gt;e.path&lt;/code&gt; returns the former parent of the deleted nodes.
                  &lt;p&gt;&lt;code&gt;e.childIndices&lt;/code&gt; returns the indices the nodes had
                  before they were deleted in ascending order.                
                <param>
                    e the <code>TreeModelEvent</code> of interest                    
                </param>
            </javadoc>
            <method name="treeNodesRemoved" type="void" line="537">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="544">
                    PENDING(scott): make sure that changedIndexs are sorted in                    
                </comment>
                <comment line="545">
                    ascending order.                    
                </comment>
                <comment line="566">
                                        
                </comment>
                <comment line="576">
                    Update the size of the parent.                    
                </comment>
                <comment line="580">
                    Node has become a leaf, collapse it.                    
                </comment>
                <comment line="586">
                    Update the y origins from the index of the parent                    
                </comment>
                <comment line="592">
                    It is possible for first row to have been
                    removed if the root isn&apos;t visible, in which                    
                </comment>
                <scope line="538">
                    <declaration name="changedIndexs" type="int" line="539"/>
                    <declaration name="changedParentNode" type="TreeStateNode" line="540"/>
                    <scope line="547">
                        <scope line="548">
                            <declaration name="makeInvisible" type="boolean" line="549"/>
                            <declaration name="counter" type="int" line="550"/>
                            <declaration name="removedRow" type="int" line="551"/>
                            <declaration name="removedNode" type="TreeStateNode" line="552"/>
                            <scope line="559">
                                <scope line="562"/>
                                <scope line="567">
                                    <scope line="569"/>
                                </scope>
                            </scope>
                            <scope line="575">
                                <scope line="579"/>
                            </scope>
                            <scope line="590">
                                <scope line="591"/>
                            </scope>
                        </scope>
                        <scope line="607"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="616">
                Invoked after the tree has drastically changed structure from a
                  given node down.  If the path returned by &lt;code&gt;e.getPath&lt;/code&gt;
                  is of length one and the first element does not identify the
                  current root node the first element should become the new root
                  of the tree.
                  &lt;p&gt;&lt;code&gt;e.path&lt;/code&gt; holds the path to the node.
                  &lt;p&gt;&lt;code&gt;e.childIndices&lt;/code&gt; returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    e the <code>TreeModelEvent</code> of interest                    
                </param>
            </javadoc>
            <method name="treeStructureChanged" type="void" line="628">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="636">
                    Check if root has changed, either to a null root, or                    
                </comment>
                <comment line="637">
                    to an entirely new root.                    
                </comment>
                <comment line="653">
                                        
                </comment>
                <scope line="630">
                    <declaration name="changedPath" type="TreePath" line="631"/>
                    <declaration name="changedNode" type="TreeStateNode" line="632"/>
                    <scope line="642"/>
                    <scope line="645">
                        <declaration name="nodeIndex" type="int" line="646"/>
                        <declaration name="newNode" type="TreeStateNode" line="647"/>
                        <declaration name="wasExpanded" type="boolean" line="648"/>
                        <declaration name="newIndex" type="int" line="649"/>
                        <scope line="656"/>
                        <scope line="667"/>
                    </scope>
                </scope>
            </method>
            <method name="visibleNodesChanged" type="void" line="685"/>
            <javadoc line="688">
                Adds a mapping for node.                
            </javadoc>
            <method name="addMapping" type="void" line="691">
                <params>
                    <param name="node" type="TreeStateNode"/>
                </params>
            </method>
            <javadoc line="695">
                Removes the mapping for a previously added node.                
            </javadoc>
            <method name="removeMapping" type="void" line="698">
                <params>
                    <param name="node" type="TreeStateNode"/>
                </params>
            </method>
            <javadoc line="702">
                Returns the node previously added for &lt;code&gt;path&lt;/code&gt;. This may
                  return null, if you to create a node use getNodeForPath.                
            </javadoc>
            <method name="getMapping" type="TreeStateNode" line="706">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="710">
                Retursn the bounds for row, &lt;code&gt;row&lt;/code&gt; by reference in
                  &lt;code&gt;placeIn&lt;/code&gt;. If &lt;code&gt;placeIn&lt;/code&gt; is null a new
                  Rectangle will be created and returned.                
            </javadoc>
            <method name="getBounds" type="Rectangle" line="715">
                <params>
                    <param name="row" type="int"/>
                    <param name="placeIn" type="Rectangle"/>
                </params>
                <scope line="719"/>
            </method>
            <javadoc line="725">
                Completely rebuild the tree, all expanded state, and node caches are
                  removed. All nodes are collapsed, except the root.                
            </javadoc>
            <method name="rebuild" type="void" line="729">
                <params>
                    <param name="clearSelection" type="boolean"/>
                </params>
                <declaration name="rootObject" type="Object" line="730"/>
                <scope line="733">
                    <scope line="743">
                        <declaration name="cursor" type="Enumeration" line="744"/>
                        <scope line="745"/>
                    </scope>
                </scope>
                <scope line="752"/>
                <scope line="756"/>
            </method>
            <javadoc line="762">
                Creates a new node to represent the node at &lt;I&gt;childIndex&lt;/I&gt; in
                  &lt;I&gt;parent&lt;/I&gt;s children.  This should be called if the node doesn&apos;t
                  already exist and &lt;I&gt;parent&lt;/I&gt; has been expanded at least once.
                  The newly created node will be made visible if &lt;I&gt;parent&lt;/I&gt; is
                  currently expanded.  This does not update the position of any
                  cells, nor update the selection if it needs to be.  If succesful
                  in creating the new TreeStateNode, it is returned, otherwise
                  null is returned.                
            </javadoc>
            <method name="createNodeAt" type="TreeStateNode" line="773">
                <params>
                    <param name="parent" type="TreeStateNode"/>
                    <param name="childIndex" type="int"/>
                </params>
                <comment line="787">
                                        
                </comment>
                <declaration name="isParentRoot" type="boolean" line="774"/>
                <declaration name="newValue" type="Object" line="775"/>
                <declaration name="newChildNode" type="TreeStateNode" line="776"/>
                <scope line="784">
                    <declaration name="newRow" type="int" line="785"/>
                    <scope line="788"/>
                    <scope line="796">
                        <declaration name="previousNode" type="TreeStateNode" line="797"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="808">
                Returns the TreeStateNode identified by path.  This mirrors
                  the behavior of getNodeForPath, but tries to take advantage of
                  path if it is an instance of AbstractTreePath.                
            </javadoc>
            <method name="getNodeForPath" type="TreeStateNode" line="815">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="onlyIfVisible" type="boolean"/>
                    <param name="shouldCreate" type="boolean"/>
                </params>
                <comment line="826">
                    Check all the parent paths, until a match is found.                    
                </comment>
                <comment line="843">
                    Found a match, create entries for all paths in                    
                </comment>
                <comment line="844">
                    paths.                    
                </comment>
                <comment line="872">
                    If we get here it means they share a different root!                    
                </comment>
                <comment line="873">
                    We could throw an exception...                    
                </comment>
                <scope line="816">
                    <declaration name="node" type="TreeStateNode" line="817"/>
                    <scope line="820"/>
                    <declaration name="paths" type="Stack&lt;TreePath&gt;" line="827"/>
                    <scope line="829"/>
                    <scope line="832"/>
                    <scope line="836">
                        <scope line="840">
                            <scope line="842">
                                <scope line="845">
                                    <declaration name="childIndex" type="int" line="849"/>
                                    <scope line="855"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="868"/>
                </scope>
            </method>
            <javadoc line="878">
                Updates the y locations of all of the visible nodes after
                  location.                
            </javadoc>
            <method name="updateYLocationsFrom" type="void" line="882">
                <params>
                    <param name="location" type="int"/>
                </params>
                <scope line="883">
                    <declaration name="counter" type="int" line="884"/>
                    <declaration name="aNode" type="TreeStateNode" line="885"/>
                    <scope line="890"/>
                </scope>
            </method>
            <javadoc line="899">
                Resets the y origin of all the visible nodes as well as messaging
                  all the visible nodes to updatePreferredSize().  You should not
                  normally have to call this.  Expanding and contracting the nodes
                  automaticly adjusts the locations.
                  updateAll determines if updatePreferredSize() is call on all nodes
                  or just those that don&apos;t have a valid size.                
            </javadoc>
            <method name="updateNodeSizes" type="void" line="907">
                <params>
                    <param name="updateAll" type="boolean"/>
                </params>
                <declaration name="aY" type="int" line="908"/>
                <declaration name="node" type="TreeStateNode" line="909"/>
                <scope line="913"/>
            </method>
            <javadoc line="922">
                Returns the index of the row containing location.  If there
                  are no rows, -1 is returned.  If location is beyond the last
                  row index, the last row index is returned.                
            </javadoc>
            <method name="getRowContainingYLocation" type="int" line="927">
                <params>
                    <param name="location" type="int"/>
                </params>
                <scope line="928"/>
                <declaration name="max" type="int" line="935"/>
                <declaration name="node" type="TreeStateNode" line="936"/>
                <scope line="941">
                    <scope line="946"/>
                    <scope line="949"/>
                </scope>
                <scope line="955"/>
            </method>
            <javadoc line="963">
                Ensures that all the path components in path are expanded, accept
                  for the last component which will only be expanded if expandLast
                  is true.
                  Returns true if succesful in finding the path.                
            </javadoc>
            <method name="ensurePathIsExpanded" type="void" line="969">
                <params>
                    <param name="aPath" type="TreePath"/>
                    <param name="expandLast" type="boolean"/>
                </params>
                <comment line="971">
                    Make sure the last entry isn&apos;t a leaf.                    
                </comment>
                <scope line="970">
                    <scope line="972"/>
                    <scope line="976">
                        <declaration name="lastNode" type="TreeStateNode" line="977"/>
                        <scope line="980"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="989">
                Returns the AbstractTreeUI.VisibleNode displayed at the given row                
            </javadoc>
            <method name="getNode" type="TreeStateNode" line="992">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="996">
                Returns the maximum node width.                
            </javadoc>
            <method name="getMaxNodeWidth" type="int" line="999">
                <declaration name="maxWidth" type="int" line="1000"/>
                <declaration name="nodeWidth" type="int" line="1001"/>
                <declaration name="counter" type="int" line="1002"/>
                <declaration name="node" type="TreeStateNode" line="1003"/>
                <scope line="1005"/>
            </method>
            <javadoc line="1014">
                Responsible for creating a TreeStateNode that will be used
                  to track display information about value.                
            </javadoc>
            <method name="createNodeForValue" type="TreeStateNode" line="1018">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <class name="TreeStateNode" line="1023">
                <extends class="DefaultMutableTreeNode"/>
                <comment line="1054">
                                        
                </comment>
                <comment line="1055">
                    Overriden DefaultMutableTreeNode methods                    
                </comment>
                <comment line="1056">
                                        
                </comment>
                <comment line="1117">
                                        
                </comment>
                <comment line="1118">
                    VariableHeightLayoutCache                    
                </comment>
                <comment line="1119">
                                        
                </comment>
                <comment line="1313">
                                        
                </comment>
                <comment line="1314">
                    Local methods                    
                </comment>
                <comment line="1315">
                                        
                </comment>
                <javadoc line="1023">
                    TreeStateNode is used to keep track of each of
                      the nodes that have been expanded. This will also cache the preferred
                      size of the value it represents.                    
                </javadoc>
                <declaration name="preferredWidth" type="int" line="1029"/>
                <javadoc line="1029">
                    Preferred size needed to draw the user object.                    
                </javadoc>
                <declaration name="preferredHeight" type="int" line="1031"/>
                <declaration name="xOrigin" type="int" line="1033"/>
                <javadoc line="1033">
                    X location that the user object will be drawn at.                    
                </javadoc>
                <declaration name="yOrigin" type="int" line="1036"/>
                <javadoc line="1036">
                    Y location that the user object will be drawn at.                    
                </javadoc>
                <declaration name="expanded" type="boolean" line="1039"/>
                <javadoc line="1039">
                    Is this node currently expanded?                    
                </javadoc>
                <declaration name="hasBeenExpanded" type="boolean" line="1042"/>
                <javadoc line="1042">
                    Has this node been expanded at least once?                    
                </javadoc>
                <declaration name="path" type="TreePath" line="1045"/>
                <javadoc line="1045">
                    Path of this node.                    
                </javadoc>
                <method name="TreeStateNode" type="constructor" line="1049">
                    <params>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1057">
                    Messaged when this node is added somewhere, resets the path
                      and adds a mapping from path to this node.                    
                </javadoc>
                <method name="setParent" type="void" line="1061">
                    <params>
                        <param name="parent" type="MutableTreeNode"/>
                    </params>
                    <scope line="1063"/>
                </method>
                <javadoc line="1070">
                    Messaged when this node is removed from its parent, this messages
                      &lt;code&gt;removedFromMapping&lt;/code&gt; to remove all the children.                    
                </javadoc>
                <method name="remove" type="void" line="1074">
                    <params>
                        <param name="childIndex" type="int"/>
                    </params>
                    <declaration name="node" type="TreeStateNode" line="1075"/>
                </method>
                <javadoc line="1081">
                    Messaged to set the user object. This resets the path.                    
                </javadoc>
                <method name="setUserObject" type="void" line="1084">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="1086">
                        <declaration name="parent" type="TreeStateNode" line="1087"/>
                    </scope>
                </method>
                <javadoc line="1096">
                    Returns the children of the receiver.
                      If the receiver is not currently expanded, this will return an
                      empty enumeration.                    
                </javadoc>
                <method name="children" type="Enumeration" line="1101">
                    <scope line="1102"/>
                    <scope line="1104"/>
                </method>
                <javadoc line="1109">
                    Returns true if the receiver is a leaf.                    
                </javadoc>
                <method name="isLeaf" type="boolean" line="1112"/>
                <javadoc line="1120">
                    Returns the location and size of this node.                    
                </javadoc>
                <method name="getNodeBounds" type="Rectangle" line="1123">
                    <params>
                        <param name="placeIn" type="Rectangle"/>
                    </params>
                    <scope line="1128"/>
                </method>
                <javadoc line="1137">
                    @return x location to draw node at.                    
                </javadoc>
                <method name="getXOrigin" type="int" line="1140"/>
                <javadoc line="1146">
                    Returns the y origin the user object will be drawn at.                    
                </javadoc>
                <method name="getYOrigin" type="int" line="1149">
                    <scope line="1150">
                        <declaration name="aRow" type="int" line="1151"/>
                    </scope>
                </method>
                <javadoc line="1160">
                    Returns the preferred height of the receiver.                    
                </javadoc>
                <method name="getPreferredHeight" type="int" line="1163"/>
                <javadoc line="1171">
                    Returns the preferred width of the receiver.                    
                </javadoc>
                <method name="getPreferredWidth" type="int" line="1174"/>
                <javadoc line="1180">
                    Returns true if this node has a valid size.                    
                </javadoc>
                <method name="hasValidSize" type="boolean" line="1183"/>
                <javadoc line="1187">
                    Returns the row of the receiver.                    
                </javadoc>
                <method name="getRow" type="int" line="1190"/>
                <javadoc line="1194">
                    Returns true if this node has been expanded at least once.                    
                </javadoc>
                <method name="hasBeenExpanded" type="boolean" line="1197"/>
                <javadoc line="1201">
                    Returns true if the receiver has been expanded.                    
                </javadoc>
                <method name="isExpanded" type="boolean" line="1204"/>
                <javadoc line="1208">
                    Returns the last visible node that is a child of this
                      instance.                    
                </javadoc>
                <method name="getLastVisibleNode" type="TreeStateNode" line="1212">
                    <declaration name="node" type="TreeStateNode" line="1213"/>
                </method>
                <javadoc line="1220">
                    Returns true if the receiver is currently visible.                    
                </javadoc>
                <method name="isVisible" type="boolean" line="1223">
                    <declaration name="parent" type="TreeStateNode" line="1227"/>
                </method>
                <javadoc line="1233">
                    Returns the number of children this will have. If the children
                      have not yet been loaded, this messages the model.                    
                </javadoc>
                <method name="getModelChildCount" type="int" line="1237"/>
                <javadoc line="1243">
                    Returns the number of visible children, that is the number of
                      children that are expanded, or leafs.                    
                </javadoc>
                <method name="getVisibleChildCount" type="int" line="1247">
                    <declaration name="childCount" type="int" line="1248"/>
                    <scope line="1250">
                        <declaration name="maxCounter" type="int" line="1251"/>
                    </scope>
                </method>
                <javadoc line="1261">
                    Toggles the receiver between expanded and collapsed.                    
                </javadoc>
                <method name="toggleExpanded" type="void" line="1264">
                    <scope line="1265"/>
                    <scope line="1267"/>
                </method>
                <javadoc line="1272">
                    Makes the receiver visible, but invoking
                      &lt;code&gt;expandParentAndReceiver&lt;/code&gt; on the superclass.                    
                </javadoc>
                <method name="makeVisible" type="void" line="1276">
                    <declaration name="parent" type="TreeStateNode" line="1277"/>
                </method>
                <javadoc line="1283">
                    Expands the receiver.                    
                </javadoc>
                <method name="expand" type="void" line="1286"/>
                <javadoc line="1290">
                    Collapses the receiver.                    
                </javadoc>
                <method name="collapse" type="void" line="1293"/>
                <javadoc line="1297">
                    Returns the value the receiver is representing. This is a cover
                      for getUserObject.                    
                </javadoc>
                <method name="getValue" type="Object" line="1301"/>
                <javadoc line="1305">
                    Returns a TreePath instance for this node.                    
                </javadoc>
                <method name="getTreePath" type="TreePath" line="1308"/>
                <javadoc line="1316">
                    Recreates the receivers path, and all its childrens paths.                    
                </javadoc>
                <method name="resetChildrenPaths" type="void" line="1319">
                    <params>
                        <param name="parentPath" type="TreePath"/>
                    </params>
                </method>
                <javadoc line="1330">
                    Sets y origin the user object will be drawn at to
                      &lt;I&gt;newYOrigin&lt;/I&gt;.                    
                </javadoc>
                <method name="setYOrigin" type="void" line="1334">
                    <params>
                        <param name="newYOrigin" type="int"/>
                    </params>
                </method>
                <javadoc line="1338">
                    Shifts the y origin by &lt;code&gt;offset&lt;/code&gt;.                    
                </javadoc>
                <method name="shiftYOriginBy" type="void" line="1341">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                </method>
                <javadoc line="1345">
                    Updates the receivers preferredSize by invoking
                      &lt;code&gt;updatePreferredSize&lt;/code&gt; with an argument of -1.                    
                </javadoc>
                <method name="updatePreferredSize" type="void" line="1349"/>
                <javadoc line="1353">
                    Updates the preferred size by asking the current renderer
                      for the Dimension needed to draw the user object this
                      instance represents.                    
                </javadoc>
                <method name="updatePreferredSize" type="void" line="1358">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="bounds" type="Rectangle" line="1359"/>
                    <scope line="1364"/>
                    <scope line="1369"/>
                    <scope line="1374"/>
                </method>
                <javadoc line="1384">
                    Marks the receivers size as invalid. Next time the size, location
                      is asked for it will be obtained.                    
                </javadoc>
                <method name="markSizeInvalid" type="void" line="1388"/>
                <javadoc line="1392">
                    Marks the receivers size, and all its descendants sizes, as invalid.                    
                </javadoc>
                <method name="deepMarkSizeInvalid" type="void" line="1395"/>
                <javadoc line="1401">
                    Returns the children of the receiver. If the children haven&apos;t
                      been loaded from the model and
                      &lt;code&gt;createIfNeeded&lt;/code&gt; is true, the children are first
                      loaded.                    
                </javadoc>
                <method name="getLoadedChildren" type="Enumeration" line="1407">
                    <params>
                        <param name="createIfNeeded" type="boolean"/>
                    </params>
                    <declaration name="newNode" type="TreeStateNode" line="1411"/>
                    <declaration name="realNode" type="Object" line="1412"/>
                    <declaration name="treeModel" type="TreeModel" line="1413"/>
                    <declaration name="count" type="int" line="1414"/>
                    <declaration name="childRow" type="int" line="1418"/>
                    <scope line="1420">
                        <scope line="1421"/>
                    </scope>
                    <scope line="1428">
                        <scope line="1430"/>
                    </scope>
                </method>
                <javadoc line="1440">
                    Messaged from expand and collapse. This is meant for subclassers
                      that may wish to do something interesting with this.                    
                </javadoc>
                <method name="didAdjustTree" type="void" line="1444"/>
                <javadoc line="1447">
                    Invokes &lt;code&gt;expandParentAndReceiver&lt;/code&gt; on the parent,
                      and expands the receiver.                    
                </javadoc>
                <method name="expandParentAndReceiver" type="void" line="1451">
                    <declaration name="parent" type="TreeStateNode" line="1452"/>
                </method>
                <javadoc line="1459">
                    Expands this node in the tree.  This will load the children
                      from the treeModel if this node has not previously been
                      expanded.  If &lt;I&gt;adjustTree&lt;/I&gt; is true the tree and selection
                      are updated accordingly.                    
                </javadoc>
                <method name="expand" type="void" line="1465">
                    <params>
                        <param name="adjustTree" type="boolean"/>
                    </params>
                    <comment line="1502">
                        don&apos;t add me, I&apos;m already in                        
                    </comment>
                    <comment line="1532">
                        Adjust the Y origin of any nodes following this row.                        
                    </comment>
                    <comment line="1548">
                        Update the rows in the selection                        
                    </comment>
                    <scope line="1466">
                        <declaration name="isFixed" type="boolean" line="1467"/>
                        <declaration name="startHeight" type="int" line="1468"/>
                        <declaration name="originalRow" type="int" line="1469"/>
                        <scope line="1474">
                            <declaration name="newNode" type="TreeStateNode" line="1475"/>
                            <declaration name="realNode" type="Object" line="1476"/>
                            <declaration name="treeModel" type="TreeModel" line="1477"/>
                            <declaration name="count" type="int" line="1478"/>
                            <scope line="1481">
                                <scope line="1482"/>
                            </scope>
                            <scope line="1489">
                                <declaration name="offset" type="int" line="1490"/>
                                <scope line="1491"/>
                            </scope>
                        </scope>
                        <declaration name="i" type="int" line="1500"/>
                        <declaration name="cursor" type="Enumeration" line="1501"/>
                        <declaration name="newYOrigin" type="int" line="1504"/>
                        <declaration name="aNode" type="TreeStateNode" line="1512"/>
                        <scope line="1513">
                            <scope line="1514"/>
                        </scope>
                        <scope line="1523">
                            <scope line="1524"/>
                        </scope>
                        <scope line="1531">
                            <scope line="1533">
                                <declaration name="counter" type="int" line="1534"/>
                                <declaration name="heightDiff" type="int" line="1535"/>
                            </scope>
                        </scope>
                        <scope line="1549"/>
                    </scope>
                </method>
                <javadoc line="1555">
                    Collapses this node in the tree.  If &lt;I&gt;adjustTree&lt;/I&gt; is
                      true the tree and selection are updated accordingly.                    
                </javadoc>
                <method name="collapse" type="void" line="1559">
                    <params>
                        <param name="adjustTree" type="boolean"/>
                    </params>
                    <comment line="1562">
                        don&apos;t remove me, I&apos;m still visible                        
                    </comment>
                    <comment line="1580">
                        visibleNodes.removeElement(node);                        
                    </comment>
                    <comment line="1592">
                        visibleNodes.removeElement(node);                        
                    </comment>
                    <comment line="1597">
                        Clean up the visible nodes.                        
                    </comment>
                    <comment line="1612">
                        Adjust the Y origin of any rows following this one.                        
                    </comment>
                    <scope line="1560">
                        <declaration name="cursor" type="Enumeration" line="1561"/>
                        <declaration name="rowsDeleted" type="int" line="1563"/>
                        <declaration name="isFixed" type="boolean" line="1564"/>
                        <declaration name="lastYEnd" type="int" line="1565"/>
                        <declaration name="startHeight" type="int" line="1570"/>
                        <declaration name="startYEnd" type="int" line="1571"/>
                        <declaration name="myRow" type="int" line="1572"/>
                        <scope line="1574">
                            <scope line="1575">
                                <declaration name="node" type="TreeStateNode" line="1576"/>
                                <scope line="1578"/>
                            </scope>
                        </scope>
                        <scope line="1586">
                            <scope line="1587">
                                <declaration name="node" type="TreeStateNode" line="1588"/>
                                <scope line="1590"/>
                            </scope>
                        </scope>
                        <scope line="1599"/>
                        <scope line="1611">
                            <scope line="1615">
                                <declaration name="counter" type="int" line="1616"/>
                            </scope>
                        </scope>
                        <scope line="1629"/>
                    </scope>
                </method>
                <javadoc line="1635">
                    Removes the receiver, and all its children, from the mapping
                      table.                    
                </javadoc>
                <method name="removeFromMapping" type="void" line="1639">
                    <scope line="1640"/>
                </method>
            </class>
            <class name="VisibleTreeStateNodeEnumeration" line="1649">
                <comment line="1054">
                                        
                </comment>
                <comment line="1055">
                    Overriden DefaultMutableTreeNode methods                    
                </comment>
                <comment line="1056">
                                        
                </comment>
                <comment line="1117">
                                        
                </comment>
                <comment line="1118">
                    VariableHeightLayoutCache                    
                </comment>
                <comment line="1119">
                                        
                </comment>
                <comment line="1313">
                                        
                </comment>
                <comment line="1314">
                    Local methods                    
                </comment>
                <comment line="1315">
                                        
                </comment>
                <implements interface="Enumeration">
                    <type_params>
                        <type_param name="TreePath"/>
                    </type_params>
                </implements>
                <javadoc line="1649">
                    An enumerator to iterate through visible nodes.                    
                </javadoc>
                <declaration name="parent" type="TreeStateNode" line="1654"/>
                <javadoc line="1654">
                    Parent thats children are being enumerated.                    
                </javadoc>
                <declaration name="nextIndex" type="int" line="1656"/>
                <javadoc line="1656">
                    Index of next child. An index of -1 signifies parent should be
                      visibled next.                    
                </javadoc>
                <declaration name="childCount" type="int" line="1659"/>
                <javadoc line="1659">
                    Number of children in parent.                    
                </javadoc>
                <method name="VisibleTreeStateNodeEnumeration" type="constructor" line="1662">
                    <params>
                        <param name="node" type="TreeStateNode"/>
                    </params>
                </method>
                <method name="VisibleTreeStateNodeEnumeration" type="constructor" line="1667">
                    <params>
                        <param name="parent" type="TreeStateNode"/>
                        <param name="startIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="1673">
                    @return true if more visible nodes.                    
                </javadoc>
                <method name="hasMoreElements" type="boolean" line="1676"/>
                <javadoc line="1680">
                    @return next visible TreePath.                    
                </javadoc>
                <method name="nextElement" type="TreePath" line="1683">
                    <declaration name="retObject" type="TreePath" line="1687"/>
                    <scope line="1689"/>
                    <scope line="1692">
                        <declaration name="node" type="TreeStateNode" line="1693"/>
                    </scope>
                </method>
                <javadoc line="1702">
                    Determines the next object by invoking &lt;code&gt;updateNextIndex&lt;/code&gt;
                      and if not succesful &lt;code&gt;findNextValidParent&lt;/code&gt;.                    
                </javadoc>
                <method name="updateNextObject" type="void" line="1706">
                    <scope line="1707"/>
                </method>
                <javadoc line="1712">
                    Finds the next valid parent, this should be called when nextIndex
                      is beyond the number of children of the current parent.                    
                </javadoc>
                <method name="findNextValidParent" type="boolean" line="1716">
                    <comment line="1718">
                        mark as invalid!                        
                    </comment>
                    <scope line="1717"/>
                    <scope line="1722">
                        <declaration name="newParent" type="TreeStateNode" line="1723"/>
                        <scope line="1726"/>
                    </scope>
                </method>
                <javadoc line="1739">
                    Updates &lt;code&gt;nextIndex&lt;/code&gt; returning false if it is beyond
                      the number of children of parent.                    
                </javadoc>
                <method name="updateNextIndex" type="boolean" line="1743">
                    <comment line="1744">
                        nextIndex == -1 identifies receiver, make sure is expanded                        
                    </comment>
                    <comment line="1745">
                        before descend.                        
                    </comment>
                    <comment line="1749">
                        Check that it can have kids                        
                    </comment>
                    <comment line="1752">
                        Make sure next index not beyond child count.                        
                    </comment>
                    <declaration name="child" type="TreeStateNode" line="1756"/>
                    <scope line="1759"/>
                </method>
            </class>
        </class>
    </source>