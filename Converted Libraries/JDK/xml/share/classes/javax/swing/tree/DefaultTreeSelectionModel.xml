<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.tree">
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.List"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.DefaultListSelectionModel"/>
        <class name="DefaultTreeSelectionModel" line="13">
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <implements interface="TreeSelectionModel"/>
            <javadoc line="13">
                Default implementation of TreeSelectionModel.  Listeners are notified
                  whenever
                  the paths in the selection change, not the rows. In order
                  to be able to track row changes you may wish to become a listener
                  for expansion events on the tree and test for changes from there.
                  &lt;p&gt;resetRowSelection is called from any of the methods that update
                  the selected paths. If you subclass any of these methods to
                  filter what is allowed to be selected, be sure and message
                  &lt;code&gt;resetRowSelection&lt;/code&gt; if you do not message super.
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.JTree                    
                </see>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="SELECTION_MODE_PROPERTY" type="String" line="35"/>
            <javadoc line="35">
                Property name for selectionMode.                
            </javadoc>
            <declaration name="changeSupport" type="SwingPropertyChangeSupport" line="39"/>
            <javadoc line="39">
                Used to messaged registered listeners.                
            </javadoc>
            <declaration name="selection" type="TreePath[]" line="43"/>
            <javadoc line="43">
                Paths that are currently selected.  Will be null if nothing is
                  currently selected.                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="48"/>
            <javadoc line="48">
                Event listener list.                
            </javadoc>
            <declaration name="rowMapper" type="RowMapper" line="52"/>
            <javadoc line="52">
                Provides a row for a given path.                
            </javadoc>
            <declaration name="listSelectionModel" type="DefaultListSelectionModel" line="56"/>
            <javadoc line="56">
                Handles maintaining the list selection model. The RowMapper is used
                  to map from a TreePath to a row, and the value is then placed here.                
            </javadoc>
            <declaration name="selectionMode" type="int" line="61"/>
            <javadoc line="61">
                Mode for the selection, will be either SINGLE_TREE_SELECTION,
                  CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION.                
            </javadoc>
            <declaration name="leadPath" type="TreePath" line="66"/>
            <javadoc line="66">
                Last path that was added.                
            </javadoc>
            <declaration name="leadIndex" type="int" line="70"/>
            <javadoc line="70">
                Index of the lead path in selection.                
            </javadoc>
            <declaration name="leadRow" type="int" line="74"/>
            <javadoc line="74">
                Lead row.                
            </javadoc>
            <declaration name="uniquePaths" type="Hashtable&amp;lt;TreePath,Boolean&amp;gt;" line="78"/>
            <javadoc line="78">
                Used to make sure the paths are unique, will contain all the paths
                  in &lt;code&gt;selection&lt;/code&gt;.                
            </javadoc>
            <declaration name="lastPaths" type="Hashtable&amp;lt;TreePath,Boolean&amp;gt;" line="83"/>
            <declaration name="tempPaths" type="TreePath[]" line="84"/>
            <javadoc line="85">
                Creates a new instance of DefaultTreeSelectionModel that is
                  empty, with a selection mode of DISCONTIGUOUS_TREE_SELECTION.                
            </javadoc>
            <method name="DefaultTreeSelectionModel" type="constructor" line="89"/>
            <javadoc line="97">
                Sets the RowMapper instance. This instance is used to determine
                  the row for a particular TreePath.                
            </javadoc>
            <method name="setRowMapper" type="void" line="101">
                <params>
                    <param name="newMapper" type="RowMapper"/>
                </params>
            </method>
            <javadoc line="105">
                Returns the RowMapper instance that is able to map a TreePath to a
                  row.                
            </javadoc>
            <method name="getRowMapper" type="RowMapper" line="109"/>
            <javadoc line="112">
                Sets the selection model, which must be one of SINGLE_TREE_SELECTION,
                  CONTIGUOUS_TREE_SELECTION or DISCONTIGUOUS_TREE_SELECTION. If mode
                  is not one of the defined value,
                  &lt;code&gt;DISCONTIGUOUS_TREE_SELECTION&lt;/code&gt; is assumed.
                  &lt;p&gt;This may change the selection if the current selection is not valid
                  for the new mode. For example, if three TreePaths are
                  selected when the mode is changed to &lt;code&gt;SINGLE_TREE_SELECTION&lt;/code&gt;,
                  only one TreePath will remain selected. It is up to the particular
                  implementation to decide what TreePath remains selected.
                  &lt;p&gt;
                  Setting the mode to something other than the defined types will
                  result in the mode becoming &lt;code&gt;DISCONTIGUOUS_TREE_SELECTION&lt;/code&gt;.                
            </javadoc>
            <method name="setSelectionMode" type="void" line="126">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <declaration name="oldMode" type="int" line="127"/>
            </method>
            <javadoc line="132">
                Returns the selection mode, one of &lt;code&gt;SINGLE_TREE_SELECTION&lt;/code&gt;,
                  &lt;code&gt;DISCONTIGUOUS_TREE_SELECTION&lt;/code&gt; or
                  &lt;code&gt;CONTIGUOUS_TREE_SELECTION&lt;/code&gt;.                
            </javadoc>
            <method name="getSelectionMode" type="int" line="137"/>
            <javadoc line="140">
                Sets the selection to path. If this represents a change, then
                  the TreeSelectionListeners are notified. If &lt;code&gt;path&lt;/code&gt; is
                  null, this has the same effect as invoking &lt;code&gt;clearSelection&lt;/code&gt;.                
                <param>
                    path new path to select                    
                </param>
            </javadoc>
            <method name="setSelectionPath" type="void" line="146">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="148">
                    <declaration name="newPaths" type="TreePath[]" line="149"/>
                </scope>
            </method>
            <javadoc line="154">
                Sets the selection. Whether the supplied paths are taken as the
                  new selection depends upon the selection mode. If the supplied
                  array is {@code null}, or empty, the selection is cleared. If
                  the selection mode is {@code SINGLE_TREE_SELECTION}, only the
                  first path in {@code pPaths} is used. If the selection
                  mode is {@code CONTIGUOUS_TREE_SELECTION} and the supplied paths
                  are not contiguous, then only the first path in {@code pPaths} is
                  used. If the selection mode is{@code DISCONTIGUOUS_TREE_SELECTION}, then all paths are used.
                  &lt;p&gt;
                  All {@code null} paths in {@code pPaths} are ignored.
                  &lt;p&gt;
                  If this represents a change, all registered {@codeTreeSelectionListener}s are notified.
                  &lt;p&gt;
                  The lead path is set to the last unique path.
                  &lt;p&gt;
                  The paths returned from {@code getSelectionPaths} are in the same
                  order as those supplied to this method.                
                <param>
                    pPaths the new selection                    
                </param>
            </javadoc>
            <method name="setSelectionPaths" type="void" line="174">
                <params>
                    <param name="pPaths" type="TreePath[]"/>
                </params>
                <declaration name="newCount" type="int" line="175"/>
                <declaration name="paths" type="TreePath[]" line="176"/>
                <scope line="181">
                    <scope line="182">
                        <scope line="183"/>
                    </scope>
                    <scope line="189">
                        <scope line="190"/>
                    </scope>
                    <declaration name="beginLeadPath" type="TreePath" line="196"/>
                    <declaration name="cPaths" type="Vector&amp;lt;PathPlaceHolder&amp;gt;" line="197"/>
                    <declaration name="newSelectionAsList" type="List&amp;lt;TreePath&amp;gt;" line="198"/>
                    <scope line="201">
                        <declaration name="path" type="TreePath" line="202"/>
                        <scope line="203">
                            <scope line="205"/>
                        </scope>
                    </scope>
                    <declaration name="newSelection" type="TreePath[]" line="212"/>
                    <declaration name="tempHT" type="Hashtable&amp;lt;TreePath,Boolean&amp;gt;" line="215"/>
                </scope>
            </method>
            <javadoc line="225">
                Adds path to the current selection. If path is not currently
                  in the selection the TreeSelectionListeners are notified. This has
                  no effect if &lt;code&gt;path&lt;/code&gt; is null.                
                <param>
                    path the new path to add to the current selection                    
                </param>
            </javadoc>
            <method name="addSelectionPath" type="void" line="231">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="232">
                    <declaration name="toAdd" type="TreePath[]" line="233"/>
                </scope>
            </method>
            <javadoc line="238">
                Adds paths to the current selection. If any of the paths in
                  paths are not currently in the selection the TreeSelectionListeners
                  are notified. This has
                  no effect if &lt;code&gt;paths&lt;/code&gt; is null.
                  &lt;p&gt;The lead path is set to the last element in &lt;code&gt;paths&lt;/code&gt;.
                  &lt;p&gt;If the selection mode is &lt;code&gt;CONTIGUOUS_TREE_SELECTION&lt;/code&gt;,
                  and adding the new paths would make the selection discontiguous.
                  Then two things can result: if the TreePaths in &lt;code&gt;paths&lt;/code&gt;
                  are contiguous, then the selection becomes these TreePaths,
                  otherwise the TreePaths aren&apos;t contiguous and the selection becomes
                  the first TreePath in &lt;code&gt;paths&lt;/code&gt;.                
                <param>
                    paths the new path to add to the current selection                    
                </param>
            </javadoc>
            <method name="addSelectionPaths" type="void" line="252">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
                <declaration name="newPathLength" type="int" line="253"/>
                <scope line="254">
                    <scope line="255"/>
                    <scope line="258">
                        <scope line="259"/>
                        <scope line="262">
                            <declaration name="newPaths" type="TreePath[]" line="263"/>
                        </scope>
                    </scope>
                    <scope line="268">
                        <declaration name="counter" type="int" line="269"/>
                        <declaration name="oldCount" type="int" line="270"/>
                        <declaration name="beginLeadPath" type="TreePath" line="271"/>
                        <declaration name="cPaths" type="Vector&amp;lt;PathPlaceHolder&amp;gt;" line="272"/>
                        <scope line="276">
                            <scope line="277">
                                <scope line="278"/>
                            </scope>
                        </scope>
                        <scope line="288"/>
                        <scope line="291">
                            <declaration name="newSelection" type="TreePath" line="292"/>
                            <scope line="294">
                                <declaration name="newPaths" type="Enumeration&amp;lt;TreePath&amp;gt;" line="295"/>
                                <scope line="297"/>
                            </scope>
                            <scope line="301"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="315">
                Removes path from the selection. If path is in the selection
                  The TreeSelectionListeners are notified. This has no effect if
                  &lt;code&gt;path&lt;/code&gt; is null.                
                <param>
                    path the path to remove from the selection                    
                </param>
            </javadoc>
            <method name="removeSelectionPath" type="void" line="321">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="322">
                    <declaration name="rPath" type="TreePath[]" line="323"/>
                </scope>
            </method>
            <javadoc line="328">
                Removes paths from the selection.  If any of the paths in paths
                  are in the selection the TreeSelectionListeners are notified.
                  This has no effect if &lt;code&gt;paths&lt;/code&gt; is null.                
                <param>
                    paths the paths to remove from the selection                    
                </param>
            </javadoc>
            <method name="removeSelectionPaths" type="void" line="334">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
                <scope line="335">
                    <scope line="336"/>
                    <scope line="339">
                        <declaration name="pathsToRemove" type="Vector&amp;lt;PathPlaceHolder&amp;gt;" line="340"/>
                        <scope line="341">
                            <scope line="342">
                                <scope line="343"/>
                            </scope>
                        </scope>
                        <scope line="350">
                            <declaration name="removeCount" type="int" line="351"/>
                            <declaration name="beginLeadPath" type="TreePath" line="352"/>
                            <scope line="353"/>
                            <scope line="356">
                                <declaration name="pEnum" type="Enumeration&amp;lt;TreePath&amp;gt;" line="357"/>
                                <declaration name="validCount" type="int" line="358"/>
                                <scope line="360"/>
                            </scope>
                            <scope line="364">
                                <scope line="365"/>
                                <scope line="368"/>
                            </scope>
                            <scope line="372"/>
                            <scope line="375"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="385">
                Returns the first path in the selection. This is useful if there
                  if only one item currently selected.                
            </javadoc>
            <method name="getSelectionPath" type="TreePath" line="389">
                <scope line="390"/>
            </method>
            <javadoc line="395">
                Returns the selection.                
                <return>
                    the selection                    
                </return>
            </javadoc>
            <method name="getSelectionPaths" type="TreePath[]" line="399">
                <scope line="400">
                    <declaration name="pathSize" type="int" line="401"/>
                    <declaration name="result" type="TreePath[]" line="402"/>
                </scope>
            </method>
            <javadoc line="408">
                Returns the number of paths that are selected.                
            </javadoc>
            <method name="getSelectionCount" type="int" line="411"/>
            <javadoc line="414">
                Returns true if the path, &lt;code&gt;path&lt;/code&gt;,
                  is in the current selection.                
            </javadoc>
            <method name="isPathSelected" type="boolean" line="418">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="421">
                Returns true if the selection is currently empty.                
            </javadoc>
            <method name="isSelectionEmpty" type="boolean" line="424"/>
            <javadoc line="427">
                Empties the current selection.  If this represents a change in the
                  current selection, the selection listeners are notified.                
            </javadoc>
            <method name="clearSelection" type="void" line="431">
                <scope line="432">
                    <declaration name="selSize" type="int" line="433"/>
                    <declaration name="newness" type="boolean[]" line="434"/>
                    <declaration name="event" type="TreeSelectionEvent" line="436"/>
                </scope>
            </method>
            <javadoc line="445">
                Adds x to the list of listeners that are notified each time the
                  set of selected TreePaths changes.                
                <param>
                    x the new listener to be added                    
                </param>
            </javadoc>
            <method name="addTreeSelectionListener" type="void" line="450">
                <params>
                    <param name="x" type="TreeSelectionListener"/>
                </params>
            </method>
            <javadoc line="453">
                Removes x from the list of listeners that are notified each time
                  the set of selected TreePaths changes.                
                <param>
                    x the listener to remove                    
                </param>
            </javadoc>
            <method name="removeTreeSelectionListener" type="void" line="458">
                <params>
                    <param name="x" type="TreeSelectionListener"/>
                </params>
            </method>
            <javadoc line="461">
                Returns an array of all the tree selection listeners
                  registered on this model.                
                <return>
                    all of this model&apos;s &lt;code&gt;TreeSelectionListener&lt;/code&gt;s
                      or an empty
                      array if no tree selection listeners are currently registered                    
                </return>
                <see>
                    #addTreeSelectionListener                    
                </see>
                <see>
                    #removeTreeSelectionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTreeSelectionListeners" type="TreeSelectionListener[]" line="471"/>
            <javadoc line="474">
                Notifies all listeners that are registered for
                  tree selection events on this object.                
                <see>
                    #addTreeSelectionListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireValueChanged" type="void" line="480">
                <params>
                    <param name="e" type="TreeSelectionEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="481"/>
                <scope line="482">
                    <scope line="483"/>
                </scope>
            </method>
            <javadoc line="488">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal,
                  such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;DefaultTreeSelectionModel&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;
                  for its tree selection listeners with the following code:
                  &lt;pre&gt;TreeSelectionListener[] tsls = (TreeSelectionListener[])(m.getListeners(TreeSelectionListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this component,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getTreeSelectionListeners                    
                </see>
                <see>
                    #getPropertyChangeListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="518">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="521">
                Returns the selection in terms of rows. There is not
                  necessarily a one-to-one mapping between the {@code TreePath}s
                  returned from {@code getSelectionPaths} and this method. In
                  particular, if a {@code TreePath} is not viewable (the {@codeRowMapper} returns {@code -1} for the row corresponding to the{@code TreePath}), then the corresponding row is not included
                  in the returned array. For example, if the selection consists
                  of two paths, {@code A} and {@code B}, with {@code A} at row{@code 10}, and {@code B} not currently viewable, then this method
                  returns an array with the single entry {@code 10}.                
                <return>
                    the selection in terms of rows                    
                </return>
            </javadoc>
            <method name="getSelectionRows" type="int[]" line="531">
                <scope line="532">
                    <declaration name="rows" type="int[]" line="533"/>
                    <scope line="534">
                        <declaration name="invisCount" type="int" line="535"/>
                        <scope line="536">
                            <scope line="537"/>
                        </scope>
                        <scope line="541">
                            <scope line="542"/>
                            <scope line="545">
                                <declaration name="tempRows" type="int[]" line="546"/>
                                <scope line="547">
                                    <scope line="548"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="560">
                Returns the smallest value obtained from the RowMapper for the
                  current set of selected TreePaths. If nothing is selected,
                  or there is no RowMapper, this will return -1.                
            </javadoc>
            <method name="getMinSelectionRow" type="int" line="565"/>
            <javadoc line="568">
                Returns the largest value obtained from the RowMapper for the
                  current set of selected TreePaths. If nothing is selected,
                  or there is no RowMapper, this will return -1.                
            </javadoc>
            <method name="getMaxSelectionRow" type="int" line="573"/>
            <javadoc line="576">
                Returns true if the row identified by &lt;code&gt;row&lt;/code&gt; is selected.                
            </javadoc>
            <method name="isRowSelected" type="boolean" line="579">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="582">
                Updates this object&apos;s mapping from TreePath to rows. This should
                  be invoked when the mapping from TreePaths to integers has changed
                  (for example, a node has been expanded).
                  &lt;p&gt;You do not normally have to call this, JTree and its associated
                  Listeners will invoke this for you. If you are implementing your own
                  View class, then you will have to invoke this.
                  &lt;p&gt;This will invoke &lt;code&gt;insureRowContinuity&lt;/code&gt; to make sure
                  the currently selected TreePaths are still valid based on the
                  selection mode.                
            </javadoc>
            <method name="resetRowSelection" type="void" line="593">
                <scope line="595">
                    <declaration name="aRow" type="int" line="596"/>
                    <declaration name="validCount" type="int" line="597"/>
                    <declaration name="rows" type="int[]" line="598"/>
                    <scope line="599">
                        <scope line="601"/>
                    </scope>
                    <scope line="605"/>
                    <scope line="608"/>
                    <scope line="613"/>
                </scope>
            </method>
            <javadoc line="620">
                Returns the lead selection index. That is the last index that was
                  added.                
            </javadoc>
            <method name="getLeadSelectionRow" type="int" line="624"/>
            <javadoc line="627">
                Returns the last path that was added. This may differ from the
                  leadSelectionPath property maintained by the JTree.                
            </javadoc>
            <method name="getLeadSelectionPath" type="TreePath" line="631"/>
            <javadoc line="634">
                Adds a PropertyChangeListener to the listener list.
                  The listener is registered for all properties.
                  &lt;p&gt;
                  A PropertyChangeEvent will get fired when the selection mode
                  changes.                
                <param>
                    listener  the PropertyChangeListener to be added                    
                </param>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="642">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="643"/>
            </method>
            <javadoc line="648">
                Removes a PropertyChangeListener from the listener list.
                  This removes a PropertyChangeListener that was registered
                  for all properties.                
                <param>
                    listener  the PropertyChangeListener to be removed                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="654">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="655"/>
            </method>
            <javadoc line="660">
                Returns an array of all the property change listeners
                  registered on this &lt;code&gt;DefaultTreeSelectionModel&lt;/code&gt;.                
                <return>
                    all of this model&apos;s &lt;code&gt;PropertyChangeListener&lt;/code&gt;s
                      or an empty
                      array if no property change listeners are currently registered                    
                </return>
                <see>
                    #addPropertyChangeListener                    
                </see>
                <see>
                    #removePropertyChangeListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="670">
                <scope line="671"/>
            </method>
            <javadoc line="676">
                Makes sure the currently selected &lt;code&gt;TreePath&lt;/code&gt;s are valid
                  for the current selection mode.
                  If the selection mode is &lt;code&gt;CONTIGUOUS_TREE_SELECTION&lt;/code&gt;
                  and a &lt;code&gt;RowMapper&lt;/code&gt; exists, this will make sure all
                  the rows are contiguous, that is, when sorted all the rows are
                  in order with no gaps.
                  If the selection isn&apos;t contiguous, the selection is
                  reset to contain the first set, when sorted, of contiguous rows.
                  &lt;p&gt;
                  If the selection mode is &lt;code&gt;SINGLE_TREE_SELECTION&lt;/code&gt; and
                  more than one TreePath is selected, the selection is reset to
                  contain the first path currently selected.                
            </javadoc>
            <method name="insureRowContinuity" type="void" line="690">
                <scope line="691">
                    <declaration name="lModel" type="DefaultListSelectionModel" line="692"/>
                    <declaration name="min" type="int" line="693"/>
                    <scope line="694">
                        <scope line="695">
                            <scope line="696">
                                <scope line="697"/>
                                <scope line="700">
                                    <declaration name="newSel" type="TreePath[]" line="701"/>
                                    <declaration name="selectionIndex" type="int" line="702"/>
                                    <scope line="703">
                                        <scope line="704"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="715"/>
            </method>
            <javadoc line="719">
                Returns true if the paths are contiguous,
                  or this object has no RowMapper.                
            </javadoc>
            <method name="arePathsContiguous" type="boolean" line="723">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
                <scope line="725">
                    <declaration name="bitSet" type="BitSet" line="726"/>
                    <declaration name="anIndex" type="int" line="727"/>
                    <declaration name="pathCount" type="int" line="728"/>
                    <declaration name="validCount" type="int" line="729"/>
                    <declaration name="tempPath" type="TreePath[]" line="730"/>
                    <scope line="733">
                        <scope line="734">
                            <declaration name="rows" type="int[]" line="736"/>
                            <scope line="737"/>
                            <scope line="743"/>
                        </scope>
                    </scope>
                    <declaration name="maxCounter" type="int" line="749"/>
                </scope>
            </method>
            <javadoc line="754">
                Used to test if a particular set of &lt;code&gt;TreePath&lt;/code&gt;s can
                  be added. This will return true if &lt;code&gt;paths&lt;/code&gt; is null (or
                  empty), or this object has no RowMapper, or nothing is currently selected,
                  or the selection mode is &lt;code&gt;DISCONTIGUOUS_TREE_SELECTION&lt;/code&gt;, or
                  adding the paths to the current selection still results in a
                  contiguous set of &lt;code&gt;TreePath&lt;/code&gt;s.                
            </javadoc>
            <method name="canPathsBeAdded" type="boolean" line="762">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
                <scope line="764">
                    <declaration name="bitSet" type="BitSet" line="765"/>
                    <declaration name="lModel" type="DefaultListSelectionModel" line="766"/>
                    <declaration name="anIndex" type="int" line="767"/>
                    <declaration name="counter" type="int" line="768"/>
                    <declaration name="min" type="int" line="769"/>
                    <declaration name="max" type="int" line="770"/>
                    <declaration name="tempPath" type="TreePath[]" line="771"/>
                    <scope line="772">
                        <scope line="773"/>
                    </scope>
                    <scope line="777"/>
                    <scope line="781">
                        <scope line="782">
                            <declaration name="rows" type="int[]" line="784"/>
                            <scope line="785"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="799">
                Returns true if the paths can be removed without breaking the
                  continuity of the model.
                  This is rather expensive.                
            </javadoc>
            <method name="canPathsBeRemoved" type="boolean" line="804">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
                <scope line="806">
                    <declaration name="bitSet" type="BitSet" line="807"/>
                    <declaration name="counter" type="int" line="808"/>
                    <declaration name="pathCount" type="int" line="809"/>
                    <declaration name="anIndex" type="int" line="810"/>
                    <declaration name="min" type="int" line="811"/>
                    <declaration name="validCount" type="int" line="812"/>
                    <declaration name="tempPath" type="TreePath[]" line="813"/>
                    <declaration name="rows" type="int[]" line="814"/>
                    <scope line="816">
                        <scope line="817"/>
                    </scope>
                    <scope line="821">
                        <scope line="822">
                            <scope line="825"/>
                        </scope>
                    </scope>
                    <scope line="834"/>
                </scope>
            </method>
            <javadoc line="840">
                Notifies listeners of a change in path. changePaths should contain
                  instances of PathPlaceHolder.                
                <deprecated>
                    As of JDK version 1.7                    
                </deprecated>
            </javadoc>
            <method name="notifyPathChange" type="void" line="845">
                <params>
                    <param name="changedPaths" type="Vector"/>
                    <param name="oldLeadSelection" type="TreePath"/>
                </params>
                <declaration name="cPathCount" type="int" line="846"/>
                <declaration name="newness" type="boolean[]" line="847"/>
                <declaration name="paths" type="TreePath[]" line="848"/>
                <declaration name="placeholder" type="PathPlaceHolder" line="849"/>
                <scope line="850"/>
                <declaration name="event" type="TreeSelectionEvent" line="855"/>
            </method>
            <javadoc line="858">
                Updates the leadIndex instance variable.                
            </javadoc>
            <method name="updateLeadIndex" type="void" line="861">
                <scope line="862">
                    <scope line="863"/>
                    <scope line="867">
                        <scope line="869">
                            <scope line="870"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="877"/>
            </method>
            <javadoc line="881">
                This method is obsolete and its implementation is now a noop.  It&apos;s
                  still called by setSelectionPaths and addSelectionPaths, but only
                  for backwards compatability.                
            </javadoc>
            <method name="insureUniqueness" type="void" line="886"/>
            <javadoc line="888">
                Returns a string that displays and identifies this
                  object&apos;s properties.                
                <return>
                    a String representation of this object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="893">
                <declaration name="selCount" type="int" line="894"/>
                <declaration name="retBuffer" type="StringBuffer" line="895"/>
                <declaration name="rows" type="int[]" line="896"/>
                <scope line="900"/>
            </method>
            <javadoc line="907">
                Returns a clone of this object with the same selection.
                  This method does not duplicate
                  selection listeners and property listeners.                
                <exception>
                    CloneNotSupportedException never thrown by instances of
                      this class                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="914">
                <declaration name="clone" type="DefaultTreeSelectionModel" line="915"/>
                <scope line="917">
                    <declaration name="selLength" type="int" line="918"/>
                </scope>
            </method>
            <method name="writeObject" type="void" line="929">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="tValues" type="Object[]" line="930"/>
                <scope line="932"/>
            </method>
            <method name="readObject" type="void" line="940">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="tValues" type="Object[]" line="941"/>
            </method>
        </class>
        <class name="PathPlaceHolder" line="947">
            <javadoc line="947">
                Holds a path and whether or not it is new.                
            </javadoc>
            <declaration name="isNew" type="boolean" line="951"/>
            <declaration name="path" type="TreePath" line="952"/>
            <method name="PathPlaceHolder" type="constructor" line="953">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="isNew" type="boolean"/>
                </params>
            </method>
        </class>
    </source>