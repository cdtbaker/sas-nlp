<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.filechooser">
        <import package="javax.swing"/>
        <import package="java.awt.Image"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.awt.shell"/>
        <class name="FileSystemView" line="46">
            <comment line="63">
                PENDING(jeff) - need to provide a specification for
                 how Mac/OS2/BeOS/etc file systems can modify FileSystemView
                 to handle their particular type of file system.                
            </comment>
            <comment line="71">
                static FileSystemView macFileSystemView = null;                
            </comment>
            <comment line="413">
                Providing default implementations for the remaining methods
                 because most OS file systems will likely be able to use this
                 code. If a given OS can&apos;t, override these methods in its
                 implementation.                
            </comment>
            <javadoc line="46">
                FileSystemView is JFileChooser&apos;s gateway to the
                  file system. Since the JDK1.1 File API doesn&apos;t allow
                  access to such information as root partitions, file type
                  information, or hidden file bits, this class is designed
                  to intuit as much OS-specific file system information as
                  possible.
                  &lt;p&gt;
                  Java Licensees may want to provide a different implementation of
                  FileSystemView to better handle a given operating system.                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="windowsFileSystemView" type="FileSystemView" line="68"/>
            <declaration name="unixFileSystemView" type="FileSystemView" line="69"/>
            <declaration name="genericFileSystemView" type="FileSystemView" line="71"/>
            <declaration name="useSystemExtensionHiding" type="boolean" line="73"/>
            <method name="getFileSystemView" type="FileSystemView" line="76">
                <comment line="92">
                    if(File.separatorChar == &apos;:&apos;) {
                        if(macFileSystemView == null) {
                          macFileSystemView = new MacFileSystemView();
                        }
                        return macFileSystemView;
                    }                    
                </comment>
                <scope line="77">
                    <scope line="78"/>
                </scope>
                <scope line="84">
                    <scope line="85"/>
                </scope>
                <scope line="98"/>
            </method>
            <method name="FileSystemView" type="constructor" line="104">
                <comment line="113">
                    FileSystemView was destroyed                    
                </comment>
                <declaration name="weakReference" type="WeakReference&lt;FileSystemView&gt;" line="105"/>
                <anonymous_class line="107">
                    <method name="propertyChange" type="void" line="108">
                        <params>
                            <param name="evt" type="PropertyChangeEvent"/>
                        </params>
                        <comment line="113">
                            FileSystemView was destroyed                            
                        </comment>
                        <declaration name="fileSystemView" type="FileSystemView" line="109"/>
                        <scope line="111"/>
                        <scope line="114">
                            <scope line="115"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="124">
                Determines if the given file is a root in the navigatable tree(s).
                  Examples: Windows 98 has one root, the Desktop folder. DOS has one root
                  per drive letter, &lt;code&gt;C:\&lt;/code&gt;, &lt;code&gt;D:\&lt;/code&gt;, etc. Unix has one root,
                  the &lt;code&gt;&quot;/&quot;&lt;/code&gt; directory.
                  The default implementation gets information from the &lt;code&gt;ShellFolder&lt;/code&gt; class.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object representing a directory                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;f&lt;/code&gt; is a root in the navigatable tree.                    
                </return>
                <see>
                    #isFileSystemRoot                    
                </see>
            </javadoc>
            <method name="isRoot" type="boolean" line="136">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="137"/>
                <declaration name="roots" type="File[]" line="141"/>
                <scope line="142">
                    <scope line="143"/>
                </scope>
            </method>
            <javadoc line="150">
                Returns true if the file (directory) can be visited.
                  Returns false if the directory cannot be traversed.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the file/directory can be traversed, otherwise &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <see>
                    JFileChooser#isTraversable                    
                </see>
                <see>
                    FileView#isTraversable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isTraversable" type="Boolean" line="160">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="164">
                Name of a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;M:\&quot; directory
                  displays as &quot;CD-ROM (M:)&quot;
                  The default implementation gets information from the ShellFolder class.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    the file name as it would be displayed by a native file chooser                    
                </return>
                <see>
                    JFileChooser#getName                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSystemDisplayName" type="String" line="176">
                <params>
                    <param name="f" type="File"/>
                </params>
                <comment line="195">
                    e.g. &quot;/&quot;                    
                </comment>
                <scope line="177"/>
                <declaration name="name" type="String" line="181"/>
                <scope line="185">
                    <scope line="187"/>
                    <scope line="189"/>
                    <scope line="193"/>
                </scope>
            </method>
            <javadoc line="201">
                Type description for a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;Desktop&quot; folder
                  is desribed as &quot;Desktop&quot;.
                  Override for platforms with native ShellFolder implementations.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    the file type description as it would be displayed by a native file chooser
                      or null if no native information is available.                    
                </return>
                <see>
                    JFileChooser#getTypeDescription                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSystemTypeDescription" type="String" line="214">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="218">
                Icon for a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;M:\&quot; directory
                  displays a CD-ROM icon.
                  The default implementation gets information from the ShellFolder class.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    an icon as it would be displayed by a native file chooser                    
                </return>
                <see>
                    JFileChooser#getIcon                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSystemIcon" type="Icon" line="230">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="231"/>
                <declaration name="sf" type="ShellFolder" line="235"/>
                <scope line="237"/>
                <scope line="239"/>
                <declaration name="img" type="Image" line="243"/>
                <scope line="245"/>
                <scope line="247"/>
            </method>
            <javadoc line="252">
                On Windows, a file can appear in multiple folders, other than its
                  parent directory in the filesystem. Folder could for example be the
                  &quot;Desktop&quot; folder which is not the same as file.getParentFile().                
                <param>
                    folder a &lt;code&gt;File&lt;/code&gt; object repesenting a directory or special folder                    
                </param>
                <param>
                    file a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;folder&lt;/code&gt; is a directory or special folder and contains &lt;code&gt;file&lt;/code&gt;.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isParent" type="boolean" line="262">
                <params>
                    <param name="folder" type="File"/>
                    <param name="file" type="File"/>
                </params>
                <scope line="263"/>
                <scope line="265">
                    <declaration name="parent" type="File" line="266"/>
                    <scope line="267"/>
                    <declaration name="children" type="File[]" line="270"/>
                    <scope line="271">
                        <scope line="272"/>
                    </scope>
                </scope>
                <scope line="277"/>
            </method>
            <javadoc line="282">
                @param parent a &lt;code&gt;File&lt;/code&gt; object repesenting a directory or special folder                
                <param>
                    fileName a name of a file or folder which exists in &lt;code&gt;parent&lt;/code&gt;                    
                </param>
                <return>
                    a File object. This is normally constructed with &lt;code&gt;new
                      File(parent, fileName)&lt;/code&gt; except when parent and child are both
                      special folders, in which case the &lt;code&gt;File&lt;/code&gt; is a wrapper containing
                      a &lt;code&gt;ShellFolder&lt;/code&gt; object.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChild" type="File" line="292">
                <params>
                    <param name="parent" type="File"/>
                    <param name="fileName" type="String"/>
                </params>
                <scope line="293">
                    <declaration name="children" type="File[]" line="294"/>
                    <scope line="295">
                        <scope line="296"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="305">
                Checks if &lt;code&gt;f&lt;/code&gt; represents a real directory or file as opposed to a
                  special folder such as &lt;code&gt;&quot;Desktop&quot;&lt;/code&gt;. Used by UI classes to decide if
                  a folder is selectable when doing directory choosing.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;f&lt;/code&gt; is a real file or directory.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFileSystem" type="boolean" line="314">
                <params>
                    <param name="f" type="File"/>
                </params>
                <comment line="318">
                    Shortcuts to directories are treated as not being file system objects,
                     so that they are never returned by JFileChooser.                    
                </comment>
                <scope line="315">
                    <declaration name="sf" type="ShellFolder" line="316"/>
                </scope>
                <scope line="320"/>
            </method>
            <method name="createNewFolder" type="File" line="325"/>
            <javadoc line="325">
                Creates a new folder with a default folder name.                
            </javadoc>
            <javadoc line="330">
                Returns whether a file is hidden or not.                
            </javadoc>
            <method name="isHiddenFile" type="boolean" line="333">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="338">
                Is dir the root of a tree in the file system, such as a drive
                  or partition. Example: Returns true for &quot;C:\&quot; on Windows 98.                
                <param>
                    dir a &lt;code&gt;File&lt;/code&gt; object representing a directory                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;f&lt;/code&gt; is a root of a filesystem                    
                </return>
                <see>
                    #isRoot                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFileSystemRoot" type="boolean" line="347">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="351">
                Used by UI classes to decide whether to display a special icon
                  for drives or partitions, e.g. a &quot;hard disk&quot; icon.
                  The default implementation has no way of knowing, so always returns false.                
                <param>
                    dir a directory                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; always                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isDrive" type="boolean" line="361">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="365">
                Used by UI classes to decide whether to display a special icon
                  for a floppy disk. Implies isDrive(dir).
                  The default implementation has no way of knowing, so always returns false.                
                <param>
                    dir a directory                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; always                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFloppyDrive" type="boolean" line="375">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="379">
                Used by UI classes to decide whether to display a special icon
                  for a computer node, e.g. &quot;My Computer&quot; or a network server.
                  The default implementation has no way of knowing, so always returns false.                
                <param>
                    dir a directory                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; always                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isComputerNode" type="boolean" line="389">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="394">
                Returns all root partitions on this system. For example, on
                  Windows, this would be the &quot;Desktop&quot; folder, while on DOS this
                  would be the A: through Z: drives.                
            </javadoc>
            <method name="getRoots" type="File[]" line="399">
                <comment line="401">
                    Don&apos;t cache this array, because filesystem might change                    
                </comment>
                <declaration name="roots" type="File[]" line="401"/>
                <scope line="403">
                    <scope line="404"/>
                </scope>
            </method>
            <method name="getHomeDirectory" type="File" line="417"/>
            <javadoc line="421">
                Return the user&apos;s default starting directory for the file chooser.                
                <return>
                    a &lt;code&gt;File&lt;/code&gt; object representing the default
                      starting folder                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDefaultDirectory" type="File" line="428">
                <declaration name="f" type="File" line="429"/>
                <scope line="430"/>
            </method>
            <javadoc line="436">
                Returns a File object constructed in dir from the given filename.                
            </javadoc>
            <method name="createFileObject" type="File" line="439">
                <params>
                    <param name="dir" type="File"/>
                    <param name="filename" type="String"/>
                </params>
                <scope line="440"/>
                <scope line="442"/>
            </method>
            <javadoc line="447">
                Returns a File object constructed from the given path string.                
            </javadoc>
            <method name="createFileObject" type="File" line="450">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="f" type="File" line="451"/>
                <scope line="452"/>
            </method>
            <javadoc line="459">
                Gets the list of shown (i.e. not hidden) files.                
            </javadoc>
            <method name="getFiles" type="File[]" line="462">
                <params>
                    <param name="dir" type="File"/>
                    <param name="useFileHiding" type="boolean"/>
                </params>
                <comment line="466">
                    add all files in dir                    
                </comment>
                <comment line="493">
                    Not a valid file (wouldn&apos;t show in native file chooser)
                     Example: C:\pagefile.sys                    
                </comment>
                <comment line="497">
                    Not a valid file (wouldn&apos;t show in native file chooser)
                     Example C:\Winnt\Profiles\joe\history\History.IE5                    
                </comment>
                <declaration name="files" type="List&lt;File&gt;" line="463"/>
                <scope line="466">
                    <scope line="467"/>
                    <scope line="469"/>
                </scope>
                <declaration name="names" type="File[]" line="474"/>
                <scope line="476"/>
                <scope line="480">
                    <scope line="481"/>
                    <scope line="485">
                        <scope line="486"/>
                        <scope line="489"/>
                        <scope line="491"/>
                        <scope line="495"/>
                    </scope>
                    <scope line="501"/>
                </scope>
            </method>
            <javadoc line="511">
                Returns the parent directory of &lt;code&gt;dir&lt;/code&gt;.                
                <param>
                    dir the &lt;code&gt;File&lt;/code&gt; being queried                    
                </param>
                <return>
                    the parent directory of &lt;code&gt;dir&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;dir&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getParentDirectory" type="File" line="517">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <comment line="540">
                    This could be a node under &quot;Network Neighborhood&quot;.                    
                </comment>
                <comment line="543">
                    We&apos;re mostly after the exists() override for windows below.                    
                </comment>
                <scope line="518"/>
                <declaration name="sf" type="ShellFolder" line="522"/>
                <scope line="524"/>
                <scope line="526"/>
                <declaration name="psf" type="File" line="530"/>
                <scope line="532"/>
                <scope line="536">
                    <declaration name="f" type="File" line="537"/>
                    <scope line="538">
                        <declaration name="ppsf" type="File" line="540"/>
                        <scope line="541"/>
                    </scope>
                </scope>
                <scope line="547"/>
            </method>
            <javadoc line="552">
                Throws {@code FileNotFoundException} if file not found or current thread was interrupted                
            </javadoc>
            <method name="getShellFolder" type="ShellFolder" line="555">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="556"/>
                <scope line="560"/>
                <scope line="562"/>
            </method>
            <javadoc line="569">
                Creates a new &lt;code&gt;File&lt;/code&gt; object for &lt;code&gt;f&lt;/code&gt; with correct
                  behavior for a file system root directory.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object representing a file system root
                      directory, for example &quot;/&quot; on Unix or &quot;C:\&quot; on Windows.                    
                </param>
                <return>
                    a new &lt;code&gt;File&lt;/code&gt; object                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createFileSystemRoot" type="File" line="578">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <class name="FileSystemRoot" line="585">
                <extends class="File"/>
                <method name="FileSystemRoot" type="constructor" line="586">
                    <params>
                        <param name="f" type="File"/>
                    </params>
                </method>
                <method name="FileSystemRoot" type="constructor" line="590">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="isDirectory" type="boolean" line="594"/>
                <method name="getName" type="String" line="598"/>
            </class>
        </class>
        <class name="UnixFileSystemView" line="604">
            <extends class="FileSystemView"/>
            <comment line="63">
                PENDING(jeff) - need to provide a specification for
                 how Mac/OS2/BeOS/etc file systems can modify FileSystemView
                 to handle their particular type of file system.                
            </comment>
            <comment line="71">
                static FileSystemView macFileSystemView = null;                
            </comment>
            <comment line="413">
                Providing default implementations for the remaining methods
                 because most OS file systems will likely be able to use this
                 code. If a given OS can&apos;t, override these methods in its
                 implementation.                
            </comment>
            <javadoc line="604">
                FileSystemView that handles some specific unix-isms.                
            </javadoc>
            <declaration name="newFolderString" type="String" line="609"/>
            <declaration name="newFolderNextString" type="String" line="611"/>
            <javadoc line="614">
                Creates a new folder with a default folder name.                
            </javadoc>
            <method name="createNewFolder" type="File" line="617">
                <params>
                    <param name="containingDir" type="File"/>
                </params>
                <comment line="623">
                    Unix - using OpenWindows&apos; default folder name. Can&apos;t find one for Motif/CDE.                    
                </comment>
                <scope line="618"/>
                <declaration name="newFolder" type="File" line="621"/>
                <declaration name="i" type="int" line="624"/>
                <scope line="625"/>
                <scope line="631"/>
                <scope line="633"/>
            </method>
            <method name="isFileSystemRoot" type="boolean" line="640">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isDrive" type="boolean" line="644">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isFloppyDrive" type="boolean" line="648">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <comment line="650">
                    Could be looking at the path for Solaris, but wouldn&apos;t be reliable.
                     For example:
                     return (dir != null &amp;&amp; dir.getAbsolutePath().toLowerCase().startsWith(&quot;/floppy&quot;));                    
                </comment>
            </method>
            <method name="isComputerNode" type="boolean" line="655">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <scope line="656">
                    <declaration name="parent" type="String" line="657"/>
                    <scope line="658"/>
                </scope>
            </method>
        </class>
        <class name="WindowsFileSystemView" line="667">
            <extends class="FileSystemView"/>
            <comment line="63">
                PENDING(jeff) - need to provide a specification for
                 how Mac/OS2/BeOS/etc file systems can modify FileSystemView
                 to handle their particular type of file system.                
            </comment>
            <comment line="71">
                static FileSystemView macFileSystemView = null;                
            </comment>
            <comment line="413">
                Providing default implementations for the remaining methods
                 because most OS file systems will likely be able to use this
                 code. If a given OS can&apos;t, override these methods in its
                 implementation.                
            </comment>
            <javadoc line="667">
                FileSystemView that handles some specific windows concepts.                
            </javadoc>
            <declaration name="newFolderString" type="String" line="672"/>
            <declaration name="newFolderNextString" type="String" line="674"/>
            <method name="isTraversable" type="Boolean" line="677">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <method name="getChild" type="File" line="681">
                <params>
                    <param name="parent" type="File"/>
                    <param name="fileName" type="String"/>
                </params>
                <comment line="687">
                    Path is relative to the root of parent&apos;s drive                    
                </comment>
                <scope line="684">
                    <declaration name="path" type="String" line="687"/>
                    <scope line="690"/>
                </scope>
            </method>
            <javadoc line="698">
                Type description for a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;Desktop&quot; folder
                  is desribed as &quot;Desktop&quot;.
                  The Windows implementation gets information from the ShellFolder class.                
            </javadoc>
            <method name="getSystemTypeDescription" type="String" line="705">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="706"/>
                <scope line="710"/>
                <scope line="712"/>
            </method>
            <javadoc line="717">
                @return the Desktop folder.                
            </javadoc>
            <method name="getHomeDirectory" type="File" line="720"/>
            <javadoc line="724">
                Creates a new folder with a default folder name.                
            </javadoc>
            <method name="createNewFolder" type="File" line="727">
                <params>
                    <param name="containingDir" type="File"/>
                </params>
                <comment line="732">
                    Using NT&apos;s default folder name                    
                </comment>
                <scope line="728"/>
                <declaration name="newFolder" type="File" line="732"/>
                <declaration name="i" type="int" line="733"/>
                <scope line="734"/>
                <scope line="740"/>
                <scope line="742"/>
            </method>
            <method name="isDrive" type="boolean" line="749">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isFloppyDrive" type="boolean" line="753">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <anonymous_class line="754">
                    <method name="run" type="String" line="755"/>
                </anonymous_class>
                <declaration name="path" type="String" line="754"/>
            </method>
            <javadoc line="763">
                Returns a File object constructed from the given path string.                
            </javadoc>
            <method name="createFileObject" type="File" line="766">
                <params>
                    <param name="path" type="String"/>
                </params>
                <comment line="768">
                    Check for missing backslash after drive letter such as &quot;C:&quot; or &quot;C:filename&quot;                    
                </comment>
                <scope line="768">
                    <scope line="769"/>
                    <scope line="771"/>
                </scope>
            </method>
            <method name="createFileSystemRoot" type="File" line="778">
                <params>
                    <param name="f" type="File"/>
                </params>
                <comment line="780">
                    Problem: Removable drives on Windows return false on f.exists()
                     Workaround: Override exists() to always return true.                    
                </comment>
                <anonymous_class line="781">
                    <method name="exists" type="boolean" line="782"/>
                </anonymous_class>
            </method>
        </class>
        <class name="GenericFileSystemView" line="790">
            <extends class="FileSystemView"/>
            <comment line="63">
                PENDING(jeff) - need to provide a specification for
                 how Mac/OS2/BeOS/etc file systems can modify FileSystemView
                 to handle their particular type of file system.                
            </comment>
            <comment line="71">
                static FileSystemView macFileSystemView = null;                
            </comment>
            <comment line="413">
                Providing default implementations for the remaining methods
                 because most OS file systems will likely be able to use this
                 code. If a given OS can&apos;t, override these methods in its
                 implementation.                
            </comment>
            <javadoc line="790">
                Fallthrough FileSystemView in case we can&apos;t determine the OS.                
            </javadoc>
            <declaration name="newFolderString" type="String" line="795"/>
            <javadoc line="798">
                Creates a new folder with a default folder name.                
            </javadoc>
            <method name="createNewFolder" type="File" line="801">
                <params>
                    <param name="containingDir" type="File"/>
                </params>
                <comment line="806">
                    Using NT&apos;s default folder name                    
                </comment>
                <scope line="802"/>
                <declaration name="newFolder" type="File" line="806"/>
                <scope line="808"/>
                <scope line="810"/>
            </method>
        </class>
    </source>