<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.filechooser">
        <import package="javax.swing"/>
        <import package="java.awt.Image"/>
        <import package="java.io.File"/>
        <import package="java.io.FileNotFoundException"/>
        <import package="java.io.IOException"/>
        <import package="java.text.MessageFormat"/>
        <import package="java.util.List"/>
        <import package="java.util.ArrayList"/>
        <import package="java.lang.ref.WeakReference"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.awt.shell"/>
        <class name="FileSystemView" line="16">
            <javadoc line="16">
                FileSystemView is JFileChooser&apos;s gateway to the
                  file system. Since the JDK1.1 File API doesn&apos;t allow
                  access to such information as root partitions, file type
                  information, or hidden file bits, this class is designed
                  to intuit as much OS-specific file system information as
                  possible.
                  &lt;p&gt;
                  Java Licensees may want to provide a different implementation of
                  FileSystemView to better handle a given operating system.                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="windowsFileSystemView" type="FileSystemView" line="29"/>
            <declaration name="unixFileSystemView" type="FileSystemView" line="30"/>
            <declaration name="genericFileSystemView" type="FileSystemView" line="31"/>
            <declaration name="useSystemExtensionHiding" type="boolean" line="32"/>
            <method name="getFileSystemView" type="FileSystemView" line="33">
                <scope line="34">
                    <scope line="35"/>
                </scope>
                <scope line="40">
                    <scope line="41"/>
                </scope>
                <scope line="46"/>
            </method>
            <method name="FileSystemView" type="constructor" line="51">
                <declaration name="weakReference" type="WeakReference&amp;lt;FileSystemView&amp;gt;" line="52"/>
                <anonymous_class line="53">
                    <method name="propertyChange" type="void" line="54">
                        <params>
                            <param name="evt" type="PropertyChangeEvent"/>
                        </params>
                        <declaration name="fileSystemView" type="FileSystemView" line="55"/>
                        <scope line="56"/>
                        <scope line="59">
                            <scope line="60"/>
                        </scope>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="68">
                Determines if the given file is a root in the navigatable tree(s).
                  Examples: Windows 98 has one root, the Desktop folder. DOS has one root
                  per drive letter, &lt;code&gt;C:\&lt;/code&gt;, &lt;code&gt;D:\&lt;/code&gt;, etc. Unix has one root,
                  the &lt;code&gt;&quot;/&quot;&lt;/code&gt; directory.
                  The default implementation gets information from the &lt;code&gt;ShellFolder&lt;/code&gt; class.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object representing a directory                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;f&lt;/code&gt; is a root in the navigatable tree.                    
                </return>
                <see>
                    #isFileSystemRoot                    
                </see>
            </javadoc>
            <method name="isRoot" type="boolean" line="78">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="79"/>
                <declaration name="roots" type="File[]" line="82"/>
                <scope line="83">
                    <scope line="84"/>
                </scope>
            </method>
            <javadoc line="90">
                Returns true if the file (directory) can be visited.
                  Returns false if the directory cannot be traversed.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the file/directory can be traversed, otherwise &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <see>
                    JFileChooser#isTraversable                    
                </see>
                <see>
                    FileView#isTraversable                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isTraversable" type="Boolean" line="99">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="102">
                Name of a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;M:\&quot; directory
                  displays as &quot;CD-ROM (M:)&quot;
                  The default implementation gets information from the ShellFolder class.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    the file name as it would be displayed by a native file chooser                    
                </return>
                <see>
                    JFileChooser#getName                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSystemDisplayName" type="String" line="112">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="113"/>
                <declaration name="name" type="String" line="116"/>
                <scope line="117">
                    <scope line="118"/>
                    <scope line="121"/>
                    <scope line="124"/>
                </scope>
            </method>
            <javadoc line="130">
                Type description for a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;Desktop&quot; folder
                  is desribed as &quot;Desktop&quot;.
                  Override for platforms with native ShellFolder implementations.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    the file type description as it would be displayed by a native file chooser
                      or null if no native information is available.                    
                </return>
                <see>
                    JFileChooser#getTypeDescription                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSystemTypeDescription" type="String" line="141">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="144">
                Icon for a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;M:\&quot; directory
                  displays a CD-ROM icon.
                  The default implementation gets information from the ShellFolder class.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    an icon as it would be displayed by a native file chooser                    
                </return>
                <see>
                    JFileChooser#getIcon                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getSystemIcon" type="Icon" line="154">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="155"/>
                <declaration name="sf" type="ShellFolder" line="158"/>
                <scope line="159"/>
                <scope line="162"/>
                <declaration name="img" type="Image" line="165"/>
                <scope line="166"/>
                <scope line="169"/>
            </method>
            <javadoc line="173">
                On Windows, a file can appear in multiple folders, other than its
                  parent directory in the filesystem. Folder could for example be the
                  &quot;Desktop&quot; folder which is not the same as file.getParentFile().                
                <param>
                    folder a &lt;code&gt;File&lt;/code&gt; object repesenting a directory or special folder                    
                </param>
                <param>
                    file a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;folder&lt;/code&gt; is a directory or special folder and contains &lt;code&gt;file&lt;/code&gt;.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isParent" type="boolean" line="182">
                <params>
                    <param name="folder" type="File"/>
                    <param name="file" type="File"/>
                </params>
                <scope line="183"/>
                <scope line="186">
                    <declaration name="parent" type="File" line="187"/>
                    <scope line="188"/>
                    <declaration name="children" type="File[]" line="191"/>
                    <scope line="192">
                        <scope line="193"/>
                    </scope>
                </scope>
                <scope line="199"/>
            </method>
            <javadoc line="203">
                @param parent a &lt;code&gt;File&lt;/code&gt; object repesenting a directory or special folder                
                <param>
                    fileName a name of a file or folder which exists in &lt;code&gt;parent&lt;/code&gt;                    
                </param>
                <return>
                    a File object. This is normally constructed with &lt;code&gt;new
                      File(parent, fileName)&lt;/code&gt; except when parent and child are both
                      special folders, in which case the &lt;code&gt;File&lt;/code&gt; is a wrapper containing
                      a &lt;code&gt;ShellFolder&lt;/code&gt; object.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChild" type="File" line="212">
                <params>
                    <param name="parent" type="File"/>
                    <param name="fileName" type="String"/>
                </params>
                <scope line="213">
                    <declaration name="children" type="File[]" line="214"/>
                    <scope line="215">
                        <scope line="216"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="223">
                Checks if &lt;code&gt;f&lt;/code&gt; represents a real directory or file as opposed to a
                  special folder such as &lt;code&gt;&quot;Desktop&quot;&lt;/code&gt;. Used by UI classes to decide if
                  a folder is selectable when doing directory choosing.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;f&lt;/code&gt; is a real file or directory.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFileSystem" type="boolean" line="231">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="232">
                    <declaration name="sf" type="ShellFolder" line="233"/>
                </scope>
                <scope line="236"/>
            </method>
            <method name="createNewFolder" type="File" line="240"/>
            <javadoc line="240">
                Creates a new folder with a default folder name.                
            </javadoc>
            <javadoc line="244">
                Returns whether a file is hidden or not.                
            </javadoc>
            <method name="isHiddenFile" type="boolean" line="247">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="250">
                Is dir the root of a tree in the file system, such as a drive
                  or partition. Example: Returns true for &quot;C:\&quot; on Windows 98.                
                <param>
                    dir a &lt;code&gt;File&lt;/code&gt; object representing a directory                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;f&lt;/code&gt; is a root of a filesystem                    
                </return>
                <see>
                    #isRoot                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFileSystemRoot" type="boolean" line="258">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="261">
                Used by UI classes to decide whether to display a special icon
                  for drives or partitions, e.g. a &quot;hard disk&quot; icon.
                  The default implementation has no way of knowing, so always returns false.                
                <param>
                    dir a directory                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; always                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isDrive" type="boolean" line="269">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="272">
                Used by UI classes to decide whether to display a special icon
                  for a floppy disk. Implies isDrive(dir).
                  The default implementation has no way of knowing, so always returns false.                
                <param>
                    dir a directory                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; always                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isFloppyDrive" type="boolean" line="280">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="283">
                Used by UI classes to decide whether to display a special icon
                  for a computer node, e.g. &quot;My Computer&quot; or a network server.
                  The default implementation has no way of knowing, so always returns false.                
                <param>
                    dir a directory                    
                </param>
                <return>
                    &lt;code&gt;false&lt;/code&gt; always                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isComputerNode" type="boolean" line="291">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <javadoc line="294">
                Returns all root partitions on this system. For example, on
                  Windows, this would be the &quot;Desktop&quot; folder, while on DOS this
                  would be the A: through Z: drives.                
            </javadoc>
            <method name="getRoots" type="File[]" line="299">
                <declaration name="roots" type="File[]" line="300"/>
                <scope line="301">
                    <scope line="302"/>
                </scope>
            </method>
            <method name="getHomeDirectory" type="File" line="308"/>
            <javadoc line="311">
                Return the user&apos;s default starting directory for the file chooser.                
                <return>
                    a &lt;code&gt;File&lt;/code&gt; object representing the default
                      starting folder                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDefaultDirectory" type="File" line="317">
                <declaration name="f" type="File" line="318"/>
                <scope line="319"/>
            </method>
            <javadoc line="324">
                Returns a File object constructed in dir from the given filename.                
            </javadoc>
            <method name="createFileObject" type="File" line="327">
                <params>
                    <param name="dir" type="File"/>
                    <param name="filename" type="String"/>
                </params>
                <scope line="328"/>
                <scope line="331"/>
            </method>
            <javadoc line="335">
                Returns a File object constructed from the given path string.                
            </javadoc>
            <method name="createFileObject" type="File" line="338">
                <params>
                    <param name="path" type="String"/>
                </params>
                <declaration name="f" type="File" line="339"/>
                <scope line="340"/>
            </method>
            <javadoc line="345">
                Gets the list of shown (i.e. not hidden) files.                
            </javadoc>
            <method name="getFiles" type="File[]" line="348">
                <params>
                    <param name="dir" type="File"/>
                    <param name="useFileHiding" type="boolean"/>
                </params>
                <declaration name="files" type="List&amp;lt;File&amp;gt;" line="349"/>
                <scope line="350">
                    <scope line="351"/>
                    <scope line="354"/>
                </scope>
                <declaration name="names" type="File[]" line="358"/>
                <scope line="359"/>
                <scope line="362">
                    <scope line="363"/>
                    <scope line="366">
                        <scope line="367"/>
                        <scope line="370"/>
                        <scope line="373"/>
                        <scope line="376"/>
                    </scope>
                    <scope line="380"/>
                </scope>
            </method>
            <javadoc line="386">
                Returns the parent directory of &lt;code&gt;dir&lt;/code&gt;.                
                <param>
                    dir the &lt;code&gt;File&lt;/code&gt; being queried                    
                </param>
                <return>
                    the parent directory of &lt;code&gt;dir&lt;/code&gt;, or
                      &lt;code&gt;null&lt;/code&gt; if &lt;code&gt;dir&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getParentDirectory" type="File" line="392">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <scope line="393"/>
                <declaration name="sf" type="ShellFolder" line="396"/>
                <scope line="397"/>
                <scope line="400"/>
                <declaration name="psf" type="File" line="403"/>
                <scope line="404"/>
                <scope line="407">
                    <declaration name="f" type="File" line="408"/>
                    <scope line="409">
                        <declaration name="ppsf" type="File" line="410"/>
                        <scope line="411"/>
                    </scope>
                </scope>
                <scope line="417"/>
            </method>
            <javadoc line="421">
                Throws {@code FileNotFoundException} if file not found or current thread was interrupted                
            </javadoc>
            <method name="getShellFolder" type="ShellFolder" line="424">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="425"/>
                <scope line="428"/>
                <scope line="431"/>
            </method>
            <javadoc line="437">
                Creates a new &lt;code&gt;File&lt;/code&gt; object for &lt;code&gt;f&lt;/code&gt; with correct
                  behavior for a file system root directory.                
                <param>
                    f a &lt;code&gt;File&lt;/code&gt; object representing a file system root
                      directory, for example &quot;/&quot; on Unix or &quot;C:\&quot; on Windows.                    
                </param>
                <return>
                    a new &lt;code&gt;File&lt;/code&gt; object                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createFileSystemRoot" type="File" line="445">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <class name="FileSystemRoot" line="448">
                <extends class="File"/>
                <method name="FileSystemRoot" type="constructor" line="449">
                    <params>
                        <param name="f" type="File"/>
                    </params>
                </method>
                <method name="FileSystemRoot" type="constructor" line="452">
                    <params>
                        <param name="s" type="String"/>
                    </params>
                </method>
                <method name="isDirectory" type="boolean" line="455"/>
                <method name="getName" type="String" line="458"/>
            </class>
        </class>
        <class name="UnixFileSystemView" line="463">
            <extends class="FileSystemView"/>
            <javadoc line="463">
                FileSystemView that handles some specific unix-isms.                
            </javadoc>
            <declaration name="newFolderString" type="String" line="467"/>
            <declaration name="newFolderNextString" type="String" line="468"/>
            <javadoc line="469">
                Creates a new folder with a default folder name.                
            </javadoc>
            <method name="createNewFolder" type="File" line="472">
                <params>
                    <param name="containingDir" type="File"/>
                </params>
                <scope line="473"/>
                <declaration name="newFolder" type="File" line="476"/>
                <declaration name="i" type="int" line="478"/>
                <scope line="479"/>
                <scope line="483"/>
                <scope line="486"/>
            </method>
            <method name="isFileSystemRoot" type="boolean" line="491">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isDrive" type="boolean" line="494">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isFloppyDrive" type="boolean" line="497">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isComputerNode" type="boolean" line="500">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <scope line="501">
                    <declaration name="parent" type="String" line="502"/>
                    <scope line="503"/>
                </scope>
            </method>
        </class>
        <class name="WindowsFileSystemView" line="510">
            <extends class="FileSystemView"/>
            <javadoc line="510">
                FileSystemView that handles some specific windows concepts.                
            </javadoc>
            <declaration name="newFolderString" type="String" line="514"/>
            <declaration name="newFolderNextString" type="String" line="515"/>
            <method name="isTraversable" type="Boolean" line="516">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <method name="getChild" type="File" line="519">
                <params>
                    <param name="parent" type="File"/>
                    <param name="fileName" type="String"/>
                </params>
                <scope line="520">
                    <declaration name="path" type="String" line="521"/>
                    <scope line="522"/>
                </scope>
            </method>
            <javadoc line="528">
                Type description for a file, directory, or folder as it would be displayed in
                  a system file browser. Example from Windows: the &quot;Desktop&quot; folder
                  is desribed as &quot;Desktop&quot;.
                  The Windows implementation gets information from the ShellFolder class.                
            </javadoc>
            <method name="getSystemTypeDescription" type="String" line="534">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="535"/>
                <scope line="538"/>
                <scope line="541"/>
            </method>
            <javadoc line="545">
                @return the Desktop folder.                
            </javadoc>
            <method name="getHomeDirectory" type="File" line="548"/>
            <javadoc line="551">
                Creates a new folder with a default folder name.                
            </javadoc>
            <method name="createNewFolder" type="File" line="554">
                <params>
                    <param name="containingDir" type="File"/>
                </params>
                <scope line="555"/>
                <declaration name="newFolder" type="File" line="558"/>
                <declaration name="i" type="int" line="559"/>
                <scope line="560"/>
                <scope line="564"/>
                <scope line="567"/>
            </method>
            <method name="isDrive" type="boolean" line="572">
                <params>
                    <param name="dir" type="File"/>
                </params>
            </method>
            <method name="isFloppyDrive" type="boolean" line="575">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <anonymous_class line="576">
                    <method name="run" type="String" line="577"/>
                </anonymous_class>
                <declaration name="path" type="String" line="576"/>
            </method>
            <javadoc line="584">
                Returns a File object constructed from the given path string.                
            </javadoc>
            <method name="createFileObject" type="File" line="587">
                <params>
                    <param name="path" type="String"/>
                </params>
                <scope line="588">
                    <scope line="589"/>
                    <scope line="592"/>
                </scope>
            </method>
            <method name="createFileSystemRoot" type="File" line="598">
                <params>
                    <param name="f" type="File"/>
                </params>
                <anonymous_class line="599">
                    <method name="exists" type="boolean" line="600"/>
                </anonymous_class>
            </method>
        </class>
        <class name="GenericFileSystemView" line="607">
            <extends class="FileSystemView"/>
            <javadoc line="607">
                Fallthrough FileSystemView in case we can&apos;t determine the OS.                
            </javadoc>
            <declaration name="newFolderString" type="String" line="611"/>
            <javadoc line="612">
                Creates a new folder with a default folder name.                
            </javadoc>
            <method name="createNewFolder" type="File" line="615">
                <params>
                    <param name="containingDir" type="File"/>
                </params>
                <scope line="616"/>
                <declaration name="newFolder" type="File" line="619"/>
                <scope line="620"/>
                <scope line="623"/>
            </method>
        </class>
    </source>