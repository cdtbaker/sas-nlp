<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.filechooser">
        <import package="java.io.File"/>
        <import package="java.util.Locale"/>
        <class name="FileNameExtensionFilter" line="4">
            <extends class="FileFilter"/>
            <javadoc line="4">
                An implementation of {@code FileFilter} that filters using a
                  specified set of extensions. The extension for a file is the
                  portion of the file name after the last &quot;.&quot;. Files whose name does
                  not contain a &quot;.&quot; have no file name extension. File name extension
                  comparisons are case insensitive.
                  &lt;p&gt;
                  The following example creates a{@code FileNameExtensionFilter} that will show {@code jpg} files:
                  &lt;pre&gt;
                  FileFilter filter = new FileNameExtensionFilter(&quot;JPEG file&quot;, &quot;jpg&quot;, &quot;jpeg&quot;);
                  JFileChooser fileChooser = ...;
                  fileChooser.addChoosableFileFilter(filter);
                  &lt;/pre&gt;                
                <see>
                    FileFilter                    
                </see>
                <see>
                    javax.swing.JFileChooser#setFileFilter                    
                </see>
                <see>
                    javax.swing.JFileChooser#addChoosableFileFilter                    
                </see>
                <see>
                    javax.swing.JFileChooser#getFileFilter                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="description" type="String" line="24"/>
            <declaration name="extensions" type="String[]" line="25"/>
            <declaration name="lowerCaseExtensions" type="String[]" line="26"/>
            <javadoc line="27">
                Creates a {@code FileNameExtensionFilter} with the specified
                  description and file name extensions. The returned {@codeFileNameExtensionFilter} will accept all directories and any
                  file with a file name extension contained in {@code extensions}.                
                <param>
                    description textual description for the filter, may be{@code null}                    
                </param>
                <param>
                    extensions the accepted file name extensions                    
                </param>
                <throws>
                    IllegalArgumentException if extensions is {@code null}, empty,
                      contains {@code null}, or contains an empty string                    
                </throws>
                <see>
                    #accept                    
                </see>
            </javadoc>
            <method name="FileNameExtensionFilter" type="constructor" line="37">
                <params>
                    <param name="description" type="String"/>
                    <param name="extensions" type="String"/>
                </params>
                <scope line="38"/>
                <scope line="44">
                    <scope line="45"/>
                </scope>
            </method>
            <javadoc line="52">
                Tests the specified file, returning true if the file is
                  accepted, false otherwise. True is returned if the extension
                  matches one of the file name extensions of this {@codeFileFilter}, or the file is a directory.                
                <param>
                    f the {@code File} to test                    
                </param>
                <return>
                    true if the file is to be accepted, false otherwise                    
                </return>
            </javadoc>
            <method name="accept" type="boolean" line="59">
                <params>
                    <param name="f" type="File"/>
                </params>
                <scope line="60">
                    <scope line="61"/>
                    <declaration name="fileName" type="String" line="64"/>
                    <declaration name="i" type="int" line="65"/>
                    <scope line="66">
                        <declaration name="desiredExtension" type="String" line="67"/>
                        <scope line="68">
                            <scope line="69"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="77">
                The description of this filter. For example: &quot;JPG and GIF Images.&quot;                
                <return>
                    the description of this filter                    
                </return>
            </javadoc>
            <method name="getDescription" type="String" line="81"/>
            <javadoc line="84">
                Returns the set of file name extensions files are tested against.                
                <return>
                    the set of file name extensions files are tested against                    
                </return>
            </javadoc>
            <method name="getExtensions" type="String[]" line="88">
                <declaration name="result" type="String[]" line="89"/>
            </method>
            <javadoc line="93">
                Returns a string representation of the {@code FileNameExtensionFilter}.
                  This method is intended to be used for debugging purposes,
                  and the content and format of the returned string may vary
                  between implementations.                
                <return>
                    a string representation of this {@code FileNameExtensionFilter}                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="100"/>
        </class>
    </source>