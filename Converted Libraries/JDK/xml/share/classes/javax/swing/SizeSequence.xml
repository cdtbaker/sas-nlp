<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <class name="SizeSequence" line="28">
            <comment line="117">
                Each method is implemented by taking the minimum and
                   maximum of the range of integers that need to be operated
                   upon. All the algorithms work by dividing this range
                   into two smaller ranges and recursing. The recursion
                   is terminated when the upper and lower bounds are equal.                
            </comment>
            <javadoc line="28">
                A &lt;code&gt;SizeSequence&lt;/code&gt; object
                  efficiently maintains an ordered list
                  of sizes and corresponding positions.
                  One situation for which &lt;code&gt;SizeSequence&lt;/code&gt;
                  might be appropriate is in a component
                  that displays multiple rows of unequal size.
                  In this case, a single &lt;code&gt;SizeSequence&lt;/code&gt;
                  object could be used to track the heights
                  and Y positions of all rows.
                  &lt;p&gt;
                  Another example would be a multi-column component,
                  such as a &lt;code&gt;JTable&lt;/code&gt;,
                  in which the column sizes are not all equal.
                  The &lt;code&gt;JTable&lt;/code&gt; might use a single
                  &lt;code&gt;SizeSequence&lt;/code&gt; object
                  to store the widths and X positions of all the columns.
                  The &lt;code&gt;JTable&lt;/code&gt; could then use the
                  &lt;code&gt;SizeSequence&lt;/code&gt; object
                  to find the column corresponding to a certain position.
                  The &lt;code&gt;JTable&lt;/code&gt; could update the
                  &lt;code&gt;SizeSequence&lt;/code&gt; object
                  whenever one or more column sizes changed.
                  &lt;p&gt;
                  The following figure shows the relationship between size and position data
                  for a multi-column component.
                  &lt;p&gt;
                  &lt;center&gt;
                  &lt;img src=&quot;doc-files/SizeSequence-1.gif&quot; width=384 height = 100
                  alt=&quot;The first item begins at position 0, the second at the position equal
                  to the size of the previous item, and so on.&quot;&gt;
                  &lt;/center&gt;
                  &lt;p&gt;
                  In the figure, the first index (0) corresponds to the first column,
                  the second index (1) to the second column, and so on.
                  The first column&apos;s position starts at 0,
                  and the column occupies &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; pixels,
                  where &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; is the value returned by
                  &lt;code&gt;getSize(0)&lt;/code&gt;.
                  Thus, the first column ends at &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; - 1.
                  The second column then begins at
                  the position &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt;
                  and occupies &lt;em&gt;size&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; (&lt;code&gt;getSize(1)&lt;/code&gt;) pixels.
                  &lt;p&gt;
                  Note that a &lt;code&gt;SizeSequence&lt;/code&gt; object simply represents intervals
                  along an axis.
                  In our examples, the intervals represent height or width in pixels.
                  However, any other unit of measure (for example, time in days)
                  could be just as valid.
                  &lt;p&gt;
                  &lt;h4&gt;Implementation Notes&lt;/h4&gt;
                  Normally when storing the size and position of entries,
                  one would choose between
                  storing the sizes or storing their positions
                  instead. The two common operations that are needed during
                  rendering are: &lt;code&gt;getIndex(position)&lt;/code&gt;
                  and &lt;code&gt;setSize(index, size)&lt;/code&gt;.
                  Whichever choice of internal format is made one of these
                  operations is costly when the number of entries becomes large.
                  If sizes are stored, finding the index of the entry
                  that encloses a particular position is linear in the
                  number of entries. If positions are stored instead, setting
                  the size of an entry at a particular index requires updating
                  the positions of the affected entries, which is also a linear
                  calculation.
                  &lt;p&gt;
                  Like the above techniques this class holds an array of N integers
                  internally but uses a hybrid encoding, which is halfway
                  between the size-based and positional-based approaches.
                  The result is a data structure that takes the same space to store
                  the information but can perform most operations in Log(N) time
                  instead of O(N), where N is the number of entries in the list.
                  &lt;p&gt;
                  Two operations that remain O(N) in the number of entries are
                  the &lt;code&gt;insertEntries&lt;/code&gt;
                  and &lt;code&gt;removeEntries&lt;/code&gt; methods, both
                  of which are implemented by converting the internal array to
                  a set of integer sizes, copying it into the new array, and then
                  reforming the hybrid representation in place.                
                <author>
                    Philip Milne                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="emptyArray" type="int[]" line="126"/>
            <declaration name="a" type="int" line="127"/>
            <javadoc line="129">
                Creates a new &lt;code&gt;SizeSequence&lt;/code&gt; object
                  that contains no entries.  To add entries, you
                  can use &lt;code&gt;insertEntries&lt;/code&gt; or &lt;code&gt;setSizes&lt;/code&gt;.                
                <see>
                    #insertEntries                    
                </see>
                <see>
                    #setSizes(int[])                    
                </see>
            </javadoc>
            <method name="SizeSequence" type="constructor" line="137"/>
            <javadoc line="141">
                Creates a new &lt;code&gt;SizeSequence&lt;/code&gt; object
                  that contains the specified number of entries,
                  all initialized to have size 0.                
                <param>
                    numEntries  the number of sizes to track                    
                </param>
                <exception>
                    NegativeArraySizeException if
                      <code>numEntries < 0</code>                    
                </exception>
            </javadoc>
            <method name="SizeSequence" type="constructor" line="150">
                <params>
                    <param name="numEntries" type="int"/>
                </params>
            </method>
            <javadoc line="154">
                Creates a new &lt;code&gt;SizeSequence&lt;/code&gt; object
                  that contains the specified number of entries,
                  all initialized to have size &lt;code&gt;value&lt;/code&gt;.                
                <param>
                    numEntries  the number of sizes to track                    
                </param>
                <param>
                    value       the initial value of each size                    
                </param>
            </javadoc>
            <method name="SizeSequence" type="constructor" line="162">
                <params>
                    <param name="numEntries" type="int"/>
                    <param name="value" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Creates a new &lt;code&gt;SizeSequence&lt;/code&gt; object
                  that contains the specified sizes.                
                <param>
                    sizes  the array of sizes to be contained in
                      the <code>SizeSequence</code>                    
                </param>
            </javadoc>
            <method name="SizeSequence" type="constructor" line="174">
                <params>
                    <param name="sizes" type="int[]"/>
                </params>
            </method>
            <javadoc line="179">
                Resets the size sequence to contain &lt;code&gt;length&lt;/code&gt; items
                  all with a size of &lt;code&gt;size&lt;/code&gt;.                
            </javadoc>
            <method name="setSizes" type="void" line="183">
                <params>
                    <param name="length" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="184"/>
            </method>
            <method name="setSizes" type="int" line="190">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="size" type="int"/>
                </params>
                <scope line="191"/>
                <declaration name="m" type="int" line="194"/>
            </method>
            <javadoc line="199">
                Resets this &lt;code&gt;SizeSequence&lt;/code&gt; object,
                  using the data in the &lt;code&gt;sizes&lt;/code&gt; argument.
                  This method reinitializes this object so that it
                  contains as many entries as the &lt;code&gt;sizes&lt;/code&gt; array.
                  Each entry&apos;s size is initialized to the value of the
                  corresponding item in &lt;code&gt;sizes&lt;/code&gt;.                
                <param>
                    sizes  the array of sizes to be contained in
                      this <code>SizeSequence</code>                    
                </param>
            </javadoc>
            <method name="setSizes" type="void" line="210">
                <params>
                    <param name="sizes" type="int[]"/>
                </params>
                <scope line="211"/>
            </method>
            <method name="setSizes" type="int" line="217">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="sizes" type="int[]"/>
                </params>
                <scope line="218"/>
                <declaration name="m" type="int" line="221"/>
            </method>
            <javadoc line="226">
                Returns the size of all entries.                
                <return>
                    a new array containing the sizes in this object                    
                </return>
            </javadoc>
            <method name="getSizes" type="int[]" line="231">
                <declaration name="n" type="int" line="232"/>
                <declaration name="sizes" type="int[]" line="233"/>
            </method>
            <method name="getSizes" type="int" line="238">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="sizes" type="int[]"/>
                </params>
                <scope line="239"/>
                <declaration name="m" type="int" line="242"/>
            </method>
            <javadoc line="247">
                Returns the start position for the specified entry.
                  For example, &lt;code&gt;getPosition(0)&lt;/code&gt; returns 0,
                  &lt;code&gt;getPosition(1)&lt;/code&gt; is equal to
                  &lt;code&gt;getSize(0)&lt;/code&gt;,
                  &lt;code&gt;getPosition(2)&lt;/code&gt; is equal to
                  &lt;code&gt;getSize(0)&lt;/code&gt; + &lt;code&gt;getSize(1)&lt;/code&gt;,
                  and so on.
                  &lt;p&gt;Note that if &lt;code&gt;index&lt;/code&gt; is greater than
                  &lt;code&gt;length&lt;/code&gt; the value returned may
                  be meaningless.                
                <param>
                    index  the index of the entry whose position is desired                    
                </param>
                <return>
                    the starting position of the specified entry                    
                </return>
            </javadoc>
            <method name="getPosition" type="int" line="262">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="getPosition" type="int" line="266">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="267"/>
                <declaration name="m" type="int" line="270"/>
                <scope line="271"/>
                <scope line="274"/>
            </method>
            <javadoc line="279">
                Returns the index of the entry
                  that corresponds to the specified position.
                  For example, &lt;code&gt;getIndex(0)&lt;/code&gt; is 0,
                  since the first entry always starts at position 0.                
                <param>
                    position  the position of the entry                    
                </param>
                <return>
                    the index of the entry that occupies the specified position                    
                </return>
            </javadoc>
            <method name="getIndex" type="int" line="288">
                <params>
                    <param name="position" type="int"/>
                </params>
            </method>
            <method name="getIndex" type="int" line="292">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="position" type="int"/>
                </params>
                <scope line="293"/>
                <declaration name="m" type="int" line="296"/>
                <declaration name="pivot" type="int" line="297"/>
                <scope line="298"/>
                <scope line="301"/>
            </method>
            <javadoc line="306">
                Returns the size of the specified entry.
                  If &lt;code&gt;index&lt;/code&gt; is out of the range
                  &lt;code&gt;(0 &lt;= index &lt; getSizes().length)&lt;/code&gt;
                  the behavior is unspecified.                
                <param>
                    index  the index corresponding to the entry                    
                </param>
                <return>
                    the size of the entry                    
                </return>
            </javadoc>
            <method name="getSize" type="int" line="315">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="319">
                Sets the size of the specified entry.
                  Note that if the value of &lt;code&gt;index&lt;/code&gt;
                  does not fall in the range:
                  &lt;code&gt;(0 &lt;= index &lt; getSizes().length)&lt;/code&gt;
                  the behavior is unspecified.                
                <param>
                    index  the index corresponding to the entry                    
                </param>
                <param>
                    size   the size of the entry                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="329">
                <params>
                    <param name="index" type="int"/>
                    <param name="size" type="int"/>
                </params>
            </method>
            <method name="changeSize" type="void" line="333">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                    <param name="index" type="int"/>
                    <param name="delta" type="int"/>
                </params>
                <scope line="334"/>
                <declaration name="m" type="int" line="337"/>
                <scope line="338"/>
                <scope line="342"/>
            </method>
            <javadoc line="347">
                Adds a contiguous group of entries to this &lt;code&gt;SizeSequence&lt;/code&gt;.
                  Note that the values of &lt;code&gt;start&lt;/code&gt; and
                  &lt;code&gt;length&lt;/code&gt; must satisfy the following
                  conditions:  &lt;code&gt;(0 &lt;= start &lt; getSizes().length)
                  AND (length &gt;= 0)&lt;/code&gt;.  If these conditions are
                  not met, the behavior is unspecified and an exception
                  may be thrown.                
                <param>
                    start   the index to be assigned to the first entry
                      in the group                    
                </param>
                <param>
                    length  the number of entries in the group                    
                </param>
                <param>
                    value   the size to be assigned to each new entry                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException if the parameters
                      are outside of the range:
                      (<code>0 <= start < (getSizes().length)) AND (length >= 0)</code>                    
                </exception>
            </javadoc>
            <method name="insertEntries" type="void" line="364">
                <params>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                    <param name="value" type="int"/>
                </params>
                <declaration name="sizes" type="int" line="365"/>
                <declaration name="end" type="int" line="366"/>
                <declaration name="n" type="int" line="367"/>
                <scope line="369"/>
                <scope line="372"/>
                <scope line="375"/>
            </method>
            <javadoc line="381">
                Removes a contiguous group of entries
                  from this &lt;code&gt;SizeSequence&lt;/code&gt;.
                  Note that the values of &lt;code&gt;start&lt;/code&gt; and
                  &lt;code&gt;length&lt;/code&gt; must satisfy the following
                  conditions:  &lt;code&gt;(0 &lt;= start &lt; getSizes().length)
                  AND (length &gt;= 0)&lt;/code&gt;.  If these conditions are
                  not met, the behavior is unspecified and an exception
                  may be thrown.                
                <param>
                    start   the index of the first entry to be removed                    
                </param>
                <param>
                    length  the number of entries to be removed                    
                </param>
            </javadoc>
            <method name="removeEntries" type="void" line="394">
                <params>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <declaration name="sizes" type="int" line="395"/>
                <declaration name="end" type="int" line="396"/>
                <declaration name="n" type="int" line="397"/>
                <scope line="399"/>
                <scope line="402"/>
            </method>
        </class>
    </source>