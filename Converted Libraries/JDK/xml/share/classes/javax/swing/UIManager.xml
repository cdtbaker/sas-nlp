<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.KeyEventPostProcessor"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event.KeyEvent"/>
        <import package="java.security.AccessController"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.event.SwingPropertyChangeSupport"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.File"/>
        <import package="java.io.FileInputStream"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Properties"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="sun.awt.OSInfo"/>
        <import package="sun.security.action.GetPropertyAction"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.util.HashMap"/>
        <import package="sun.awt.AppContext"/>
        <import package="sun.awt.AWTAccessor"/>
        <class name="UIManager" line="66">
            <comment line="229">
                Lock object used in place of class object for synchronization. (4187686)                
            </comment>
            <comment line="259">
                Keys used for the properties file in &lt;java.home&gt;libswing.properties.
                 See loadUserProperties(), initialize().                
            </comment>
            <comment line="1396">
                This method is called before any code that depends on the
                 &lt;code&gt;AppContext&lt;code&gt; specific LAFState object runs.  When the AppContext
                 corresponds to a set of applets it&apos;s possible for this method
                 to be re-entered, which is why we grab a lock before calling
                 initialize().                
            </comment>
            <comment line="1413">
                Only called by maybeInitialize().                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="66">
                {@code UIManager} manages the current look and feel, the set of
                  available look and feels, {@code PropertyChangeListeners} that
                  are notified when the look and feel changes, look and feel defaults, and
                  convenience methods for obtaining various default values.
                  &lt;h3&gt;Specifying the look and feel&lt;/h3&gt;
                  The look and feel can be specified in two distinct ways: by
                  specifying the fully qualified name of the class for the look and
                  feel, or by creating an instance of {@code LookAndFeel} and passing
                  it to {@code setLookAndFeel}. The following example illustrates
                  setting the look and feel to the system look and feel:
                  &lt;pre&gt;
                  UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                  &lt;/pre&gt;
                  The following example illustrates setting the look and feel based on
                  class name:
                  &lt;pre&gt;
                  UIManager.setLookAndFeel(&quot;javax.swing.plaf.metal.MetalLookAndFeel&quot;);
                  &lt;/pre&gt;
                  Once the look and feel has been changed it is imperative to invoke{@code updateUI} on all {@code JComponents}. The method {@link SwingUtilities#updateComponentTreeUI} makes it easy to apply {@codeupdateUI} to a containment hierarchy. Refer to it for
                  details. The exact behavior of not invoking {@codeupdateUI} after changing the look and feel is
                  unspecified. It is very possible to receive unexpected exceptions,
                  painting problems, or worse.
                  &lt;h3&gt;Default look and feel&lt;/h3&gt;
                  The class used for the default look and feel is chosen in the following
                  manner:
                  &lt;ol&gt;
                  &lt;li&gt;If the system property &lt;code&gt;swing.defaultlaf&lt;/code&gt; is{@code non-null}, use its value as the default look and feel class
                  name.
                  &lt;li&gt;If the {@link java.util.Properties} file &lt;code&gt;swing.properties&lt;/code&gt;
                  exists and contains the key &lt;code&gt;swing.defaultlaf&lt;/code&gt;,
                  use its value as the default look and feel class name. The location
                  that is checked for &lt;code&gt;swing.properties&lt;/code&gt; may vary depending
                  upon the implementation of the Java platform. In Sun&apos;s implementation
                  the location is &lt;code&gt;${java.home}/lib/swing.properties&lt;/code&gt;.
                  Refer to the release notes of the implementation being used for
                  further details.
                  &lt;li&gt;Otherwise use the cross platform look and feel.
                  &lt;/ol&gt;
                  &lt;h3&gt;Defaults&lt;/h3&gt;{@code UIManager} manages three sets of {@code UIDefaults}. In order, they
                  are:
                  &lt;ol&gt;
                  &lt;li&gt;Developer defaults. With few exceptions Swing does not
                  alter the developer defaults; these are intended to be modified
                  and used by the developer.
                  &lt;li&gt;Look and feel defaults. The look and feel defaults are
                  supplied by the look and feel at the time it is installed as the
                  current look and feel ({@code setLookAndFeel()} is invoked). The
                  look and feel defaults can be obtained using the {@codegetLookAndFeelDefaults()} method.
                  &lt;li&gt;Sytem defaults. The system defaults are provided by Swing.
                  &lt;/ol&gt;
                  Invoking any of the various {@code get} methods
                  results in checking each of the defaults, in order, returning
                  the first {@code non-null} value. For example, invoking{@code UIManager.getString(&quot;Table.foreground&quot;)} results in first
                  checking developer defaults. If the developer defaults contain
                  a value for {@code &quot;Table.foreground&quot;} it is returned, otherwise
                  the look and feel defaults are checked, followed by the system defaults.
                  &lt;p&gt;
                  It&apos;s important to note that {@code getDefaults} returns a custom
                  instance of {@code UIDefaults} with this resolution logic built into it.
                  For example, {@code UIManager.getDefaults().getString(&quot;Table.foreground&quot;)}is equivalent to {@code UIManager.getString(&quot;Table.foreground&quot;)}. Both
                  resolve using the algorithm just described. In many places the
                  documentation uses the word defaults to refer to the custom instance
                  of {@code UIDefaults} with the resolution logic as previously described.
                  &lt;p&gt;
                  When the look and feel is changed, {@code UIManager} alters only the
                  look and feel defaults; the developer and system defaults are not
                  altered by the {@code UIManager} in any way.
                  &lt;p&gt;
                  The set of defaults a particular look and feel supports is defined
                  and documented by that look and feel. In addition, each look and
                  feel, or {@code ComponentUI} provided by a look and feel, may
                  access the defaults at different times in their life cycle. Some
                  look and feels may agressively look up defaults, so that changing a
                  default may not have an effect after installing the look and feel.
                  Other look and feels may lazily access defaults so that a change to
                  the defaults may effect an existing look and feel. Finally, other look
                  and feels might not configure themselves from the defaults table in
                  any way. None-the-less it is usually the case that a look and feel
                  expects certain defaults, so that in general
                  a {@code ComponentUI} provided by one look and feel will not
                  work with another look and feel.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Thomas Ball                    
                </author>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <class name="LAFState" line="178">
                <javadoc line="178">
                    This class defines the state managed by the &lt;code&gt;UIManager&lt;/code&gt;.  For
                      Swing applications the fields in this class could just as well
                      be static members of &lt;code&gt;UIManager&lt;/code&gt; however we give them
                      &quot;AppContext&quot;
                      scope instead so that applets (and potentially multiple lightweight
                      applications running in a single VM) have their own state. For example,
                      an applet can alter its look and feel, see &lt;code&gt;setLookAndFeel&lt;/code&gt;.
                      Doing so has no affect on other applets (or the browser).                    
                </javadoc>
                <declaration name="swingProps" type="Properties" line="190"/>
                <declaration name="tables" type="UIDefaults[]" line="191"/>
                <declaration name="initialized" type="boolean" line="193"/>
                <declaration name="multiUIDefaults" type="MultiUIDefaults" line="194"/>
                <declaration name="lookAndFeel" type="LookAndFeel" line="195"/>
                <declaration name="multiLookAndFeel" type="LookAndFeel" line="196"/>
                <declaration name="auxLookAndFeels" type="Vector&lt;LookAndFeel&gt;" line="197"/>
                <declaration name="changeSupport" type="SwingPropertyChangeSupport" line="198"/>
                <declaration name="installedLAFs" type="LookAndFeelInfo[]" line="200"/>
                <method name="getLookAndFeelDefaults" type="UIDefaults" line="202"/>
                <method name="setLookAndFeelDefaults" type="void" line="203">
                    <params>
                        <param name="x" type="UIDefaults"/>
                    </params>
                </method>
                <method name="getSystemDefaults" type="UIDefaults" line="205"/>
                <method name="setSystemDefaults" type="void" line="206">
                    <params>
                        <param name="x" type="UIDefaults"/>
                    </params>
                </method>
                <javadoc line="208">
                    Returns the SwingPropertyChangeSupport for the current
                      AppContext.  If &lt;code&gt;create&lt;/code&gt; is a true, a non-null
                      &lt;code&gt;SwingPropertyChangeSupport&lt;/code&gt; will be returned, if
                      &lt;code&gt;create&lt;/code&gt; is false and this has not been invoked
                      with true, null will be returned.                    
                </javadoc>
                <method name="getPropertyChangeSupport" type="SwingPropertyChangeSupport" line="216">
                    <params>
                        <param name="create" type="boolean"/>
                    </params>
                    <scope line="217"/>
                </method>
            </class>
            <declaration name="classLock" type="Object" line="230"/>
            <javadoc line="232">
                Return the &lt;code&gt;LAFState&lt;/code&gt; object, lazily create one if necessary.
                  All access to the &lt;code&gt;LAFState&lt;/code&gt; fields is done via this method,
                  for example:
                  &lt;pre&gt;
                  getLAFState().initialized = true;
                  &lt;/pre&gt;                
            </javadoc>
            <method name="getLAFState" type="LAFState" line="240">
                <declaration name="rv" type="LAFState" line="241"/>
                <scope line="243">
                    <scope line="244">
                        <scope line="247"/>
                    </scope>
                </scope>
            </method>
            <declaration name="defaultLAFKey" type="String" line="262"/>
            <declaration name="auxiliaryLAFsKey" type="String" line="263"/>
            <declaration name="multiplexingLAFKey" type="String" line="264"/>
            <declaration name="installedLAFsKey" type="String" line="265"/>
            <declaration name="disableMnemonicKey" type="String" line="266"/>
            <javadoc line="268">
                Return a swing.properties file key for the attribute of specified
                  look and feel.  The attr is either &quot;name&quot; or &quot;class&quot;, a typical
                  key would be: &quot;swing.installedlaf.windows.name&quot;                
            </javadoc>
            <method name="makeInstalledLAFKey" type="String" line="273">
                <params>
                    <param name="laf" type="String"/>
                    <param name="attr" type="String"/>
                </params>
            </method>
            <javadoc line="277">
                The filename for swing.properties is a path like this (Unix version):
                  &lt;java.home&gt;/lib/swing.properties.  This method returns a bogus
                  filename if java.home isn&apos;t defined.                
            </javadoc>
            <method name="makeSwingPropertiesFilename" type="String" line="282">
                <comment line="285">
                    No need to wrap this in a doPrivileged as it&apos;s called from
                     a doPrivileged.                    
                </comment>
                <declaration name="sep" type="String" line="283"/>
                <declaration name="javaHome" type="String" line="286"/>
                <scope line="287"/>
            </method>
            <class name="LookAndFeelInfo" line="294">
                <javadoc line="294">
                    Provides a little information about an installed
                      &lt;code&gt;LookAndFeel&lt;/code&gt; for the sake of configuring a menu or
                      for initial application set up.                    
                    <see>
                        UIManager#getInstalledLookAndFeels                        
                    </see>
                    <see>
                        LookAndFeel                        
                    </see>
                </javadoc>
                <declaration name="name" type="String" line="303"/>
                <declaration name="className" type="String" line="304"/>
                <javadoc line="306">
                    Constructs a &lt;code&gt;UIManager&lt;/code&gt;s
                      &lt;code&gt;LookAndFeelInfo&lt;/code&gt; object.                    
                    <param>
                        name      a &lt;code&gt;String&lt;/code&gt; specifying the name of
                          the look and feel                        
                    </param>
                    <param>
                        className a &lt;code&gt;String&lt;/code&gt; specifiying the name of
                          the class that implements the look and feel                        
                    </param>
                </javadoc>
                <method name="LookAndFeelInfo" type="constructor" line="315">
                    <params>
                        <param name="name" type="String"/>
                        <param name="className" type="String"/>
                    </params>
                </method>
                <javadoc line="320">
                    Returns the name of the look and feel in a form suitable
                      for a menu or other presentation                    
                    <return>
                        a &lt;code&gt;String&lt;/code&gt; containing the name                        
                    </return>
                    <see>
                        LookAndFeel#getName                        
                    </see>
                </javadoc>
                <method name="getName" type="String" line="326"/>
                <javadoc line="330">
                    Returns the name of the class that implements this look and feel.                    
                    <return>
                        the name of the class that implements this
                          &lt;code&gt;LookAndFeel&lt;/code&gt;                        
                    </return>
                    <see>
                        LookAndFeel                        
                    </see>
                </javadoc>
                <method name="getClassName" type="String" line="336"/>
                <javadoc line="340">
                    Returns a string that displays and identifies this
                      object&apos;s properties.                    
                    <return>
                        a &lt;code&gt;String&lt;/code&gt; representation of this object                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="346"/>
            </class>
            <declaration name="installedLAFs" type="LookAndFeelInfo[]" line="352"/>
            <javadoc line="352">
                The default value of &lt;code&gt;installedLAFS&lt;/code&gt; is used when no
                  swing.properties
                  file is available or if the file doesn&apos;t contain a &quot;swing.installedlafs&quot;
                  property.                
                <see>
                    #initializeInstalledLAFs                    
                </see>
            </javadoc>
            <scope line="362">
                <declaration name="iLAFs" type="ArrayList&lt;LookAndFeelInfo&gt;" line="363"/>
                <declaration name="osType" type="OSInfo.OSType" line="372"/>
                <scope line="373">
                    <scope line="377"/>
                </scope>
                <scope line="382"/>
            </scope>
            <javadoc line="391">
                Returns an array of {@code LookAndFeelInfo}s representing the{@code LookAndFeel} implementations currently available. The
                  &lt;code&gt;LookAndFeelInfo&lt;/code&gt; objects can be used by an
                  application to construct a menu of look and feel options for
                  the user, or to determine which look and feel to set at startup
                  time. To avoid the penalty of creating numerous {@codeLookAndFeel} objects, {@code LookAndFeelInfo} maintains the
                  class name of the {@code LookAndFeel} class, not the actual{@code LookAndFeel} instance.
                  &lt;p&gt;
                  The following example illustrates setting the current look and feel
                  from an instance of {@code LookAndFeelInfo}:
                  &lt;pre&gt;
                  UIManager.setLookAndFeel(info.getClassName());
                  &lt;/pre&gt;                
                <return>
                    an array of &lt;code&gt;LookAndFeelInfo&lt;/code&gt; objects                    
                </return>
                <see>
                    #setLookAndFeel                    
                </see>
            </javadoc>
            <method name="getInstalledLookAndFeels" type="LookAndFeelInfo[]" line="411">
                <declaration name="ilafs" type="LookAndFeelInfo[]" line="413"/>
                <scope line="414"/>
                <declaration name="rv" type="LookAndFeelInfo[]" line="417"/>
            </method>
            <javadoc line="423">
                Sets the set of available look and feels. While this method does
                  not check to ensure all of the {@code LookAndFeelInfos} are{@code non-null}, it is strongly recommended that only {@code non-null}values are supplied in the {@code infos} array.                
                <param>
                    infos set of &lt;code&gt;LookAndFeelInfo&lt;/code&gt; objects specifying
                      the available look and feels                    
                </param>
                <see>
                    #getInstalledLookAndFeels                    
                </see>
                <throws>
                    NullPointerException if {@code infos} is {@code null}                    
                </throws>
            </javadoc>
            <method name="setInstalledLookAndFeels" type="void" line="437">
                <params>
                    <param name="infos" type="LookAndFeelInfo[]"/>
                </params>
                <declaration name="newInfos" type="LookAndFeelInfo[]" line="439"/>
            </method>
            <javadoc line="445">
                Adds the specified look and feel to the set of available look
                  and feels. While this method allows a {@code null} {@code info},
                  it is strongly recommended that a {@code non-null} value be used.                
                <param>
                    info a &lt;code&gt;LookAndFeelInfo&lt;/code&gt; object that names the
                      look and feel and identifies the class that implements it                    
                </param>
                <see>
                    #setInstalledLookAndFeels                    
                </see>
            </javadoc>
            <method name="installLookAndFeel" type="void" line="454">
                <params>
                    <param name="info" type="LookAndFeelInfo"/>
                </params>
                <declaration name="infos" type="LookAndFeelInfo[]" line="455"/>
                <declaration name="newInfos" type="LookAndFeelInfo[]" line="456"/>
            </method>
            <javadoc line="463">
                Adds the specified look and feel to the set of available look
                  and feels. While this method does not check the
                  arguments in any way, it is strongly recommended that {@codenon-null} values be supplied.                
                <param>
                    name descriptive name of the look and feel                    
                </param>
                <param>
                    className name of the class that implements the look and feel                    
                </param>
                <see>
                    #setInstalledLookAndFeels                    
                </see>
            </javadoc>
            <method name="installLookAndFeel" type="void" line="473">
                <params>
                    <param name="name" type="String"/>
                    <param name="className" type="String"/>
                </params>
            </method>
            <javadoc line="478">
                Returns the current look and feel or &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    current look and feel, or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    #setLookAndFeel                    
                </see>
            </javadoc>
            <method name="getLookAndFeel" type="LookAndFeel" line="484"/>
            <javadoc line="490">
                Sets the current look and feel to {@code newLookAndFeel}.
                  If the current look and feel is {@code non-null} {@codeuninitialize} is invoked on it. If {@code newLookAndFeel} is{@code non-null}, {@code initialize} is invoked on it followed
                  by {@code getDefaults}. The defaults returned from {@codenewLookAndFeel.getDefaults()} replace those of the defaults
                  from the previous look and feel. If the {@code newLookAndFeel} is{@code null}, the look and feel defaults are set to {@code null}.
                  &lt;p&gt;
                  A value of {@code null} can be used to set the look and feel
                  to {@code null}. As the {@code LookAndFeel} is required for
                  most of Swing to function, setting the {@code LookAndFeel} to{@code null} is strongly discouraged.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    newLookAndFeel {@code LookAndFeel} to install                    
                </param>
                <throws>
                    UnsupportedLookAndFeelException if{@code newLookAndFeel} is {@code non-null} and{@code newLookAndFeel.isSupportedLookAndFeel()} returns{@code false}                    
                </throws>
                <see>
                    #getLookAndFeel                    
                </see>
            </javadoc>
            <method name="setLookAndFeel" type="void" line="516">
                <params>
                    <param name="newLookAndFeel" type="LookAndFeel"/>
                </params>
                <scope line="517">
                    <declaration name="s" type="String" line="518"/>
                </scope>
                <declaration name="lafState" type="LAFState" line="522"/>
                <declaration name="oldLookAndFeel" type="LookAndFeel" line="523"/>
                <scope line="524"/>
                <scope line="529"/>
                <scope line="534"/>
                <declaration name="changeSupport" type="SwingPropertyChangeSupport" line="538"/>
                <scope line="540"/>
            </method>
            <javadoc line="547">
                Loads the {@code LookAndFeel} specified by the given class
                  name, using the current thread&apos;s context class loader, and
                  passes it to {@code setLookAndFeel(LookAndFeel)}.                
                <param>
                    className  a string specifying the name of the class that implements
                      the look and feel                    
                </param>
                <exception>
                    ClassNotFoundException if the &lt;code&gt;LookAndFeel&lt;/code&gt;
                      class could not be found                    
                </exception>
                <exception>
                    InstantiationException if a new instance of the class
                      couldn&apos;t be created                    
                </exception>
                <exception>
                    IllegalAccessException if the class or initializer isn&apos;t accessible                    
                </exception>
                <exception>
                    UnsupportedLookAndFeelException if
                      &lt;code&gt;lnf.isSupportedLookAndFeel()&lt;/code&gt; is false                    
                </exception>
                <throws>
                    ClassCastException if {@code className} does not identify
                      a class that extends {@code LookAndFeel}                    
                </throws>
            </javadoc>
            <method name="setLookAndFeel" type="void" line="569">
                <params>
                    <param name="className" type="String"/>
                </params>
                <comment line="572">
                    Avoid reflection for the common case of metal.                    
                </comment>
                <scope line="570"/>
                <scope line="574">
                    <declaration name="lnfClass" type="Class" line="575"/>
                </scope>
            </method>
            <javadoc line="580">
                Returns the name of the &lt;code&gt;LookAndFeel&lt;/code&gt; class that implements
                  the native system look and feel if there is one, otherwise
                  the name of the default cross platform &lt;code&gt;LookAndFeel&lt;/code&gt;
                  class. This value can be overriden by setting the
                  &lt;code&gt;swing.systemlaf&lt;/code&gt; system property.                
                <return>
                    the &lt;code&gt;String&lt;/code&gt; of the &lt;code&gt;LookAndFeel&lt;/code&gt;
                      class                    
                </return>
                <see>
                    #setLookAndFeel                    
                </see>
                <see>
                    #getCrossPlatformLookAndFeelClassName                    
                </see>
            </javadoc>
            <method name="getSystemLookAndFeelClassName" type="String" line="593">
                <comment line="609">
                    May be set on Linux and Solaris boxs.                    
                </comment>
                <declaration name="systemLAF" type="String" line="594"/>
                <scope line="596"/>
                <declaration name="osType" type="OSInfo.OSType" line="599"/>
                <scope line="600"/>
                <scope line="602">
                    <declaration name="desktop" type="String" line="603"/>
                    <declaration name="toolkit" type="Toolkit" line="604"/>
                    <scope line="607"/>
                    <scope line="611"/>
                </scope>
            </method>
            <javadoc line="619">
                Returns the name of the &lt;code&gt;LookAndFeel&lt;/code&gt; class that implements
                  the default cross platform look and feel -- the Java
                  Look and Feel (JLF).  This value can be overriden by setting the
                  &lt;code&gt;swing.crossplatformlaf&lt;/code&gt; system property.                
                <return>
                    a string with the JLF implementation-class                    
                </return>
                <see>
                    #setLookAndFeel                    
                </see>
                <see>
                    #getSystemLookAndFeelClassName                    
                </see>
            </javadoc>
            <method name="getCrossPlatformLookAndFeelClassName" type="String" line="629">
                <declaration name="laf" type="String" line="630"/>
                <scope line="632"/>
            </method>
            <javadoc line="639">
                Returns the defaults. The returned defaults resolve using the
                  logic specified in the class documentation.                
                <return>
                    a &lt;code&gt;UIDefaults&lt;/code&gt; object containing the default values                    
                </return>
            </javadoc>
            <method name="getDefaults" type="UIDefaults" line="645"/>
            <javadoc line="650">
                Returns a font from the defaults. If the value for {@code key} is
                  not a {@code Font}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the font                    
                </param>
                <return>
                    the &lt;code&gt;Font&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getFont" type="Font" line="658">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="662">
                Returns a font from the defaults that is appropriate
                  for the given locale. If the value for {@code key} is
                  not a {@code Font}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the font                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the font is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Font&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFont" type="Font" line="675">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="679">
                Returns a color from the defaults. If the value for {@code key} is
                  not a {@code Color}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the color                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getColor" type="Color" line="687">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="691">
                Returns a color from the defaults that is appropriate
                  for the given locale. If the value for {@code key} is
                  not a {@code Color}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the color                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the color is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Color&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getColor" type="Color" line="704">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="708">
                Returns an &lt;code&gt;Icon&lt;/code&gt; from the defaults. If the value for{@code key} is not an {@code Icon}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the icon                    
                </param>
                <return>
                    the &lt;code&gt;Icon&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getIcon" type="Icon" line="716">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="720">
                Returns an &lt;code&gt;Icon&lt;/code&gt; from the defaults that is appropriate
                  for the given locale. If the value for{@code key} is not an {@code Icon}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the icon                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the icon is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Icon&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIcon" type="Icon" line="733">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="737">
                Returns a border from the defaults. If the value for{@code key} is not a {@code Border}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the border                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getBorder" type="Border" line="745">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="749">
                Returns a border from the defaults that is appropriate
                  for the given locale.  If the value for{@code key} is not a {@code Border}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the border                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the border is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Border&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBorder" type="Border" line="762">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="766">
                Returns a string from the defaults. If the value for{@code key} is not a {@code String}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the string                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="774">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="778">
                Returns a string from the defaults that is appropriate for the
                  given locale.  If the value for{@code key} is not a {@code String}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the string                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the string is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt;                    
                </return>
                <since>
                    1.4                    
                </since>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="791">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="795">
                Returns a string from the defaults that is appropriate for the
                  given locale.  If the value for{@code key} is not a {@code String}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the string                    
                </param>
                <param>
                    c {@code Component} used to determine the locale;{@code null} implies the default locale as
                      returned by {@code Locale.getDefault()}                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getString" type="String" line="807">
                <params>
                    <param name="key" type="Object"/>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="l" type="Locale" line="808"/>
            </method>
            <javadoc line="812">
                Returns an integer from the defaults. If the value for{@code key} is not an {@code Integer}, or does not exist,{@code 0} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the int                    
                </param>
                <return>
                    the int                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getInt" type="int" line="821">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="825">
                Returns an integer from the defaults that is appropriate
                  for the given locale. If the value for{@code key} is not an {@code Integer}, or does not exist,{@code 0} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the int                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the int is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the int                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInt" type="int" line="839">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="843">
                Returns a boolean from the defaults which is associated with
                  the key value. If the key is not found or the key doesn&apos;t represent
                  a boolean value then {@code false} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the key for the desired boolean value                    
                </param>
                <return>
                    the boolean value corresponding to the key                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBoolean" type="boolean" line="853">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="857">
                Returns a boolean from the defaults which is associated with
                  the key value and the given &lt;code&gt;Locale&lt;/code&gt;. If the key is not
                  found or the key doesn&apos;t represent
                  a boolean value then {@code false} will be returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the key for the desired
                      boolean value                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the boolean is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the boolean value corresponding to the key                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBoolean" type="boolean" line="872">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="876">
                Returns an &lt;code&gt;Insets&lt;/code&gt; object from the defaults. If the value
                  for {@code key} is not an {@code Insets}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the &lt;code&gt;Insets&lt;/code&gt; object                    
                </param>
                <return>
                    the &lt;code&gt;Insets&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getInsets" type="Insets" line="884">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="888">
                Returns an &lt;code&gt;Insets&lt;/code&gt; object from the defaults that is
                  appropriate for the given locale. If the value
                  for {@code key} is not an {@code Insets}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the &lt;code&gt;Insets&lt;/code&gt; object                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the object is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Insets&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInsets" type="Insets" line="901">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="905">
                Returns a dimension from the defaults. If the value
                  for {@code key} is not a {@code Dimension}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the dimension object                    
                </param>
                <return>
                    the &lt;code&gt;Dimension&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="getDimension" type="Dimension" line="913">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="917">
                Returns a dimension from the defaults that is appropriate
                  for the given locale. If the value
                  for {@code key} is not a {@code Dimension}, {@code null} is returned.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the dimension object                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the object is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Dimension&lt;/code&gt; object                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDimension" type="Dimension" line="930">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="934">
                Returns an object from the defaults.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the desired object                    
                </param>
                <return>
                    the &lt;code&gt;Object&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
            </javadoc>
            <method name="get" type="Object" line="941">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="945">
                Returns an object from the defaults that is appropriate for
                  the given locale.                
                <param>
                    key  an &lt;code&gt;Object&lt;/code&gt; specifying the desired object                    
                </param>
                <param>
                    l the &lt;code&gt;Locale&lt;/code&gt; for which the object is desired; refer
                      to {@code UIDefaults} for details on how a {@code null}{@code Locale} is handled                    
                </param>
                <return>
                    the &lt;code&gt;Object&lt;/code&gt;                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="get" type="Object" line="957">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="961">
                Stores an object in the developer defaults. This is a cover method
                  for {@code getDefaults().put(key, value)}. This only effects the
                  developer defaults, not the system or look and feel defaults.                
                <param>
                    key    an &lt;code&gt;Object&lt;/code&gt; specifying the retrieval key                    
                </param>
                <param>
                    value  the &lt;code&gt;Object&lt;/code&gt; to store; refer to{@code UIDefaults} for details on how {@code null} is
                      handled                    
                </param>
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; returned by {@link UIDefaults#put}                    
                </return>
                <throws>
                    NullPointerException if {@code key} is {@code null}                    
                </throws>
                <see>
                    UIDefaults#put                    
                </see>
            </javadoc>
            <method name="put" type="Object" line="974">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <javadoc line="978">
                Returns the appropriate {@code ComponentUI} implementation for{@code target}. Typically, this is a cover for{@code getDefaults().getUI(target)}. However, if an auxiliary
                  look and feel has been installed, this first invokes{@code getUI(target)} on the multiplexing look and feel&apos;s
                  defaults, and returns that value if it is {@code non-null}.                
                <param>
                    target the &lt;code&gt;JComponent&lt;/code&gt; to return the{@code ComponentUI} for                    
                </param>
                <return>
                    the &lt;code&gt;ComponentUI&lt;/code&gt; object for {@code target}                    
                </return>
                <throws>
                    NullPointerException if {@code target} is {@code null}                    
                </throws>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUI" type="ComponentUI" line="992">
                <params>
                    <param name="target" type="JComponent"/>
                </params>
                <comment line="998">
                    This can return null if the multiplexing look and feel
                     doesn&apos;t support a particular UI.                    
                </comment>
                <declaration name="ui" type="ComponentUI" line="994"/>
                <declaration name="multiLAF" type="LookAndFeel" line="995"/>
                <scope line="996"/>
                <scope line="1001"/>
            </method>
            <javadoc line="1008">
                Returns the {@code UIDefaults} from the current look and feel,
                  that were obtained at the time the look and feel was installed.
                  &lt;p&gt;
                  In general, developers should use the {@code UIDefaults} returned from{@code getDefaults()}. As the current look and feel may expect
                  certain values to exist, altering the {@code UIDefaults} returned
                  from this method could have unexpected results.                
                <return>
                    &lt;code&gt;UIDefaults&lt;/code&gt; from the current look and feel                    
                </return>
                <see>
                    #getDefaults                    
                </see>
                <see>
                    #setLookAndFeel(LookAndFeel)                    
                </see>
                <see>
                    LookAndFeel#getDefaults                    
                </see>
            </javadoc>
            <method name="getLookAndFeelDefaults" type="UIDefaults" line="1022"/>
            <javadoc line="1027">
                Finds the Multiplexing &lt;code&gt;LookAndFeel&lt;/code&gt;.                
            </javadoc>
            <method name="getMultiLookAndFeel" type="LookAndFeel" line="1030">
                <declaration name="multiLookAndFeel" type="LookAndFeel" line="1031"/>
                <scope line="1032">
                    <declaration name="defaultName" type="String" line="1033"/>
                    <declaration name="className" type="String" line="1034"/>
                    <scope line="1035">
                        <declaration name="lnfClass" type="Class" line="1036"/>
                    </scope>
                    <scope line="1038"/>
                </scope>
            </method>
            <javadoc line="1045">
                Adds a &lt;code&gt;LookAndFeel&lt;/code&gt; to the list of auxiliary look and feels.
                  The auxiliary look and feels tell the multiplexing look and feel what
                  other &lt;code&gt;LookAndFeel&lt;/code&gt; classes for a component instance are to be used
                  in addition to the default &lt;code&gt;LookAndFeel&lt;/code&gt; class when creating a
                  multiplexing UI.  The change will only take effect when a new
                  UI class is created or when the default look and feel is changed
                  on a component instance.
                  &lt;p&gt;Note these are not the same as the installed look and feels.                
                <param>
                    laf the &lt;code&gt;LookAndFeel&lt;/code&gt; object                    
                </param>
                <see>
                    #removeAuxiliaryLookAndFeel                    
                </see>
                <see>
                    #setLookAndFeel                    
                </see>
                <see>
                    #getAuxiliaryLookAndFeels                    
                </see>
                <see>
                    #getInstalledLookAndFeels                    
                </see>
            </javadoc>
            <method name="addAuxiliaryLookAndFeel" type="void" line="1061">
                <params>
                    <param name="laf" type="LookAndFeel"/>
                </params>
                <comment line="1066">
                    Ideally we would throw an exception here, but it&apos;s too late
                     for that.                    
                </comment>
                <scope line="1064"/>
                <declaration name="v" type="Vector&lt;LookAndFeel&gt;" line="1069"/>
                <scope line="1070"/>
                <scope line="1074">
                    <scope line="1079"/>
                </scope>
            </method>
            <javadoc line="1085">
                Removes a &lt;code&gt;LookAndFeel&lt;/code&gt; from the list of auxiliary look and feels.
                  The auxiliary look and feels tell the multiplexing look and feel what
                  other &lt;code&gt;LookAndFeel&lt;/code&gt; classes for a component instance are to be used
                  in addition to the default &lt;code&gt;LookAndFeel&lt;/code&gt; class when creating a
                  multiplexing UI.  The change will only take effect when a new
                  UI class is created or when the default look and feel is changed
                  on a component instance.
                  &lt;p&gt;Note these are not the same as the installed look and feels.                
                <return>
                    true if the &lt;code&gt;LookAndFeel&lt;/code&gt; was removed from the list                    
                </return>
                <see>
                    #removeAuxiliaryLookAndFeel                    
                </see>
                <see>
                    #getAuxiliaryLookAndFeels                    
                </see>
                <see>
                    #setLookAndFeel                    
                </see>
                <see>
                    #getInstalledLookAndFeels                    
                </see>
            </javadoc>
            <method name="removeAuxiliaryLookAndFeel" type="boolean" line="1100">
                <params>
                    <param name="laf" type="LookAndFeel"/>
                </params>
                <declaration name="result" type="boolean" line="1103"/>
                <declaration name="v" type="Vector&lt;LookAndFeel&gt;" line="1105"/>
                <scope line="1106"/>
                <scope line="1111">
                    <scope line="1112"/>
                    <scope line="1115"/>
                </scope>
            </method>
            <javadoc line="1124">
                Returns the list of auxiliary look and feels (can be &lt;code&gt;null&lt;/code&gt;).
                  The auxiliary look and feels tell the multiplexing look and feel what
                  other &lt;code&gt;LookAndFeel&lt;/code&gt; classes for a component instance are
                  to be used in addition to the default LookAndFeel class when creating a
                  multiplexing UI.
                  &lt;p&gt;Note these are not the same as the installed look and feels.                
                <return>
                    list of auxiliary &lt;code&gt;LookAndFeel&lt;/code&gt;s or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    #addAuxiliaryLookAndFeel                    
                </see>
                <see>
                    #removeAuxiliaryLookAndFeel                    
                </see>
                <see>
                    #setLookAndFeel                    
                </see>
                <see>
                    #getInstalledLookAndFeels                    
                </see>
            </javadoc>
            <method name="getAuxiliaryLookAndFeels" type="LookAndFeel[]" line="1138">
                <declaration name="v" type="Vector&lt;LookAndFeel&gt;" line="1141"/>
                <scope line="1142"/>
                <scope line="1145">
                    <declaration name="rv" type="LookAndFeel[]" line="1146"/>
                    <scope line="1147"/>
                </scope>
            </method>
            <javadoc line="1155">
                Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.
                  The listener is registered for all properties.                
                <param>
                    listener  the &lt;code&gt;PropertyChangeListener&lt;/code&gt; to be added                    
                </param>
                <see>
                    java.beans.PropertyChangeSupport                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="1163">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="1164"/>
            </method>
            <javadoc line="1171">
                Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the listener list.
                  This removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that was registered
                  for all properties.                
                <param>
                    listener  the &lt;code&gt;PropertyChangeListener&lt;/code&gt; to be removed                    
                </param>
                <see>
                    java.beans.PropertyChangeSupport                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="1180">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="1181"/>
            </method>
            <javadoc line="1188">
                Returns an array of all the &lt;code&gt;PropertyChangeListener&lt;/code&gt;s added
                  to this UIManager with addPropertyChangeListener().                
                <return>
                    all of the &lt;code&gt;PropertyChangeListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="1196">
                <scope line="1197"/>
            </method>
            <method name="loadSwingProperties" type="Properties" line="1204">
                <comment line="1206">
                    Don&apos;t bother checking for Swing properties if untrusted, as
                     there&apos;s no way to look them up without triggering SecurityExceptions.                    
                </comment>
                <comment line="1222">
                    InputStream has been buffered in Properties
                     class                    
                </comment>
                <comment line="1230">
                    No such file, or file is otherwise non-readable.                    
                </comment>
                <comment line="1233">
                    Check whether any properties were overridden at the
                     command line.                    
                </comment>
                <comment line="1240">
                    Don&apos;t care about return value.                    
                </comment>
                <scope line="1208"/>
                <scope line="1211">
                    <declaration name="props" type="Properties" line="1212"/>
                    <anonymous_class line="1215">
                        <method name="run" type="Object" line="1216">
                            <comment line="1222">
                                InputStream has been buffered in Properties
                                 class                                
                            </comment>
                            <comment line="1230">
                                No such file, or file is otherwise non-readable.                                
                            </comment>
                            <comment line="1233">
                                Check whether any properties were overridden at the
                                 command line.                                
                            </comment>
                            <comment line="1240">
                                Don&apos;t care about return value.                                
                            </comment>
                            <scope line="1217">
                                <declaration name="file" type="File" line="1218"/>
                                <scope line="1220">
                                    <declaration name="ins" type="FileInputStream" line="1223"/>
                                </scope>
                            </scope>
                            <scope line="1228"/>
                        </method>
                    </anonymous_class>
                </scope>
            </method>
            <method name="checkProperty" type="void" line="1247">
                <params>
                    <param name="props" type="Properties"/>
                    <param name="key" type="String"/>
                </params>
                <comment line="1249">
                    No need to do catch the SecurityException here, this runs
                     in a doPrivileged.                    
                </comment>
                <declaration name="value" type="String" line="1250"/>
                <scope line="1251"/>
            </method>
            <javadoc line="1257">
                If a swing.properties file exist and it has a swing.installedlafs property
                  then initialize the &lt;code&gt;installedLAFs&lt;/code&gt; field.                
                <see>
                    #getInstalledLookAndFeels                    
                </see>
            </javadoc>
            <method name="initializeInstalledLAFs" type="void" line="1264">
                <params>
                    <param name="swingProps" type="Properties"/>
                </params>
                <comment line="1271">
                    Create a vector that contains the value of the swing.installedlafs
                     property.  For example given &quot;swing.installedlafs=motif,windows&quot;
                     lafs = {&quot;motif&quot;, &quot;windows&quot;}.                    
                </comment>
                <comment line="1281">
                    Look up the name and class for each name in the &quot;swing.installedlafs&quot;
                     list.  If they both exist then add a LookAndFeelInfo to
                     the installedLafs array.                    
                </comment>
                <declaration name="ilafsString" type="String" line="1265"/>
                <scope line="1266"/>
                <declaration name="lafs" type="Vector&lt;String&gt;" line="1274"/>
                <declaration name="st" type="StringTokenizer" line="1275"/>
                <scope line="1276"/>
                <declaration name="ilafs" type="Vector&lt;LookAndFeelInfo&gt;" line="1284"/>
                <scope line="1285">
                    <declaration name="name" type="String" line="1286"/>
                    <declaration name="cls" type="String" line="1287"/>
                    <scope line="1288"/>
                </scope>
                <declaration name="installedLAFs" type="LookAndFeelInfo[]" line="1293"/>
                <scope line="1294"/>
            </method>
            <javadoc line="1301">
                If the user has specified a default look and feel, use that.
                  Otherwise use the look and feel that&apos;s native to this platform.
                  If this code is called after the application has explicitly
                  set it&apos;s look and feel, do nothing.                
                <see>
                    #maybeInitialize                    
                </see>
            </javadoc>
            <method name="initializeDefaultLAF" type="void" line="1310">
                <params>
                    <param name="swingProps" type="Properties"/>
                </params>
                <comment line="1316">
                    Try to get default LAF from system property, then from AppContext
                     (6653395), then use cross-platform one by default.                    
                </comment>
                <comment line="1335">
                    Set any properties passed through AppContext (6653395).                    
                </comment>
                <scope line="1311"/>
                <declaration name="lafName" type="String" line="1317"/>
                <declaration name="lafData" type="HashMap" line="1318"/>
                <scope line="1320"/>
                <scope line="1323"/>
                <scope line="1328"/>
                <scope line="1330"/>
                <scope line="1335">
                    <scope line="1336"/>
                </scope>
            </method>
            <method name="initializeAuxiliaryLAFs" type="void" line="1344">
                <params>
                    <param name="swingProps" type="Properties"/>
                </params>
                <comment line="1356">
                    Try to load each LookAndFeel subclass in the list.                    
                </comment>
                <comment line="1372">
                    If there were problems and no auxiliary look and feels were
                     loaded, make sure we reset auxLookAndFeels to null.
                     Otherwise, we are going to use the MultiLookAndFeel to get
                     all component UI&apos;s, so we need to load it now.                    
                </comment>
                <declaration name="auxLookAndFeelNames" type="String" line="1345"/>
                <scope line="1346"/>
                <declaration name="auxLookAndFeels" type="Vector&lt;LookAndFeel&gt;" line="1350"/>
                <declaration name="p" type="StringTokenizer" line="1352"/>
                <declaration name="factoryName" type="String" line="1353"/>
                <scope line="1358">
                    <declaration name="className" type="String" line="1359"/>
                    <scope line="1360">
                        <declaration name="lnfClass" type="Class" line="1361"/>
                        <declaration name="newLAF" type="LookAndFeel" line="1362"/>
                    </scope>
                    <scope line="1366"/>
                </scope>
                <scope line="1376"/>
                <scope line="1379">
                    <scope line="1381"/>
                </scope>
            </method>
            <method name="initializeSystemDefaults" type="void" line="1390">
                <params>
                    <param name="swingProps" type="Properties"/>
                </params>
            </method>
            <method name="maybeInitialize" type="void" line="1402">
                <scope line="1403">
                    <scope line="1404"/>
                </scope>
            </method>
            <method name="initialize" type="void" line="1415">
                <comment line="1423">
                    Enable the Swing default LayoutManager.                    
                </comment>
                <comment line="1425">
                    don&apos;t set default policy if this is XAWT.                    
                </comment>
                <comment line="1434">
                    Install Swing&apos;s PaintEventDispatcher                    
                </comment>
                <comment line="1439">
                    Install a hook that will be invoked if no one consumes the
                     KeyEvent.  If the source isn&apos;t a JComponent this will process
                     key bindings, if the source is a JComponent it implies that
                     processKeyEvent was already invoked and thus no need to process
                     the bindings again, unless the Component is disabled, in which
                     case KeyEvents will no longer be dispatched to it so that we
                     handle it here.                    
                </comment>
                <declaration name="swingProps" type="Properties" line="1416"/>
                <declaration name="toolkitName" type="String" line="1423"/>
                <scope line="1425">
                    <scope line="1426"/>
                </scope>
                <scope line="1434"/>
                <anonymous_class line="1446">
                    <method name="postProcessKeyEvent" type="boolean" line="1447">
                        <params>
                            <param name="e" type="KeyEvent"/>
                        </params>
                        <declaration name="c" type="Component" line="1448"/>
                        <scope line="1453"/>
                    </method>
                </anonymous_class>
            </method>
        </class>
    </source>