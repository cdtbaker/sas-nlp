<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.undo">
        <import package="javax.swing.event"/>
        <interface name="UndoableEdit">
            <javadoc line="30">
                An &lt;code&gt;UndoableEdit&lt;/code&gt; represents an edit.  The edit may
                  be undone, or if already undone the edit may be redone.
                  &lt;p&gt;
                  &lt;code&gt;UndoableEdit&lt;/code&gt; is designed to be used with the
                  &lt;code&gt;UndoManager&lt;/code&gt;.  As &lt;code&gt;UndoableEdit&lt;/code&gt;s are generated
                  by an &lt;code&gt;UndoableEditListener&lt;/code&gt; they are typically added to
                  the &lt;code&gt;UndoManager&lt;/code&gt;.  When an &lt;code&gt;UndoableEdit&lt;/code&gt;
                  is added to an &lt;code&gt;UndoManager&lt;/code&gt; the following occurs (assuming
                  &lt;code&gt;end&lt;/code&gt; has not been called on the &lt;code&gt;UndoManager&lt;/code&gt;):
                  &lt;ol&gt;
                  &lt;li&gt;If the &lt;code&gt;UndoManager&lt;/code&gt; contains edits it will call
                  &lt;code&gt;addEdit&lt;/code&gt; on the current edit passing in the new edit
                  as the argument.  If &lt;code&gt;addEdit&lt;/code&gt; returns true the
                  new edit is assumed to have been incorporated into the current edit and
                  the new edit will not be added to the list of current edits.
                  Edits can use &lt;code&gt;addEdit&lt;/code&gt; as a way for smaller edits to
                  be incorporated into a larger edit and treated as a single edit.
                  &lt;li&gt;If &lt;code&gt;addEdit&lt;/code&gt; returns false &lt;code&gt;replaceEdit&lt;/code&gt;
                  is called on the new edit with the current edit passed in as the
                  argument. This is the inverse of &lt;code&gt;addEdit&lt;/code&gt; &amp;#151;
                  if the new edit returns true from &lt;code&gt;replaceEdit&lt;/code&gt;, the new
                  edit replaces the current edit.
                  &lt;/ol&gt;
                  The &lt;code&gt;UndoManager&lt;/code&gt; makes use of
                  &lt;code&gt;isSignificant&lt;/code&gt; to determine how many edits should be
                  undone or redone.  The &lt;code&gt;UndoManager&lt;/code&gt; will undo or redo
                  all insignificant edits (&lt;code&gt;isSignificant&lt;/code&gt; returns false)
                  between the current edit and the last or
                  next significant edit.   &lt;code&gt;addEdit&lt;/code&gt; and
                  &lt;code&gt;replaceEdit&lt;/code&gt; can be used to treat multiple edits as
                  a single edit, returning false from &lt;code&gt;isSignificant&lt;/code&gt;
                  allows for treating can be used to
                  have many smaller edits undone or redone at once.  Similar functionality
                  can also be done using the &lt;code&gt;addEdit&lt;/code&gt; method.                
                <author>
                    Ray Ryan                    
                </author>
            </javadoc>
            <method name="undo" type="void" line="69"/>
            <javadoc line="69">
                Undo the edit.                
                <throws>
                    CannotUndoException if this edit can not be undone                    
                </throws>
            </javadoc>
            <method name="canUndo" type="boolean" line="76"/>
            <javadoc line="76">
                Returns true if this edit may be undone.                
                <return>
                    true if this edit may be undone                    
                </return>
            </javadoc>
            <method name="redo" type="void" line="83"/>
            <javadoc line="83">
                Re-applies the edit.                
                <throws>
                    CannotRedoException if this edit can not be redone                    
                </throws>
            </javadoc>
            <method name="canRedo" type="boolean" line="90"/>
            <javadoc line="90">
                Returns true if this edit may be redone.                
                <return>
                    true if this edit may be redone                    
                </return>
            </javadoc>
            <method name="die" type="void" line="97"/>
            <javadoc line="97">
                Informs the edit that it should no longer be used. Once an
                  &lt;code&gt;UndoableEdit&lt;/code&gt; has been marked as dead it can no longer
                  be undone or redone.
                  &lt;p&gt;
                  This is a useful hook for cleaning up state no longer
                  needed once undoing or redoing is impossible--for example,
                  deleting file resources used by objects that can no longer be
                  undeleted. &lt;code&gt;UndoManager&lt;/code&gt; calls this before it dequeues edits.
                  &lt;p&gt;
                  Note that this is a one-way operation. There is no &quot;un-die&quot;
                  method.                
                <see>
                    CompoundEdit#die                    
                </see>
            </javadoc>
            <method name="addEdit" type="boolean" line="114"/>
            <javadoc line="114">
                Adds an &lt;code&gt;UndoableEdit&lt;/code&gt; to this &lt;code&gt;UndoableEdit&lt;/code&gt;.
                  This method can be used to coalesce smaller edits into a larger
                  compound edit.  For example, text editors typically allow
                  undo operations to apply to words or sentences.  The text
                  editor may choose to generate edits on each key event, but allow
                  those edits to be coalesced into a more user-friendly unit, such as
                  a word. In this case, the &lt;code&gt;UndoableEdit&lt;/code&gt; would
                  override &lt;code&gt;addEdit&lt;/code&gt; to return true when the edits may
                  be coalesced.
                  &lt;p&gt;
                  A return value of true indicates &lt;code&gt;anEdit&lt;/code&gt; was incorporated
                  into this edit.  A return value of false indicates &lt;code&gt;anEdit&lt;/code&gt;
                  may not be incorporated into this edit.
                  &lt;p&gt;Typically the receiver is already in the queue of a
                  &lt;code&gt;UndoManager&lt;/code&gt; (or other &lt;code&gt;UndoableEditListener&lt;/code&gt;),
                  and is being given a chance to incorporate &lt;code&gt;anEdit&lt;/code&gt;
                  rather than letting it be added to the queue in turn.&lt;/p&gt;
                  &lt;p&gt;If true is returned, from now on &lt;code&gt;anEdit&lt;/code&gt; must return
                  false from &lt;code&gt;canUndo&lt;/code&gt; and &lt;code&gt;canRedo&lt;/code&gt;,
                  and must throw the appropriate exception on &lt;code&gt;undo&lt;/code&gt; or
                  &lt;code&gt;redo&lt;/code&gt;.&lt;/p&gt;                
                <param>
                    anEdit the edit to be added                    
                </param>
                <return>
                    true if <code>anEdit</code> may be incorporated into this
                      edit                    
                </return>
            </javadoc>
            <method name="replaceEdit" type="boolean" line="144"/>
            <javadoc line="144">
                Returns true if this &lt;code&gt;UndoableEdit&lt;/code&gt; should replace
                  &lt;code&gt;anEdit&lt;/code&gt;. This method is used by &lt;code&gt;CompoundEdit&lt;/code&gt;
                  and the &lt;code&gt;UndoManager&lt;/code&gt;; it is called if
                  &lt;code&gt;anEdit&lt;/code&gt; could not be added to the current edit
                  (&lt;code&gt;addEdit&lt;/code&gt; returns false).
                  &lt;p&gt;
                  This method provides a way for an edit to replace an existing edit.
                  &lt;p&gt;This message is the opposite of addEdit--anEdit has typically
                  already been queued in an &lt;code&gt;UndoManager&lt;/code&gt; (or other
                  UndoableEditListener), and the receiver is being given a chance
                  to take its place.&lt;/p&gt;
                  &lt;p&gt;If true is returned, from now on anEdit must return false from
                  canUndo() and canRedo(), and must throw the appropriate
                  exception on undo() or redo().&lt;/p&gt;                
                <param>
                    anEdit the edit that replaces the current edit                    
                </param>
                <return>
                    true if this edit should replace <code>anEdit</code>                    
                </return>
            </javadoc>
            <method name="isSignificant" type="boolean" line="166"/>
            <javadoc line="166">
                Returns true if this edit is considered significant.  A significant
                  edit is typically an edit that should be presented to the user, perhaps
                  on a menu item or tooltip.  The &lt;code&gt;UndoManager&lt;/code&gt; will undo,
                  or redo, all insignificant edits to the next significant edit.                
                <return>
                    true if this edit is significant                    
                </return>
            </javadoc>
            <method name="getPresentationName" type="String" line="176"/>
            <javadoc line="176">
                Returns a localized, human-readable description of this edit, suitable
                  for use in a change log, for example.                
                <return>
                    description of this edit                    
                </return>
            </javadoc>
            <method name="getUndoPresentationName" type="String" line="184"/>
            <javadoc line="184">
                Returns a localized, human-readable description of the undoable form of
                  this edit, suitable for use as an Undo menu item, for example.
                  This is typically derived from &lt;code&gt;getPresentationName&lt;/code&gt;.                
                <return>
                    a description of the undoable form of this edit                    
                </return>
            </javadoc>
            <method name="getRedoPresentationName" type="String" line="193"/>
            <javadoc line="193">
                Returns a localized, human-readable description of the redoable form of
                  this edit, suitable for use as a Redo menu item, for example. This is
                  typically derived from &lt;code&gt;getPresentationName&lt;/code&gt;.                
                <return>
                    a description of the redoable form of this edit                    
                </return>
            </javadoc>
        </interface>
    </source>