<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.undo">
        <import package="javax.swing.event"/>
        <import package="javax.swing.UIManager"/>
        <import package="java.util"/>
        <class name="UndoManager" line="5">
            <extends class="CompoundEdit"/>
            <implements interface="UndoableEditListener"/>
            <javadoc line="5">
                {@code UndoManager} manages a list of {@code UndoableEdits},
                  providing a way to undo or redo the appropriate edits.  There are
                  two ways to add edits to an &lt;code&gt;UndoManager&lt;/code&gt;.  Add the edit
                  directly using the &lt;code&gt;addEdit&lt;/code&gt; method, or add the
                  &lt;code&gt;UndoManager&lt;/code&gt; to a bean that supports
                  &lt;code&gt;UndoableEditListener&lt;/code&gt;.  The following examples creates
                  an &lt;code&gt;UndoManager&lt;/code&gt; and adds it as an
                  &lt;code&gt;UndoableEditListener&lt;/code&gt; to a &lt;code&gt;JTextField&lt;/code&gt;:
                  &lt;pre&gt;
                  UndoManager undoManager = new UndoManager();
                  JTextField tf = ...;
                  tf.getDocument().addUndoableEditListener(undoManager);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;code&gt;UndoManager&lt;/code&gt; maintains an ordered list of edits and the
                  index of the next edit in that list. The index of the next edit is
                  either the size of the current list of edits, or if
                  &lt;code&gt;undo&lt;/code&gt; has been invoked it corresponds to the index
                  of the last significant edit that was undone. When
                  &lt;code&gt;undo&lt;/code&gt; is invoked all edits from the index of the next
                  edit to the last significant edit are undone, in reverse order.
                  For example, consider an &lt;code&gt;UndoManager&lt;/code&gt; consisting of the
                  following edits: &lt;b&gt;A&lt;/b&gt; &lt;i&gt;b&lt;/i&gt; &lt;i&gt;c&lt;/i&gt; &lt;b&gt;D&lt;/b&gt;.  Edits with a
                  upper-case letter in bold are significant, those in lower-case
                  and italicized are insignificant.
                  &lt;p&gt;
                  &lt;a name=&quot;figure1&quot;&gt;&lt;/a&gt;
                  &lt;table border=0&gt;
                  &lt;tr&gt;&lt;td&gt;
                  &lt;img src=&quot;doc-files/UndoManager-1.gif&quot;&gt;
                  &lt;tr&gt;&lt;td align=center&gt;Figure 1
                  &lt;/table&gt;
                  &lt;p&gt;
                  As shown in &lt;a href=&quot;#figure1&quot;&gt;figure 1&lt;/a&gt;, if &lt;b&gt;D&lt;/b&gt; was just added, the
                  index of the next edit will be 4. Invoking &lt;code&gt;undo&lt;/code&gt;
                  results in invoking &lt;code&gt;undo&lt;/code&gt; on &lt;b&gt;D&lt;/b&gt; and setting the
                  index of the next edit to 3 (edit &lt;i&gt;c&lt;/i&gt;), as shown in the following
                  figure.
                  &lt;p&gt;
                  &lt;a name=&quot;figure2&quot;&gt;&lt;/a&gt;
                  &lt;table border=0&gt;
                  &lt;tr&gt;&lt;td&gt;
                  &lt;img src=&quot;doc-files/UndoManager-2.gif&quot;&gt;
                  &lt;tr&gt;&lt;td align=center&gt;Figure 2
                  &lt;/table&gt;
                  &lt;p&gt;
                  The last significant edit is &lt;b&gt;A&lt;/b&gt;, so that invoking
                  &lt;code&gt;undo&lt;/code&gt; again invokes &lt;code&gt;undo&lt;/code&gt; on &lt;i&gt;c&lt;/i&gt;,
                  &lt;i&gt;b&lt;/i&gt;, and &lt;b&gt;A&lt;/b&gt;, in that order, setting the index of the
                  next edit to 0, as shown in the following figure.
                  &lt;p&gt;
                  &lt;a name=&quot;figure3&quot;&gt;&lt;/a&gt;
                  &lt;table border=0&gt;
                  &lt;tr&gt;&lt;td&gt;
                  &lt;img src=&quot;doc-files/UndoManager-3.gif&quot;&gt;
                  &lt;tr&gt;&lt;td align=center&gt;Figure 3
                  &lt;/table&gt;
                  &lt;p&gt;
                  Invoking &lt;code&gt;redo&lt;/code&gt; results in invoking &lt;code&gt;redo&lt;/code&gt; on
                  all edits between the index of the next edit and the next
                  significant edit (or the end of the list).  Continuing with the previous
                  example if &lt;code&gt;redo&lt;/code&gt; were invoked, &lt;code&gt;redo&lt;/code&gt; would in
                  turn be invoked on &lt;b&gt;A&lt;/b&gt;, &lt;i&gt;b&lt;/i&gt; and &lt;i&gt;c&lt;/i&gt;.  In addition
                  the index of the next edit is set to 3 (as shown in &lt;a
                  href=&quot;#figure2&quot;&gt;figure 2&lt;/a&gt;).
                  &lt;p&gt;
                  Adding an edit to an &lt;code&gt;UndoManager&lt;/code&gt; results in
                  removing all edits from the index of the next edit to the end of
                  the list.  Continuing with the previous example, if a new edit,
                  &lt;i&gt;e&lt;/i&gt;, is added the edit &lt;b&gt;D&lt;/b&gt; is removed from the list
                  (after having &lt;code&gt;die&lt;/code&gt; invoked on it).  If &lt;i&gt;c&lt;/i&gt; is not
                  incorporated by the next edit
                  (&lt;code&gt;&lt;i&gt;c&lt;/i&gt;.addEdit(&lt;i&gt;e&lt;/i&gt;)&lt;/code&gt; returns true), or replaced
                  by it (&lt;code&gt;&lt;i&gt;e&lt;/i&gt;.replaceEdit(&lt;i&gt;c&lt;/i&gt;)&lt;/code&gt; returns true),
                  the new edit is added after &lt;i&gt;c&lt;/i&gt;, as shown in the following
                  figure.
                  &lt;p&gt;
                  &lt;a name=&quot;figure4&quot;&gt;&lt;/a&gt;
                  &lt;table border=0&gt;
                  &lt;tr&gt;&lt;td&gt;
                  &lt;img src=&quot;doc-files/UndoManager-4.gif&quot;&gt;
                  &lt;tr&gt;&lt;td align=center&gt;Figure 4
                  &lt;/table&gt;
                  &lt;p&gt;
                  Once &lt;code&gt;end&lt;/code&gt; has been invoked on an &lt;code&gt;UndoManager&lt;/code&gt;
                  the superclass behavior is used for all &lt;code&gt;UndoableEdit&lt;/code&gt;
                  methods.  Refer to &lt;code&gt;CompoundEdit&lt;/code&gt; for more details on its
                  behavior.
                  &lt;p&gt;
                  Unlike the rest of Swing, this class is thread safe.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Ray Ryan                    
                </author>
            </javadoc>
            <declaration name="indexOfNextAdd" type="int" line="108"/>
            <declaration name="limit" type="int" line="109"/>
            <javadoc line="110">
                Creates a new &lt;code&gt;UndoManager&lt;/code&gt;.                
            </javadoc>
            <method name="UndoManager" type="constructor" line="113"/>
            <javadoc line="119">
                Returns the maximum number of edits this {@code UndoManager}holds. A value less than 0 indicates the number of edits is not
                  limited.                
                <return>
                    the maximum number of edits this {@code UndoManager} holds                    
                </return>
                <see>
                    #addEdit                    
                </see>
                <see>
                    #setLimit                    
                </see>
            </javadoc>
            <method name="getLimit" type="int" line="126"/>
            <javadoc line="129">
                Empties the undo manager sending each edit a &lt;code&gt;die&lt;/code&gt; message
                  in the process.                
                <see>
                    AbstractUndoableEdit#die                    
                </see>
            </javadoc>
            <method name="discardAllEdits" type="void" line="134">
                <scope line="135"/>
            </method>
            <javadoc line="141">
                Reduces the number of queued edits to a range of size limit,
                  centered on the index of the next edit.                
            </javadoc>
            <method name="trimForLimit" type="void" line="145">
                <scope line="146">
                    <declaration name="size" type="int" line="147"/>
                    <scope line="148">
                        <declaration name="halfLimit" type="int" line="149"/>
                        <declaration name="keepFrom" type="int" line="150"/>
                        <declaration name="keepTo" type="int" line="151"/>
                        <scope line="152"/>
                        <scope line="155"/>
                        <scope line="159">
                            <declaration name="delta" type="int" line="160"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="169">
                Removes edits in the specified range.
                  All edits in the given range (inclusive, and in reverse order)
                  will have &lt;code&gt;die&lt;/code&gt; invoked on them and are removed from
                  the list of edits. This has no effect if
                  &lt;code&gt;from&lt;/code&gt; &amp;gt; &lt;code&gt;to&lt;/code&gt;.                
                <param>
                    from the minimum index to remove                    
                </param>
                <param>
                    to the maximum index to remove                    
                </param>
            </javadoc>
            <method name="trimEdits" type="void" line="178">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="179">
                    <scope line="180">
                        <declaration name="e" type="UndoableEdit" line="181"/>
                    </scope>
                    <scope line="185"/>
                    <scope line="188"/>
                </scope>
            </method>
            <javadoc line="193">
                Sets the maximum number of edits this &lt;code&gt;UndoManager&lt;/code&gt;
                  holds. A value less than 0 indicates the number of edits is not
                  limited. If edits need to be discarded to shrink the limit,
                  &lt;code&gt;die&lt;/code&gt; will be invoked on them in the reverse
                  order they were added.  The default is 100.                
                <param>
                    l the new limit                    
                </param>
                <throws>
                    RuntimeException if this {@code UndoManager} is not in progress
                      ({@code end} has been invoked)                    
                </throws>
                <see>
                    #isInProgress                    
                </see>
                <see>
                    #end                    
                </see>
                <see>
                    #addEdit                    
                </see>
                <see>
                    #getLimit                    
                </see>
            </javadoc>
            <method name="setLimit" type="void" line="207">
                <params>
                    <param name="l" type="int"/>
                </params>
            </method>
            <javadoc line="212">
                Returns the the next significant edit to be undone if &lt;code&gt;undo&lt;/code&gt;
                  is invoked. This returns &lt;code&gt;null&lt;/code&gt; if there are no edits
                  to be undone.                
                <return>
                    the next significant edit to be undone                    
                </return>
            </javadoc>
            <method name="editToBeUndone" type="UndoableEdit" line="218">
                <declaration name="i" type="int" line="219"/>
                <scope line="220">
                    <declaration name="edit" type="UndoableEdit" line="221"/>
                    <scope line="222"/>
                </scope>
            </method>
            <javadoc line="228">
                Returns the the next significant edit to be redone if &lt;code&gt;redo&lt;/code&gt;
                  is invoked. This returns &lt;code&gt;null&lt;/code&gt; if there are no edits
                  to be redone.                
                <return>
                    the next significant edit to be redone                    
                </return>
            </javadoc>
            <method name="editToBeRedone" type="UndoableEdit" line="234">
                <declaration name="count" type="int" line="235"/>
                <declaration name="i" type="int" line="236"/>
                <scope line="237">
                    <declaration name="edit" type="UndoableEdit" line="238"/>
                    <scope line="239"/>
                </scope>
            </method>
            <javadoc line="245">
                Undoes all changes from the index of the next edit to
                  &lt;code&gt;edit&lt;/code&gt;, updating the index of the next edit appropriately.                
                <throws>
                    CannotUndoException if one of the edits throws
                      <code>CannotUndoException</code>                    
                </throws>
            </javadoc>
            <method name="undoTo" type="void" line="251">
                <params>
                    <param name="edit" type="UndoableEdit"/>
                </params>
                <declaration name="done" type="boolean" line="252"/>
                <scope line="253">
                    <declaration name="next" type="UndoableEdit" line="254"/>
                </scope>
            </method>
            <javadoc line="259">
                Redoes all changes from the index of the next edit to
                  &lt;code&gt;edit&lt;/code&gt;, updating the index of the next edit appropriately.                
                <throws>
                    CannotRedoException if one of the edits throws
                      <code>CannotRedoException</code>                    
                </throws>
            </javadoc>
            <method name="redoTo" type="void" line="265">
                <params>
                    <param name="edit" type="UndoableEdit"/>
                </params>
                <declaration name="done" type="boolean" line="266"/>
                <scope line="267">
                    <declaration name="next" type="UndoableEdit" line="268"/>
                </scope>
            </method>
            <javadoc line="273">
                Convenience method that invokes one of &lt;code&gt;undo&lt;/code&gt; or
                  &lt;code&gt;redo&lt;/code&gt;. If any edits have been undone (the index of
                  the next edit is less than the length of the edits list) this
                  invokes &lt;code&gt;redo&lt;/code&gt;, otherwise it invokes &lt;code&gt;undo&lt;/code&gt;.                
                <see>
                    #canUndoOrRedo                    
                </see>
                <see>
                    #getUndoOrRedoPresentationName                    
                </see>
                <throws>
                    CannotUndoException if one of the edits throws
                      <code>CannotUndoException</code>                    
                </throws>
                <throws>
                    CannotRedoException if one of the edits throws
                      <code>CannotRedoException</code>                    
                </throws>
            </javadoc>
            <method name="undoOrRedo" type="void" line="285">
                <scope line="286"/>
                <scope line="289"/>
            </method>
            <javadoc line="293">
                Returns true if it is possible to invoke &lt;code&gt;undo&lt;/code&gt; or
                  &lt;code&gt;redo&lt;/code&gt;.                
                <return>
                    true if invoking <code>canUndoOrRedo</code> is valid                    
                </return>
                <see>
                    #undoOrRedo                    
                </see>
            </javadoc>
            <method name="canUndoOrRedo" type="boolean" line="299">
                <scope line="300"/>
                <scope line="303"/>
            </method>
            <javadoc line="307">
                Undoes the appropriate edits.  If &lt;code&gt;end&lt;/code&gt; has been
                  invoked this calls through to the superclass, otherwise
                  this invokes &lt;code&gt;undo&lt;/code&gt; on all edits between the
                  index of the next edit and the last significant edit, updating
                  the index of the next edit appropriately.                
                <throws>
                    CannotUndoException if one of the edits throws
                      <code>CannotUndoException</code> or there are no edits
                      to be undone                    
                </throws>
                <see>
                    CompoundEdit#end                    
                </see>
                <see>
                    #canUndo                    
                </see>
                <see>
                    #editToBeUndone                    
                </see>
            </javadoc>
            <method name="undo" type="void" line="320">
                <scope line="321">
                    <declaration name="edit" type="UndoableEdit" line="322"/>
                    <scope line="323"/>
                </scope>
                <scope line="328"/>
            </method>
            <javadoc line="332">
                Returns true if edits may be undone.  If &lt;code&gt;end&lt;/code&gt; has
                  been invoked, this returns the value from super.  Otherwise
                  this returns true if there are any edits to be undone
                  (&lt;code&gt;editToBeUndone&lt;/code&gt; returns non-&lt;code&gt;null&lt;/code&gt;).                
                <return>
                    true if there are edits to be undone                    
                </return>
                <see>
                    CompoundEdit#canUndo                    
                </see>
                <see>
                    #editToBeUndone                    
                </see>
            </javadoc>
            <method name="canUndo" type="boolean" line="341">
                <scope line="342">
                    <declaration name="edit" type="UndoableEdit" line="343"/>
                </scope>
                <scope line="346"/>
            </method>
            <javadoc line="350">
                Redoes the appropriate edits.  If &lt;code&gt;end&lt;/code&gt; has been
                  invoked this calls through to the superclass.  Otherwise
                  this invokes &lt;code&gt;redo&lt;/code&gt; on all edits between the
                  index of the next edit and the next significant edit, updating
                  the index of the next edit appropriately.                
                <throws>
                    CannotRedoException if one of the edits throws
                      <code>CannotRedoException</code> or there are no edits
                      to be redone                    
                </throws>
                <see>
                    CompoundEdit#end                    
                </see>
                <see>
                    #canRedo                    
                </see>
                <see>
                    #editToBeRedone                    
                </see>
            </javadoc>
            <method name="redo" type="void" line="363">
                <scope line="364">
                    <declaration name="edit" type="UndoableEdit" line="365"/>
                    <scope line="366"/>
                </scope>
                <scope line="371"/>
            </method>
            <javadoc line="375">
                Returns true if edits may be redone.  If &lt;code&gt;end&lt;/code&gt; has
                  been invoked, this returns the value from super.  Otherwise,
                  this returns true if there are any edits to be redone
                  (&lt;code&gt;editToBeRedone&lt;/code&gt; returns non-&lt;code&gt;null&lt;/code&gt;).                
                <return>
                    true if there are edits to be redone                    
                </return>
                <see>
                    CompoundEdit#canRedo                    
                </see>
                <see>
                    #editToBeRedone                    
                </see>
            </javadoc>
            <method name="canRedo" type="boolean" line="384">
                <scope line="385">
                    <declaration name="edit" type="UndoableEdit" line="386"/>
                </scope>
                <scope line="389"/>
            </method>
            <javadoc line="393">
                Adds an &lt;code&gt;UndoableEdit&lt;/code&gt; to this
                  &lt;code&gt;UndoManager&lt;/code&gt;, if it&apos;s possible.  This removes all
                  edits from the index of the next edit to the end of the edits
                  list.  If &lt;code&gt;end&lt;/code&gt; has been invoked the edit is not added
                  and &lt;code&gt;false&lt;/code&gt; is returned.  If &lt;code&gt;end&lt;/code&gt; hasn&apos;t
                  been invoked this returns &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    anEdit the edit to be added                    
                </param>
                <return>
                    true if <code>anEdit</code> can be incorporated into this
                      edit                    
                </return>
                <see>
                    CompoundEdit#end                    
                </see>
                <see>
                    CompoundEdit#addEdit                    
                </see>
            </javadoc>
            <method name="addEdit" type="boolean" line="406">
                <params>
                    <param name="anEdit" type="UndoableEdit"/>
                </params>
                <declaration name="retVal" type="boolean" line="407"/>
                <scope line="410"/>
            </method>
            <javadoc line="417">
                Turns this &lt;code&gt;UndoManager&lt;/code&gt; into a normal
                  &lt;code&gt;CompoundEdit&lt;/code&gt;.  This removes all edits that have
                  been undone.                
                <see>
                    CompoundEdit#end                    
                </see>
            </javadoc>
            <method name="end" type="void" line="423"/>
            <javadoc line="427">
                Convenience method that returns either
                  &lt;code&gt;getUndoPresentationName&lt;/code&gt; or
                  &lt;code&gt;getRedoPresentationName&lt;/code&gt;.  If the index of the next
                  edit equals the size of the edits list,
                  &lt;code&gt;getUndoPresentationName&lt;/code&gt; is returned, otherwise
                  &lt;code&gt;getRedoPresentationName&lt;/code&gt; is returned.                
                <return>
                    undo or redo name                    
                </return>
            </javadoc>
            <method name="getUndoOrRedoPresentationName" type="String" line="436">
                <scope line="437"/>
                <scope line="440"/>
            </method>
            <javadoc line="444">
                Returns a description of the undoable form of this edit.
                  If &lt;code&gt;end&lt;/code&gt; has been invoked this calls into super.
                  Otherwise if there are edits to be undone, this returns
                  the value from the next significant edit that will be undone.
                  If there are no edits to be undone and &lt;code&gt;end&lt;/code&gt; has not
                  been invoked this returns the value from the &lt;code&gt;UIManager&lt;/code&gt;
                  property &quot;AbstractUndoableEdit.undoText&quot;.                
                <return>
                    a description of the undoable form of this edit                    
                </return>
                <see>
                    #undo                    
                </see>
                <see>
                    CompoundEdit#getUndoPresentationName                    
                </see>
            </javadoc>
            <method name="getUndoPresentationName" type="String" line="456">
                <scope line="457">
                    <scope line="458"/>
                    <scope line="461"/>
                </scope>
                <scope line="465"/>
            </method>
            <javadoc line="469">
                Returns a description of the redoable form of this edit.
                  If &lt;code&gt;end&lt;/code&gt; has been invoked this calls into super.
                  Otherwise if there are edits to be redone, this returns
                  the value from the next significant edit that will be redone.
                  If there are no edits to be redone and &lt;code&gt;end&lt;/code&gt; has not
                  been invoked this returns the value from the &lt;code&gt;UIManager&lt;/code&gt;
                  property &quot;AbstractUndoableEdit.redoText&quot;.                
                <return>
                    a description of the redoable form of this edit                    
                </return>
                <see>
                    #redo                    
                </see>
                <see>
                    CompoundEdit#getRedoPresentationName                    
                </see>
            </javadoc>
            <method name="getRedoPresentationName" type="String" line="481">
                <scope line="482">
                    <scope line="483"/>
                    <scope line="486"/>
                </scope>
                <scope line="490"/>
            </method>
            <javadoc line="494">
                An &lt;code&gt;UndoableEditListener&lt;/code&gt; method. This invokes
                  &lt;code&gt;addEdit&lt;/code&gt; with &lt;code&gt;e.getEdit()&lt;/code&gt;.                
                <param>
                    e the <code>UndoableEditEvent</code> the
                      <code>UndoableEditEvent</code> will be added from                    
                </param>
                <see>
                    #addEdit                    
                </see>
            </javadoc>
            <method name="undoableEditHappened" type="void" line="501">
                <params>
                    <param name="e" type="UndoableEditEvent"/>
                </params>
            </method>
            <javadoc line="504">
                Returns a string that displays and identifies this
                  object&apos;s properties.                
                <return>
                    a String representation of this object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="509"/>
        </class>
    </source>