<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="javax.swing.event"/>
        <class name="DefaultListModel" line="5">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="AbstractListModel">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </extends>
            <javadoc line="5">
                This class loosely implements the &lt;code&gt;java.util.Vector&lt;/code&gt;
                  API, in that it implements the 1.1.x version of
                  &lt;code&gt;java.util.Vector&lt;/code&gt;, has no collection class support,
                  and notifies the &lt;code&gt;ListDataListener&lt;/code&gt;s when changes occur.
                  Presently it delegates to a &lt;code&gt;Vector&lt;/code&gt;,
                  in a future release it will be a real Collection implementation.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <param>
                    <E>
                      the type of the elements of this model                    
                </param>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="delegate" type="Vector&lt;E&gt;" line="26"/>
            <javadoc line="27">
                Returns the number of components in this list.
                  &lt;p&gt;
                  This method is identical to &lt;code&gt;size&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  This method exists in conjunction with &lt;code&gt;setSize&lt;/code&gt; so that
                  &lt;code&gt;size&lt;/code&gt; is identifiable as a JavaBean property.                
                <return>
                    the number of components in this list                    
                </return>
                <see>
                    #size()                    
                </see>
            </javadoc>
            <method name="getSize" type="int" line="37"/>
            <javadoc line="40">
                Returns the component at the specified index.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although this method is not deprecated, the preferred
                  method to use is &lt;code&gt;get(int)&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  &lt;/blockquote&gt;                
                <param>
                    index   an index into this list                    
                </param>
                <return>
                    the component at the specified index                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException  if the <code>index</code>
                      is negative or greater than the current size of this
                      list                    
                </exception>
                <see>
                    #get(int)                    
                </see>
            </javadoc>
            <method name="getElementAt" type="E" line="54">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="57">
                Copies the components of this list into the specified array.
                  The array must be big enough to hold all the objects in this list,
                  else an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is thrown.                
                <param>
                    anArray   the array into which the components get copied                    
                </param>
                <see>
                    Vector#copyInto(Object[])                    
                </see>
            </javadoc>
            <method name="copyInto" type="void" line="64">
                <params>
                    <param name="anArray" type="Object"/>
                </params>
            </method>
            <javadoc line="67">
                Trims the capacity of this list to be the list&apos;s current size.                
                <see>
                    Vector#trimToSize()                    
                </see>
            </javadoc>
            <method name="trimToSize" type="void" line="71"/>
            <javadoc line="74">
                Increases the capacity of this list, if necessary, to ensure
                  that it can hold at least the number of components specified by
                  the minimum capacity argument.                
                <param>
                    minCapacity   the desired minimum capacity                    
                </param>
                <see>
                    Vector#ensureCapacity(int)                    
                </see>
            </javadoc>
            <method name="ensureCapacity" type="void" line="81">
                <params>
                    <param name="minCapacity" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Sets the size of this list.                
                <param>
                    newSize   the new size of this list                    
                </param>
                <see>
                    Vector#setSize(int)                    
                </see>
            </javadoc>
            <method name="setSize" type="void" line="89">
                <params>
                    <param name="newSize" type="int"/>
                </params>
                <declaration name="oldSize" type="int" line="90"/>
                <scope line="92"/>
                <scope line="95"/>
            </method>
            <javadoc line="99">
                Returns the current capacity of this list.                
                <return>
                    the current capacity                    
                </return>
                <see>
                    Vector#capacity()                    
                </see>
            </javadoc>
            <method name="capacity" type="int" line="104"/>
            <javadoc line="107">
                Returns the number of components in this list.                
                <return>
                    the number of components in this list                    
                </return>
                <see>
                    Vector#size()                    
                </see>
            </javadoc>
            <method name="size" type="int" line="112"/>
            <javadoc line="115">
                Tests whether this list has any components.                
                <return>
                    <code>true</code> if and only if this list has
                      no components, that is, its size is zero;
                      <code>false</code> otherwise                    
                </return>
                <see>
                    Vector#isEmpty()                    
                </see>
            </javadoc>
            <method name="isEmpty" type="boolean" line="122"/>
            <javadoc line="125">
                Returns an enumeration of the components of this list.                
                <return>
                    an enumeration of the components of this list                    
                </return>
                <see>
                    Vector#elements()                    
                </see>
            </javadoc>
            <method name="elements" type="Enumeration<E>" line="130"/>
            <javadoc line="133">
                Tests whether the specified object is a component in this list.                
                <param>
                    elem   an object                    
                </param>
                <return>
                    <code>true</code> if the specified object
                      is the same as a component in this list                    
                </return>
                <see>
                    Vector#contains(Object)                    
                </see>
            </javadoc>
            <method name="contains" type="boolean" line="140">
                <params>
                    <param name="elem" type="Object"/>
                </params>
            </method>
            <javadoc line="143">
                Searches for the first occurrence of &lt;code&gt;elem&lt;/code&gt;.                
                <param>
                    elem   an object                    
                </param>
                <return>
                    the index of the first occurrence of the argument in this
                      list; returns <code>-1</code> if the object is not found                    
                </return>
                <see>
                    Vector#indexOf(Object)                    
                </see>
            </javadoc>
            <method name="indexOf" type="int" line="150">
                <params>
                    <param name="elem" type="Object"/>
                </params>
            </method>
            <javadoc line="153">
                Searches for the first occurrence of &lt;code&gt;elem&lt;/code&gt;, beginning
                  the search at &lt;code&gt;index&lt;/code&gt;.                
                <param>
                    elem    an desired component                    
                </param>
                <param>
                    index   the index from which to begin searching                    
                </param>
                <return>
                    the index where the first occurrence of <code>elem</code>
                      is found after <code>index</code>; returns <code>-1</code>
                      if the <code>elem</code> is not found in the list                    
                </return>
                <see>
                    Vector#indexOf(Object,int)                    
                </see>
            </javadoc>
            <method name="indexOf" type="int" line="163">
                <params>
                    <param name="elem" type="Object"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Returns the index of the last occurrence of &lt;code&gt;elem&lt;/code&gt;.                
                <param>
                    elem   the desired component                    
                </param>
                <return>
                    the index of the last occurrence of <code>elem</code>
                      in the list; returns <code>-1</code> if the object is not found                    
                </return>
                <see>
                    Vector#lastIndexOf(Object)                    
                </see>
            </javadoc>
            <method name="lastIndexOf" type="int" line="173">
                <params>
                    <param name="elem" type="Object"/>
                </params>
            </method>
            <javadoc line="176">
                Searches backwards for &lt;code&gt;elem&lt;/code&gt;, starting from the
                  specified index, and returns an index to it.                
                <param>
                    elem    the desired component                    
                </param>
                <param>
                    index   the index to start searching from                    
                </param>
                <return>
                    the index of the last occurrence of the <code>elem</code>
                      in this list at position less than <code>index</code>;
                      returns <code>-1</code> if the object is not found                    
                </return>
                <see>
                    Vector#lastIndexOf(Object,int)                    
                </see>
            </javadoc>
            <method name="lastIndexOf" type="int" line="186">
                <params>
                    <param name="elem" type="Object"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="189">
                Returns the component at the specified index.
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if the index
                  is negative or not less than the size of the list.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although this method is not deprecated, the preferred
                  method to use is &lt;code&gt;get(int)&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  &lt;/blockquote&gt;                
                <param>
                    index   an index into this list                    
                </param>
                <return>
                    the component at the specified index                    
                </return>
                <see>
                    #get(int)                    
                </see>
                <see>
                    Vector#elementAt(int)                    
                </see>
            </javadoc>
            <method name="elementAt" type="E" line="203">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="206">
                Returns the first component of this list.
                  Throws a &lt;code&gt;NoSuchElementException&lt;/code&gt; if this
                  vector has no components.                
                <return>
                    the first component of this list                    
                </return>
                <see>
                    Vector#firstElement()                    
                </see>
            </javadoc>
            <method name="firstElement" type="E" line="213"/>
            <javadoc line="216">
                Returns the last component of the list.
                  Throws a &lt;code&gt;NoSuchElementException&lt;/code&gt; if this vector
                  has no components.                
                <return>
                    the last component of the list                    
                </return>
                <see>
                    Vector#lastElement()                    
                </see>
            </javadoc>
            <method name="lastElement" type="E" line="223"/>
            <javadoc line="226">
                Sets the component at the specified &lt;code&gt;index&lt;/code&gt; of this
                  list to be the specified element. The previous component at that
                  position is discarded.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if the index
                  is invalid.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although this method is not deprecated, the preferred
                  method to use is &lt;code&gt;set(int,Object)&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  &lt;/blockquote&gt;                
                <param>
                    element what the component is to be set to                    
                </param>
                <param>
                    index   the specified index                    
                </param>
                <see>
                    #set(int,Object)                    
                </see>
                <see>
                    Vector#setElementAt(Object,int)                    
                </see>
            </javadoc>
            <method name="setElementAt" type="void" line="243">
                <params>
                    <param name="element" type="E"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="247">
                Deletes the component at the specified index.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if the index
                  is invalid.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although this method is not deprecated, the preferred
                  method to use is &lt;code&gt;remove(int)&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  &lt;/blockquote&gt;                
                <param>
                    index   the index of the object to remove                    
                </param>
                <see>
                    #remove(int)                    
                </see>
                <see>
                    Vector#removeElementAt(int)                    
                </see>
            </javadoc>
            <method name="removeElementAt" type="void" line="261">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="265">
                Inserts the specified element as a component in this list at the
                  specified &lt;code&gt;index&lt;/code&gt;.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if the index
                  is invalid.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although this method is not deprecated, the preferred
                  method to use is &lt;code&gt;add(int,Object)&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  &lt;/blockquote&gt;                
                <param>
                    element the component to insert                    
                </param>
                <param>
                    index   where to insert the new component                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if the index was invalid                    
                </exception>
                <see>
                    #add(int,Object)                    
                </see>
                <see>
                    Vector#insertElementAt(Object,int)                    
                </see>
            </javadoc>
            <method name="insertElementAt" type="void" line="282">
                <params>
                    <param name="element" type="E"/>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="286">
                Adds the specified component to the end of this list.                
                <param>
                    element   the component to be added                    
                </param>
                <see>
                    Vector#addElement(Object)                    
                </see>
            </javadoc>
            <method name="addElement" type="void" line="291">
                <params>
                    <param name="element" type="E"/>
                </params>
                <declaration name="index" type="int" line="292"/>
            </method>
            <javadoc line="296">
                Removes the first (lowest-indexed) occurrence of the argument
                  from this list.                
                <param>
                    obj   the component to be removed                    
                </param>
                <return>
                    <code>true</code> if the argument was a component of this
                      list; <code>false</code> otherwise                    
                </return>
                <see>
                    Vector#removeElement(Object)                    
                </see>
            </javadoc>
            <method name="removeElement" type="boolean" line="304">
                <params>
                    <param name="obj" type="Object"/>
                </params>
                <declaration name="index" type="int" line="305"/>
                <declaration name="rv" type="boolean" line="306"/>
                <scope line="307"/>
            </method>
            <javadoc line="312">
                Removes all components from this list and sets its size to zero.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Although this method is not deprecated, the preferred
                  method to use is &lt;code&gt;clear&lt;/code&gt;, which implements the
                  &lt;code&gt;List&lt;/code&gt; interface defined in the 1.2 Collections framework.
                  &lt;/blockquote&gt;                
                <see>
                    #clear()                    
                </see>
                <see>
                    Vector#removeAllElements()                    
                </see>
            </javadoc>
            <method name="removeAllElements" type="void" line="322">
                <declaration name="index1" type="int" line="323"/>
                <scope line="325"/>
            </method>
            <javadoc line="329">
                Returns a string that displays and identifies this
                  object&apos;s properties.                
                <return>
                    a String representation of this object                    
                </return>
            </javadoc>
            <method name="toString" type="String" line="334"/>
            <javadoc line="337">
                Returns an array containing all of the elements in this list in the
                  correct order.                
                <return>
                    an array containing the elements of the list                    
                </return>
                <see>
                    Vector#toArray()                    
                </see>
            </javadoc>
            <method name="toArray" type="Object[]" line="343">
                <declaration name="rv" type="Object[]" line="344"/>
            </method>
            <javadoc line="348">
                Returns the element at the specified position in this list.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  if the index is out of range
                  (&lt;code&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/code&gt;).                
                <param>
                    index index of element to return                    
                </param>
            </javadoc>
            <method name="get" type="E" line="356">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="359">
                Replaces the element at the specified position in this list with the
                  specified element.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  if the index is out of range
                  (&lt;code&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/code&gt;).                
                <param>
                    index index of element to replace                    
                </param>
                <param>
                    element element to be stored at the specified position                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
            </javadoc>
            <method name="set" type="E" line="370">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
                <declaration name="rv" type="E" line="371"/>
            </method>
            <javadoc line="376">
                Inserts the specified element at the specified position in this list.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; if the
                  index is out of range
                  (&lt;code&gt;index &amp;lt; 0 || index &amp;gt; size()&lt;/code&gt;).                
                <param>
                    index index at which the specified element is to be inserted                    
                </param>
                <param>
                    element element to be inserted                    
                </param>
            </javadoc>
            <method name="add" type="void" line="385">
                <params>
                    <param name="index" type="int"/>
                    <param name="element" type="E"/>
                </params>
            </method>
            <javadoc line="389">
                Removes the element at the specified position in this list.
                  Returns the element that was removed from the list.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  if the index is out of range
                  (&lt;code&gt;index &amp;lt; 0 || index &amp;gt;= size()&lt;/code&gt;).                
                <param>
                    index the index of the element to removed                    
                </param>
                <return>
                    the element previously at the specified position                    
                </return>
            </javadoc>
            <method name="remove" type="E" line="399">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="rv" type="E" line="400"/>
            </method>
            <javadoc line="405">
                Removes all of the elements from this list.  The list will
                  be empty after this call returns (unless it throws an exception).                
            </javadoc>
            <method name="clear" type="void" line="409">
                <declaration name="index1" type="int" line="410"/>
                <scope line="412"/>
            </method>
            <javadoc line="416">
                Deletes the components at the specified range of indexes.
                  The removal is inclusive, so specifying a range of (1,5)
                  removes the component at index 1 and the component at index 5,
                  as well as all components in between.
                  &lt;p&gt;
                  Throws an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
                  if the index was invalid.
                  Throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if
                  &lt;code&gt;fromIndex &amp;gt; toIndex&lt;/code&gt;.                
                <param>
                    fromIndex the index of the lower end of the range                    
                </param>
                <param>
                    toIndex   the index of the upper end of the range                    
                </param>
                <see>
                    #remove(int)                    
                </see>
            </javadoc>
            <method name="removeRange" type="void" line="430">
                <params>
                    <param name="fromIndex" type="int"/>
                    <param name="toIndex" type="int"/>
                </params>
                <scope line="431"/>
                <scope line="434"/>
            </method>
        </class>
    </source>