<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <class name="Spring" line="29">
            <comment line="194">
                                
            </comment>
            <comment line="199">
                                
            </comment>
            <comment line="203">
                                
            </comment>
            <comment line="207">
                                
            </comment>
            <comment line="341">
                                
            </comment>
            <comment line="364">
                                
            </comment>
            <comment line="384">
                                
            </comment>
            <comment line="424">
                Use the instance variables of the StaticSpring superclass to
                 cache values that have already been calculated.                
            </comment>
            <comment line="426">
                                
            </comment>
            <comment line="605">
                Remove these, they&apos;re not used often and can be created using minus -
                 as per these implementations.                
            </comment>
            <comment line="608">
                                
            </comment>
            <comment line="612">
                public static Spring min(Spring s1, Spring s2) {
                return minus(max(minus(s1), minus(s2)));
                }                
            </comment>
            <javadoc line="29">
                An instance of the &lt;code&gt;Spring&lt;/code&gt; class holds three properties that
                  characterize its behavior: the &lt;em&gt;minimum&lt;/em&gt;, &lt;em&gt;preferred&lt;/em&gt;, and
                  &lt;em&gt;maximum&lt;/em&gt; values. Each of these properties may be involved in
                  defining its fourth, &lt;em&gt;value&lt;/em&gt;, property based on a series of rules.
                  &lt;p&gt;
                  An instance of the &lt;code&gt;Spring&lt;/code&gt; class can be visualized as a
                  mechanical spring that provides a corrective force as the spring is compressed
                  or stretched away from its preferred value. This force is modelled
                  as linear function of the distance from the preferred value, but with
                  two different constants -- one for the compressional force and one for the
                  tensional one. Those constants are specified by the minimum and maximum
                  values of the spring such that a spring at its minimum value produces an
                  equal and opposite force to that which is created when it is at its
                  maximum value. The difference between the &lt;em&gt;preferred&lt;/em&gt; and
                  &lt;em&gt;minimum&lt;/em&gt; values, therefore, represents the ease with which the
                  spring can be compressed and the difference between its &lt;em&gt;maximum&lt;/em&gt;
                  and &lt;em&gt;preferred&lt;/em&gt; values, indicates the ease with which the
                  &lt;code&gt;Spring&lt;/code&gt; can be extended.
                  See the {@link #sum} method for details.
                  &lt;p&gt;
                  By defining simple arithmetic operations on &lt;code&gt;Spring&lt;/code&gt;s,
                  the behavior of a collection of &lt;code&gt;Spring&lt;/code&gt;s
                  can be reduced to that of an ordinary (non-compound) &lt;code&gt;Spring&lt;/code&gt;. We define
                  the &quot;+&quot;, &quot;-&quot;, &lt;em&gt;max&lt;/em&gt;, and &lt;em&gt;min&lt;/em&gt; operators on
                  &lt;code&gt;Spring&lt;/code&gt;s so that, in each case, the result is a &lt;code&gt;Spring&lt;/code&gt;
                  whose characteristics bear a useful mathematical relationship to its constituent
                  springs.
                  &lt;p&gt;
                  A &lt;code&gt;Spring&lt;/code&gt; can be treated as a pair of intervals
                  with a single common point: the preferred value.
                  The following rules define some of the
                  arithmetic operators that can be applied to intervals
                  (&lt;code&gt;[a, b]&lt;/code&gt; refers to the interval
                  from &lt;code&gt;a&lt;/code&gt;
                  to &lt;code&gt;b&lt;/code&gt;,
                  where &lt;code&gt;a &amp;lt;= b&lt;/code&gt;).
                  &lt;p&gt;
                  &lt;pre&gt;
                  [a1, b1] + [a2, b2] = [a1 + a2, b1 + b2]
                  -[a, b] = [-b, -a]
                  max([a1, b1], [a2, b2]) = [max(a1, a2), max(b1, b2)]
                  &lt;/pre&gt;
                  &lt;p&gt;
                  If we denote &lt;code&gt;Spring&lt;/code&gt;s as &lt;code&gt;[a, b, c]&lt;/code&gt;,
                  where &lt;code&gt;a &amp;lt;= b &amp;lt;= c&lt;/code&gt;, we can define the same
                  arithmetic operators on &lt;code&gt;Spring&lt;/code&gt;s:
                  &lt;p&gt;
                  &lt;pre&gt;
                  [a1, b1, c1] + [a2, b2, c2] = [a1 + a2, b1 + b2, c1 + c2]
                  -[a, b, c] = [-c, -b, -a]
                  max([a1, b1, c1], [a2, b2, c2]) = [max(a1, a2), max(b1, b2), max(c1, c2)]
                  &lt;/pre&gt;
                  &lt;p&gt;
                  With both intervals and &lt;code&gt;Spring&lt;/code&gt;s we can define &quot;-&quot; and &lt;em&gt;min&lt;/em&gt;
                  in terms of negation:
                  &lt;p&gt;
                  &lt;pre&gt;
                  X - Y = X + (-Y)
                  min(X, Y) = -max(-X, -Y)
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For the static methods in this class that embody the arithmetic
                  operators, we do not actually perform the operation in question as
                  that would snapshot the values of the properties of the method&apos;s arguments
                  at the time the static method is called. Instead, the static methods
                  create a new &lt;code&gt;Spring&lt;/code&gt; instance containing references to
                  the method&apos;s arguments so that the characteristics of the new spring track the
                  potentially changing characteristics of the springs from which it
                  was made. This is a little like the idea of a &lt;em&gt;lazy value&lt;/em&gt;
                  in a functional language.
                  &lt;p&gt;
                  If you are implementing a &lt;code&gt;SpringLayout&lt;/code&gt; you
                  can find further information and examples in
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/layout/spring.html&quot;&gt;How to Use SpringLayout&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    SpringLayout                    
                </see>
                <see>
                    SpringLayout.Constraints                    
                </see>
                <author>
                    Philip Milne                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="UNSET" type="int" line="132"/>
            <javadoc line="132">
                An integer value signifying that a property value has not yet been calculated.                
            </javadoc>
            <javadoc line="137">
                Used by factory methods to create a &lt;code&gt;Spring&lt;/code&gt;.                
                <see>
                    #constant(int)                    
                </see>
                <see>
                    #constant(int,int,int)                    
                </see>
                <see>
                    #max                    
                </see>
                <see>
                    #minus                    
                </see>
                <see>
                    #sum                    
                </see>
                <see>
                    SpringLayout.Constraints                    
                </see>
            </javadoc>
            <method name="Spring" type="constructor" line="147"/>
            <method name="getMinimumValue" type="int" line="149"/>
            <javadoc line="149">
                Returns the &lt;em&gt;minimum&lt;/em&gt; value of this &lt;code&gt;Spring&lt;/code&gt;.                
                <return>
                    the <code>minimumValue</code> property of this <code>Spring</code>                    
                </return>
            </javadoc>
            <method name="getPreferredValue" type="int" line="156"/>
            <javadoc line="156">
                Returns the &lt;em&gt;preferred&lt;/em&gt; value of this &lt;code&gt;Spring&lt;/code&gt;.                
                <return>
                    the <code>preferredValue</code> of this <code>Spring</code>                    
                </return>
            </javadoc>
            <method name="getMaximumValue" type="int" line="163"/>
            <javadoc line="163">
                Returns the &lt;em&gt;maximum&lt;/em&gt; value of this &lt;code&gt;Spring&lt;/code&gt;.                
                <return>
                    the <code>maximumValue</code> property of this <code>Spring</code>                    
                </return>
            </javadoc>
            <method name="getValue" type="int" line="170"/>
            <javadoc line="170">
                Returns the current &lt;em&gt;value&lt;/em&gt; of this &lt;code&gt;Spring&lt;/code&gt;.                
                <return>
                    the <code>value</code> property of this <code>Spring</code>                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="179"/>
            <javadoc line="179">
                Sets the current &lt;em&gt;value&lt;/em&gt; of this &lt;code&gt;Spring&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;.                
                <param>
                    value the new setting of the <code>value</code> property                    
                </param>
                <see>
                    #getValue                    
                </see>
            </javadoc>
            <method name="range" type="double" line="188">
                <params>
                    <param name="contract" type="boolean"/>
                </params>
            </method>
            <method name="getStrain" type="double" line="193">
                <declaration name="delta" type="double" line="194"/>
            </method>
            <method name="setStrain" type="void" line="198">
                <params>
                    <param name="strain" type="double"/>
                </params>
            </method>
            <method name="isCyclic" type="boolean" line="202">
                <params>
                    <param name="l" type="SpringLayout"/>
                </params>
            </method>
            <class name="AbstractSpring" line="206">
                <extends class="Spring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="size" type="int" line="207"/>
                <method name="getValue" type="int" line="209"/>
                <method name="setValue" type="void" line="213">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <scope line="214"/>
                    <scope line="217"/>
                    <scope line="219"/>
                </method>
                <method name="clear" type="void" line="224"/>
                <method name="setNonClearValue" type="void" line="228">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
            </class>
            <class name="StaticSpring" line="233">
                <extends class="AbstractSpring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="min" type="int" line="234"/>
                <declaration name="pref" type="int" line="235"/>
                <declaration name="max" type="int" line="236"/>
                <method name="StaticSpring" type="constructor" line="238">
                    <params>
                        <param name="pref" type="int"/>
                    </params>
                </method>
                <method name="StaticSpring" type="constructor" line="242">
                    <params>
                        <param name="min" type="int"/>
                        <param name="pref" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                </method>
                <method name="toString" type="String" line="248"/>
                <method name="getMinimumValue" type="int" line="252"/>
                <method name="getPreferredValue" type="int" line="256"/>
                <method name="getMaximumValue" type="int" line="260"/>
            </class>
            <class name="NegativeSpring" line="265">
                <extends class="Spring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="s" type="Spring" line="266"/>
                <method name="NegativeSpring" type="constructor" line="268">
                    <params>
                        <param name="s" type="Spring"/>
                    </params>
                </method>
                <method name="getMinimumValue" type="int" line="275"/>
                <method name="getPreferredValue" type="int" line="279"/>
                <method name="getMaximumValue" type="int" line="283"/>
                <method name="getValue" type="int" line="287"/>
                <method name="setValue" type="void" line="291">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                    <comment line="293">
                        No need to check for UNSET as
                         Integer.MIN_VALUE == -Integer.MIN_VALUE.                        
                    </comment>
                </method>
                <method name="isCyclic" type="boolean" line="297">
                    <params>
                        <param name="l" type="SpringLayout"/>
                    </params>
                </method>
            </class>
            <class name="ScaleSpring" line="302">
                <extends class="Spring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="s" type="Spring" line="303"/>
                <declaration name="factor" type="float" line="304"/>
                <method name="ScaleSpring" type="constructor" line="306">
                    <params>
                        <param name="s" type="Spring"/>
                        <param name="factor" type="float"/>
                    </params>
                </method>
                <method name="getMinimumValue" type="int" line="311"/>
                <method name="getPreferredValue" type="int" line="315"/>
                <method name="getMaximumValue" type="int" line="319"/>
                <method name="getValue" type="int" line="323"/>
                <method name="setValue" type="void" line="327">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <scope line="328"/>
                    <scope line="330"/>
                </method>
                <method name="isCyclic" type="boolean" line="335">
                    <params>
                        <param name="l" type="SpringLayout"/>
                    </params>
                </method>
            </class>
            <class name="WidthSpring" line="340">
                <extends class="AbstractSpring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="c" type="Component" line="341"/>
                <method name="WidthSpring" type="constructor" line="343">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="getMinimumValue" type="int" line="347"/>
                <method name="getPreferredValue" type="int" line="351"/>
                <method name="getMaximumValue" type="int" line="355">
                    <comment line="357">
                        We will be doing arithmetic with the results of this call,
                         so if a returned value is Integer.MAX_VALUE we will get
                         arithmetic overflow. Truncate such values.                        
                    </comment>
                </method>
            </class>
            <class name="HeightSpring" line="363">
                <extends class="AbstractSpring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="c" type="Component" line="364"/>
                <method name="HeightSpring" type="constructor" line="366">
                    <params>
                        <param name="c" type="Component"/>
                    </params>
                </method>
                <method name="getMinimumValue" type="int" line="370"/>
                <method name="getPreferredValue" type="int" line="374"/>
                <method name="getMaximumValue" type="int" line="378"/>
            </class>
            <class name="SpringMap" line="383">
                <extends class="Spring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="s" type="Spring" line="384"/>
                <method name="SpringMap" type="constructor" line="386">
                    <params>
                        <param name="s" type="Spring"/>
                    </params>
                </method>
                <method name="map" type="int" line="390"/>
                <method name="inv" type="int" line="392"/>
                <method name="getMinimumValue" type="int" line="394"/>
                <method name="getPreferredValue" type="int" line="398"/>
                <method name="getMaximumValue" type="int" line="402"/>
                <method name="getValue" type="int" line="406"/>
                <method name="setValue" type="void" line="410">
                    <params>
                        <param name="value" type="int"/>
                    </params>
                    <scope line="411"/>
                    <scope line="413"/>
                </method>
                <method name="isCyclic" type="boolean" line="418">
                    <params>
                        <param name="l" type="SpringLayout"/>
                    </params>
                </method>
            </class>
            <class name="CompoundSpring" line="425">
                <extends class="StaticSpring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <declaration name="s1" type="Spring" line="426"/>
                <declaration name="s2" type="Spring" line="427"/>
                <method name="CompoundSpring" type="constructor" line="429">
                    <params>
                        <param name="s1" type="Spring"/>
                        <param name="s2" type="Spring"/>
                    </params>
                </method>
                <method name="toString" type="String" line="435"/>
                <method name="clear" type="void" line="439"/>
                <method name="op" type="int" line="446"/>
                <method name="getMinimumValue" type="int" line="448">
                    <scope line="449"/>
                </method>
                <method name="getPreferredValue" type="int" line="455">
                    <scope line="456"/>
                </method>
                <method name="getMaximumValue" type="int" line="462">
                    <scope line="463"/>
                </method>
                <method name="getValue" type="int" line="469">
                    <scope line="470"/>
                </method>
                <method name="isCyclic" type="boolean" line="476">
                    <params>
                        <param name="l" type="SpringLayout"/>
                    </params>
                </method>
            </class>
            <class name="SumSpring" line="481">
                <extends class="CompoundSpring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <method name="SumSpring" type="constructor" line="482">
                    <params>
                        <param name="s1" type="Spring"/>
                        <param name="s2" type="Spring"/>
                    </params>
                </method>
                <method name="op" type="int" line="486">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                </method>
                <method name="setNonClearValue" type="void" line="490">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
            </class>
            <class name="MaxSpring" line="497">
                <extends class="CompoundSpring"/>
                <comment line="273">
                    Note the use of max value rather than minimum value here.
                     See the opening preamble on arithmetic with springs.                    
                </comment>
                <comment line="298">
                                        
                </comment>
                <comment line="336">
                                        
                </comment>
                <comment line="342">
                                        
                </comment>
                <comment line="365">
                                        
                </comment>
                <comment line="419">
                                        
                </comment>
                <comment line="477">
                                        
                </comment>
                <method name="MaxSpring" type="constructor" line="499">
                    <params>
                        <param name="s1" type="Spring"/>
                        <param name="s2" type="Spring"/>
                    </params>
                </method>
                <method name="op" type="int" line="503">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                    </params>
                </method>
                <method name="setNonClearValue" type="void" line="507">
                    <params>
                        <param name="size" type="int"/>
                    </params>
                </method>
            </class>
            <javadoc line="514">
                Returns a strut -- a spring whose &lt;em&gt;minimum&lt;/em&gt;, &lt;em&gt;preferred&lt;/em&gt;, and
                  &lt;em&gt;maximum&lt;/em&gt; values each have the value &lt;code&gt;pref&lt;/code&gt;.                
                <param>
                    pref the <em>minimum</em>, <em>preferred</em>, and
                      <em>maximum</em> values of the new spring                    
                </param>
                <return>
                    a spring whose <em>minimum</em>, <em>preferred</em>, and
                      <em>maximum</em> values each have the value <code>pref</code>                    
                </return>
                <see>
                    Spring                    
                </see>
            </javadoc>
            <method name="constant" type="Spring" line="525">
                <params>
                    <param name="pref" type="int"/>
                </params>
            </method>
            <javadoc line="529">
                Returns a spring whose &lt;em&gt;minimum&lt;/em&gt;, &lt;em&gt;preferred&lt;/em&gt;, and
                  &lt;em&gt;maximum&lt;/em&gt; values have the values: &lt;code&gt;min&lt;/code&gt;, &lt;code&gt;pref&lt;/code&gt;,
                  and &lt;code&gt;max&lt;/code&gt; respectively.                
                <param>
                    min the <em>minimum</em> value of the new spring                    
                </param>
                <param>
                    pref the <em>preferred</em> value of the new spring                    
                </param>
                <param>
                    max the <em>maximum</em> value of the new spring                    
                </param>
                <return>
                    a spring whose <em>minimum</em>, <em>preferred</em>, and
                      <em>maximum</em> values have the values: <code>min</code>, <code>pref</code>,
                      and <code>max</code> respectively                    
                </return>
                <see>
                    Spring                    
                </see>
            </javadoc>
            <method name="constant" type="Spring" line="543">
                <params>
                    <param name="min" type="int"/>
                    <param name="pref" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="548">
                Returns &lt;code&gt;-s&lt;/code&gt;: a spring running in the opposite direction to &lt;code&gt;s&lt;/code&gt;.                
                <return>
                    <code>-s</code>: a spring running in the opposite direction to <code>s</code>                    
                </return>
                <see>
                    Spring                    
                </see>
            </javadoc>
            <method name="minus" type="Spring" line="555">
                <params>
                    <param name="s" type="Spring"/>
                </params>
            </method>
            <javadoc line="559">
                Returns &lt;code&gt;s1+s2&lt;/code&gt;: a spring representing &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;
                  in series. In a sum, &lt;code&gt;s3&lt;/code&gt;, of two springs, &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;,
                  the &lt;em&gt;strains&lt;/em&gt; of &lt;code&gt;s1&lt;/code&gt;, &lt;code&gt;s2&lt;/code&gt;, and &lt;code&gt;s3&lt;/code&gt; are maintained
                  at the same level (to within the precision implied by their integer &lt;em&gt;value&lt;/em&gt;s).
                  The strain of a spring in compression is:
                  &lt;pre&gt;
                  value - pref
                  ------------
                  pref - min
                  &lt;/pre&gt;
                  and the strain of a spring in tension is:
                  &lt;pre&gt;
                  value - pref
                  ------------
                  max - pref
                  &lt;/pre&gt;
                  When &lt;code&gt;setValue&lt;/code&gt; is called on the sum spring, &lt;code&gt;s3&lt;/code&gt;, the strain
                  in &lt;code&gt;s3&lt;/code&gt; is calculated using one of the formulas above. Once the strain of
                  the sum is known, the &lt;em&gt;value&lt;/em&gt;s of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; are
                  then set so that they are have a strain equal to that of the sum. The formulas are
                  evaluated so as to take rounding errors into account and ensure that the sum of
                  the &lt;em&gt;value&lt;/em&gt;s of &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; is exactly equal to
                  the &lt;em&gt;value&lt;/em&gt; of &lt;code&gt;s3&lt;/code&gt;.                
                <return>
                    <code>s1+s2</code>: a spring representing <code>s1</code> and <code>s2</code> in series                    
                </return>
                <see>
                    Spring                    
                </see>
            </javadoc>
            <method name="sum" type="Spring" line="588">
                <params>
                    <param name="s1" type="Spring"/>
                    <param name="s2" type="Spring"/>
                </params>
            </method>
            <javadoc line="592">
                Returns &lt;code&gt;max(s1, s2)&lt;/code&gt;: a spring whose value is always greater than (or equal to)
                  the values of both &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;.                
                <return>
                    <code>max(s1, s2)</code>: a spring whose value is always greater than (or equal to)
                      the values of both <code>s1</code> and <code>s2</code>                    
                </return>
                <see>
                    Spring                    
                </see>
            </javadoc>
            <method name="max" type="Spring" line="600">
                <params>
                    <param name="s1" type="Spring"/>
                    <param name="s2" type="Spring"/>
                </params>
            </method>
            <method name="difference" type="Spring" line="607">
                <params>
                    <param name="s1" type="Spring"/>
                    <param name="s2" type="Spring"/>
                </params>
            </method>
            <javadoc line="617">
                Returns a spring whose &lt;em&gt;minimum&lt;/em&gt;, &lt;em&gt;preferred&lt;/em&gt;, &lt;em&gt;maximum&lt;/em&gt;
                  and &lt;em&gt;value&lt;/em&gt; properties are each multiples of the properties of the
                  argument spring, &lt;code&gt;s&lt;/code&gt;. Minimum and maximum properties are
                  swapped when &lt;code&gt;factor&lt;/code&gt; is negative (in accordance with the
                  rules of interval arithmetic).
                  &lt;p&gt;
                  When factor is, for example, 0.5f the result represents &apos;the mid-point&apos;
                  of its input - an operation that is useful for centering components in
                  a container.                
                <param>
                    s the spring to scale                    
                </param>
                <param>
                    factor amount to scale by.                    
                </param>
                <return>
                    a spring whose properties are those of the input spring <code>s</code>
                      multiplied by <code>factor</code>                    
                </return>
                <throws>
                    NullPointerException if <code>s</code> is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="scale" type="Spring" line="635">
                <params>
                    <param name="s" type="Spring"/>
                    <param name="factor" type="float"/>
                </params>
            </method>
            <javadoc line="640">
                Returns a spring whose &lt;em&gt;minimum&lt;/em&gt;, &lt;em&gt;preferred&lt;/em&gt;, &lt;em&gt;maximum&lt;/em&gt;
                  and &lt;em&gt;value&lt;/em&gt; properties are defined by the widths of the &lt;em&gt;minimumSize&lt;/em&gt;,
                  &lt;em&gt;preferredSize&lt;/em&gt;, &lt;em&gt;maximumSize&lt;/em&gt; and &lt;em&gt;size&lt;/em&gt; properties
                  of the supplied component. The returned spring is a &apos;wrapper&apos; implementation
                  whose methods call the appropriate size methods of the supplied component.
                  The minimum, preferred, maximum and value properties of the returned spring
                  therefore report the current state of the appropriate properties in the
                  component and track them as they change.                
                <param>
                    c Component used for calculating size                    
                </param>
                <return>
                    a spring whose properties are defined by the horizontal component
                      of the component's size methods.                    
                </return>
                <throws>
                    NullPointerException if <code>c</code> is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="width" type="Spring" line="656">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="661">
                Returns a spring whose &lt;em&gt;minimum&lt;/em&gt;, &lt;em&gt;preferred&lt;/em&gt;, &lt;em&gt;maximum&lt;/em&gt;
                  and &lt;em&gt;value&lt;/em&gt; properties are defined by the heights of the &lt;em&gt;minimumSize&lt;/em&gt;,
                  &lt;em&gt;preferredSize&lt;/em&gt;, &lt;em&gt;maximumSize&lt;/em&gt; and &lt;em&gt;size&lt;/em&gt; properties
                  of the supplied component. The returned spring is a &apos;wrapper&apos; implementation
                  whose methods call the appropriate size methods of the supplied component.
                  The minimum, preferred, maximum and value properties of the returned spring
                  therefore report the current state of the appropriate properties in the
                  component and track them as they change.                
                <param>
                    c Component used for calculating size                    
                </param>
                <return>
                    a spring whose properties are defined by the vertical component
                      of the component's size methods.                    
                </return>
                <throws>
                    NullPointerException if <code>c</code> is null                    
                </throws>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="height" type="Spring" line="677">
                <params>
                    <param name="c" type="Component"/>
                </params>
            </method>
            <javadoc line="683">
                If &lt;code&gt;s&lt;/code&gt; is null, this throws an NullPointerException.                
            </javadoc>
            <method name="checkArg" type="void" line="686">
                <params>
                    <param name="s" type="Object"/>
                </params>
                <scope line="687"/>
            </method>
        </class>
    </source>