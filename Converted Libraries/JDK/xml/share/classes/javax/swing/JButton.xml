<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.event"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JButton" line="42">
            <extends class="AbstractButton"/>
            <comment line="272">
                ///////////////                
            </comment>
            <comment line="273">
                Accessibility support                
            </comment>
            <comment line="274">
                //////////////                
            </comment>
            <comment line="323">
                inner class AccessibleJButton                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="42">
                An implementation of a &quot;push&quot; button.
                  &lt;p&gt;
                  Buttons can be configured, and to some degree controlled, by
                  &lt;code&gt;&lt;a href=&quot;Action.html&quot;&gt;Action&lt;/a&gt;&lt;/code&gt;s.  Using an
                  &lt;code&gt;Action&lt;/code&gt; with a button has many benefits beyond directly
                  configuring a button.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details, and you can find more information in &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html&quot;&gt;How
                  to Use Actions&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/button.html&quot;&gt;How to Use Buttons, Check Boxes, and Radio Buttons&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;
                  for information and examples of using buttons.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: An implementation of a \"push\" button.                    
                </beaninfo>
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="80"/>
            <javadoc line="80">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <javadoc line="86">
                Creates a button with no set text or icon.                
            </javadoc>
            <method name="JButton" type="constructor" line="89"/>
            <javadoc line="93">
                Creates a button with an icon.                
                <param>
                    icon  the Icon image to display on the button                    
                </param>
            </javadoc>
            <method name="JButton" type="constructor" line="98">
                <params>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="102">
                Creates a button with text.                
                <param>
                    text  the text of the button                    
                </param>
            </javadoc>
            <method name="JButton" type="constructor" line="108">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="112">
                Creates a button where properties are taken from the
                  &lt;code&gt;Action&lt;/code&gt; supplied.                
                <param>
                    a the <code>Action</code> used to specify the new button                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JButton" type="constructor" line="120">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="125">
                Creates a button with initial text and an icon.                
                <param>
                    text  the text of the button                    
                </param>
                <param>
                    icon  the Icon image to display on the button                    
                </param>
            </javadoc>
            <method name="JButton" type="constructor" line="131">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
                <comment line="132">
                    Create the model                    
                </comment>
                <comment line="135">
                    initialize                    
                </comment>
            </method>
            <javadoc line="139">
                Resets the UI property to a value from the current look and
                  feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="145"/>
            <javadoc line="150">
                Returns a string that specifies the name of the L&amp;F class
                  that renders this component.                
                <return>
                    the string "ButtonUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    expert: true
                      description: A string that specifies the name of the L&F class.                    
                </beaninfo>
            </javadoc>
            <method name="getUIClassID" type="String" line="161"/>
            <javadoc line="166">
                Gets the value of the &lt;code&gt;defaultButton&lt;/code&gt; property,
                  which if &lt;code&gt;true&lt;/code&gt; means that this button is the current
                  default button for its &lt;code&gt;JRootPane&lt;/code&gt;.
                  Most look and feels render the default button
                  differently, and may potentially provide bindings
                  to access the default button.                
                <return>
                    the value of the <code>defaultButton</code> property                    
                </return>
                <see>
                    JRootPane#setDefaultButton                    
                </see>
                <see>
                    #isDefaultCapable                    
                </see>
                <beaninfo>
                    description: Whether or not this button is the default button                    
                </beaninfo>
            </javadoc>
            <method name="isDefaultButton" type="boolean" line="180">
                <declaration name="root" type="JRootPane" line="181"/>
                <scope line="182"/>
            </method>
            <javadoc line="188">
                Gets the value of the &lt;code&gt;defaultCapable&lt;/code&gt; property.                
                <return>
                    the value of the <code>defaultCapable</code> property                    
                </return>
                <see>
                    #setDefaultCapable                    
                </see>
                <see>
                    #isDefaultButton                    
                </see>
                <see>
                    JRootPane#setDefaultButton                    
                </see>
            </javadoc>
            <method name="isDefaultCapable" type="boolean" line="196"/>
            <javadoc line="200">
                Sets the &lt;code&gt;defaultCapable&lt;/code&gt; property,
                  which determines whether this button can be
                  made the default button for its root pane.
                  The default value of the &lt;code&gt;defaultCapable&lt;/code&gt;
                  property is &lt;code&gt;true&lt;/code&gt; unless otherwise
                  specified by the look and feel.                
                <param>
                    defaultCapable <code>true</code> if this button will be
                      capable of being the default button on the
                      <code>RootPane</code>; otherwise <code>false</code>                    
                </param>
                <see>
                    #isDefaultCapable                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether or not this button can be the default button                    
                </beaninfo>
            </javadoc>
            <method name="setDefaultCapable" type="void" line="217">
                <params>
                    <param name="defaultCapable" type="boolean"/>
                </params>
                <declaration name="oldDefaultCapable" type="boolean" line="218"/>
            </method>
            <javadoc line="223">
                Overrides &lt;code&gt;JComponent.removeNotify&lt;/code&gt; to check if
                  this button is currently set as the default button on the
                  &lt;code&gt;RootPane&lt;/code&gt;, and if so, sets the &lt;code&gt;RootPane&lt;/code&gt;&apos;s
                  default button to &lt;code&gt;null&lt;/code&gt; to ensure the
                  &lt;code&gt;RootPane&lt;/code&gt; doesn&apos;t hold onto an invalid button reference.                
            </javadoc>
            <method name="removeNotify" type="void" line="230">
                <declaration name="root" type="JRootPane" line="231"/>
                <scope line="232"/>
            </method>
            <javadoc line="238">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="242">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="244">
                    <declaration name="count" type="byte" line="245"/>
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="254">
                Returns a string representation of this &lt;code&gt;JButton&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JButton</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="263">
                <declaration name="defaultCapableString" type="String" line="264"/>
            </method>
            <javadoc line="275">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JButton&lt;/code&gt;. For &lt;code&gt;JButton&lt;/code&gt;s,
                  the &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJButton&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJButton&lt;/code&gt; instance is created if necessary.                
                <return>
                    an <code>AccessibleJButton</code> that serves as the
                      <code>AccessibleContext</code> of this <code>JButton</code>                    
                </return>
                <beaninfo>
                    expert: true
                      description: The AccessibleContext associated with this Button.                    
                </beaninfo>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="288">
                <scope line="289"/>
            </method>
            <class name="AccessibleJButton" line="295">
                <extends class="AccessibleAbstractButton"/>
                <javadoc line="295">
                    This class implements accessibility support for the
                      &lt;code&gt;JButton&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to button user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="312">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="319"/>
            </class>
        </class>
    </source>