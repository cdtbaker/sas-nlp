<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.ComponentOrientation"/>
        <import package="java.util.Comparator"/>
        <import package="java.io"/>
        <import package="sun.awt.SunToolkit"/>
        <class name="LayoutFocusTraversalPolicy" line="35">
            <extends class="SortingFocusTraversalPolicy"/>
            <comment line="54">
                Delegate most of our fitness test to Default so that we only have to
                 code the algorithm once.                
            </comment>
            <implements interface="Serializable"/>
            <javadoc line="35">
                A SortingFocusTraversalPolicy which sorts Components based on their size,
                  position, and orientation. Based on their size and position, Components are
                  roughly categorized into rows and columns. For a Container with horizontal
                  orientation, columns run left-to-right or right-to-left, and rows run top-
                  to-bottom. For a Container with vertical orientation, columns run top-to-
                  bottom and rows run left-to-right or right-to-left. See
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; for more information. All columns in a
                  row are fully traversed before proceeding to the next row.                
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    java.awt.ComponentOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="fitnessTestPolicy" type="SwingDefaultFocusTraversalPolicy" line="55"/>
            <javadoc line="58">
                Constructs a LayoutFocusTraversalPolicy.                
            </javadoc>
            <method name="LayoutFocusTraversalPolicy" type="constructor" line="61"/>
            <javadoc line="65">
                Constructs a LayoutFocusTraversalPolicy with the passed in
                  &lt;code&gt;Comparator&lt;/code&gt;.                
            </javadoc>
            <method name="LayoutFocusTraversalPolicy" type="constructor" line="69">
                <params>
                    <param name="c" type="Comparator<? super Component>"/>
                </params>
            </method>
            <javadoc line="73">
                Returns the Component that should receive the focus after aComponent.
                  aContainer must be a focus cycle root of aComponent.
                  &lt;p&gt;
                  By default, LayoutFocusTraversalPolicy implicitly transfers focus down-
                  cycle. That is, during normal focus traversal, the Component
                  traversed after a focus cycle root will be the focus-cycle-root&apos;s
                  default Component to focus. This behavior can be disabled using the
                  &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  If aContainer is &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus
                  traversal policy provider&lt;/a&gt;, the focus is always transferred down-cycle.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus after aComponent, or
                      null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or a focus traversal policy provider, or if either aContainer or
                      aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentAfter" type="Component" line="96">
                <params>
                    <param name="aContainer" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <scope line="97"/>
                <declaration name="comparator" type="Comparator" line="100"/>
                <scope line="101"/>
            </method>
            <javadoc line="109">
                Returns the Component that should receive the focus before aComponent.
                  aContainer must be a focus cycle root of aComponent.
                  &lt;p&gt;
                  By default, LayoutFocusTraversalPolicy implicitly transfers focus down-
                  cycle. That is, during normal focus traversal, the Component
                  traversed after a focus cycle root will be the focus-cycle-root&apos;s
                  default Component to focus. This behavior can be disabled using the
                  &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  If aContainer is &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus
                  traversal policy provider&lt;/a&gt;, the focus is always transferred down-cycle.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus before aComponent,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or a focus traversal policy provider, or if either aContainer or
                      aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentBefore" type="Component" line="132">
                <params>
                    <param name="aContainer" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <scope line="133"/>
                <declaration name="comparator" type="Comparator" line="136"/>
                <scope line="137"/>
            </method>
            <javadoc line="145">
                Returns the first Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  forward direction.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider whose
                      first Component is to be returned                    
                </param>
                <return>
                    the first Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getFirstComponent" type="Component" line="156">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <scope line="157"/>
                <declaration name="comparator" type="Comparator" line="160"/>
                <scope line="161"/>
            </method>
            <javadoc line="169">
                Returns the last Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  reverse direction.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider whose
                      last Component is to be returned                    
                </param>
                <return>
                    the last Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getLastComponent" type="Component" line="180">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <scope line="181"/>
                <declaration name="comparator" type="Comparator" line="184"/>
                <scope line="185"/>
            </method>
            <javadoc line="193">
                Determines whether the specified &lt;code&gt;Component&lt;/code&gt;
                  is an acceptable choice as the new focus owner.
                  This method performs the following sequence of operations:
                  &lt;ol&gt;
                  &lt;li&gt;Checks whether &lt;code&gt;aComponent&lt;/code&gt; is visible, displayable,
                  enabled, and focusable.  If any of these properties is
                  &lt;code&gt;false&lt;/code&gt;, this method returns &lt;code&gt;false&lt;/code&gt;.
                  &lt;li&gt;If &lt;code&gt;aComponent&lt;/code&gt; is an instance of &lt;code&gt;JTable&lt;/code&gt;,
                  returns &lt;code&gt;true&lt;/code&gt;.
                  &lt;li&gt;If &lt;code&gt;aComponent&lt;/code&gt; is an instance of &lt;code&gt;JComboBox&lt;/code&gt;,
                  then returns the value of
                  &lt;code&gt;aComponent.getUI().isFocusTraversable(aComponent)&lt;/code&gt;.
                  &lt;li&gt;If &lt;code&gt;aComponent&lt;/code&gt; is a &lt;code&gt;JComponent&lt;/code&gt;
                  with a &lt;code&gt;JComponent.WHEN_FOCUSED&lt;/code&gt;
                  &lt;code&gt;InputMap&lt;/code&gt; that is neither &lt;code&gt;null&lt;/code&gt;
                  nor empty, returns &lt;code&gt;true&lt;/code&gt;.
                  &lt;li&gt;Returns the value of
                  &lt;code&gt;DefaultFocusTraversalPolicy.accept(aComponent)&lt;/code&gt;.
                  &lt;/ol&gt;                
                <param>
                    aComponent the <code>Component</code> whose fitness
                      as a focus owner is to be tested                    
                </param>
                <see>
                    java.awt.Component#isVisible                    
                </see>
                <see>
                    java.awt.Component#isDisplayable                    
                </see>
                <see>
                    java.awt.Component#isEnabled                    
                </see>
                <see>
                    java.awt.Component#isFocusable                    
                </see>
                <see>
                    javax.swing.plaf.ComboBoxUI#isFocusTraversable                    
                </see>
                <see>
                    javax.swing.JComponent#getInputMap                    
                </see>
                <see>
                    java.awt.DefaultFocusTraversalPolicy#accept                    
                </see>
                <return>
                    <code>true</code> if <code>aComponent</code> is a valid choice
                      for a focus owner;
                      otherwise <code>false</code>                    
                </return>
            </javadoc>
            <method name="accept" type="boolean" line="227">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="232">
                    JTable only has ancestor focus bindings, we thus force it
                     to be focusable by returning true here.                    
                </comment>
                <comment line="248">
                    Delegate to the fitnessTestPolicy, this will test for the
                     case where the developer has overriden isFocusTraversable to
                     return true.                    
                </comment>
                <scope line="228"/>
                <scope line="230"/>
                <scope line="234">
                    <declaration name="box" type="JComboBox" line="235"/>
                </scope>
                <scope line="237">
                    <declaration name="jComponent" type="JComponent" line="238"/>
                    <declaration name="inputMap" type="InputMap" line="239"/>
                    <scope line="241"/>
                    <scope line="244"/>
                </scope>
            </method>
            <method name="writeObject" type="void" line="254">
                <params>
                    <param name="out" type="ObjectOutputStream"/>
                </params>
            </method>
            <method name="readObject" type="void" line="260">
                <params>
                    <param name="in" type="ObjectInputStream"/>
                </params>
            </method>
        </class>
        <class name="SwingDefaultFocusTraversalPolicy" line="268">
            <extends class="java.awt.DefaultFocusTraversalPolicy"/>
            <comment line="54">
                Delegate most of our fitness test to Default so that we only have to
                 code the algorithm once.                
            </comment>
            <method name="accept" type="boolean" line="271">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
            </method>
        </class>
    </source>