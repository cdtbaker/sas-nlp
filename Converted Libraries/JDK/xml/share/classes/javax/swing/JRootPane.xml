<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.applet.Applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.security.AccessController"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.plaf.RootPaneUI"/>
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.swing.border"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.security.action.GetBooleanAction"/>
        <class name="JRootPane" line="14">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="14">
                A lightweight container used behind the scenes by
                  &lt;code&gt;JFrame&lt;/code&gt;, &lt;code&gt;JDialog&lt;/code&gt;, &lt;code&gt;JWindow&lt;/code&gt;,
                  &lt;code&gt;JApplet&lt;/code&gt;, and &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  For task-oriented information on functionality provided by root panes
                  see &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/rootpane.html&quot;&gt;How to Use Root Panes&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  The following image shows the relationships between
                  the classes that use root panes.
                  &lt;p align=center&gt;&lt;img src=&quot;doc-files/JRootPane-1.gif&quot;
                  alt=&quot;The following text describes this graphic.&quot;
                  HEIGHT=484 WIDTH=629&gt;&lt;/p&gt;
                  The &amp;quot;heavyweight&amp;quot; components (those that delegate to a peer, or native
                  component on the host system) are shown with a darker, heavier box. The four
                  heavyweight JFC/Swing containers (&lt;code&gt;JFrame&lt;/code&gt;, &lt;code&gt;JDialog&lt;/code&gt;,
                  &lt;code&gt;JWindow&lt;/code&gt;, and &lt;code&gt;JApplet&lt;/code&gt;) are
                  shown in relation to the AWT classes they extend.
                  These four components are the
                  only heavyweight containers in the Swing library. The lightweight container
                  &lt;code&gt;JInternalFrame&lt;/code&gt; is also shown.
                  All five of these JFC/Swing containers implement the
                  &lt;code&gt;RootPaneContainer&lt;/code&gt; interface,
                  and they all delegate their operations to a
                  &lt;code&gt;JRootPane&lt;/code&gt; (shown with a little &quot;handle&quot; on top).
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; The &lt;code&gt;JComponent&lt;/code&gt; method &lt;code&gt;getRootPane&lt;/code&gt;
                  can be used to obtain the &lt;code&gt;JRootPane&lt;/code&gt; that contains
                  a given component.
                  &lt;/blockquote&gt;
                  &lt;table align=&quot;right&quot; border=&quot;0&quot; summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;
                  &lt;td align=&quot;center&quot;&gt;
                  &lt;img src=&quot;doc-files/JRootPane-2.gif&quot;
                  alt=&quot;The following text describes this graphic.&quot; HEIGHT=386 WIDTH=349&gt;
                  &lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  The diagram at right shows the structure of a &lt;code&gt;JRootPane&lt;/code&gt;.
                  A &lt;code&gt;JRootpane&lt;/code&gt; is made up of a &lt;code&gt;glassPane&lt;/code&gt;,
                  an optional &lt;code&gt;menuBar&lt;/code&gt;, and a &lt;code&gt;contentPane&lt;/code&gt;.
                  (The &lt;code&gt;JLayeredPane&lt;/code&gt; manages the &lt;code&gt;menuBar&lt;/code&gt;
                  and the &lt;code&gt;contentPane&lt;/code&gt;.)
                  The &lt;code&gt;glassPane&lt;/code&gt; sits over the top of everything,
                  where it is in a position to intercept mouse movements.
                  Since the &lt;code&gt;glassPane&lt;/code&gt; (like the &lt;code&gt;contentPane&lt;/code&gt;)
                  can be an arbitrary component, it is also possible to set up the
                  &lt;code&gt;glassPane&lt;/code&gt; for drawing. Lines and images on the
                  &lt;code&gt;glassPane&lt;/code&gt; can then range
                  over the frames underneath without being limited by their boundaries.
                  &lt;p&gt;
                  Although the &lt;code&gt;menuBar&lt;/code&gt; component is optional,
                  the &lt;code&gt;layeredPane&lt;/code&gt;, &lt;code&gt;contentPane&lt;/code&gt;,
                  and &lt;code&gt;glassPane&lt;/code&gt; always exist.
                  Attempting to set them to &lt;code&gt;null&lt;/code&gt; generates an exception.
                  &lt;p&gt;
                  To add components to the &lt;code&gt;JRootPane&lt;/code&gt; (other than the
                  optional menu bar), you add the object to the &lt;code&gt;contentPane&lt;/code&gt;
                  of the &lt;code&gt;JRootPane&lt;/code&gt;, like this:
                  &lt;pre&gt;
                  rootPane.getContentPane().add(child);
                  &lt;/pre&gt;
                  The same principle holds true for setting layout managers, removing
                  components, listing children, etc. All these methods are invoked on
                  the &lt;code&gt;contentPane&lt;/code&gt; instead of on the &lt;code&gt;JRootPane&lt;/code&gt;.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt; The default layout manager for the &lt;code&gt;contentPane&lt;/code&gt; is
                  a &lt;code&gt;BorderLayout&lt;/code&gt; manager. However, the &lt;code&gt;JRootPane&lt;/code&gt;
                  uses a custom &lt;code&gt;LayoutManager&lt;/code&gt;.
                  So, when you want to change the layout manager for the components you added
                  to a &lt;code&gt;JRootPane&lt;/code&gt;, be sure to use code like this:
                  &lt;pre&gt;
                  rootPane.getContentPane().setLayout(new BoxLayout());
                  &lt;/pre&gt;&lt;/blockquote&gt;
                  If a &lt;code&gt;JMenuBar&lt;/code&gt; component is set on the &lt;code&gt;JRootPane&lt;/code&gt;,
                  it is positioned along the upper edge of the frame.
                  The &lt;code&gt;contentPane&lt;/code&gt; is adjusted in location and size to
                  fill the remaining area.
                  (The &lt;code&gt;JMenuBar&lt;/code&gt; and the &lt;code&gt;contentPane&lt;/code&gt; are added to the
                  &lt;code&gt;layeredPane&lt;/code&gt; component at the
                  &lt;code&gt;JLayeredPane.FRAME_CONTENT_LAYER&lt;/code&gt; layer.)
                  &lt;p&gt;
                  The &lt;code&gt;layeredPane&lt;/code&gt; is the parent of all children in the
                  &lt;code&gt;JRootPane&lt;/code&gt; -- both as the direct parent of the menu and
                  the grandparent of all components added to the &lt;code&gt;contentPane&lt;/code&gt;.
                  It is an instance of &lt;code&gt;JLayeredPane&lt;/code&gt;,
                  which provides the ability to add components at several layers.
                  This capability is very useful when working with menu popups,
                  dialog boxes, and dragging -- situations in which you need to place
                  a component on top of all other components in the pane.
                  &lt;p&gt;
                  The &lt;code&gt;glassPane&lt;/code&gt; sits on top of all other components in the
                  &lt;code&gt;JRootPane&lt;/code&gt;.
                  That provides a convenient place to draw above all other components,
                  and makes it possible to intercept mouse events,
                  which is useful both for dragging and for drawing.
                  Developers can use &lt;code&gt;setVisible&lt;/code&gt; on the &lt;code&gt;glassPane&lt;/code&gt;
                  to control when the &lt;code&gt;glassPane&lt;/code&gt; displays over the other children.
                  By default the &lt;code&gt;glassPane&lt;/code&gt; is not visible.
                  &lt;p&gt;
                  The custom &lt;code&gt;LayoutManager&lt;/code&gt; used by &lt;code&gt;JRootPane&lt;/code&gt;
                  ensures that:
                  &lt;OL&gt;
                  &lt;LI&gt;The &lt;code&gt;glassPane&lt;/code&gt; fills the entire viewable
                  area of the &lt;code&gt;JRootPane&lt;/code&gt; (bounds - insets).
                  &lt;LI&gt;The &lt;code&gt;layeredPane&lt;/code&gt; fills the entire viewable area of the
                  &lt;code&gt;JRootPane&lt;/code&gt;. (bounds - insets)
                  &lt;LI&gt;The &lt;code&gt;menuBar&lt;/code&gt; is positioned at the upper edge of the
                  &lt;code&gt;layeredPane&lt;/code&gt;.
                  &lt;LI&gt;The &lt;code&gt;contentPane&lt;/code&gt; fills the entire viewable area,
                  minus the &lt;code&gt;menuBar&lt;/code&gt;, if present.
                  &lt;/OL&gt;
                  Any other views in the &lt;code&gt;JRootPane&lt;/code&gt; view hierarchy are ignored.
                  &lt;p&gt;
                  If you replace the &lt;code&gt;LayoutManager&lt;/code&gt; of the &lt;code&gt;JRootPane&lt;/code&gt;,
                  you are responsible for managing all of these views.
                  So ordinarily you will want to be sure that you
                  change the layout manager for the &lt;code&gt;contentPane&lt;/code&gt; rather than
                  for the &lt;code&gt;JRootPane&lt;/code&gt; itself!
                  &lt;p&gt;
                  The painting architecture of Swing requires an opaque
                  &lt;code&gt;JComponent&lt;/code&gt;
                  to exist in the containment hieararchy above all other components. This is
                  typically provided by way of the content pane. If you replace the content
                  pane, it is recommended that you make the content pane opaque
                  by way of &lt;code&gt;setOpaque(true)&lt;/code&gt;. Additionally, if the content pane
                  overrides &lt;code&gt;paintComponent&lt;/code&gt;, it
                  will need to completely fill in the background in an opaque color in
                  &lt;code&gt;paintComponent&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JLayeredPane                    
                </see>
                <see>
                    JMenuBar                    
                </see>
                <see>
                    JWindow                    
                </see>
                <see>
                    JFrame                    
                </see>
                <see>
                    JDialog                    
                </see>
                <see>
                    JApplet                    
                </see>
                <see>
                    JInternalFrame                    
                </see>
                <see>
                    JComponent                    
                </see>
                <see>
                    BoxLayout                    
                </see>
                <see>
                    &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/articles/mixing/&quot;&gt;
                      Mixing Heavy and Light Components&lt;/a&gt;                    
                </see>
                <author>
                    David Kloba                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="171"/>
            <declaration name="LOG_DISABLE_TRUE_DOUBLE_BUFFERING" type="boolean" line="172"/>
            <javadoc line="172">
                Whether or not we should dump the stack when true double buffering
                  is disabled. Default is false.                
            </javadoc>
            <declaration name="IGNORE_DISABLE_TRUE_DOUBLE_BUFFERING" type="boolean" line="177"/>
            <javadoc line="177">
                Whether or not we should ignore requests to disable true double
                  buffering. Default is false.                
            </javadoc>
            <declaration name="NONE" type="int" line="182"/>
            <javadoc line="182">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should not provide any sort of
                  Window decorations.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FRAME" type="int" line="189"/>
            <javadoc line="189">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Frame.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="PLAIN_DIALOG" type="int" line="196"/>
            <javadoc line="196">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="INFORMATION_DIALOG" type="int" line="203"/>
            <javadoc line="203">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog used to display an informational message.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="ERROR_DIALOG" type="int" line="210"/>
            <javadoc line="210">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog used to display an error message.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="COLOR_CHOOSER_DIALOG" type="int" line="217"/>
            <javadoc line="217">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog used to display a &lt;code&gt;JColorChooser&lt;/code&gt;.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="FILE_CHOOSER_DIALOG" type="int" line="224"/>
            <javadoc line="224">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog used to display a &lt;code&gt;JFileChooser&lt;/code&gt;.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="QUESTION_DIALOG" type="int" line="231"/>
            <javadoc line="231">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog used to present a question to the user.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="WARNING_DIALOG" type="int" line="238"/>
            <javadoc line="238">
                Constant used for the windowDecorationStyle property. Indicates that
                  the &lt;code&gt;JRootPane&lt;/code&gt; should provide decorations appropriate for
                  a Dialog used to display a warning message.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="windowDecorationStyle" type="int" line="245"/>
            <declaration name="menuBar" type="JMenuBar" line="246"/>
            <javadoc line="246">
                The menu bar.                
            </javadoc>
            <declaration name="contentPane" type="Container" line="250"/>
            <javadoc line="250">
                The content pane.                
            </javadoc>
            <declaration name="layeredPane" type="JLayeredPane" line="254"/>
            <javadoc line="254">
                The layered pane that manages the menu bar and content pane.                
            </javadoc>
            <declaration name="glassPane" type="Component" line="258"/>
            <javadoc line="258">
                The glass pane that overlays the menu bar and content pane,
                  so it can intercept mouse movements and such.                
            </javadoc>
            <declaration name="defaultButton" type="JButton" line="263"/>
            <javadoc line="263">
                The button that gets activated when the pane has the focus and
                  a UI-specific action like pressing the &lt;b&gt;Enter&lt;/b&gt; key occurs.                
            </javadoc>
            <declaration name="defaultPressAction" type="DefaultAction" line="268"/>
            <javadoc line="268">
                As of Java 2 platform v1.3 this unusable field is no longer used.
                  To override the default button you should replace the &lt;code&gt;Action&lt;/code&gt;
                  in the &lt;code&gt;JRootPane&lt;/code&gt;&apos;s &lt;code&gt;ActionMap&lt;/code&gt;. Please refer to
                  the key bindings specification for further details.                
                <deprecated>
                    As of Java 2 platform v1.3.                    
                </deprecated>
                <see>
                    #defaultButton                    
                </see>
            </javadoc>
            <declaration name="defaultReleaseAction" type="DefaultAction" line="277"/>
            <javadoc line="277">
                As of Java 2 platform v1.3 this unusable field is no longer used.
                  To override the default button you should replace the &lt;code&gt;Action&lt;/code&gt;
                  in the &lt;code&gt;JRootPane&lt;/code&gt;&apos;s &lt;code&gt;ActionMap&lt;/code&gt;. Please refer to
                  the key bindings specification for further details.                
                <deprecated>
                    As of Java 2 platform v1.3.                    
                </deprecated>
                <see>
                    #defaultButton                    
                </see>
            </javadoc>
            <declaration name="useTrueDoubleBuffering" type="boolean" line="286"/>
            <javadoc line="286">
                Whether or not true double buffering should be used.  This is typically
                  true, but may be set to false in special situations.  For example,
                  heavy weight popups (backed by a window) set this to false.                
            </javadoc>
            <scope line="292"/>
            <javadoc line="296">
                Creates a &lt;code&gt;JRootPane&lt;/code&gt;, setting up its
                  &lt;code&gt;glassPane&lt;/code&gt;, &lt;code&gt;layeredPane&lt;/code&gt;,
                  and &lt;code&gt;contentPane&lt;/code&gt;.                
            </javadoc>
            <method name="JRootPane" type="constructor" line="301"/>
            <javadoc line="309">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDoubleBuffered" type="void" line="313">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
                <scope line="314"/>
            </method>
            <javadoc line="319">
                Returns a constant identifying the type of Window decorations the
                  &lt;code&gt;JRootPane&lt;/code&gt; is providing.                
                <return>
                    One of &lt;code&gt;NONE&lt;/code&gt;, &lt;code&gt;FRAME&lt;/code&gt;,
                      &lt;code&gt;PLAIN_DIALOG&lt;/code&gt;, &lt;code&gt;INFORMATION_DIALOG&lt;/code&gt;,
                      &lt;code&gt;ERROR_DIALOG&lt;/code&gt;, &lt;code&gt;COLOR_CHOOSER_DIALOG&lt;/code&gt;,
                      &lt;code&gt;FILE_CHOOSER_DIALOG&lt;/code&gt;, &lt;code&gt;QUESTION_DIALOG&lt;/code&gt; or
                      &lt;code&gt;WARNING_DIALOG&lt;/code&gt;.                    
                </return>
                <see>
                    #setWindowDecorationStyle                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getWindowDecorationStyle" type="int" line="330"/>
            <javadoc line="333">
                Sets the type of Window decorations (such as borders, widgets for
                  closing a Window, title ...) the &lt;code&gt;JRootPane&lt;/code&gt; should
                  provide. The default is to provide no Window decorations
                  (&lt;code&gt;NONE&lt;/code&gt;).
                  &lt;p&gt;
                  This is only a hint, and some look and feels may not support
                  this.
                  This is a bound property.                
                <param>
                    windowDecorationStyle Constant identifying Window decorations
                      to provide.                    
                </param>
                <see>
                    JDialog#setDefaultLookAndFeelDecorated                    
                </see>
                <see>
                    JFrame#setDefaultLookAndFeelDecorated                    
                </see>
                <see>
                    LookAndFeel#getSupportsWindowDecorations                    
                </see>
                <throws>
                    IllegalArgumentException if &lt;code&gt;style&lt;/code&gt; is
                      not one of: &lt;code&gt;NONE&lt;/code&gt;, &lt;code&gt;FRAME&lt;/code&gt;,
                      &lt;code&gt;PLAIN_DIALOG&lt;/code&gt;, &lt;code&gt;INFORMATION_DIALOG&lt;/code&gt;,
                      &lt;code&gt;ERROR_DIALOG&lt;/code&gt;, &lt;code&gt;COLOR_CHOOSER_DIALOG&lt;/code&gt;,
                      &lt;code&gt;FILE_CHOOSER_DIALOG&lt;/code&gt;, &lt;code&gt;QUESTION_DIALOG&lt;/code&gt;, or
                      &lt;code&gt;WARNING_DIALOG&lt;/code&gt;.                    
                </throws>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true
                      enum: NONE                   JRootPane.NONE
                      FRAME                  JRootPane.FRAME
                      PLAIN_DIALOG           JRootPane.PLAIN_DIALOG
                      INFORMATION_DIALOG     JRootPane.INFORMATION_DIALOG
                      ERROR_DIALOG           JRootPane.ERROR_DIALOG
                      COLOR_CHOOSER_DIALOG   JRootPane.COLOR_CHOOSER_DIALOG
                      FILE_CHOOSER_DIALOG    JRootPane.FILE_CHOOSER_DIALOG
                      QUESTION_DIALOG        JRootPane.QUESTION_DIALOG
                      WARNING_DIALOG         JRootPane.WARNING_DIALOG
                      expert: true
                      attribute: visualUpdate true
                      description: Identifies the type of Window decorations to provide                    
                </beaninfobound>
            </javadoc>
            <method name="setWindowDecorationStyle" type="void" line="368">
                <params>
                    <param name="windowDecorationStyle" type="int"/>
                </params>
                <scope line="369"/>
                <declaration name="oldWindowDecorationStyle" type="int" line="372"/>
            </method>
            <javadoc line="376">
                Returns the L&amp;F object that renders this component.                
                <return>
                    &lt;code&gt;LabelUI&lt;/code&gt; object                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getUI" type="RootPaneUI" line="381"/>
            <javadoc line="384">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the &lt;code&gt;LabelUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      expert: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel.                    
                </beaninfobound>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setUI" type="void" line="395">
                <params>
                    <param name="ui" type="RootPaneUI"/>
                </params>
            </method>
            <javadoc line="398">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="402"/>
            <javadoc line="405">
                Returns a string that specifies the name of the L&amp;F class
                  that renders this component.                
                <return>
                    the string &quot;RootPaneUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="412"/>
            <javadoc line="415">
                Called by the constructor methods to create the default
                  &lt;code&gt;layeredPane&lt;/code&gt;.
                  Bt default it creates a new &lt;code&gt;JLayeredPane&lt;/code&gt;.                
                <return>
                    the default &lt;code&gt;layeredPane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createLayeredPane" type="JLayeredPane" line="421">
                <declaration name="p" type="JLayeredPane" line="422"/>
            </method>
            <javadoc line="426">
                Called by the constructor methods to create the default
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  By default this method creates a new &lt;code&gt;JComponent&lt;/code&gt; add sets a
                  &lt;code&gt;BorderLayout&lt;/code&gt; as its &lt;code&gt;LayoutManager&lt;/code&gt;.                
                <return>
                    the default &lt;code&gt;contentPane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createContentPane" type="Container" line="433">
                <declaration name="c" type="JComponent" line="434"/>
                <anonymous_class line="436">
                    <method name="addLayoutComponent" type="void" line="437">
                        <params>
                            <param name="comp" type="Component"/>
                            <param name="constraints" type="Object"/>
                        </params>
                        <scope line="438"/>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="447">
                Called by the constructor methods to create the default
                  &lt;code&gt;glassPane&lt;/code&gt;.
                  By default this method creates a new &lt;code&gt;JComponent&lt;/code&gt;
                  with visibility set to false.                
                <return>
                    the default &lt;code&gt;glassPane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createGlassPane" type="Component" line="454">
                <declaration name="c" type="JComponent" line="455"/>
            </method>
            <javadoc line="461">
                Called by the constructor methods to create the default
                  &lt;code&gt;layoutManager&lt;/code&gt;.                
                <return>
                    the default &lt;code&gt;layoutManager&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="createRootLayout" type="LayoutManager" line="466"/>
            <javadoc line="469">
                Adds or changes the menu bar used in the layered pane.                
                <param>
                    menu the &lt;code&gt;JMenuBar&lt;/code&gt; to add                    
                </param>
            </javadoc>
            <method name="setJMenuBar" type="void" line="473">
                <params>
                    <param name="menu" type="JMenuBar"/>
                </params>
            </method>
            <javadoc line="478">
                Specifies the menu bar value.                
                <deprecated>
                    As of Swing version 1.0.3
                      replaced by &lt;code&gt;setJMenuBar(JMenuBar menu)&lt;/code&gt;.                    
                </deprecated>
                <param>
                    menu the &lt;code&gt;JMenuBar&lt;/code&gt; to add.                    
                </param>
            </javadoc>
            <method name="setMenuBar" type="void" line="484">
                <params>
                    <param name="menu" type="JMenuBar"/>
                </params>
            </method>
            <javadoc line="489">
                Returns the menu bar from the layered pane.                
                <return>
                    the &lt;code&gt;JMenuBar&lt;/code&gt; used in the pane                    
                </return>
            </javadoc>
            <method name="getJMenuBar" type="JMenuBar" line="493"/>
            <javadoc line="496">
                Returns the menu bar value.                
                <deprecated>
                    As of Swing version 1.0.3
                      replaced by &lt;code&gt;getJMenuBar()&lt;/code&gt;.                    
                </deprecated>
                <return>
                    the &lt;code&gt;JMenuBar&lt;/code&gt; used in the pane                    
                </return>
            </javadoc>
            <method name="getMenuBar" type="JMenuBar" line="502"/>
            <javadoc line="505">
                Sets the content pane -- the container that holds the components
                  parented by the root pane.
                  &lt;p&gt;
                  Swing&apos;s painting architecture requires an opaque &lt;code&gt;JComponent&lt;/code&gt;
                  in the containment hiearchy. This is typically provided by the
                  content pane. If you replace the content pane it is recommended you
                  replace it with an opaque &lt;code&gt;JComponent&lt;/code&gt;.                
                <param>
                    content the &lt;code&gt;Container&lt;/code&gt; to use for component-contents                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setContentPane" type="void" line="517">
                <params>
                    <param name="content" type="Container"/>
                </params>
            </method>
            <javadoc line="523">
                Returns the content pane -- the container that holds the components
                  parented by the root pane.                
                <return>
                    the &lt;code&gt;Container&lt;/code&gt; that holds the component-contents                    
                </return>
            </javadoc>
            <method name="getContentPane" type="Container" line="528"/>
            <javadoc line="531">
                Sets the layered pane for the root pane. The layered pane
                  typically holds a content pane and an optional &lt;code&gt;JMenuBar&lt;/code&gt;.                
                <param>
                    layered  the &lt;code&gt;JLayeredPane&lt;/code&gt; to use                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the layered pane parameter is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setLayeredPane" type="void" line="538">
                <params>
                    <param name="layered" type="JLayeredPane"/>
                </params>
            </method>
            <javadoc line="544">
                Gets the layered pane used by the root pane. The layered pane
                  typically holds a content pane and an optional &lt;code&gt;JMenuBar&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;JLayeredPane&lt;/code&gt; currently in use                    
                </return>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="549"/>
            <javadoc line="552">
                Sets a specified &lt;code&gt;Component&lt;/code&gt; to be the glass pane for this
                  root pane.  The glass pane should normally be a lightweight,
                  transparent component, because it will be made visible when
                  ever the root pane needs to grab input events.
                  &lt;p&gt;
                  The new glass pane&apos;s visibility is changed to match that of
                  the current glass pane.  An implication of this is that care
                  must be taken when you want to replace the glass pane and
                  make it visible.  Either of the following will work:
                  &lt;pre&gt;
                  root.setGlassPane(newGlassPane);
                  newGlassPane.setVisible(true);
                  &lt;/pre&gt;
                  or:
                  &lt;pre&gt;
                  root.getGlassPane().setVisible(true);
                  root.setGlassPane(newGlassPane);
                  &lt;/pre&gt;                
                <param>
                    glass the &lt;code&gt;Component&lt;/code&gt; to use as the glass pane
                      for this &lt;code&gt;JRootPane&lt;/code&gt;                    
                </param>
                <exception>
                    NullPointerException if the &lt;code&gt;glass&lt;/code&gt; parameter is
                      &lt;code&gt;null&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="setGlassPane" type="void" line="576">
                <params>
                    <param name="glass" type="Component"/>
                </params>
                <scope line="577"/>
                <declaration name="visible" type="boolean" line="581"/>
                <scope line="582"/>
                <scope line="589"/>
            </method>
            <javadoc line="593">
                Returns the current glass pane for this &lt;code&gt;JRootPane&lt;/code&gt;.                
                <return>
                    the current glass pane                    
                </return>
                <see>
                    #setGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="598"/>
            <javadoc line="601">
                If a descendant of this &lt;code&gt;JRootPane&lt;/code&gt; calls
                  &lt;code&gt;revalidate&lt;/code&gt;, validate from here on down.
                  &lt;p&gt;
                  Deferred requests to layout a component and its descendents again.
                  For example, calls to &lt;code&gt;revalidate&lt;/code&gt;, are pushed upwards to
                  either a &lt;code&gt;JRootPane&lt;/code&gt; or a &lt;code&gt;JScrollPane&lt;/code&gt;
                  because both classes override &lt;code&gt;isValidateRoot&lt;/code&gt; to return true.                
                <see>
                    JComponent#isValidateRoot                    
                </see>
                <see>
                    java.awt.Container#isValidateRoot                    
                </see>
                <return>
                    true                    
                </return>
            </javadoc>
            <method name="isValidateRoot" type="boolean" line="613"/>
            <javadoc line="616">
                The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt;
                  have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt;
                  does not tiles its children and this should return false.
                  On the other hand, the &lt;code&gt;glassPane&lt;/code&gt;
                  is normally not visible, and so this can return true if the
                  &lt;code&gt;glassPane&lt;/code&gt; isn&apos;t visible. Therefore, the
                  return value here depends upon the visiblity of the
                  &lt;code&gt;glassPane&lt;/code&gt;.                
                <return>
                    true if this component&apos;s children don&apos;t overlap                    
                </return>
            </javadoc>
            <method name="isOptimizedDrawingEnabled" type="boolean" line="627"/>
            <javadoc line="630">
                {@inheritDoc}                
            </javadoc>
            <method name="addNotify" type="void" line="633"/>
            <javadoc line="637">
                {@inheritDoc}                
            </javadoc>
            <method name="removeNotify" type="void" line="640"/>
            <javadoc line="643">
                Sets the &lt;code&gt;defaultButton&lt;/code&gt; property,
                  which determines the current default button for this &lt;code&gt;JRootPane&lt;/code&gt;.
                  The default button is the button which will be activated
                  when a UI-defined activation event (typically the &lt;b&gt;Enter&lt;/b&gt; key)
                  occurs in the root pane regardless of whether or not the button
                  has keyboard focus (unless there is another component within
                  the root pane which consumes the activation event,
                  such as a &lt;code&gt;JTextPane&lt;/code&gt;).
                  For default activation to work, the button must be an enabled
                  descendent of the root pane when activation occurs.
                  To remove a default button from this root pane, set this
                  property to &lt;code&gt;null&lt;/code&gt;.                
                <see>
                    JButton#isDefaultButton                    
                </see>
                <param>
                    defaultButton the &lt;code&gt;JButton&lt;/code&gt; which is to be the default button                    
                </param>
                <beaninfodescription>
                    : The button activated by default in this root pane                    
                </beaninfodescription>
            </javadoc>
            <method name="setDefaultButton" type="void" line="660">
                <params>
                    <param name="defaultButton" type="JButton"/>
                </params>
                <declaration name="oldDefault" type="JButton" line="661"/>
                <scope line="662">
                    <scope line="664"/>
                    <scope line="667"/>
                </scope>
            </method>
            <javadoc line="673">
                Returns the value of the &lt;code&gt;defaultButton&lt;/code&gt; property.                
                <return>
                    the &lt;code&gt;JButton&lt;/code&gt; which is currently the default button                    
                </return>
                <see>
                    #setDefaultButton                    
                </see>
            </javadoc>
            <method name="getDefaultButton" type="JButton" line="678"/>
            <method name="setUseTrueDoubleBuffering" type="void" line="681">
                <params>
                    <param name="useTrueDoubleBuffering" type="boolean"/>
                </params>
            </method>
            <method name="getUseTrueDoubleBuffering" type="boolean" line="684"/>
            <method name="disableTrueDoubleBuffering" type="void" line="687">
                <scope line="688">
                    <scope line="689">
                        <scope line="690"/>
                    </scope>
                </scope>
            </method>
            <class name="DefaultAction" line="699">
                <extends class="AbstractAction"/>
                <declaration name="owner" type="JButton" line="700"/>
                <declaration name="root" type="JRootPane" line="701"/>
                <declaration name="press" type="boolean" line="702"/>
                <method name="DefaultAction" type="constructor" line="703">
                    <params>
                        <param name="root" type="JRootPane"/>
                        <param name="press" type="boolean"/>
                    </params>
                </method>
                <method name="setOwner" type="void" line="707">
                    <params>
                        <param name="owner" type="JButton"/>
                    </params>
                </method>
                <method name="actionPerformed" type="void" line="710">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="711">
                        <declaration name="model" type="ButtonModel" line="712"/>
                        <scope line="713"/>
                        <scope line="717"/>
                    </scope>
                </method>
                <method name="isEnabled" type="boolean" line="722"/>
            </class>
            <javadoc line="726">
                Overridden to enforce the position of the glass component as
                  the zero child.                
                <param>
                    comp the component to be enhanced                    
                </param>
                <param>
                    constraints the constraints to be respected                    
                </param>
                <param>
                    index the index                    
                </param>
            </javadoc>
            <method name="addImpl" type="void" line="733">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="735"/>
            </method>
            <class name="RootLayout" line="739">
                <implements interface="LayoutManager2"/>
                <implements interface="Serializable"/>
                <javadoc line="739">
                    A custom layout manager that is responsible for the layout of
                      layeredPane, glassPane, and menuBar.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="753">
                    Returns the amount of space the layout would like to have.                    
                    <param>
                        parent the Container for which this layout manager
                          is being used                        
                    </param>
                    <return>
                        a Dimension object containing the layout&apos;s preferred size                        
                    </return>
                </javadoc>
                <method name="preferredLayoutSize" type="Dimension" line="759">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="rd" type="Dimension" line="760"/>
                    <declaration name="i" type="Insets" line="761"/>
                    <scope line="762"/>
                    <scope line="765"/>
                    <scope line="768"/>
                    <scope line="771"/>
                </method>
                <javadoc line="776">
                    Returns the minimum amount of space the layout needs.                    
                    <param>
                        parent the Container for which this layout manager
                          is being used                        
                    </param>
                    <return>
                        a Dimension object containing the layout&apos;s minimum size                        
                    </return>
                </javadoc>
                <method name="minimumLayoutSize" type="Dimension" line="782">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="rd" type="Dimension" line="783"/>
                    <declaration name="i" type="Insets" line="784"/>
                    <scope line="785"/>
                    <scope line="788"/>
                    <scope line="791"/>
                    <scope line="794"/>
                </method>
                <javadoc line="799">
                    Returns the maximum amount of space the layout can use.                    
                    <param>
                        target the Container for which this layout manager
                          is being used                        
                    </param>
                    <return>
                        a Dimension object containing the layout&apos;s maximum size                        
                    </return>
                </javadoc>
                <method name="maximumLayoutSize" type="Dimension" line="805">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                    <declaration name="rd" type="Dimension" line="806"/>
                    <declaration name="i" type="Insets" line="807"/>
                    <scope line="808"/>
                    <scope line="811"/>
                    <scope line="814"/>
                    <scope line="817"/>
                </method>
                <javadoc line="822">
                    Instructs the layout manager to perform the layout for the specified
                      container.                    
                    <param>
                        parent the Container for which this layout manager
                          is being used                        
                    </param>
                </javadoc>
                <method name="layoutContainer" type="void" line="828">
                    <params>
                        <param name="parent" type="Container"/>
                    </params>
                    <declaration name="b" type="Rectangle" line="829"/>
                    <declaration name="i" type="Insets" line="830"/>
                    <declaration name="contentY" type="int" line="831"/>
                    <declaration name="w" type="int" line="832"/>
                    <declaration name="h" type="int" line="833"/>
                    <scope line="834"/>
                    <scope line="837"/>
                    <scope line="840">
                        <declaration name="mbd" type="Dimension" line="841"/>
                    </scope>
                    <scope line="845"/>
                </method>
                <method name="addLayoutComponent" type="void" line="849">
                    <params>
                        <param name="name" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="851">
                    <params>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="addLayoutComponent" type="void" line="853">
                    <params>
                        <param name="comp" type="Component"/>
                        <param name="constraints" type="Object"/>
                    </params>
                </method>
                <method name="getLayoutAlignmentX" type="float" line="855">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="getLayoutAlignmentY" type="float" line="858">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="invalidateLayout" type="void" line="861">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
            </class>
            <javadoc line="864">
                Returns a string representation of this &lt;code&gt;JRootPane&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes,
                  and the content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JRootPane&lt;/code&gt;.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="872"/>
            <javadoc line="875">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JRootPane&lt;/code&gt;. For root panes, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJRootPane&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJRootPane&lt;/code&gt; instance is created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleJRootPane&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;JRootPane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="884">
                <scope line="885"/>
            </method>
            <class name="AccessibleJRootPane" line="890">
                <extends class="AccessibleJComponent"/>
                <javadoc line="890">
                    This class implements accessibility support for the
                      &lt;code&gt;JRootPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to root pane user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="905">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of
                          the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="910"/>
                <javadoc line="913">
                    Returns the number of accessible children of the object.                    
                    <return>
                        the number of accessible children of the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="917"/>
                <javadoc line="920">
                    Returns the specified Accessible child of the object.  The Accessible
                      children of an Accessible object are zero-based, so the first child
                      of an Accessible child is at index 0, the second child is at index 1,
                      and so on.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the Accessible child of the object                        
                    </return>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="929">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
            </class>
        </class>
    </source>