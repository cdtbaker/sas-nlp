<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="java.text"/>
        <import package="java.awt.geom"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.Transient"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.text.html"/>
        <import package="javax.swing.plaf.basic"/>
        <import package="java.util"/>
        <class name="AbstractButton" line="47">
            <extends class="JComponent"/>
            <comment line="78">
                *********************************
                 ******* Button properties *******
                 *********************************                
            </comment>
            <comment line="89">
                Text positioning and alignment                
            </comment>
            <comment line="102">
                Paint options                
            </comment>
            <comment line="123">
                Icons                
            </comment>
            <comment line="164">
                for BeanBox                
            </comment>
            <comment line="168">
                Button icons
                 PENDING(jeff) - hold icons in an array                
            </comment>
            <comment line="180">
                Display properties                
            </comment>
            <comment line="186">
                Icon/Label Alignment                
            </comment>
            <comment line="205">
                Whether or not we&apos;ve set the LayoutManager.                
            </comment>
            <comment line="208">
                This is only used by JButton, promoted to avoid an extra
                 boolean field in JButton                
            </comment>
            <comment line="2092">
                *** Deprecated java.awt.Button APIs below *** //                
            </comment>
            <comment line="2319">
                Listeners that are added to model                
            </comment>
            <comment line="2364">
                /////////////////
                 Accessibility support
                /                
            </comment>
            <implements interface="ItemSelectable"/>
            <implements interface="SwingConstants"/>
            <javadoc line="47">
                Defines common behaviors for buttons and menu items.
                  &lt;p&gt;
                  Buttons can be configured, and to some degree controlled, by
                  &lt;code&gt;&lt;a href=&quot;Action.html&quot;&gt;Action&lt;/a&gt;&lt;/code&gt;s.  Using an
                  &lt;code&gt;Action&lt;/code&gt; with a button has many benefits beyond directly
                  configuring a button.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details, and you can find more information in &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/action.html&quot;&gt;How
                  to Use Actions&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  For further information see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/button.html&quot;&gt;How to Use Buttons, Check Boxes, and Radio Buttons&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="MODEL_CHANGED_PROPERTY" type="String" line="81"/>
            <javadoc line="81">
                Identifies a change in the button model.                
            </javadoc>
            <declaration name="TEXT_CHANGED_PROPERTY" type="String" line="83"/>
            <javadoc line="83">
                Identifies a change in the button&apos;s text.                
            </javadoc>
            <declaration name="MNEMONIC_CHANGED_PROPERTY" type="String" line="85"/>
            <javadoc line="85">
                Identifies a change to the button&apos;s mnemonic.                
            </javadoc>
            <declaration name="MARGIN_CHANGED_PROPERTY" type="String" line="89"/>
            <javadoc line="89">
                Identifies a change in the button&apos;s margins.                
            </javadoc>
            <declaration name="VERTICAL_ALIGNMENT_CHANGED_PROPERTY" type="String" line="91"/>
            <javadoc line="91">
                Identifies a change in the button&apos;s vertical alignment.                
            </javadoc>
            <declaration name="HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY" type="String" line="93"/>
            <javadoc line="93">
                Identifies a change in the button&apos;s horizontal alignment.                
            </javadoc>
            <declaration name="VERTICAL_TEXT_POSITION_CHANGED_PROPERTY" type="String" line="96"/>
            <javadoc line="96">
                Identifies a change in the button&apos;s vertical text position.                
            </javadoc>
            <declaration name="HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY" type="String" line="98"/>
            <javadoc line="98">
                Identifies a change in the button&apos;s horizontal text position.                
            </javadoc>
            <declaration name="BORDER_PAINTED_CHANGED_PROPERTY" type="String" line="102"/>
            <javadoc line="102">
                Identifies a change to having the border drawn,
                  or having it not drawn.                
            </javadoc>
            <declaration name="FOCUS_PAINTED_CHANGED_PROPERTY" type="String" line="107"/>
            <javadoc line="107">
                Identifies a change to having the border highlighted when focused,
                  or not.                
            </javadoc>
            <declaration name="ROLLOVER_ENABLED_CHANGED_PROPERTY" type="String" line="112"/>
            <javadoc line="112">
                Identifies a change from rollover enabled to disabled or back
                  to enabled.                
            </javadoc>
            <declaration name="CONTENT_AREA_FILLED_CHANGED_PROPERTY" type="String" line="117"/>
            <javadoc line="117">
                Identifies a change to having the button paint the content area.                
            </javadoc>
            <declaration name="ICON_CHANGED_PROPERTY" type="String" line="123"/>
            <javadoc line="123">
                Identifies a change to the icon that represents the button.                
            </javadoc>
            <declaration name="PRESSED_ICON_CHANGED_PROPERTY" type="String" line="126"/>
            <javadoc line="126">
                Identifies a change to the icon used when the button has been
                  pressed.                
            </javadoc>
            <declaration name="SELECTED_ICON_CHANGED_PROPERTY" type="String" line="131"/>
            <javadoc line="131">
                Identifies a change to the icon used when the button has
                  been selected.                
            </javadoc>
            <declaration name="ROLLOVER_ICON_CHANGED_PROPERTY" type="String" line="137"/>
            <javadoc line="137">
                Identifies a change to the icon used when the cursor is over
                  the button.                
            </javadoc>
            <declaration name="ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY" type="String" line="142"/>
            <javadoc line="142">
                Identifies a change to the icon used when the cursor is
                  over the button and it has been selected.                
            </javadoc>
            <declaration name="DISABLED_ICON_CHANGED_PROPERTY" type="String" line="148"/>
            <javadoc line="148">
                Identifies a change to the icon used when the button has
                  been disabled.                
            </javadoc>
            <declaration name="DISABLED_SELECTED_ICON_CHANGED_PROPERTY" type="String" line="153"/>
            <javadoc line="153">
                Identifies a change to the icon used when the button has been
                  disabled and selected.                
            </javadoc>
            <declaration name="model" type="ButtonModel" line="160"/>
            <javadoc line="160">
                The data model that determines the button&apos;s state.                
            </javadoc>
            <declaration name="text" type="String" line="163"/>
            <declaration name="margin" type="Insets" line="164"/>
            <declaration name="defaultMargin" type="Insets" line="165"/>
            <declaration name="defaultIcon" type="Icon" line="169"/>
            <declaration name="pressedIcon" type="Icon" line="170"/>
            <declaration name="disabledIcon" type="Icon" line="171"/>
            <declaration name="selectedIcon" type="Icon" line="173"/>
            <declaration name="disabledSelectedIcon" type="Icon" line="174"/>
            <declaration name="rolloverIcon" type="Icon" line="176"/>
            <declaration name="rolloverSelectedIcon" type="Icon" line="177"/>
            <declaration name="paintBorder" type="boolean" line="180"/>
            <declaration name="paintFocus" type="boolean" line="181"/>
            <declaration name="rolloverEnabled" type="boolean" line="182"/>
            <declaration name="contentAreaFilled" type="boolean" line="183"/>
            <declaration name="verticalAlignment" type="int" line="186"/>
            <declaration name="horizontalAlignment" type="int" line="187"/>
            <declaration name="verticalTextPosition" type="int" line="189"/>
            <declaration name="horizontalTextPosition" type="int" line="190"/>
            <declaration name="iconTextGap" type="int" line="192"/>
            <declaration name="mnemonic" type="int" line="194"/>
            <declaration name="mnemonicIndex" type="int" line="195"/>
            <declaration name="multiClickThreshhold" type="long" line="197"/>
            <declaration name="borderPaintedSet" type="boolean" line="199"/>
            <declaration name="rolloverEnabledSet" type="boolean" line="200"/>
            <declaration name="iconTextGapSet" type="boolean" line="201"/>
            <declaration name="contentAreaFilledSet" type="boolean" line="202"/>
            <declaration name="setLayout" type="boolean" line="205"/>
            <declaration name="defaultCapable" type="boolean" line="209"/>
            <declaration name="handler" type="Handler" line="211"/>
            <javadoc line="211">
                Combined listeners: ActionListener, ChangeListener, ItemListener.                
            </javadoc>
            <declaration name="changeListener" type="ChangeListener" line="216"/>
            <javadoc line="216">
                The button model&apos;s &lt;code&gt;changeListener&lt;/code&gt;.                
            </javadoc>
            <declaration name="actionListener" type="ActionListener" line="220"/>
            <javadoc line="220">
                The button model&apos;s &lt;code&gt;ActionListener&lt;/code&gt;.                
            </javadoc>
            <declaration name="itemListener" type="ItemListener" line="224"/>
            <javadoc line="224">
                The button model&apos;s &lt;code&gt;ItemListener&lt;/code&gt;.                
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="229"/>
            <javadoc line="229">
                Only one &lt;code&gt;ChangeEvent&lt;/code&gt; is needed per button
                  instance since the
                  event&apos;s only state is the source property.  The source of events
                  generated is always &quot;this&quot;.                
            </javadoc>
            <declaration name="hideActionText" type="boolean" line="237"/>
            <javadoc line="239">
                Sets the &lt;code&gt;hideActionText&lt;/code&gt; property, which determines
                  whether the button displays text from the &lt;code&gt;Action&lt;/code&gt;.
                  This is useful only if an &lt;code&gt;Action&lt;/code&gt; has been
                  installed on the button.                
                <param>
                    hideActionText &lt;code&gt;true&lt;/code&gt; if the button&apos;s
                      &lt;code&gt;text&lt;/code&gt; property should not reflect
                      that of the &lt;code&gt;Action&lt;/code&gt;; the default is
                      &lt;code&gt;false&lt;/code&gt;                    
                </param>
                <see>
                    &lt;a href=&quot;Action.html#buttonActions&quot;&gt;Swing Components Supporting
                               &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;                    
                </see>
                <since>
                    1.6                    
                </since>
                <beaninfo>
                    bound: true
                      expert: true
                      description: Whether the text of the button should come from
                      the &lt;code&gt;Action&lt;/code&gt;.                    
                </beaninfo>
            </javadoc>
            <method name="setHideActionText" type="void" line="258">
                <params>
                    <param name="hideActionText" type="boolean"/>
                </params>
                <scope line="259">
                    <scope line="261"/>
                </scope>
            </method>
            <javadoc line="269">
                Returns the value of the &lt;code&gt;hideActionText&lt;/code&gt; property, which
                  determines whether the button displays text from the
                  &lt;code&gt;Action&lt;/code&gt;.  This is useful only if an &lt;code&gt;Action&lt;/code&gt;
                  has been installed on the button.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the button&apos;s &lt;code&gt;text&lt;/code&gt;
                      property should not reflect that of the
                      &lt;code&gt;Action&lt;/code&gt;; the default is &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getHideActionText" type="boolean" line="280"/>
            <javadoc line="284">
                Returns the button&apos;s text.                
                <return>
                    the buttons text                    
                </return>
                <see>
                    #setText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="289"/>
            <javadoc line="293">
                Sets the button&apos;s text.                
                <param>
                    text the string used to set the text                    
                </param>
                <see>
                    #getText                    
                </see>
                <beaninfo>
                    bound: true
                      preferred: true
                      attribute: visualUpdate true
                      description: The button&apos;s text.                    
                </beaninfo>
            </javadoc>
            <method name="setText" type="void" line="303">
                <params>
                    <param name="text" type="String"/>
                </params>
                <declaration name="oldValue" type="String" line="304"/>
                <scope line="309"/>
                <scope line="314"/>
            </method>
            <javadoc line="321">
                Returns the state of the button. True if the
                  toggle button is selected, false if it&apos;s not.                
                <return>
                    true if the toggle button is selected, otherwise false                    
                </return>
            </javadoc>
            <method name="isSelected" type="boolean" line="326"/>
            <javadoc line="330">
                Sets the state of the button. Note that this method does not
                  trigger an &lt;code&gt;actionEvent&lt;/code&gt;.
                  Call &lt;code&gt;doClick&lt;/code&gt; to perform a programatic action change.                
                <param>
                    b  true if the button is selected, otherwise false                    
                </param>
            </javadoc>
            <method name="setSelected" type="void" line="337">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="341">
                    TIGER - 4840653
                     Removed code which fired an AccessibleState.SELECTED
                     PropertyChangeEvent since this resulted in two
                     identical events being fired since
                     AbstractButton.fireItemStateChanged also fires the
                     same event. This caused screen readers to speak the
                     name of the item twice.                    
                </comment>
                <declaration name="oldValue" type="boolean" line="338"/>
            </method>
            <javadoc line="351">
                Programmatically perform a &quot;click&quot;. This does the same
                  thing as if the user had pressed and released the button.                
            </javadoc>
            <method name="doClick" type="void" line="355"/>
            <javadoc line="359">
                Programmatically perform a &quot;click&quot;. This does the same
                  thing as if the user had pressed and released the button.
                  The button stays visually &quot;pressed&quot; for &lt;code&gt;pressTime&lt;/code&gt;
                  milliseconds.                
                <param>
                    pressTime the time to &quot;hold down&quot; the button, in milliseconds                    
                </param>
            </javadoc>
            <method name="doClick" type="void" line="367">
                <params>
                    <param name="pressTime" type="int"/>
                </params>
                <declaration name="size" type="Dimension" line="368"/>
                <scope line="372"/>
                <scope line="374"/>
            </method>
            <javadoc line="380">
                Sets space for margin between the button&apos;s border and
                  the label. Setting to &lt;code&gt;null&lt;/code&gt; will cause the button to
                  use the default margin.  The button&apos;s default &lt;code&gt;Border&lt;/code&gt;
                  object will use this value to create the proper margin.
                  However, if a non-default border is set on the button,
                  it is that &lt;code&gt;Border&lt;/code&gt; object&apos;s responsibility to create the
                  appropriate margin space (else this property will
                  effectively be ignored).                
                <param>
                    m the space between the border and the label                    
                </param>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The space between the button&apos;s border and the label.                    
                </beaninfo>
            </javadoc>
            <method name="setMargin" type="void" line="397">
                <params>
                    <param name="m" type="Insets"/>
                </params>
                <comment line="399">
                    Cache the old margin if it comes from the UI                    
                </comment>
                <comment line="406">
                    If the client passes in a null insets, restore the margin
                     from the UI if possible                    
                </comment>
                <scope line="399"/>
                <scope line="401"/>
                <scope line="407"/>
                <declaration name="old" type="Insets" line="411"/>
                <scope line="414"/>
            </method>
            <javadoc line="420">
                Returns the margin between the button&apos;s border and
                  the label.                
                <return>
                    an &lt;code&gt;Insets&lt;/code&gt; object specifying the margin
                      between the botton&apos;s border and the label                    
                </return>
                <see>
                    #setMargin                    
                </see>
            </javadoc>
            <method name="getMargin" type="Insets" line="428"/>
            <javadoc line="432">
                Returns the default icon.                
                <return>
                    the default &lt;code&gt;Icon&lt;/code&gt;                    
                </return>
                <see>
                    #setIcon                    
                </see>
            </javadoc>
            <method name="getIcon" type="Icon" line="437"/>
            <javadoc line="441">
                Sets the button&apos;s default icon. This icon is
                  also used as the &quot;pressed&quot; and &quot;disabled&quot; icon if
                  there is no explicitly set pressed icon.                
                <param>
                    defaultIcon the icon used as the default image                    
                </param>
                <see>
                    #getIcon                    
                </see>
                <see>
                    #setPressedIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The button&apos;s default icon                    
                </beaninfo>
            </javadoc>
            <method name="setIcon" type="void" line="454">
                <params>
                    <param name="defaultIcon" type="Icon"/>
                </params>
                <comment line="459">
                    If the default icon has really changed and we had
                     generated the disabled icon for this component,
                     (i.e. setDisabledIcon() was never called) then
                     clear the disabledIcon field.                    
                </comment>
                <declaration name="oldValue" type="Icon" line="455"/>
                <scope line="463"/>
                <scope line="468"/>
                <scope line="473">
                    <scope line="476"/>
                </scope>
            </method>
            <javadoc line="483">
                Returns the pressed icon for the button.                
                <return>
                    the &lt;code&gt;pressedIcon&lt;/code&gt; property                    
                </return>
                <see>
                    #setPressedIcon                    
                </see>
            </javadoc>
            <method name="getPressedIcon" type="Icon" line="488"/>
            <javadoc line="492">
                Sets the pressed icon for the button.                
                <param>
                    pressedIcon the icon used as the &quot;pressed&quot; image                    
                </param>
                <see>
                    #getPressedIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The pressed icon for the button.                    
                </beaninfo>
            </javadoc>
            <method name="setPressedIcon" type="void" line="501">
                <params>
                    <param name="pressedIcon" type="Icon"/>
                </params>
                <declaration name="oldValue" type="Icon" line="502"/>
                <scope line="505"/>
                <scope line="510">
                    <scope line="511"/>
                </scope>
            </method>
            <javadoc line="517">
                Returns the selected icon for the button.                
                <return>
                    the &lt;code&gt;selectedIcon&lt;/code&gt; property                    
                </return>
                <see>
                    #setSelectedIcon                    
                </see>
            </javadoc>
            <method name="getSelectedIcon" type="Icon" line="522"/>
            <javadoc line="526">
                Sets the selected icon for the button.                
                <param>
                    selectedIcon the icon used as the &quot;selected&quot; image                    
                </param>
                <see>
                    #getSelectedIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The selected icon for the button.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectedIcon" type="void" line="535">
                <params>
                    <param name="selectedIcon" type="Icon"/>
                </params>
                <comment line="540">
                    If the default selected icon has really changed and we had
                     generated the disabled selected icon for this component,
                     (i.e. setDisabledSelectedIcon() was never called) then
                     clear the disabledSelectedIcon field.                    
                </comment>
                <declaration name="oldValue" type="Icon" line="536"/>
                <scope line="545"/>
                <scope line="551"/>
                <scope line="556">
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="563">
                Returns the rollover icon for the button.                
                <return>
                    the &lt;code&gt;rolloverIcon&lt;/code&gt; property                    
                </return>
                <see>
                    #setRolloverIcon                    
                </see>
            </javadoc>
            <method name="getRolloverIcon" type="Icon" line="568"/>
            <javadoc line="572">
                Sets the rollover icon for the button.                
                <param>
                    rolloverIcon the icon used as the &quot;rollover&quot; image                    
                </param>
                <see>
                    #getRolloverIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The rollover icon for the button.                    
                </beaninfo>
            </javadoc>
            <method name="setRolloverIcon" type="void" line="581">
                <params>
                    <param name="rolloverIcon" type="Icon"/>
                </params>
                <comment line="593">
                    No way to determine whether we are currently in
                     a rollover state, so repaint regardless                    
                </comment>
                <declaration name="oldValue" type="Icon" line="582"/>
                <scope line="585"/>
                <scope line="591"/>
            </method>
            <javadoc line="599">
                Returns the rollover selection icon for the button.                
                <return>
                    the &lt;code&gt;rolloverSelectedIcon&lt;/code&gt; property                    
                </return>
                <see>
                    #setRolloverSelectedIcon                    
                </see>
            </javadoc>
            <method name="getRolloverSelectedIcon" type="Icon" line="604"/>
            <javadoc line="608">
                Sets the rollover selected icon for the button.                
                <param>
                    rolloverSelectedIcon the icon used as the
                      &quot;selected rollover&quot; image                    
                </param>
                <see>
                    #getRolloverSelectedIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The rollover selected icon for the button.                    
                </beaninfo>
            </javadoc>
            <method name="setRolloverSelectedIcon" type="void" line="618">
                <params>
                    <param name="rolloverSelectedIcon" type="Icon"/>
                </params>
                <comment line="630">
                    No way to determine whether we are currently in
                     a rollover state, so repaint regardless                    
                </comment>
                <declaration name="oldValue" type="Icon" line="619"/>
                <scope line="622"/>
                <scope line="628">
                    <scope line="631"/>
                </scope>
            </method>
            <javadoc line="637">
                Returns the icon used by the button when it&apos;s disabled.
                  If no disabled icon has been set this will forward the call to
                  the look and feel to construct an appropriate disabled Icon.
                  &lt;p&gt;
                  Some look and feels might not render the disabled Icon, in which
                  case they will ignore this.                
                <return>
                    the &lt;code&gt;disabledIcon&lt;/code&gt; property                    
                </return>
                <see>
                    #getPressedIcon                    
                </see>
                <see>
                    #setDisabledIcon                    
                </see>
                <see>
                    javax.swing.LookAndFeel#getDisabledIcon                    
                </see>
            </javadoc>
            <method name="getDisabledIcon" type="Icon" line="651">
                <scope line="652">
                    <scope line="654"/>
                </scope>
            </method>
            <javadoc line="661">
                Sets the disabled icon for the button.                
                <param>
                    disabledIcon the icon used as the disabled image                    
                </param>
                <see>
                    #getDisabledIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The disabled icon for the button.                    
                </beaninfo>
            </javadoc>
            <method name="setDisabledIcon" type="void" line="670">
                <params>
                    <param name="disabledIcon" type="Icon"/>
                </params>
                <declaration name="oldValue" type="Icon" line="671"/>
                <scope line="674"/>
                <scope line="679">
                    <scope line="680"/>
                </scope>
            </method>
            <javadoc line="686">
                Returns the icon used by the button when it&apos;s disabled and selected.
                  If no disabled selection icon has been set, this will forward
                  the call to the LookAndFeel to construct an appropriate disabled
                  Icon from the selection icon if it has been set and to
                  &lt;code&gt;getDisabledIcon()&lt;/code&gt; otherwise.
                  &lt;p&gt;
                  Some look and feels might not render the disabled selected Icon, in
                  which case they will ignore this.                
                <return>
                    the &lt;code&gt;disabledSelectedIcon&lt;/code&gt; property                    
                </return>
                <see>
                    #getDisabledIcon                    
                </see>
                <see>
                    #setDisabledSelectedIcon                    
                </see>
                <see>
                    javax.swing.LookAndFeel#getDisabledSelectedIcon                    
                </see>
            </javadoc>
            <method name="getDisabledSelectedIcon" type="Icon" line="701">
                <scope line="702">
                    <scope line="703"/>
                    <scope line="706"/>
                </scope>
            </method>
            <javadoc line="713">
                Sets the disabled selection icon for the button.                
                <param>
                    disabledSelectedIcon the icon used as the disabled
                      selection image                    
                </param>
                <see>
                    #getDisabledSelectedIcon                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The disabled selection icon for the button.                    
                </beaninfo>
            </javadoc>
            <method name="setDisabledSelectedIcon" type="void" line="723">
                <params>
                    <param name="disabledSelectedIcon" type="Icon"/>
                </params>
                <declaration name="oldValue" type="Icon" line="724"/>
                <scope line="727"/>
                <scope line="732">
                    <scope line="735"/>
                    <scope line="738"/>
                </scope>
            </method>
            <javadoc line="744">
                Returns the vertical alignment of the text and icon.                
                <return>
                    the &lt;code&gt;verticalAlignment&lt;/code&gt; property, one of the
                      following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.CENTER} (the default)
                      &lt;li&gt;{@code SwingConstants.TOP}&lt;li&gt;{@code SwingConstants.BOTTOM}&lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="getVerticalAlignment" type="int" line="755"/>
            <javadoc line="759">
                Sets the vertical alignment of the icon and text.                
                <param>
                    alignment one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.CENTER} (the default)
                      &lt;li&gt;{@code SwingConstants.TOP}&lt;li&gt;{@code SwingConstants.BOTTOM}&lt;/ul&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if the alignment is not one of the legal
                      values listed above                    
                </throws>
                <beaninfo>
                    bound: true
                      enum: TOP    SwingConstants.TOP
                      CENTER SwingConstants.CENTER
                      BOTTOM  SwingConstants.BOTTOM
                      attribute: visualUpdate true
                      description: The vertical alignment of the icon and text.                    
                </beaninfo>
            </javadoc>
            <method name="setVerticalAlignment" type="void" line="777">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="779"/>
            </method>
            <javadoc line="784">
                Returns the horizontal alignment of the icon and text.{@code AbstractButton}&apos;s default is {@code SwingConstants.CENTER},
                  but subclasses such as {@code JCheckBox} may use a different default.                
                <return>
                    the &lt;code&gt;horizontalAlignment&lt;/code&gt; property,
                      one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.RIGHT}&lt;li&gt;{@code SwingConstants.LEFT}&lt;li&gt;{@code SwingConstants.CENTER}&lt;li&gt;{@code SwingConstants.LEADING}&lt;li&gt;{@code SwingConstants.TRAILING}&lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="getHorizontalAlignment" type="int" line="799"/>
            <javadoc line="803">
                Sets the horizontal alignment of the icon and text.{@code AbstractButton}&apos;s default is {@code SwingConstants.CENTER},
                  but subclasses such as {@code JCheckBox} may use a different default.                
                <param>
                    alignment the alignment value, one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.RIGHT}&lt;li&gt;{@code SwingConstants.LEFT}&lt;li&gt;{@code SwingConstants.CENTER}&lt;li&gt;{@code SwingConstants.LEADING}&lt;li&gt;{@code SwingConstants.TRAILING}&lt;/ul&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if the alignment is not one of the
                      valid values                    
                </throws>
                <beaninfo>
                    bound: true
                      enum: LEFT     SwingConstants.LEFT
                      CENTER   SwingConstants.CENTER
                      RIGHT    SwingConstants.RIGHT
                      LEADING  SwingConstants.LEADING
                      TRAILING SwingConstants.TRAILING
                      attribute: visualUpdate true
                      description: The horizontal alignment of the icon and text.                    
                </beaninfo>
            </javadoc>
            <method name="setHorizontalAlignment" type="void" line="828">
                <params>
                    <param name="alignment" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="830"/>
            </method>
            <javadoc line="839">
                Returns the vertical position of the text relative to the icon.                
                <return>
                    the &lt;code&gt;verticalTextPosition&lt;/code&gt; property,
                      one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.CENTER} (the default)
                      &lt;li&gt;{@code SwingConstants.TOP}&lt;li&gt;{@code SwingConstants.BOTTOM}&lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="getVerticalTextPosition" type="int" line="849"/>
            <javadoc line="853">
                Sets the vertical position of the text relative to the icon.                
                <param>
                    textPosition  one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.CENTER} (the default)
                      &lt;li&gt;{@code SwingConstants.TOP}&lt;li&gt;{@code SwingConstants.BOTTOM}&lt;/ul&gt;                    
                </param>
                <beaninfo>
                    bound: true
                      enum: TOP    SwingConstants.TOP
                      CENTER SwingConstants.CENTER
                      BOTTOM SwingConstants.BOTTOM
                      attribute: visualUpdate true
                      description: The vertical position of the text relative to the icon.                    
                </beaninfo>
            </javadoc>
            <method name="setVerticalTextPosition" type="void" line="869">
                <params>
                    <param name="textPosition" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="871"/>
            </method>
            <javadoc line="878">
                Returns the horizontal position of the text relative to the icon.                
                <return>
                    the &lt;code&gt;horizontalTextPosition&lt;/code&gt; property,
                      one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.RIGHT}&lt;li&gt;{@code SwingConstants.LEFT}&lt;li&gt;{@code SwingConstants.CENTER}&lt;li&gt;{@code SwingConstants.LEADING}&lt;li&gt;{@code SwingConstants.TRAILING} (the default)
                      &lt;/ul&gt;                    
                </return>
            </javadoc>
            <method name="getHorizontalTextPosition" type="int" line="890"/>
            <javadoc line="894">
                Sets the horizontal position of the text relative to the icon.                
                <param>
                    textPosition one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;{@code SwingConstants.RIGHT}&lt;li&gt;{@code SwingConstants.LEFT}&lt;li&gt;{@code SwingConstants.CENTER}&lt;li&gt;{@code SwingConstants.LEADING}&lt;li&gt;{@code SwingConstants.TRAILING} (the default)
                      &lt;/ul&gt;                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;textPosition&lt;/code&gt;
                      is not one of the legal values listed above                    
                </exception>
                <beaninfo>
                    bound: true
                      enum: LEFT     SwingConstants.LEFT
                      CENTER   SwingConstants.CENTER
                      RIGHT    SwingConstants.RIGHT
                      LEADING  SwingConstants.LEADING
                      TRAILING SwingConstants.TRAILING
                      attribute: visualUpdate true
                      description: The horizontal position of the text relative to the icon.                    
                </beaninfo>
            </javadoc>
            <method name="setHorizontalTextPosition" type="void" line="916">
                <params>
                    <param name="textPosition" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="918"/>
            </method>
            <javadoc line="928">
                Returns the amount of space between the text and the icon
                  displayed in this button.                
                <return>
                    an int equal to the number of pixels between the text
                      and the icon.                    
                </return>
                <since>
                    1.4                    
                </since>
                <see>
                    #setIconTextGap                    
                </see>
            </javadoc>
            <method name="getIconTextGap" type="int" line="937"/>
            <javadoc line="941">
                If both the icon and text properties are set, this property
                  defines the space between them.
                  &lt;p&gt;
                  The default value of this property is 4 pixels.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <since>
                    1.4                    
                </since>
                <see>
                    #getIconTextGap                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: If both the icon and text properties are set, this
                      property defines the space between them.                    
                </beaninfo>
            </javadoc>
            <method name="setIconTextGap" type="void" line="957">
                <params>
                    <param name="iconTextGap" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="958"/>
                <scope line="962"/>
            </method>
            <javadoc line="968">
                Verify that the {@code key} argument is a legal value for the{@code horizontalAlignment} and {@code horizontalTextPosition}properties. Valid values are:
                  &lt;ul&gt;
                  &lt;li&gt;{@code SwingConstants.RIGHT}&lt;li&gt;{@code SwingConstants.LEFT}&lt;li&gt;{@code SwingConstants.CENTER}&lt;li&gt;{@code SwingConstants.LEADING}&lt;li&gt;{@code SwingConstants.TRAILING}&lt;/ul&gt;                
                <param>
                    key the property value to check                    
                </param>
                <param>
                    exception the message to use in the{@code IllegalArgumentException} that is thrown for an invalid
                      value                    
                </param>
                <exception>
                    IllegalArgumentException if key is not one of the legal
                      values listed above                    
                </exception>
                <see>
                    #setHorizontalTextPosition                    
                </see>
                <see>
                    #setHorizontalAlignment                    
                </see>
            </javadoc>
            <method name="checkHorizontalKey" type="int" line="989">
                <params>
                    <param name="key" type="int"/>
                    <param name="exception" type="String"/>
                </params>
                <scope line="994"/>
                <scope line="996"/>
            </method>
            <javadoc line="1001">
                Verify that the {@code key} argument is a legal value for the
                  vertical properties. Valid values are:
                  &lt;ul&gt;
                  &lt;li&gt;{@code SwingConstants.CENTER}&lt;li&gt;{@code SwingConstants.TOP}&lt;li&gt;{@code SwingConstants.BOTTOM}&lt;/ul&gt;                
                <param>
                    key the property value to check                    
                </param>
                <param>
                    exception the message to use in the{@code IllegalArgumentException} that is thrown for an invalid
                      value                    
                </param>
                <exception>
                    IllegalArgumentException if key is not one of the legal
                      values listed above                    
                </exception>
            </javadoc>
            <method name="checkVerticalKey" type="int" line="1017">
                <params>
                    <param name="key" type="int"/>
                    <param name="exception" type="String"/>
                </params>
                <scope line="1018"/>
                <scope line="1020"/>
            </method>
            <javadoc line="1025">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="removeNotify" type="void" line="1030">
                <scope line="1032"/>
            </method>
            <javadoc line="1037">
                Sets the action command for this button.                
                <param>
                    actionCommand the action command for this button                    
                </param>
            </javadoc>
            <method name="setActionCommand" type="void" line="1041">
                <params>
                    <param name="actionCommand" type="String"/>
                </params>
            </method>
            <javadoc line="1045">
                Returns the action command for this button.                
                <return>
                    the action command for this button                    
                </return>
            </javadoc>
            <method name="getActionCommand" type="String" line="1049">
                <declaration name="ac" type="String" line="1050"/>
                <scope line="1051"/>
            </method>
            <declaration name="action" type="Action" line="1057"/>
            <declaration name="actionPropertyChangeListener" type="PropertyChangeListener" line="1058"/>
            <javadoc line="1060">
                Sets the &lt;code&gt;Action&lt;/code&gt;.
                  The new &lt;code&gt;Action&lt;/code&gt; replaces any previously set
                  &lt;code&gt;Action&lt;/code&gt; but does not affect &lt;code&gt;ActionListeners&lt;/code&gt;
                  independently added with &lt;code&gt;addActionListener&lt;/code&gt;.
                  If the &lt;code&gt;Action&lt;/code&gt; is already a registered
                  &lt;code&gt;ActionListener&lt;/code&gt; for the button, it is not re-registered.
                  &lt;p&gt;
                  Setting the &lt;code&gt;Action&lt;/code&gt; results in immediately changing
                  all the properties described in &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt;.
                  Subsequently, the button&apos;s properties are automatically updated
                  as the &lt;code&gt;Action&lt;/code&gt;&apos;s properties change.
                  &lt;p&gt;
                  This method uses three other methods to set
                  and help track the &lt;code&gt;Action&lt;/code&gt;&apos;s property values.
                  It uses the &lt;code&gt;configurePropertiesFromAction&lt;/code&gt; method
                  to immediately change the button&apos;s properties.
                  To track changes in the &lt;code&gt;Action&lt;/code&gt;&apos;s property values,
                  this method registers the &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                  returned by &lt;code&gt;createActionPropertyChangeListener&lt;/code&gt;. The
                  default {@code PropertyChangeListener} invokes the{@code actionPropertyChanged} method when a property in the{@code Action} changes.                
                <param>
                    a the &lt;code&gt;Action&lt;/code&gt; for the &lt;code&gt;AbstractButton&lt;/code&gt;,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #getAction                    
                </see>
                <see>
                    #configurePropertiesFromAction                    
                </see>
                <see>
                    #createActionPropertyChangeListener                    
                </see>
                <see>
                    #actionPropertyChanged                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the Action instance connected with this ActionEvent source                    
                </beaninfo>
            </javadoc>
            <method name="setAction" type="void" line="1098">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <comment line="1110">
                    Don&apos;t add if it is already a listener                    
                </comment>
                <comment line="1114">
                    Reverse linkage:                    
                </comment>
                <declaration name="oldValue" type="Action" line="1099"/>
                <scope line="1100">
                    <scope line="1102"/>
                    <scope line="1108">
                        <scope line="1110"/>
                    </scope>
                </scope>
            </method>
            <method name="isListener" type="boolean" line="1121">
                <params>
                    <param name="c" type="Class"/>
                    <param name="a" type="ActionListener"/>
                </params>
                <declaration name="isListener" type="boolean" line="1122"/>
                <declaration name="listeners" type="Object[]" line="1123"/>
                <scope line="1124">
                    <scope line="1125"/>
                </scope>
            </method>
            <javadoc line="1132">
                Returns the currently set &lt;code&gt;Action&lt;/code&gt; for this
                  &lt;code&gt;ActionEvent&lt;/code&gt; source, or &lt;code&gt;null&lt;/code&gt;
                  if no &lt;code&gt;Action&lt;/code&gt; is set.                
                <return>
                    the &lt;code&gt;Action&lt;/code&gt; for this &lt;code&gt;ActionEvent&lt;/code&gt;
                      source, or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="getAction" type="Action" line="1143"/>
            <javadoc line="1147">
                Sets the properties on this button to match those in the specified
                  &lt;code&gt;Action&lt;/code&gt;.  Refer to &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for more
                  details as to which properties this sets.                
                <param>
                    a the &lt;code&gt;Action&lt;/code&gt; from which to get the properties,
                      or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="configurePropertiesFromAction" type="void" line="1159">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <scope line="1167"/>
            </method>
            <method name="clientPropertyChanged" type="void" line="1174">
                <params>
                    <param name="key" type="Object"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="1175">
                    <declaration name="current" type="boolean" line="1176"/>
                    <scope line="1178"/>
                </scope>
            </method>
            <javadoc line="1184">
                Button subclasses that support mirroring the selected state from
                  the action should override this to return true.  AbstractButton&apos;s
                  implementation returns false.                
            </javadoc>
            <method name="shouldUpdateSelectedStateFromAction" type="boolean" line="1189"/>
            <javadoc line="1193">
                Updates the button&apos;s state in response to property changes in the
                  associated action. This method is invoked from the{@code PropertyChangeListener} returned from{@code createActionPropertyChangeListener}. Subclasses do not normally
                  need to invoke this. Subclasses that support additional {@code Action}properties should override this and{@code configurePropertiesFromAction}.
                  &lt;p&gt;
                  Refer to the table at &lt;a href=&quot;Action.html#buttonActions&quot;&gt;
                  Swing Components Supporting &lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; for a list of
                  the properties this method sets.                
                <param>
                    action the &lt;code&gt;Action&lt;/code&gt; associated with this button                    
                </param>
                <param>
                    propertyName the name of the property that changed                    
                </param>
                <since>
                    1.6                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #configurePropertiesFromAction                    
                </see>
            </javadoc>
            <method name="actionPropertyChanged" type="void" line="1212">
                <params>
                    <param name="action" type="Action"/>
                    <param name="propertyName" type="String"/>
                </params>
                <scope line="1213"/>
                <scope line="1215"/>
                <scope line="1217"/>
                <scope line="1219"/>
                <scope line="1221"/>
                <scope line="1223"/>
                <scope line="1227"/>
                <scope line="1229"/>
                <scope line="1231"/>
            </method>
            <method name="setDisplayedMnemonicIndexFromAction" type="void" line="1237">
                <params>
                    <param name="a" type="Action"/>
                    <param name="fromPropertyChange" type="boolean"/>
                </params>
                <declaration name="iValue" type="Integer" line="1238"/>
                <scope line="1240">
                    <declaration name="value" type="int" line="1241"/>
                    <scope line="1242"/>
                    <scope line="1244">
                        <declaration name="text" type="String" line="1246"/>
                        <scope line="1247"/>
                    </scope>
                </scope>
            </method>
            <method name="setMnemonicFromAction" type="void" line="1255">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="n" type="Integer" line="1256"/>
            </method>
            <method name="setTextFromAction" type="void" line="1261">
                <params>
                    <param name="a" type="Action"/>
                    <param name="propertyChange" type="boolean"/>
                </params>
                <declaration name="hideText" type="boolean" line="1262"/>
                <scope line="1263"/>
                <scope line="1267"/>
            </method>
            <method name="setIconFromAction" type="void" line="1272">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="icon" type="Icon" line="1273"/>
                <scope line="1274">
                    <scope line="1276"/>
                </scope>
            </method>
            <method name="smallIconChanged" type="void" line="1283">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <scope line="1284"/>
            </method>
            <method name="largeIconChanged" type="void" line="1289">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="setActionCommandFromAction" type="void" line="1293">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <javadoc line="1299">
                Sets the seleted state of the button from the action.  This is defined
                  here, but not wired up.  Subclasses like JToggleButton and
                  JCheckBoxMenuItem make use of it.                
                <param>
                    a the Action                    
                </param>
            </javadoc>
            <method name="setSelectedFromAction" type="void" line="1306">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <comment line="1313">
                    This won&apos;t notify ActionListeners, but that should be
                     ok as the change is coming from the Action.                    
                </comment>
                <comment line="1316">
                    Make sure the change actually took effect                    
                </comment>
                <declaration name="selected" type="boolean" line="1307"/>
                <scope line="1308"/>
                <scope line="1311">
                    <scope line="1316">
                        <scope line="1317">
                            <declaration name="group" type="ButtonGroup" line="1318"/>
                            <scope line="1319"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1327">
                Creates and returns a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that is
                  responsible for listening for changes from the specified
                  &lt;code&gt;Action&lt;/code&gt; and updating the appropriate properties.
                  &lt;p&gt;
                  &lt;b&gt;Warning:&lt;/b&gt; If you subclass this do not create an anonymous
                  inner class.  If you do the lifetime of the button will be tied to
                  that of the &lt;code&gt;Action&lt;/code&gt;.                
                <param>
                    a the button&apos;s action                    
                </param>
                <since>
                    1.3                    
                </since>
                <see>
                    Action                    
                </see>
                <see>
                    #setAction                    
                </see>
            </javadoc>
            <method name="createActionPropertyChangeListener" type="PropertyChangeListener" line="1341">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <method name="createActionPropertyChangeListener0" type="PropertyChangeListener" line="1346">
                <params>
                    <param name="a" type="Action"/>
                </params>
            </method>
            <class name="ButtonActionPropertyChangeListener" line="1350">
                <extends class="ActionPropertyChangeListener">
                    <type_params>
                        <type_param name="AbstractButton"/>
                    </type_params>
                </extends>
                <comment line="1979">
                    NOTE: This class is NOT used, instead the functionality has
                     been moved to Handler.                    
                </comment>
                <comment line="2324">
                    ChangeListener                    
                </comment>
                <comment line="2338">
                    ActionListener                    
                </comment>
                <comment line="2345">
                    ItemListener                    
                </comment>
                <comment line="2606">
                                        
                </comment>
                <comment line="2946">
                    Returns the text substring starting at the specified
                     offset with the specified length.                    
                </comment>
                <comment line="2964">
                    Returns the bounding rectangle for the component text.                    
                </comment>
                <comment line="3004">
                    ----- AccessibleExtendedComponent                    
                </comment>
                <method name="ButtonActionPropertyChangeListener" type="constructor" line="1352">
                    <params>
                        <param name="b" type="AbstractButton"/>
                        <param name="a" type="Action"/>
                    </params>
                </method>
                <method name="actionPropertyChanged" type="void" line="1357">
                    <params>
                        <param name="button" type="AbstractButton"/>
                        <param name="action" type="Action"/>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <scope line="1358"/>
                    <scope line="1360"/>
                </method>
            </class>
            <javadoc line="1366">
                Gets the &lt;code&gt;borderPainted&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;borderPainted&lt;/code&gt; property                    
                </return>
                <see>
                    #setBorderPainted                    
                </see>
            </javadoc>
            <method name="isBorderPainted" type="boolean" line="1372"/>
            <javadoc line="1376">
                Sets the &lt;code&gt;borderPainted&lt;/code&gt; property.
                  If &lt;code&gt;true&lt;/code&gt; and the button has a border,
                  the border is painted. The default value for the
                  &lt;code&gt;borderPainted&lt;/code&gt; property is &lt;code&gt;true&lt;/code&gt;.
                  &lt;p/&gt;
                  Some look and feels might not support
                  the &lt;code&gt;borderPainted&lt;/code&gt; property,
                  in which case they ignore this.                
                <param>
                    b if true and border property is not &lt;code&gt;null&lt;/code&gt;,
                      the border is painted                    
                </param>
                <see>
                    #isBorderPainted                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether the border should be painted.                    
                </beaninfo>
            </javadoc>
            <method name="setBorderPainted" type="void" line="1394">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1395"/>
                <scope line="1399"/>
            </method>
            <javadoc line="1405">
                Paint the button&apos;s border if &lt;code&gt;BorderPainted&lt;/code&gt;
                  property is true and the button has a border.                
                <param>
                    g the &lt;code&gt;Graphics&lt;/code&gt; context in which to paint                    
                </param>
                <see>
                    #paint                    
                </see>
                <see>
                    #setBorder                    
                </see>
            </javadoc>
            <method name="paintBorder" type="void" line="1413">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="1414"/>
            </method>
            <javadoc line="1419">
                Gets the &lt;code&gt;paintFocus&lt;/code&gt; property.                
                <return>
                    the &lt;code&gt;paintFocus&lt;/code&gt; property                    
                </return>
                <see>
                    #setFocusPainted                    
                </see>
            </javadoc>
            <method name="isFocusPainted" type="boolean" line="1425"/>
            <javadoc line="1429">
                Sets the &lt;code&gt;paintFocus&lt;/code&gt; property, which must
                  be &lt;code&gt;true&lt;/code&gt; for the focus state to be painted.
                  The default value for the &lt;code&gt;paintFocus&lt;/code&gt; property
                  is &lt;code&gt;true&lt;/code&gt;.
                  Some look and feels might not paint focus state;
                  they will ignore this property.                
                <param>
                    b if &lt;code&gt;true&lt;/code&gt;, the focus state should be painted                    
                </param>
                <see>
                    #isFocusPainted                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether focus should be painted                    
                </beaninfo>
            </javadoc>
            <method name="setFocusPainted" type="void" line="1444">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1445"/>
                <scope line="1448"/>
            </method>
            <javadoc line="1454">
                Gets the &lt;code&gt;contentAreaFilled&lt;/code&gt; property.                
                <return>
                    the &lt;code&gt;contentAreaFilled&lt;/code&gt; property                    
                </return>
                <see>
                    #setContentAreaFilled                    
                </see>
            </javadoc>
            <method name="isContentAreaFilled" type="boolean" line="1460"/>
            <javadoc line="1464">
                Sets the &lt;code&gt;contentAreaFilled&lt;/code&gt; property.
                  If &lt;code&gt;true&lt;/code&gt; the button will paint the content
                  area.  If you wish to have a transparent button, such as
                  an icon only button, for example, then you should set
                  this to &lt;code&gt;false&lt;/code&gt;. Do not call &lt;code&gt;setOpaque(false)&lt;/code&gt;.
                  The default value for the the &lt;code&gt;contentAreaFilled&lt;/code&gt;
                  property is &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt;
                  This function may cause the component&apos;s opaque property to change.
                  &lt;p&gt;
                  The exact behavior of calling this function varies on a
                  component-by-component and L&amp;F-by-L&amp;F basis.                
                <param>
                    b if true, the content should be filled; if false
                      the content area is not filled                    
                </param>
                <see>
                    #isContentAreaFilled                    
                </see>
                <see>
                    #setOpaque                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether the button should paint the content area
                      or leave it transparent.                    
                </beaninfo>
            </javadoc>
            <method name="setContentAreaFilled" type="void" line="1488">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1489"/>
                <scope line="1493"/>
            </method>
            <javadoc line="1498">
                Gets the &lt;code&gt;rolloverEnabled&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;rolloverEnabled&lt;/code&gt; property                    
                </return>
                <see>
                    #setRolloverEnabled                    
                </see>
            </javadoc>
            <method name="isRolloverEnabled" type="boolean" line="1504"/>
            <javadoc line="1508">
                Sets the &lt;code&gt;rolloverEnabled&lt;/code&gt; property, which
                  must be &lt;code&gt;true&lt;/code&gt; for rollover effects to occur.
                  The default value for the &lt;code&gt;rolloverEnabled&lt;/code&gt;
                  property is &lt;code&gt;false&lt;/code&gt;.
                  Some look and feels might not implement rollover effects;
                  they will ignore this property.                
                <param>
                    b if &lt;code&gt;true&lt;/code&gt;, rollover effects should be painted                    
                </param>
                <see>
                    #isRolloverEnabled                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether rollover effects should be enabled.                    
                </beaninfo>
            </javadoc>
            <method name="setRolloverEnabled" type="void" line="1523">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1524"/>
                <scope line="1528"/>
            </method>
            <javadoc line="1533">
                Returns the keyboard mnemonic from the the current model.                
                <return>
                    the keyboard mnemonic from the model                    
                </return>
            </javadoc>
            <method name="getMnemonic" type="int" line="1537"/>
            <javadoc line="1541">
                Sets the keyboard mnemonic on the current model.
                  The mnemonic is the key which when combined with the look and feel&apos;s
                  mouseless modifier (usually Alt) will activate this button
                  if focus is contained somewhere within this button&apos;s ancestor
                  window.
                  &lt;p&gt;
                  A mnemonic must correspond to a single key on the keyboard
                  and should be specified using one of the &lt;code&gt;VK_XXX&lt;/code&gt;
                  keycodes defined in &lt;code&gt;java.awt.event.KeyEvent&lt;/code&gt;.
                  These codes and the wider array of codes for international
                  keyboards may be obtained through
                  &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;.
                  Mnemonics are case-insensitive, therefore a key event
                  with the corresponding keycode would cause the button to be
                  activated whether or not the Shift modifier was pressed.
                  &lt;p&gt;
                  If the character defined by the mnemonic is found within
                  the button&apos;s label string, the first occurrence of it
                  will be underlined to indicate the mnemonic to the user.                
                <param>
                    mnemonic the key code which represents the mnemonic                    
                </param>
                <see>
                    java.awt.event.KeyEvent                    
                </see>
                <see>
                    #setDisplayedMnemonicIndex                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the keyboard character mnemonic                    
                </beaninfo>
            </javadoc>
            <method name="setMnemonic" type="void" line="1571">
                <params>
                    <param name="mnemonic" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="1572"/>
            </method>
            <javadoc line="1577">
                This method is now obsolete, please use &lt;code&gt;setMnemonic(int)&lt;/code&gt;
                  to set the mnemonic for a button.  This method is only designed
                  to handle character values which fall between &apos;a&apos; and &apos;z&apos; or
                  &apos;A&apos; and &apos;Z&apos;.                
                <param>
                    mnemonic  a char specifying the mnemonic value                    
                </param>
                <see>
                    #setMnemonic(int)                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the keyboard character mnemonic                    
                </beaninfo>
            </javadoc>
            <method name="setMnemonic" type="void" line="1590">
                <params>
                    <param name="mnemonic" type="char"/>
                </params>
                <declaration name="vk" type="int" line="1591"/>
            </method>
            <javadoc line="1597">
                Provides a hint to the look and feel as to which character in the
                  text should be decorated to represent the mnemonic. Not all look and
                  feels may support this. A value of -1 indicates either there is no
                  mnemonic, the mnemonic character is not contained in the string, or
                  the developer does not wish the mnemonic to be displayed.
                  &lt;p&gt;
                  The value of this is updated as the properties relating to the
                  mnemonic change (such as the mnemonic itself, the text...).
                  You should only ever have to call this if
                  you do not wish the default character to be underlined. For example, if
                  the text was &apos;Save As&apos;, with a mnemonic of &apos;a&apos;, and you wanted the &apos;A&apos;
                  to be decorated, as &apos;Save &lt;u&gt;A&lt;/u&gt;s&apos;, you would have to invoke
                  &lt;code&gt;setDisplayedMnemonicIndex(5)&lt;/code&gt; after invoking
                  &lt;code&gt;setMnemonic(KeyEvent.VK_A)&lt;/code&gt;.                
                <since>
                    1.4                    
                </since>
                <param>
                    index Index into the String to underline                    
                </param>
                <exception>
                    IllegalArgumentException will be thrown if &lt;code&gt;index&lt;/code&gt;
                      is &amp;gt;= length of the text, or &amp;lt; -1                    
                </exception>
                <see>
                    #getDisplayedMnemonicIndex                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: the index into the String to draw the keyboard character
                      mnemonic at                    
                </beaninfo>
            </javadoc>
            <method name="setDisplayedMnemonicIndex" type="void" line="1626">
                <params>
                    <param name="index" type="int"/>
                </params>
                <comment line="1634">
                    index out of range                    
                </comment>
                <declaration name="oldValue" type="int" line="1627"/>
                <scope line="1628"/>
                <scope line="1630">
                    <declaration name="text" type="String" line="1631"/>
                    <declaration name="textLength" type="int" line="1632"/>
                    <scope line="1633"/>
                </scope>
                <scope line="1639"/>
            </method>
            <javadoc line="1645">
                Returns the character, as an index, that the look and feel should
                  provide decoration for as representing the mnemonic character.                
                <since>
                    1.4                    
                </since>
                <return>
                    index representing mnemonic character                    
                </return>
                <see>
                    #setDisplayedMnemonicIndex                    
                </see>
            </javadoc>
            <method name="getDisplayedMnemonicIndex" type="int" line="1653"/>
            <javadoc line="1657">
                Update the displayedMnemonicIndex property. This method
                  is called when either text or mnemonic changes. The new
                  value of the displayedMnemonicIndex property is the index
                  of the first occurrence of mnemonic in text.                
            </javadoc>
            <method name="updateDisplayedMnemonicIndex" type="void" line="1663">
                <params>
                    <param name="text" type="String"/>
                    <param name="mnemonic" type="int"/>
                </params>
            </method>
            <javadoc line="1668">
                Brings the mnemonic property in accordance with model&apos;s mnemonic.
                  This is called when model&apos;s mnemonic changes. Also updates the
                  displayedMnemonicIndex property.                
            </javadoc>
            <method name="updateMnemonicProperties" type="void" line="1673">
                <declaration name="newMnemonic" type="int" line="1674"/>
                <scope line="1675">
                    <declaration name="oldValue" type="int" line="1676"/>
                </scope>
            </method>
            <javadoc line="1686">
                Sets the amount of time (in milliseconds) required between
                  mouse press events for the button to generate the corresponding
                  action events.  After the initial mouse press occurs (and action
                  event generated) any subsequent mouse press events which occur
                  on intervals less than the threshhold will be ignored and no
                  corresponding action event generated.  By default the threshhold is 0,
                  which means that for each mouse press, an action event will be
                  fired, no matter how quickly the mouse clicks occur.  In buttons
                  where this behavior is not desirable (for example, the &quot;OK&quot; button
                  in a dialog), this threshhold should be set to an appropriate
                  positive value.                
                <see>
                    #getMultiClickThreshhold                    
                </see>
                <param>
                    threshhold the amount of time required between mouse
                      press events to generate corresponding action events                    
                </param>
                <exception>
                    IllegalArgumentException if threshhold &lt; 0                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setMultiClickThreshhold" type="void" line="1705">
                <params>
                    <param name="threshhold" type="long"/>
                </params>
                <scope line="1706"/>
            </method>
            <javadoc line="1712">
                Gets the amount of time (in milliseconds) required between
                  mouse press events for the button to generate the corresponding
                  action events.                
                <see>
                    #setMultiClickThreshhold                    
                </see>
                <return>
                    the amount of time required between mouse press events
                      to generate corresponding action events                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMultiClickThreshhold" type="long" line="1722"/>
            <javadoc line="1726">
                Returns the model that this button represents.                
                <return>
                    the &lt;code&gt;model&lt;/code&gt; property                    
                </return>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="getModel" type="ButtonModel" line="1731"/>
            <javadoc line="1735">
                Sets the model that this button represents.                
                <param>
                    newModel the new &lt;code&gt;ButtonModel&lt;/code&gt;                    
                </param>
                <see>
                    #getModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: Model that the Button uses.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="1743">
                <params>
                    <param name="newModel" type="ButtonModel"/>
                </params>
                <comment line="1768">
                    We invoke setEnabled() from JComponent
                    because setModel() can be called from a constructor
                    when the button is not fully initialized                    
                </comment>
                <declaration name="oldModel" type="ButtonModel" line="1745"/>
                <scope line="1747"/>
                <scope line="1758"/>
                <scope line="1772"/>
                <scope line="1779"/>
            </method>
            <javadoc line="1786">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the ButtonUI object                    
                </return>
                <see>
                    #setUI                    
                </see>
            </javadoc>
            <method name="getUI" type="ButtonUI" line="1791"/>
            <javadoc line="1796">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui the &lt;code&gt;ButtonUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    #getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="1806">
                <params>
                    <param name="ui" type="ButtonUI"/>
                </params>
                <comment line="1809">
                    disabled icons are generated by the LF so they should be unset here                    
                </comment>
                <scope line="1809"/>
                <scope line="1812"/>
            </method>
            <javadoc line="1818">
                Resets the UI property to a value from the current look
                  and feel.  Subtypes of &lt;code&gt;AbstractButton&lt;/code&gt;
                  should override this to update the UI. For
                  example, &lt;code&gt;JButton&lt;/code&gt; might do the following:
                  &lt;pre&gt;
                  setUI((ButtonUI)UIManager.getUI(
                  &quot;ButtonUI&quot;, &quot;javax.swing.plaf.basic.BasicButtonUI&quot;, this));
                  &lt;/pre&gt;                
            </javadoc>
            <method name="updateUI" type="void" line="1828"/>
            <javadoc line="1831">
                Adds the specified component to this container at the specified
                  index, refer to{@link java.awt.Container#addImpl(Component,Object,int)}for a complete description of this method.                
                <param>
                    comp the component to be added                    
                </param>
                <param>
                    constraints an object expressing layout constraints
                      for this component                    
                </param>
                <param>
                    index the position in the container&apos;s list at which to
                      insert the component, where &lt;code&gt;-1&lt;/code&gt;
                      means append to the end                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;index&lt;/code&gt; is invalid                    
                </exception>
                <exception>
                    IllegalArgumentException if adding the container&apos;s parent
                      to itself                    
                </exception>
                <exception>
                    IllegalArgumentException if adding a window to a container                    
                </exception>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addImpl" type="void" line="1849">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="1850"/>
            </method>
            <javadoc line="1856">
                Sets the layout manager for this container, refer to{@link java.awt.Container#setLayout(LayoutManager)}for a complete description of this method.                
                <param>
                    mgr the specified layout manager                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setLayout" type="void" line="1864">
                <params>
                    <param name="mgr" type="LayoutManager"/>
                </params>
            </method>
            <javadoc line="1869">
                Adds a &lt;code&gt;ChangeListener&lt;/code&gt; to the button.                
                <param>
                    l the listener to be added                    
                </param>
            </javadoc>
            <method name="addChangeListener" type="void" line="1873">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="1877">
                Removes a ChangeListener from the button.                
                <param>
                    l the listener to be removed                    
                </param>
            </javadoc>
            <method name="removeChangeListener" type="void" line="1881">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="1885">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this AbstractButton with addChangeListener().                
                <return>
                    all of the &lt;code&gt;ChangeListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="1893"/>
            <javadoc line="1897">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="1903">
                <comment line="1905">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1907">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="1911">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="1905"/>
                <scope line="1908">
                    <scope line="1909"/>
                </scope>
            </method>
            <javadoc line="1918">
                Adds an &lt;code&gt;ActionListener&lt;/code&gt; to the button.                
                <param>
                    l the &lt;code&gt;ActionListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addActionListener" type="void" line="1922">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="1926">
                Removes an &lt;code&gt;ActionListener&lt;/code&gt; from the button.
                  If the listener is the currently set &lt;code&gt;Action&lt;/code&gt;
                  for the button, then the &lt;code&gt;Action&lt;/code&gt;
                  is set to &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    l the listener to be removed                    
                </param>
            </javadoc>
            <method name="removeActionListener" type="void" line="1934">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
                <scope line="1935"/>
                <scope line="1937"/>
            </method>
            <javadoc line="1942">
                Returns an array of all the &lt;code&gt;ActionListener&lt;/code&gt;s added
                  to this AbstractButton with addActionListener().                
                <return>
                    all of the &lt;code&gt;ActionListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="1950"/>
            <javadoc line="1954">
                Subclasses that want to handle &lt;code&gt;ChangeEvents&lt;/code&gt; differently
                  can override this to return another &lt;code&gt;ChangeListener&lt;/code&gt;
                  implementation.                
                <return>
                    the new &lt;code&gt;ChangeListener&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="createChangeListener" type="ChangeListener" line="1961"/>
            <class name="ButtonChangeListener" line="1965">
                <comment line="1979">
                    NOTE: This class is NOT used, instead the functionality has
                     been moved to Handler.                    
                </comment>
                <comment line="2324">
                    ChangeListener                    
                </comment>
                <comment line="2338">
                    ActionListener                    
                </comment>
                <comment line="2345">
                    ItemListener                    
                </comment>
                <comment line="2606">
                                        
                </comment>
                <comment line="2946">
                    Returns the text substring starting at the specified
                     offset with the specified length.                    
                </comment>
                <comment line="2964">
                    Returns the bounding rectangle for the component text.                    
                </comment>
                <comment line="3004">
                    ----- AccessibleExtendedComponent                    
                </comment>
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <javadoc line="1965">
                    Extends &lt;code&gt;ChangeListener&lt;/code&gt; to be serializable.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <method name="ButtonChangeListener" type="constructor" line="1980"/>
                <method name="stateChanged" type="void" line="1983">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1989">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the &lt;code&gt;event&lt;/code&gt;
                  parameter.                
                <param>
                    event  the &lt;code&gt;ActionEvent&lt;/code&gt; object                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireActionPerformed" type="void" line="1998">
                <params>
                    <param name="event" type="ActionEvent"/>
                </params>
                <comment line="2000">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2003">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2007">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2000"/>
                <declaration name="e" type="ActionEvent" line="2001"/>
                <scope line="2004">
                    <scope line="2005">
                        <scope line="2007">
                            <declaration name="actionCommand" type="String" line="2008"/>
                            <scope line="2009"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2023">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the &lt;code&gt;event&lt;/code&gt; parameter.                
                <param>
                    event  the &lt;code&gt;ItemEvent&lt;/code&gt; object                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireItemStateChanged" type="void" line="2031">
                <params>
                    <param name="event" type="ItemEvent"/>
                </params>
                <comment line="2033">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2036">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2040">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2033"/>
                <declaration name="e" type="ItemEvent" line="2034"/>
                <scope line="2037">
                    <scope line="2038">
                        <scope line="2040"/>
                    </scope>
                </scope>
                <scope line="2049">
                    <scope line="2050"/>
                    <scope line="2057"/>
                </scope>
            </method>
            <method name="createActionListener" type="ActionListener" line="2069"/>
            <method name="createItemListener" type="ItemListener" line="2074"/>
            <javadoc line="2079">
                Enables (or disables) the button.                
                <param>
                    b  true to enable the button, otherwise false                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="2083">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="2084"/>
            </method>
            <javadoc line="2093">
                Returns the label text.                
                <return>
                    a &lt;code&gt;String&lt;/code&gt; containing the label                    
                </return>
                <deprecated>
                    - Replaced by &lt;code&gt;getText&lt;/code&gt;                    
                </deprecated>
            </javadoc>
            <method name="getLabel" type="String" line="2100"/>
            <javadoc line="2104">
                Sets the label text.                
                <param>
                    label  a &lt;code&gt;String&lt;/code&gt; containing the text                    
                </param>
                <deprecated>
                    - Replaced by &lt;code&gt;setText(text)&lt;/code&gt;                    
                </deprecated>
                <beaninfo>
                    bound: true
                      description: Replace by setText(text)                    
                </beaninfo>
            </javadoc>
            <method name="setLabel" type="void" line="2114">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="2118">
                Adds an &lt;code&gt;ItemListener&lt;/code&gt; to the &lt;code&gt;checkbox&lt;/code&gt;.                
                <param>
                    l  the &lt;code&gt;ItemListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addItemListener" type="void" line="2122">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
            </method>
            <javadoc line="2126">
                Removes an &lt;code&gt;ItemListener&lt;/code&gt; from the button.                
                <param>
                    l the &lt;code&gt;ItemListener&lt;/code&gt; to be removed                    
                </param>
            </javadoc>
            <method name="removeItemListener" type="void" line="2130">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
            </method>
            <javadoc line="2134">
                Returns an array of all the &lt;code&gt;ItemListener&lt;/code&gt;s added
                  to this AbstractButton with addItemListener().                
                <return>
                    all of the &lt;code&gt;ItemListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="2142"/>
            <javadoc line="2146">
                Returns an array (length 1) containing the label or
                  &lt;code&gt;null&lt;/code&gt; if the button is not selected.                
                <return>
                    an array containing 1 Object: the text of the button,
                      if the item is selected; otherwise &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="2153">
                <scope line="2154"/>
                <declaration name="selectedObjects" type="Object[]" line="2157"/>
            </method>
            <method name="init" type="void" line="2162">
                <params>
                    <param name="text" type="String"/>
                    <param name="icon" type="Icon"/>
                </params>
                <comment line="2172">
                    Set the UI                    
                </comment>
                <scope line="2163"/>
                <scope line="2167"/>
            </method>
            <javadoc line="2179">
                This is overridden to return false if the current &lt;code&gt;Icon&lt;/code&gt;&apos;s
                  &lt;code&gt;Image&lt;/code&gt; is not equal to the
                  passed in &lt;code&gt;Image&lt;/code&gt; &lt;code&gt;img&lt;/code&gt;.                
                <param>
                    img  the &lt;code&gt;Image&lt;/code&gt; to be compared                    
                </param>
                <param>
                    infoflags flags used to repaint the button when the image
                      is updated and which determine how much is to be painted                    
                </param>
                <param>
                    x  the x coordinate                    
                </param>
                <param>
                    y  the y coordinate                    
                </param>
                <param>
                    w  the width                    
                </param>
                <param>
                    h  the height                    
                </param>
                <see>
                    java.awt.image.ImageObserver                    
                </see>
                <see>
                    java.awt.Component#imageUpdate(java.awt.Image,int,int,int,int,int)                    
                </see>
            </javadoc>
            <method name="imageUpdate" type="boolean" line="2195">
                <params>
                    <param name="img" type="Image"/>
                    <param name="infoflags" type="int"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="w" type="int"/>
                    <param name="h" type="int"/>
                </params>
                <comment line="2221">
                    We don&apos;t know about this image, disable the notification so
                     we don&apos;t keep repainting.                    
                </comment>
                <declaration name="iconDisplayed" type="Icon" line="2196"/>
                <scope line="2197"/>
                <scope line="2201">
                    <scope line="2202"/>
                    <scope line="2204"/>
                </scope>
                <scope line="2207"/>
                <scope line="2209">
                    <scope line="2210"/>
                    <scope line="2212"/>
                </scope>
                <scope line="2215"/>
                <scope line="2219"/>
            </method>
            <method name="setUIProperty" type="void" line="2227">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="2228">
                    <scope line="2229"/>
                </scope>
                <scope line="2233">
                    <scope line="2234"/>
                </scope>
                <scope line="2238">
                    <scope line="2239"/>
                </scope>
                <scope line="2243">
                    <scope line="2244"/>
                </scope>
                <scope line="2248"/>
            </method>
            <javadoc line="2253">
                Returns a string representation of this &lt;code&gt;AbstractButton&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.
                  &lt;P&gt;
                  Overriding &lt;code&gt;paramString&lt;/code&gt; to provide information about the
                  specific new aspects of the JFC components.                
                <return>
                    a string representation of this &lt;code&gt;AbstractButton&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="2266">
                <declaration name="defaultIconString" type="String" line="2267"/>
                <declaration name="pressedIconString" type="String" line="2270"/>
                <declaration name="disabledIconString" type="String" line="2273"/>
                <declaration name="selectedIconString" type="String" line="2276"/>
                <declaration name="disabledSelectedIconString" type="String" line="2279"/>
                <declaration name="rolloverIconString" type="String" line="2283"/>
                <declaration name="rolloverSelectedIconString" type="String" line="2286"/>
                <declaration name="paintBorderString" type="String" line="2290"/>
                <declaration name="paintFocusString" type="String" line="2291"/>
                <declaration name="rolloverEnabledString" type="String" line="2292"/>
            </method>
            <method name="getHandler" type="Handler" line="2310">
                <scope line="2311"/>
            </method>
            <class name="Handler" line="2321">
                <comment line="1979">
                    NOTE: This class is NOT used, instead the functionality has
                     been moved to Handler.                    
                </comment>
                <comment line="2324">
                    ChangeListener                    
                </comment>
                <comment line="2338">
                    ActionListener                    
                </comment>
                <comment line="2345">
                    ItemListener                    
                </comment>
                <comment line="2606">
                                        
                </comment>
                <comment line="2946">
                    Returns the text substring starting at the specified
                     offset with the specified length.                    
                </comment>
                <comment line="2964">
                    Returns the bounding rectangle for the component text.                    
                </comment>
                <comment line="3004">
                    ----- AccessibleExtendedComponent                    
                </comment>
                <implements interface="ActionListener"/>
                <implements interface="ChangeListener"/>
                <implements interface="ItemListener"/>
                <implements interface="Serializable"/>
                <method name="stateChanged" type="void" line="2326">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                    <declaration name="source" type="Object" line="2327"/>
                    <scope line="2330"/>
                </method>
                <method name="actionPerformed" type="void" line="2340">
                    <params>
                        <param name="event" type="ActionEvent"/>
                    </params>
                </method>
                <method name="itemStateChanged" type="void" line="2347">
                    <params>
                        <param name="event" type="ItemEvent"/>
                    </params>
                    <scope line="2349">
                        <declaration name="action" type="Action" line="2350"/>
                        <scope line="2351">
                            <declaration name="selected" type="boolean" line="2352"/>
                            <declaration name="isActionSelected" type="boolean" line="2353"/>
                            <scope line="2355"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="AccessibleAbstractButton" line="2366">
                <extends class="AccessibleJComponent"/>
                <comment line="1979">
                    NOTE: This class is NOT used, instead the functionality has
                     been moved to Handler.                    
                </comment>
                <comment line="2324">
                    ChangeListener                    
                </comment>
                <comment line="2338">
                    ActionListener                    
                </comment>
                <comment line="2345">
                    ItemListener                    
                </comment>
                <comment line="2606">
                                        
                </comment>
                <comment line="2946">
                    Returns the text substring starting at the specified
                     offset with the specified length.                    
                </comment>
                <comment line="2964">
                    Returns the bounding rectangle for the component text.                    
                </comment>
                <comment line="3004">
                    ----- AccessibleExtendedComponent                    
                </comment>
                <implements interface="AccessibleAction"/>
                <implements interface="AccessibleValue"/>
                <implements interface="AccessibleText"/>
                <implements interface="AccessibleExtendedComponent"/>
                <javadoc line="2366">
                    This class implements accessibility support for the
                      &lt;code&gt;AbstractButton&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to button and menu item
                      user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <javadoc line="2386">
                    Returns the accessible name of this object.                    
                    <return>
                        the localized name of the object -- can be
                          &lt;code&gt;null&lt;/code&gt; if this
                          object does not have a name                        
                    </return>
                </javadoc>
                <method name="getAccessibleName" type="String" line="2393">
                    <declaration name="name" type="String" line="2394"/>
                    <scope line="2396"/>
                    <scope line="2399"/>
                    <scope line="2402"/>
                </method>
                <javadoc line="2408">
                    Get the AccessibleIcons associated with this object if one
                      or more exist.  Otherwise return null.                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleIcon" type="AccessibleIcon[]" line="2413">
                    <declaration name="defaultIcon" type="Icon" line="2414"/>
                    <scope line="2416">
                        <declaration name="ac" type="AccessibleContext" line="2417"/>
                        <scope line="2419"/>
                    </scope>
                </method>
                <javadoc line="2426">
                    Get the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="2433">
                    <declaration name="states" type="AccessibleStateSet" line="2434"/>
                    <scope line="2435"/>
                    <scope line="2438"/>
                    <scope line="2441"/>
                    <scope line="2444"/>
                </method>
                <javadoc line="2450">
                    Get the AccessibleRelationSet associated with this object if one
                      exists.  Otherwise return null.                    
                    <see>
                        AccessibleRelation                        
                    </see>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAccessibleRelationSet" type="AccessibleRelationSet" line="2456">
                    <comment line="2459">
                        Check where the AccessibleContext&apos;s relation
                         set already contains a MEMBER_OF relation.                        
                    </comment>
                    <comment line="2465">
                        get the members of the button group if one exists                        
                    </comment>
                    <comment line="2470">
                        set the target of the MEMBER_OF relation to be
                         the members of the button group.                        
                    </comment>
                    <declaration name="relationSet" type="AccessibleRelationSet" line="2460"/>
                    <scope line="2463">
                        <declaration name="model" type="ButtonModel" line="2465"/>
                        <scope line="2466">
                            <declaration name="group" type="ButtonGroup" line="2467"/>
                            <scope line="2468">
                                <declaration name="len" type="int" line="2471"/>
                                <declaration name="target" type="Object[]" line="2472"/>
                                <declaration name="elem" type="Enumeration" line="2473"/>
                                <scope line="2474">
                                    <scope line="2475"/>
                                </scope>
                                <declaration name="relation" type="AccessibleRelation" line="2479"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2489">
                    Get the AccessibleAction associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleAction interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleAction" type="AccessibleAction" line="2497"/>
                <javadoc line="2501">
                    Get the AccessibleValue associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleValue interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="2509"/>
                <javadoc line="2513">
                    Returns the number of Actions available in this object.  The
                      default behavior of a button is to have one action - toggle
                      the button.                    
                    <return>
                        1, the number of Actions in this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleActionCount" type="int" line="2520"/>
                <javadoc line="2524">
                    Return a description of the specified action of the object.                    
                    <param>
                        i zero-based index of the actions                        
                    </param>
                </javadoc>
                <method name="getAccessibleActionDescription" type="String" line="2529">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="2530"/>
                    <scope line="2532"/>
                </method>
                <javadoc line="2537">
                    Perform the specified Action on the object                    
                    <param>
                        i zero-based index of actions                        
                    </param>
                    <return>
                        true if the the action was performed; else false.                        
                    </return>
                </javadoc>
                <method name="doAccessibleAction" type="boolean" line="2543">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="2544"/>
                    <scope line="2547"/>
                </method>
                <javadoc line="2552">
                    Get the value of this object as a Number.                    
                    <return>
                        An Integer of 0 if this isn&apos;t selected or an Integer of 1 if
                          this is selected.                        
                    </return>
                    <see>
                        AbstractButton#isSelected                        
                    </see>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="2559">
                    <scope line="2560"/>
                    <scope line="2562"/>
                </method>
                <javadoc line="2567">
                    Set the value of this object as a Number.                    
                    <return>
                        True if the value was set.                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="2572">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <comment line="2574">
                        TIGER - 4422535                        
                    </comment>
                    <scope line="2574"/>
                    <declaration name="i" type="int" line="2577"/>
                    <scope line="2578"/>
                    <scope line="2580"/>
                </method>
                <javadoc line="2586">
                    Get the minimum value of this object as a Number.                    
                    <return>
                        an Integer of 0.                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="2591"/>
                <javadoc line="2595">
                    Get the maximum value of this object as a Number.                    
                    <return>
                        An Integer of 1.                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="2600"/>
                <method name="getAccessibleText" type="AccessibleText" line="2607">
                    <declaration name="view" type="View" line="2608"/>
                    <scope line="2609"/>
                    <scope line="2611"/>
                </method>
                <javadoc line="2616">
                    Given a point in local coordinates, return the zero-based index
                      of the character under that Point.  If the point is invalid,
                      this method returns -1.
                      Note: the AbstractButton must have a valid size (e.g. have
                      been added to a parent container whose ancestor container
                      is a valid top-level window) for this method to be able
                      to return a meaningful value.                    
                    <param>
                        p the Point in local coordinates                        
                    </param>
                    <return>
                        the zero-based index of the character under Point p; if
                          Point is invalid returns -1.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getIndexAtPoint" type="int" line="2631">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="view" type="View" line="2632"/>
                    <scope line="2633">
                        <declaration name="r" type="Rectangle" line="2634"/>
                        <scope line="2635"/>
                        <declaration name="shape" type="Rectangle2D.Float" line="2638"/>
                        <declaration name="bias" type="Position.Bias" line="2640"/>
                    </scope>
                    <scope line="2642"/>
                </method>
                <javadoc line="2647">
                    Determine the bounding box of the character at the given
                      index into the string.  The bounds are returned in local
                      coordinates.  If the index is invalid an empty rectangle is
                      returned.
                      Note: the AbstractButton must have a valid size (e.g. have
                      been added to a parent container whose ancestor container
                      is a valid top-level window) for this method to be able
                      to return a meaningful value.                    
                    <param>
                        i the index into the String                        
                    </param>
                    <return>
                        the screen coordinates of the character&apos;s the bounding box,
                          if index is invalid returns an empty rectangle.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCharacterBounds" type="Rectangle" line="2663">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="view" type="View" line="2664"/>
                    <scope line="2665">
                        <declaration name="r" type="Rectangle" line="2666"/>
                        <scope line="2667"/>
                        <declaration name="shape" type="Rectangle2D.Float" line="2670"/>
                        <scope line="2672">
                            <declaration name="charShape" type="Shape" line="2673"/>
                        </scope>
                        <scope line="2676"/>
                    </scope>
                    <scope line="2679"/>
                </method>
                <javadoc line="2684">
                    Return the number of characters (valid indicies)                    
                    <return>
                        the number of characters                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCharCount" type="int" line="2690">
                    <declaration name="view" type="View" line="2691"/>
                    <scope line="2692">
                        <declaration name="d" type="Document" line="2693"/>
                        <scope line="2694">
                            <declaration name="doc" type="StyledDocument" line="2695"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2702">
                    Return the zero-based offset of the caret.
                      Note: That to the right of the caret will have the same index
                      value as the offset (the caret is between two characters).                    
                    <return>
                        the zero-based offset of the caret.                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCaretPosition" type="int" line="2710">
                    <comment line="2712">
                        There is no caret.                        
                    </comment>
                </method>
                <javadoc line="2715">
                    Returns the String at a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text &gt;= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence,
                          null for an invalid index or part                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAtIndex" type="String" line="2725">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="2726"/>
                    <scope line="2731"/>
                    <scope line="2733"/>
                    <scope line="2737">
                        <declaration name="s" type="String" line="2738"/>
                        <declaration name="words" type="BreakIterator" line="2739"/>
                        <declaration name="end" type="int" line="2741"/>
                    </scope>
                    <scope line="2743"/>
                    <scope line="2747">
                        <declaration name="s" type="String" line="2748"/>
                        <declaration name="sentence" type="BreakIterator" line="2749"/>
                        <declaration name="end" type="int" line="2752"/>
                    </scope>
                    <scope line="2754"/>
                </method>
                <javadoc line="2762">
                    Returns the String after a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text &gt;= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence, null for an invalid
                          index or part                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getAfterIndex" type="String" line="2772">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="2773"/>
                    <scope line="2778"/>
                    <scope line="2781"/>
                    <scope line="2783"/>
                    <scope line="2787">
                        <declaration name="s" type="String" line="2788"/>
                        <declaration name="words" type="BreakIterator" line="2789"/>
                        <declaration name="start" type="int" line="2791"/>
                        <scope line="2792"/>
                        <declaration name="end" type="int" line="2795"/>
                        <scope line="2796"/>
                    </scope>
                    <scope line="2800"/>
                    <scope line="2804">
                        <declaration name="s" type="String" line="2805"/>
                        <declaration name="sentence" type="BreakIterator" line="2806"/>
                        <declaration name="start" type="int" line="2809"/>
                        <scope line="2810"/>
                        <declaration name="end" type="int" line="2813"/>
                        <scope line="2814"/>
                    </scope>
                    <scope line="2818"/>
                </method>
                <javadoc line="2826">
                    Returns the String before a given index.                    
                    <param>
                        part the AccessibleText.CHARACTER, AccessibleText.WORD,
                          or AccessibleText.SENTENCE to retrieve                        
                    </param>
                    <param>
                        index an index within the text &gt;= 0                        
                    </param>
                    <return>
                        the letter, word, or sentence, null for an invalid index
                          or part                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="2836">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="2837"/>
                    <scope line="2842"/>
                    <scope line="2845"/>
                    <scope line="2847"/>
                    <scope line="2851">
                        <declaration name="s" type="String" line="2852"/>
                        <declaration name="words" type="BreakIterator" line="2853"/>
                        <declaration name="end" type="int" line="2855"/>
                        <declaration name="start" type="int" line="2857"/>
                        <scope line="2858"/>
                    </scope>
                    <scope line="2862"/>
                    <scope line="2866">
                        <declaration name="s" type="String" line="2867"/>
                        <declaration name="sentence" type="BreakIterator" line="2868"/>
                        <declaration name="end" type="int" line="2871"/>
                        <declaration name="start" type="int" line="2873"/>
                        <scope line="2874"/>
                    </scope>
                    <scope line="2878"/>
                </method>
                <javadoc line="2886">
                    Return the AttributeSet for a given character at a given index                    
                    <param>
                        i the zero-based index into the text                        
                    </param>
                    <return>
                        the AttributeSet of the character                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getCharacterAttribute" type="AttributeSet" line="2893">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="view" type="View" line="2894"/>
                    <scope line="2895">
                        <declaration name="d" type="Document" line="2896"/>
                        <scope line="2897">
                            <declaration name="doc" type="StyledDocument" line="2898"/>
                            <declaration name="elem" type="Element" line="2899"/>
                            <scope line="2900"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2908">
                    Returns the start offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into the text of the start of the selection                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectionStart" type="int" line="2916">
                    <comment line="2918">
                        Text cannot be selected.                        
                    </comment>
                </method>
                <javadoc line="2921">
                    Returns the end offset within the selected text.
                      If there is no selection, but there is
                      a caret, the start and end offsets will be the same.                    
                    <return>
                        the index into teh text of the end of the selection                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectionEnd" type="int" line="2929">
                    <comment line="2931">
                        Text cannot be selected.                        
                    </comment>
                </method>
                <javadoc line="2934">
                    Returns the portion of the text that is selected.                    
                    <return>
                        the String portion of the text that is selected                        
                    </return>
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <method name="getSelectedText" type="String" line="2940">
                    <comment line="2942">
                        Text cannot be selected.                        
                    </comment>
                </method>
                <method name="getText" type="String" line="2950">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                    <declaration name="view" type="View" line="2952"/>
                    <scope line="2953">
                        <declaration name="d" type="Document" line="2954"/>
                        <scope line="2955">
                            <declaration name="doc" type="StyledDocument" line="2956"/>
                        </scope>
                    </scope>
                </method>
                <method name="getTextRectangle" type="Rectangle" line="2966">
                    <declaration name="text" type="String" line="2968"/>
                    <declaration name="icon" type="Icon" line="2969"/>
                    <scope line="2971"/>
                    <declaration name="paintIconR" type="Rectangle" line="2975"/>
                    <declaration name="paintTextR" type="Rectangle" line="2976"/>
                    <declaration name="paintViewR" type="Rectangle" line="2977"/>
                    <declaration name="paintViewInsets" type="Insets" line="2978"/>
                    <declaration name="clippedText" type="String" line="2986"/>
                </method>
                <javadoc line="3005">
                    Returns the AccessibleExtendedComponent                    
                    <return>
                        the AccessibleExtendedComponent                        
                    </return>
                </javadoc>
                <method name="getAccessibleExtendedComponent" type="AccessibleExtendedComponent" line="3010"/>
                <javadoc line="3014">
                    Returns the tool tip text                    
                    <return>
                        the tool tip text, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getToolTipText" type="String" line="3021"/>
                <javadoc line="3025">
                    Returns the titled border text                    
                    <return>
                        the titled border text, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getTitledBorderText" type="String" line="3032"/>
                <javadoc line="3036">
                    Returns key bindings associated with this object                    
                    <return>
                        the key bindings, if supported, of the object;
                          otherwise, null                        
                    </return>
                    <see>
                        AccessibleKeyBinding                        
                    </see>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="getAccessibleKeyBinding" type="AccessibleKeyBinding" line="3044">
                    <declaration name="mnemonic" type="int" line="3045"/>
                    <scope line="3046"/>
                </method>
                <class name="ButtonKeyBinding" line="3052">
                    <implements interface="AccessibleKeyBinding"/>
                    <declaration name="mnemonic" type="int" line="3053"/>
                    <method name="ButtonKeyBinding" type="constructor" line="3055">
                        <params>
                            <param name="mnemonic" type="int"/>
                        </params>
                    </method>
                    <javadoc line="3059">
                        Returns the number of key bindings for this object                        
                        <return>
                            the zero-based number of key bindings for this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleKeyBindingCount" type="int" line="3064"/>
                    <javadoc line="3068">
                        Returns a key binding for this object.  The value returned is an
                          java.lang.Object which must be cast to appropriate type depending
                          on the underlying implementation of the key.  For example, if the
                          Object returned is a javax.swing.KeyStroke, the user of this
                          method should do the following:
                          &lt;nf&gt;&lt;code&gt;
                          Component c = &lt;get the component that has the key bindings&gt;
                          AccessibleContext ac = c.getAccessibleContext();
                          AccessibleKeyBinding akb = ac.getAccessibleKeyBinding();
                          for (int i = 0; i &lt; akb.getAccessibleKeyBindingCount(); i++) {
                          Object o = akb.getAccessibleKeyBinding(i);
                          if (o instanceof javax.swing.KeyStroke) {
                          javax.swing.KeyStroke keyStroke = (javax.swing.KeyStroke)o;
                          &lt;do something with the key binding&gt;
                          }
                          }
                          &lt;/code&gt;&lt;/nf&gt;                        
                        <param>
                            i zero-based index of the key bindings                            
                        </param>
                        <return>
                            a javax.lang.Object which specifies the key binding                            
                        </return>
                        <exception>
                            IllegalArgumentException if the index is
                              out of bounds                            
                        </exception>
                        <see>
                            #getAccessibleKeyBindingCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleKeyBinding" type="java.lang.Object" line="3093">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="3094"/>
                    </method>
                </class>
            </class>
        </class>
    </source>