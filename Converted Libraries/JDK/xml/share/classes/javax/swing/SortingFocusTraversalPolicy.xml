<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Window"/>
        <import package="java.util"/>
        <import package="java.awt.FocusTraversalPolicy"/>
        <import package="sun.util.logging.PlatformLogger"/>
        <class name="SortingFocusTraversalPolicy" line="34">
            <extends class="InternalFrameFocusTraversalPolicy"/>
            <comment line="85">
                Delegate our fitness test to ContainerOrder so that we only have to                
            </comment>
            <comment line="86">
                code the algorithm once.                
            </comment>
            <comment line="180">
                Checks if a new focus cycle takes place and returns a Component to traverse focus to.
                 @param comp a possible focus cycle root or policy provider
                 @param traversalDirection the direction of the traversal
                 @return a Component to traverse focus to if {@code comp} is a root or provider
                         and implicit down-cycle is set, otherwise {@code null}                
            </comment>
            <javadoc line="34">
                A FocusTraversalPolicy that determines traversal order by sorting the
                  Components of a focus traversal cycle based on a given Comparator. Portions
                  of the Component hierarchy that are not visible and displayable will not be
                  included.
                  &lt;p&gt;
                  By default, SortingFocusTraversalPolicy implicitly transfers focus down-
                  cycle. That is, during normal focus traversal, the Component
                  traversed after a focus cycle root will be the focus-cycle-root&apos;s default
                  Component to focus. This behavior can be disabled using the
                  &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  By default, methods of this class with return a Component only if it is
                  visible, displayable, enabled, and focusable. Subclasses can modify this
                  behavior by overriding the &lt;code&gt;accept&lt;/code&gt; method.
                  &lt;p&gt;
                  This policy takes into account &lt;a
                  href=&quot;../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus traversal
                  policy providers&lt;/a&gt;.  When searching for first/last/next/previous Component,
                  if a focus traversal policy provider is encountered, its focus traversal
                  policy is used to perform the search operation.                
                <author>
                    David Mendenhall                    
                </author>
                <see>
                    java.util.Comparator                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="comparator" type="Comparator&lt;? super Component&gt;" line="64"/>
            <declaration name="implicitDownCycleTraversal" type="boolean" line="65"/>
            <declaration name="log" type="PlatformLogger" line="67"/>
            <declaration name="cachedRoot" type="Container" line="69"/>
            <javadoc line="69">
                Used by getComponentAfter and getComponentBefore for efficiency. In
                  order to maintain compliance with the specification of
                  FocusTraversalPolicy, if traversal wraps, we should invoke
                  getFirstComponent or getLastComponent. These methods may be overriden in
                  subclasses to behave in a non-generic way. However, in the generic case,
                  these methods will simply return the first or last Components of the
                  sorted list, respectively. Since getComponentAfter and
                  getComponentBefore have already built the sorted list before determining
                  that they need to invoke getFirstComponent or getLastComponent, the
                  sorted list should be reused if possible.                
            </javadoc>
            <declaration name="cachedCycle" type="List&lt;Component&gt;" line="82"/>
            <declaration name="fitnessTestPolicy" type="SwingContainerOrderFocusTraversalPolicy" line="86"/>
            <declaration name="FORWARD_TRAVERSAL" type="int" line="89"/>
            <declaration name="BACKWARD_TRAVERSAL" type="int" line="90"/>
            <javadoc line="92">
                Constructs a SortingFocusTraversalPolicy without a Comparator.
                  Subclasses must set the Comparator using &lt;code&gt;setComparator&lt;/code&gt;
                  before installing this FocusTraversalPolicy on a focus cycle root or
                  KeyboardFocusManager.                
            </javadoc>
            <method name="SortingFocusTraversalPolicy" type="constructor" line="98"/>
            <javadoc line="101">
                Constructs a SortingFocusTraversalPolicy with the specified Comparator.                
            </javadoc>
            <method name="SortingFocusTraversalPolicy" type="constructor" line="104">
                <params>
                    <param name="comparator" type="Comparator<? super Component>"/>
                </params>
            </method>
            <method name="getFocusTraversalCycle" type="List<Component>" line="108">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <declaration name="cycle" type="List&lt;Component&gt;" line="109"/>
            </method>
            <method name="getComponentIndex" type="int" line="113">
                <params>
                    <param name="cycle" type="List<Component>"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="124">
                    Fix for 5070991.                    
                </comment>
                <comment line="125">
                    A workaround for a transitivity problem caused by ROW_TOLERANCE,                    
                </comment>
                <comment line="126">
                    because of that the component may be missed in the binary search.                    
                </comment>
                <comment line="127">
                    Try to search it again directly.                    
                </comment>
                <declaration name="index" type="int" line="114"/>
                <scope line="115"/>
                <scope line="117">
                    <scope line="118"/>
                </scope>
                <scope line="123"/>
            </method>
            <method name="enumerateAndSortCycle" type="void" line="133">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                    <param name="cycle" type="List<Component>"/>
                </params>
                <scope line="134"/>
            </method>
            <method name="enumerateCycle" type="void" line="140">
                <params>
                    <param name="container" type="Container"/>
                    <param name="cycle" type="List<Component>"/>
                </params>
                <scope line="141"/>
                <declaration name="components" type="Component[]" line="147"/>
                <scope line="148">
                    <scope line="149">
                        <declaration name="cont" type="Container" line="150"/>
                        <scope line="155"/>
                    </scope>
                </scope>
            </method>
            <method name="getTopmostProvider" type="Container" line="164">
                <params>
                    <param name="focusCycleRoot" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <declaration name="aCont" type="Container" line="165"/>
                <declaration name="ftp" type="Container" line="166"/>
                <scope line="167">
                    <scope line="168"/>
                </scope>
                <scope line="173"/>
            </method>
            <method name="getComponentDownCycle" type="Component" line="186">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="traversalDirection" type="int"/>
                </params>
                <declaration name="retComp" type="Component" line="187"/>
                <scope line="189">
                    <declaration name="cont" type="Container" line="190"/>
                    <scope line="192">
                        <scope line="193">
                            <scope line="196"/>
                        </scope>
                        <scope line="200"/>
                    </scope>
                    <scope line="203">
                        <scope line="208"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="216">
                Returns the Component that should receive the focus after aComponent.
                  aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
                  &lt;p&gt;
                  By default, SortingFocusTraversalPolicy implicitly transfers focus down-
                  cycle. That is, during normal focus traversal, the Component
                  traversed after a focus cycle root will be the focus-cycle-root&apos;s
                  default Component to focus. This behavior can be disabled using the
                  &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  If aContainer is &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus
                  traversal policy provider&lt;/a&gt;, the focus is always transferred down-cycle.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus after aComponent, or
                      null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or a focus traversal policy provider, or if either aContainer or
                      aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentAfter" type="Component" line="238">
                <params>
                    <param name="aContainer" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="253">
                    Before all the ckecks below we first see if it&apos;s an FTP provider or a focus cycle root.                    
                </comment>
                <comment line="254">
                    If it&apos;s the case just go down cycle (if it&apos;s set to &quot;implicit&quot;).                    
                </comment>
                <comment line="260">
                    See if the component is inside of policy provider.                    
                </comment>
                <comment line="267">
                    FTP knows how to find component after the given. We don&apos;t.                    
                </comment>
                <comment line="271">
                    Null result means that we overstepped the limit of the FTP&apos;s cycle.                    
                </comment>
                <comment line="272">
                    In that case we must quit the cycle, otherwise return the component found.                    
                </comment>
                <scope line="239"/>
                <scope line="243"/>
                <scope line="246"/>
                <scope line="249"/>
                <declaration name="comp" type="Component" line="255"/>
                <scope line="256"/>
                <declaration name="provider" type="Container" line="261"/>
                <scope line="262">
                    <scope line="263"/>
                    <declaration name="policy" type="FocusTraversalPolicy" line="268"/>
                    <declaration name="afterComp" type="Component" line="269"/>
                    <scope line="273"/>
                </scope>
                <declaration name="cycle" type="List&lt;Component&gt;" line="280"/>
                <declaration name="index" type="int" line="284"/>
                <scope line="286">
                    <scope line="287"/>
                </scope>
                <scope line="293">
                    <scope line="295"/>
                    <scope line="297"/>
                </scope>
                <scope line="302"/>
            </method>
            <javadoc line="316">
                Returns the Component that should receive the focus before aComponent.
                  aContainer must be a focus cycle root of aComponent or a focus traversal policy provider.
                  &lt;p&gt;
                  By default, SortingFocusTraversalPolicy implicitly transfers focus down-
                  cycle. That is, during normal focus traversal, the Component
                  traversed after a focus cycle root will be the focus-cycle-root&apos;s
                  default Component to focus. This behavior can be disabled using the
                  &lt;code&gt;setImplicitDownCycleTraversal&lt;/code&gt; method.
                  &lt;p&gt;
                  If aContainer is &lt;a href=&quot;../../java/awt/doc-files/FocusSpec.html#FocusTraversalPolicyProviders&quot;&gt;focus
                  traversal policy provider&lt;/a&gt;, the focus is always transferred down-cycle.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider                    
                </param>
                <param>
                    aComponent a (possibly indirect) child of aContainer, or
                      aContainer itself                    
                </param>
                <return>
                    the Component that should receive the focus before aComponent,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is not a focus cycle
                      root of aComponent or a focus traversal policy provider, or if either aContainer or
                      aComponent is null                    
                </throws>
            </javadoc>
            <method name="getComponentBefore" type="Component" line="338">
                <params>
                    <param name="aContainer" type="Container"/>
                    <param name="aComponent" type="Component"/>
                </params>
                <comment line="349">
                    See if the component is inside of policy provider.                    
                </comment>
                <comment line="356">
                    FTP knows how to find component after the given. We don&apos;t.                    
                </comment>
                <comment line="360">
                    Null result means that we overstepped the limit of the FTP&apos;s cycle.                    
                </comment>
                <comment line="361">
                    In that case we must quit the cycle, otherwise return the component found.                    
                </comment>
                <comment line="368">
                    If the provider is traversable it&apos;s returned.                    
                </comment>
                <scope line="339"/>
                <scope line="342"/>
                <scope line="345"/>
                <declaration name="provider" type="Container" line="350"/>
                <scope line="351">
                    <scope line="352"/>
                    <declaration name="policy" type="FocusTraversalPolicy" line="357"/>
                    <declaration name="beforeComp" type="Component" line="358"/>
                    <scope line="362"/>
                    <scope line="369"/>
                </scope>
                <declaration name="cycle" type="List&lt;Component&gt;" line="374"/>
                <declaration name="index" type="int" line="378"/>
                <scope line="380">
                    <scope line="381"/>
                </scope>
                <declaration name="comp" type="Component" line="387"/>
                <declaration name="tryComp" type="Component" line="388"/>
                <scope line="390">
                    <scope line="392"/>
                    <scope line="394"/>
                </scope>
                <scope line="399"/>
            </method>
            <javadoc line="413">
                Returns the first Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  forward direction.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider whose
                      first Component is to be returned                    
                </param>
                <return>
                    the first Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getFirstComponent" type="Component" line="424">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <declaration name="cycle" type="List&lt;Component&gt;" line="425"/>
                <scope line="428"/>
                <scope line="432"/>
                <scope line="434"/>
                <scope line="438"/>
                <scope line="444">
                    <scope line="445"/>
                    <scope line="449"/>
                </scope>
            </method>
            <javadoc line="456">
                Returns the last Component in the traversal cycle. This method is used
                  to determine the next Component to focus when traversal wraps in the
                  reverse direction.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider whose
                      last Component is to be returned                    
                </param>
                <return>
                    the last Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getLastComponent" type="Component" line="467">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
                <declaration name="cycle" type="List&lt;Component&gt;" line="468"/>
                <scope line="471"/>
                <scope line="475"/>
                <scope line="477"/>
                <scope line="481"/>
                <scope line="487">
                    <declaration name="comp" type="Component" line="488"/>
                    <scope line="489"/>
                    <scope line="491">
                        <declaration name="cont" type="Container" line="492"/>
                        <scope line="493"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="501">
                Returns the default Component to focus. This Component will be the first
                  to receive focus when traversing down into a new focus traversal cycle
                  rooted at aContainer. The default implementation of this method
                  returns the same Component as &lt;code&gt;getFirstComponent&lt;/code&gt;.                
                <param>
                    aContainer a focus cycle root of aComponent or a focus traversal policy provider whose
                      default Component is to be returned                    
                </param>
                <return>
                    the default Component in the traversal cycle of aContainer,
                      or null if no suitable Component can be found                    
                </return>
                <see>
                    #getFirstComponent                    
                </see>
                <throws>
                    IllegalArgumentException if aContainer is null                    
                </throws>
            </javadoc>
            <method name="getDefaultComponent" type="Component" line="514">
                <params>
                    <param name="aContainer" type="Container"/>
                </params>
            </method>
            <javadoc line="518">
                Sets whether this SortingFocusTraversalPolicy transfers focus down-cycle
                  implicitly. If &lt;code&gt;true&lt;/code&gt;, during normal focus traversal,
                  the Component traversed after a focus cycle root will be the focus-
                  cycle-root&apos;s default Component to focus. If &lt;code&gt;false&lt;/code&gt;, the
                  next Component in the focus traversal cycle rooted at the specified
                  focus cycle root will be traversed instead. The default value for this
                  property is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    implicitDownCycleTraversal whether this
                      SortingFocusTraversalPolicy transfers focus down-cycle implicitly                    
                </param>
                <see>
                    #getImplicitDownCycleTraversal                    
                </see>
                <see>
                    #getFirstComponent                    
                </see>
            </javadoc>
            <method name="setImplicitDownCycleTraversal" type="void" line="532">
                <params>
                    <param name="implicitDownCycleTraversal" type="boolean"/>
                </params>
            </method>
            <javadoc line="536">
                Returns whether this SortingFocusTraversalPolicy transfers focus down-
                  cycle implicitly. If &lt;code&gt;true&lt;/code&gt;, during normal focus
                  traversal, the Component traversed after a focus cycle root will be the
                  focus-cycle-root&apos;s default Component to focus. If &lt;code&gt;false&lt;/code&gt;,
                  the next Component in the focus traversal cycle rooted at the specified
                  focus cycle root will be traversed instead.                
                <return>
                    whether this SortingFocusTraversalPolicy transfers focus down-
                      cycle implicitly                    
                </return>
                <see>
                    #setImplicitDownCycleTraversal                    
                </see>
                <see>
                    #getFirstComponent                    
                </see>
            </javadoc>
            <method name="getImplicitDownCycleTraversal" type="boolean" line="549"/>
            <javadoc line="553">
                Sets the Comparator which will be used to sort the Components in a
                  focus traversal cycle.                
                <param>
                    comparator the Comparator which will be used for sorting                    
                </param>
            </javadoc>
            <method name="setComparator" type="void" line="559">
                <params>
                    <param name="comparator" type="Comparator<? super Component>"/>
                </params>
            </method>
            <javadoc line="563">
                Returns the Comparator which will be used to sort the Components in a
                  focus traversal cycle.                
                <return>
                    the Comparator which will be used for sorting                    
                </return>
            </javadoc>
            <method name="getComparator" type="Comparator<? super Component>" line="569"/>
            <javadoc line="573">
                Determines whether a Component is an acceptable choice as the new
                  focus owner. By default, this method will accept a Component if and
                  only if it is visible, displayable, enabled, and focusable.                
                <param>
                    aComponent the Component whose fitness as a focus owner is to
                      be tested                    
                </param>
                <return>
                    <code>true</code> if aComponent is visible, displayable,
                      enabled, and focusable; <code>false</code> otherwise                    
                </return>
            </javadoc>
            <method name="accept" type="boolean" line="583">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
            </method>
        </class>
        <class name="SwingContainerOrderFocusTraversalPolicy" line="590">
            <extends class="java.awt.ContainerOrderFocusTraversalPolicy"/>
            <comment line="85">
                Delegate our fitness test to ContainerOrder so that we only have to                
            </comment>
            <comment line="86">
                code the algorithm once.                
            </comment>
            <comment line="180">
                Checks if a new focus cycle takes place and returns a Component to traverse focus to.
                 @param comp a possible focus cycle root or policy provider
                 @param traversalDirection the direction of the traversal
                 @return a Component to traverse focus to if {@code comp} is a root or provider
                         and implicit down-cycle is set, otherwise {@code null}                
            </comment>
            <method name="accept" type="boolean" line="593">
                <params>
                    <param name="aComponent" type="Component"/>
                </params>
            </method>
        </class>
    </source>