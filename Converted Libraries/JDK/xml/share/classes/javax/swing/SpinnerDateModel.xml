<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <import package="java.io.Serializable"/>
        <class name="SpinnerDateModel" line="32">
            <extends class="AbstractSpinnerModel"/>
            <implements interface="Serializable"/>
            <javadoc line="32">
                A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt;s.
                  The upper and lower bounds of the sequence are defined by properties called
                  &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; and the size
                  of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt;
                  and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property
                  called &lt;code&gt;calendarField&lt;/code&gt;.  The &lt;code&gt;start&lt;/code&gt;
                  and &lt;code&gt;end&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to
                  indicate that the sequence has no lower or upper limit.
                  &lt;p&gt;
                  The value of the &lt;code&gt;calendarField&lt;/code&gt; property must be one of the
                  &lt;code&gt;java.util.Calendar&lt;/code&gt; constants that specify a field
                  within a &lt;code&gt;Calendar&lt;/code&gt;.  The &lt;code&gt;getNextValue&lt;/code&gt;
                  and &lt;code&gt;getPreviousValue&lt;/code&gt;
                  methods change the date forward or backwards by this amount.
                  For example, if &lt;code&gt;calendarField&lt;/code&gt; is &lt;code&gt;Calendar.DAY_OF_WEEK&lt;/code&gt;,
                  then &lt;code&gt;nextValue&lt;/code&gt; produces a &lt;code&gt;Date&lt;/code&gt; that&apos;s 24
                  hours after the current &lt;code&gt;value&lt;/code&gt;, and &lt;code&gt;previousValue&lt;/code&gt;
                  produces a &lt;code&gt;Date&lt;/code&gt; that&apos;s 24 hours earlier.
                  &lt;p&gt;
                  The legal values for &lt;code&gt;calendarField&lt;/code&gt; are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.ERA&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.YEAR&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.MONTH&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.WEEK_OF_YEAR&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.WEEK_OF_MONTH&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_MONTH&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_YEAR&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_WEEK&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_WEEK_IN_MONTH&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.AM_PM&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.HOUR&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.HOUR_OF_DAY&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.MINUTE&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.SECOND&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;Calendar.MILLISECOND&lt;/code&gt;
                  &lt;/ul&gt;
                  However some UIs may set the calendarField before commiting the edit
                  to spin the field under the cursor. If you only want one field to
                  spin you can subclass and ignore the setCalendarField calls.
                  &lt;p&gt;
                  This model inherits a &lt;code&gt;ChangeListener&lt;/code&gt;.  The
                  &lt;code&gt;ChangeListeners&lt;/code&gt; are notified whenever the models
                  &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;calendarField&lt;/code&gt;,
                  &lt;code&gt;start&lt;/code&gt;, or &lt;code&gt;end&lt;/code&gt; properties changes.                
                <see>
                    JSpinner                    
                </see>
                <see>
                    SpinnerModel                    
                </see>
                <see>
                    AbstractSpinnerModel                    
                </see>
                <see>
                    SpinnerListModel                    
                </see>
                <see>
                    SpinnerNumberModel                    
                </see>
                <see>
                    Calendar#add                    
                </see>
                <author>
                    Hans Muller                    
                </author>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="start" type="Comparable" line="91"/>
            <declaration name="value" type="Calendar" line="92"/>
            <declaration name="calendarField" type="int" line="93"/>
            <method name="calendarFieldOK" type="boolean" line="96">
                <params>
                    <param name="calendarField" type="int"/>
                </params>
            </method>
            <javadoc line="120">
                Creates a &lt;code&gt;SpinnerDateModel&lt;/code&gt; that represents a sequence of dates
                  between &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.  The
                  &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods
                  compute elements of the sequence by advancing or reversing
                  the current date &lt;code&gt;value&lt;/code&gt; by the
                  &lt;code&gt;calendarField&lt;/code&gt; time unit.  For a precise description
                  of what it means to increment or decrement a &lt;code&gt;Calendar&lt;/code&gt;
                  &lt;code&gt;field&lt;/code&gt;, see the &lt;code&gt;add&lt;/code&gt; method in
                  &lt;code&gt;java.util.Calendar&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; parameters can be
                  &lt;code&gt;null&lt;/code&gt; to indicate that the range doesn&apos;t have an
                  upper or lower bound.  If &lt;code&gt;value&lt;/code&gt; or
                  &lt;code&gt;calendarField&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, or if both
                  &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are specified and
                  &lt;code&gt;mininum &amp;gt; maximum&lt;/code&gt; then an
                  &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.
                  Similarly if &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code&gt; is false,
                  an IllegalArgumentException is thrown.                
                <param>
                    value the current (non &lt;code&gt;null&lt;/code&gt;) value of the model                    
                </param>
                <param>
                    start the first date in the sequence or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    end the last date in the sequence or &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    calendarField one of
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.ERA&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.YEAR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.WEEK_OF_YEAR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.WEEK_OF_MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_YEAR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_WEEK&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_WEEK_IN_MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.AM_PM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.HOUR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.HOUR_OF_DAY&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.MINUTE&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.SECOND&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.MILLISECOND&lt;/code&gt;
                      &lt;/ul&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if &lt;code&gt;value&lt;/code&gt; or
                      &lt;code&gt;calendarField&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;,
                      if &lt;code&gt;calendarField&lt;/code&gt; isn&apos;t valid,
                      or if the following expression is
                      false: &lt;code&gt;(start &amp;lt;= value &amp;lt;= end)&lt;/code&gt;.                    
                </throws>
                <see>
                    Calendar#add                    
                </see>
                <see>
                    #setValue                    
                </see>
                <see>
                    #setStart                    
                </see>
                <see>
                    #setEnd                    
                </see>
                <see>
                    #setCalendarField                    
                </see>
            </javadoc>
            <method name="SpinnerDateModel" type="constructor" line="175">
                <params>
                    <param name="value" type="Date"/>
                    <param name="start" type="Comparable"/>
                    <param name="end" type="Comparable"/>
                    <param name="calendarField" type="int"/>
                </params>
                <scope line="176"/>
                <scope line="179"/>
                <scope line="183"/>
            </method>
            <javadoc line="195">
                Constructs a &lt;code&gt;SpinnerDateModel&lt;/code&gt; whose initial
                  &lt;code&gt;value&lt;/code&gt; is the current date, &lt;code&gt;calendarField&lt;/code&gt;
                  is equal to &lt;code&gt;Calendar.DAY_OF_MONTH&lt;/code&gt;, and for which
                  there are no &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; limits.                
            </javadoc>
            <method name="SpinnerDateModel" type="constructor" line="201"/>
            <javadoc line="206">
                Changes the lower limit for Dates in this sequence.
                  If &lt;code&gt;start&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  then there is no lower limit.  No bounds checking is done here:
                  the new start value may invalidate the
                  &lt;code&gt;(start &amp;lt;= value &amp;lt;= end)&lt;/code&gt;
                  invariant enforced by the constructors.  This is to simplify updating
                  the model.  Naturally one should ensure that the invariant is true
                  before calling the &lt;code&gt;nextValue&lt;/code&gt;, &lt;code&gt;previousValue&lt;/code&gt;,
                  or &lt;code&gt;setValue&lt;/code&gt; methods.
                  &lt;p&gt;
                  Typically this property is a &lt;code&gt;Date&lt;/code&gt; however it&apos;s possible to use
                  a &lt;code&gt;Comparable&lt;/code&gt; with a &lt;code&gt;compareTo&lt;/code&gt; method for Dates.
                  For example &lt;code&gt;start&lt;/code&gt; might be an instance of a class like this:
                  &lt;pre&gt;
                  MyStartDate implements Comparable {
                  long t = 12345;
                  public int compareTo(Date d) {
                  return (t &lt; d.getTime() ? -1 : (t == d.getTime() ? 0 : 1));
                  }
                  public int compareTo(Object o) {
                  return compareTo((Date)o);
                  }
                  }
                  &lt;/pre&gt;
                  Note that the above example will throw a &lt;code&gt;ClassCastException&lt;/code&gt;
                  if the &lt;code&gt;Object&lt;/code&gt; passed to &lt;code&gt;compareTo(Object)&lt;/code&gt;
                  is not a &lt;code&gt;Date&lt;/code&gt;.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the
                  &lt;code&gt;start&lt;/code&gt; has changed.                
                <param>
                    start defines the first date in the sequence                    
                </param>
                <see>
                    #getStart                    
                </see>
                <see>
                    #setEnd                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="setStart" type="void" line="243">
                <params>
                    <param name="start" type="Comparable"/>
                </params>
                <scope line="244"/>
            </method>
            <javadoc line="251">
                Returns the first &lt;code&gt;Date&lt;/code&gt; in the sequence.                
                <return>
                    the value of the &lt;code&gt;start&lt;/code&gt; property                    
                </return>
                <see>
                    #setStart                    
                </see>
            </javadoc>
            <method name="getStart" type="Comparable" line="257"/>
            <javadoc line="262">
                Changes the upper limit for &lt;code&gt;Date&lt;/code&gt;s in this sequence.
                  If &lt;code&gt;start&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then there is no upper
                  limit.  No bounds checking is done here: the new
                  start value may invalidate the &lt;code&gt;(start &amp;lt;= value &amp;lt;= end)&lt;/code&gt;
                  invariant enforced by the constructors.  This is to simplify updating
                  the model.  Naturally, one should ensure that the invariant is true
                  before calling the &lt;code&gt;nextValue&lt;/code&gt;, &lt;code&gt;previousValue&lt;/code&gt;,
                  or &lt;code&gt;setValue&lt;/code&gt; methods.
                  &lt;p&gt;
                  Typically this property is a &lt;code&gt;Date&lt;/code&gt; however it&apos;s possible to use
                  &lt;code&gt;Comparable&lt;/code&gt; with a &lt;code&gt;compareTo&lt;/code&gt; method for
                  &lt;code&gt;Date&lt;/code&gt;s.  See &lt;code&gt;setStart&lt;/code&gt; for an example.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the &lt;code&gt;end&lt;/code&gt;
                  has changed.                
                <param>
                    end defines the last date in the sequence                    
                </param>
                <see>
                    #getEnd                    
                </see>
                <see>
                    #setStart                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="setEnd" type="void" line="284">
                <params>
                    <param name="end" type="Comparable"/>
                </params>
                <scope line="285"/>
            </method>
            <javadoc line="292">
                Returns the last &lt;code&gt;Date&lt;/code&gt; in the sequence.                
                <return>
                    the value of the &lt;code&gt;end&lt;/code&gt; property                    
                </return>
                <see>
                    #setEnd                    
                </see>
            </javadoc>
            <method name="getEnd" type="Comparable" line="298"/>
            <javadoc line="303">
                Changes the size of the date value change computed
                  by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods.
                  The &lt;code&gt;calendarField&lt;/code&gt; parameter must be one of the
                  &lt;code&gt;Calendar&lt;/code&gt; field constants like &lt;code&gt;Calendar.MONTH&lt;/code&gt;
                  or &lt;code&gt;Calendar.MINUTE&lt;/code&gt;.
                  The &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods
                  simply move the specified &lt;code&gt;Calendar&lt;/code&gt; field forward or backward
                  by one unit with the &lt;code&gt;Calendar.add&lt;/code&gt; method.
                  You should use this method with care as some UIs may set the
                  calendarField before commiting the edit to spin the field under
                  the cursor. If you only want one field to spin you can subclass
                  and ignore the setCalendarField calls.                
                <param>
                    calendarField one of
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.ERA&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.YEAR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.WEEK_OF_YEAR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.WEEK_OF_MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_YEAR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_WEEK&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.DAY_OF_WEEK_IN_MONTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.AM_PM&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.HOUR&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.HOUR_OF_DAY&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.MINUTE&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.SECOND&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;Calendar.MILLISECOND&lt;/code&gt;
                      &lt;/ul&gt;
                      &lt;p&gt;
                      This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the
                      &lt;code&gt;calendarField&lt;/code&gt; has changed.                    
                </param>
                <see>
                    #getCalendarField                    
                </see>
                <see>
                    #getNextValue                    
                </see>
                <see>
                    #getPreviousValue                    
                </see>
                <see>
                    Calendar#add                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="setCalendarField" type="void" line="345">
                <params>
                    <param name="calendarField" type="int"/>
                </params>
                <scope line="346"/>
                <scope line="349"/>
            </method>
            <javadoc line="356">
                Returns the &lt;code&gt;Calendar&lt;/code&gt; field that is added to or subtracted from
                  by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods.                
                <return>
                    the value of the &lt;code&gt;calendarField&lt;/code&gt; property                    
                </return>
                <see>
                    #setCalendarField                    
                </see>
            </javadoc>
            <method name="getCalendarField" type="int" line="363"/>
            <javadoc line="368">
                Returns the next &lt;code&gt;Date&lt;/code&gt; in the sequence, or &lt;code&gt;null&lt;/code&gt; if
                  the next date is after &lt;code&gt;end&lt;/code&gt;.                
                <return>
                    the next &lt;code&gt;Date&lt;/code&gt; in the sequence, or &lt;code&gt;null&lt;/code&gt; if
                      the next date is after &lt;code&gt;end&lt;/code&gt;.                    
                </return>
                <see>
                    SpinnerModel#getNextValue                    
                </see>
                <see>
                    #getPreviousValue                    
                </see>
                <see>
                    #setCalendarField                    
                </see>
            </javadoc>
            <method name="getNextValue" type="Object" line="379">
                <declaration name="cal" type="Calendar" line="380"/>
                <declaration name="next" type="Date" line="383"/>
            </method>
            <javadoc line="388">
                Returns the previous &lt;code&gt;Date&lt;/code&gt; in the sequence, or &lt;code&gt;null&lt;/code&gt;
                  if the previous date is before &lt;code&gt;start&lt;/code&gt;.                
                <return>
                    the previous &lt;code&gt;Date&lt;/code&gt; in the sequence, or
                      &lt;code&gt;null&lt;/code&gt; if the previous date
                      is before &lt;code&gt;start&lt;/code&gt;                    
                </return>
                <see>
                    SpinnerModel#getPreviousValue                    
                </see>
                <see>
                    #getNextValue                    
                </see>
                <see>
                    #setCalendarField                    
                </see>
            </javadoc>
            <method name="getPreviousValue" type="Object" line="400">
                <declaration name="cal" type="Calendar" line="401"/>
                <declaration name="prev" type="Date" line="404"/>
            </method>
            <javadoc line="409">
                Returns the current element in this sequence of &lt;code&gt;Date&lt;/code&gt;s.
                  This method is equivalent to &lt;code&gt;(Date)getValue&lt;/code&gt;.                
                <return>
                    the &lt;code&gt;value&lt;/code&gt; property                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="getDate" type="Date" line="416"/>
            <javadoc line="421">
                Returns the current element in this sequence of &lt;code&gt;Date&lt;/code&gt;s.                
                <return>
                    the &lt;code&gt;value&lt;/code&gt; property                    
                </return>
                <see>
                    #setValue                    
                </see>
                <see>
                    #getDate                    
                </see>
            </javadoc>
            <method name="getValue" type="Object" line="428"/>
            <javadoc line="433">
                Sets the current &lt;code&gt;Date&lt;/code&gt; for this sequence.
                  If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.  No bounds
                  checking is done here:
                  the new value may invalidate the &lt;code&gt;(start &amp;lt= value &amp;lt end)&lt;/code&gt;
                  invariant enforced by the constructors.  Naturally, one should ensure
                  that the &lt;code&gt;(start &amp;lt;= value &amp;lt;= maximum)&lt;/code&gt; invariant is true
                  before calling the &lt;code&gt;nextValue&lt;/code&gt;, &lt;code&gt;previousValue&lt;/code&gt;,
                  or &lt;code&gt;setValue&lt;/code&gt; methods.
                  &lt;p&gt;
                  This method fires a &lt;code&gt;ChangeEvent&lt;/code&gt; if the
                  &lt;code&gt;value&lt;/code&gt; has changed.                
                <param>
                    value the current (non &lt;code&gt;null&lt;/code&gt;)
                      &lt;code&gt;Date&lt;/code&gt; for this sequence                    
                </param>
                <throws>
                    IllegalArgumentException if value is &lt;code&gt;null&lt;/code&gt;
                      or not a &lt;code&gt;Date&lt;/code&gt;                    
                </throws>
                <see>
                    #getDate                    
                </see>
                <see>
                    #getValue                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="455">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="456"/>
                <scope line="459"/>
            </method>
        </class>
    </source>