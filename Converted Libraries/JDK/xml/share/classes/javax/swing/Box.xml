<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans.ConstructorProperties"/>
        <import package="java.util.Locale"/>
        <import package="java.io.Serializable"/>
        <import package="javax.accessibility"/>
        <class name="Box" line="36">
            <extends class="JComponent"/>
            <comment line="400">
                ///////////////
                 Accessibility support for Box                
            </comment>
            <comment line="437">
                inner class AccessibleBox                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="36">
                A lightweight container
                  that uses a BoxLayout object as its layout manager.
                  Box provides several class methods
                  that are useful for containers using BoxLayout --
                  even non-Box containers.
                  &lt;p&gt;
                  The &lt;code&gt;Box&lt;/code&gt; class can create several kinds
                  of invisible components
                  that affect layout:
                  glue, struts, and rigid areas.
                  If all the components your &lt;code&gt;Box&lt;/code&gt; contains
                  have a fixed size,
                  you might want to use a glue component
                  (returned by &lt;code&gt;createGlue&lt;/code&gt;)
                  to control the components&apos; positions.
                  If you need a fixed amount of space between two components,
                  try using a strut
                  (&lt;code&gt;createHorizontalStrut&lt;/code&gt; or &lt;code&gt;createVerticalStrut&lt;/code&gt;).
                  If you need an invisible component
                  that always takes up the same amount of space,
                  get it by invoking &lt;code&gt;createRigidArea&lt;/code&gt;.
                  &lt;p&gt;
                  If you are implementing a &lt;code&gt;BoxLayout&lt;/code&gt; you
                  can find further information and examples in
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/layout/box.html&quot;&gt;How to Use BoxLayout&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    BoxLayout                    
                </see>
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="81">
                Creates a &lt;code&gt;Box&lt;/code&gt; that displays its components
                  along the the specified axis.                
                <param>
                    axis  can be {@link BoxLayout#X_AXIS},{@link BoxLayout#Y_AXIS},{@link BoxLayout#LINE_AXIS} or{@link BoxLayout#PAGE_AXIS}.                    
                </param>
                <throws>
                    AWTError if the <code>axis</code> is invalid                    
                </throws>
                <see>
                    #createHorizontalBox                    
                </see>
                <see>
                    #createVerticalBox                    
                </see>
            </javadoc>
            <method name="Box" type="constructor" line="93">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="98">
                Creates a &lt;code&gt;Box&lt;/code&gt; that displays its components
                  from left to right. If you want a &lt;code&gt;Box&lt;/code&gt; that
                  respects the component orientation you should create the
                  &lt;code&gt;Box&lt;/code&gt; using the constructor and pass in
                  &lt;code&gt;BoxLayout.LINE_AXIS&lt;/code&gt;, eg:
                  &lt;pre&gt;
                  Box lineBox = new Box(BoxLayout.LINE_AXIS);
                  &lt;/pre&gt;                
                <return>
                    the box                    
                </return>
            </javadoc>
            <method name="createHorizontalBox" type="Box" line="110"/>
            <javadoc line="114">
                Creates a &lt;code&gt;Box&lt;/code&gt; that displays its components
                  from top to bottom. If you want a &lt;code&gt;Box&lt;/code&gt; that
                  respects the component orientation you should create the
                  &lt;code&gt;Box&lt;/code&gt; using the constructor and pass in
                  &lt;code&gt;BoxLayout.PAGE_AXIS&lt;/code&gt;, eg:
                  &lt;pre&gt;
                  Box lineBox = new Box(BoxLayout.PAGE_AXIS);
                  &lt;/pre&gt;                
                <return>
                    the box                    
                </return>
            </javadoc>
            <method name="createVerticalBox" type="Box" line="126"/>
            <javadoc line="130">
                Creates an invisible component that&apos;s always the specified size.
                  &lt;!-- WHEN WOULD YOU USE THIS AS OPPOSED TO A STRUT? --&gt;                
                <param>
                    d the dimensions of the invisible component                    
                </param>
                <return>
                    the component                    
                </return>
                <see>
                    #createGlue                    
                </see>
                <see>
                    #createHorizontalStrut                    
                </see>
                <see>
                    #createVerticalStrut                    
                </see>
            </javadoc>
            <method name="createRigidArea" type="Component" line="140">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
            </method>
            <javadoc line="144">
                Creates an invisible, fixed-width component.
                  In a horizontal box,
                  you typically use this method
                  to force a certain amount of space between two components.
                  In a vertical box,
                  you might use this method
                  to force the box to be at least the specified width.
                  The invisible component has no height
                  unless excess space is available,
                  in which case it takes its share of available space,
                  just like any other component that has no maximum height.                
                <param>
                    width the width of the invisible component, in pixels >= 0                    
                </param>
                <return>
                    the component                    
                </return>
                <see>
                    #createVerticalStrut                    
                </see>
                <see>
                    #createGlue                    
                </see>
                <see>
                    #createRigidArea                    
                </see>
            </javadoc>
            <method name="createHorizontalStrut" type="Component" line="163">
                <params>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="168">
                Creates an invisible, fixed-height component.
                  In a vertical box,
                  you typically use this method
                  to force a certain amount of space between two components.
                  In a horizontal box,
                  you might use this method
                  to force the box to be at least the specified height.
                  The invisible component has no width
                  unless excess space is available,
                  in which case it takes its share of available space,
                  just like any other component that has no maximum width.                
                <param>
                    height the height of the invisible component, in pixels >= 0                    
                </param>
                <return>
                    the component                    
                </return>
                <see>
                    #createHorizontalStrut                    
                </see>
                <see>
                    #createGlue                    
                </see>
                <see>
                    #createRigidArea                    
                </see>
            </javadoc>
            <method name="createVerticalStrut" type="Component" line="187">
                <params>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="192">
                Creates an invisible &quot;glue&quot; component
                  that can be useful in a Box
                  whose visible components have a maximum width
                  (for a horizontal box)
                  or height (for a vertical box).
                  You can think of the glue component
                  as being a gooey substance
                  that expands as much as necessary
                  to fill the space between its neighboring components.
                  &lt;p&gt;
                  For example, suppose you have
                  a horizontal box that contains two fixed-size components.
                  If the box gets extra space,
                  the fixed-size components won&apos;t become larger,
                  so where does the extra space go?
                  Without glue,
                  the extra space goes to the right of the second component.
                  If you put glue between the fixed-size components,
                  then the extra space goes there.
                  If you put glue before the first fixed-size component,
                  the extra space goes there,
                  and the fixed-size components are shoved against the right
                  edge of the box.
                  If you put glue before the first fixed-size component
                  and after the second fixed-size component,
                  the fixed-size components are centered in the box.
                  &lt;p&gt;
                  To use glue,
                  call &lt;code&gt;Box.createGlue&lt;/code&gt;
                  and add the returned component to a container.
                  The glue component has no minimum or preferred size,
                  so it takes no space unless excess space is available.
                  If excess space is available,
                  then the glue component takes its share of available
                  horizontal or vertical space,
                  just like any other component that has no maximum width or height.                
                <return>
                    the component                    
                </return>
            </javadoc>
            <method name="createGlue" type="Component" line="236"/>
            <javadoc line="241">
                Creates a horizontal glue component.                
                <return>
                    the component                    
                </return>
            </javadoc>
            <method name="createHorizontalGlue" type="Component" line="246"/>
            <javadoc line="251">
                Creates a vertical glue component.                
                <return>
                    the component                    
                </return>
            </javadoc>
            <method name="createVerticalGlue" type="Component" line="256"/>
            <javadoc line="261">
                Throws an AWTError, since a Box can use only a BoxLayout.                
                <param>
                    l the layout manager to use                    
                </param>
            </javadoc>
            <method name="setLayout" type="void" line="266">
                <params>
                    <param name="l" type="LayoutManager"/>
                </params>
            </method>
            <javadoc line="270">
                Paints this &lt;code&gt;Box&lt;/code&gt;.  If this &lt;code&gt;Box&lt;/code&gt; has a UI this
                  method invokes super&apos;s implementation, otherwise if this
                  &lt;code&gt;Box&lt;/code&gt; is opaque the &lt;code&gt;Graphics&lt;/code&gt; is filled
                  using the background.                
                <param>
                    g the <code>Graphics</code> to paint to                    
                </param>
                <throws>
                    NullPointerException if <code>g</code> is null                    
                </throws>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="paintComponent" type="void" line="280">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <comment line="283">
                    On the off chance some one created a UI, honor it                    
                </comment>
                <scope line="281"/>
                <scope line="284"/>
            </method>
            <class name="Filler" line="291">
                <extends class="JComponent"/>
                <comment line="337">
                    ---- Component methods ------------------------------------------                    
                </comment>
                <comment line="360">
                    ///////////////
                     Accessibility support for Box$Filler                    
                </comment>
                <comment line="425">
                    AccessibleContext methods                    
                </comment>
                <implements interface="Accessible"/>
                <javadoc line="291">
                    An implementation of a lightweight component that participates in
                      layout but has no view.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="306">
                    Constructor to create shape with the given size ranges.                    
                    <param>
                        min   Minimum size                        
                    </param>
                    <param>
                        pref  Preferred size                        
                    </param>
                    <param>
                        max   Maximum size                        
                    </param>
                </javadoc>
                <method name="Filler" type="constructor" line="314">
                    <params>
                        <param name="min" type="Dimension"/>
                        <param name="pref" type="Dimension"/>
                        <param name="max" type="Dimension"/>
                    </params>
                </method>
                <javadoc line="320">
                    Change the size requests for this shape.  An invalidate() is
                      propagated upward as a result so that layout will eventually
                      happen with using the new sizes.                    
                    <param>
                        min   Value to return for getMinimumSize                        
                    </param>
                    <param>
                        pref  Value to return for getPreferredSize                        
                    </param>
                    <param>
                        max   Value to return for getMaximumSize                        
                    </param>
                </javadoc>
                <method name="changeShape" type="void" line="329">
                    <params>
                        <param name="min" type="Dimension"/>
                        <param name="pref" type="Dimension"/>
                        <param name="max" type="Dimension"/>
                    </params>
                </method>
                <javadoc line="338">
                    Paints this &lt;code&gt;Filler&lt;/code&gt;.  If this
                      &lt;code&gt;Filler&lt;/code&gt; has a UI this method invokes super&apos;s
                      implementation, otherwise if this &lt;code&gt;Filler&lt;/code&gt; is
                      opaque the &lt;code&gt;Graphics&lt;/code&gt; is filled using the
                      background.                    
                    <param>
                        g the <code>Graphics</code> to paint to                        
                    </param>
                    <throws>
                        NullPointerException if <code>g</code> is null                        
                    </throws>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="paintComponent" type="void" line="349">
                    <params>
                        <param name="g" type="Graphics"/>
                    </params>
                    <comment line="352">
                        On the off chance some one created a UI, honor it                        
                    </comment>
                    <scope line="350"/>
                    <scope line="353"/>
                </method>
                <javadoc line="363">
                    Gets the AccessibleContext associated with this Box.Filler.
                      For box fillers, the AccessibleContext takes the form of an
                      AccessibleBoxFiller.
                      A new AccessibleAWTBoxFiller instance is created if necessary.                    
                    <return>
                        an AccessibleBoxFiller that serves as the
                          AccessibleContext of this Box.Filler.                        
                    </return>
                </javadoc>
                <method name="getAccessibleContext" type="AccessibleContext" line="372">
                    <scope line="373"/>
                </method>
                <class name="AccessibleBoxFiller" line="379">
                    <extends class="AccessibleAWTComponent"/>
                    <comment line="385">
                        AccessibleContext methods                        
                    </comment>
                    <javadoc line="379">
                        This class implements accessibility support for the
                          &lt;code&gt;Box.Filler&lt;/code&gt; class.                        
                    </javadoc>
                    <javadoc line="386">
                        Gets the role of this object.                        
                        <return>
                            an instance of AccessibleRole describing the role of
                              the object (AccessibleRole.FILLER)                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="393"/>
                </class>
            </class>
            <javadoc line="403">
                Gets the AccessibleContext associated with this Box.
                  For boxes, the AccessibleContext takes the form of an
                  AccessibleBox.
                  A new AccessibleAWTBox instance is created if necessary.                
                <return>
                    an AccessibleBox that serves as the
                      AccessibleContext of this Box                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="412">
                <scope line="413"/>
            </method>
            <class name="AccessibleBox" line="419">
                <extends class="AccessibleAWTContainer"/>
                <comment line="337">
                    ---- Component methods ------------------------------------------                    
                </comment>
                <comment line="360">
                    ///////////////
                     Accessibility support for Box$Filler                    
                </comment>
                <comment line="425">
                    AccessibleContext methods                    
                </comment>
                <javadoc line="419">
                    This class implements accessibility support for the
                      &lt;code&gt;Box&lt;/code&gt; class.                    
                </javadoc>
                <javadoc line="426">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object (AccessibleRole.FILLER)                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="433"/>
            </class>
        </class>
    </source>