<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <import package="java.util.EventObject"/>
        <import package="java.io.Serializable"/>
        <class name="AbstractCellEditor" line="5">
            <implements interface="CellEditor"/>
            <implements interface="Serializable"/>
            <javadoc line="5">
                A base class for &lt;code&gt;CellEditors&lt;/code&gt;, providing default
                  implementations for the methods in the &lt;code&gt;CellEditor&lt;/code&gt;
                  interface except &lt;code&gt;getCellEditorValue()&lt;/code&gt;.
                  Like the other abstract implementations in Swing, also manages a list
                  of listeners.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Philip Milne                    
                </author>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="24"/>
            <declaration name="changeEvent" type="ChangeEvent" line="25"/>
            <javadoc line="26">
                Returns true.                
                <param>
                    e  an event object                    
                </param>
                <return>
                    true                    
                </return>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="31">
                <params>
                    <param name="e" type="EventObject"/>
                </params>
            </method>
            <javadoc line="34">
                Returns true.                
                <param>
                    anEvent  an event object                    
                </param>
                <return>
                    true                    
                </return>
            </javadoc>
            <method name="shouldSelectCell" type="boolean" line="39">
                <params>
                    <param name="anEvent" type="EventObject"/>
                </params>
            </method>
            <javadoc line="42">
                Calls &lt;code&gt;fireEditingStopped&lt;/code&gt; and returns true.                
                <return>
                    true                    
                </return>
            </javadoc>
            <method name="stopCellEditing" type="boolean" line="46"/>
            <javadoc line="50">
                Calls &lt;code&gt;fireEditingCanceled&lt;/code&gt;.                
            </javadoc>
            <method name="cancelCellEditing" type="void" line="53"/>
            <javadoc line="56">
                Adds a &lt;code&gt;CellEditorListener&lt;/code&gt; to the listener list.                
                <param>
                    l  the new listener to be added                    
                </param>
            </javadoc>
            <method name="addCellEditorListener" type="void" line="60">
                <params>
                    <param name="l" type="CellEditorListener"/>
                </params>
            </method>
            <javadoc line="63">
                Removes a &lt;code&gt;CellEditorListener&lt;/code&gt; from the listener list.                
                <param>
                    l  the listener to be removed                    
                </param>
            </javadoc>
            <method name="removeCellEditorListener" type="void" line="67">
                <params>
                    <param name="l" type="CellEditorListener"/>
                </params>
            </method>
            <javadoc line="70">
                Returns an array of all the &lt;code&gt;CellEditorListener&lt;/code&gt;s added
                  to this AbstractCellEditor with addCellEditorListener().                
                <return>
                    all of the &lt;code&gt;CellEditorListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getCellEditorListeners" type="CellEditorListener[]" line="77"/>
            <javadoc line="80">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireEditingStopped" type="void" line="86">
                <declaration name="listeners" type="Object[]" line="87"/>
                <scope line="88">
                    <scope line="89"/>
                </scope>
            </method>
            <javadoc line="95">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireEditingCanceled" type="void" line="101">
                <declaration name="listeners" type="Object[]" line="102"/>
                <scope line="103">
                    <scope line="104"/>
                </scope>
            </method>
        </class>
    </source>