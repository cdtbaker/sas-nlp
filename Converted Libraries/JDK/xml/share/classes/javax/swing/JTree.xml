<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.tree"/>
        <import package="javax.swing.text.Position"/>
        <import package="javax.accessibility"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.SwingUtilities2.Section"/>
        <import package="sun.swing.SwingUtilities2.Section"/>
        <class name="JTree" line="43">
            <extends class="JComponent"/>
            <comment line="456">
                Bound property names                
            </comment>
            <comment line="1602">
                The following are convenience methods that get forwarded to the
                 current TreeUI.                
            </comment>
            <comment line="2405">
                Following are primarily convenience methods for mapping from
                 row based selections to path selections.  Sometimes it is
                 easier to deal with these than paths (mouse downs, key downs
                 usually just deal with index based selections).
                 Since row based selections require a UI many of these won&apos;t work
                 without one.                
            </comment>
            <comment line="3026">
                Serialization support.                
            </comment>
            <comment line="3379">
                End of class JTree.TreeSelectionRedirector                
            </comment>
            <comment line="3381">
                Scrollable interface                
            </comment>
            <comment line="4060">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="5502">
                inner class AccessibleJTree                
            </comment>
            <implements interface="Scrollable"/>
            <implements interface="Accessible"/>
            <javadoc line="43">
                &lt;a name=&quot;jtree_description&quot;&gt;
                  A control that displays a set of hierarchical data as an outline.
                  You can find task-oriented documentation and examples of using trees in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  A specific node in a tree can be identified either by a
                  &lt;code&gt;TreePath&lt;/code&gt; (an object
                  that encapsulates a node and all of its ancestors), or by its
                  display row, where each row in the display area displays one node.
                  An &lt;i&gt;expanded&lt;/i&gt; node is a non-leaf node (as identified by
                  &lt;code&gt;TreeModel.isLeaf(node)&lt;/code&gt; returning false) that will displays
                  its children when all its ancestors are &lt;i&gt;expanded&lt;/i&gt;.
                  A &lt;i&gt;collapsed&lt;/i&gt;
                  node is one which hides them. A &lt;i&gt;hidden&lt;/i&gt; node is one which is
                  under a collapsed ancestor. All of a &lt;i&gt;viewable&lt;/i&gt; nodes parents
                  are expanded, but may or may not be displayed. A &lt;i&gt;displayed&lt;/i&gt; node
                  is both viewable and in the display area, where it can be seen.
                  &lt;p&gt;
                  The following &lt;code&gt;JTree&lt;/code&gt; methods use &quot;visible&quot; to mean &quot;displayed&quot;:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;isRootVisible()&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;setRootVisible()&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;scrollPathToVisible()&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;scrollRowToVisible()&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;getVisibleRowCount()&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;setVisibleRowCount()&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The next group of &lt;code&gt;JTree&lt;/code&gt; methods use &quot;visible&quot; to mean
                  &quot;viewable&quot; (under an expanded parent):
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;isVisible()&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;makeVisible()&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If you are interested in knowing when the selection changes implement
                  the &lt;code&gt;TreeSelectionListener&lt;/code&gt; interface and add the instance
                  using the method &lt;code&gt;addTreeSelectionListener&lt;/code&gt;.
                  &lt;code&gt;valueChanged&lt;/code&gt; will be invoked when the
                  selection changes, that is if the user clicks twice on the same
                  node &lt;code&gt;valueChanged&lt;/code&gt; will only be invoked once.
                  &lt;p&gt;
                  If you are interested in detecting either double-click events or when
                  a user clicks on a node, regardless of whether or not it was selected,
                  we recommend you do the following:
                  &lt;pre&gt;
                  final JTree tree = ...;
                  MouseListener ml = new MouseAdapter() {
                  public void &lt;b&gt;mousePressed&lt;/b&gt;(MouseEvent e) {
                  int selRow = tree.getRowForLocation(e.getX(), e.getY());
                  TreePath selPath = tree.getPathForLocation(e.getX(), e.getY());
                  if(selRow != -1) {
                  if(e.getClickCount() == 1) {
                  mySingleClick(selRow, selPath);
                  }
                  else if(e.getClickCount() == 2) {
                  myDoubleClick(selRow, selPath);
                  }
                  }
                  }
                  };
                  tree.addMouseListener(ml);
                  &lt;/pre&gt;
                  NOTE: This example obtains both the path and row, but you only need to
                  get the one you&apos;re interested in.
                  &lt;p&gt;
                  To use &lt;code&gt;JTree&lt;/code&gt; to display compound nodes
                  (for example, nodes containing both
                  a graphic icon and text), subclass {@link TreeCellRenderer} and use{@link #setCellRenderer} to tell the tree to use it. To edit such nodes,
                  subclass {@link TreeCellEditor} and use {@link #setCellEditor}.
                  &lt;p&gt;
                  Like all &lt;code&gt;JComponent&lt;/code&gt; classes, you can use {@link InputMap} and{@link ActionMap}to associate an {@link Action} object with a {@link KeyStroke}and execute the action under specified conditions.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component that displays a set of hierarchical data as an outline.                    
                </beaninfo>
                <author>
                    Rob Davis                    
                </author>
                <author>
                    Ray Ryan                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="147"/>
            <javadoc line="147">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="treeModel" type="TreeModel" line="153"/>
            <javadoc line="153">
                The model that defines the tree displayed by this object.                
            </javadoc>
            <declaration name="selectionModel" type="TreeSelectionModel" line="158"/>
            <javadoc line="158">
                Models the set of selected nodes in this tree.                
            </javadoc>
            <declaration name="rootVisible" type="boolean" line="163"/>
            <javadoc line="163">
                True if the root node is displayed, false if its children are
                  the highest visible nodes.                
            </javadoc>
            <declaration name="cellRenderer" type="TreeCellRenderer" line="169"/>
            <javadoc line="169">
                The cell used to draw nodes. If &lt;code&gt;null&lt;/code&gt;, the UI uses a default
                  &lt;code&gt;cellRenderer&lt;/code&gt;.                
            </javadoc>
            <declaration name="rowHeight" type="int" line="175"/>
            <javadoc line="175">
                Height to use for each display row. If this is &lt;= 0 the renderer
                  determines the height for each row.                
            </javadoc>
            <declaration name="rowHeightSet" type="boolean" line="180"/>
            <declaration name="expandedState" type="Hashtable&lt;TreePath,Boolean&gt;" line="182"/>
            <javadoc line="182">
                Maps from &lt;code&gt;TreePath&lt;/code&gt; to &lt;code&gt;Boolean&lt;/code&gt;
                  indicating whether or not the
                  particular path is expanded. This ONLY indicates whether a
                  given path is expanded, and NOT if it is visible or not. That
                  information must be determined by visiting all the parent
                  paths and seeing if they are visible.                
            </javadoc>
            <declaration name="showsRootHandles" type="boolean" line="193"/>
            <javadoc line="193">
                True if handles are displayed at the topmost level of the tree.
                  &lt;p&gt;
                  A handle is a small icon that displays adjacent to the node which
                  allows the user to click once to expand or collapse the node. A
                  common interface shows a plus sign (+) for a node which can be
                  expanded and a minus sign (-) for a node which can be collapsed.
                  Handles are always shown for nodes below the topmost level.
                  &lt;p&gt;
                  If the &lt;code&gt;rootVisible&lt;/code&gt; setting specifies that the root
                  node is to be displayed, then that is the only node at the topmost
                  level. If the root node is not displayed, then all of its
                  children are at the topmost level of the tree. Handles are
                  always displayed for nodes other than the topmost.
                  &lt;p&gt;
                  If the root node isn&apos;t visible, it is generally a good to make
                  this value true. Otherwise, the tree looks exactly like a list,
                  and users may not know that the &quot;list entries&quot; are actually
                  tree nodes.                
                <see>
                    #rootVisible                    
                </see>
            </javadoc>
            <declaration name="showsRootHandlesSet" type="boolean" line="216"/>
            <declaration name="selectionRedirector" type="TreeSelectionRedirector" line="218"/>
            <javadoc line="218">
                Creates a new event and passed it off the
                  &lt;code&gt;selectionListeners&lt;/code&gt;.                
            </javadoc>
            <declaration name="cellEditor" type="TreeCellEditor" line="224"/>
            <javadoc line="224">
                Editor for the entries.  Default is &lt;code&gt;null&lt;/code&gt;
                  (tree is not editable).                
            </javadoc>
            <declaration name="editable" type="boolean" line="230"/>
            <javadoc line="230">
                Is the tree editable? Default is false.                
            </javadoc>
            <declaration name="largeModel" type="boolean" line="235"/>
            <javadoc line="235">
                Is this tree a large model? This is a code-optimization setting.
                  A large model can be used when the cell height is the same for all
                  nodes. The UI will then cache very little information and instead
                  continually message the model. Without a large model the UI caches
                  most of the information, resulting in fewer method calls to the model.
                  &lt;p&gt;
                  This value is only a suggestion to the UI. Not all UIs will
                  take advantage of it. Default value is false.                
            </javadoc>
            <declaration name="visibleRowCount" type="int" line="247"/>
            <javadoc line="247">
                Number of rows to make visible at one time. This value is used for
                  the &lt;code&gt;Scrollable&lt;/code&gt; interface. It determines the preferred
                  size of the display area.                
            </javadoc>
            <declaration name="invokesStopCellEditing" type="boolean" line="254"/>
            <javadoc line="254">
                If true, when editing is to be stopped by way of selection changing,
                  data in tree changing or other means &lt;code&gt;stopCellEditing&lt;/code&gt;
                  is invoked, and changes are saved. If false,
                  &lt;code&gt;cancelCellEditing&lt;/code&gt; is invoked, and changes
                  are discarded. Default is false.                
            </javadoc>
            <declaration name="scrollsOnExpand" type="boolean" line="263"/>
            <javadoc line="263">
                If true, when a node is expanded, as many of the descendants are
                  scrolled to be visible.                
            </javadoc>
            <declaration name="scrollsOnExpandSet" type="boolean" line="268"/>
            <declaration name="toggleClickCount" type="int" line="270"/>
            <javadoc line="270">
                Number of mouse clicks before a node is expanded.                
            </javadoc>
            <declaration name="treeModelListener" type="TreeModelListener" line="275"/>
            <javadoc line="275">
                Updates the &lt;code&gt;expandedState&lt;/code&gt;.                
            </javadoc>
            <declaration name="expandedStack" type="Stack&lt;Stack&lt;TreePath&gt;&gt;" line="280"/>
            <javadoc line="280">
                Used when &lt;code&gt;setExpandedState&lt;/code&gt; is invoked,
                  will be a &lt;code&gt;Stack&lt;/code&gt; of &lt;code&gt;Stack&lt;/code&gt;s.                
            </javadoc>
            <declaration name="leadPath" type="TreePath" line="286"/>
            <javadoc line="286">
                Lead selection path, may not be &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="anchorPath" type="TreePath" line="291"/>
            <javadoc line="291">
                Anchor path.                
            </javadoc>
            <declaration name="expandsSelectedPaths" type="boolean" line="296"/>
            <javadoc line="296">
                True if paths in the selection should be expanded.                
            </javadoc>
            <declaration name="settingUI" type="boolean" line="301"/>
            <javadoc line="301">
                This is set to true for the life of the &lt;code&gt;setUI&lt;/code&gt; call.                
            </javadoc>
            <declaration name="dragEnabled" type="boolean" line="306"/>
            <javadoc line="306">
                If true, mouse presses on selections initiate a drag operation.                
            </javadoc>
            <declaration name="dropMode" type="DropMode" line="309"/>
            <javadoc line="309">
                The drop mode for this component.                
            </javadoc>
            <declaration name="dropLocation" type="DropLocation" line="314"/>
            <javadoc line="314">
                The drop location.                
            </javadoc>
            <class name="DropLocation" line="319">
                <extends class="TransferHandler.DropLocation"/>
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <javadoc line="319">
                    A subclass of &lt;code&gt;TransferHandler.DropLocation&lt;/code&gt; representing
                      a drop location for a &lt;code&gt;JTree&lt;/code&gt;.                    
                    <see>
                        #getDropLocation                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="path" type="TreePath" line="327"/>
                <declaration name="index" type="int" line="328"/>
                <method name="DropLocation" type="constructor" line="330">
                    <params>
                        <param name="p" type="Point"/>
                        <param name="path" type="TreePath"/>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="336">
                    Returns the index where the dropped data should be inserted
                      with respect to the path returned by &lt;code&gt;getPath()&lt;/code&gt;.
                      &lt;p&gt;
                      For drop modes &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt; and
                      &lt;code&gt;DropMode.ON&lt;/code&gt;, this index is unimportant (and it will
                      always be &lt;code&gt;-1&lt;/code&gt;) as the only interesting data is the
                      path over which the drop operation occurred.
                      &lt;p&gt;
                      For drop mode &lt;code&gt;DropMode.INSERT&lt;/code&gt;, this index
                      indicates the index at which the data should be inserted into
                      the parent path represented by &lt;code&gt;getPath()&lt;/code&gt;.
                      &lt;code&gt;-1&lt;/code&gt; indicates that the drop occurred over the
                      parent itself, and in most cases should be treated as inserting
                      into either the beginning or the end of the parent&apos;s list of
                      children.
                      &lt;p&gt;
                      For &lt;code&gt;DropMode.ON_OR_INSERT&lt;/code&gt;, this value will be
                      an insert index, as described above, or &lt;code&gt;-1&lt;/code&gt; if
                      the drop occurred over the path itself.                    
                    <return>
                        the child index                        
                    </return>
                    <see>
                        #getPath                        
                    </see>
                </javadoc>
                <method name="getChildIndex" type="int" line="360"/>
                <javadoc line="364">
                    Returns the path where dropped data should be placed in the
                      tree.
                      &lt;p&gt;
                      Interpretation of this value depends on the drop mode set on the
                      component. If the drop mode is &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;
                      or &lt;code&gt;DropMode.ON&lt;/code&gt;, the return value is the path in the
                      tree over which the data has been (or will be) dropped.
                      &lt;code&gt;null&lt;/code&gt; indicates that the drop is over empty space,
                      not associated with a particular path.
                      &lt;p&gt;
                      If the drop mode is &lt;code&gt;DropMode.INSERT&lt;/code&gt;, the return value
                      refers to the path that should become the parent of the new data,
                      in which case &lt;code&gt;getChildIndex()&lt;/code&gt; indicates where the
                      new item should be inserted into this parent path. A
                      &lt;code&gt;null&lt;/code&gt; path indicates that no parent path has been
                      determined, which can happen for multiple reasons:
                      &lt;ul&gt;
                      &lt;li&gt;The tree has no model
                      &lt;li&gt;There is no root in the tree
                      &lt;li&gt;The root is collapsed
                      &lt;li&gt;The root is a leaf node
                      &lt;/ul&gt;
                      It is up to the developer to decide if and how they wish to handle
                      the &lt;code&gt;null&lt;/code&gt; case.
                      &lt;p&gt;
                      If the drop mode is &lt;code&gt;DropMode.ON_OR_INSERT&lt;/code&gt;,
                      &lt;code&gt;getChildIndex&lt;/code&gt; can be used to determine whether the
                      drop is on top of the path itself (&lt;code&gt;-1&lt;/code&gt;) or the index
                      at which it should be inserted into the path (values other than
                      &lt;code&gt;-1&lt;/code&gt;).                    
                    <return>
                        the drop path                        
                    </return>
                    <see>
                        #getChildIndex                        
                    </see>
                </javadoc>
                <method name="getPath" type="TreePath" line="399"/>
                <javadoc line="403">
                    Returns a string representation of this drop location.
                      This method is intended to be used for debugging purposes,
                      and the content and format of the returned string may vary
                      between implementations.                    
                    <return>
                        a string representation of this drop location                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="411"/>
            </class>
            <declaration name="expandRow" type="int" line="419"/>
            <javadoc line="419">
                The row to expand during DnD.                
            </javadoc>
            <class name="TreeTimer" line="424">
                <extends class="Timer"/>
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <method name="TreeTimer" type="constructor" line="425"/>
                <method name="fireActionPerformed" type="void" line="430">
                    <params>
                        <param name="ae" type="ActionEvent"/>
                    </params>
                </method>
            </class>
            <declaration name="dropTimer" type="TreeTimer" line="435"/>
            <javadoc line="435">
                A timer to expand nodes during drop.                
            </javadoc>
            <declaration name="uiTreeExpansionListener" type="TreeExpansionListener" line="440"/>
            <javadoc line="440">
                When &lt;code&gt;addTreeExpansionListener&lt;/code&gt; is invoked,
                  and &lt;code&gt;settingUI&lt;/code&gt; is true, this ivar gets set to the passed in
                  &lt;code&gt;Listener&lt;/code&gt;. This listener is then notified first in
                  &lt;code&gt;fireTreeCollapsed&lt;/code&gt; and &lt;code&gt;fireTreeExpanded&lt;/code&gt;.
                  &lt;p&gt;This is an ugly workaround for a way to have the UI listener
                  get notified before other listeners.                
            </javadoc>
            <declaration name="TEMP_STACK_SIZE" type="int" line="450"/>
            <javadoc line="450">
                Max number of stacks to keep around.                
            </javadoc>
            <declaration name="CELL_RENDERER_PROPERTY" type="String" line="458"/>
            <javadoc line="458">
                Bound property name for &lt;code&gt;cellRenderer&lt;/code&gt;.                
            </javadoc>
            <declaration name="TREE_MODEL_PROPERTY" type="String" line="460"/>
            <javadoc line="460">
                Bound property name for &lt;code&gt;treeModel&lt;/code&gt;.                
            </javadoc>
            <declaration name="ROOT_VISIBLE_PROPERTY" type="String" line="462"/>
            <javadoc line="462">
                Bound property name for &lt;code&gt;rootVisible&lt;/code&gt;.                
            </javadoc>
            <declaration name="SHOWS_ROOT_HANDLES_PROPERTY" type="String" line="464"/>
            <javadoc line="464">
                Bound property name for &lt;code&gt;showsRootHandles&lt;/code&gt;.                
            </javadoc>
            <declaration name="ROW_HEIGHT_PROPERTY" type="String" line="466"/>
            <javadoc line="466">
                Bound property name for &lt;code&gt;rowHeight&lt;/code&gt;.                
            </javadoc>
            <declaration name="CELL_EDITOR_PROPERTY" type="String" line="468"/>
            <javadoc line="468">
                Bound property name for &lt;code&gt;cellEditor&lt;/code&gt;.                
            </javadoc>
            <declaration name="EDITABLE_PROPERTY" type="String" line="470"/>
            <javadoc line="470">
                Bound property name for &lt;code&gt;editable&lt;/code&gt;.                
            </javadoc>
            <declaration name="LARGE_MODEL_PROPERTY" type="String" line="472"/>
            <javadoc line="472">
                Bound property name for &lt;code&gt;largeModel&lt;/code&gt;.                
            </javadoc>
            <declaration name="SELECTION_MODEL_PROPERTY" type="String" line="474"/>
            <javadoc line="474">
                Bound property name for selectionModel.                
            </javadoc>
            <declaration name="VISIBLE_ROW_COUNT_PROPERTY" type="String" line="476"/>
            <javadoc line="476">
                Bound property name for &lt;code&gt;visibleRowCount&lt;/code&gt;.                
            </javadoc>
            <declaration name="INVOKES_STOP_CELL_EDITING_PROPERTY" type="String" line="478"/>
            <javadoc line="478">
                Bound property name for &lt;code&gt;messagesStopCellEditing&lt;/code&gt;.                
            </javadoc>
            <declaration name="SCROLLS_ON_EXPAND_PROPERTY" type="String" line="480"/>
            <javadoc line="480">
                Bound property name for &lt;code&gt;scrollsOnExpand&lt;/code&gt;.                
            </javadoc>
            <declaration name="TOGGLE_CLICK_COUNT_PROPERTY" type="String" line="482"/>
            <javadoc line="482">
                Bound property name for &lt;code&gt;toggleClickCount&lt;/code&gt;.                
            </javadoc>
            <declaration name="LEAD_SELECTION_PATH_PROPERTY" type="String" line="484"/>
            <javadoc line="484">
                Bound property name for &lt;code&gt;leadSelectionPath&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="ANCHOR_SELECTION_PATH_PROPERTY" type="String" line="487"/>
            <javadoc line="487">
                Bound property name for anchor selection path.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <declaration name="EXPANDS_SELECTED_PATHS_PROPERTY" type="String" line="490"/>
            <javadoc line="490">
                Bound property name for expands selected paths property                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <javadoc line="495">
                Creates and returns a sample &lt;code&gt;TreeModel&lt;/code&gt;.
                  Used primarily for beanbuilders to show something interesting.                
                <return>
                    the default <code>TreeModel</code>                    
                </return>
            </javadoc>
            <method name="getDefaultTreeModel" type="TreeModel" line="501">
                <declaration name="root" type="DefaultMutableTreeNode" line="502"/>
                <declaration name="parent" type="DefaultMutableTreeNode" line="503"/>
            </method>
            <javadoc line="528">
                Returns a &lt;code&gt;TreeModel&lt;/code&gt; wrapping the specified object.
                  If the object is:&lt;ul&gt;
                  &lt;li&gt;an array of &lt;code&gt;Object&lt;/code&gt;s,
                  &lt;li&gt;a &lt;code&gt;Hashtable&lt;/code&gt;, or
                  &lt;li&gt;a &lt;code&gt;Vector&lt;/code&gt;
                  &lt;/ul&gt;then a new root node is created with each of the incoming
                  objects as children. Otherwise, a new root is created with
                  a value of {@code &quot;root&quot;}.                
                <param>
                    value  the <code>Object</code> used as the foundation for
                      the <code>TreeModel</code>                    
                </param>
                <return>
                    a <code>TreeModel</code> wrapping the specified object                    
                </return>
            </javadoc>
            <method name="createTreeModel" type="TreeModel" line="542">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="root" type="DefaultMutableTreeNode" line="543"/>
                <scope line="546"/>
                <scope line="550"/>
            </method>
            <javadoc line="556">
                Returns a &lt;code&gt;JTree&lt;/code&gt; with a sample model.
                  The default model used by the tree defines a leaf node as any node
                  without children.                
                <see>
                    DefaultTreeModel#asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="JTree" type="constructor" line="563"/>
            <javadoc line="567">
                Returns a &lt;code&gt;JTree&lt;/code&gt; with each element of the
                  specified array as the
                  child of a new root node which is not displayed.
                  By default, the tree defines a leaf node as any node without
                  children.                
                <param>
                    value  an array of <code>Object</code>s                    
                </param>
                <see>
                    DefaultTreeModel#asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="JTree" type="constructor" line="577">
                <params>
                    <param name="value" type="Object[]"/>
                </params>
            </method>
            <javadoc line="584">
                Returns a &lt;code&gt;JTree&lt;/code&gt; with each element of the specified
                  &lt;code&gt;Vector&lt;/code&gt; as the
                  child of a new root node which is not displayed. By default, the
                  tree defines a leaf node as any node without children.                
                <param>
                    value  a <code>Vector</code>                    
                </param>
                <see>
                    DefaultTreeModel#asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="JTree" type="constructor" line="593">
                <params>
                    <param name="value" type="Vector<?>"/>
                </params>
            </method>
            <javadoc line="600">
                Returns a &lt;code&gt;JTree&lt;/code&gt; created from a &lt;code&gt;Hashtable&lt;/code&gt;
                  which does not display with root.
                  Each value-half of the key/value pairs in the &lt;code&gt;HashTable&lt;/code&gt;
                  becomes a child of the new root node. By default, the tree defines
                  a leaf node as any node without children.                
                <param>
                    value  a <code>Hashtable</code>                    
                </param>
                <see>
                    DefaultTreeModel#asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="JTree" type="constructor" line="610">
                <params>
                    <param name="value" type="Hashtable<?,?>"/>
                </params>
            </method>
            <javadoc line="617">
                Returns a &lt;code&gt;JTree&lt;/code&gt; with the specified
                  &lt;code&gt;TreeNode&lt;/code&gt; as its root,
                  which displays the root node.
                  By default, the tree defines a leaf node as any node without children.                
                <param>
                    root  a <code>TreeNode</code> object                    
                </param>
                <see>
                    DefaultTreeModel#asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="JTree" type="constructor" line="626">
                <params>
                    <param name="root" type="TreeNode"/>
                </params>
            </method>
            <javadoc line="630">
                Returns a &lt;code&gt;JTree&lt;/code&gt; with the specified &lt;code&gt;TreeNode&lt;/code&gt;
                  as its root, which
                  displays the root node and which decides whether a node is a
                  leaf node in the specified manner.                
                <param>
                    root  a <code>TreeNode</code> object                    
                </param>
                <param>
                    asksAllowsChildren  if false, any node without children is a
                      leaf node; if true, only nodes that do not allow
                      children are leaf nodes                    
                </param>
                <see>
                    DefaultTreeModel#asksAllowsChildren                    
                </see>
            </javadoc>
            <method name="JTree" type="constructor" line="642">
                <params>
                    <param name="root" type="TreeNode"/>
                    <param name="asksAllowsChildren" type="boolean"/>
                </params>
            </method>
            <javadoc line="646">
                Returns an instance of &lt;code&gt;JTree&lt;/code&gt; which displays the root node
                  -- the tree is created using the specified data model.                
                <param>
                    newModel  the <code>TreeModel</code> to use as the data model                    
                </param>
            </javadoc>
            <method name="JTree" type="constructor" line="653">
                <params>
                    <param name="newModel" type="TreeModel"/>
                </params>
            </method>
            <javadoc line="671">
                Returns the L&amp;F object that renders this component.                
                <return>
                    the <code>TreeUI</code> object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="TreeUI" line="676"/>
            <javadoc line="680">
                Sets the L&amp;F object that renders this component.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    ui  the <code>TreeUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="693">
                <params>
                    <param name="ui" type="TreeUI"/>
                </params>
                <scope line="694">
                    <scope line="697"/>
                    <scope line="700"/>
                </scope>
            </method>
            <javadoc line="706">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the L&amp;F has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="713"/>
            <javadoc line="721">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "TreeUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="728"/>
            <javadoc line="733">
                Returns the current &lt;code&gt;TreeCellRenderer&lt;/code&gt;
                  that is rendering each cell.                
                <return>
                    the <code>TreeCellRenderer</code> that is rendering each cell                    
                </return>
            </javadoc>
            <method name="getCellRenderer" type="TreeCellRenderer" line="739"/>
            <javadoc line="743">
                Sets the &lt;code&gt;TreeCellRenderer&lt;/code&gt; that will be used to
                  draw each cell.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    x  the <code>TreeCellRenderer</code> that is to render each cell                    
                </param>
                <beaninfo>
                    bound: true
                      description: The TreeCellRenderer that will be used to draw
                      each cell.                    
                </beaninfo>
            </javadoc>
            <method name="setCellRenderer" type="void" line="755">
                <params>
                    <param name="x" type="TreeCellRenderer"/>
                </params>
                <declaration name="oldValue" type="TreeCellRenderer" line="756"/>
            </method>
            <javadoc line="763">
                Determines whether the tree is editable. Fires a property
                  change event if the new setting is different from the existing
                  setting.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    flag  a boolean value, true if the tree is editable                    
                </param>
                <beaninfo>
                    bound: true
                      description: Whether the tree is editable.                    
                </beaninfo>
            </javadoc>
            <method name="setEditable" type="void" line="775">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="776"/>
                <scope line="780"/>
            </method>
            <javadoc line="788">
                Returns true if the tree is editable.                
                <return>
                    true if the tree is editable                    
                </return>
            </javadoc>
            <method name="isEditable" type="boolean" line="793"/>
            <javadoc line="797">
                Sets the cell editor.  A &lt;code&gt;null&lt;/code&gt; value implies that the
                  tree cannot be edited.  If this represents a change in the
                  &lt;code&gt;cellEditor&lt;/code&gt;, the &lt;code&gt;propertyChange&lt;/code&gt;
                  method is invoked on all listeners.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    cellEditor the <code>TreeCellEditor</code> to use                    
                </param>
                <beaninfo>
                    bound: true
                      description: The cell editor. A null value implies the tree
                      cannot be edited.                    
                </beaninfo>
            </javadoc>
            <method name="setCellEditor" type="void" line="811">
                <params>
                    <param name="cellEditor" type="TreeCellEditor"/>
                </params>
                <declaration name="oldEditor" type="TreeCellEditor" line="812"/>
            </method>
            <javadoc line="819">
                Returns the editor used to edit entries in the tree.                
                <return>
                    the <code>TreeCellEditor</code> in use,
                      or <code>null</code> if the tree cannot be edited                    
                </return>
            </javadoc>
            <method name="getCellEditor" type="TreeCellEditor" line="825"/>
            <javadoc line="829">
                Returns the &lt;code&gt;TreeModel&lt;/code&gt; that is providing the data.                
                <return>
                    the <code>TreeModel</code> that is providing the data                    
                </return>
            </javadoc>
            <method name="getModel" type="TreeModel" line="834"/>
            <javadoc line="838">
                Sets the &lt;code&gt;TreeModel&lt;/code&gt; that will provide the data.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newModel the <code>TreeModel</code> that is to provide the data                    
                </param>
                <beaninfo>
                    bound: true
                      description: The TreeModel that will provide the data.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="848">
                <params>
                    <param name="newModel" type="TreeModel"/>
                </params>
                <comment line="873">
                    Mark the root as expanded, if it isn&apos;t a leaf.                    
                </comment>
                <declaration name="oldModel" type="TreeModel" line="851"/>
                <scope line="856">
                    <scope line="857"/>
                    <scope line="860"/>
                </scope>
                <scope line="867">
                    <scope line="874"/>
                </scope>
            </method>
            <javadoc line="883">
                Returns true if the root node of the tree is displayed.                
                <return>
                    true if the root node of the tree is displayed                    
                </return>
                <see>
                    #rootVisible                    
                </see>
            </javadoc>
            <method name="isRootVisible" type="boolean" line="889"/>
            <javadoc line="893">
                Determines whether or not the root node from
                  the &lt;code&gt;TreeModel&lt;/code&gt; is visible.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    rootVisible true if the root node of the tree is to be displayed                    
                </param>
                <see>
                    #rootVisible                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether or not the root node
                      from the TreeModel is visible.                    
                </beaninfo>
            </javadoc>
            <method name="setRootVisible" type="void" line="906">
                <params>
                    <param name="rootVisible" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="907"/>
                <scope line="911"/>
            </method>
            <javadoc line="916">
                Sets the value of the &lt;code&gt;showsRootHandles&lt;/code&gt; property,
                  which specifies whether the node handles should be displayed.
                  The default value of this property depends on the constructor
                  used to create the &lt;code&gt;JTree&lt;/code&gt;.
                  Some look and feels might not support handles;
                  they will ignore this property.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newValue <code>true</code> if root handles should be displayed;
                      otherwise, <code>false</code>                    
                </param>
                <see>
                    #showsRootHandles                    
                </see>
                <see>
                    #getShowsRootHandles                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether the node handles are to be
                      displayed.                    
                </beaninfo>
            </javadoc>
            <method name="setShowsRootHandles" type="void" line="935">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="936"/>
                <declaration name="model" type="TreeModel" line="937"/>
                <scope line="943"/>
            </method>
            <javadoc line="949">
                Returns the value of the &lt;code&gt;showsRootHandles&lt;/code&gt; property.                
                <return>
                    the value of the <code>showsRootHandles</code> property                    
                </return>
                <see>
                    #showsRootHandles                    
                </see>
            </javadoc>
            <method name="getShowsRootHandles" type="boolean" line="956"/>
            <javadoc line="960">
                Sets the height of each cell, in pixels.  If the specified value
                  is less than or equal to zero the current cell renderer is
                  queried for each row&apos;s height.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    rowHeight the height of each cell, in pixels                    
                </param>
                <beaninfo>
                    bound: true
                      description: The height of each cell.                    
                </beaninfo>
            </javadoc>
            <method name="setRowHeight" type="void" line="973">
                <params>
                    <param name="rowHeight" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="974"/>
            </method>
            <javadoc line="982">
                Returns the height of each row.  If the returned value is less than
                  or equal to 0 the height for each row is determined by the
                  renderer.                
            </javadoc>
            <method name="getRowHeight" type="int" line="989"/>
            <javadoc line="993">
                Returns true if the height of each display row is a fixed size.                
                <return>
                    true if the height of each row is a fixed size                    
                </return>
            </javadoc>
            <method name="isFixedRowHeight" type="boolean" line="999"/>
            <javadoc line="1003">
                Specifies whether the UI should use a large model.
                  (Not all UIs will implement this.) Fires a property change
                  for the LARGE_MODEL_PROPERTY.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newValue true to suggest a large model to the UI                    
                </param>
                <see>
                    #largeModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: Whether the UI should use a
                      large model.                    
                </beaninfo>
            </javadoc>
            <method name="setLargeModel" type="void" line="1017">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1018"/>
            </method>
            <javadoc line="1024">
                Returns true if the tree is configured for a large model.                
                <return>
                    true if a large model is suggested                    
                </return>
                <see>
                    #largeModel                    
                </see>
            </javadoc>
            <method name="isLargeModel" type="boolean" line="1030"/>
            <javadoc line="1034">
                Determines what happens when editing is interrupted by selecting
                  another node in the tree, a change in the tree&apos;s data, or by some
                  other means. Setting this property to &lt;code&gt;true&lt;/code&gt; causes the
                  changes to be automatically saved when editing is interrupted.
                  &lt;p&gt;
                  Fires a property change for the INVOKES_STOP_CELL_EDITING_PROPERTY.                
                <param>
                    newValue true means that <code>stopCellEditing</code> is invoked
                      when editing is interrupted, and data is saved; false means that
                      <code>cancelCellEditing</code> is invoked, and changes are lost                    
                </param>
                <beaninfo>
                    bound: true
                      description: Determines what happens when editing is interrupted,
                      selecting another node in the tree, a change in the
                      tree's data, or some other means.                    
                </beaninfo>
            </javadoc>
            <method name="setInvokesStopCellEditing" type="void" line="1051">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1052"/>
            </method>
            <javadoc line="1059">
                Returns the indicator that tells what happens when editing is
                  interrupted.                
                <return>
                    the indicator that tells what happens when editing is
                      interrupted                    
                </return>
                <see>
                    #setInvokesStopCellEditing                    
                </see>
            </javadoc>
            <method name="getInvokesStopCellEditing" type="boolean" line="1067"/>
            <javadoc line="1071">
                Sets the &lt;code&gt;scrollsOnExpand&lt;/code&gt; property,
                  which determines whether the
                  tree might scroll to show previously hidden children.
                  If this property is &lt;code&gt;true&lt;/code&gt; (the default),
                  when a node expands
                  the tree can use scrolling to make
                  the maximum possible number of the node&apos;s descendants visible.
                  In some look and feels, trees might not need to scroll when expanded;
                  those look and feels will ignore this property.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newValue <code>false</code> to disable scrolling on expansion;
                      <code>true</code> to enable it                    
                </param>
                <see>
                    #getScrollsOnExpand                    
                </see>
                <beaninfo>
                    bound: true
                      description: Indicates if a node descendant should be scrolled when expanded.                    
                </beaninfo>
            </javadoc>
            <method name="setScrollsOnExpand" type="void" line="1092">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1093"/>
            </method>
            <javadoc line="1101">
                Returns the value of the &lt;code&gt;scrollsOnExpand&lt;/code&gt; property.                
                <return>
                    the value of the <code>scrollsOnExpand</code> property                    
                </return>
            </javadoc>
            <method name="getScrollsOnExpand" type="boolean" line="1106"/>
            <javadoc line="1110">
                Sets the number of mouse clicks before a node will expand or close.
                  The default is two.
                  &lt;p&gt;
                  This is a bound property.                
                <since>
                    1.3                    
                </since>
                <beaninfo>
                    bound: true
                      description: Number of clicks before a node will expand/collapse.                    
                </beaninfo>
            </javadoc>
            <method name="setToggleClickCount" type="void" line="1121">
                <params>
                    <param name="clickCount" type="int"/>
                </params>
                <declaration name="oldCount" type="int" line="1122"/>
            </method>
            <javadoc line="1129">
                Returns the number of mouse clicks needed to expand or close a node.                
                <return>
                    number of mouse clicks before node is expanded                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getToggleClickCount" type="int" line="1135"/>
            <javadoc line="1139">
                Configures the &lt;code&gt;expandsSelectedPaths&lt;/code&gt; property. If
                  true, any time the selection is changed, either via the
                  &lt;code&gt;TreeSelectionModel&lt;/code&gt;, or the cover methods provided by
                  &lt;code&gt;JTree&lt;/code&gt;, the &lt;code&gt;TreePath&lt;/code&gt;s parents will be
                  expanded to make them visible (visible meaning the parent path is
                  expanded, not necessarily in the visible rectangle of the
                  &lt;code&gt;JTree&lt;/code&gt;). If false, when the selection
                  changes the nodes parent is not made visible (all its parents expanded).
                  This is useful if you wish to have your selection model maintain paths
                  that are not always visible (all parents expanded).
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newValue the new value for <code>expandsSelectedPaths</code>                    
                </param>
                <since>
                    1.3                    
                </since>
                <beaninfo>
                    bound: true
                      description: Indicates whether changes to the selection should make
                      the parent of the path visible.                    
                </beaninfo>
            </javadoc>
            <method name="setExpandsSelectedPaths" type="void" line="1161">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1162"/>
            </method>
            <javadoc line="1169">
                Returns the &lt;code&gt;expandsSelectedPaths&lt;/code&gt; property.                
                <return>
                    true if selection changes result in the parent path being
                      expanded                    
                </return>
                <since>
                    1.3                    
                </since>
                <see>
                    #setExpandsSelectedPaths                    
                </see>
            </javadoc>
            <method name="getExpandsSelectedPaths" type="boolean" line="1176"/>
            <javadoc line="1180">
                Turns on or off automatic drag handling. In order to enable automatic
                  drag handling, this property should be set to {@code true}, and the
                  tree&apos;s {@code TransferHandler} needs to be {@code non-null}.
                  The default value of the {@code dragEnabled} property is {@code false}.
                  &lt;p&gt;
                  The job of honoring this property, and recognizing a user drag gesture,
                  lies with the look and feel implementation, and in particular, the tree&apos;s{@code TreeUI}. When automatic drag handling is enabled, most look and
                  feels (including those that subclass {@code BasicLookAndFeel}) begin a
                  drag and drop operation whenever the user presses the mouse button over
                  an item and then moves the mouse a few pixels. Setting this property to{@code true} can therefore have a subtle effect on how selections behave.
                  &lt;p&gt;
                  If a look and feel is used that ignores this property, you can still
                  begin a drag and drop operation by calling {@code exportAsDrag} on the
                  tree&apos;s {@code TransferHandler}.                
                <param>
                    b whether or not to enable automatic drag handling                    
                </param>
                <exception>
                    HeadlessException if
                      <code>b</code> is <code>true</code> and
                      <code>GraphicsEnvironment.isHeadless()</code>
                      returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #getDragEnabled                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    description: determines whether automatic drag handling is enabled
                      bound: false                    
                </beaninfo>
            </javadoc>
            <method name="setDragEnabled" type="void" line="1213">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1214"/>
            </method>
            <javadoc line="1220">
                Returns whether or not automatic drag handling is enabled.                
                <return>
                    the value of the {@code dragEnabled} property                    
                </return>
                <see>
                    #setDragEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragEnabled" type="boolean" line="1227"/>
            <javadoc line="1231">
                Sets the drop mode for this component. For backward compatibility,
                  the default for this property is &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;.
                  Usage of one of the other modes is recommended, however, for an
                  improved user experience. &lt;code&gt;DropMode.ON&lt;/code&gt;, for instance,
                  offers similar behavior of showing items as selected, but does so without
                  affecting the actual selection in the tree.
                  &lt;p&gt;
                  &lt;code&gt;JTree&lt;/code&gt; supports the following drop modes:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON_OR_INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  The drop mode is only meaningful if this component has a
                  &lt;code&gt;TransferHandler&lt;/code&gt; that accepts drops.                
                <param>
                    dropMode the drop mode to use                    
                </param>
                <throws>
                    IllegalArgumentException if the drop mode is unsupported
                      or <code>null</code>                    
                </throws>
                <see>
                    #getDropMode                    
                </see>
                <see>
                    #getDropLocation                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDropMode" type="void" line="1259">
                <params>
                    <param name="dropMode" type="DropMode"/>
                </params>
                <scope line="1260"/>
            </method>
            <javadoc line="1274">
                Returns the drop mode for this component.                
                <return>
                    the drop mode for this component                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropMode" type="DropMode" line="1281"/>
            <javadoc line="1285">
                Calculates a drop location in this component, representing where a
                  drop at the given point should insert data.                
                <param>
                    p the point to calculate a drop location for                    
                </param>
                <return>
                    the drop location, or <code>null</code>                    
                </return>
            </javadoc>
            <method name="dropLocationForPoint" type="DropLocation" line="1292">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <declaration name="location" type="DropLocation" line="1293"/>
                <declaration name="row" type="int" line="1295"/>
                <declaration name="bounds" type="Rectangle" line="1296"/>
                <declaration name="model" type="TreeModel" line="1297"/>
                <declaration name="root" type="Object" line="1298"/>
                <declaration name="rootPath" type="TreePath" line="1299"/>
                <declaration name="child" type="TreePath" line="1301"/>
                <declaration name="parent" type="TreePath" line="1302"/>
                <declaration name="outside" type="boolean" line="1303"/>
                <scope line="1310"/>
                <scope line="1312"/>
                <scope line="1319">
                    <scope line="1320"/>
                    <scope line="1322"/>
                </scope>
                <declaration name="checkOn" type="boolean" line="1329"/>
                <declaration name="section" type="Section" line="1332"/>
                <scope line="1333"/>
                <scope line="1336">
                    <declaration name="index" type="int" line="1337"/>
                    <scope line="1338">
                        <scope line="1339"/>
                        <scope line="1341"/>
                    </scope>
                </scope>
                <scope line="1352"/>
                <scope line="1358"/>
                <scope line="1362"/>
                <scope line="1364"/>
                <scope line="1373"/>
                <scope line="1377">
                    <scope line="1378"/>
                </scope>
            </method>
            <javadoc line="1387">
                Called to set or clear the drop location during a DnD operation.
                  In some cases, the component may need to use it&apos;s internal selection
                  temporarily to indicate the drop location. To help facilitate this,
                  this method returns and accepts as a parameter a state object.
                  This state object can be used to store, and later restore, the selection
                  state. Whatever this method returns will be passed back to it in
                  future calls, as the state parameter. If it wants the DnD system to
                  continue storing the same state, it must pass it back every time.
                  Here&apos;s how this is used:
                  &lt;p&gt;
                  Let&apos;s say that on the first call to this method the component decides
                  to save some state (because it is about to use the selection to show
                  a drop index). It can return a state object to the caller encapsulating
                  any saved selection state. On a second call, let&apos;s say the drop location
                  is being changed to something else. The component doesn&apos;t need to
                  restore anything yet, so it simply passes back the same state object
                  to have the DnD system continue storing it. Finally, let&apos;s say this
                  method is messaged with &lt;code&gt;null&lt;/code&gt;. This means DnD
                  is finished with this component for now, meaning it should restore
                  state. At this point, it can use the state parameter to restore
                  said state, and of course return &lt;code&gt;null&lt;/code&gt; since there&apos;s
                  no longer anything to store.                
                <param>
                    location the drop location (as calculated by
                      <code>dropLocationForPoint</code>) or <code>null</code>
                      if there's no longer a valid drop location                    
                </param>
                <param>
                    state the state object saved earlier for this component,
                      or <code>null</code>                    
                </param>
                <param>
                    forDrop whether or not the method is being called because an
                      actual drop occurred                    
                </param>
                <return>
                    any saved state for this component, or <code>null</code> if none                    
                </return>
            </javadoc>
            <method name="setDropLocation" type="Object" line="1422">
                <params>
                    <param name="location" type="TransferHandler.DropLocation"/>
                    <param name="state" type="Object"/>
                    <param name="forDrop" type="boolean"/>
                </params>
                <declaration name="retVal" type="Object" line="1424"/>
                <declaration name="treeLocation" type="DropLocation" line="1425"/>
                <scope line="1427">
                    <scope line="1428">
                        <scope line="1429"/>
                    </scope>
                    <scope line="1434">
                        <scope line="1435">
                            <declaration name="paths" type="TreePath[]" line="1436"/>
                            <scope line="1437"/>
                        </scope>
                        <scope line="1443"/>
                    </scope>
                </scope>
                <declaration name="old" type="DropLocation" line="1451"/>
            </method>
            <javadoc line="1458">
                Called to indicate to this component that DnD is done.
                  Allows for us to cancel the expand timer.                
            </javadoc>
            <method name="dndDone" type="void" line="1462"/>
            <javadoc line="1467">
                Returns the location that this component should visually indicate
                  as the drop location during a DnD operation over the component,
                  or {@code null} if no location is to currently be shown.
                  &lt;p&gt;
                  This method is not meant for querying the drop location
                  from a {@code TransferHandler}, as the drop location is only
                  set after the {@code TransferHandler}&apos;s &lt;code&gt;canImport&lt;/code&gt;
                  has returned and has allowed for the location to be shown.
                  &lt;p&gt;
                  When this property changes, a property change event with
                  name &quot;dropLocation&quot; is fired by the component.                
                <return>
                    the drop location                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <see>
                    TransferHandler#canImport(TransferHandler.TransferSupport)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropLocation" type="DropLocation" line="1485"/>
            <method name="startDropTimer" type="void" line="1489">
                <scope line="1490"/>
            </method>
            <method name="cancelDropTimer" type="void" line="1496">
                <scope line="1497"/>
            </method>
            <javadoc line="1503">
                Returns &lt;code&gt;isEditable&lt;/code&gt;. This is invoked from the UI before
                  editing begins to insure that the given path can be edited. This
                  is provided as an entry point for subclassers to add filtered
                  editing without having to resort to creating a new editor.                
                <return>
                    true if every parent node and the node itself is editable                    
                </return>
                <see>
                    #isEditable                    
                </see>
            </javadoc>
            <method name="isPathEditable" type="boolean" line="1512">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="1516">
                Overrides &lt;code&gt;JComponent&lt;/code&gt;&apos;s &lt;code&gt;getToolTipText&lt;/code&gt;
                  method in order to allow
                  renderer&apos;s tips to be used if it has text set.
                  &lt;p&gt;
                  NOTE: For &lt;code&gt;JTree&lt;/code&gt; to properly display tooltips of its
                  renderers, &lt;code&gt;JTree&lt;/code&gt; must be a registered component with the
                  &lt;code&gt;ToolTipManager&lt;/code&gt;.  This can be done by invoking
                  &lt;code&gt;ToolTipManager.sharedInstance().registerComponent(tree)&lt;/code&gt;.
                  This is not done automatically!                
                <param>
                    event the <code>MouseEvent</code> that initiated the
                      <code>ToolTip</code> display                    
                </param>
                <return>
                    a string containing the  tooltip or <code>null</code>
                      if <code>event</code> is null                    
                </return>
            </javadoc>
            <method name="getToolTipText" type="String" line="1532">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <comment line="1568">
                    No tip from the renderer get our own tip                    
                </comment>
                <declaration name="tip" type="String" line="1533"/>
                <scope line="1535">
                    <declaration name="p" type="Point" line="1536"/>
                    <declaration name="selRow" type="int" line="1537"/>
                    <declaration name="r" type="TreeCellRenderer" line="1538"/>
                    <scope line="1540">
                        <declaration name="path" type="TreePath" line="1541"/>
                        <declaration name="lastPath" type="Object" line="1542"/>
                        <declaration name="rComponent" type="Component" line="1543"/>
                        <scope line="1548">
                            <declaration name="newEvent" type="MouseEvent" line="1549"/>
                            <declaration name="pathBounds" type="Rectangle" line="1550"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1568"/>
            </method>
            <javadoc line="1574">
                Called by the renderers to convert the specified value to
                  text. This implementation returns &lt;code&gt;value.toString&lt;/code&gt;, ignoring
                  all other arguments. To control the conversion, subclass this
                  method and use any of the arguments you need.                
                <param>
                    value the <code>Object</code> to convert to text                    
                </param>
                <param>
                    selected true if the node is selected                    
                </param>
                <param>
                    expanded true if the node is expanded                    
                </param>
                <param>
                    leaf  true if the node is a leaf node                    
                </param>
                <param>
                    row  an integer specifying the node's display row, where 0 is
                      the first row in the display                    
                </param>
                <param>
                    hasFocus true if the node has the focus                    
                </param>
                <return>
                    the <code>String</code> representation of the node's value                    
                </return>
            </javadoc>
            <method name="convertValueToText" type="String" line="1591">
                <params>
                    <param name="value" type="Object"/>
                    <param name="selected" type="boolean"/>
                    <param name="expanded" type="boolean"/>
                    <param name="leaf" type="boolean"/>
                    <param name="row" type="int"/>
                    <param name="hasFocus" type="boolean"/>
                </params>
                <scope line="1592">
                    <declaration name="sValue" type="String" line="1593"/>
                    <scope line="1594"/>
                </scope>
            </method>
            <javadoc line="1606">
                Returns the number of viewable nodes. A node is viewable if all of its
                  parents are expanded. The root is only included in this count if{@code isRootVisible()} is {@code true}. This returns {@code 0} if
                  the UI has not been set.                
                <return>
                    the number of viewable nodes                    
                </return>
            </javadoc>
            <method name="getRowCount" type="int" line="1614">
                <declaration name="tree" type="TreeUI" line="1615"/>
            </method>
            <javadoc line="1622">
                Selects the node identified by the specified path. If any
                  component of the path is hidden (under a collapsed node), and
                  &lt;code&gt;getExpandsSelectedPaths&lt;/code&gt; is true it is
                  exposed (made viewable).                
                <param>
                    path the <code>TreePath</code> specifying the node to select                    
                </param>
            </javadoc>
            <method name="setSelectionPath" type="void" line="1630">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="1634">
                Selects the nodes identified by the specified array of paths.
                  If any component in any of the paths is hidden (under a collapsed
                  node), and &lt;code&gt;getExpandsSelectedPaths&lt;/code&gt; is true
                  it is exposed (made viewable).                
                <param>
                    paths an array of <code>TreePath</code> objects that specifies
                      the nodes to select                    
                </param>
            </javadoc>
            <method name="setSelectionPaths" type="void" line="1643">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
            </method>
            <javadoc line="1647">
                Sets the path identifies as the lead. The lead may not be selected.
                  The lead is not maintained by &lt;code&gt;JTree&lt;/code&gt;,
                  rather the UI will update it.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newPath  the new lead path                    
                </param>
                <since>
                    1.3                    
                </since>
                <beaninfo>
                    bound: true
                      description: Lead selection path                    
                </beaninfo>
            </javadoc>
            <method name="setLeadSelectionPath" type="void" line="1660">
                <params>
                    <param name="newPath" type="TreePath"/>
                </params>
                <declaration name="oldValue" type="TreePath" line="1661"/>
            </method>
            <javadoc line="1667">
                Sets the path identified as the anchor.
                  The anchor is not maintained by &lt;code&gt;JTree&lt;/code&gt;, rather the UI will
                  update it.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newPath  the new anchor path                    
                </param>
                <since>
                    1.3                    
                </since>
                <beaninfo>
                    bound: true
                      description: Anchor selection path                    
                </beaninfo>
            </javadoc>
            <method name="setAnchorSelectionPath" type="void" line="1680">
                <params>
                    <param name="newPath" type="TreePath"/>
                </params>
                <declaration name="oldValue" type="TreePath" line="1681"/>
            </method>
            <javadoc line="1687">
                Selects the node at the specified row in the display.                
                <param>
                    row  the row to select, where 0 is the first row in
                      the display                    
                </param>
            </javadoc>
            <method name="setSelectionRow" type="void" line="1693">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="rows" type="int[]" line="1694"/>
            </method>
            <javadoc line="1699">
                Selects the nodes corresponding to each of the specified rows
                  in the display. If a particular element of &lt;code&gt;rows&lt;/code&gt; is
                  &lt; 0 or &gt;= &lt;code&gt;getRowCount&lt;/code&gt;, it will be ignored.
                  If none of the elements
                  in &lt;code&gt;rows&lt;/code&gt; are valid rows, the selection will
                  be cleared. That is it will be as if &lt;code&gt;clearSelection&lt;/code&gt;
                  was invoked.                
                <param>
                    rows  an array of ints specifying the rows to select,
                      where 0 indicates the first row in the display                    
                </param>
            </javadoc>
            <method name="setSelectionRows" type="void" line="1711">
                <params>
                    <param name="rows" type="int[]"/>
                </params>
                <declaration name="ui" type="TreeUI" line="1712"/>
                <scope line="1714">
                    <declaration name="numRows" type="int" line="1715"/>
                    <declaration name="paths" type="TreePath[]" line="1716"/>
                    <scope line="1718"/>
                </scope>
            </method>
            <javadoc line="1725">
                Adds the node identified by the specified &lt;code&gt;TreePath&lt;/code&gt;
                  to the current selection. If any component of the path isn&apos;t
                  viewable, and &lt;code&gt;getExpandsSelectedPaths&lt;/code&gt; is true it is
                  made viewable.
                  &lt;p&gt;
                  Note that &lt;code&gt;JTree&lt;/code&gt; does not allow duplicate nodes to
                  exist as children under the same parent -- each sibling must be
                  a unique object.                
                <param>
                    path the <code>TreePath</code> to add                    
                </param>
            </javadoc>
            <method name="addSelectionPath" type="void" line="1737">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="1741">
                Adds each path in the array of paths to the current selection. If
                  any component of any of the paths isn&apos;t viewable and
                  &lt;code&gt;getExpandsSelectedPaths&lt;/code&gt; is true, it is
                  made viewable.
                  &lt;p&gt;
                  Note that &lt;code&gt;JTree&lt;/code&gt; does not allow duplicate nodes to
                  exist as children under the same parent -- each sibling must be
                  a unique object.                
                <param>
                    paths an array of <code>TreePath</code> objects that specifies
                      the nodes to add                    
                </param>
            </javadoc>
            <method name="addSelectionPaths" type="void" line="1754">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
            </method>
            <javadoc line="1758">
                Adds the path at the specified row to the current selection.                
                <param>
                    row  an integer specifying the row of the node to add,
                      where 0 is the first row in the display                    
                </param>
            </javadoc>
            <method name="addSelectionRow" type="void" line="1764">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="rows" type="int[]" line="1765"/>
            </method>
            <javadoc line="1770">
                Adds the paths at each of the specified rows to the current selection.                
                <param>
                    rows  an array of ints specifying the rows to add,
                      where 0 indicates the first row in the display                    
                </param>
            </javadoc>
            <method name="addSelectionRows" type="void" line="1776">
                <params>
                    <param name="rows" type="int[]"/>
                </params>
                <declaration name="ui" type="TreeUI" line="1777"/>
                <scope line="1779">
                    <declaration name="numRows" type="int" line="1780"/>
                    <declaration name="paths" type="TreePath[]" line="1781"/>
                </scope>
            </method>
            <javadoc line="1789">
                Returns the last path component of the selected path. This is
                  a convenience method for{@code getSelectionModel().getSelectionPath().getLastPathComponent()}.
                  This is typically only useful if the selection has one path.                
                <return>
                    the last path component of the selected path, or
                      <code>null</code> if nothing is selected                    
                </return>
                <see>
                    TreePath#getLastPathComponent                    
                </see>
            </javadoc>
            <method name="getLastSelectedPathComponent" type="Object" line="1799">
                <declaration name="selPath" type="TreePath" line="1800"/>
            </method>
            <javadoc line="1807">
                Returns the path identified as the lead.                
                <return>
                    path identified as the lead                    
                </return>
            </javadoc>
            <method name="getLeadSelectionPath" type="TreePath" line="1811"/>
            <javadoc line="1815">
                Returns the path identified as the anchor.                
                <return>
                    path identified as the anchor                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getAnchorSelectionPath" type="TreePath" line="1820"/>
            <javadoc line="1824">
                Returns the path to the first selected node.                
                <return>
                    the <code>TreePath</code> for the first selected node,
                      or <code>null</code> if nothing is currently selected                    
                </return>
            </javadoc>
            <method name="getSelectionPath" type="TreePath" line="1830"/>
            <javadoc line="1834">
                Returns the paths of all selected values.                
                <return>
                    an array of <code>TreePath</code> objects indicating the selected
                      nodes, or <code>null</code> if nothing is currently selected                    
                </return>
            </javadoc>
            <method name="getSelectionPaths" type="TreePath[]" line="1840"/>
            <javadoc line="1844">
                Returns all of the currently selected rows. This method is simply
                  forwarded to the &lt;code&gt;TreeSelectionModel&lt;/code&gt;.
                  If nothing is selected &lt;code&gt;null&lt;/code&gt; or an empty array will
                  be returned, based on the &lt;code&gt;TreeSelectionModel&lt;/code&gt;
                  implementation.                
                <return>
                    an array of integers that identifies all currently selected rows
                      where 0 is the first row in the display                    
                </return>
            </javadoc>
            <method name="getSelectionRows" type="int[]" line="1854"/>
            <javadoc line="1858">
                Returns the number of nodes selected.                
                <return>
                    the number of nodes selected                    
                </return>
            </javadoc>
            <method name="getSelectionCount" type="int" line="1863"/>
            <javadoc line="1867">
                Returns the smallest selected row. If the selection is empty, or
                  none of the selected paths are viewable, {@code -1} is returned.                
                <return>
                    the smallest selected row                    
                </return>
            </javadoc>
            <method name="getMinSelectionRow" type="int" line="1873"/>
            <javadoc line="1877">
                Returns the largest selected row. If the selection is empty, or
                  none of the selected paths are viewable, {@code -1} is returned.                
                <return>
                    the largest selected row                    
                </return>
            </javadoc>
            <method name="getMaxSelectionRow" type="int" line="1883"/>
            <javadoc line="1887">
                Returns the row index corresponding to the lead path.                
                <return>
                    an integer giving the row index of the lead path,
                      where 0 is the first row in the display; or -1
                      if <code>leadPath</code> is <code>null</code>                    
                </return>
            </javadoc>
            <method name="getLeadSelectionRow" type="int" line="1894">
                <declaration name="leadPath" type="TreePath" line="1895"/>
                <scope line="1897"/>
            </method>
            <javadoc line="1903">
                Returns true if the item identified by the path is currently selected.                
                <param>
                    path a <code>TreePath</code> identifying a node                    
                </param>
                <return>
                    true if the node is selected                    
                </return>
            </javadoc>
            <method name="isPathSelected" type="boolean" line="1909">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="1913">
                Returns true if the node identified by row is selected.                
                <param>
                    row  an integer specifying a display row, where 0 is the first
                      row in the display                    
                </param>
                <return>
                    true if the node is selected                    
                </return>
            </javadoc>
            <method name="isRowSelected" type="boolean" line="1920">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="1924">
                Returns an &lt;code&gt;Enumeration&lt;/code&gt; of the descendants of the
                  path &lt;code&gt;parent&lt;/code&gt; that
                  are currently expanded. If &lt;code&gt;parent&lt;/code&gt; is not currently
                  expanded, this will return &lt;code&gt;null&lt;/code&gt;.
                  If you expand/collapse nodes while
                  iterating over the returned &lt;code&gt;Enumeration&lt;/code&gt;
                  this may not return all
                  the expanded paths, or may return paths that are no longer expanded.                
                <param>
                    parent  the path which is to be examined                    
                </param>
                <return>
                    an <code>Enumeration</code> of the descendents of
                      <code>parent</code>, or <code>null</code> if
                      <code>parent</code> is not currently expanded                    
                </return>
            </javadoc>
            <method name="getExpandedDescendants" type="Enumeration<TreePath>" line="1939">
                <params>
                    <param name="parent" type="TreePath"/>
                </params>
                <comment line="1953">
                    Add the path if it is expanded, a descendant of parent,
                     and it is visible (all parents expanded). This is rather
                     expensive!                    
                </comment>
                <declaration name="toggledPaths" type="Enumeration&lt;TreePath&gt;" line="1943"/>
                <declaration name="elements" type="Vector&lt;TreePath&gt;" line="1944"/>
                <declaration name="path" type="TreePath" line="1945"/>
                <declaration name="value" type="Object" line="1946"/>
                <scope line="1948">
                    <scope line="1949">
                        <scope line="1957">
                            <scope line="1958"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1965">
                    <declaration name="empty" type="Set&lt;TreePath&gt;" line="1966"/>
                </scope>
            </method>
            <javadoc line="1972">
                Returns true if the node identified by the path has ever been
                  expanded.                
                <return>
                    true if the <code>path</code> has ever been expanded                    
                </return>
            </javadoc>
            <method name="hasBeenExpanded" type="boolean" line="1977">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="1981">
                Returns true if the node identified by the path is currently expanded,                
                <param>
                    path  the <code>TreePath</code> specifying the node to check                    
                </param>
                <return>
                    false if any of the nodes in the node's path are collapsed,
                      true if all nodes in the path are expanded                    
                </return>
            </javadoc>
            <method name="isExpanded" type="boolean" line="1988">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="value" type="Object" line="1992"/>
                <scope line="1994"/>
            </method>
            <javadoc line="2003">
                Returns true if the node at the specified display row is currently
                  expanded.                
                <param>
                    row  the row to check, where 0 is the first row in the
                      display                    
                </param>
                <return>
                    true if the node is currently expanded, otherwise false                    
                </return>
            </javadoc>
            <method name="isExpanded" type="boolean" line="2011">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2012"/>
                <scope line="2014">
                    <declaration name="path" type="TreePath" line="2015"/>
                    <scope line="2017">
                        <declaration name="value" type="Boolean" line="2018"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2026">
                Returns true if the value identified by path is currently collapsed,
                  this will return false if any of the values in path are currently
                  not being displayed.                
                <param>
                    path  the <code>TreePath</code> to check                    
                </param>
                <return>
                    true if any of the nodes in the node's path are collapsed,
                      false if all nodes in the path are expanded                    
                </return>
            </javadoc>
            <method name="isCollapsed" type="boolean" line="2035">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="2039">
                Returns true if the node at the specified display row is collapsed.                
                <param>
                    row  the row to check, where 0 is the first row in the
                      display                    
                </param>
                <return>
                    true if the node is currently collapsed, otherwise false                    
                </return>
            </javadoc>
            <method name="isCollapsed" type="boolean" line="2046">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2050">
                Ensures that the node identified by path is currently viewable.                
                <param>
                    path  the <code>TreePath</code> to make visible                    
                </param>
            </javadoc>
            <method name="makeVisible" type="void" line="2055">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="2056">
                    <declaration name="parentPath" type="TreePath" line="2057"/>
                    <scope line="2059"/>
                </scope>
            </method>
            <javadoc line="2065">
                Returns true if the value identified by path is currently viewable,
                  which means it is either the root or all of its parents are expanded.
                  Otherwise, this method returns false.                
                <return>
                    true if the node is viewable, otherwise false                    
                </return>
            </javadoc>
            <method name="isVisible" type="boolean" line="2072">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="2079">
                    Root.                    
                </comment>
                <scope line="2073">
                    <declaration name="parentPath" type="TreePath" line="2074"/>
                </scope>
            </method>
            <javadoc line="2084">
                Returns the &lt;code&gt;Rectangle&lt;/code&gt; that the specified node will be drawn
                  into. Returns &lt;code&gt;null&lt;/code&gt; if any component in the path is hidden
                  (under a collapsed parent).
                  &lt;p&gt;
                  Note:&lt;br&gt;
                  This method returns a valid rectangle, even if the specified
                  node is not currently displayed.                
                <param>
                    path the <code>TreePath</code> identifying the node                    
                </param>
                <return>
                    the <code>Rectangle</code> the node is drawn in,
                      or <code>null</code>                    
                </return>
            </javadoc>
            <method name="getPathBounds" type="Rectangle" line="2097">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2098"/>
            </method>
            <javadoc line="2105">
                Returns the &lt;code&gt;Rectangle&lt;/code&gt; that the node at the specified row is
                  drawn in.                
                <param>
                    row  the row to be drawn, where 0 is the first row in the
                      display                    
                </param>
                <return>
                    the <code>Rectangle</code> the node is drawn in                    
                </return>
            </javadoc>
            <method name="getRowBounds" type="Rectangle" line="2113">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2117">
                Makes sure all the path components in path are expanded (except
                  for the last path component) and scrolls so that the
                  node identified by the path is displayed. Only works when this
                  &lt;code&gt;JTree&lt;/code&gt; is contained in a &lt;code&gt;JScrollPane&lt;/code&gt;.                
                <param>
                    path  the <code>TreePath</code> identifying the node to
                      bring into view                    
                </param>
            </javadoc>
            <method name="scrollPathToVisible" type="void" line="2126">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="2127">
                    <declaration name="bounds" type="Rectangle" line="2130"/>
                    <scope line="2132">
                        <scope line="2134"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2141">
                Scrolls the item identified by row until it is displayed. The minimum
                  of amount of scrolling necessary to bring the row into view
                  is performed. Only works when this &lt;code&gt;JTree&lt;/code&gt; is contained in a
                  &lt;code&gt;JScrollPane&lt;/code&gt;.                
                <param>
                    row  an integer specifying the row to scroll, where 0 is the
                      first row in the display                    
                </param>
            </javadoc>
            <method name="scrollRowToVisible" type="void" line="2150">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2154">
                Returns the path for the specified row.  If &lt;code&gt;row&lt;/code&gt; is
                  not visible, or a {@code TreeUI} has not been set, &lt;code&gt;null&lt;/code&gt;
                  is returned.                
                <param>
                    row  an integer specifying a row                    
                </param>
                <return>
                    the <code>TreePath</code> to the specified node,
                      <code>null</code> if <code>row < 0</code>
                      or <code>row >= getRowCount()</code>                    
                </return>
            </javadoc>
            <method name="getPathForRow" type="TreePath" line="2164">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2165"/>
            </method>
            <javadoc line="2172">
                Returns the row that displays the node identified by the specified
                  path.                
                <param>
                    path  the <code>TreePath</code> identifying a node                    
                </param>
                <return>
                    an integer specifying the display row, where 0 is the first
                      row in the display, or -1 if any of the elements in path
                      are hidden under a collapsed parent.                    
                </return>
            </javadoc>
            <method name="getRowForPath" type="int" line="2181">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2182"/>
            </method>
            <javadoc line="2189">
                Ensures that the node identified by the specified path is
                  expanded and viewable. If the last item in the path is a
                  leaf, this will have no effect.                
                <param>
                    path  the <code>TreePath</code> identifying a node                    
                </param>
            </javadoc>
            <method name="expandPath" type="void" line="2196">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="2198">
                    Only expand if not leaf!                    
                </comment>
                <declaration name="model" type="TreeModel" line="2198"/>
                <scope line="2201"/>
            </method>
            <javadoc line="2206">
                Ensures that the node in the specified row is expanded and
                  viewable.
                  &lt;p&gt;
                  If &lt;code&gt;row&lt;/code&gt; is &lt; 0 or &gt;= &lt;code&gt;getRowCount&lt;/code&gt; this
                  will have no effect.                
                <param>
                    row  an integer specifying a display row, where 0 is the
                      first row in the display                    
                </param>
            </javadoc>
            <method name="expandRow" type="void" line="2216">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2220">
                Ensures that the node identified by the specified path is
                  collapsed and viewable.                
                <param>
                    path  the <code>TreePath</code> identifying a node                    
                </param>
            </javadoc>
            <method name="collapsePath" type="void" line="2226">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="2230">
                Ensures that the node in the specified row is collapsed.
                  &lt;p&gt;
                  If &lt;code&gt;row&lt;/code&gt; is &lt; 0 or &gt;= &lt;code&gt;getRowCount&lt;/code&gt; this
                  will have no effect.                
                <param>
                    row  an integer specifying a display row, where 0 is the
                      first row in the display                    
                </param>
            </javadoc>
            <method name="collapseRow" type="void" line="2239">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="2243">
                Returns the path for the node at the specified location.                
                <param>
                    x an integer giving the number of pixels horizontally from
                      the left edge of the display area, minus any left margin                    
                </param>
                <param>
                    y an integer giving the number of pixels vertically from
                      the top of the display area, minus any top margin                    
                </param>
                <return>
                    the <code>TreePath</code> for the node at that location                    
                </return>
            </javadoc>
            <method name="getPathForLocation" type="TreePath" line="2252">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="closestPath" type="TreePath" line="2253"/>
                <scope line="2255">
                    <declaration name="pathBounds" type="Rectangle" line="2256"/>
                </scope>
            </method>
            <javadoc line="2266">
                Returns the row for the specified location.                
                <param>
                    x an integer giving the number of pixels horizontally from
                      the left edge of the display area, minus any left margin                    
                </param>
                <param>
                    y an integer giving the number of pixels vertically from
                      the top of the display area, minus any top margin                    
                </param>
                <return>
                    the row corresponding to the location, or -1 if the
                      location is not within the bounds of a displayed cell                    
                </return>
                <see>
                    #getClosestRowForLocation                    
                </see>
            </javadoc>
            <method name="getRowForLocation" type="int" line="2277">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="2281">
                Returns the path to the node that is closest to x,y.  If
                  no nodes are currently viewable, or there is no model, returns
                  &lt;code&gt;null&lt;/code&gt;, otherwise it always returns a valid path.  To test if
                  the node is exactly at x, y, get the node&apos;s bounds and
                  test x, y against that.                
                <param>
                    x an integer giving the number of pixels horizontally from
                      the left edge of the display area, minus any left margin                    
                </param>
                <param>
                    y an integer giving the number of pixels vertically from
                      the top of the display area, minus any top margin                    
                </param>
                <return>
                    the <code>TreePath</code> for the node closest to that location,
                      <code>null</code> if nothing is viewable or there is no model                    
                </return>
                <see>
                    #getPathForLocation                    
                </see>
                <see>
                    #getPathBounds                    
                </see>
            </javadoc>
            <method name="getClosestPathForLocation" type="TreePath" line="2298">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2299"/>
            </method>
            <javadoc line="2306">
                Returns the row to the node that is closest to x,y.  If no nodes
                  are viewable or there is no model, returns -1. Otherwise,
                  it always returns a valid row.  To test if the returned object is
                  exactly at x, y, get the bounds for the node at the returned
                  row and test x, y against that.                
                <param>
                    x an integer giving the number of pixels horizontally from
                      the left edge of the display area, minus any left margin                    
                </param>
                <param>
                    y an integer giving the number of pixels vertically from
                      the top of the display area, minus any top margin                    
                </param>
                <return>
                    the row closest to the location, -1 if nothing is
                      viewable or there is no model                    
                </return>
                <see>
                    #getRowForLocation                    
                </see>
                <see>
                    #getRowBounds                    
                </see>
            </javadoc>
            <method name="getClosestRowForLocation" type="int" line="2323">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
            </method>
            <javadoc line="2327">
                Returns true if the tree is being edited. The item that is being
                  edited can be obtained using &lt;code&gt;getSelectionPath&lt;/code&gt;.                
                <return>
                    true if the user is currently editing a node                    
                </return>
                <see>
                    #getSelectionPath                    
                </see>
            </javadoc>
            <method name="isEditing" type="boolean" line="2334">
                <declaration name="tree" type="TreeUI" line="2335"/>
            </method>
            <javadoc line="2342">
                Ends the current editing session.
                  (The &lt;code&gt;DefaultTreeCellEditor&lt;/code&gt;
                  object saves any edits that are currently in progress on a cell.
                  Other implementations may operate differently.)
                  Has no effect if the tree isn&apos;t being edited.
                  &lt;blockquote&gt;
                  &lt;b&gt;Note:&lt;/b&gt;&lt;br&gt;
                  To make edit-saves automatic whenever the user changes
                  their position in the tree, use {@link #setInvokesStopCellEditing}.
                  &lt;/blockquote&gt;                
                <return>
                    true if editing was in progress and is now stopped,
                      false if editing was not in progress                    
                </return>
            </javadoc>
            <method name="stopEditing" type="boolean" line="2357">
                <declaration name="tree" type="TreeUI" line="2358"/>
            </method>
            <javadoc line="2365">
                Cancels the current editing session. Has no effect if the
                  tree isn&apos;t being edited.                
            </javadoc>
            <method name="cancelEditing" type="void" line="2369">
                <declaration name="tree" type="TreeUI" line="2370"/>
            </method>
            <javadoc line="2376">
                Selects the node identified by the specified path and initiates
                  editing.  The edit-attempt fails if the &lt;code&gt;CellEditor&lt;/code&gt;
                  does not allow
                  editing for the specified item.                
                <param>
                    path  the <code>TreePath</code> identifying a node                    
                </param>
            </javadoc>
            <method name="startEditingAtPath" type="void" line="2384">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2385"/>
            </method>
            <javadoc line="2391">
                Returns the path to the element that is currently being edited.                
                <return>
                    the <code>TreePath</code> for the node being edited                    
                </return>
            </javadoc>
            <method name="getEditingPath" type="TreePath" line="2396">
                <declaration name="tree" type="TreeUI" line="2397"/>
            </method>
            <javadoc line="2413">
                Sets the tree&apos;s selection model. When a &lt;code&gt;null&lt;/code&gt; value is
                  specified an empty
                  &lt;code&gt;selectionModel&lt;/code&gt; is used, which does not allow selections.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    selectionModel the <code>TreeSelectionModel</code> to use,
                      or <code>null</code> to disable selections                    
                </param>
                <see>
                    TreeSelectionModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The tree's selection model.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionModel" type="void" line="2427">
                <params>
                    <param name="selectionModel" type="TreeSelectionModel"/>
                </params>
                <declaration name="oldValue" type="TreeSelectionModel" line="2431"/>
                <scope line="2433"/>
                <scope line="2437"/>
                <scope line="2443"/>
                <scope line="2449"/>
            </method>
            <javadoc line="2456">
                Returns the model for selections. This should always return a
                  non-&lt;code&gt;null&lt;/code&gt; value. If you don&apos;t want to allow anything
                  to be selected
                  set the selection model to &lt;code&gt;null&lt;/code&gt;, which forces an empty
                  selection model to be used.                
                <see>
                    #setSelectionModel                    
                </see>
            </javadoc>
            <method name="getSelectionModel" type="TreeSelectionModel" line="2465"/>
            <javadoc line="2469">
                Returns the paths (inclusive) between the specified rows. If
                  the specified indices are within the viewable set of rows, or
                  bound the viewable set of rows, then the indices are
                  constrained by the viewable set of rows. If the specified
                  indices are not within the viewable set of rows, or do not
                  bound the viewable set of rows, then an empty array is
                  returned. For example, if the row count is {@code 10}, and this
                  method is invoked with {@code -1, 20}, then the specified
                  indices are constrained to the viewable set of rows, and this is
                  treated as if invoked with {@code 0, 9}. On the other hand, if
                  this were invoked with {@code -10, -1}, then the specified
                  indices do not bound the viewable set of rows, and an empty
                  array is returned.
                  &lt;p&gt;
                  The parameters are not order dependent. That is, {@codegetPathBetweenRows(x, y)} is equivalent to{@code getPathBetweenRows(y, x)}.
                  &lt;p&gt;
                  An empty array is returned if the row count is {@code 0}, or
                  the specified indices do not bound the viewable set of rows.                
                <param>
                    index0 the first index in the range                    
                </param>
                <param>
                    index1 the last index in the range                    
                </param>
                <return>
                    the paths (inclusive) between the specified row indices                    
                </return>
            </javadoc>
            <method name="getPathBetweenRows" type="TreePath[]" line="2495">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="tree" type="TreeUI" line="2496"/>
                <scope line="2497">
                    <declaration name="rowCount" type="int" line="2498"/>
                    <scope line="2500">
                        <declaration name="minIndex" type="int" line="2503"/>
                        <declaration name="maxIndex" type="int" line="2504"/>
                        <declaration name="selection" type="TreePath[]" line="2505"/>
                        <scope line="2507"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2517">
                Selects the rows in the specified interval (inclusive). If
                  the specified indices are within the viewable set of rows, or bound
                  the viewable set of rows, then the specified rows are constrained by
                  the viewable set of rows. If the specified indices are not within the
                  viewable set of rows, or do not bound the viewable set of rows, then
                  the selection is cleared. For example, if the row count is {@code10}, and this method is invoked with {@code -1, 20}, then the
                  specified indices bounds the viewable range, and this is treated as
                  if invoked with {@code 0, 9}. On the other hand, if this were
                  invoked with {@code -10, -1}, then the specified indices do not
                  bound the viewable set of rows, and the selection is cleared.
                  &lt;p&gt;
                  The parameters are not order dependent. That is, {@codesetSelectionInterval(x, y)} is equivalent to{@code setSelectionInterval(y, x)}.                
                <param>
                    index0 the first index in the range to select                    
                </param>
                <param>
                    index1 the last index in the range to select                    
                </param>
            </javadoc>
            <method name="setSelectionInterval" type="void" line="2537">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="paths" type="TreePath[]" line="2538"/>
            </method>
            <javadoc line="2543">
                Adds the specified rows (inclusive) to the selection. If the
                  specified indices are within the viewable set of rows, or bound
                  the viewable set of rows, then the specified indices are
                  constrained by the viewable set of rows. If the indices are not
                  within the viewable set of rows, or do not bound the viewable
                  set of rows, then the selection is unchanged. For example, if
                  the row count is {@code 10}, and this method is invoked with{@code -1, 20}, then the specified indices bounds the viewable
                  range, and this is treated as if invoked with {@code 0, 9}. On
                  the other hand, if this were invoked with {@code -10, -1}, then
                  the specified indices do not bound the viewable set of rows,
                  and the selection is unchanged.
                  &lt;p&gt;
                  The parameters are not order dependent. That is, {@codeaddSelectionInterval(x, y)} is equivalent to{@code addSelectionInterval(y, x)}.                
                <param>
                    index0 the first index in the range to add to the selection                    
                </param>
                <param>
                    index1 the last index in the range to add to the selection                    
                </param>
            </javadoc>
            <method name="addSelectionInterval" type="void" line="2564">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="paths" type="TreePath[]" line="2565"/>
                <scope line="2567"/>
            </method>
            <javadoc line="2572">
                Removes the specified rows (inclusive) from the selection. If
                  the specified indices are within the viewable set of rows, or bound
                  the viewable set of rows, then the specified indices are constrained by
                  the viewable set of rows. If the specified indices are not within the
                  viewable set of rows, or do not bound the viewable set of rows, then
                  the selection is unchanged. For example, if the row count is {@code10}, and this method is invoked with {@code -1, 20}, then the
                  specified range bounds the viewable range, and this is treated as
                  if invoked with {@code 0, 9}. On the other hand, if this were
                  invoked with {@code -10, -1}, then the specified range does not
                  bound the viewable set of rows, and the selection is unchanged.
                  &lt;p&gt;
                  The parameters are not order dependent. That is, {@coderemoveSelectionInterval(x, y)} is equivalent to{@code removeSelectionInterval(y, x)}.                
                <param>
                    index0 the first row to remove from the selection                    
                </param>
                <param>
                    index1 the last row to remove from the selection                    
                </param>
            </javadoc>
            <method name="removeSelectionInterval" type="void" line="2592">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="paths" type="TreePath[]" line="2593"/>
                <scope line="2595"/>
            </method>
            <javadoc line="2600">
                Removes the node identified by the specified path from the current
                  selection.                
                <param>
                    path  the <code>TreePath</code> identifying a node                    
                </param>
            </javadoc>
            <method name="removeSelectionPath" type="void" line="2606">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
            </method>
            <javadoc line="2610">
                Removes the nodes identified by the specified paths from the
                  current selection.                
                <param>
                    paths an array of <code>TreePath</code> objects that
                      specifies the nodes to remove                    
                </param>
            </javadoc>
            <method name="removeSelectionPaths" type="void" line="2617">
                <params>
                    <param name="paths" type="TreePath[]"/>
                </params>
            </method>
            <javadoc line="2621">
                Removes the row at the index &lt;code&gt;row&lt;/code&gt; from the current
                  selection.                
                <param>
                    row  the row to remove                    
                </param>
            </javadoc>
            <method name="removeSelectionRow" type="void" line="2627">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="rows" type="int[]" line="2628"/>
            </method>
            <javadoc line="2633">
                Removes the rows that are selected at each of the specified
                  rows.                
                <param>
                    rows  an array of ints specifying display rows, where 0 is
                      the first row in the display                    
                </param>
            </javadoc>
            <method name="removeSelectionRows" type="void" line="2640">
                <params>
                    <param name="rows" type="int[]"/>
                </params>
                <declaration name="ui" type="TreeUI" line="2641"/>
                <scope line="2643">
                    <declaration name="numRows" type="int" line="2644"/>
                    <declaration name="paths" type="TreePath[]" line="2645"/>
                </scope>
            </method>
            <javadoc line="2653">
                Clears the selection.                
            </javadoc>
            <method name="clearSelection" type="void" line="2656"/>
            <javadoc line="2660">
                Returns true if the selection is currently empty.                
                <return>
                    true if the selection is currently empty                    
                </return>
            </javadoc>
            <method name="isSelectionEmpty" type="boolean" line="2665"/>
            <javadoc line="2669">
                Adds a listener for &lt;code&gt;TreeExpansion&lt;/code&gt; events.                
                <param>
                    tel a TreeExpansionListener that will be notified when
                      a tree node is expanded or collapsed (a "negative
                      expansion")                    
                </param>
            </javadoc>
            <method name="addTreeExpansionListener" type="void" line="2676">
                <params>
                    <param name="tel" type="TreeExpansionListener"/>
                </params>
                <scope line="2677"/>
            </method>
            <javadoc line="2683">
                Removes a listener for &lt;code&gt;TreeExpansion&lt;/code&gt; events.                
                <param>
                    tel the <code>TreeExpansionListener</code> to remove                    
                </param>
            </javadoc>
            <method name="removeTreeExpansionListener" type="void" line="2688">
                <params>
                    <param name="tel" type="TreeExpansionListener"/>
                </params>
                <scope line="2690"/>
            </method>
            <javadoc line="2695">
                Returns an array of all the &lt;code&gt;TreeExpansionListener&lt;/code&gt;s added
                  to this JTree with addTreeExpansionListener().                
                <return>
                    all of the <code>TreeExpansionListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTreeExpansionListeners" type="TreeExpansionListener[]" line="2703"/>
            <javadoc line="2707">
                Adds a listener for &lt;code&gt;TreeWillExpand&lt;/code&gt; events.                
                <param>
                    tel a <code>TreeWillExpandListener</code> that will be notified
                      when a tree node will be expanded or collapsed (a "negative
                      expansion")                    
                </param>
            </javadoc>
            <method name="addTreeWillExpandListener" type="void" line="2714">
                <params>
                    <param name="tel" type="TreeWillExpandListener"/>
                </params>
            </method>
            <javadoc line="2718">
                Removes a listener for &lt;code&gt;TreeWillExpand&lt;/code&gt; events.                
                <param>
                    tel the <code>TreeWillExpandListener</code> to remove                    
                </param>
            </javadoc>
            <method name="removeTreeWillExpandListener" type="void" line="2723">
                <params>
                    <param name="tel" type="TreeWillExpandListener"/>
                </params>
            </method>
            <javadoc line="2727">
                Returns an array of all the &lt;code&gt;TreeWillExpandListener&lt;/code&gt;s added
                  to this JTree with addTreeWillExpandListener().                
                <return>
                    all of the <code>TreeWillExpandListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTreeWillExpandListeners" type="TreeWillExpandListener[]" line="2735"/>
            <javadoc line="2739">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the &lt;code&gt;path&lt;/code&gt; parameter.                
                <param>
                    path the <code>TreePath</code> indicating the node that was
                      expanded                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTreeExpanded" type="void" line="2748">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="2750">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2757">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2762">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2750"/>
                <declaration name="e" type="TreeExpansionEvent" line="2751"/>
                <scope line="2752"/>
                <scope line="2758">
                    <scope line="2760"/>
                </scope>
            </method>
            <javadoc line="2770">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the &lt;code&gt;path&lt;/code&gt; parameter.                
                <param>
                    path the <code>TreePath</code> indicating the node that was
                      collapsed                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTreeCollapsed" type="void" line="2779">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="2781">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2788">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2793">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2781"/>
                <declaration name="e" type="TreeExpansionEvent" line="2782"/>
                <scope line="2783"/>
                <scope line="2789">
                    <scope line="2791"/>
                </scope>
            </method>
            <javadoc line="2801">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the &lt;code&gt;path&lt;/code&gt; parameter.                
                <param>
                    path the <code>TreePath</code> indicating the node that was
                      expanded                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTreeWillExpand" type="void" line="2810">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="2812">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2815">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2819">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2812"/>
                <declaration name="e" type="TreeExpansionEvent" line="2813"/>
                <scope line="2816">
                    <scope line="2817"/>
                </scope>
            </method>
            <javadoc line="2827">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the &lt;code&gt;path&lt;/code&gt; parameter.                
                <param>
                    path the <code>TreePath</code> indicating the node that was
                      expanded                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTreeWillCollapse" type="void" line="2836">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <comment line="2838">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2841">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2845">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2838"/>
                <declaration name="e" type="TreeExpansionEvent" line="2839"/>
                <scope line="2842">
                    <scope line="2843"/>
                </scope>
            </method>
            <javadoc line="2853">
                Adds a listener for &lt;code&gt;TreeSelection&lt;/code&gt; events.                
                <param>
                    tsl the <code>TreeSelectionListener</code> that will be notified
                      when a node is selected or deselected (a "negative
                      selection")                    
                </param>
            </javadoc>
            <method name="addTreeSelectionListener" type="void" line="2860">
                <params>
                    <param name="tsl" type="TreeSelectionListener"/>
                </params>
                <scope line="2863"/>
            </method>
            <javadoc line="2869">
                Removes a &lt;code&gt;TreeSelection&lt;/code&gt; listener.                
                <param>
                    tsl the <code>TreeSelectionListener</code> to remove                    
                </param>
            </javadoc>
            <method name="removeTreeSelectionListener" type="void" line="2874">
                <params>
                    <param name="tsl" type="TreeSelectionListener"/>
                </params>
                <scope line="2877"/>
            </method>
            <javadoc line="2884">
                Returns an array of all the &lt;code&gt;TreeSelectionListener&lt;/code&gt;s added
                  to this JTree with addTreeSelectionListener().                
                <return>
                    all of the <code>TreeSelectionListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTreeSelectionListeners" type="TreeSelectionListener[]" line="2892"/>
            <javadoc line="2896">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    e the <code>TreeSelectionEvent</code> to be fired;
                      generated by the
                      <code>TreeSelectionModel</code>
                      when a node is selected or deselected                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireValueChanged" type="void" line="2906">
                <params>
                    <param name="e" type="TreeSelectionEvent"/>
                </params>
                <comment line="2908">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="2910">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="2913">
                    TreeSelectionEvent e = null;                    
                </comment>
                <comment line="2915">
                    Lazily create the event:
                     if (e == null)
                     e = new ListSelectionEvent(this, firstIndex, lastIndex);                    
                </comment>
                <declaration name="listeners" type="Object[]" line="2908"/>
                <scope line="2911">
                    <scope line="2913"/>
                </scope>
            </method>
            <javadoc line="2922">
                Sent when the tree has changed enough that we need to resize
                  the bounds, but not enough that we need to remove the
                  expanded node set (e.g nodes were expanded or collapsed, or
                  nodes were inserted into the tree). You should never have to
                  invoke this, the UI will invoke this as it needs to.                
            </javadoc>
            <method name="treeDidChange" type="void" line="2929"/>
            <javadoc line="2934">
                Sets the number of rows that are to be displayed.
                  This will only work if the tree is contained in a
                  &lt;code&gt;JScrollPane&lt;/code&gt;,
                  and will adjust the preferred size and size of that scrollpane.
                  &lt;p&gt;
                  This is a bound property.                
                <param>
                    newCount the number of rows to display                    
                </param>
                <beaninfo>
                    bound: true
                      description: The number of rows that are to be displayed.                    
                </beaninfo>
            </javadoc>
            <method name="setVisibleRowCount" type="void" line="2947">
                <params>
                    <param name="newCount" type="int"/>
                </params>
                <declaration name="oldCount" type="int" line="2948"/>
                <scope line="2954"/>
            </method>
            <javadoc line="2959">
                Returns the number of rows that are displayed in the display area.                
                <return>
                    the number of rows displayed                    
                </return>
            </javadoc>
            <method name="getVisibleRowCount" type="int" line="2964"/>
            <javadoc line="2968">
                Expands the root path, assuming the current TreeModel has been set.                
            </javadoc>
            <method name="expandRoot" type="void" line="2971">
                <declaration name="model" type="TreeModel" line="2972"/>
                <scope line="2974"/>
            </method>
            <javadoc line="2979">
                Returns the TreePath to the next tree element that
                  begins with a prefix. To handle the conversion of a
                  &lt;code&gt;TreePath&lt;/code&gt; into a String, &lt;code&gt;convertValueToText&lt;/code&gt;
                  is used.                
                <param>
                    prefix the string to test for a match                    
                </param>
                <param>
                    startingRow the row for starting the search                    
                </param>
                <param>
                    bias the search direction, either
                      Position.Bias.Forward or Position.Bias.Backward.                    
                </param>
                <return>
                    the TreePath of the next tree element that
                      starts with the prefix; otherwise null                    
                </return>
                <exception>
                    IllegalArgumentException if prefix is null
                      or startingRow is out of bounds                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNextMatch" type="TreePath" line="2996">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="startingRow" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
                <comment line="3008">
                    start search from the next/previous element froom the
                     selected element                    
                </comment>
                <declaration name="max" type="int" line="2998"/>
                <scope line="2999"/>
                <scope line="3002"/>
                <declaration name="increment" type="int" line="3009"/>
                <declaration name="row" type="int" line="3010"/>
                <scope line="3011">
                    <declaration name="path" type="TreePath" line="3012"/>
                    <declaration name="text" type="String" line="3013"/>
                    <scope line="3017"/>
                </scope>
            </method>
            <method name="writeObject" type="void" line="3026">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="3031">
                    Save the cellRenderer, if its Serializable.                    
                </comment>
                <comment line="3036">
                    Save the cellEditor, if its Serializable.                    
                </comment>
                <comment line="3041">
                    Save the treeModel, if its Serializable.                    
                </comment>
                <comment line="3046">
                    Save the selectionModel, if its Serializable.                    
                </comment>
                <declaration name="values" type="Vector&lt;Object&gt;" line="3027"/>
                <scope line="3031"/>
                <scope line="3036"/>
                <scope line="3041"/>
                <scope line="3046"/>
                <declaration name="expandedData" type="Object" line="3051"/>
                <scope line="3053"/>
                <scope line="3059">
                    <declaration name="count" type="byte" line="3060"/>
                    <scope line="3062"/>
                </scope>
            </method>
            <method name="readObject" type="void" line="3069">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <comment line="3073">
                    Create an instance of expanded state.                    
                </comment>
                <comment line="3108">
                    Reinstall the redirector.                    
                </comment>
                <comment line="3113">
                    Listener to TreeModel.                    
                </comment>
                <declaration name="values" type="Vector" line="3078"/>
                <declaration name="indexCounter" type="int" line="3079"/>
                <declaration name="maxCounter" type="int" line="3080"/>
                <scope line="3083"/>
                <scope line="3088"/>
                <scope line="3093"/>
                <scope line="3098"/>
                <scope line="3103"/>
                <scope line="3108"/>
                <scope line="3113"/>
            </method>
            <javadoc line="3120">
                Returns an object that can be archived indicating what nodes are
                  expanded and what aren&apos;t. The objects from the model are NOT
                  written out.                
            </javadoc>
            <method name="getArchivableExpandedState" type="Object" line="3125">
                <declaration name="model" type="TreeModel" line="3126"/>
                <scope line="3128">
                    <declaration name="paths" type="Enumeration&lt;TreePath&gt;" line="3129"/>
                    <scope line="3131">
                        <declaration name="state" type="Vector&lt;Object&gt;" line="3132"/>
                        <scope line="3134">
                            <declaration name="path" type="TreePath" line="3135"/>
                            <declaration name="archivePath" type="Object" line="3136"/>
                            <scope line="3138"/>
                            <scope line="3140"/>
                            <scope line="3143"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="3154">
                Updates the expanded state of nodes in the tree based on the
                  previously archived state &lt;code&gt;state&lt;/code&gt;.                
            </javadoc>
            <method name="unarchiveExpandedState" type="void" line="3158">
                <params>
                    <param name="state" type="Object"/>
                </params>
                <scope line="3159">
                    <declaration name="paths" type="Vector" line="3160"/>
                    <scope line="3162">
                        <declaration name="eState" type="Boolean" line="3163"/>
                        <declaration name="path" type="TreePath" line="3164"/>
                        <scope line="3166"/>
                        <scope line="3170"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3175">
                Returns an array of integers specifying the indexs of the
                  components in the &lt;code&gt;path&lt;/code&gt;. If &lt;code&gt;path&lt;/code&gt; is
                  the root, this will return an empty array.  If &lt;code&gt;path&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; will be returned.                
            </javadoc>
            <method name="getModelIndexsForPath" type="int[]" line="3181">
                <params>
                    <param name="path" type="TreePath"/>
                </params>
                <scope line="3182">
                    <declaration name="model" type="TreeModel" line="3183"/>
                    <declaration name="count" type="int" line="3184"/>
                    <declaration name="indexs" type="int[]" line="3185"/>
                    <declaration name="parent" type="Object" line="3186"/>
                    <scope line="3188"/>
                </scope>
            </method>
            <javadoc line="3200">
                Returns a &lt;code&gt;TreePath&lt;/code&gt; created by obtaining the children
                  for each of the indices in &lt;code&gt;indexs&lt;/code&gt;. If &lt;code&gt;indexs&lt;/code&gt;
                  or the &lt;code&gt;TreeModel&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, it will return
                  &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="getPathForIndexs" type="TreePath" line="3206">
                <params>
                    <param name="indexs" type="int[]"/>
                </params>
                <declaration name="model" type="TreeModel" line="3210"/>
                <declaration name="count" type="int" line="3215"/>
                <declaration name="parent" type="Object" line="3216"/>
                <declaration name="parentPath" type="TreePath" line="3217"/>
                <scope line="3219"/>
            </method>
            <class name="EmptySelectionModel" line="3228">
                <extends class="DefaultTreeSelectionModel"/>
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <javadoc line="3228">
                    &lt;code&gt;EmptySelectionModel&lt;/code&gt; is a &lt;code&gt;TreeSelectionModel&lt;/code&gt;
                      that does not allow anything to be selected.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="sharedInstance" type="EmptySelectionModel" line="3244"/>
                <javadoc line="3244">
                    The single instance of {@code EmptySelectionModel}.                    
                </javadoc>
                <javadoc line="3250">
                    Returns the single instance of {@code EmptySelectionModel}.                    
                    <return>
                        single instance of {@code EmptySelectionModel}                        
                    </return>
                </javadoc>
                <method name="sharedInstance" type="EmptySelectionModel" line="3255"/>
                <javadoc line="3259">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        paths the paths to select; this is ignored                        
                    </param>
                </javadoc>
                <method name="setSelectionPaths" type="void" line="3265">
                    <params>
                        <param name="paths" type="TreePath[]"/>
                    </params>
                </method>
                <javadoc line="3267">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        paths the paths to add to the selection; this is ignored                        
                    </param>
                </javadoc>
                <method name="addSelectionPaths" type="void" line="3273">
                    <params>
                        <param name="paths" type="TreePath[]"/>
                    </params>
                </method>
                <javadoc line="3275">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        paths the paths to remove; this is ignored                        
                    </param>
                </javadoc>
                <method name="removeSelectionPaths" type="void" line="3281">
                    <params>
                        <param name="paths" type="TreePath[]"/>
                    </params>
                </method>
                <javadoc line="3283">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        mode the selection mode; this is ignored                        
                    </param>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <method name="setSelectionMode" type="void" line="3290">
                    <params>
                        <param name="mode" type="int"/>
                    </params>
                </method>
                <javadoc line="3293">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        mapper the {@code RowMapper} instance; this is ignored                        
                    </param>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <method name="setRowMapper" type="void" line="3300">
                    <params>
                        <param name="mapper" type="RowMapper"/>
                    </params>
                </method>
                <javadoc line="3303">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        listener the listener to add; this is ignored                        
                    </param>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <method name="addTreeSelectionListener" type="void" line="3310">
                    <params>
                        <param name="listener" type="TreeSelectionListener"/>
                    </params>
                </method>
                <javadoc line="3313">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        listener the listener to remove; this is ignored                        
                    </param>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <method name="removeTreeSelectionListener" type="void" line="3321">
                    <params>
                        <param name="listener" type="TreeSelectionListener"/>
                    </params>
                </method>
                <javadoc line="3324">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        listener the listener to add; this is ignored                        
                    </param>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <method name="addPropertyChangeListener" type="void" line="3332">
                    <params>
                        <param name="listener" type="PropertyChangeListener"/>
                    </params>
                </method>
                <javadoc line="3335">
                    This is overriden to do nothing; {@code EmptySelectionModel}does not allow a selection.                    
                    <param>
                        listener the listener to remove; this is ignored                        
                    </param>
                    <since>
                        1.7                        
                    </since>
                </javadoc>
                <method name="removePropertyChangeListener" type="void" line="3343">
                    <params>
                        <param name="listener" type="PropertyChangeListener"/>
                    </params>
                </method>
            </class>
            <class name="TreeSelectionRedirector" line="3348">
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <implements interface="Serializable"/>
                <implements interface="TreeSelectionListener"/>
                <javadoc line="3348">
                    Handles creating a new &lt;code&gt;TreeSelectionEvent&lt;/code&gt; with the
                      &lt;code&gt;JTree&lt;/code&gt; as the
                      source and passing it off to all the listeners.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="3365">
                    Invoked by the &lt;code&gt;TreeSelectionModel&lt;/code&gt; when the
                      selection changes.                    
                    <param>
                        e the <code>TreeSelectionEvent</code> generated by the
                          <code>TreeSelectionModel</code>                        
                    </param>
                </javadoc>
                <method name="valueChanged" type="void" line="3372">
                    <params>
                        <param name="e" type="TreeSelectionEvent"/>
                    </params>
                    <declaration name="newE" type="TreeSelectionEvent" line="3373"/>
                </method>
            </class>
            <javadoc line="3384">
                Returns the preferred display size of a &lt;code&gt;JTree&lt;/code&gt;. The height is
                  determined from &lt;code&gt;getVisibleRowCount&lt;/code&gt; and the width
                  is the current preferred width.                
                <return>
                    a <code>Dimension</code> object containing the preferred size                    
                </return>
            </javadoc>
            <method name="getPreferredScrollableViewportSize" type="Dimension" line="3391">
                <declaration name="width" type="int" line="3392"/>
                <declaration name="visRows" type="int" line="3393"/>
                <declaration name="height" type="int" line="3394"/>
                <scope line="3398">
                    <declaration name="ui" type="TreeUI" line="3399"/>
                    <scope line="3401">
                        <declaration name="rc" type="int" line="3402"/>
                        <scope line="3404">
                            <declaration name="bounds" type="Rectangle" line="3405"/>
                            <scope line="3406"/>
                        </scope>
                        <scope line="3410">
                            <declaration name="bounds" type="Rectangle" line="3411"/>
                            <scope line="3412"/>
                        </scope>
                    </scope>
                    <scope line="3417"/>
                </scope>
            </method>
            <javadoc line="3424">
                Returns the amount to increment when scrolling. The amount is
                  the height of the first displayed row that isn&apos;t completely in view
                  or, if it is totally displayed, the height of the next row in the
                  scrolling direction.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation either <code>SwingConstants.VERTICAL</code>
                      or <code>SwingConstants.HORIZONTAL</code>                    
                </param>
                <param>
                    direction less than zero to scroll up/left,
                      greater than zero for down/right                    
                </param>
                <return>
                    the "unit" increment for scrolling in the specified direction                    
                </return>
                <see>
                    JScrollBar#setUnitIncrement(int)                    
                </see>
            </javadoc>
            <method name="getScrollableUnitIncrement" type="int" line="3439">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="3450">
                    UP                    
                </comment>
                <comment line="3455">
                    UP                    
                </comment>
                <scope line="3440">
                    <declaration name="rowBounds" type="Rectangle" line="3441"/>
                    <declaration name="firstIndex" type="int" line="3442"/>
                    <scope line="3445">
                        <scope line="3447">
                            <scope line="3448"/>
                        </scope>
                        <scope line="3454">
                            <scope line="3455"/>
                        </scope>
                        <scope line="3460"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="3470">
                Returns the amount for a block increment, which is the height or
                  width of &lt;code&gt;visibleRect&lt;/code&gt;, based on &lt;code&gt;orientation&lt;/code&gt;.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation either <code>SwingConstants.VERTICAL</code>
                      or <code>SwingConstants.HORIZONTAL</code>                    
                </param>
                <param>
                    direction less than zero to scroll up/left,
                      greater than zero for down/right.                    
                </param>
                <return>
                    the "block" increment for scrolling in the specified direction                    
                </return>
                <see>
                    JScrollBar#setBlockIncrement(int)                    
                </see>
            </javadoc>
            <method name="getScrollableBlockIncrement" type="int" line="3483">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="3488">
                Returns false to indicate that the width of the viewport does not
                  determine the width of the table, unless the preferred width of
                  the tree is smaller than the viewports width.  In other words:
                  ensure that the tree is never smaller than its viewport.                
                <return>
                    whether the tree should track the width of the viewport                    
                </return>
                <see>
                    Scrollable#getScrollableTracksViewportWidth                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="3497">
                <declaration name="parent" type="Container" line="3498"/>
                <scope line="3499"/>
            </method>
            <javadoc line="3505">
                Returns false to indicate that the height of the viewport does not
                  determine the height of the table, unless the preferred height
                  of the tree is smaller than the viewports height.  In other words:
                  ensure that the tree is never smaller than its viewport.                
                <return>
                    whether the tree should track the height of the viewport                    
                </return>
                <see>
                    Scrollable#getScrollableTracksViewportHeight                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportHeight" type="boolean" line="3514">
                <declaration name="parent" type="Container" line="3515"/>
                <scope line="3516"/>
            </method>
            <javadoc line="3522">
                Sets the expanded state of this &lt;code&gt;JTree&lt;/code&gt;.
                  If &lt;code&gt;state&lt;/code&gt; is
                  true, all parents of &lt;code&gt;path&lt;/code&gt; and path are marked as
                  expanded. If &lt;code&gt;state&lt;/code&gt; is false, all parents of
                  &lt;code&gt;path&lt;/code&gt; are marked EXPANDED, but &lt;code&gt;path&lt;/code&gt; itself
                  is marked collapsed.&lt;p&gt;
                  This will fail if a &lt;code&gt;TreeWillExpandListener&lt;/code&gt; vetos it.                
            </javadoc>
            <method name="setExpandedState" type="void" line="3531">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="state" type="boolean"/>
                </params>
                <comment line="3534">
                    Make sure all parents of path are expanded.                    
                </comment>
                <comment line="3561">
                    Expand vetoed!                    
                </comment>
                <comment line="3580">
                    collapse last path.                    
                </comment>
                <comment line="3594">
                    A descendant was selected, select the parent.                    
                </comment>
                <comment line="3604">
                    Expand last path.                    
                </comment>
                <scope line="3532">
                    <declaration name="stack" type="Stack&lt;TreePath&gt;" line="3534"/>
                    <declaration name="parentPath" type="TreePath" line="3535"/>
                    <scope line="3537"/>
                    <scope line="3540"/>
                    <scope line="3544">
                        <scope line="3545">
                            <scope line="3546"/>
                            <scope line="3549"/>
                        </scope>
                        <scope line="3554">
                            <scope line="3556">
                                <scope line="3557"/>
                                <scope line="3559"/>
                                <scope line="3565"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="3572">
                        <scope line="3573"/>
                    </scope>
                    <scope line="3578">
                        <declaration name="cValue" type="Object" line="3580"/>
                        <scope line="3582">
                            <scope line="3583"/>
                            <scope line="3586"/>
                            <scope line="3592"/>
                            <scope line="3596"/>
                        </scope>
                    </scope>
                    <scope line="3602">
                        <declaration name="cValue" type="Object" line="3604"/>
                        <scope line="3606">
                            <scope line="3607"/>
                            <scope line="3610"/>
                            <scope line="3615"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="3624">
                Returns an &lt;code&gt;Enumeration&lt;/code&gt; of &lt;code&gt;TreePaths&lt;/code&gt;
                  that have been expanded that
                  are descendants of &lt;code&gt;parent&lt;/code&gt;.                
            </javadoc>
            <method name="getDescendantToggledPaths" type="Enumeration<TreePath>" line="3631">
                <params>
                    <param name="parent" type="TreePath"/>
                </params>
                <declaration name="descendants" type="Vector&lt;TreePath&gt;" line="3635"/>
                <declaration name="nodes" type="Enumeration&lt;TreePath&gt;" line="3636"/>
                <scope line="3638">
                    <declaration name="path" type="TreePath" line="3639"/>
                </scope>
            </method>
            <javadoc line="3646">
                Removes any descendants of the &lt;code&gt;TreePaths&lt;/code&gt; in
                  &lt;code&gt;toRemove&lt;/code&gt;
                  that have been expanded.                
                <param>
                    toRemove an enumeration of the paths to remove; a value of{@code null} is ignored                    
                </param>
                <throws>
                    ClassCastException if {@code toRemove} contains an
                      element that is not a {@code TreePath}; {@code null}values are ignored                    
                </throws>
            </javadoc>
            <method name="removeDescendantToggledPaths" type="void" line="3659">
                <params>
                    <param name="toRemove" type="Enumeration<TreePath>"/>
                </params>
                <scope line="3660">
                    <scope line="3661">
                        <declaration name="descendants" type="Enumeration" line="3662"/>
                        <scope line="3665">
                            <scope line="3666"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="3674">
                Clears the cache of toggled tree paths. This does NOT send out
                  any &lt;code&gt;TreeExpansionListener&lt;/code&gt; events.                
            </javadoc>
            <method name="clearToggledPaths" type="void" line="3678"/>
            <javadoc line="3682">
                Creates and returns an instance of &lt;code&gt;TreeModelHandler&lt;/code&gt;.
                  The returned
                  object is responsible for updating the expanded state when the
                  &lt;code&gt;TreeModel&lt;/code&gt; changes.
                  &lt;p&gt;
                  For more information on what expanded state means, see the
                  &lt;a href=#jtree_description&gt;JTree description&lt;/a&gt; above.                
            </javadoc>
            <method name="createTreeModelListener" type="TreeModelListener" line="3691"/>
            <javadoc line="3695">
                Removes any paths in the selection that are descendants of
                  &lt;code&gt;path&lt;/code&gt;. If &lt;code&gt;includePath&lt;/code&gt; is true and
                  &lt;code&gt;path&lt;/code&gt; is selected, it will be removed from the selection.                
                <return>
                    true if a descendant was selected                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="removeDescendantSelectedPaths" type="boolean" line="3704">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="includePath" type="boolean"/>
                </params>
                <declaration name="toRemove" type="TreePath[]" line="3705"/>
                <scope line="3707"/>
            </method>
            <javadoc line="3714">
                Returns an array of paths in the selection that are descendants of
                  &lt;code&gt;path&lt;/code&gt;. The returned array may contain &lt;code&gt;null&lt;/code&gt;s.                
            </javadoc>
            <method name="getDescendantSelectedPaths" type="TreePath[]" line="3719">
                <params>
                    <param name="path" type="TreePath"/>
                    <param name="includePath" type="boolean"/>
                </params>
                <declaration name="sm" type="TreeSelectionModel" line="3720"/>
                <declaration name="selPaths" type="TreePath[]" line="3721"/>
                <scope line="3724">
                    <declaration name="shouldRemove" type="boolean" line="3725"/>
                    <scope line="3727"/>
                    <scope line="3735"/>
                </scope>
            </method>
            <javadoc line="3743">
                Removes any paths from the selection model that are descendants of
                  the nodes identified by in &lt;code&gt;e&lt;/code&gt;.                
            </javadoc>
            <method name="removeDescendantSelectedPaths" type="void" line="3747">
                <params>
                    <param name="e" type="TreeModelEvent"/>
                </params>
                <comment line="3757">
                    Might be better to call getDescendantSelectedPaths
                     numerous times, then push to the model.                    
                </comment>
                <declaration name="pPath" type="TreePath" line="3748"/>
                <declaration name="oldChildren" type="Object[]" line="3749"/>
                <declaration name="sm" type="TreeSelectionModel" line="3750"/>
                <scope line="3753">
                    <scope line="3755"/>
                </scope>
            </method>
            <class name="TreeModelHandler" line="3765">
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <implements interface="TreeModelListener"/>
                <javadoc line="3765">
                    Listens to the model and updates the &lt;code&gt;expandedState&lt;/code&gt;
                      accordingly when nodes are removed, or changed.                    
                </javadoc>
                <method name="treeNodesChanged" type="void" line="3770">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                </method>
                <method name="treeNodesInserted" type="void" line="3772">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                </method>
                <method name="treeStructureChanged" type="void" line="3774">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                    <comment line="3779">
                        NOTE: If I change this to NOT remove the descendants
                         and update BasicTreeUIs treeStructureChanged method
                         to update descendants in response to a treeStructureChanged
                         event, all the children of the event won&apos;t collapse!                        
                    </comment>
                    <comment line="3789">
                        New root, remove everything!                        
                    </comment>
                    <comment line="3793">
                        Mark the root as expanded, if it isn&apos;t a leaf.                        
                    </comment>
                    <declaration name="parent" type="TreePath" line="3782"/>
                    <scope line="3787">
                        <scope line="3791"/>
                    </scope>
                    <scope line="3796">
                        <declaration name="toRemove" type="Vector&lt;TreePath&gt;" line="3797"/>
                        <declaration name="isExpanded" type="boolean" line="3798"/>
                        <scope line="3802">
                            <declaration name="model" type="TreeModel" line="3803"/>
                        </scope>
                    </scope>
                </method>
                <method name="treeNodesRemoved" type="void" line="3815">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                    <declaration name="parent" type="TreePath" line="3819"/>
                    <declaration name="children" type="Object[]" line="3820"/>
                    <declaration name="rPath" type="TreePath" line="3825"/>
                    <declaration name="toRemove" type="Vector&lt;TreePath&gt;" line="3826"/>
                    <scope line="3829"/>
                    <declaration name="model" type="TreeModel" line="3837"/>
                </method>
            </class>
            <class name="DynamicUtilTreeNode" line="3847">
                <extends class="DefaultMutableTreeNode"/>
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <javadoc line="3847">
                    &lt;code&gt;DynamicUtilTreeNode&lt;/code&gt; can wrap
                      vectors/hashtables/arrays/strings and
                      create the appropriate children tree nodes as necessary. It is
                      dynamic in that it will only create the children as necessary.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="hasChildren" type="boolean" line="3863"/>
                <javadoc line="3863">
                    Does the this &lt;code&gt;JTree&lt;/code&gt; have children?
                      This property is currently not implemented.                    
                </javadoc>
                <declaration name="childValue" type="Object" line="3868"/>
                <javadoc line="3868">
                    Value to create children with.                    
                </javadoc>
                <declaration name="loadedChildren" type="boolean" line="3870"/>
                <javadoc line="3870">
                    Have the children been loaded yet?                    
                </javadoc>
                <javadoc line="3873">
                    Adds to parent all the children in &lt;code&gt;children&lt;/code&gt;.
                      If &lt;code&gt;children&lt;/code&gt; is an array or vector all of its
                      elements are added is children, otherwise if &lt;code&gt;children&lt;/code&gt;
                      is a hashtable all the key/value pairs are added in the order
                      &lt;code&gt;Enumeration&lt;/code&gt; returns them.                    
                </javadoc>
                <method name="createChildren" type="void" line="3881">
                    <params>
                        <param name="parent" type="DefaultMutableTreeNode"/>
                        <param name="children" type="Object"/>
                    </params>
                    <scope line="3882">
                        <declaration name="childVector" type="Vector" line="3883"/>
                    </scope>
                    <scope line="3891">
                        <declaration name="childHT" type="Hashtable" line="3892"/>
                        <declaration name="keys" type="Enumeration" line="3893"/>
                        <declaration name="aKey" type="Object" line="3894"/>
                        <scope line="3896"/>
                    </scope>
                    <scope line="3902">
                        <declaration name="childArray" type="Object[]" line="3903"/>
                    </scope>
                </method>
                <javadoc line="3912">
                    Creates a node with the specified object as its value and
                      with the specified children. For the node to allow children,
                      the children-object must be an array of objects, a
                      &lt;code&gt;Vector&lt;/code&gt;, or a &lt;code&gt;Hashtable&lt;/code&gt; -- even
                      if empty. Otherwise, the node is not
                      allowed to have children.                    
                    <param>
                        value  the <code>Object</code> that is the value for the
                          new node                        
                    </param>
                    <param>
                        children an array of <code>Object</code>s, a
                          <code>Vector</code>, or a <code>Hashtable</code>
                          used to create the child nodes; if any other
                          object is specified, or if the value is
                          <code>null</code>,
                          then the node is not allowed to have children                        
                    </param>
                </javadoc>
                <method name="DynamicUtilTreeNode" type="constructor" line="3929">
                    <params>
                        <param name="value" type="Object"/>
                        <param name="children" type="Object"/>
                    </params>
                    <scope line="3933"/>
                </method>
                <javadoc line="3947">
                    Returns true if this node allows children. Whether the node
                      allows children depends on how it was created.                    
                    <return>
                        true if this node allows children, false otherwise                        
                    </return>
                    <see>
                        #JTree                        
                    </see>
                </javadoc>
                <method name="isLeaf" type="boolean" line="3954"/>
                <javadoc line="3958">
                    Returns the number of child nodes.                    
                    <return>
                        the number of child nodes                        
                    </return>
                </javadoc>
                <method name="getChildCount" type="int" line="3963"/>
                <javadoc line="3969">
                    Loads the children based on &lt;code&gt;childValue&lt;/code&gt;.
                      If &lt;code&gt;childValue&lt;/code&gt; is a &lt;code&gt;Vector&lt;/code&gt;
                      or array each element is added as a child,
                      if &lt;code&gt;childValue&lt;/code&gt; is a &lt;code&gt;Hashtable&lt;/code&gt;
                      each key/value pair is added in the order that
                      &lt;code&gt;Enumeration&lt;/code&gt; returns the keys.                    
                </javadoc>
                <method name="loadChildren" type="void" line="3977"/>
                <javadoc line="3982">
                    Subclassed to load the children, if necessary.                    
                </javadoc>
                <method name="getChildAt" type="TreeNode" line="3985">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="3991">
                    Subclassed to load the children, if necessary.                    
                </javadoc>
                <method name="children" type="Enumeration" line="3994"/>
            </class>
            <method name="setUIProperty" type="void" line="4001">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="4002">
                    <scope line="4003"/>
                </scope>
                <scope line="4007">
                    <scope line="4008"/>
                </scope>
                <scope line="4012">
                    <scope line="4013"/>
                </scope>
                <scope line="4017"/>
            </method>
            <javadoc line="4023">
                Returns a string representation of this &lt;code&gt;JTree&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JTree</code>.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="4033">
                <declaration name="rootVisibleString" type="String" line="4034"/>
                <declaration name="showsRootHandlesString" type="String" line="4036"/>
                <declaration name="editableString" type="String" line="4038"/>
                <declaration name="largeModelString" type="String" line="4040"/>
                <declaration name="invokesStopCellEditingString" type="String" line="4042"/>
                <declaration name="scrollsOnExpandString" type="String" line="4044"/>
            </method>
            <javadoc line="4063">
                Gets the AccessibleContext associated with this JTree.
                  For JTrees, the AccessibleContext takes the form of an
                  AccessibleJTree.
                  A new AccessibleJTree instance is created if necessary.                
                <return>
                    an AccessibleJTree that serves as the
                      AccessibleContext of this JTree                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="4072">
                <scope line="4073"/>
            </method>
            <class name="AccessibleJTree" line="4079">
                <extends class="AccessibleJComponent"/>
                <comment line="4160">
                    Fire the visible data changes for the model changes.                    
                </comment>
                <comment line="4283">
                    Overridden methods from AccessibleJComponent                    
                </comment>
                <comment line="4378">
                    AccessibleSelection methods                    
                </comment>
                <comment line="5500">
                    inner class AccessibleJTreeNode                    
                </comment>
                <implements interface="AccessibleSelection"/>
                <implements interface="TreeSelectionListener"/>
                <implements interface="TreeModelListener"/>
                <implements interface="TreeExpansionListener"/>
                <javadoc line="4079">
                    This class implements accessibility support for the
                      &lt;code&gt;JTree&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to tree user-interface elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="leadSelectionPath" type="TreePath" line="4097"/>
                <declaration name="leadSelectionAccessible" type="Accessible" line="4098"/>
                <method name="AccessibleJTree" type="constructor" line="4100">
                    <comment line="4102">
                        Add a tree model listener for JTree                        
                    </comment>
                    <declaration name="model" type="TreeModel" line="4102"/>
                    <scope line="4103"/>
                </method>
                <javadoc line="4116">
                    Tree Selection Listener value change method. Used to fire the
                      property change                    
                    <param>
                        e ListSelectionEvent                        
                    </param>
                </javadoc>
                <method name="valueChanged" type="void" line="4123">
                    <params>
                        <param name="e" type="TreeSelectionEvent"/>
                    </params>
                    <comment line="4125">
                        Fixes 4546503 - JTree is sending incorrect active
                         descendant events                        
                    </comment>
                    <comment line="4131">
                        Set parent to null so AccessibleJTreeNode computes
                         its parent.                        
                    </comment>
                    <comment line="4137">
                        parent                        
                    </comment>
                    <declaration name="oldLeadSelectionPath" type="TreePath" line="4126"/>
                    <scope line="4129">
                        <declaration name="oldLSA" type="Accessible" line="4132"/>
                    </scope>
                </method>
                <javadoc line="4145">
                    Fire a visible data property change notification.
                      A &apos;visible&apos; data property is one that represents
                      something about the way the component appears on the
                      display, where that appearance isn&apos;t bound to any other
                      property. It notifies screen readers  that the visual
                      appearance of the component has changed, so they can
                      notify the user.                    
                </javadoc>
                <method name="fireVisibleDataPropertyChange" type="void" line="4154"/>
                <javadoc line="4161">
                    Tree Model Node change notification.                    
                    <param>
                        e  a Tree Model event                        
                    </param>
                </javadoc>
                <method name="treeNodesChanged" type="void" line="4166">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                </method>
                <javadoc line="4170">
                    Tree Model Node change notification.                    
                    <param>
                        e  a Tree node insertion event                        
                    </param>
                </javadoc>
                <method name="treeNodesInserted" type="void" line="4175">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                </method>
                <javadoc line="4179">
                    Tree Model Node change notification.                    
                    <param>
                        e  a Tree node(s) removal event                        
                    </param>
                </javadoc>
                <method name="treeNodesRemoved" type="void" line="4184">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                </method>
                <javadoc line="4188">
                    Tree Model structure change change notification.                    
                    <param>
                        e  a Tree Model event                        
                    </param>
                </javadoc>
                <method name="treeStructureChanged" type="void" line="4193">
                    <params>
                        <param name="e" type="TreeModelEvent"/>
                    </params>
                </method>
                <javadoc line="4197">
                    Tree Collapsed notification.                    
                    <param>
                        e  a TreeExpansionEvent                        
                    </param>
                </javadoc>
                <method name="treeCollapsed" type="void" line="4202">
                    <params>
                        <param name="e" type="TreeExpansionEvent"/>
                    </params>
                    <comment line="4207">
                        Set parent to null so AccessibleJTreeNode computes
                         its parent.                        
                    </comment>
                    <declaration name="path" type="TreePath" line="4204"/>
                    <scope line="4205">
                        <declaration name="node" type="AccessibleJTreeNode" line="4208"/>
                        <declaration name="pce" type="PropertyChangeEvent" line="4211"/>
                    </scope>
                </method>
                <javadoc line="4220">
                    Tree Model Expansion notification.                    
                    <param>
                        e  a Tree node insertion event                        
                    </param>
                </javadoc>
                <method name="treeExpanded" type="void" line="4225">
                    <params>
                        <param name="e" type="TreeExpansionEvent"/>
                    </params>
                    <comment line="4230">
                        TIGER - 4839971
                         Set parent to null so AccessibleJTreeNode computes
                         its parent.                        
                    </comment>
                    <declaration name="path" type="TreePath" line="4227"/>
                    <scope line="4228">
                        <declaration name="node" type="AccessibleJTreeNode" line="4232"/>
                        <declaration name="pce" type="PropertyChangeEvent" line="4235"/>
                    </scope>
                </method>
                <method name="getCurrentAccessibleContext" type="AccessibleContext" line="4245">
                    <declaration name="c" type="Component" line="4246"/>
                    <scope line="4247"/>
                    <scope line="4249"/>
                </method>
                <method name="getCurrentComponent" type="Component" line="4254">
                    <comment line="4256">
                        is the object visible?
                         if so, get row, selected, focus &amp; leaf state,
                         and then get the renderer component and return it                        
                    </comment>
                    <declaration name="model" type="TreeModel" line="4258"/>
                    <scope line="4259"/>
                    <declaration name="path" type="TreePath" line="4262"/>
                    <scope line="4263">
                        <declaration name="r" type="TreeCellRenderer" line="4264"/>
                        <declaration name="ui" type="TreeUI" line="4265"/>
                        <scope line="4266">
                            <declaration name="row" type="int" line="4267"/>
                            <declaration name="lsr" type="int" line="4268"/>
                            <declaration name="hasFocus" type="boolean" line="4269"/>
                            <declaration name="selected" type="boolean" line="4271"/>
                            <declaration name="expanded" type="boolean" line="4272"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="4284">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="4291"/>
                <javadoc line="4295">
                    Returns the &lt;code&gt;Accessible&lt;/code&gt; child, if one exists,
                      contained at the local coordinate &lt;code&gt;Point&lt;/code&gt;.
                      Otherwise returns &lt;code&gt;null&lt;/code&gt;.                    
                    <param>
                        p point in local coordinates of this <code>Accessible</code>                        
                    </param>
                    <return>
                        the <code>Accessible</code>, if it exists,
                          at the specified location; else <code>null</code>                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="4304">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <comment line="4308">
                        JTree.this is NOT the parent; parent will get computed later                        
                    </comment>
                    <declaration name="path" type="TreePath" line="4305"/>
                    <scope line="4306"/>
                    <scope line="4309"/>
                </method>
                <javadoc line="4314">
                    Returns the number of top-level children nodes of this
                      JTree.  Each of these nodes may in turn have children nodes.                    
                    <return>
                        the number of accessible children nodes in the tree.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="4320">
                    <comment line="4327">
                        the root node                        
                    </comment>
                    <comment line="4330">
                        return the root&apos;s first set of children count                        
                    </comment>
                    <declaration name="model" type="TreeModel" line="4321"/>
                    <scope line="4322"/>
                    <scope line="4325"/>
                </method>
                <javadoc line="4333">
                    Return the nth Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="4339">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="4346">
                        return the root node Accessible                        
                    </comment>
                    <comment line="4355">
                        return Accessible for one of root&apos;s child nodes                        
                    </comment>
                    <declaration name="model" type="TreeModel" line="4340"/>
                    <scope line="4341"/>
                    <scope line="4344">
                        <scope line="4345">
                            <declaration name="objPath" type="Object[]" line="4346"/>
                            <declaration name="path" type="TreePath" line="4347"/>
                        </scope>
                        <scope line="4349"/>
                    </scope>
                    <declaration name="count" type="int" line="4355"/>
                    <scope line="4356"/>
                    <declaration name="obj" type="Object" line="4359"/>
                    <declaration name="objPath" type="Object[]" line="4360"/>
                    <declaration name="path" type="TreePath" line="4361"/>
                </method>
                <javadoc line="4365">
                    Get the index of this object in its accessible parent.                    
                    <return>
                        the index of this object in its parent.  Since a JTree
                          top-level object does not have an accessible parent.                        
                    </return>
                    <see>
                        #getAccessibleParent                        
                    </see>
                </javadoc>
                <method name="getAccessibleIndexInParent" type="int" line="4372">
                    <comment line="4374">
                        didn&apos;t ever need to override this...                        
                    </comment>
                </method>
                <javadoc line="4378">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="4386"/>
                <javadoc line="4390">
                    Returns the number of items currently selected.
                      If no items are selected, the return value will be 0.                    
                    <return>
                        the number of items currently selected.                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="4396">
                    <declaration name="rootPath" type="Object[]" line="4397"/>
                    <declaration name="childPath" type="TreePath" line="4399"/>
                    <scope line="4400"/>
                    <scope line="4402"/>
                </method>
                <javadoc line="4407">
                    Returns an Accessible representing the specified selected item
                      in the object.  If there isn&apos;t a selection, or there are
                      fewer items selected than the integer passed in, the return
                      value will be null.                    
                    <param>
                        i the zero-based index of selected items                        
                    </param>
                    <return>
                        an Accessible containing the selected item                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="4416">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="4418">
                        The JTree can have only one accessible child, the root.                        
                    </comment>
                    <scope line="4418">
                        <declaration name="rootPath" type="Object[]" line="4419"/>
                        <declaration name="childPath" type="TreePath" line="4421"/>
                        <scope line="4422"/>
                    </scope>
                </method>
                <javadoc line="4429">
                    Returns true if the current child of this object is selected.                    
                    <param>
                        i the zero-based index of the child in this Accessible object.                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="4435">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="4437">
                        The JTree can have only one accessible child, the root.                        
                    </comment>
                    <scope line="4437">
                        <declaration name="rootPath" type="Object[]" line="4438"/>
                        <declaration name="childPath" type="TreePath" line="4440"/>
                    </scope>
                    <scope line="4442"/>
                </method>
                <javadoc line="4447">
                    Adds the specified selected item in the object to the object&apos;s
                      selection.  If the object supports multiple selections,
                      the specified item is added to any existing selection, otherwise
                      it replaces any existing selection in the object.  If the
                      specified item is already selected, this method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="4456">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="model" type="TreeModel" line="4457"/>
                    <scope line="4458">
                        <scope line="4459">
                            <declaration name="objPath" type="Object[]" line="4460"/>
                            <declaration name="path" type="TreePath" line="4461"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="4467">
                    Removes the specified selected item in the object from the object&apos;s
                      selection.  If the specified item isn&apos;t currently selected, this
                      method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="4474">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="model" type="TreeModel" line="4475"/>
                    <scope line="4476">
                        <scope line="4477">
                            <declaration name="objPath" type="Object[]" line="4478"/>
                            <declaration name="path" type="TreePath" line="4479"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="4485">
                    Clears the selection in the object, so that nothing in the
                      object is selected.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="4489">
                    <declaration name="childCount" type="int" line="4490"/>
                    <scope line="4491"/>
                </method>
                <javadoc line="4496">
                    Causes every selected item in the object to be selected
                      if the object supports multiple selections.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="4500">
                    <declaration name="model" type="TreeModel" line="4501"/>
                    <scope line="4502">
                        <declaration name="objPath" type="Object[]" line="4503"/>
                        <declaration name="path" type="TreePath" line="4504"/>
                    </scope>
                </method>
                <class name="AccessibleJTreeNode" line="4509">
                    <extends class="AccessibleContext"/>
                    <comment line="4600">
                        AccessibleContext methods                        
                    </comment>
                    <comment line="4640">
                        *** should check tooltip text for desc. (needs MouseEvent)                        
                    </comment>
                    <comment line="4944">
                        AccessibleComponent methods                        
                    </comment>
                    <comment line="5294">
                        AccessibleSelection methods                        
                    </comment>
                    <comment line="5423">
                        AccessibleAction methods                        
                    </comment>
                    <implements interface="Accessible"/>
                    <implements interface="AccessibleComponent"/>
                    <implements interface="AccessibleSelection"/>
                    <implements interface="AccessibleAction"/>
                    <javadoc line="4509">
                        This class implements accessibility support for the
                          &lt;code&gt;JTree&lt;/code&gt; child.  It provides an implementation of the
                          Java Accessibility API appropriate to tree nodes.                        
                    </javadoc>
                    <declaration name="tree" type="JTree" line="4518"/>
                    <declaration name="treeModel" type="TreeModel" line="4519"/>
                    <declaration name="obj" type="Object" line="4520"/>
                    <declaration name="path" type="TreePath" line="4521"/>
                    <declaration name="accessibleParent" type="Accessible" line="4522"/>
                    <declaration name="index" type="int" line="4523"/>
                    <declaration name="isLeaf" type="boolean" line="4524"/>
                    <javadoc line="4526">
                        Constructs an AccessibleJTreeNode                        
                        <since>
                            1.4                            
                        </since>
                    </javadoc>
                    <method name="AccessibleJTreeNode" type="constructor" line="4530">
                        <params>
                            <param name="t" type="JTree"/>
                            <param name="p" type="TreePath"/>
                            <param name="ap" type="Accessible"/>
                        </params>
                        <scope line="4536"/>
                    </method>
                    <method name="getChildTreePath" type="TreePath" line="4541">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="4543">
                            Tree nodes can&apos;t be so complex that they have
                             two sets of children -&gt; we&apos;re ignoring that case                            
                        </comment>
                        <scope line="4544"/>
                        <scope line="4546">
                            <declaration name="childObj" type="Object" line="4547"/>
                            <declaration name="objPath" type="Object[]" line="4548"/>
                            <declaration name="objChildPath" type="Object[]" line="4549"/>
                        </scope>
                    </method>
                    <javadoc line="4556">
                        Get the AccessibleContext associated with this tree node.
                          In the implementation of the Java Accessibility API for
                          this class, return this object, which is its own
                          AccessibleContext.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleContext" type="AccessibleContext" line="4564"/>
                    <method name="getCurrentAccessibleContext" type="AccessibleContext" line="4568">
                        <declaration name="c" type="Component" line="4569"/>
                        <scope line="4570"/>
                        <scope line="4572"/>
                    </method>
                    <method name="getCurrentComponent" type="Component" line="4577">
                        <comment line="4579">
                            is the object visible?
                             if so, get row, selected, focus &amp; leaf state,
                             and then get the renderer component and return it                            
                        </comment>
                        <comment line="4592">
                            how to tell?? -PK                            
                        </comment>
                        <scope line="4581">
                            <declaration name="r" type="TreeCellRenderer" line="4582"/>
                            <scope line="4583"/>
                            <declaration name="ui" type="TreeUI" line="4586"/>
                            <scope line="4587">
                                <declaration name="row" type="int" line="4588"/>
                                <declaration name="selected" type="boolean" line="4589"/>
                                <declaration name="expanded" type="boolean" line="4590"/>
                                <declaration name="hasFocus" type="boolean" line="4591"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="4601">
                        Get the accessible name of this object.                        
                        <return>
                            the localized name of the object; null if this
                              object does not have a name                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleName" type="String" line="4607">
                        <comment line="4621">
                            fall back to the client property                            
                        </comment>
                        <declaration name="ac" type="AccessibleContext" line="4608"/>
                        <scope line="4609">
                            <declaration name="name" type="String" line="4610"/>
                            <scope line="4611"/>
                            <scope line="4613"/>
                        </scope>
                        <scope line="4617"/>
                        <scope line="4619"/>
                    </method>
                    <javadoc line="4625">
                        Set the localized accessible name of this object.                        
                        <param>
                            s the new localized name of the object.                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleName" type="void" line="4630">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="4631"/>
                        <scope line="4632"/>
                        <scope line="4634"/>
                    </method>
                    <javadoc line="4642">
                        Get the accessible description of this object.                        
                        <return>
                            the localized description of the object; null if
                              this object does not have a description                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleDescription" type="String" line="4648">
                        <declaration name="ac" type="AccessibleContext" line="4649"/>
                        <scope line="4650"/>
                        <scope line="4652"/>
                    </method>
                    <javadoc line="4657">
                        Set the accessible description of this object.                        
                        <param>
                            s the new localized description of the object                            
                        </param>
                    </javadoc>
                    <method name="setAccessibleDescription" type="void" line="4662">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="4663"/>
                        <scope line="4664"/>
                        <scope line="4666"/>
                    </method>
                    <javadoc line="4671">
                        Get the role of this object.                        
                        <return>
                            an instance of AccessibleRole describing the role of the object                            
                        </return>
                        <see>
                            AccessibleRole                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleRole" type="AccessibleRole" line="4677">
                        <declaration name="ac" type="AccessibleContext" line="4678"/>
                        <scope line="4679"/>
                        <scope line="4681"/>
                    </method>
                    <javadoc line="4686">
                        Get the state set of this object.                        
                        <return>
                            an instance of AccessibleStateSet containing the
                              current state set of the object                            
                        </return>
                        <see>
                            AccessibleState                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="4693">
                        <comment line="4702">
                            need to test here, &apos;cause the underlying component
                             is a cellRenderer, which is never showing...                            
                        </comment>
                        <declaration name="ac" type="AccessibleContext" line="4694"/>
                        <declaration name="states" type="AccessibleStateSet" line="4695"/>
                        <scope line="4696"/>
                        <scope line="4698"/>
                        <scope line="4703"/>
                        <scope line="4705"/>
                        <scope line="4708"/>
                        <scope line="4710"/>
                        <scope line="4713"/>
                        <scope line="4716"/>
                        <scope line="4719"/>
                        <scope line="4722"/>
                        <scope line="4724"/>
                        <scope line="4727"/>
                    </method>
                    <javadoc line="4733">
                        Get the Accessible parent of this object.                        
                        <return>
                            the Accessible parent of this object; null if this
                              object does not have an Accessible parent                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleParent" type="Accessible" line="4739">
                        <comment line="4741">
                            someone wants to know, so we need to create our parent
                             if we don&apos;t have one (hey, we&apos;re a talented kid!)                            
                        </comment>
                        <comment line="4759">
                            we&apos;re the top!                            
                        </comment>
                        <comment line="4760">
                            we&apos;re an only child!                            
                        </comment>
                        <scope line="4742">
                            <declaration name="objPath" type="Object[]" line="4743"/>
                            <scope line="4744">
                                <declaration name="objParent" type="Object" line="4745"/>
                                <scope line="4746"/>
                                <declaration name="objParentPath" type="Object[]" line="4749"/>
                                <declaration name="parentPath" type="TreePath" line="4752"/>
                            </scope>
                            <scope line="4757"/>
                        </scope>
                    </method>
                    <javadoc line="4766">
                        Get the index of this object in its accessible parent.                        
                        <return>
                            the index of this object in its parent; -1 if this
                              object does not have an accessible parent.                            
                        </return>
                        <see>
                            #getAccessibleParent                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleIndexInParent" type="int" line="4773">
                        <comment line="4775">
                            index is invalid &apos;till we have an accessibleParent...                            
                        </comment>
                        <scope line="4775"/>
                        <declaration name="objPath" type="Object[]" line="4778"/>
                        <scope line="4779">
                            <declaration name="objParent" type="Object" line="4780"/>
                            <scope line="4781"/>
                        </scope>
                    </method>
                    <javadoc line="4788">
                        Returns the number of accessible children in the object.                        
                        <return>
                            the number of accessible children in the object.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChildrenCount" type="int" line="4793">
                        <comment line="4795">
                            Tree nodes can&apos;t be so complex that they have
                             two sets of children -&gt; we&apos;re ignoring that case                            
                        </comment>
                    </method>
                    <javadoc line="4799">
                        Return the specified Accessible child of the object.                        
                        <param>
                            i zero-based index of child                            
                        </param>
                        <return>
                            the Accessible child of the object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleChild" type="Accessible" line="4805">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="4807">
                            Tree nodes can&apos;t be so complex that they have
                             two sets of children -&gt; we&apos;re ignoring that case                            
                        </comment>
                        <scope line="4808"/>
                        <scope line="4810">
                            <declaration name="childObj" type="Object" line="4811"/>
                            <declaration name="objPath" type="Object[]" line="4812"/>
                            <declaration name="objChildPath" type="Object[]" line="4813"/>
                            <declaration name="childPath" type="TreePath" line="4816"/>
                        </scope>
                    </method>
                    <javadoc line="4821">
                        Gets the locale of the component. If the component does not have
                          a locale, then the locale of its parent is returned.                        
                        <return>
                            This component's locale. If this component does not have
                              a locale, the locale of its parent is returned.                            
                        </return>
                        <exception>
                            IllegalComponentStateExceptionIf the Component does not have its own locale and has not yet
                              been added to a containment hierarchy such that the locale can be
                              determined from the containing parent.                            
                        </exception>
                        <see>
                            #setLocale                            
                        </see>
                    </javadoc>
                    <method name="getLocale" type="Locale" line="4833">
                        <declaration name="ac" type="AccessibleContext" line="4834"/>
                        <scope line="4835"/>
                        <scope line="4837"/>
                    </method>
                    <javadoc line="4842">
                        Add a PropertyChangeListener to the listener list.
                          The listener is registered for all properties.                        
                        <param>
                            l  The PropertyChangeListener to be added                            
                        </param>
                    </javadoc>
                    <method name="addPropertyChangeListener" type="void" line="4848">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="4849"/>
                        <scope line="4850"/>
                        <scope line="4852"/>
                    </method>
                    <javadoc line="4857">
                        Remove a PropertyChangeListener from the listener list.
                          This removes a PropertyChangeListener that was registered
                          for all properties.                        
                        <param>
                            l  The PropertyChangeListener to be removed                            
                        </param>
                    </javadoc>
                    <method name="removePropertyChangeListener" type="void" line="4864">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="4865"/>
                        <scope line="4866"/>
                        <scope line="4868"/>
                    </method>
                    <javadoc line="4873">
                        Get the AccessibleAction associated with this object.  In the
                          implementation of the Java Accessibility API for this class,
                          return this object, which is responsible for implementing the
                          AccessibleAction interface on behalf of itself.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAction" type="AccessibleAction" line="4881"/>
                    <javadoc line="4885">
                        Get the AccessibleComponent associated with this object.  In the
                          implementation of the Java Accessibility API for this class,
                          return this object, which is responsible for implementing the
                          AccessibleComponent interface on behalf of itself.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleComponent" type="AccessibleComponent" line="4893">
                        <comment line="4895">
                            to override getBounds()                            
                        </comment>
                    </method>
                    <javadoc line="4897">
                        Get the AccessibleSelection associated with this object if one
                          exists.  Otherwise return null.                        
                        <return>
                            the AccessibleSelection, or null                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSelection" type="AccessibleSelection" line="4903">
                        <declaration name="ac" type="AccessibleContext" line="4904"/>
                        <scope line="4905"/>
                        <scope line="4907"/>
                    </method>
                    <javadoc line="4912">
                        Get the AccessibleText associated with this object if one
                          exists.  Otherwise return null.                        
                        <return>
                            the AccessibleText, or null                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleText" type="AccessibleText" line="4918">
                        <declaration name="ac" type="AccessibleContext" line="4919"/>
                        <scope line="4920"/>
                        <scope line="4922"/>
                    </method>
                    <javadoc line="4927">
                        Get the AccessibleValue associated with this object if one
                          exists.  Otherwise return null.                        
                        <return>
                            the AccessibleValue, or null                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleValue" type="AccessibleValue" line="4933">
                        <declaration name="ac" type="AccessibleContext" line="4934"/>
                        <scope line="4935"/>
                        <scope line="4937"/>
                    </method>
                    <javadoc line="4945">
                        Get the background color of this object.                        
                        <return>
                            the background color, if supported, of the object;
                              otherwise, null                            
                        </return>
                    </javadoc>
                    <method name="getBackground" type="Color" line="4951">
                        <declaration name="ac" type="AccessibleContext" line="4952"/>
                        <scope line="4953"/>
                        <scope line="4955">
                            <declaration name="c" type="Component" line="4956"/>
                            <scope line="4957"/>
                            <scope line="4959"/>
                        </scope>
                    </method>
                    <javadoc line="4965">
                        Set the background color of this object.                        
                        <param>
                            c the new Color for the background                            
                        </param>
                    </javadoc>
                    <method name="setBackground" type="void" line="4970">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="4971"/>
                        <scope line="4972"/>
                        <scope line="4974">
                            <declaration name="cp" type="Component" line="4975"/>
                            <scope line="4976"/>
                        </scope>
                    </method>
                    <javadoc line="4983">
                        Get the foreground color of this object.                        
                        <return>
                            the foreground color, if supported, of the object;
                              otherwise, null                            
                        </return>
                    </javadoc>
                    <method name="getForeground" type="Color" line="4989">
                        <declaration name="ac" type="AccessibleContext" line="4990"/>
                        <scope line="4991"/>
                        <scope line="4993">
                            <declaration name="c" type="Component" line="4994"/>
                            <scope line="4995"/>
                            <scope line="4997"/>
                        </scope>
                    </method>
                    <method name="setForeground" type="void" line="5003">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5004"/>
                        <scope line="5005"/>
                        <scope line="5007">
                            <declaration name="cp" type="Component" line="5008"/>
                            <scope line="5009"/>
                        </scope>
                    </method>
                    <method name="getCursor" type="Cursor" line="5015">
                        <declaration name="ac" type="AccessibleContext" line="5016"/>
                        <scope line="5017"/>
                        <scope line="5019">
                            <declaration name="c" type="Component" line="5020"/>
                            <scope line="5021"/>
                            <scope line="5023">
                                <declaration name="ap" type="Accessible" line="5024"/>
                                <scope line="5025"/>
                                <scope line="5027"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="setCursor" type="void" line="5034">
                        <params>
                            <param name="c" type="Cursor"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5035"/>
                        <scope line="5036"/>
                        <scope line="5038">
                            <declaration name="cp" type="Component" line="5039"/>
                            <scope line="5040"/>
                        </scope>
                    </method>
                    <method name="getFont" type="Font" line="5046">
                        <declaration name="ac" type="AccessibleContext" line="5047"/>
                        <scope line="5048"/>
                        <scope line="5050">
                            <declaration name="c" type="Component" line="5051"/>
                            <scope line="5052"/>
                            <scope line="5054"/>
                        </scope>
                    </method>
                    <method name="setFont" type="void" line="5060">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5061"/>
                        <scope line="5062"/>
                        <scope line="5064">
                            <declaration name="c" type="Component" line="5065"/>
                            <scope line="5066"/>
                        </scope>
                    </method>
                    <method name="getFontMetrics" type="FontMetrics" line="5072">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5073"/>
                        <scope line="5074"/>
                        <scope line="5076">
                            <declaration name="c" type="Component" line="5077"/>
                            <scope line="5078"/>
                            <scope line="5080"/>
                        </scope>
                    </method>
                    <method name="isEnabled" type="boolean" line="5086">
                        <declaration name="ac" type="AccessibleContext" line="5087"/>
                        <scope line="5088"/>
                        <scope line="5090">
                            <declaration name="c" type="Component" line="5091"/>
                            <scope line="5092"/>
                            <scope line="5094"/>
                        </scope>
                    </method>
                    <method name="setEnabled" type="void" line="5100">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5101"/>
                        <scope line="5102"/>
                        <scope line="5104">
                            <declaration name="c" type="Component" line="5105"/>
                            <scope line="5106"/>
                        </scope>
                    </method>
                    <method name="isVisible" type="boolean" line="5112">
                        <declaration name="pathBounds" type="Rectangle" line="5113"/>
                        <declaration name="parentBounds" type="Rectangle" line="5114"/>
                    </method>
                    <method name="setVisible" type="void" line="5119">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                    </method>
                    <method name="isShowing" type="boolean" line="5122"/>
                    <method name="contains" type="boolean" line="5126">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5127"/>
                        <scope line="5128">
                            <declaration name="r" type="Rectangle" line="5129"/>
                        </scope>
                        <scope line="5131">
                            <declaration name="c" type="Component" line="5132"/>
                            <scope line="5133">
                                <declaration name="r" type="Rectangle" line="5134"/>
                            </scope>
                            <scope line="5136"/>
                        </scope>
                    </method>
                    <method name="getLocationOnScreen" type="Point" line="5142">
                        <scope line="5143">
                            <declaration name="treeLocation" type="Point" line="5144"/>
                            <declaration name="pathBounds" type="Rectangle" line="5145"/>
                            <scope line="5146">
                                <declaration name="nodeLocation" type="Point" line="5147"/>
                            </scope>
                            <scope line="5151"/>
                        </scope>
                        <scope line="5154"/>
                    </method>
                    <method name="getLocationInJTree" type="Point" line="5159">
                        <declaration name="r" type="Rectangle" line="5160"/>
                        <scope line="5161"/>
                        <scope line="5163"/>
                    </method>
                    <method name="getLocation" type="Point" line="5168">
                        <declaration name="r" type="Rectangle" line="5169"/>
                        <scope line="5170"/>
                        <scope line="5172"/>
                    </method>
                    <method name="setLocation" type="void" line="5177">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <method name="getBounds" type="Rectangle" line="5180">
                        <comment line="5190">
                            not visible!                            
                        </comment>
                        <declaration name="r" type="Rectangle" line="5181"/>
                        <declaration name="parent" type="Accessible" line="5182"/>
                        <scope line="5183">
                            <scope line="5184">
                                <declaration name="parentLoc" type="Point" line="5185"/>
                                <scope line="5186"/>
                                <scope line="5188"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="setBounds" type="void" line="5196">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5197"/>
                        <scope line="5198"/>
                        <scope line="5200">
                            <declaration name="c" type="Component" line="5201"/>
                            <scope line="5202"/>
                        </scope>
                    </method>
                    <method name="getSize" type="Dimension" line="5208"/>
                    <method name="setSize" type="void" line="5212">
                        <params>
                            <param name="d" type="Dimension"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5213"/>
                        <scope line="5214"/>
                        <scope line="5216">
                            <declaration name="c" type="Component" line="5217"/>
                            <scope line="5218"/>
                        </scope>
                    </method>
                    <javadoc line="5224">
                        Returns the &lt;code&gt;Accessible&lt;/code&gt; child, if one exists,
                          contained at the local coordinate &lt;code&gt;Point&lt;/code&gt;.
                          Otherwise returns &lt;code&gt;null&lt;/code&gt;.                        
                        <param>
                            p point in local coordinates of this
                              <code>Accessible</code>                            
                        </param>
                        <return>
                            the <code>Accessible</code>, if it exists,
                              at the specified location; else <code>null</code>                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleAt" type="Accessible" line="5234">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5235"/>
                        <scope line="5236"/>
                        <scope line="5238"/>
                    </method>
                    <method name="isFocusTraversable" type="boolean" line="5243">
                        <declaration name="ac" type="AccessibleContext" line="5244"/>
                        <scope line="5245"/>
                        <scope line="5247">
                            <declaration name="c" type="Component" line="5248"/>
                            <scope line="5249"/>
                            <scope line="5251"/>
                        </scope>
                    </method>
                    <method name="requestFocus" type="void" line="5257">
                        <declaration name="ac" type="AccessibleContext" line="5258"/>
                        <scope line="5259"/>
                        <scope line="5261">
                            <declaration name="c" type="Component" line="5262"/>
                            <scope line="5263"/>
                        </scope>
                    </method>
                    <method name="addFocusListener" type="void" line="5269">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5270"/>
                        <scope line="5271"/>
                        <scope line="5273">
                            <declaration name="c" type="Component" line="5274"/>
                            <scope line="5275"/>
                        </scope>
                    </method>
                    <method name="removeFocusListener" type="void" line="5281">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="5282"/>
                        <scope line="5283"/>
                        <scope line="5285">
                            <declaration name="c" type="Component" line="5286"/>
                            <scope line="5287"/>
                        </scope>
                    </method>
                    <javadoc line="5295">
                        Returns the number of items currently selected.
                          If no items are selected, the return value will be 0.                        
                        <return>
                            the number of items currently selected.                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSelectionCount" type="int" line="5301">
                        <declaration name="count" type="int" line="5302"/>
                        <declaration name="childCount" type="int" line="5303"/>
                        <scope line="5304">
                            <declaration name="childPath" type="TreePath" line="5305"/>
                            <scope line="5306"/>
                        </scope>
                    </method>
                    <javadoc line="5313">
                        Returns an Accessible representing the specified selected item
                          in the object.  If there isn&apos;t a selection, or there are
                          fewer items selected than the integer passed in, the return
                          value will be null.                        
                        <param>
                            i the zero-based index of selected items                            
                        </param>
                        <return>
                            an Accessible containing the selected item                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleSelection" type="Accessible" line="5322">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="5326">
                            out of range                            
                        </comment>
                        <declaration name="childCount" type="int" line="5323"/>
                        <scope line="5324"/>
                        <declaration name="count" type="int" line="5327"/>
                        <scope line="5328">
                            <declaration name="childPath" type="TreePath" line="5329"/>
                            <scope line="5330">
                                <scope line="5331"/>
                                <scope line="5333"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="5341">
                        Returns true if the current child of this object is selected.                        
                        <param>
                            i the zero-based index of the child in this Accessible
                              object.                            
                        </param>
                        <see>
                            AccessibleContext#getAccessibleChild                            
                        </see>
                    </javadoc>
                    <method name="isAccessibleChildSelected" type="boolean" line="5348">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="5352">
                            out of range                            
                        </comment>
                        <declaration name="childCount" type="int" line="5349"/>
                        <scope line="5350"/>
                        <scope line="5352">
                            <declaration name="childPath" type="TreePath" line="5353"/>
                        </scope>
                    </method>
                    <javadoc line="5358">
                        Adds the specified selected item in the object to the object&apos;s
                          selection.  If the object supports multiple selections,
                          the specified item is added to any existing selection, otherwise
                          it replaces any existing selection in the object.  If the
                          specified item is already selected, this method has no effect.                        
                        <param>
                            i the zero-based index of selectable items                            
                        </param>
                    </javadoc>
                    <method name="addAccessibleSelection" type="void" line="5367">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="model" type="TreeModel" line="5368"/>
                        <scope line="5369">
                            <scope line="5370">
                                <declaration name="path" type="TreePath" line="5371"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="5377">
                        Removes the specified selected item in the object from the
                          object&apos;s
                          selection.  If the specified item isn&apos;t currently selected, this
                          method has no effect.                        
                        <param>
                            i the zero-based index of selectable items                            
                        </param>
                    </javadoc>
                    <method name="removeAccessibleSelection" type="void" line="5385">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="model" type="TreeModel" line="5386"/>
                        <scope line="5387">
                            <scope line="5388">
                                <declaration name="path" type="TreePath" line="5389"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="5395">
                        Clears the selection in the object, so that nothing in the
                          object is selected.                        
                    </javadoc>
                    <method name="clearAccessibleSelection" type="void" line="5399">
                        <declaration name="childCount" type="int" line="5400"/>
                        <scope line="5401"/>
                    </method>
                    <javadoc line="5406">
                        Causes every selected item in the object to be selected
                          if the object supports multiple selections.                        
                    </javadoc>
                    <method name="selectAllAccessibleSelection" type="void" line="5410">
                        <declaration name="model" type="TreeModel" line="5411"/>
                        <scope line="5412">
                            <declaration name="childCount" type="int" line="5413"/>
                            <declaration name="path" type="TreePath" line="5414"/>
                            <scope line="5415"/>
                        </scope>
                    </method>
                    <javadoc line="5424">
                        Returns the number of accessible actions available in this
                          tree node.  If this node is not a leaf, there is at least
                          one action (toggle expand), in addition to any available
                          on the object behind the TreeCellRenderer.                        
                        <return>
                            the number of Actions in this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleActionCount" type="int" line="5432">
                        <declaration name="ac" type="AccessibleContext" line="5433"/>
                        <scope line="5434">
                            <declaration name="aa" type="AccessibleAction" line="5435"/>
                            <scope line="5436"/>
                        </scope>
                    </method>
                    <javadoc line="5443">
                        Return a description of the specified action of the tree node.
                          If this node is not a leaf, there is at least one action
                          description (toggle expand), in addition to any available
                          on the object behind the TreeCellRenderer.                        
                        <param>
                            i zero-based index of the actions                            
                        </param>
                        <return>
                            a description of the action                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleActionDescription" type="String" line="5452">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="5459">
                            TIGER - 4766636                            
                        </comment>
                        <scope line="5453"/>
                        <declaration name="ac" type="AccessibleContext" line="5456"/>
                        <scope line="5457"/>
                        <scope line="5460">
                            <declaration name="aa" type="AccessibleAction" line="5461"/>
                            <scope line="5462"/>
                        </scope>
                    </method>
                    <javadoc line="5469">
                        Perform the specified Action on the tree node.  If this node
                          is not a leaf, there is at least one action which can be
                          done (toggle expand), in addition to any available on the
                          object behind the TreeCellRenderer.                        
                        <param>
                            i zero-based index of actions                            
                        </param>
                        <return>
                            true if the the action was performed; else false.                            
                        </return>
                    </javadoc>
                    <method name="doAccessibleAction" type="boolean" line="5478">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="5479"/>
                        <declaration name="ac" type="AccessibleContext" line="5482"/>
                        <scope line="5483">
                            <scope line="5484"/>
                            <scope line="5486"/>
                        </scope>
                        <scope line="5490">
                            <declaration name="aa" type="AccessibleAction" line="5491"/>
                            <scope line="5492"/>
                        </scope>
                    </method>
                </class>
            </class>
        </class>
    </source>