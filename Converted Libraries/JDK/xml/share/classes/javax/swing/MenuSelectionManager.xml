<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.util"/>
        <import package="java.awt.event"/>
        <import package="javax.swing.event"/>
        <import package="sun.awt.AppContext"/>
        <class name="MenuSelectionManager" line="34">
            <comment line="43">
                                
            </comment>
            <comment line="44">
                trace creates and disposes                
            </comment>
            <comment line="45">
                show reuse hits/misses                
            </comment>
            <comment line="46">
                show bad params, misc.                
            </comment>
            <javadoc line="34">
                A MenuSelectionManager owns the selection in menu hierarchy.                
                <author>
                    Arnaud Weber                    
                </author>
            </javadoc>
            <declaration name="selection" type="Vector&lt;MenuElement&gt;" line="40"/>
            <declaration name="TRACE" type="boolean" line="43"/>
            <declaration name="VERBOSE" type="boolean" line="44"/>
            <declaration name="DEBUG" type="boolean" line="45"/>
            <declaration name="MENU_SELECTION_MANAGER_KEY" type="StringBuilder" line="47"/>
            <javadoc line="50">
                Returns the default menu selection manager.                
                <return>
                    a MenuSelectionManager object                    
                </return>
            </javadoc>
            <method name="defaultManager" type="MenuSelectionManager" line="55">
                <scope line="56">
                    <declaration name="context" type="AppContext" line="57"/>
                    <declaration name="msm" type="MenuSelectionManager" line="58"/>
                    <scope line="60"/>
                </scope>
            </method>
            <declaration name="changeEvent" type="ChangeEvent" line="69"/>
            <javadoc line="69">
                Only one ChangeEvent is needed per button model instance since the
                  event&apos;s only state is the source property.  The source of events
                  generated is always &quot;this&quot;.                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="75"/>
            <javadoc line="77">
                Changes the selection in the menu hierarchy.  The elements
                  in the array are sorted in order from the root menu
                  element to the currently selected menu element.
                  &lt;p&gt;
                  Note that this method is public but is used by the look and
                  feel engine and should not be called by client applications.                
                <param>
                    path  an array of <code>MenuElement</code> objects specifying
                      the selected path                    
                </param>
            </javadoc>
            <method name="setSelectedPath" type="void" line="88">
                <params>
                    <param name="path" type="MenuElement[]"/>
                </params>
                <declaration name="i" type="int" line="89"/>
                <declaration name="currentSelectionCount" type="int" line="90"/>
                <declaration name="firstDifference" type="int" line="91"/>
                <scope line="93"/>
                <scope line="97"/>
                <scope line="102"/>
                <scope line="109">
                    <declaration name="me" type="MenuElement" line="110"/>
                </scope>
                <scope line="115">
                    <scope line="116"/>
                </scope>
            </method>
            <javadoc line="125">
                Returns the path to the currently selected menu item                
                <return>
                    an array of MenuElement objects representing the selected path                    
                </return>
            </javadoc>
            <method name="getSelectedPath" type="MenuElement[]" line="130">
                <declaration name="res" type="MenuElement" line="131"/>
                <declaration name="i" type="int" line="132"/>
            </method>
            <javadoc line="138">
                Tell the menu selection to close and unselect all the menu components. Call this method
                  when a choice has been made                
            </javadoc>
            <method name="clearSelectedPath" type="void" line="142">
                <scope line="143"/>
            </method>
            <javadoc line="148">
                Adds a ChangeListener to the button.                
                <param>
                    l the listener to add                    
                </param>
            </javadoc>
            <method name="addChangeListener" type="void" line="153">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="157">
                Removes a ChangeListener from the button.                
                <param>
                    l the listener to remove                    
                </param>
            </javadoc>
            <method name="removeChangeListener" type="void" line="162">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="166">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this MenuSelectionManager with addChangeListener().                
                <return>
                    all of the <code>ChangeListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="174"/>
            <javadoc line="178">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="185">
                <comment line="186">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="188">
                    Process the listeners last to first, notifying                    
                </comment>
                <comment line="189">
                    those that are interested in this event                    
                </comment>
                <comment line="192">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="187"/>
                <scope line="190">
                    <scope line="191"/>
                </scope>
            </method>
            <javadoc line="200">
                When a MenuElement receives an event from a MouseListener, it should never process the event
                  directly. Instead all MenuElements should call this method with the event.                
                <param>
                    event  a MouseEvent object                    
                </param>
            </javadoc>
            <method name="processMouseEvent" type="void" line="206">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <comment line="223">
                    This can happen if a mouseReleased removes the                    
                </comment>
                <comment line="224">
                    containing component -- bug 4146684                    
                </comment>
                <comment line="230">
                    4188027: drag enter/exit added in JDK 1.1.7A, JDK1.2                    
                </comment>
                <comment line="271">
                    Send the event to visible menu element if menu element currently in
                      the selected path or contains the event location                    
                </comment>
                <comment line="285">
                    Enter/exit detection -- needs tuning...                    
                </comment>
                <declaration name="screenX" type="int" line="207"/>
                <declaration name="p" type="Point" line="208"/>
                <declaration name="i" type="int" line="209"/>
                <declaration name="mc" type="Component" line="210"/>
                <declaration name="r2" type="Rectangle" line="211"/>
                <declaration name="cWidth" type="int" line="212"/>
                <declaration name="menuElement" type="MenuElement" line="213"/>
                <declaration name="subElements" type="MenuElement" line="214"/>
                <declaration name="path" type="MenuElement" line="215"/>
                <declaration name="tmp" type="Vector" line="216"/>
                <declaration name="selectionSize" type="int" line="217"/>
                <declaration name="source" type="Component" line="220"/>
                <scope line="222"/>
                <declaration name="type" type="int" line="228"/>
                <declaration name="modifiers" type="int" line="229"/>
                <scope line="234"/>
                <scope line="238"/>
                <declaration name="success" type="boolean" line="247"/>
                <scope line="248">
                    <scope line="253">
                        <scope line="259"/>
                        <scope line="262"/>
                        <scope line="275">
                            <declaration name="k" type="int" line="276"/>
                            <scope line="277"/>
                            <declaration name="currentSelection" type="MenuElement" line="283"/>
                            <scope line="290">
                                <declaration name="oldMC" type="Component" line="291"/>
                                <declaration name="exitEvent" type="MouseEvent" line="293"/>
                                <declaration name="enterEvent" type="MouseEvent" line="304"/>
                            </scope>
                            <declaration name="mouseEvent" type="MouseEvent" line="315"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="printMenuElementArray" type="void" line="330">
                <params>
                    <param name="path" type="MenuElement"/>
                </params>
            </method>
            <method name="printMenuElementArray" type="void" line="334">
                <params>
                    <param name="path" type="MenuElement"/>
                    <param name="dumpStack" type="boolean"/>
                </params>
                <declaration name="i" type="int" line="336"/>
                <scope line="337">
                    <declaration name="me" type="MenuElement" line="340"/>
                    <scope line="341"/>
                    <scope line="343"/>
                    <scope line="345"/>
                    <scope line="347"/>
                    <scope line="349"/>
                </scope>
            </method>
            <javadoc line="359">
                Returns the component in the currently selected path
                  which contains sourcePoint.                
                <param>
                    source The component in whose coordinate space sourcePoint
                      is given                    
                </param>
                <param>
                    sourcePoint The point which is being tested                    
                </param>
                <return>
                    The component in the currently selected path which
                      contains sourcePoint (relative to the source component's
                      coordinate space.  If sourcePoint is not inside a component
                      on the currently selected path, null is returned.                    
                </return>
            </javadoc>
            <method name="componentForPoint" type="Component" line="371">
                <params>
                    <param name="source" type="Component"/>
                    <param name="sourcePoint" type="Point"/>
                </params>
                <comment line="412">
                    Return the deepest component on the selection
                      path in whose bounds the event&apos;s point occurs                    
                </comment>
                <declaration name="screenX" type="int" line="372"/>
                <declaration name="p" type="Point" line="373"/>
                <declaration name="i" type="int" line="374"/>
                <declaration name="mc" type="Component" line="375"/>
                <declaration name="r2" type="Rectangle" line="376"/>
                <declaration name="cWidth" type="int" line="377"/>
                <declaration name="menuElement" type="MenuElement" line="378"/>
                <declaration name="subElements" type="MenuElement" line="379"/>
                <declaration name="tmp" type="Vector" line="380"/>
                <declaration name="selectionSize" type="int" line="381"/>
                <scope line="390">
                    <scope line="394">
                        <scope line="400"/>
                        <scope line="403"/>
                        <scope line="415"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="423">
                When a MenuElement receives an event from a KeyListener, it should never process the event
                  directly. Instead all MenuElements should call this method with the event.                
                <param>
                    e  a KeyEvent object                    
                </param>
            </javadoc>
            <method name="processKeyEvent" type="void" line="429">
                <params>
                    <param name="e" type="KeyEvent"/>
                </params>
                <comment line="462">
                    finally dispatch event to the first component in path                    
                </comment>
                <declaration name="sel2" type="MenuElement[]" line="430"/>
                <declaration name="selSize" type="int" line="432"/>
                <declaration name="path" type="MenuElement[]" line="433"/>
                <scope line="435"/>
                <scope line="439">
                    <declaration name="elem" type="MenuElement" line="440"/>
                    <declaration name="subs" type="MenuElement[]" line="441"/>
                    <scope line="444">
                        <scope line="446"/>
                        <scope line="450"/>
                        <scope line="456"/>
                    </scope>
                </scope>
                <scope line="466"/>
            </method>
            <javadoc line="471">
                Return true if c is part of the currently used menu                
            </javadoc>
            <method name="isComponentPartOfCurrentMenu" type="boolean" line="474">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <scope line="475">
                    <declaration name="me" type="MenuElement" line="476"/>
                </scope>
            </method>
            <method name="isComponentPartOfCurrentMenu" type="boolean" line="482">
                <params>
                    <param name="root" type="MenuElement"/>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="children" type="MenuElement" line="483"/>
                <declaration name="i" type="int" line="484"/>
                <scope line="491">
                    <scope line="493"/>
                </scope>
            </method>
        </class>
    </source>