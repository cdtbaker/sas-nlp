<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <interface name="ListSelectionModel">
            <javadoc line="30">
                This interface represents the current state of the
                  selection for any of the components that display a
                  list of values with stable indices.  The selection is
                  modeled as a set of intervals, each interval represents
                  a contiguous range of selected list elements.
                  The methods for modifying the set of selected intervals
                  all take a pair of indices, index0 and index1, that represent
                  a closed interval, i.e. the interval includes both index0 and
                  index1.                
                <author>
                    Hans Muller                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <see>
                    DefaultListSelectionModel                    
                </see>
            </javadoc>
            <declaration name="SINGLE_SELECTION" type="int" line="48"/>
            <javadoc line="48">
                A value for the selectionMode property: select one list index
                  at a time.                
                <see>
                    #setSelectionMode                    
                </see>
            </javadoc>
            <declaration name="SINGLE_INTERVAL_SELECTION" type="int" line="56"/>
            <javadoc line="56">
                A value for the selectionMode property: select one contiguous
                  range of indices at a time.                
                <see>
                    #setSelectionMode                    
                </see>
            </javadoc>
            <declaration name="MULTIPLE_INTERVAL_SELECTION" type="int" line="64"/>
            <javadoc line="64">
                A value for the selectionMode property: select one or more
                  contiguous ranges of indices at a time.                
                <see>
                    #setSelectionMode                    
                </see>
            </javadoc>
            <method name="setSelectionInterval" type="void" line="73"/>
            <javadoc line="73">
                Changes the selection to be between {@code index0} and {@code index1}inclusive. {@code index0} doesn&apos;t have to be less than or equal to{@code index1}.
                  &lt;p&gt;
                  In {@code SINGLE_SELECTION} selection mode, only the second index
                  is used.
                  &lt;p&gt;
                  If this represents a change to the current selection, then each{@code ListSelectionListener} is notified of the change.                
                <param>
                    index0 one end of the interval.                    
                </param>
                <param>
                    index1 other end of the interval                    
                </param>
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
            <method name="addSelectionInterval" type="void" line="91"/>
            <javadoc line="91">
                Changes the selection to be the set union of the current selection
                  and the indices between {@code index0} and {@code index1} inclusive.{@code index0} doesn&apos;t have to be less than or equal to {@code index1}.
                  &lt;p&gt;
                  In {@code SINGLE_SELECTION} selection mode, this is equivalent
                  to calling {@code setSelectionInterval}, and only the second index
                  is used. In {@code SINGLE_INTERVAL_SELECTION} selection mode, this
                  method behaves like {@code setSelectionInterval}, unless the given
                  interval is immediately adjacent to or overlaps the existing selection,
                  and can therefore be used to grow the selection.
                  &lt;p&gt;
                  If this represents a change to the current selection, then each{@code ListSelectionListener} is notified of the change.                
                <param>
                    index0 one end of the interval.                    
                </param>
                <param>
                    index1 other end of the interval                    
                </param>
                <see>
                    #addListSelectionListener                    
                </see>
                <see>
                    #setSelectionInterval                    
                </see>
            </javadoc>
            <method name="removeSelectionInterval" type="void" line="114"/>
            <javadoc line="114">
                Changes the selection to be the set difference of the current selection
                  and the indices between {@code index0} and {@code index1} inclusive.{@code index0} doesn&apos;t have to be less than or equal to {@code index1}.
                  &lt;p&gt;
                  In {@code SINGLE_INTERVAL_SELECTION} selection mode, if the removal
                  would produce two disjoint selections, the removal is extended through
                  the greater end of the selection. For example, if the selection is{@code 0-10} and you supply indices {@code 5,6} (in any order) the
                  resulting selection is {@code 0-4}.
                  &lt;p&gt;
                  If this represents a change to the current selection, then each{@code ListSelectionListener} is notified of the change.                
                <param>
                    index0 one end of the interval.                    
                </param>
                <param>
                    index1 other end of the interval                    
                </param>
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
            <method name="getMinSelectionIndex" type="int" line="135"/>
            <javadoc line="135">
                Returns the first selected index or -1 if the selection is empty.                
            </javadoc>
            <method name="getMaxSelectionIndex" type="int" line="141"/>
            <javadoc line="141">
                Returns the last selected index or -1 if the selection is empty.                
            </javadoc>
            <method name="isSelectedIndex" type="boolean" line="147"/>
            <javadoc line="147">
                Returns true if the specified index is selected.                
            </javadoc>
            <method name="getAnchorSelectionIndex" type="int" line="153"/>
            <javadoc line="153">
                Return the first index argument from the most recent call to
                  setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().
                  The most recent index0 is considered the &quot;anchor&quot; and the most recent
                  index1 is considered the &quot;lead&quot;.  Some interfaces display these
                  indices specially, e.g. Windows95 displays the lead index with a
                  dotted yellow outline.                
                <see>
                    #getLeadSelectionIndex                    
                </see>
                <see>
                    #setSelectionInterval                    
                </see>
                <see>
                    #addSelectionInterval                    
                </see>
            </javadoc>
            <method name="setAnchorSelectionIndex" type="void" line="168"/>
            <javadoc line="168">
                Set the anchor selection index.                
                <see>
                    #getAnchorSelectionIndex                    
                </see>
            </javadoc>
            <method name="getLeadSelectionIndex" type="int" line="176"/>
            <javadoc line="176">
                Return the second index argument from the most recent call to
                  setSelectionInterval(), addSelectionInterval() or removeSelectionInterval().                
                <see>
                    #getAnchorSelectionIndex                    
                </see>
                <see>
                    #setSelectionInterval                    
                </see>
                <see>
                    #addSelectionInterval                    
                </see>
            </javadoc>
            <method name="setLeadSelectionIndex" type="void" line="186"/>
            <javadoc line="186">
                Set the lead selection index.                
                <see>
                    #getLeadSelectionIndex                    
                </see>
            </javadoc>
            <method name="clearSelection" type="void" line="193"/>
            <javadoc line="193">
                Change the selection to the empty set.  If this represents
                  a change to the current selection then notify each ListSelectionListener.                
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
            <method name="isSelectionEmpty" type="boolean" line="201"/>
            <javadoc line="201">
                Returns true if no indices are selected.                
            </javadoc>
            <method name="insertIndexInterval" type="void" line="206"/>
            <javadoc line="206">
                Insert length indices beginning before/after index.  This is typically
                  called to sync the selection model with a corresponding change
                  in the data model.                
            </javadoc>
            <method name="removeIndexInterval" type="void" line="213"/>
            <javadoc line="213">
                Remove the indices in the interval index0,index1 (inclusive) from
                  the selection model.  This is typically called to sync the selection
                  model width a corresponding change in the data model.                
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="220"/>
            <javadoc line="220">
                Sets the {@code valueIsAdjusting} property, which indicates whether
                  or not upcoming selection changes should be considered part of a single
                  change. The value of this property is used to initialize the{@code valueIsAdjusting} property of the {@code ListSelectionEvent}s that
                  are generated.
                  &lt;p&gt;
                  For example, if the selection is being updated in response to a user
                  drag, this property can be set to {@code true} when the drag is initiated
                  and set to {@code false} when the drag is finished. During the drag,
                  listeners receive events with a {@code valueIsAdjusting} property
                  set to {@code true}. At the end of the drag, when the change is
                  finalized, listeners receive an event with the value set to {@code false}.
                  Listeners can use this pattern if they wish to update only when a change
                  has been finalized.
                  &lt;p&gt;
                  Setting this property to {@code true} begins a series of changes that
                  is to be considered part of a single change. When the property is changed
                  back to {@code false}, an event is sent out characterizing the entire
                  selection change (if there was one), with the event&apos;s{@code valueIsAdjusting} property set to {@code false}.                
                <param>
                    valueIsAdjusting the new value of the property                    
                </param>
                <see>
                    #getValueIsAdjusting                    
                </see>
                <see>
                    javax.swing.event.ListSelectionEvent#getValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="248"/>
            <javadoc line="248">
                Returns {@code true} if the selection is undergoing a series of changes.                
                <return>
                    true if the selection is undergoing a series of changes                    
                </return>
                <see>
                    #setValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="setSelectionMode" type="void" line="256"/>
            <javadoc line="256">
                Sets the selection mode. The following list describes the accepted
                  selection modes:
                  &lt;ul&gt;
                  &lt;li&gt;{@code ListSelectionModel.SINGLE_SELECTION} -
                  Only one list index can be selected at a time. In this mode,{@code setSelectionInterval} and {@code addSelectionInterval} are
                  equivalent, both replacing the current selection with the index
                  represented by the second argument (the &quot;lead&quot;).
                  &lt;li&gt;{@code ListSelectionModel.SINGLE_INTERVAL_SELECTION} -
                  Only one contiguous interval can be selected at a time.
                  In this mode, {@code addSelectionInterval} behaves like{@code setSelectionInterval} (replacing the current selection),
                  unless the given interval is immediately adjacent to or overlaps
                  the existing selection, and can therefore be used to grow it.
                  &lt;li&gt;{@code ListSelectionModel.MULTIPLE_INTERVAL_SELECTION} -
                  In this mode, there&apos;s no restriction on what can be selected.
                  &lt;/ul&gt;                
                <see>
                    #getSelectionMode                    
                </see>
                <throws>
                    IllegalArgumentException if the selection mode isn't
                      one of those allowed                    
                </throws>
            </javadoc>
            <method name="getSelectionMode" type="int" line="281"/>
            <javadoc line="281">
                Returns the current selection mode.                
                <return>
                    the current selection mode                    
                </return>
                <see>
                    #setSelectionMode                    
                </see>
            </javadoc>
            <method name="addListSelectionListener" type="void" line="289"/>
            <javadoc line="289">
                Add a listener to the list that&apos;s notified each time a change
                  to the selection occurs.                
                <param>
                    x the ListSelectionListener                    
                </param>
                <see>
                    #removeListSelectionListener                    
                </see>
                <see>
                    #setSelectionInterval                    
                </see>
                <see>
                    #addSelectionInterval                    
                </see>
                <see>
                    #removeSelectionInterval                    
                </see>
                <see>
                    #clearSelection                    
                </see>
                <see>
                    #insertIndexInterval                    
                </see>
                <see>
                    #removeIndexInterval                    
                </see>
            </javadoc>
            <method name="removeListSelectionListener" type="void" line="304"/>
            <javadoc line="304">
                Remove a listener from the list that&apos;s notified each time a
                  change to the selection occurs.                
                <param>
                    x the ListSelectionListener                    
                </param>
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
        </interface>
    </source>