<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event.SwingPropertyChangeSupport"/>
        <import package="java.lang.reflect"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.Map"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.ResourceBundle"/>
        <import package="java.util.ResourceBundle.Control"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="java.util.MissingResourceException"/>
        <import package="java.awt.Font"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Dimension"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.AccessControlContext"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="sun.reflect.misc.MethodUtil"/>
        <import package="sun.reflect.misc.ReflectUtil"/>
        <import package="sun.util.CoreResourceBundleControl"/>
        <class name="UIDefaults" line="28">
            <extends class="Hashtable">
                <type_params>
                    <type_param name="Object"/>
                    <type_param name="Object"/>
                </type_params>
            </extends>
            <javadoc line="28">
                A table of defaults for Swing components.  Applications can set/get
                  default values via the &lt;code&gt;UIManager&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    UIManager                    
                </see>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="PENDING" type="Object" line="44"/>
            <declaration name="changeSupport" type="SwingPropertyChangeSupport" line="45"/>
            <declaration name="resourceBundles" type="Vector&lt;String&gt;" line="46"/>
            <declaration name="defaultLocale" type="Locale" line="47"/>
            <declaration name="resourceCache" type="Map&lt;Locale,Map&lt;String,Object&gt;&gt;" line="48"/>
            <javadoc line="48">
                Maps from a Locale to a cached Map of the ResourceBundle. This is done
                  so as to avoid an exception being thrown when a value is asked for.
                  Access to this should be done while holding a lock on the
                  UIDefaults, eg synchronized(this).                
            </javadoc>
            <javadoc line="55">
                Creates an empty defaults table.                
            </javadoc>
            <method name="UIDefaults" type="constructor" line="58"/>
            <javadoc line="61">
                Creates an empty defaults table with the specified initial capacity and
                  load factor.                
                <param>
                    initialCapacity   the initial capacity of the defaults table                    
                </param>
                <param>
                    loadFactor        the load factor of the defaults table                    
                </param>
                <see>
                    java.util.Hashtable                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="UIDefaults" type="constructor" line="69">
                <params>
                    <param name="initialCapacity" type="int"/>
                    <param name="loadFactor" type="float"/>
                </params>
            </method>
            <javadoc line="73">
                Creates a defaults table initialized with the specified
                  key/value pairs.  For example:
                  &lt;pre&gt;
                  Object[] uiDefaults = {
                  &quot;Font&quot;, new Font(&quot;Dialog&quot;, Font.BOLD, 12),
                  &quot;Color&quot;, Color.red,
                  &quot;five&quot;, new Integer(5)
                  }
                  UIDefaults myDefaults = new UIDefaults(uiDefaults);
                  &lt;/pre&gt;                
                <param>
                    keyValueList  an array of objects containing the key/value
                      pairs                    
                </param>
            </javadoc>
            <method name="UIDefaults" type="constructor" line="87">
                <params>
                    <param name="keyValueList" type="Object[]"/>
                </params>
                <scope line="89"/>
            </method>
            <javadoc line="93">
                Returns the value for key.  If the value is a
                  &lt;code&gt;UIDefaults.LazyValue&lt;/code&gt; then the real
                  value is computed with &lt;code&gt;LazyValue.createValue()&lt;/code&gt;,
                  the table entry is replaced, and the real value is returned.
                  If the value is an &lt;code&gt;UIDefaults.ActiveValue&lt;/code&gt;
                  the table entry is not replaced - the value is computed
                  with &lt;code&gt;ActiveValue.createValue()&lt;/code&gt; for each
                  &lt;code&gt;get()&lt;/code&gt; call.
                  If the key is not found in the table then it is searched for in the list
                  of resource bundles maintained by this object.  The resource bundles are
                  searched most recently added first using the locale returned by
                  &lt;code&gt;getDefaultLocale&lt;/code&gt;.  &lt;code&gt;LazyValues&lt;/code&gt; and
                  &lt;code&gt;ActiveValues&lt;/code&gt; are not supported in the resource bundles.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    the value for <code>key</code>                    
                </return>
                <see>
                    LazyValue                    
                </see>
                <see>
                    ActiveValue                    
                </see>
                <see>
                    java.util.Hashtable#get                    
                </see>
                <see>
                    #getDefaultLocale                    
                </see>
                <see>
                    #addResourceBundle                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="get" type="Object" line="116">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="117"/>
            </method>
            <javadoc line="120">
                Looks up up the given key in our Hashtable and resolves LazyValues
                  or ActiveValues.                
            </javadoc>
            <method name="getFromHashtable" type="Object" line="124">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="125"/>
                <scope line="126"/>
                <scope line="129">
                    <scope line="131">
                        <scope line="132">
                            <scope line="133"/>
                            <scope line="136"/>
                        </scope>
                    </scope>
                    <scope line="143"/>
                    <scope line="146"/>
                </scope>
                <scope line="150">
                    <scope line="151"/>
                    <scope line="154">
                        <scope line="155">
                            <scope line="156"/>
                            <scope line="159"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="166"/>
            </method>
            <javadoc line="171">
                Returns the value for key associated with the given locale.
                  If the value is a &lt;code&gt;UIDefaults.LazyValue&lt;/code&gt; then the real
                  value is computed with &lt;code&gt;LazyValue.createValue()&lt;/code&gt;,
                  the table entry is replaced, and the real value is returned.
                  If the value is an &lt;code&gt;UIDefaults.ActiveValue&lt;/code&gt;
                  the table entry is not replaced - the value is computed
                  with &lt;code&gt;ActiveValue.createValue()&lt;/code&gt; for each
                  &lt;code&gt;get()&lt;/code&gt; call.
                  If the key is not found in the table then it is searched for in the list
                  of resource bundles maintained by this object.  The resource bundles are
                  searched most recently added first using the given locale.
                  &lt;code&gt;LazyValues&lt;/code&gt; and &lt;code&gt;ActiveValues&lt;/code&gt; are not supported
                  in the resource bundles.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired <code>locale</code>                    
                </param>
                <return>
                    the value for <code>key</code>                    
                </return>
                <see>
                    LazyValue                    
                </see>
                <see>
                    ActiveValue                    
                </see>
                <see>
                    java.util.Hashtable#get                    
                </see>
                <see>
                    #addResourceBundle                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="get" type="Object" line="194">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="195"/>
            </method>
            <javadoc line="198">
                Looks up given key in our resource bundles.                
            </javadoc>
            <method name="getFromResourceBundle" type="Object" line="201">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <scope line="202"/>
                <scope line="205"/>
                <scope line="209"/>
            </method>
            <javadoc line="213">
                Returns a Map of the known resources for the given locale.                
            </javadoc>
            <method name="getResourceCache" type="Map<String,Object>" line="216">
                <params>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="values" type="Map&lt;String,Object&gt;" line="217"/>
                <scope line="218">
                    <scope line="220">
                        <declaration name="bundleName" type="String" line="221"/>
                        <scope line="222">
                            <declaration name="c" type="Control" line="223"/>
                            <declaration name="b" type="ResourceBundle" line="224"/>
                            <scope line="225"/>
                            <scope line="228"/>
                            <declaration name="keys" type="Enumeration" line="231"/>
                            <scope line="232">
                                <declaration name="key" type="String" line="233"/>
                                <scope line="234">
                                    <declaration name="value" type="Object" line="235"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="240"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="247">
                Sets the value of &lt;code&gt;key&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; for all locales.
                  If &lt;code&gt;key&lt;/code&gt; is a string and the new value isn&apos;t
                  equal to the old one, fire a &lt;code&gt;PropertyChangeEvent&lt;/code&gt;.
                  If value is &lt;code&gt;null&lt;/code&gt;, the key is removed from the table.                
                <param>
                    key    the unique <code>Object</code> who's value will be used
                      to retrieve the data value associated with it                    
                </param>
                <param>
                    value  the new <code>Object</code> to store as data under
                      that key                    
                </param>
                <return>
                    the previous <code>Object</code> value, or <code>null</code>                    
                </return>
                <see>
                    #putDefaults                    
                </see>
                <see>
                    java.util.Hashtable#put                    
                </see>
            </javadoc>
            <method name="put" type="Object" line="260">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="oldValue" type="Object" line="261"/>
                <scope line="262"/>
            </method>
            <javadoc line="267">
                Puts all of the key/value pairs in the database and
                  unconditionally generates one &lt;code&gt;PropertyChangeEvent&lt;/code&gt;.
                  The events oldValue and newValue will be &lt;code&gt;null&lt;/code&gt; and its
                  &lt;code&gt;propertyName&lt;/code&gt; will be &quot;UIDefaults&quot;.  The key/value pairs are
                  added for all locales.                
                <param>
                    keyValueList  an array of key/value pairs                    
                </param>
                <see>
                    #put                    
                </see>
                <see>
                    java.util.Hashtable#put                    
                </see>
            </javadoc>
            <method name="putDefaults" type="void" line="277">
                <params>
                    <param name="keyValueList" type="Object[]"/>
                </params>
                <scope line="278">
                    <declaration name="value" type="Object" line="279"/>
                    <scope line="280"/>
                    <scope line="283"/>
                </scope>
            </method>
            <javadoc line="289">
                If the value of &lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;Font&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is a <code>Font</code>,
                      return the <code>Font</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getFont" type="Font" line="297">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="298"/>
            </method>
            <javadoc line="301">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is a &lt;code&gt;Font&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is a <code>Font</code>,
                      return the <code>Font</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getFont" type="Font" line="312">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="313"/>
            </method>
            <javadoc line="316">
                If the value of &lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;Color&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is a <code>Color</code>,
                      return the <code>Color</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getColor" type="Color" line="324">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="325"/>
            </method>
            <javadoc line="328">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is a &lt;code&gt;Color&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is a <code>Color</code>,
                      return the <code>Color</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getColor" type="Color" line="339">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="340"/>
            </method>
            <javadoc line="343">
                If the value of &lt;code&gt;key&lt;/code&gt; is an &lt;code&gt;Icon&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is an <code>Icon</code>,
                      return the <code>Icon</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getIcon" type="Icon" line="351">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="352"/>
            </method>
            <javadoc line="355">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is an &lt;code&gt;Icon&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is an <code>Icon</code>,
                      return the <code>Icon</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getIcon" type="Icon" line="366">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="367"/>
            </method>
            <javadoc line="370">
                If the value of &lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;Border&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is a <code>Border</code>,
                      return the <code>Border</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getBorder" type="Border" line="378">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="379"/>
            </method>
            <javadoc line="382">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is a &lt;code&gt;Border&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is a <code>Border</code>,
                      return the <code>Border</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBorder" type="Border" line="393">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="394"/>
            </method>
            <javadoc line="397">
                If the value of &lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;String&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is a <code>String</code>,
                      return the <code>String</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getString" type="String" line="405">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="406"/>
            </method>
            <javadoc line="409">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is a &lt;code&gt;String&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired <code>Locale</code>                    
                </param>
                <return>
                    if the value for <code>key</code> for the given
                      <code>Locale</code> is a <code>String</code>,
                      return the <code>String</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getString" type="String" line="420">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="421"/>
            </method>
            <javadoc line="424">
                If the value of &lt;code&gt;key&lt;/code&gt; is an &lt;code&gt;Integer&lt;/code&gt; return its
                  integer value, otherwise return 0.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is an <code>Integer</code>,
                      return its value, otherwise return 0                    
                </return>
            </javadoc>
            <method name="getInt" type="int" line="431">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="432"/>
            </method>
            <javadoc line="435">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is an &lt;code&gt;Integer&lt;/code&gt; return its integer value, otherwise return 0.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is an <code>Integer</code>,
                      return its value, otherwise return 0                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInt" type="int" line="445">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="446"/>
            </method>
            <javadoc line="449">
                If the value of &lt;code&gt;key&lt;/code&gt; is boolean, return the
                  boolean value, otherwise return false.                
                <param>
                    key an <code>Object</code> specifying the key for the desired boolean value                    
                </param>
                <return>
                    if the value of <code>key</code> is boolean, return the
                      boolean value, otherwise return false.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBoolean" type="boolean" line="457">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="458"/>
            </method>
            <javadoc line="461">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is boolean, return the boolean value, otherwise return false.                
                <param>
                    key an <code>Object</code> specifying the key for the desired boolean value                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is boolean, return the
                      boolean value, otherwise return false.                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getBoolean" type="boolean" line="471">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="472"/>
            </method>
            <javadoc line="475">
                If the value of &lt;code&gt;key&lt;/code&gt; is an &lt;code&gt;Insets&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is an <code>Insets</code>,
                      return the <code>Insets</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getInsets" type="Insets" line="483">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="484"/>
            </method>
            <javadoc line="487">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is an &lt;code&gt;Insets&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is an <code>Insets</code>,
                      return the <code>Insets</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getInsets" type="Insets" line="498">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="499"/>
            </method>
            <javadoc line="502">
                If the value of &lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;Dimension&lt;/code&gt; return it,
                  otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <return>
                    if the value for <code>key</code> is a <code>Dimension</code>,
                      return the <code>Dimension</code> object; otherwise return
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getDimension" type="Dimension" line="510">
                <params>
                    <param name="key" type="Object"/>
                </params>
                <declaration name="value" type="Object" line="511"/>
            </method>
            <javadoc line="514">
                If the value of &lt;code&gt;key&lt;/code&gt; for the given &lt;code&gt;Locale&lt;/code&gt;
                  is a &lt;code&gt;Dimension&lt;/code&gt; return it, otherwise return &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    key the desired key                    
                </param>
                <param>
                    l the desired locale                    
                </param>
                <return>
                    if the value for <code>key</code> and <code>Locale</code>
                      is a <code>Dimension</code>,
                      return the <code>Dimension</code> object; otherwise return
                      <code>null</code>                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDimension" type="Dimension" line="525">
                <params>
                    <param name="key" type="Object"/>
                    <param name="l" type="Locale"/>
                </params>
                <declaration name="value" type="Object" line="526"/>
            </method>
            <javadoc line="529">
                The value of &lt;code&gt;get(uidClassID)&lt;/code&gt; must be the
                  &lt;code&gt;String&lt;/code&gt; name of a
                  class that implements the corresponding &lt;code&gt;ComponentUI&lt;/code&gt;
                  class.  If the class hasn&apos;t been loaded before, this method looks
                  up the class with &lt;code&gt;uiClassLoader.loadClass()&lt;/code&gt; if a non
                  &lt;code&gt;null&lt;/code&gt;
                  class loader is provided, &lt;code&gt;classForName()&lt;/code&gt; otherwise.
                  &lt;p&gt;
                  If a mapping for &lt;code&gt;uiClassID&lt;/code&gt; exists or if the specified
                  class can&apos;t be found, return &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  This method is used by &lt;code&gt;getUI&lt;/code&gt;, it&apos;s usually
                  not necessary to call it directly.                
                <param>
                    uiClassID  a string containing the class ID                    
                </param>
                <param>
                    uiClassLoader the object which will load the class                    
                </param>
                <return>
                    the value of <code>Class.forName(get(uidClassID))</code>                    
                </return>
                <see>
                    #getUI                    
                </see>
            </javadoc>
            <method name="getUIClass" type="Class<? extends ComponentUI>" line="548">
                <params>
                    <param name="uiClassID" type="String"/>
                    <param name="uiClassLoader" type="ClassLoader"/>
                </params>
                <scope line="549">
                    <declaration name="className" type="String" line="550"/>
                    <scope line="551">
                        <declaration name="cls" type="Class" line="552"/>
                        <scope line="553">
                            <scope line="554"/>
                            <scope line="557"/>
                            <scope line="560"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="567"/>
                <scope line="570"/>
            </method>
            <javadoc line="575">
                Returns the L&amp;F class that renders this component.                
                <param>
                    uiClassID a string containing the class ID                    
                </param>
                <return>
                    the Class object returned by
                      <code>getUIClass(uiClassID, null)</code>                    
                </return>
            </javadoc>
            <method name="getUIClass" type="Class<? extends ComponentUI>" line="581">
                <params>
                    <param name="uiClassID" type="String"/>
                </params>
            </method>
            <javadoc line="584">
                If &lt;code&gt;getUI()&lt;/code&gt; fails for any reason,
                  it calls this method before returning &lt;code&gt;null&lt;/code&gt;.
                  Subclasses may choose to do more or less here.                
                <param>
                    msg message string to print                    
                </param>
                <see>
                    #getUI                    
                </see>
            </javadoc>
            <method name="getUIError" type="void" line="591">
                <params>
                    <param name="msg" type="String"/>
                </params>
                <scope line="593"/>
                <scope line="596"/>
            </method>
            <javadoc line="600">
                Creates an &lt;code&gt;ComponentUI&lt;/code&gt; implementation for the
                  specified component.  In other words create the look
                  and feel specific delegate object for &lt;code&gt;target&lt;/code&gt;.
                  This is done in two steps:
                  &lt;ul&gt;
                  &lt;li&gt; Look up the name of the &lt;code&gt;ComponentUI&lt;/code&gt; implementation
                  class under the value returned by &lt;code&gt;target.getUIClassID()&lt;/code&gt;.
                  &lt;li&gt; Use the implementation classes static &lt;code&gt;createUI()&lt;/code&gt;
                  method to construct a look and feel delegate.
                  &lt;/ul&gt;                
                <param>
                    target  the <code>JComponent</code> which needs a UI                    
                </param>
                <return>
                    the <code>ComponentUI</code> object                    
                </return>
            </javadoc>
            <method name="getUI" type="ComponentUI" line="614">
                <params>
                    <param name="target" type="JComponent"/>
                </params>
                <declaration name="cl" type="Object" line="615"/>
                <declaration name="uiClassLoader" type="ClassLoader" line="616"/>
                <declaration name="uiClass" type="Class&lt;? extends ComponentUI&gt;" line="617"/>
                <declaration name="uiObject" type="Object" line="618"/>
                <scope line="619"/>
                <scope line="622">
                    <scope line="623">
                        <declaration name="m" type="Method" line="624"/>
                        <scope line="625"/>
                    </scope>
                    <scope line="631"/>
                    <scope line="634"/>
                </scope>
            </method>
            <javadoc line="640">
                Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.
                  The listener is registered for all properties.
                  &lt;p&gt;
                  A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired whenever a default
                  is changed.                
                <param>
                    listener  the <code>PropertyChangeListener</code> to be added                    
                </param>
                <see>
                    java.beans.PropertyChangeSupport                    
                </see>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="649">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="650"/>
            </method>
            <javadoc line="655">
                Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the listener list.
                  This removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; that was registered
                  for all properties.                
                <param>
                    listener  the <code>PropertyChangeListener</code> to be removed                    
                </param>
                <see>
                    java.beans.PropertyChangeSupport                    
                </see>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="662">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="663"/>
            </method>
            <javadoc line="667">
                Returns an array of all the &lt;code&gt;PropertyChangeListener&lt;/code&gt;s added
                  to this UIDefaults with addPropertyChangeListener().                
                <return>
                    all of the <code>PropertyChangeListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="674">
                <scope line="675"/>
            </method>
            <javadoc line="680">
                Support for reporting bound property changes.  If oldValue and
                  newValue are not equal and the &lt;code&gt;PropertyChangeEvent&lt;/code&gt;x
                  listener list isn&apos;t empty, then fire a
                  &lt;code&gt;PropertyChange&lt;/code&gt; event to each listener.                
                <param>
                    propertyName  the programmatic name of the property
                      that was changed                    
                </param>
                <param>
                    oldValue  the old value of the property                    
                </param>
                <param>
                    newValue  the new value of the property                    
                </param>
                <see>
                    java.beans.PropertyChangeSupport                    
                </see>
            </javadoc>
            <method name="firePropertyChange" type="void" line="691">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="692"/>
            </method>
            <javadoc line="696">
                Adds a resource bundle to the list of resource bundles that are
                  searched for localized values.  Resource bundles are searched in the
                  reverse order they were added.  In other words, the most recently added
                  bundle is searched first.                
                <param>
                    bundleName  the base name of the resource bundle to be added                    
                </param>
                <see>
                    java.util.ResourceBundle                    
                </see>
                <see>
                    #removeResourceBundle                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="addResourceBundle" type="void" line="706">
                <params>
                    <param name="bundleName" type="String"/>
                </params>
                <scope line="707"/>
                <scope line="710"/>
                <scope line="713"/>
            </method>
            <javadoc line="718">
                Removes a resource bundle from the list of resource bundles that are
                  searched for localized defaults.                
                <param>
                    bundleName  the base name of the resource bundle to be removed                    
                </param>
                <see>
                    java.util.ResourceBundle                    
                </see>
                <see>
                    #addResourceBundle                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="removeResourceBundle" type="void" line="726">
                <params>
                    <param name="bundleName" type="String"/>
                </params>
                <scope line="727"/>
            </method>
            <javadoc line="732">
                Sets the default locale.  The default locale is used in retrieving
                  localized values via &lt;code&gt;get&lt;/code&gt; methods that do not take a
                  locale argument.  As of release 1.4, Swing UI objects should retrieve
                  localized values using the locale of their component rather than the
                  default locale.  The default locale exists to provide compatibility with
                  pre 1.4 behaviour.                
                <param>
                    l the new default locale                    
                </param>
                <see>
                    #getDefaultLocale                    
                </see>
                <see>
                    #get(Object)                    
                </see>
                <see>
                    #get(Object,Locale)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDefaultLocale" type="void" line="745">
                <params>
                    <param name="l" type="Locale"/>
                </params>
            </method>
            <javadoc line="748">
                Returns the default locale.  The default locale is used in retrieving
                  localized values via &lt;code&gt;get&lt;/code&gt; methods that do not take a
                  locale argument.  As of release 1.4, Swing UI objects should retrieve
                  localized values using the locale of their component rather than the
                  default locale.  The default locale exists to provide compatibility with
                  pre 1.4 behaviour.                
                <return>
                    the default locale                    
                </return>
                <see>
                    #setDefaultLocale                    
                </see>
                <see>
                    #get(Object)                    
                </see>
                <see>
                    #get(Object,Locale)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDefaultLocale" type="Locale" line="761"/>
            <interface name="LazyValue">
                <javadoc line="764">
                    This class enables one to store an entry in the defaults
                      table that isn&apos;t constructed until the first time it&apos;s
                      looked up with one of the &lt;code&gt;getXXX(key)&lt;/code&gt; methods.
                      Lazy values are useful for defaults that are expensive
                      to construct or are seldom retrieved.  The first time
                      a &lt;code&gt;LazyValue&lt;/code&gt; is retrieved its &quot;real value&quot; is computed
                      by calling &lt;code&gt;LazyValue.createValue()&lt;/code&gt; and the real
                      value is used to replace the &lt;code&gt;LazyValue&lt;/code&gt; in the
                      &lt;code&gt;UIDefaults&lt;/code&gt;
                      table.  Subsequent lookups for the same key return
                      the real value.  Here&apos;s an example of a &lt;code&gt;LazyValue&lt;/code&gt;
                      that constructs a &lt;code&gt;Border&lt;/code&gt;:
                      &lt;pre&gt;
                      Object borderLazyValue = new UIDefaults.LazyValue() {
                      public Object createValue(UIDefaults table) {
                      return new BorderFactory.createLoweredBevelBorder();
                      }
                      };
                      uiDefaultsTable.put(&quot;MyBorder&quot;, borderLazyValue);
                      &lt;/pre&gt;                    
                    <see>
                        UIDefaults#get                        
                    </see>
                </javadoc>
                <method name="createValue" type="Object" line="788"/>
                <javadoc line="788">
                    Creates the actual value retrieved from the &lt;code&gt;UIDefaults&lt;/code&gt;
                      table. When an object that implements this interface is
                      retrieved from the table, this method is used to create
                      the real value, which is then stored in the table and
                      returned to the calling method.                    
                    <param>
                        table  a <code>UIDefaults</code> table                        
                    </param>
                    <return>
                        the created <code>Object</code>                        
                    </return>
                </javadoc>
            </interface>
            <interface name="ActiveValue">
                <javadoc line="799">
                    This class enables one to store an entry in the defaults
                      table that&apos;s constructed each time it&apos;s looked up with one of
                      the &lt;code&gt;getXXX(key)&lt;/code&gt; methods. Here&apos;s an example of
                      an &lt;code&gt;ActiveValue&lt;/code&gt; that constructs a
                      &lt;code&gt;DefaultListCellRenderer&lt;/code&gt;:
                      &lt;pre&gt;
                      Object cellRendererActiveValue = new UIDefaults.ActiveValue() {
                      public Object createValue(UIDefaults table) {
                      return new DefaultListCellRenderer();
                      }
                      };
                      uiDefaultsTable.put(&quot;MyRenderer&quot;, cellRendererActiveValue);
                      &lt;/pre&gt;                    
                    <see>
                        UIDefaults#get                        
                    </see>
                </javadoc>
                <method name="createValue" type="Object" line="816"/>
                <javadoc line="816">
                    Creates the value retrieved from the &lt;code&gt;UIDefaults&lt;/code&gt; table.
                      The object is created each time it is accessed.                    
                    <param>
                        table  a <code>UIDefaults</code> table                        
                    </param>
                    <return>
                        the created <code>Object</code>                        
                    </return>
                </javadoc>
            </interface>
            <class name="ProxyLazyValue" line="824">
                <implements interface="LazyValue"/>
                <javadoc line="824">
                    This class provides an implementation of &lt;code&gt;LazyValue&lt;/code&gt;
                      which can be
                      used to delay loading of the Class for the instance to be created.
                      It also avoids creation of an anonymous inner class for the
                      &lt;code&gt;LazyValue&lt;/code&gt;
                      subclass.  Both of these improve performance at the time that a
                      a Look and Feel is loaded, at the cost of a slight performance
                      reduction the first time &lt;code&gt;createValue&lt;/code&gt; is called
                      (since Reflection APIs are used).                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="acc" type="AccessControlContext" line="837"/>
                <declaration name="className" type="String" line="838"/>
                <declaration name="methodName" type="String" line="839"/>
                <declaration name="args" type="Object[]" line="840"/>
                <javadoc line="841">
                    Creates a &lt;code&gt;LazyValue&lt;/code&gt; which will construct an instance
                      when asked.                    
                    <param>
                        c    a <code>String</code> specifying the classname
                          of the instance to be created on demand                        
                    </param>
                </javadoc>
                <method name="ProxyLazyValue" type="constructor" line="847">
                    <params>
                        <param name="c" type="String"/>
                    </params>
                </method>
                <javadoc line="850">
                    Creates a &lt;code&gt;LazyValue&lt;/code&gt; which will construct an instance
                      when asked.                    
                    <param>
                        c    a <code>String</code> specifying the classname of
                          the class
                          containing a static method to be called for
                          instance creation                        
                    </param>
                    <param>
                        m    a <code>String</code> specifying the static
                          method to be called on class c                        
                    </param>
                </javadoc>
                <method name="ProxyLazyValue" type="constructor" line="860">
                    <params>
                        <param name="c" type="String"/>
                        <param name="m" type="String"/>
                    </params>
                </method>
                <javadoc line="863">
                    Creates a &lt;code&gt;LazyValue&lt;/code&gt; which will construct an instance
                      when asked.                    
                    <param>
                        c    a <code>String</code> specifying the classname
                          of the instance to be created on demand                        
                    </param>
                    <param>
                        o    an array of <code>Objects</code> to be passed as
                          paramaters to the constructor in class c                        
                    </param>
                </javadoc>
                <method name="ProxyLazyValue" type="constructor" line="871">
                    <params>
                        <param name="c" type="String"/>
                        <param name="o" type="Object[]"/>
                    </params>
                </method>
                <javadoc line="874">
                    Creates a &lt;code&gt;LazyValue&lt;/code&gt; which will construct an instance
                      when asked.                    
                    <param>
                        c    a <code>String</code> specifying the classname
                          of the class
                          containing a static method to be called for
                          instance creation.                        
                    </param>
                    <param>
                        m    a <code>String</code> specifying the static method
                          to be called on class c                        
                    </param>
                    <param>
                        o    an array of <code>Objects</code> to be passed as
                          paramaters to the static method in class c                        
                    </param>
                </javadoc>
                <method name="ProxyLazyValue" type="constructor" line="886">
                    <params>
                        <param name="c" type="String"/>
                        <param name="m" type="String"/>
                        <param name="o" type="Object[]"/>
                    </params>
                    <scope line="890"/>
                </method>
                <javadoc line="894">
                    Creates the value retrieved from the &lt;code&gt;UIDefaults&lt;/code&gt; table.
                      The object is created each time it is accessed.                    
                    <param>
                        table  a <code>UIDefaults</code> table                        
                    </param>
                    <return>
                        the created <code>Object</code>                        
                    </return>
                </javadoc>
                <method name="createValue" type="Object" line="900">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="901"/>
                    <anonymous_class line="904">
                        <method name="run" type="Object" line="905">
                            <scope line="906">
                                <declaration name="c" type="Class&lt;?&gt;" line="907"/>
                                <declaration name="cl" type="Object" line="908"/>
                                <scope line="909">
                                    <scope line="911"/>
                                </scope>
                                <scope line="918">
                                    <declaration name="types" type="Class[]" line="919"/>
                                    <declaration name="m" type="Method" line="920"/>
                                </scope>
                                <scope line="923">
                                    <declaration name="types" type="Class[]" line="924"/>
                                    <declaration name="constructor" type="Constructor" line="925"/>
                                </scope>
                            </scope>
                            <scope line="930"/>
                        </method>
                    </anonymous_class>
                </method>
                <method name="checkAccess" type="void" line="937">
                    <params>
                        <param name="modifiers" type="int"/>
                    </params>
                    <scope line="938"/>
                </method>
                <method name="getClassArray" type="Class[]" line="942">
                    <params>
                        <param name="args" type="Object[]"/>
                    </params>
                    <declaration name="types" type="Class[]" line="943"/>
                    <scope line="944">
                        <scope line="946">
                            <scope line="947"/>
                            <scope line="950"/>
                            <scope line="953"/>
                            <scope line="956"/>
                        </scope>
                    </scope>
                </method>
                <method name="printArgs" type="String" line="963">
                    <params>
                        <param name="array" type="Object[]"/>
                    </params>
                    <declaration name="s" type="String" line="964"/>
                    <scope line="965">
                        <scope line="966"/>
                    </scope>
                    <scope line="971"/>
                </method>
            </class>
            <class name="LazyInputMap" line="977">
                <implements interface="LazyValue"/>
                <javadoc line="977">
                    &lt;code&gt;LazyInputMap&lt;/code&gt; will create a &lt;code&gt;InputMap&lt;/code&gt;
                      in its &lt;code&gt;createValue&lt;/code&gt;
                      method. The bindings are passed in in the constructor.
                      The bindings are an array with
                      the even number entries being string &lt;code&gt;KeyStrokes&lt;/code&gt;
                      (eg &quot;alt SPACE&quot;) and
                      the odd number entries being the value to use in the
                      &lt;code&gt;InputMap&lt;/code&gt; (and the key in the &lt;code&gt;ActionMap&lt;/code&gt;).                    
                    <since>
                        1.3                        
                    </since>
                </javadoc>
                <declaration name="bindings" type="Object[]" line="989"/>
                <javadoc line="989">
                    Key bindings are registered under.                    
                </javadoc>
                <method name="LazyInputMap" type="constructor" line="993">
                    <params>
                        <param name="bindings" type="Object[]"/>
                    </params>
                </method>
                <javadoc line="996">
                    Creates an &lt;code&gt;InputMap&lt;/code&gt; with the bindings that are
                      passed in.                    
                    <param>
                        table a <code>UIDefaults</code> table                        
                    </param>
                    <return>
                        the <code>InputMap</code>                        
                    </return>
                </javadoc>
                <method name="createValue" type="Object" line="1002">
                    <params>
                        <param name="table" type="UIDefaults"/>
                    </params>
                    <scope line="1003">
                        <declaration name="km" type="InputMap" line="1004"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>