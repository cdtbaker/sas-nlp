<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <class name="InputVerifier" line="3">
            <javadoc line="3">
                The purpose of this class is to help clients support smooth focus
                  navigation through GUIs with text fields. Such GUIs often need
                  to ensure that the text entered by the user is valid (for example,
                  that it&apos;s in
                  the proper format) before allowing the user to navigate out of
                  the text field. To do this, clients create a subclass of
                  &lt;code&gt;InputVerifier&lt;/code&gt; and, using &lt;code&gt;JComponent&lt;/code&gt;&apos;s
                  &lt;code&gt;setInputVerifier&lt;/code&gt; method,
                  attach an instance of their subclass to the &lt;code&gt;JComponent&lt;/code&gt; whose input they
                  want to validate. Before focus is transfered to another Swing component
                  that requests it, the input verifier&apos;s &lt;code&gt;shouldYieldFocus&lt;/code&gt; method is
                  called.  Focus is transfered only if that method returns &lt;code&gt;true&lt;/code&gt;.
                  &lt;p&gt;
                  The following example has two text fields, with the first one expecting
                  the string &quot;pass&quot; to be entered by the user. If that string is entered in
                  the first text field, then the user can advance to the second text field
                  either by clicking in it or by pressing TAB. However, if another string
                  is entered in the first text field, then the user will be unable to
                  transfer focus to the second text field.
                  &lt;p&gt;
                  &lt;pre&gt;
                  import java.awt.;
                  import java.util.;
                  import java.awt.event.;
                  import javax.swing.;
                  // This program demonstrates the use of the Swing InputVerifier class.
                  // It creates two text fields; the first of the text fields expects the
                  // string &quot;pass&quot; as input, and will allow focus to advance out of it
                  // only after that string is typed in by the user.
                  public class VerifierTest extends JFrame {
                  public VerifierTest() {
                  JTextField tf1 = new JTextField (&quot;Type \&quot;pass\&quot; here&quot;);
                  getContentPane().add (tf1, BorderLayout.NORTH);
                  tf1.setInputVerifier(new PassVerifier());
                  JTextField tf2 = new JTextField (&quot;TextField2&quot;);
                  getContentPane().add (tf2, BorderLayout.SOUTH);
                  WindowListener l = new WindowAdapter() {
                  public void windowClosing(WindowEvent e) {
                  System.exit(0);
                  }
                  };
                  addWindowListener(l);
                  }
                  class PassVerifier extends InputVerifier {
                  public boolean verify(JComponent input) {
                  JTextField tf = (JTextField) input;
                  return &quot;pass&quot;.equals(tf.getText());
                  }
                  }
                  public static void main(String[] args) {
                  Frame f = new VerifierTest();
                  f.pack();
                  f.setVisible(true);
                  }
                  }
                  &lt;/pre&gt;                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="verify" type="boolean" line="63"/>
            <javadoc line="63">
                Checks whether the JComponent&apos;s input is valid. This method should
                  have no side effects. It returns a boolean indicating the status
                  of the argument&apos;s input.                
                <param>
                    input the JComponent to verify                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; when valid, &lt;code&gt;false&lt;/code&gt; when invalid                    
                </return>
                <see>
                    JComponent#setInputVerifier                    
                </see>
                <see>
                    JComponent#getInputVerifier                    
                </see>
            </javadoc>
            <javadoc line="73">
                Calls &lt;code&gt;verify(input)&lt;/code&gt; to ensure that the input is valid.
                  This method can have side effects. In particular, this method
                  is called when the user attempts to advance focus out of the
                  argument component into another Swing component in this window.
                  If this method returns &lt;code&gt;true&lt;/code&gt;, then the focus is transfered
                  normally; if it returns &lt;code&gt;false&lt;/code&gt;, then the focus remains in
                  the argument component.                
                <param>
                    input the JComponent to verify                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; when valid, &lt;code&gt;false&lt;/code&gt; when invalid                    
                </return>
                <see>
                    JComponent#setInputVerifier                    
                </see>
                <see>
                    JComponent#getInputVerifier                    
                </see>
            </javadoc>
            <method name="shouldYieldFocus" type="boolean" line="86">
                <params>
                    <param name="input" type="JComponent"/>
                </params>
            </method>
        </class>
    </source>