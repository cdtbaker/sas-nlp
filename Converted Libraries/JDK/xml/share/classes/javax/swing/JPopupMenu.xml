<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.beans"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Hashtable"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.plaf.PopupMenuUI"/>
        <import package="javax.swing.plaf.ComponentUI"/>
        <import package="javax.swing.plaf.basic.BasicComboPopup"/>
        <import package="javax.swing.event"/>
        <import package="sun.security.util.SecurityConstants"/>
        <import package="java.applet.Applet"/>
        <class name="JPopupMenu" line="48">
            <extends class="JComponent"/>
            <comment line="123">
                Model for the selected subcontrol.                
            </comment>
            <comment line="128">
                Lock object used in place of class object for synchronization.
                 (4187686)                
            </comment>
            <comment line="133">
                                
            </comment>
            <comment line="134">
                trace creates and disposes                
            </comment>
            <comment line="135">
                show reuse hits/misses                
            </comment>
            <comment line="136">
                show bad params, misc.                
            </comment>
            <comment line="1178">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="1303">
                inner class AccessibleJPopupMenu                
            </comment>
            <comment line="1306">
                //////////
                 Serialization support.                
            </comment>
            <comment line="1334">
                implements javax.swing.MenuElement                
            </comment>
            <implements interface="Accessible"/>
            <implements interface="MenuElement"/>
            <javadoc line="48">
                An implementation of a popup menu -- a small window that pops up
                  and displays a series of choices. A &lt;code&gt;JPopupMenu&lt;/code&gt; is used for the
                  menu that appears when the user selects an item on the menu bar.
                  It is also used for &quot;pull-right&quot; menu that appears when the
                  selects a menu item that activates it. Finally, a &lt;code&gt;JPopupMenu&lt;/code&gt;
                  can also be used anywhere else you want a menu to appear.  For
                  example, when the user right-clicks in a specified area.
                  &lt;p&gt;
                  For information and examples of using popup menus, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html&quot;&gt;How to Use Menus&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A small window that pops up and displays a series of choices.                    
                </beaninfo>
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <author>
                    Arnaud Weber                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="86"/>
            <javadoc line="86">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="defaultLWPopupEnabledKey" type="Object" line="92"/>
            <javadoc line="92">
                Key used in AppContext to determine if light way popups are the default.                
            </javadoc>
            <declaration name="popupPostionFixDisabled" type="boolean" line="98"/>
            <javadoc line="98">
                Bug#4425878-Property javax.swing.adjustPopupLocationToFit introduced                
            </javadoc>
            <scope line="101"/>
            <declaration name="invoker" type="Component" line="108"/>
            <declaration name="popup" type="Popup" line="109"/>
            <declaration name="frame" type="Frame" line="110"/>
            <declaration name="desiredLocationX" type="int" line="111"/>
            <declaration name="label" type="String" line="113"/>
            <declaration name="paintBorder" type="boolean" line="114"/>
            <declaration name="margin" type="Insets" line="115"/>
            <declaration name="lightWeightPopup" type="boolean" line="117"/>
            <javadoc line="117">
                Used to indicate if lightweight popups should be used.                
            </javadoc>
            <declaration name="selectionModel" type="SingleSelectionModel" line="125"/>
            <declaration name="classLock" type="Object" line="130"/>
            <declaration name="TRACE" type="boolean" line="133"/>
            <declaration name="VERBOSE" type="boolean" line="134"/>
            <declaration name="DEBUG" type="boolean" line="135"/>
            <javadoc line="137">
                Sets the default value of the &lt;code&gt;lightWeightPopupEnabled&lt;/code&gt;
                  property.                
                <param>
                    aFlag <code>true</code> if popups can be lightweight,
                      otherwise <code>false</code>                    
                </param>
                <see>
                    #getDefaultLightWeightPopupEnabled                    
                </see>
                <see>
                    #setLightWeightPopupEnabled                    
                </see>
            </javadoc>
            <method name="setDefaultLightWeightPopupEnabled" type="void" line="146">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
            </method>
            <javadoc line="151">
                Gets the &lt;code&gt;defaultLightWeightPopupEnabled&lt;/code&gt; property,
                  which by default is &lt;code&gt;true&lt;/code&gt;.                
                <return>
                    the value of the <code>defaultLightWeightPopupEnabled</code>
                      property                    
                </return>
                <see>
                    #setDefaultLightWeightPopupEnabled                    
                </see>
            </javadoc>
            <method name="getDefaultLightWeightPopupEnabled" type="boolean" line="160">
                <declaration name="b" type="Boolean" line="161"/>
                <scope line="163"/>
            </method>
            <javadoc line="171">
                Constructs a &lt;code&gt;JPopupMenu&lt;/code&gt; without an &quot;invoker&quot;.                
            </javadoc>
            <method name="JPopupMenu" type="constructor" line="174"/>
            <javadoc line="178">
                Constructs a &lt;code&gt;JPopupMenu&lt;/code&gt; with the specified title.                
                <param>
                    label  the string that a UI may use to display as a title
                      for the popup menu.                    
                </param>
            </javadoc>
            <method name="JPopupMenu" type="constructor" line="184">
                <params>
                    <param name="label" type="String"/>
                </params>
            </method>
            <javadoc line="195">
                Returns the look and feel (L&amp;F) object that renders this component.                
                <return>
                    the <code>PopupMenuUI</code> object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="PopupMenuUI" line="200"/>
            <javadoc line="204">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui the new <code>PopupMenuUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="215">
                <params>
                    <param name="ui" type="PopupMenuUI"/>
                </params>
            </method>
            <javadoc line="219">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="224"/>
            <javadoc line="229">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "PopupMenuUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="236"/>
            <method name="processFocusEvent" type="void" line="240">
                <params>
                    <param name="evt" type="FocusEvent"/>
                </params>
            </method>
            <javadoc line="244">
                Processes key stroke events such as mnemonics and accelerators.                
                <param>
                    evt  the key event to be processed                    
                </param>
            </javadoc>
            <method name="processKeyEvent" type="void" line="249">
                <params>
                    <param name="evt" type="KeyEvent"/>
                </params>
                <scope line="251"/>
            </method>
            <javadoc line="258">
                Returns the model object that handles single selections.                
                <return>
                    the <code>selectionModel</code> property                    
                </return>
                <see>
                    SingleSelectionModel                    
                </see>
            </javadoc>
            <method name="getSelectionModel" type="SingleSelectionModel" line="264"/>
            <javadoc line="268">
                Sets the model object to handle single selections.                
                <param>
                    model the new <code>SingleSelectionModel</code>                    
                </param>
                <see>
                    SingleSelectionModel                    
                </see>
                <beaninfo>
                    description: The selection model for the popup menu
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionModel" type="void" line="277">
                <params>
                    <param name="model" type="SingleSelectionModel"/>
                </params>
            </method>
            <javadoc line="281">
                Appends the specified menu item to the end of this menu.                
                <param>
                    menuItem the <code>JMenuItem</code> to add                    
                </param>
                <return>
                    the <code>JMenuItem</code> added                    
                </return>
            </javadoc>
            <method name="add" type="JMenuItem" line="287">
                <params>
                    <param name="menuItem" type="JMenuItem"/>
                </params>
            </method>
            <javadoc line="292">
                Creates a new menu item with the specified text and appends
                  it to the end of this menu.                
                <param>
                    s the string for the menu item to be added                    
                </param>
            </javadoc>
            <method name="add" type="JMenuItem" line="298">
                <params>
                    <param name="s" type="String"/>
                </params>
            </method>
            <javadoc line="302">
                Appends a new menu item to the end of the menu which
                  dispatches the specified &lt;code&gt;Action&lt;/code&gt; object.                
                <param>
                    a the <code>Action</code> to add to the menu                    
                </param>
                <return>
                    the new menu item                    
                </return>
                <see>
                    Action                    
                </see>
            </javadoc>
            <method name="add" type="JMenuItem" line="310">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="311"/>
            </method>
            <javadoc line="317">
                Returns an point which has been adjusted to take into account of the
                  desktop bounds, taskbar and multi-monitor configuration.
                  &lt;p&gt;
                  This adustment may be cancelled by invoking the application with
                  -Djavax.swing.adjustPopupLocationToFit=false                
            </javadoc>
            <method name="adjustPopupLocationToFitScreen" type="Point" line="324">
                <params>
                    <param name="xPosition" type="int"/>
                    <param name="yPosition" type="int"/>
                </params>
                <comment line="332">
                    Get screen bounds                    
                </comment>
                <comment line="337">
                    If we have GraphicsConfiguration use it to get screen bounds                    
                </comment>
                <comment line="340">
                    If we don&apos;t have GraphicsConfiguration use primary screen                    
                </comment>
                <comment line="344">
                    Calculate the screen size that popup should fit                    
                </comment>
                <comment line="351">
                    Insets include the task bar. Take them into account.                    
                </comment>
                <comment line="361">
                    Ensure that popup menu fits the screen                    
                </comment>
                <declaration name="popupLocation" type="Point" line="325"/>
                <scope line="327"/>
                <declaration name="scrBounds" type="Rectangle" line="332"/>
                <declaration name="gc" type="GraphicsConfiguration" line="333"/>
                <declaration name="toolkit" type="Toolkit" line="334"/>
                <scope line="335"/>
                <scope line="338"/>
                <declaration name="popupSize" type="Dimension" line="344"/>
                <declaration name="popupRightX" type="long" line="345"/>
                <declaration name="popupBottomY" type="long" line="346"/>
                <declaration name="scrWidth" type="int" line="347"/>
                <declaration name="scrHeight" type="int" line="348"/>
                <scope line="349">
                    <declaration name="scrInsets" type="Insets" line="351"/>
                </scope>
                <declaration name="scrRightX" type="int" line="357"/>
                <declaration name="scrBottomY" type="int" line="358"/>
                <scope line="361">
                    <scope line="363"/>
                </scope>
                <scope line="367">
                    <scope line="369"/>
                </scope>
            </method>
            <javadoc line="377">
                Tries to find GraphicsConfiguration
                  that contains the mouse cursor position.
                  Can return null.                
            </javadoc>
            <method name="getCurrentGraphicsConfiguration" type="GraphicsConfiguration" line="383">
                <params>
                    <param name="popupLocation" type="Point"/>
                </params>
                <comment line="399">
                    If not found and we have invoker, ask invoker about his gc                    
                </comment>
                <declaration name="gc" type="GraphicsConfiguration" line="384"/>
                <declaration name="ge" type="GraphicsEnvironment" line="385"/>
                <declaration name="gd" type="GraphicsDevice[]" line="387"/>
                <scope line="388">
                    <scope line="389">
                        <declaration name="dgc" type="GraphicsConfiguration" line="390"/>
                        <scope line="392"/>
                    </scope>
                </scope>
                <scope line="399"/>
            </method>
            <javadoc line="405">
                Checks that there are enough security permissions
                  to make popup &quot;always on top&quot;, which allows to show it above the task bar.                
            </javadoc>
            <method name="canPopupOverlapTaskBar" type="boolean" line="409">
                <comment line="419">
                    There is no permission to show popups over the task bar                    
                </comment>
                <declaration name="result" type="boolean" line="410"/>
                <scope line="411">
                    <declaration name="sm" type="SecurityManager" line="412"/>
                    <scope line="413"/>
                </scope>
                <scope line="417"/>
            </method>
            <javadoc line="425">
                Factory method which creates the &lt;code&gt;JMenuItem&lt;/code&gt; for
                  &lt;code&gt;Actions&lt;/code&gt; added to the &lt;code&gt;JPopupMenu&lt;/code&gt;.                
                <param>
                    a the <code>Action</code> for the menu item to be added                    
                </param>
                <return>
                    the new menu item                    
                </return>
                <see>
                    Action                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createActionComponent" type="JMenuItem" line="435">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <anonymous_class line="436">
                    <method name="createActionPropertyChangeListener" type="PropertyChangeListener" line="437">
                        <params>
                            <param name="a" type="Action"/>
                        </params>
                        <declaration name="pcl" type="PropertyChangeListener" line="438"/>
                        <scope line="439"/>
                    </method>
                </anonymous_class>
                <declaration name="mi" type="JMenuItem" line="436"/>
            </method>
            <javadoc line="450">
                Returns a properly configured &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                  which updates the control as changes to the &lt;code&gt;Action&lt;/code&gt; occur.                
            </javadoc>
            <method name="createActionChangeListener" type="PropertyChangeListener" line="454">
                <params>
                    <param name="b" type="JMenuItem"/>
                </params>
            </method>
            <javadoc line="458">
                Removes the component at the specified index from this popup menu.                
                <param>
                    pos the position of the item to be removed                    
                </param>
                <exception>
                    IllegalArgumentException if the value of
                      <code>pos</code> < 0, or if the value of
                      <code>pos</code> is greater than the
                      number of items                    
                </exception>
            </javadoc>
            <method name="remove" type="void" line="467">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <scope line="468"/>
                <scope line="471"/>
            </method>
            <javadoc line="477">
                Sets the value of the &lt;code&gt;lightWeightPopupEnabled&lt;/code&gt; property,
                  which by default is &lt;code&gt;true&lt;/code&gt;.
                  By default, when a look and feel displays a popup,
                  it can choose to
                  use a lightweight (all-Java) popup.
                  Lightweight popup windows are more efficient than heavyweight
                  (native peer) windows,
                  but lightweight and heavyweight components do not mix well in a GUI.
                  If your application mixes lightweight and heavyweight components,
                  you should disable lightweight popups.
                  Some look and feels might always use heavyweight popups,
                  no matter what the value of this property.                
                <param>
                    aFlag  <code>false</code> to disable lightweight popups                    
                </param>
                <beaninfo>
                    description: Determines whether lightweight popups are used when possible
                      expert: true                    
                </beaninfo>
                <see>
                    #isLightWeightPopupEnabled                    
                </see>
            </javadoc>
            <method name="setLightWeightPopupEnabled" type="void" line="498">
                <params>
                    <param name="aFlag" type="boolean"/>
                </params>
                <comment line="500">
                    NOTE: this use to set the flag on a shared JPopupMenu, which meant
                     this effected ALL JPopupMenus.                    
                </comment>
            </method>
            <javadoc line="504">
                Gets the &lt;code&gt;lightWeightPopupEnabled&lt;/code&gt; property.                
                <return>
                    the value of the <code>lightWeightPopupEnabled</code> property                    
                </return>
                <see>
                    #setLightWeightPopupEnabled                    
                </see>
            </javadoc>
            <method name="isLightWeightPopupEnabled" type="boolean" line="510"/>
            <javadoc line="514">
                Returns the popup menu&apos;s label                
                <return>
                    a string containing the popup menu's label                    
                </return>
                <see>
                    #setLabel                    
                </see>
            </javadoc>
            <method name="getLabel" type="String" line="520"/>
            <javadoc line="524">
                Sets the popup menu&apos;s label.  Different look and feels may choose
                  to display or not display this.                
                <param>
                    label a string specifying the label for the popup menu                    
                </param>
                <see>
                    #setLabel                    
                </see>
                <beaninfo>
                    description: The label for the popup menu.
                      bound: true                    
                </beaninfo>
            </javadoc>
            <method name="setLabel" type="void" line="535">
                <params>
                    <param name="label" type="String"/>
                </params>
                <declaration name="oldValue" type="String" line="536"/>
                <scope line="539"/>
            </method>
            <javadoc line="548">
                Appends a new separator at the end of the menu.                
            </javadoc>
            <method name="addSeparator" type="void" line="551"/>
            <javadoc line="555">
                Inserts a menu item for the specified &lt;code&gt;Action&lt;/code&gt; object at
                  a given position.                
                <param>
                    a  the <code>Action</code> object to insert                    
                </param>
                <param>
                    index      specifies the position at which to insert the
                      <code>Action</code>, where 0 is the first                    
                </param>
                <exception>
                    IllegalArgumentException if <code>index</code> < 0                    
                </exception>
                <see>
                    Action                    
                </see>
            </javadoc>
            <method name="insert" type="void" line="565">
                <params>
                    <param name="a" type="Action"/>
                    <param name="index" type="int"/>
                </params>
                <declaration name="mi" type="JMenuItem" line="566"/>
            </method>
            <javadoc line="571">
                Inserts the specified component into the menu at a given
                  position.                
                <param>
                    component  the <code>Component</code> to insert                    
                </param>
                <param>
                    index      specifies the position at which
                      to insert the component, where 0 is the first                    
                </param>
                <exception>
                    IllegalArgumentException if <code>index</code> < 0                    
                </exception>
            </javadoc>
            <method name="insert" type="void" line="580">
                <params>
                    <param name="component" type="Component"/>
                    <param name="index" type="int"/>
                </params>
                <comment line="587">
                    PENDING(ges): Why not use an array?                    
                </comment>
                <comment line="590">
                    Remove the item at index, nitems-index times
                    storing them in a temporary vector in the
                    order they appear on the menu.                    
                </comment>
                <comment line="601">
                    Add the removed items back to the menu, they are
                    already in the correct order in the temp vector.                    
                </comment>
                <scope line="581"/>
                <declaration name="nitems" type="int" line="585"/>
                <declaration name="tempItems" type="Vector&lt;Component&gt;" line="587"/>
                <scope line="593"/>
                <scope line="603"/>
            </method>
            <javadoc line="608">
                Adds a &lt;code&gt;PopupMenu&lt;/code&gt; listener.                
                <param>
                    l  the <code>PopupMenuListener</code> to add                    
                </param>
            </javadoc>
            <method name="addPopupMenuListener" type="void" line="613">
                <params>
                    <param name="l" type="PopupMenuListener"/>
                </params>
            </method>
            <javadoc line="617">
                Removes a &lt;code&gt;PopupMenu&lt;/code&gt; listener.                
                <param>
                    l  the <code>PopupMenuListener</code> to remove                    
                </param>
            </javadoc>
            <method name="removePopupMenuListener" type="void" line="622">
                <params>
                    <param name="l" type="PopupMenuListener"/>
                </params>
            </method>
            <javadoc line="626">
                Returns an array of all the &lt;code&gt;PopupMenuListener&lt;/code&gt;s added
                  to this JMenuItem with addPopupMenuListener().                
                <return>
                    all of the <code>PopupMenuListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPopupMenuListeners" type="PopupMenuListener[]" line="634"/>
            <javadoc line="638">
                Adds a &lt;code&gt;MenuKeyListener&lt;/code&gt; to the popup menu.                
                <param>
                    l the <code>MenuKeyListener</code> to be added                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="addMenuKeyListener" type="void" line="644">
                <params>
                    <param name="l" type="MenuKeyListener"/>
                </params>
            </method>
            <javadoc line="648">
                Removes a &lt;code&gt;MenuKeyListener&lt;/code&gt; from the popup menu.                
                <param>
                    l the <code>MenuKeyListener</code> to be removed                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="removeMenuKeyListener" type="void" line="654">
                <params>
                    <param name="l" type="MenuKeyListener"/>
                </params>
            </method>
            <javadoc line="658">
                Returns an array of all the &lt;code&gt;MenuKeyListener&lt;/code&gt;s added
                  to this JPopupMenu with addMenuKeyListener().                
                <return>
                    all of the <code>MenuKeyListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getMenuKeyListeners" type="MenuKeyListener[]" line="666"/>
            <javadoc line="670">
                Notifies &lt;code&gt;PopupMenuListener&lt;/code&gt;s that this popup menu will
                  become visible.                
            </javadoc>
            <method name="firePopupMenuWillBecomeVisible" type="void" line="674">
                <declaration name="listeners" type="Object[]" line="675"/>
                <declaration name="e" type="PopupMenuEvent" line="676"/>
                <scope line="677">
                    <scope line="678"/>
                </scope>
            </method>
            <javadoc line="686">
                Notifies &lt;code&gt;PopupMenuListener&lt;/code&gt;s that this popup menu will
                  become invisible.                
            </javadoc>
            <method name="firePopupMenuWillBecomeInvisible" type="void" line="690">
                <declaration name="listeners" type="Object[]" line="691"/>
                <declaration name="e" type="PopupMenuEvent" line="692"/>
                <scope line="693">
                    <scope line="694"/>
                </scope>
            </method>
            <javadoc line="702">
                Notifies &lt;code&gt;PopupMenuListeners&lt;/code&gt; that this popup menu is
                  cancelled.                
            </javadoc>
            <method name="firePopupMenuCanceled" type="void" line="706">
                <declaration name="listeners" type="Object[]" line="707"/>
                <declaration name="e" type="PopupMenuEvent" line="708"/>
                <scope line="709">
                    <scope line="710"/>
                </scope>
            </method>
            <javadoc line="718">
                Always returns true since popups, by definition, should always
                  be on top of all other windows.                
                <return>
                    true                    
                </return>
            </javadoc>
            <method name="alwaysOnTop" type="boolean" line="724">
                <comment line="724">
                    package private                    
                </comment>
            </method>
            <javadoc line="728">
                Lays out the container so that it uses the minimum space
                  needed to display its contents.                
            </javadoc>
            <method name="pack" type="void" line="732">
                <scope line="733">
                    <declaration name="pref" type="Dimension" line="734"/>
                    <scope line="737"/>
                    <scope line="739"/>
                </scope>
            </method>
            <javadoc line="745">
                Sets the visibility of the popup menu.                
                <param>
                    b true to make the popup visible, or false to
                      hide it                    
                </param>
                <beaninfo>
                    bound: true
                      description: Makes the popup visible                    
                </beaninfo>
            </javadoc>
            <method name="setVisible" type="void" line="754">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="760">
                    Is it a no-op?                    
                </comment>
                <comment line="764">
                    if closing, first close all Submenus                    
                </comment>
                <comment line="767">
                    4234793: This is a workaround because JPopupMenu.firePopupMenuCanceled is
                     a protected method and cannot be called from BasicPopupMenuUI directly
                     The real solution could be to make
                     firePopupMenuCanceled public and call it directly.                    
                </comment>
                <comment line="779">
                    This is a popup menu with MenuElement children,
                     set selection path before popping up!                    
                </comment>
                <comment line="799">
                    4694797: When popup menu is made invisible, selected path
                     should be cleared                    
                </comment>
                <scope line="755"/>
                <scope line="764">
                    <declaration name="doCanceled" type="Boolean" line="770"/>
                    <scope line="771"/>
                </scope>
                <scope line="777">
                    <scope line="780">
                        <declaration name="me" type="MenuElement" line="781"/>
                    </scope>
                </scope>
                <scope line="787"/>
                <scope line="793">
                    <scope line="800"/>
                </scope>
            </method>
            <javadoc line="806">
                Returns a &lt;code&gt;Popup&lt;/code&gt; instance from the
                  &lt;code&gt;PopupMenuUI&lt;/code&gt; that has had &lt;code&gt;show&lt;/code&gt; invoked on
                  it. If the current &lt;code&gt;popup&lt;/code&gt; is non-null,
                  this will invoke &lt;code&gt;dispose&lt;/code&gt; of it, and then
                  &lt;code&gt;show&lt;/code&gt; the new one.
                  &lt;p&gt;
                  This does NOT fire any events, it is up the caller to dispatch
                  the necessary events.                
            </javadoc>
            <method name="getPopup" type="Popup" line="816">
                <comment line="832">
                    adjust the location of the popup                    
                </comment>
                <declaration name="oldPopup" type="Popup" line="817"/>
                <scope line="819"/>
                <declaration name="popupFactory" type="PopupFactory" line="822"/>
                <scope line="824"/>
                <scope line="827"/>
                <declaration name="p" type="Point" line="832"/>
                <declaration name="newPopup" type="Popup" line="836"/>
            </method>
            <javadoc line="844">
                Returns true if the popup menu is visible (currently
                  being displayed).                
            </javadoc>
            <method name="isVisible" type="boolean" line="848"/>
            <javadoc line="852">
                Sets the location of the upper left corner of the
                  popup menu using x, y coordinates.                
                <param>
                    x the x coordinate of the popup's new position
                      in the screen's coordinate space                    
                </param>
                <param>
                    y the y coordinate of the popup's new position
                      in the screen's coordinate space                    
                </param>
                <beaninfo>
                    description: The location of the popup menu.                    
                </beaninfo>
            </javadoc>
            <method name="setLocation" type="void" line="863">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="oldX" type="int" line="864"/>
                <declaration name="oldY" type="int" line="865"/>
                <scope line="869"/>
            </method>
            <javadoc line="874">
                Returns true if the popup menu is a standalone popup menu
                  rather than the submenu of a &lt;code&gt;JMenu&lt;/code&gt;.                
                <return>
                    true if this menu is a standalone popup menu, otherwise false                    
                </return>
            </javadoc>
            <method name="isPopupMenu" type="boolean" line="880"/>
            <javadoc line="884">
                Returns the component which is the &apos;invoker&apos; of this
                  popup menu.                
                <return>
                    the <code>Component</code> in which the popup menu is displayed                    
                </return>
            </javadoc>
            <method name="getInvoker" type="Component" line="890"/>
            <javadoc line="894">
                Sets the invoker of this popup menu -- the component in which
                  the popup menu menu is to be displayed.                
                <param>
                    invoker the <code>Component</code> in which the popup
                      menu is displayed                    
                </param>
                <beaninfo>
                    description: The invoking component for the popup menu
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setInvoker" type="void" line="904">
                <params>
                    <param name="invoker" type="Component"/>
                </params>
                <declaration name="oldInvoker" type="Component" line="905"/>
                <scope line="907"/>
            </method>
            <javadoc line="914">
                Displays the popup menu at the position x,y in the coordinate
                  space of the component invoker.                
                <param>
                    invoker the component in whose space the popup menu is to appear                    
                </param>
                <param>
                    x the x coordinate in invoker's coordinate space at which
                      the popup menu is to be displayed                    
                </param>
                <param>
                    y the y coordinate in invoker's coordinate space at which
                      the popup menu is to be displayed                    
                </param>
            </javadoc>
            <method name="show" type="void" line="924">
                <params>
                    <param name="invoker" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="932">
                    Use the invoker&apos;s frame so that events
                     are propagated properly                    
                </comment>
                <comment line="945">
                    To avoid integer overflow                    
                </comment>
                <scope line="925"/>
                <declaration name="newFrame" type="Frame" line="929"/>
                <scope line="930">
                    <scope line="933">
                        <scope line="935"/>
                    </scope>
                </scope>
                <declaration name="invokerOrigin" type="Point" line="940"/>
                <scope line="941">
                    <declaration name="lx" type="long" line="945"/>
                </scope>
                <scope line="956"/>
            </method>
            <javadoc line="962">
                Returns the popup menu which is at the root of the menu system
                  for this popup menu.                
                <return>
                    the topmost grandparent <code>JPopupMenu</code>                    
                </return>
            </javadoc>
            <method name="getRootPopupMenu" type="JPopupMenu" line="968">
                <declaration name="mp" type="JPopupMenu" line="969"/>
                <scope line="974"/>
            </method>
            <javadoc line="980">
                Returns the component at the specified index.                
                <param>
                    i  the index of the component, where 0 is the first                    
                </param>
                <return>
                    the <code>Component</code> at that index                    
                </return>
                <deprecated>
                    replaced by {@link java.awt.Container#getComponent(int)}                    
                </deprecated>
            </javadoc>
            <method name="getComponentAtIndex" type="Component" line="988">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="992">
                Returns the index of the specified component.                
                <param>
                    c the <code>Component</code> to find                    
                </param>
                <return>
                    the index of the component, where 0 is the first;
                      or -1 if the component is not found                    
                </return>
            </javadoc>
            <method name="getComponentIndex" type="int" line="999">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="ncomponents" type="int" line="1000"/>
                <declaration name="component" type="Component[]" line="1001"/>
                <scope line="1002">
                    <declaration name="comp" type="Component" line="1003"/>
                </scope>
            </method>
            <javadoc line="1010">
                Sets the size of the Popup window using a &lt;code&gt;Dimension&lt;/code&gt; object.
                  This is equivalent to &lt;code&gt;setPreferredSize(d)&lt;/code&gt;.                
                <param>
                    d   the <code>Dimension</code> specifying the new size
                      of this component.                    
                </param>
                <beaninfo>
                    description: The size of the popup menu                    
                </beaninfo>
            </javadoc>
            <method name="setPopupSize" type="void" line="1019">
                <params>
                    <param name="d" type="Dimension"/>
                </params>
                <declaration name="oldSize" type="Dimension" line="1020"/>
                <scope line="1023">
                    <declaration name="newSize" type="Dimension" line="1024"/>
                    <scope line="1026"/>
                </scope>
            </method>
            <javadoc line="1032">
                Sets the size of the Popup window to the specified width and
                  height. This is equivalent to
                  &lt;code&gt;setPreferredSize(new Dimension(width, height))&lt;/code&gt;.                
                <param>
                    width the new width of the Popup in pixels                    
                </param>
                <param>
                    height the new height of the Popup in pixels                    
                </param>
                <beaninfo>
                    description: The size of the popup menu                    
                </beaninfo>
            </javadoc>
            <method name="setPopupSize" type="void" line="1042">
                <params>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="1046">
                Sets the currently selected component,  This will result
                  in a change to the selection model.                
                <param>
                    sel the <code>Component</code> to select                    
                </param>
                <beaninfo>
                    description: The selected component on the popup menu
                      expert: true
                      hidden: true                    
                </beaninfo>
            </javadoc>
            <method name="setSelected" type="void" line="1056">
                <params>
                    <param name="sel" type="Component"/>
                </params>
                <declaration name="model" type="SingleSelectionModel" line="1057"/>
                <declaration name="index" type="int" line="1058"/>
            </method>
            <javadoc line="1062">
                Checks whether the border should be painted.                
                <return>
                    true if the border is painted, false otherwise                    
                </return>
                <see>
                    #setBorderPainted                    
                </see>
            </javadoc>
            <method name="isBorderPainted" type="boolean" line="1068"/>
            <javadoc line="1072">
                Sets whether the border should be painted.                
                <param>
                    b if true, the border is painted.                    
                </param>
                <see>
                    #isBorderPainted                    
                </see>
                <beaninfo>
                    description: Is the border of the popup menu painted                    
                </beaninfo>
            </javadoc>
            <method name="setBorderPainted" type="void" line="1080">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="1085">
                Paints the popup menu&apos;s border if the &lt;code&gt;borderPainted&lt;/code&gt;
                  property is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    g  the <code>Graphics</code> object                    
                </param>
                <see>
                    JComponent#paint                    
                </see>
                <see>
                    JComponent#setBorder                    
                </see>
            </javadoc>
            <method name="paintBorder" type="void" line="1093">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="1094"/>
            </method>
            <javadoc line="1099">
                Returns the margin, in pixels, between the popup menu&apos;s border and
                  its containees.                
                <return>
                    an <code>Insets</code> object containing the margin values.                    
                </return>
            </javadoc>
            <method name="getMargin" type="Insets" line="1105">
                <scope line="1106"/>
                <scope line="1108"/>
            </method>
            <javadoc line="1114">
                Examines the list of menu items to determine whether
                  &lt;code&gt;popup&lt;/code&gt; is a popup menu.                
                <param>
                    popup  a <code>JPopupMenu</code>                    
                </param>
                <return>
                    true if <code>popup</code>                    
                </return>
            </javadoc>
            <method name="isSubPopupMenu" type="boolean" line="1121">
                <params>
                    <param name="popup" type="JPopupMenu"/>
                </params>
                <declaration name="ncomponents" type="int" line="1122"/>
                <declaration name="component" type="Component[]" line="1123"/>
                <scope line="1124">
                    <declaration name="comp" type="Component" line="1125"/>
                    <scope line="1126">
                        <declaration name="menu" type="JMenu" line="1127"/>
                        <declaration name="subPopup" type="JPopupMenu" line="1128"/>
                    </scope>
                </scope>
            </method>
            <method name="getFrame" type="Frame" line="1139">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="w" type="Component" line="1140"/>
                <scope line="1142"/>
            </method>
            <javadoc line="1149">
                Returns a string representation of this &lt;code&gt;JPopupMenu&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JPopupMenu</code>.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1159">
                <declaration name="labelString" type="String" line="1160"/>
                <declaration name="paintBorderString" type="String" line="1162"/>
                <declaration name="marginString" type="String" line="1164"/>
                <declaration name="lightWeightPopupEnabledString" type="String" line="1166"/>
            </method>
            <javadoc line="1181">
                Gets the AccessibleContext associated with this JPopupMenu.
                  For JPopupMenus, the AccessibleContext takes the form of an
                  AccessibleJPopupMenu.
                  A new AccessibleJPopupMenu instance is created if necessary.                
                <return>
                    an AccessibleJPopupMenu that serves as the
                      AccessibleContext of this JPopupMenu                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1190">
                <scope line="1191"/>
            </method>
            <class name="AccessibleJPopupMenu" line="1197">
                <extends class="AccessibleJComponent"/>
                <comment line="724">
                    package private                    
                </comment>
                <comment line="1248">
                    Handles popup &quot;visible&quot; PropertyChangeEvent                    
                </comment>
                <comment line="1265">
                    Fires AccessibleActiveDescendant PropertyChangeEvent to notify listeners
                     on the popup menu invoker that a popup list item has been selected                    
                </comment>
                <implements interface="PropertyChangeListener"/>
                <javadoc line="1197">
                    This class implements accessibility support for the
                      &lt;code&gt;JPopupMenu&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to popup menu user-interface
                      elements.                    
                </javadoc>
                <javadoc line="1206">
                    AccessibleJPopupMenu constructor                    
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="AccessibleJPopupMenu" type="constructor" line="1211"/>
                <javadoc line="1215">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of
                          the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1221"/>
                <javadoc line="1225">
                    This method gets called when a bound property is changed.                    
                    <param>
                        e A <code>PropertyChangeEvent</code> object describing
                          the event source and the property that has changed. Must not be null.                        
                    </param>
                    <throws>
                        NullPointerException if the parameter is null.                        
                    </throws>
                    <since>
                        1.5                        
                    </since>
                </javadoc>
                <method name="propertyChange" type="void" line="1233">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="propertyName" type="String" line="1234"/>
                    <scope line="1235">
                        <scope line="1237"/>
                        <scope line="1241"/>
                    </scope>
                </method>
                <method name="handlePopupIsVisibleEvent" type="void" line="1250">
                    <params>
                        <param name="visible" type="boolean"/>
                    </params>
                    <comment line="1253">
                        notify listeners that the popup became visible                        
                    </comment>
                    <comment line="1256">
                        notify listeners that a popup list item is selected                        
                    </comment>
                    <comment line="1259">
                        notify listeners that the popup became hidden                        
                    </comment>
                    <scope line="1251"/>
                    <scope line="1257"/>
                </method>
                <method name="fireActiveDescendant" type="void" line="1268">
                    <comment line="1271">
                        get the popup list                        
                    </comment>
                    <comment line="1277">
                        get the first selected item                        
                    </comment>
                    <comment line="1289">
                        fire the event with the popup invoker as the source.                        
                    </comment>
                    <comment line="1293">
                        Check invokerContext because Component.getAccessibleContext
                         returns null. Classes that extend Component are responsible
                         for returning a non-null AccessibleContext.                        
                    </comment>
                    <scope line="1269">
                        <declaration name="popupList" type="JList" line="1271"/>
                        <scope line="1272"/>
                        <declaration name="ac" type="AccessibleContext" line="1277"/>
                        <declaration name="selection" type="AccessibleSelection" line="1278"/>
                        <scope line="1279"/>
                        <declaration name="a" type="Accessible" line="1282"/>
                        <scope line="1283"/>
                        <declaration name="selectedItem" type="AccessibleContext" line="1286"/>
                        <scope line="1289">
                            <declaration name="invokerContext" type="AccessibleContext" line="1290"/>
                            <scope line="1291"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <method name="writeObject" type="void" line="1308">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="1313">
                    Save the invoker, if its Serializable.                    
                </comment>
                <comment line="1318">
                    Save the popup, if its Serializable.                    
                </comment>
                <declaration name="values" type="Vector&lt;Object&gt;" line="1309"/>
                <scope line="1313"/>
                <scope line="1318"/>
                <scope line="1324">
                    <declaration name="count" type="byte" line="1325"/>
                    <scope line="1327"/>
                </scope>
            </method>
            <method name="readObject" type="void" line="1335">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="values" type="Vector" line="1338"/>
                <declaration name="indexCounter" type="int" line="1339"/>
                <declaration name="maxCounter" type="int" line="1340"/>
                <scope line="1343"/>
                <scope line="1348"/>
            </method>
            <javadoc line="1355">
                This method is required to conform to the
                  &lt;code&gt;MenuElement&lt;/code&gt; interface, but it not implemented.                
                <see>
                    MenuElement#processMouseEvent(MouseEvent,MenuElement[],MenuSelectionManager)                    
                </see>
            </javadoc>
            <method name="processMouseEvent" type="void" line="1360">
                <params>
                    <param name="event" type="MouseEvent"/>
                    <param name="path" type="MenuElement"/>
                    <param name="manager" type="MenuSelectionManager"/>
                </params>
            </method>
            <javadoc line="1362">
                Processes a key event forwarded from the
                  &lt;code&gt;MenuSelectionManager&lt;/code&gt; and changes the menu selection,
                  if necessary, by using &lt;code&gt;MenuSelectionManager&lt;/code&gt;&apos;s API.
                  &lt;p&gt;
                  Note: you do not have to forward the event to sub-components.
                  This is done automatically by the &lt;code&gt;MenuSelectionManager&lt;/code&gt;.                
                <param>
                    e  a <code>KeyEvent</code>                    
                </param>
                <param>
                    path the <code>MenuElement</code> path array                    
                </param>
                <param>
                    manager   the <code>MenuSelectionManager</code>                    
                </param>
            </javadoc>
            <method name="processKeyEvent" type="void" line="1375">
                <params>
                    <param name="e" type="KeyEvent"/>
                    <param name="path" type="MenuElement"/>
                    <param name="manager" type="MenuSelectionManager"/>
                </params>
                <declaration name="mke" type="MenuKeyEvent" line="1376"/>
                <scope line="1382"/>
            </method>
            <javadoc line="1387">
                Handles a keystroke in a menu.                
                <param>
                    e  a <code>MenuKeyEvent</code> object                    
                </param>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="processMenuKeyEvent" type="void" line="1393">
                <params>
                    <param name="e" type="MenuKeyEvent"/>
                </params>
            </method>
            <javadoc line="1406">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a <code>MenuKeyEvent</code>                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuKeyPressed" type="void" line="1413">
                <params>
                    <param name="event" type="MenuKeyEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="1414"/>
                <scope line="1415">
                    <scope line="1416"/>
                </scope>
            </method>
            <javadoc line="1422">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a <code>MenuKeyEvent</code>                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuKeyReleased" type="void" line="1429">
                <params>
                    <param name="event" type="MenuKeyEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="1430"/>
                <scope line="1431">
                    <scope line="1432"/>
                </scope>
            </method>
            <javadoc line="1438">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    event a <code>MenuKeyEvent</code>                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireMenuKeyTyped" type="void" line="1445">
                <params>
                    <param name="event" type="MenuKeyEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="1446"/>
                <scope line="1447">
                    <scope line="1448"/>
                </scope>
            </method>
            <javadoc line="1454">
                Messaged when the menubar selection changes to activate or
                  deactivate this menu. This implements the
                  &lt;code&gt;javax.swing.MenuElement&lt;/code&gt; interface.
                  Overrides &lt;code&gt;MenuElement.menuSelectionChanged&lt;/code&gt;.                
                <param>
                    isIncluded  true if this menu is active, false if
                      it is not                    
                </param>
                <see>
                    MenuElement#menuSelectionChanged(boolean)                    
                </see>
            </javadoc>
            <method name="menuSelectionChanged" type="void" line="1464">
                <params>
                    <param name="isIncluded" type="boolean"/>
                </params>
                <scope line="1465"/>
                <scope line="1468">
                    <declaration name="m" type="JMenu" line="1469"/>
                </scope>
            </method>
            <javadoc line="1479">
                Returns an array of &lt;code&gt;MenuElement&lt;/code&gt;s containing the submenu
                  for this menu component.  It will only return items conforming to
                  the &lt;code&gt;JMenuElement&lt;/code&gt; interface.
                  If popup menu is &lt;code&gt;null&lt;/code&gt; returns
                  an empty array.  This method is required to conform to the
                  &lt;code&gt;MenuElement&lt;/code&gt; interface.                
                <return>
                    an array of <code>MenuElement</code> objects                    
                </return>
                <see>
                    MenuElement#getSubElements                    
                </see>
            </javadoc>
            <method name="getSubElements" type="MenuElement[]" line="1490">
                <declaration name="result" type="MenuElement" line="1491"/>
                <declaration name="tmp" type="Vector&lt;MenuElement&gt;" line="1492"/>
                <declaration name="c" type="int" line="1493"/>
                <declaration name="i" type="int" line="1494"/>
                <declaration name="m" type="Component" line="1495"/>
                <scope line="1497"/>
            </method>
            <javadoc line="1509">
                Returns this &lt;code&gt;JPopupMenu&lt;/code&gt; component.                
                <return>
                    this <code>JPopupMenu</code> object                    
                </return>
                <see>
                    MenuElement#getComponent                    
                </see>
            </javadoc>
            <method name="getComponent" type="Component" line="1514"/>
            <class name="Separator" line="1519">
                <extends class="JSeparator"/>
                <comment line="724">
                    package private                    
                </comment>
                <comment line="1248">
                    Handles popup &quot;visible&quot; PropertyChangeEvent                    
                </comment>
                <comment line="1265">
                    Fires AccessibleActiveDescendant PropertyChangeEvent to notify listeners
                     on the popup menu invoker that a popup list item has been selected                    
                </comment>
                <javadoc line="1519">
                    A popup menu-specific separator.                    
                </javadoc>
                <method name="Separator" type="constructor" line="1525"/>
                <javadoc line="1529">
                    Returns the name of the L&amp;F class that renders this component.                    
                    <return>
                        the string "PopupMenuSeparatorUI"                        
                    </return>
                    <see>
                        JComponent#getUIClassID                        
                    </see>
                    <see>
                        UIDefaults#getUI                        
                    </see>
                </javadoc>
                <method name="getUIClassID" type="String" line="1537"/>
            </class>
            <javadoc line="1543">
                Returns true if the &lt;code&gt;MouseEvent&lt;/code&gt; is considered a popup trigger
                  by the &lt;code&gt;JPopupMenu&lt;/code&gt;&apos;s currently installed UI.                
                <return>
                    true if the mouse event is a popup trigger                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isPopupTrigger" type="boolean" line="1550">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
        </class>
    </source>