<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.image"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.EventListener"/>
        <import package="javax.swing.event"/>
        <class name="DefaultButtonModel" line="34">
            <comment line="73">
                controls the usage of the MenuItem.disabledAreNavigable UIDefaults
                 property in the setArmed() method                
            </comment>
            <implements interface="ButtonModel"/>
            <implements interface="Serializable"/>
            <javadoc line="34">
                The default implementation of a &lt;code&gt;Button&lt;/code&gt; component&apos;s data model.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing. As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="stateMask" type="int" line="50"/>
            <javadoc line="50">
                The bitmask used to store the state of the button.                
            </javadoc>
            <declaration name="actionCommand" type="String" line="53"/>
            <javadoc line="53">
                The action command string fired by the button.                
            </javadoc>
            <declaration name="group" type="ButtonGroup" line="56"/>
            <javadoc line="56">
                The button group that the button belongs to.                
            </javadoc>
            <declaration name="mnemonic" type="int" line="59"/>
            <javadoc line="59">
                The button&apos;s mnemonic.                
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="62"/>
            <javadoc line="62">
                Only one &lt;code&gt;ChangeEvent&lt;/code&gt; is needed per button model
                  instance since the event&apos;s only state is the source property.
                  The source of events generated is always &quot;this&quot;.                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="69"/>
            <javadoc line="69">
                Stores the listeners on this model.                
            </javadoc>
            <declaration name="menuItem" type="boolean" line="74"/>
            <javadoc line="76">
                Constructs a &lt;code&gt;DefaultButtonModel&lt;/code&gt;.                
            </javadoc>
            <method name="DefaultButtonModel" type="constructor" line="80"/>
            <declaration name="ARMED" type="int" line="85"/>
            <javadoc line="85">
                Identifies the &quot;armed&quot; bit in the bitmask, which
                  indicates partial commitment towards choosing/triggering
                  the button.                
            </javadoc>
            <declaration name="SELECTED" type="int" line="92"/>
            <javadoc line="92">
                Identifies the &quot;selected&quot; bit in the bitmask, which
                  indicates that the button has been selected. Only needed for
                  certain types of buttons - such as radio button or check box.                
            </javadoc>
            <declaration name="PRESSED" type="int" line="99"/>
            <javadoc line="99">
                Identifies the &quot;pressed&quot; bit in the bitmask, which
                  indicates that the button is pressed.                
            </javadoc>
            <declaration name="ENABLED" type="int" line="105"/>
            <javadoc line="105">
                Identifies the &quot;enabled&quot; bit in the bitmask, which
                  indicates that the button can be selected by
                  an input device (such as a mouse pointer).                
            </javadoc>
            <declaration name="ROLLOVER" type="int" line="112"/>
            <javadoc line="112">
                Identifies the &quot;rollover&quot; bit in the bitmask, which
                  indicates that the mouse is over the button.                
            </javadoc>
            <javadoc line="118">
                {@inheritDoc}                
            </javadoc>
            <method name="setActionCommand" type="void" line="121">
                <params>
                    <param name="actionCommand" type="String"/>
                </params>
            </method>
            <javadoc line="125">
                {@inheritDoc}                
            </javadoc>
            <method name="getActionCommand" type="String" line="128"/>
            <javadoc line="132">
                {@inheritDoc}                
            </javadoc>
            <method name="isArmed" type="boolean" line="135"/>
            <javadoc line="139">
                {@inheritDoc}                
            </javadoc>
            <method name="isSelected" type="boolean" line="142"/>
            <javadoc line="146">
                {@inheritDoc}                
            </javadoc>
            <method name="isEnabled" type="boolean" line="149"/>
            <javadoc line="153">
                {@inheritDoc}                
            </javadoc>
            <method name="isPressed" type="boolean" line="156"/>
            <javadoc line="160">
                {@inheritDoc}                
            </javadoc>
            <method name="isRollover" type="boolean" line="163"/>
            <javadoc line="167">
                {@inheritDoc}                
            </javadoc>
            <method name="setArmed" type="void" line="170">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="172">
                    <scope line="173"/>
                </scope>
                <scope line="176">
                    <scope line="177"/>
                </scope>
                <scope line="182"/>
                <scope line="184"/>
            </method>
            <javadoc line="191">
                {@inheritDoc}                
            </javadoc>
            <method name="setEnabled" type="void" line="194">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="204">
                    unarm and unpress, just in case                    
                </comment>
                <scope line="195"/>
                <scope line="199"/>
                <scope line="201"/>
            </method>
            <javadoc line="212">
                {@inheritDoc}                
            </javadoc>
            <method name="setSelected" type="void" line="215">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="216"/>
                <scope line="220"/>
                <scope line="222"/>
            </method>
            <javadoc line="237">
                {@inheritDoc}                
            </javadoc>
            <method name="setPressed" type="void" line="240">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="241"/>
                <scope line="245"/>
                <scope line="247"/>
                <scope line="251">
                    <declaration name="modifiers" type="int" line="252"/>
                    <declaration name="currentEvent" type="AWTEvent" line="253"/>
                    <scope line="254"/>
                    <scope line="256"/>
                </scope>
            </method>
            <javadoc line="269">
                {@inheritDoc}                
            </javadoc>
            <method name="setRollover" type="void" line="272">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="273"/>
                <scope line="277"/>
                <scope line="279"/>
            </method>
            <javadoc line="286">
                {@inheritDoc}                
            </javadoc>
            <method name="setMnemonic" type="void" line="289">
                <params>
                    <param name="key" type="int"/>
                </params>
            </method>
            <javadoc line="294">
                {@inheritDoc}                
            </javadoc>
            <method name="getMnemonic" type="int" line="297"/>
            <javadoc line="301">
                {@inheritDoc}                
            </javadoc>
            <method name="addChangeListener" type="void" line="304">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="308">
                {@inheritDoc}                
            </javadoc>
            <method name="removeChangeListener" type="void" line="311">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="315">
                Returns an array of all the change listeners
                  registered on this &lt;code&gt;DefaultButtonModel&lt;/code&gt;.                
                <return>
                    all of this model&apos;s &lt;code&gt;ChangeListener&lt;/code&gt;s
                      or an empty
                      array if no change listeners are currently registered                    
                </return>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="328"/>
            <javadoc line="332">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is created lazily.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="339">
                <comment line="341">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="343">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="347">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="341"/>
                <scope line="344">
                    <scope line="345"/>
                </scope>
            </method>
            <javadoc line="354">
                {@inheritDoc}                
            </javadoc>
            <method name="addActionListener" type="void" line="357">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="361">
                {@inheritDoc}                
            </javadoc>
            <method name="removeActionListener" type="void" line="364">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="368">
                Returns an array of all the action listeners
                  registered on this &lt;code&gt;DefaultButtonModel&lt;/code&gt;.                
                <return>
                    all of this model&apos;s &lt;code&gt;ActionListener&lt;/code&gt;s
                      or an empty
                      array if no action listeners are currently registered                    
                </return>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #removeActionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="381"/>
            <javadoc line="385">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    e the &lt;code&gt;ActionEvent&lt;/code&gt; to deliver to listeners                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireActionPerformed" type="void" line="392">
                <params>
                    <param name="e" type="ActionEvent"/>
                </params>
                <comment line="394">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="396">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="400">
                    Lazily create the event:
                     if (changeEvent == null)
                     changeEvent = new ChangeEvent(this);                    
                </comment>
                <declaration name="listeners" type="Object[]" line="394"/>
                <scope line="397">
                    <scope line="398"/>
                </scope>
            </method>
            <javadoc line="407">
                {@inheritDoc}                
            </javadoc>
            <method name="addItemListener" type="void" line="410">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
            </method>
            <javadoc line="414">
                {@inheritDoc}                
            </javadoc>
            <method name="removeItemListener" type="void" line="417">
                <params>
                    <param name="l" type="ItemListener"/>
                </params>
            </method>
            <javadoc line="421">
                Returns an array of all the item listeners
                  registered on this &lt;code&gt;DefaultButtonModel&lt;/code&gt;.                
                <return>
                    all of this model&apos;s &lt;code&gt;ItemListener&lt;/code&gt;s
                      or an empty
                      array if no item listeners are currently registered                    
                </return>
                <see>
                    #addItemListener                    
                </see>
                <see>
                    #removeItemListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getItemListeners" type="ItemListener[]" line="434"/>
            <javadoc line="438">
                Notifies all listeners that have registered interest for
                  notification on this event type.                
                <param>
                    e the &lt;code&gt;ItemEvent&lt;/code&gt; to deliver to listeners                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireItemStateChanged" type="void" line="445">
                <params>
                    <param name="e" type="ItemEvent"/>
                </params>
                <comment line="447">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="449">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="453">
                    Lazily create the event:
                     if (changeEvent == null)
                     changeEvent = new ChangeEvent(this);                    
                </comment>
                <declaration name="listeners" type="Object[]" line="447"/>
                <scope line="450">
                    <scope line="451"/>
                </scope>
            </method>
            <javadoc line="460">
                Returns an array of all the objects currently registered as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  are registered using the &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a &lt;code&gt;DefaultButtonModel&lt;/code&gt;
                  instance &lt;code&gt;m&lt;/code&gt;
                  for its action listeners
                  with the following code:
                  &lt;pre&gt;ActionListener[] als = (ActionListener[])(m.getListeners(ActionListener.class));&lt;/pre&gt;
                  If no such listeners exist,
                  this method returns an empty array.                
                <param>
                    listenerType  the type of listeners requested;
                      this parameter should specify an interface
                      that descends from &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                      on this model,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt; doesn&apos;t
                      specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getActionListeners                    
                </see>
                <see>
                    #getChangeListeners                    
                </see>
                <see>
                    #getItemListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="497">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="501">
                Overridden to return &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="getSelectedObjects" type="Object[]" line="502"/>
            <javadoc line="506">
                {@inheritDoc}                
            </javadoc>
            <method name="setGroup" type="void" line="509">
                <params>
                    <param name="group" type="ButtonGroup"/>
                </params>
            </method>
            <javadoc line="513">
                Returns the group that the button belongs to.
                  Normally used with radio buttons, which are mutually
                  exclusive within their group.                
                <return>
                    the &lt;code&gt;ButtonGroup&lt;/code&gt; that the button belongs to                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getGroup" type="ButtonGroup" line="522"/>
            <method name="isMenuItem" type="boolean" line="526"/>
            <method name="setMenuItem" type="void" line="530">
                <params>
                    <param name="menuItem" type="boolean"/>
                </params>
            </method>
        </class>
    </source>