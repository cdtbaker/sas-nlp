<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.EventListener"/>
        <class name="AbstractListModel" line="32">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <implements interface="ListModel">
                <type_params>
                    <type_param name="E"/>
                </type_params>
            </implements>
            <implements interface="Serializable"/>
            <javadoc line="32">
                The abstract definition for the data model that provides
                  a &lt;code&gt;List&lt;/code&gt; with its contents.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <param>
                    &lt;E&gt;
                       the type of the elements of this model                    
                </param>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="51"/>
            <javadoc line="54">
                Adds a listener to the list that&apos;s notified each time a change
                  to the data model occurs.                
                <param>
                    l the &lt;code&gt;ListDataListener&lt;/code&gt; to be added                    
                </param>
            </javadoc>
            <method name="addListDataListener" type="void" line="60">
                <params>
                    <param name="l" type="ListDataListener"/>
                </params>
            </method>
            <javadoc line="65">
                Removes a listener from the list that&apos;s notified each time a
                  change to the data model occurs.                
                <param>
                    l the &lt;code&gt;ListDataListener&lt;/code&gt; to be removed                    
                </param>
            </javadoc>
            <method name="removeListDataListener" type="void" line="71">
                <params>
                    <param name="l" type="ListDataListener"/>
                </params>
            </method>
            <javadoc line="76">
                Returns an array of all the list data listeners
                  registered on this &lt;code&gt;AbstractListModel&lt;/code&gt;.                
                <return>
                    all of this model&apos;s &lt;code&gt;ListDataListener&lt;/code&gt;s,
                      or an empty array if no list data listeners
                      are currently registered                    
                </return>
                <see>
                    #addListDataListener                    
                </see>
                <see>
                    #removeListDataListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getListDataListeners" type="ListDataListener[]" line="89"/>
            <javadoc line="94">
                &lt;code&gt;AbstractListModel&lt;/code&gt; subclasses must call this method
                  &lt;b&gt;after&lt;/b&gt;
                  one or more elements of the list change.  The changed elements
                  are specified by the closed interval index0, index1 -- the endpoints
                  are included.  Note that
                  index0 need not be less than or equal to index1.                
                <param>
                    source the &lt;code&gt;ListModel&lt;/code&gt; that changed, typically &quot;this&quot;                    
                </param>
                <param>
                    index0 one end of the new interval                    
                </param>
                <param>
                    index1 the other end of the new interval                    
                </param>
                <see>
                    EventListenerList                    
                </see>
                <see>
                    DefaultListModel                    
                </see>
            </javadoc>
            <method name="fireContentsChanged" type="void" line="109">
                <params>
                    <param name="source" type="Object"/>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="listeners" type="Object[]" line="110"/>
                <declaration name="e" type="ListDataEvent" line="111"/>
                <scope line="113">
                    <scope line="114">
                        <scope line="115"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="124">
                &lt;code&gt;AbstractListModel&lt;/code&gt; subclasses must call this method
                  &lt;b&gt;after&lt;/b&gt;
                  one or more elements are added to the model.  The new elements
                  are specified by a closed interval index0, index1 -- the enpoints
                  are included.  Note that
                  index0 need not be less than or equal to index1.                
                <param>
                    source the &lt;code&gt;ListModel&lt;/code&gt; that changed, typically &quot;this&quot;                    
                </param>
                <param>
                    index0 one end of the new interval                    
                </param>
                <param>
                    index1 the other end of the new interval                    
                </param>
                <see>
                    EventListenerList                    
                </see>
                <see>
                    DefaultListModel                    
                </see>
            </javadoc>
            <method name="fireIntervalAdded" type="void" line="139">
                <params>
                    <param name="source" type="Object"/>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="listeners" type="Object[]" line="140"/>
                <declaration name="e" type="ListDataEvent" line="141"/>
                <scope line="143">
                    <scope line="144">
                        <scope line="145"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="154">
                &lt;code&gt;AbstractListModel&lt;/code&gt; subclasses must call this method
                  &lt;b&gt;after&lt;/b&gt; one or more elements are removed from the model.
                  &lt;code&gt;index0&lt;/code&gt; and &lt;code&gt;index1&lt;/code&gt; are the end points
                  of the interval that&apos;s been removed.  Note that &lt;code&gt;index0&lt;/code&gt;
                  need not be less than or equal to &lt;code&gt;index1&lt;/code&gt;.                
                <param>
                    source the &lt;code&gt;ListModel&lt;/code&gt; that changed, typically &quot;this&quot;                    
                </param>
                <param>
                    index0 one end of the removed interval,
                      including &lt;code&gt;index0&lt;/code&gt;                    
                </param>
                <param>
                    index1 the other end of the removed interval,
                      including &lt;code&gt;index1&lt;/code&gt;                    
                </param>
                <see>
                    EventListenerList                    
                </see>
                <see>
                    DefaultListModel                    
                </see>
            </javadoc>
            <method name="fireIntervalRemoved" type="void" line="170">
                <params>
                    <param name="source" type="Object"/>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="listeners" type="Object[]" line="171"/>
                <declaration name="e" type="ListDataEvent" line="172"/>
                <scope line="174">
                    <scope line="175">
                        <scope line="176"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="184">
                Returns an array of all the objects currently registered as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  are registered using the &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a list model
                  &lt;code&gt;m&lt;/code&gt;
                  for its list data listeners
                  with the following code:
                  &lt;pre&gt;ListDataListener[] ldls = (ListDataListener[])(m.getListeners(ListDataListener.class));&lt;/pre&gt;
                  If no such listeners exist,
                  this method returns an empty array.                
                <param>
                    listenerType  the type of listeners requested;
                      this parameter should specify an interface
                      that descends from &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                      on this model,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt; doesn&apos;t
                      specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getListDataListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="219">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
            </method>
        </class>
    </source>