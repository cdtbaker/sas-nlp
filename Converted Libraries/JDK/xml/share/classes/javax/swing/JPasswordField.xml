<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io"/>
        <import package="java.util.Arrays"/>
        <class name="JPasswordField" line="10">
            <extends class="JTextField"/>
            <javadoc line="10">
                &lt;code&gt;JPasswordField&lt;/code&gt; is a lightweight component that allows
                  the editing of a single line of text where the view indicates
                  something was typed, but does not show the original characters.
                  You can find further information and examples in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/textfield.html&quot;&gt;How to Use Text Fields&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;code&gt;JPasswordField&lt;/code&gt; is intended
                  to be source-compatible with &lt;code&gt;java.awt.TextField&lt;/code&gt;
                  used with &lt;code&gt;echoChar&lt;/code&gt; set.  It is provided separately
                  to make it easier to safely change the UI for the
                  &lt;code&gt;JTextField&lt;/code&gt; without affecting password entries.
                  &lt;p&gt;
                  &lt;strong&gt;NOTE:&lt;/strong&gt;
                  By default, JPasswordField disables input methods; otherwise, input
                  characters could be visible while they were composed using input methods.
                  If an application needs the input methods support, please use the
                  inherited method, &lt;code&gt;enableInputMethods(true)&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfoattribute>
                    : isContainer false
                      description: Allows the editing of a line of text but doesn&apos;t show the characters.                    
                </beaninfoattribute>
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="48">
                Constructs a new &lt;code&gt;JPasswordField&lt;/code&gt;,
                  with a default document, &lt;code&gt;null&lt;/code&gt; starting
                  text string, and 0 column width.                
            </javadoc>
            <method name="JPasswordField" type="constructor" line="53"/>
            <javadoc line="56">
                Constructs a new &lt;code&gt;JPasswordField&lt;/code&gt; initialized
                  with the specified text.  The document model is set to the
                  default, and the number of columns to 0.                
                <param>
                    text the text to be displayed, &lt;code&gt;null&lt;/code&gt; if none                    
                </param>
            </javadoc>
            <method name="JPasswordField" type="constructor" line="62">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="65">
                Constructs a new empty &lt;code&gt;JPasswordField&lt;/code&gt; with the specified
                  number of columns.  A default model is created, and the initial string
                  is set to &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    columns the number of columns &gt;= 0                    
                </param>
            </javadoc>
            <method name="JPasswordField" type="constructor" line="71">
                <params>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="74">
                Constructs a new &lt;code&gt;JPasswordField&lt;/code&gt; initialized with
                  the specified text and columns.  The document model is set to
                  the default.                
                <param>
                    text the text to be displayed, &lt;code&gt;null&lt;/code&gt; if none                    
                </param>
                <param>
                    columns the number of columns &gt;= 0                    
                </param>
            </javadoc>
            <method name="JPasswordField" type="constructor" line="81">
                <params>
                    <param name="text" type="String"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="84">
                Constructs a new &lt;code&gt;JPasswordField&lt;/code&gt; that uses the
                  given text storage model and the given number of columns.
                  This is the constructor through which the other constructors feed.
                  The echo character is set to &apos;&apos;, but may be changed by the current
                  Look and Feel.  If the document model is
                  &lt;code&gt;null&lt;/code&gt;, a default one will be created.                
                <param>
                    doc  the text storage to use                    
                </param>
                <param>
                    txt the text to be displayed, &lt;code&gt;null&lt;/code&gt; if none                    
                </param>
                <param>
                    columns  the number of columns to use to calculate
                      the preferred width &gt;= 0; if columns is set to zero, the
                      preferred width will be whatever naturally results from
                      the component implementation                    
                </param>
            </javadoc>
            <method name="JPasswordField" type="constructor" line="98">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="txt" type="String"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="102">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string &quot;PasswordFieldUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="108"/>
            <javadoc line="111">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="updateUI" type="void" line="115">
                <scope line="116"/>
            </method>
            <javadoc line="121">
                Returns the character to be used for echoing.  The default is &apos;&apos;.
                  The default may be different depending on the currently running Look
                  and Feel. For example, Metal/Ocean&apos;s default is a bullet character.                
                <return>
                    the echo character, 0 if unset                    
                </return>
                <see>
                    #setEchoChar                    
                </see>
                <see>
                    #echoCharIsSet                    
                </see>
            </javadoc>
            <method name="getEchoChar" type="char" line="129"/>
            <javadoc line="132">
                Sets the echo character for this &lt;code&gt;JPasswordField&lt;/code&gt;.
                  Note that this is largely a suggestion, since the
                  view that gets installed can use whatever graphic techniques
                  it desires to represent the field.  Setting a value of 0 indicates
                  that you wish to see the text as it is typed, similar to
                  the behavior of a standard &lt;code&gt;JTextField&lt;/code&gt;.                
                <param>
                    c the echo character to display                    
                </param>
                <see>
                    #echoCharIsSet                    
                </see>
                <see>
                    #getEchoChar                    
                </see>
                <beaninfodescription>
                    : character to display in place of the real characters
                      attribute: visualUpdate true                    
                </beaninfodescription>
            </javadoc>
            <method name="setEchoChar" type="void" line="145">
                <params>
                    <param name="c" type="char"/>
                </params>
            </method>
            <javadoc line="151">
                Returns true if this &lt;code&gt;JPasswordField&lt;/code&gt; has a character
                  set for echoing.  A character is considered to be set if the echo
                  character is not 0.                
                <return>
                    true if a character is set for echoing                    
                </return>
                <see>
                    #setEchoChar                    
                </see>
                <see>
                    #getEchoChar                    
                </see>
            </javadoc>
            <method name="echoCharIsSet" type="boolean" line="159"/>
            <javadoc line="162">
                Invokes &lt;code&gt;provideErrorFeedback&lt;/code&gt; on the current
                  look and feel, which typically initiates an error beep.
                  The normal behavior of transferring the
                  currently selected range in the associated text model
                  to the system clipboard, and removing the contents from
                  the model, is not acceptable for a password field.                
            </javadoc>
            <method name="cut" type="void" line="170">
                <scope line="171"/>
                <scope line="174"/>
            </method>
            <javadoc line="178">
                Invokes &lt;code&gt;provideErrorFeedback&lt;/code&gt; on the current
                  look and feel, which typically initiates an error beep.
                  The normal behavior of transferring the
                  currently selected range in the associated text model
                  to the system clipboard, and leaving the contents from
                  the model, is not acceptable for a password field.                
            </javadoc>
            <method name="copy" type="void" line="186">
                <scope line="187"/>
                <scope line="190"/>
            </method>
            <javadoc line="194">
                Returns the text contained in this &lt;code&gt;TextComponent&lt;/code&gt;.
                  If the underlying document is &lt;code&gt;null&lt;/code&gt;, will give a
                  &lt;code&gt;NullPointerException&lt;/code&gt;.
                  &lt;p&gt;
                  For security reasons, this method is deprecated.  Use the
                  &lt;code&gt; getPassword&lt;/code&gt; method instead.                
                <deprecated>
                    As of Java 2 platform v1.2,
                      replaced by &lt;code&gt;getPassword&lt;/code&gt;.                    
                </deprecated>
                <return>
                    the text                    
                </return>
            </javadoc>
            <method name="getText" type="String" line="205"/>
            <javadoc line="208">
                Fetches a portion of the text represented by the
                  component.  Returns an empty string if length is 0.
                  &lt;p&gt;
                  For security reasons, this method is deprecated.  Use the
                  &lt;code&gt;getPassword&lt;/code&gt; method instead.                
                <deprecated>
                    As of Java 2 platform v1.2,
                      replaced by &lt;code&gt;getPassword&lt;/code&gt;.                    
                </deprecated>
                <param>
                    offs the offset &gt;= 0                    
                </param>
                <param>
                    len the length &gt;= 0                    
                </param>
                <return>
                    the text                    
                </return>
                <exception>
                    BadLocationException if the offset or length are invalid                    
                </exception>
            </javadoc>
            <method name="getText" type="String" line="221">
                <params>
                    <param name="offs" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="224">
                Returns the text contained in this &lt;code&gt;TextComponent&lt;/code&gt;.
                  If the underlying document is &lt;code&gt;null&lt;/code&gt;, will give a
                  &lt;code&gt;NullPointerException&lt;/code&gt;.  For stronger
                  security, it is recommended that the returned character array be
                  cleared after use by setting each character to zero.                
                <return>
                    the text                    
                </return>
            </javadoc>
            <method name="getPassword" type="char[]" line="232">
                <declaration name="doc" type="Document" line="233"/>
                <declaration name="txt" type="Segment" line="234"/>
                <scope line="235"/>
                <scope line="238"/>
                <declaration name="retValue" type="char[]" line="241"/>
            </method>
            <javadoc line="245">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="249">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="251">
                    <declaration name="count" type="byte" line="252"/>
                    <scope line="254"/>
                </scope>
            </method>
            <declaration name="uiClassID" type="String" line="259"/>
            <javadoc line="259">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="echoChar" type="char" line="264"/>
            <declaration name="echoCharSet" type="boolean" line="265"/>
            <javadoc line="266">
                Returns a string representation of this &lt;code&gt;JPasswordField&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JPasswordField&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="274"/>
            <javadoc line="277">
                This method is a hack to get around the fact that we cannot
                  directly override setUIProperty because part of the inheritance heirarchy
                  goes outside of the javax.swing package, and therefore calling a package
                  private method isn&apos;t allowed. This method should return true if the property
                  was handled, and false otherwise.                
            </javadoc>
            <method name="customSetUIProperty" type="boolean" line="284">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="285">
                    <scope line="286"/>
                </scope>
            </method>
            <javadoc line="294">
                Returns the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JPasswordField&lt;/code&gt;. For password fields, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJPasswordField&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJPasswordField&lt;/code&gt; instance is created
                  if necessary.                
                <return>
                    an &lt;code&gt;AccessibleJPasswordField&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this
                      &lt;code&gt;JPasswordField&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="305">
                <scope line="306"/>
            </method>
            <class name="AccessibleJPasswordField" line="311">
                <extends class="AccessibleJTextField"/>
                <javadoc line="311">
                    This class implements accessibility support for the
                      &lt;code&gt;JPasswordField&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to password field user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="327">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object (AccessibleRole.PASSWORD_TEXT)                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="333"/>
                <javadoc line="336">
                    Gets the &lt;code&gt;AccessibleText&lt;/code&gt; for the &lt;code&gt;JPasswordField&lt;/code&gt;.
                      The returned object also implements the
                      &lt;code&gt;AccessibleExtendedText&lt;/code&gt; interface.                    
                    <return>
                        &lt;code&gt;AccessibleText&lt;/code&gt; for the JPasswordField                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleContext                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleContext#getAccessibleText                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getAccessibleText" type="AccessibleText" line="347"/>
                <method name="getEchoString" type="String" line="350">
                    <params>
                        <param name="str" type="String"/>
                    </params>
                    <scope line="351"/>
                    <declaration name="buffer" type="char[]" line="354"/>
                </method>
                <javadoc line="358">
                    Returns the &lt;code&gt;String&lt;/code&gt; at a given &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt; or
                          &lt;code&gt;SENTENCE&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        a &lt;code&gt;String&lt;/code&gt; if &lt;code&gt;part&lt;/code&gt; and
                          &lt;code&gt;index&lt;/code&gt; are valid.
                          Otherwise, &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getAtIndex" type="String" line="371">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <declaration name="str" type="String" line="372"/>
                    <scope line="373"/>
                    <scope line="376">
                        <declaration name="password" type="char" line="377"/>
                        <scope line="378"/>
                    </scope>
                </method>
                <javadoc line="385">
                    Returns the &lt;code&gt;String&lt;/code&gt; after a given &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt; or
                          &lt;code&gt;SENTENCE&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        a &lt;code&gt;String&lt;/code&gt; if &lt;code&gt;part&lt;/code&gt; and
                          &lt;code&gt;index&lt;/code&gt; are valid.
                          Otherwise, &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getAfterIndex" type="String" line="398">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="399">
                        <declaration name="str" type="String" line="400"/>
                    </scope>
                    <scope line="403"/>
                </method>
                <javadoc line="407">
                    Returns the &lt;code&gt;String&lt;/code&gt; before a given &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt; or
                          &lt;code&gt;SENTENCE&lt;/code&gt; to retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        a &lt;code&gt;String&lt;/code&gt; if &lt;code&gt;part&lt;/code&gt; and
                          &lt;code&gt;index&lt;/code&gt; are valid.
                          Otherwise, &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getBeforeIndex" type="String" line="420">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="421">
                        <declaration name="str" type="String" line="422"/>
                    </scope>
                    <scope line="425"/>
                </method>
                <javadoc line="429">
                    Returns the text between two &lt;code&gt;indices&lt;/code&gt;.                    
                    <param>
                        startIndex the start index in the text                        
                    </param>
                    <param>
                        endIndex the end index in the text                        
                    </param>
                    <return>
                        the text string if the indices are valid.
                          Otherwise, &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextRange" type="String" line="437">
                    <params>
                        <param name="startIndex" type="int"/>
                        <param name="endIndex" type="int"/>
                    </params>
                    <declaration name="str" type="String" line="438"/>
                </method>
                <javadoc line="441">
                    Returns the &lt;code&gt;AccessibleTextSequence&lt;/code&gt; at a given
                      &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to
                          retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text if
                          &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextSequenceAt" type="AccessibleTextSequence" line="458">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="459">
                        <declaration name="seq" type="AccessibleTextSequence" line="460"/>
                        <scope line="461"/>
                    </scope>
                    <scope line="466">
                        <declaration name="password" type="char" line="467"/>
                        <scope line="468"/>
                        <declaration name="text" type="String" line="471"/>
                    </scope>
                </method>
                <javadoc line="475">
                    Returns the &lt;code&gt;AccessibleTextSequence&lt;/code&gt; after a given
                      &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to
                          retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text if
                          &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextSequenceAfter" type="AccessibleTextSequence" line="492">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="493">
                        <declaration name="seq" type="AccessibleTextSequence" line="494"/>
                        <scope line="495"/>
                    </scope>
                    <scope line="500"/>
                </method>
                <javadoc line="504">
                    Returns the &lt;code&gt;AccessibleTextSequence&lt;/code&gt; before a given
                      &lt;code&gt;index&lt;/code&gt;.                    
                    <param>
                        part the &lt;code&gt;CHARACTER&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;,
                          &lt;code&gt;SENTENCE&lt;/code&gt;, &lt;code&gt;LINE&lt;/code&gt; or &lt;code&gt;ATTRIBUTE_RUN&lt;/code&gt; to
                          retrieve                        
                    </param>
                    <param>
                        index an index within the text                        
                    </param>
                    <return>
                        an &lt;code&gt;AccessibleTextSequence&lt;/code&gt; specifying the text if
                          &lt;code&gt;part&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; are valid.  Otherwise,
                          &lt;code&gt;null&lt;/code&gt; is returned                        
                    </return>
                    <see>
                        javax.accessibility.AccessibleText#CHARACTER                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#WORD                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleText#SENTENCE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#LINE                        
                    </see>
                    <see>
                        javax.accessibility.AccessibleExtendedText#ATTRIBUTE_RUN                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <method name="getTextSequenceBefore" type="AccessibleTextSequence" line="521">
                    <params>
                        <param name="part" type="int"/>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="522">
                        <declaration name="seq" type="AccessibleTextSequence" line="523"/>
                        <scope line="524"/>
                    </scope>
                    <scope line="529"/>
                </method>
            </class>
        </class>
    </source>