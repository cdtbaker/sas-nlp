<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.colorchooser">
        <import package="java.awt"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="javax.swing"/>
        <class name="AbstractColorChooserPanel" line="33">
            <extends class="JPanel"/>
            <javadoc line="33">
                This is the abstract superclass for color choosers.  If you want to add
                  a new color chooser panel into a &lt;code&gt;JColorChooser&lt;/code&gt;, subclass
                  this class.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Tom Santos                    
                </author>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="enabledListener" type="PropertyChangeListener" line="52"/>
            <anonymous_class line="52">
                <method name="propertyChange" type="void" line="53">
                    <params>
                        <param name="event" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="value" type="Object" line="54"/>
                    <scope line="55"/>
                </method>
            </anonymous_class>
            <declaration name="chooser" type="JColorChooser" line="61"/>
            <javadoc line="61">
                                
            </javadoc>
            <method name="updateChooser" type="void" line="66"/>
            <javadoc line="66">
                Invoked automatically when the model&apos;s state changes.
                  It is also called by &lt;code&gt;installChooserPanel&lt;/code&gt; to allow
                  you to set up the initial state of your chooser.
                  Override this method to update your &lt;code&gt;ChooserPanel&lt;/code&gt;.                
            </javadoc>
            <method name="buildChooser" type="void" line="74"/>
            <javadoc line="74">
                Builds a new chooser panel.                
            </javadoc>
            <method name="getDisplayName" type="String" line="79"/>
            <javadoc line="79">
                Returns a string containing the display name of the panel.                
                <return>
                    the name of the display panel                    
                </return>
            </javadoc>
            <javadoc line="85">
                Provides a hint to the look and feel as to the
                  &lt;code&gt;KeyEvent.VK&lt;/code&gt; constant that can be used as a mnemonic to
                  access the panel. A return value &lt;= 0 indicates there is no mnemonic.
                  &lt;p&gt;
                  The return value here is a hint, it is ultimately up to the look
                  and feel to honor the return value in some meaningful way.
                  &lt;p&gt;
                  This implementation returns 0, indicating the
                  &lt;code&gt;AbstractColorChooserPanel&lt;/code&gt; does not support a mnemonic,
                  subclasses wishing a mnemonic will need to override this.                
                <return>
                    KeyEvent.VK constant identifying the mnemonic; <= 0 for no
                      mnemonic                    
                </return>
                <see>
                    #getDisplayedMnemonicIndex                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMnemonic" type="int" line="102"/>
            <javadoc line="106">
                Provides a hint to the look and feel as to the index of the character in
                  &lt;code&gt;getDisplayName&lt;/code&gt; that should be visually identified as the
                  mnemonic. The look and feel should only use this if
                  &lt;code&gt;getMnemonic&lt;/code&gt; returns a value &gt; 0.
                  &lt;p&gt;
                  The return value here is a hint, it is ultimately up to the look
                  and feel to honor the return value in some meaningful way. For example,
                  a look and feel may wish to render each
                  &lt;code&gt;AbstractColorChooserPanel&lt;/code&gt; in a &lt;code&gt;JTabbedPane&lt;/code&gt;,
                  and further use this return value to underline a character in
                  the &lt;code&gt;getDisplayName&lt;/code&gt;.
                  &lt;p&gt;
                  This implementation returns -1, indicating the
                  &lt;code&gt;AbstractColorChooserPanel&lt;/code&gt; does not support a mnemonic,
                  subclasses wishing a mnemonic will need to override this.                
                <return>
                    Character index to render mnemonic for; -1 to provide no
                      visual identifier for this panel.                    
                </return>
                <see>
                    #getMnemonic                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDisplayedMnemonicIndex" type="int" line="128"/>
            <method name="getSmallDisplayIcon" type="Icon" line="132"/>
            <javadoc line="132">
                Returns the small display icon for the panel.                
                <return>
                    the small display icon                    
                </return>
            </javadoc>
            <method name="getLargeDisplayIcon" type="Icon" line="138"/>
            <javadoc line="138">
                Returns the large display icon for the panel.                
                <return>
                    the large display icon                    
                </return>
            </javadoc>
            <javadoc line="144">
                Invoked when the panel is added to the chooser.
                  If you override this, be sure to call &lt;code&gt;super&lt;/code&gt;.                
                <param>
                    enclosingChooser  the panel to be added                    
                </param>
                <exception>
                    RuntimeException  if the chooser panel has already been
                      installed                    
                </exception>
            </javadoc>
            <method name="installChooserPanel" type="void" line="151">
                <params>
                    <param name="enclosingChooser" type="JColorChooser"/>
                </params>
                <scope line="152"/>
            </method>
            <javadoc line="162">
                Invoked when the panel is removed from the chooser.
                  If override this, be sure to call &lt;code&gt;super&lt;/code&gt;.                
            </javadoc>
            <method name="uninstallChooserPanel" type="void" line="166">
                <params>
                    <param name="enclosingChooser" type="JColorChooser"/>
                </params>
            </method>
            <javadoc line="171">
                Returns the model that the chooser panel is editing.                
                <return>
                    the <code>ColorSelectionModel</code> model this panel
                      is editing                    
                </return>
            </javadoc>
            <method name="getColorSelectionModel" type="ColorSelectionModel" line="176"/>
            <javadoc line="182">
                Returns the color that is currently selected.                
                <return>
                    the <code>Color</code> that is selected                    
                </return>
            </javadoc>
            <method name="getColorFromModel" type="Color" line="186">
                <declaration name="model" type="ColorSelectionModel" line="187"/>
            </method>
            <method name="setSelectedColor" type="void" line="193">
                <params>
                    <param name="color" type="Color"/>
                </params>
                <declaration name="model" type="ColorSelectionModel" line="194"/>
                <scope line="195"/>
            </method>
            <javadoc line="200">
                Draws the panel.                
                <param>
                    g  the <code>Graphics</code> object                    
                </param>
            </javadoc>
            <method name="paint" type="void" line="204">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="208">
                Returns an integer from the defaults table. If &lt;code&gt;key&lt;/code&gt; does
                  not map to a valid &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt; is
                  returned.                
                <param>
                    key  an <code>Object</code> specifying the int                    
                </param>
                <param>
                    defaultValue Returned value if <code>key</code> is not available,
                      or is not an Integer                    
                </param>
                <return>
                    the int                    
                </return>
            </javadoc>
            <method name="getInt" type="int" line="218">
                <params>
                    <param name="key" type="Object"/>
                    <param name="defaultValue" type="int"/>
                </params>
                <declaration name="value" type="Object" line="219"/>
                <scope line="221"/>
                <scope line="224">
                    <scope line="225"/>
                    <scope line="227"/>
                </scope>
            </method>
        </class>
    </source>