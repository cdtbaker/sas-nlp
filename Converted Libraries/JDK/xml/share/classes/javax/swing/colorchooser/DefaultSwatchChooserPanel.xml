<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.colorchooser">
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event"/>
        <import package="java.awt"/>
        <import package="java.awt.image"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.io.Serializable"/>
        <import package="javax.accessibility"/>
        <class name="DefaultSwatchChooserPanel" line="40">
            <extends class="AbstractColorChooserPanel"/>
            <javadoc line="40">
                The standard color swatch chooser.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="swatchPanel" type="SwatchPanel" line="56"/>
            <declaration name="recentSwatchPanel" type="RecentSwatchPanel" line="57"/>
            <declaration name="mainSwatchListener" type="MouseListener" line="58"/>
            <declaration name="recentSwatchListener" type="MouseListener" line="59"/>
            <method name="DefaultSwatchChooserPanel" type="constructor" line="61"/>
            <method name="getDisplayName" type="String" line="66"/>
            <javadoc line="70">
                Provides a hint to the look and feel as to the
                  &lt;code&gt;KeyEvent.VK&lt;/code&gt; constant that can be used as a mnemonic to
                  access the panel. A return value &lt;= 0 indicates there is no mnemonic.
                  &lt;p&gt;
                  The return value here is a hint, it is ultimately up to the look
                  and feel to honor the return value in some meaningful way.
                  &lt;p&gt;
                  This implementation looks up the value from the default
                  &lt;code&gt;ColorChooser.swatchesMnemonic&lt;/code&gt;, or if it
                  isn&apos;t available (or not an &lt;code&gt;Integer&lt;/code&gt;) returns -1.
                  The lookup for the default is done through the &lt;code&gt;UIManager&lt;/code&gt;:
                  &lt;code&gt;UIManager.get(&quot;ColorChooser.swatchesMnemonic&quot;);&lt;/code&gt;.                
                <return>
                    KeyEvent.VK constant identifying the mnemonic; <= 0 for no
                      mnemonic                    
                </return>
                <see>
                    #getDisplayedMnemonicIndex                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getMnemonic" type="int" line="89"/>
            <javadoc line="93">
                Provides a hint to the look and feel as to the index of the character in
                  &lt;code&gt;getDisplayName&lt;/code&gt; that should be visually identified as the
                  mnemonic. The look and feel should only use this if
                  &lt;code&gt;getMnemonic&lt;/code&gt; returns a value &gt; 0.
                  &lt;p&gt;
                  The return value here is a hint, it is ultimately up to the look
                  and feel to honor the return value in some meaningful way. For example,
                  a look and feel may wish to render each
                  &lt;code&gt;AbstractColorChooserPanel&lt;/code&gt; in a &lt;code&gt;JTabbedPane&lt;/code&gt;,
                  and further use this return value to underline a character in
                  the &lt;code&gt;getDisplayName&lt;/code&gt;.
                  &lt;p&gt;
                  This implementation looks up the value from the default
                  &lt;code&gt;ColorChooser.rgbDisplayedMnemonicIndex&lt;/code&gt;, or if it
                  isn&apos;t available (or not an &lt;code&gt;Integer&lt;/code&gt;) returns -1.
                  The lookup for the default is done through the &lt;code&gt;UIManager&lt;/code&gt;:
                  &lt;code&gt;UIManager.get(&quot;ColorChooser.swatchesDisplayedMnemonicIndex&quot;);&lt;/code&gt;.                
                <return>
                    Character index to render mnemonic for; -1 to provide no
                      visual identifier for this panel.                    
                </return>
                <see>
                    #getMnemonic                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDisplayedMnemonicIndex" type="int" line="117"/>
            <method name="getSmallDisplayIcon" type="Icon" line="121"/>
            <method name="getLargeDisplayIcon" type="Icon" line="125"/>
            <javadoc line="129">
                The background color, foreground color, and font are already set to the
                  defaults from the defaults table before this method is called.                
            </javadoc>
            <method name="installChooserPanel" type="void" line="133">
                <params>
                    <param name="enclosingChooser" type="JColorChooser"/>
                </params>
            </method>
            <method name="buildChooser" type="void" line="137">
                <declaration name="recentStr" type="String" line="139"/>
                <declaration name="gb" type="GridBagLayout" line="141"/>
                <declaration name="gbc" type="GridBagConstraints" line="142"/>
                <declaration name="superHolder" type="JPanel" line="143"/>
                <declaration name="mainHolder" type="JPanel" line="159"/>
                <declaration name="border" type="Border" line="160"/>
                <declaration name="oldInsets" type="Insets" line="168"/>
                <declaration name="recentHolder" type="JPanel" line="174"/>
                <declaration name="l" type="JLabel" line="179"/>
            </method>
            <method name="uninstallChooserPanel" type="void" line="196">
                <params>
                    <param name="enclosingChooser" type="JColorChooser"/>
                </params>
                <comment line="204">
                    strip out all the sub-components                    
                </comment>
            </method>
            <method name="updateChooser" type="void" line="207"/>
            <class name="RecentSwatchListener" line="212">
                <extends class="MouseAdapter"/>
                <implements interface="Serializable"/>
                <method name="mousePressed" type="void" line="213">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="214">
                        <declaration name="color" type="Color" line="215"/>
                    </scope>
                </method>
            </class>
            <class name="MainSwatchListener" line="221">
                <extends class="MouseAdapter"/>
                <implements interface="Serializable"/>
                <method name="mousePressed" type="void" line="222">
                    <params>
                        <param name="e" type="MouseEvent"/>
                    </params>
                    <scope line="223">
                        <declaration name="color" type="Color" line="224"/>
                    </scope>
                </method>
            </class>
        </class>
        <class name="SwatchPanel" line="235">
            <extends class="JPanel"/>
            <declaration name="colors" type="Color[]" line="237"/>
            <declaration name="swatchSize" type="Dimension" line="238"/>
            <declaration name="numSwatches" type="Dimension" line="239"/>
            <declaration name="gap" type="Dimension" line="240"/>
            <method name="SwatchPanel" type="constructor" line="242">
                <comment line="245">
                    register for events                    
                </comment>
            </method>
            <method name="isFocusTraversable" type="boolean" line="252"/>
            <method name="initValues" type="void" line="256"/>
            <method name="paintComponent" type="void" line="260">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="263">
                    <declaration name="y" type="int" line="264"/>
                    <scope line="265">
                        <declaration name="x" type="int" line="268"/>
                        <scope line="270"/>
                        <scope line="272"/>
                    </scope>
                </scope>
            </method>
            <method name="getPreferredSize" type="Dimension" line="283">
                <declaration name="x" type="int" line="284"/>
                <declaration name="y" type="int" line="285"/>
            </method>
            <method name="initColors" type="void" line="289"/>
            <method name="getToolTipText" type="String" line="294">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="color" type="Color" line="295"/>
            </method>
            <method name="getColorForLocation" type="Color" line="299">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="column" type="int" line="300"/>
                <scope line="302"/>
                <scope line="304"/>
                <declaration name="row" type="int" line="307"/>
            </method>
            <method name="getColorForCell" type="Color" line="311">
                <params>
                    <param name="column" type="int"/>
                    <param name="row" type="int"/>
                </params>
                <comment line="312">
                    (STEVE) - change data orientation here                    
                </comment>
            </method>
        </class>
        <class name="RecentSwatchPanel" line="320">
            <extends class="SwatchPanel"/>
            <method name="initValues" type="void" line="321"/>
            <method name="initColors" type="void" line="328">
                <declaration name="defaultRecentColor" type="Color" line="329"/>
                <declaration name="numColors" type="int" line="330"/>
                <scope line="333"/>
            </method>
            <method name="setMostRecentColor" type="void" line="338">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
        </class>
        <class name="MainSwatchPanel" line="347">
            <extends class="SwatchPanel"/>
            <method name="initValues" type="void" line="350"/>
            <method name="initColors" type="void" line="356">
                <declaration name="rawValues" type="int[]" line="357"/>
                <declaration name="numColors" type="int" line="358"/>
                <scope line="361"/>
            </method>
            <method name="initRawValues" type="int[]" line="366">
                <comment line="369">
                    first row.                    
                </comment>
                <comment line="400">
                    second row.                    
                </comment>
                <comment line="431">
                    third row                    
                </comment>
                <comment line="462">
                    fourth row                    
                </comment>
                <comment line="493">
                    Fifth row                    
                </comment>
                <comment line="524">
                    sixth row                    
                </comment>
                <comment line="555">
                    seventh row                    
                </comment>
                <comment line="586">
                    eigth row                    
                </comment>
                <comment line="617">
                    ninth row                    
                </comment>
                <declaration name="rawValues" type="int[]" line="368"/>
            </method>
        </class>
    </source>