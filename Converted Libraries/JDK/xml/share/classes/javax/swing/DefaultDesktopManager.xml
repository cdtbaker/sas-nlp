<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="com.sun.awt.AWTUtilities"/>
        <import package="sun.awt.AWTAccessor"/>
        <import package="sun.awt.SunToolkit"/>
        <import package="java.awt"/>
        <import package="java.beans.PropertyVetoException"/>
        <class name="DefaultDesktopManager" line="7">
            <implements interface="DesktopManager"/>
            <implements interface="java.io.Serializable"/>
            <javadoc line="7">
                This is an implementation of the &lt;code&gt;DesktopManager&lt;/code&gt;.
                  It currently implements the basic behaviors for managing
                  &lt;code&gt;JInternalFrame&lt;/code&gt;s in an arbitrary parent.
                  &lt;code&gt;JInternalFrame&lt;/code&gt;s that are not children of a
                  &lt;code&gt;JDesktop&lt;/code&gt; will use this component
                  to handle their desktop-like actions.
                  &lt;p&gt;This class provides a policy for the various JInternalFrame methods,
                  it is not meant to be called directly rather the various JInternalFrame
                  methods will call into the DesktopManager.&lt;/p&gt;                
                <see>
                    JDesktopPane                    
                </see>
                <see>
                    JInternalFrame                    
                </see>
                <author>
                    David Kloba                    
                </author>
                <author>
                    Steve Wilson                    
                </author>
            </javadoc>
            <declaration name="HAS_BEEN_ICONIFIED_PROPERTY" type="String" line="23"/>
            <declaration name="DEFAULT_DRAG_MODE" type="int" line="24"/>
            <declaration name="OUTLINE_DRAG_MODE" type="int" line="25"/>
            <declaration name="FASTER_DRAG_MODE" type="int" line="26"/>
            <declaration name="dragMode" type="int" line="27"/>
            <declaration name="currentBounds" type="Rectangle" line="28"/>
            <declaration name="desktopGraphics" type="Graphics" line="29"/>
            <declaration name="desktopBounds" type="Rectangle" line="30"/>
            <declaration name="floatingItems" type="Rectangle[]" line="31"/>
            <declaration name="didDrag" type="boolean" line="32"/>
            <javadoc line="32">
                Set to true when the user actually drags a frame vs clicks on it
                  to start the drag operation.  This is only used when dragging with
                  FASTER_DRAG_MODE.                
            </javadoc>
            <javadoc line="38">
                Normally this method will not be called. If it is, it
                  try to determine the appropriate parent from the desktopIcon of the frame.
                  Will remove the desktopIcon from its parent if it successfully adds the frame.                
            </javadoc>
            <method name="openFrame" type="void" line="43">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <scope line="44"/>
            </method>
            <javadoc line="49">
                Removes the frame, and, if necessary, the
                  &lt;code&gt;desktopIcon&lt;/code&gt;, from its parent.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; to be removed                    
                </param>
            </javadoc>
            <method name="closeFrame" type="void" line="54">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="d" type="JDesktopPane" line="55"/>
                <scope line="56"/>
                <declaration name="findNext" type="boolean" line="59"/>
                <declaration name="c" type="Container" line="60"/>
                <declaration name="nextFrame" type="JInternalFrame" line="61"/>
                <scope line="62">
                    <scope line="64"/>
                    <scope line="67"/>
                </scope>
                <scope line="70"/>
                <scope line="77">
                    <scope line="78"/>
                    <scope line="81"/>
                </scope>
                <scope line="84"/>
            </method>
            <javadoc line="88">
                Resizes the frame to fill its parents bounds.                
                <param>
                    f the frame to be resized                    
                </param>
            </javadoc>
            <method name="maximizeFrame" type="void" line="92">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <scope line="93">
                    <scope line="94"/>
                    <scope line="97"/>
                </scope>
                <scope line="100">
                    <declaration name="desktopBounds" type="Rectangle" line="102"/>
                </scope>
                <scope line="105"/>
                <scope line="108"/>
            </method>
            <javadoc line="111">
                Restores the frame back to its size and position prior
                  to a &lt;code&gt;maximizeFrame&lt;/code&gt; call.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; to be restored                    
                </param>
            </javadoc>
            <method name="minimizeFrame" type="void" line="116">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <scope line="117"/>
                <scope line="121">
                    <declaration name="r" type="Rectangle" line="122"/>
                    <scope line="124"/>
                    <scope line="127"/>
                </scope>
            </method>
            <javadoc line="132">
                Removes the frame from its parent and adds its
                  &lt;code&gt;desktopIcon&lt;/code&gt; to the parent.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; to be iconified                    
                </param>
            </javadoc>
            <method name="iconifyFrame" type="void" line="137">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="desktopIcon" type="JInternalFrame.JDesktopIcon" line="138"/>
                <declaration name="c" type="Container" line="139"/>
                <declaration name="d" type="JDesktopPane" line="140"/>
                <declaration name="findNext" type="boolean" line="141"/>
                <scope line="143">
                    <declaration name="r" type="Rectangle" line="144"/>
                </scope>
                <scope line="149"/>
                <scope line="152">
                    <declaration name="lp" type="JLayeredPane" line="153"/>
                    <declaration name="layer" type="int" line="154"/>
                </scope>
                <scope line="157"/>
                <scope line="165">
                    <scope line="166"/>
                </scope>
            </method>
            <javadoc line="171">
                Removes the desktopIcon from its parent and adds its frame
                  to the parent.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; to be de-iconified                    
                </param>
            </javadoc>
            <method name="deiconifyFrame" type="void" line="176">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="desktopIcon" type="JInternalFrame.JDesktopIcon" line="177"/>
                <declaration name="c" type="Container" line="178"/>
                <declaration name="d" type="JDesktopPane" line="179"/>
                <scope line="180">
                    <scope line="182">
                        <declaration name="desktopBounds" type="Rectangle" line="183"/>
                        <scope line="184"/>
                    </scope>
                    <scope line="189"/>
                    <scope line="193">
                        <scope line="194"/>
                        <scope line="197"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="202">
                This will activate &lt;b&gt;f&lt;/b&gt; moving it to the front. It will
                  set the current active frame&apos;s (if any)
                  &lt;code&gt;IS_SELECTED_PROPERTY&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.
                  There can be only one active frame across all Layers.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; to be activated                    
                </param>
            </javadoc>
            <method name="activateFrame" type="void" line="209">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="p" type="Container" line="210"/>
                <declaration name="c" type="Component[]" line="211"/>
                <declaration name="d" type="JDesktopPane" line="212"/>
                <declaration name="currentlyActiveFrame" type="JInternalFrame" line="213"/>
                <scope line="214"/>
                <scope line="218">
                    <scope line="219"/>
                </scope>
                <scope line="223">
                    <scope line="224">
                        <scope line="225"/>
                        <scope line="228"/>
                    </scope>
                    <scope line="231"/>
                </scope>
            </method>
            <method name="deactivateFrame" type="void" line="237">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="d" type="JDesktopPane" line="238"/>
                <declaration name="currentlyActiveFrame" type="JInternalFrame" line="239"/>
            </method>
            <method name="beginDraggingFrame" type="void" line="242">
                <params>
                    <param name="f" type="JComponent"/>
                </params>
                <scope line="244">
                    <declaration name="desktop" type="Component" line="245"/>
                    <scope line="248"/>
                    <scope line="251"/>
                </scope>
            </method>
            <method name="setupDragMode" type="void" line="260">
                <params>
                    <param name="f" type="JComponent"/>
                </params>
                <declaration name="p" type="JDesktopPane" line="261"/>
                <declaration name="parent" type="Container" line="262"/>
                <scope line="264">
                    <declaration name="mode" type="String" line="265"/>
                    <declaration name="window" type="Window" line="266"/>
                    <scope line="267"/>
                    <scope line="270"/>
                    <scope line="273"/>
                    <scope line="276">
                        <scope line="277"/>
                        <scope line="280"/>
                        <scope line="283"/>
                    </scope>
                </scope>
            </method>
            <declaration name="currentLoc" type="Point" line="289"/>
            <javadoc line="290">
                Moves the visible location of the frame being dragged
                  to the location specified.  The means by which this occurs can vary depending
                  on the dragging algorithm being used.  The actual logical location of the frame
                  might not change until &lt;code&gt;endDraggingFrame&lt;/code&gt; is called.                
            </javadoc>
            <method name="dragFrame" type="void" line="296">
                <params>
                    <param name="f" type="JComponent"/>
                    <param name="newX" type="int"/>
                    <param name="newY" type="int"/>
                </params>
                <scope line="297">
                    <declaration name="desktopPane" type="JDesktopPane" line="298"/>
                    <scope line="299">
                        <declaration name="g" type="Graphics" line="300"/>
                        <scope line="302"/>
                        <declaration name="sData" type="sun.java2d.SurfaceData" line="306"/>
                        <scope line="307"/>
                    </scope>
                </scope>
                <scope line="314"/>
                <scope line="317"/>
            </method>
            <method name="endDraggingFrame" type="void" line="321">
                <params>
                    <param name="f" type="JComponent"/>
                </params>
                <scope line="322"/>
                <scope line="326">
                    <scope line="328"/>
                </scope>
            </method>
            <method name="beginResizingFrame" type="void" line="336">
                <params>
                    <param name="f" type="JComponent"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="339">
                Calls &lt;code&gt;setBoundsForFrame&lt;/code&gt; with the new values.                
                <param>
                    f the component to be resized                    
                </param>
                <param>
                    newX the new x-coordinate                    
                </param>
                <param>
                    newY the new y-coordinate                    
                </param>
                <param>
                    newWidth the new width                    
                </param>
                <param>
                    newHeight the new height                    
                </param>
            </javadoc>
            <method name="resizeFrame" type="void" line="347">
                <params>
                    <param name="f" type="JComponent"/>
                    <param name="newX" type="int"/>
                    <param name="newY" type="int"/>
                    <param name="newWidth" type="int"/>
                    <param name="newHeight" type="int"/>
                </params>
                <scope line="348"/>
                <scope line="351">
                    <declaration name="desktopPane" type="JDesktopPane" line="352"/>
                    <scope line="353">
                        <declaration name="g" type="Graphics" line="354"/>
                        <scope line="356"/>
                        <declaration name="sData" type="sun.java2d.SurfaceData" line="360"/>
                        <scope line="361"/>
                    </scope>
                </scope>
            </method>
            <method name="endResizingFrame" type="void" line="369">
                <params>
                    <param name="f" type="JComponent"/>
                </params>
                <scope line="370"/>
            </method>
            <javadoc line="375">
                This moves the &lt;code&gt;JComponent&lt;/code&gt; and repaints the damaged areas.                
            </javadoc>
            <method name="setBoundsForFrame" type="void" line="378">
                <params>
                    <param name="f" type="JComponent"/>
                    <param name="newX" type="int"/>
                    <param name="newY" type="int"/>
                    <param name="newWidth" type="int"/>
                    <param name="newHeight" type="int"/>
                </params>
            </method>
            <javadoc line="382">
                Convenience method to remove the desktopIcon of &lt;b&gt;f&lt;/b&gt; is necessary.                
            </javadoc>
            <method name="removeIconFor" type="void" line="385">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="di" type="JInternalFrame.JDesktopIcon" line="386"/>
                <declaration name="c" type="Container" line="387"/>
                <scope line="388"/>
            </method>
            <javadoc line="393">
                The iconifyFrame() code calls this to determine the proper bounds
                  for the desktopIcon.                
            </javadoc>
            <method name="getBoundsForIconOf" type="Rectangle" line="397">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
                <declaration name="icon" type="JInternalFrame.JDesktopIcon" line="398"/>
                <declaration name="prefSize" type="Dimension" line="399"/>
                <declaration name="c" type="Container" line="400"/>
                <scope line="401"/>
                <scope line="404"/>
                <declaration name="parentBounds" type="Rectangle" line="407"/>
                <declaration name="components" type="Component[]" line="408"/>
                <declaration name="availableRectangle" type="Rectangle" line="409"/>
                <declaration name="currentIcon" type="JInternalFrame.JDesktopIcon" line="410"/>
                <declaration name="x" type="int" line="411"/>
                <declaration name="y" type="int" line="412"/>
                <declaration name="w" type="int" line="413"/>
                <declaration name="h" type="int" line="414"/>
                <declaration name="found" type="boolean" line="415"/>
                <scope line="416">
                    <scope line="419">
                        <scope line="420"/>
                        <scope line="423"/>
                        <scope line="427">
                            <scope line="428"/>
                        </scope>
                    </scope>
                    <scope line="436"/>
                </scope>
            </method>
            <javadoc line="443">
                Stores the bounds of the component just before a maximize call.                
                <param>
                    f the component about to be resized                    
                </param>
                <param>
                    r the normal bounds to be saved away                    
                </param>
            </javadoc>
            <method name="setPreviousBounds" type="void" line="448">
                <params>
                    <param name="f" type="JInternalFrame"/>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="451">
                Gets the normal bounds of the component prior to the component
                  being maximized.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; of interest                    
                </param>
                <return>
                    the normal bounds of the component                    
                </return>
            </javadoc>
            <method name="getPreviousBounds" type="Rectangle" line="457">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
            </method>
            <javadoc line="460">
                Sets that the component has been iconized and the bounds of the
                  &lt;code&gt;desktopIcon&lt;/code&gt; are valid.                
            </javadoc>
            <method name="setWasIcon" type="void" line="464">
                <params>
                    <param name="f" type="JInternalFrame"/>
                    <param name="value" type="Boolean"/>
                </params>
                <scope line="465"/>
            </method>
            <javadoc line="469">
                Returns &lt;code&gt;true&lt;/code&gt; if the component has been iconized
                  and the bounds of the &lt;code&gt;desktopIcon&lt;/code&gt; are valid,
                  otherwise returns &lt;code&gt;false&lt;/code&gt;.                
                <param>
                    f the &lt;code&gt;JInternalFrame&lt;/code&gt; of interest                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the component has been iconized;
                      otherwise returns &lt;code&gt;false&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="wasIcon" type="boolean" line="477">
                <params>
                    <param name="f" type="JInternalFrame"/>
                </params>
            </method>
            <method name="getDesktopPane" type="JDesktopPane" line="480">
                <params>
                    <param name="frame" type="JComponent"/>
                </params>
                <declaration name="pane" type="JDesktopPane" line="481"/>
                <declaration name="c" type="Component" line="482"/>
                <scope line="483">
                    <scope line="484"/>
                    <scope line="487"/>
                    <scope line="490"/>
                </scope>
            </method>
            <method name="dragFrameFaster" type="void" line="496">
                <params>
                    <param name="f" type="JComponent"/>
                    <param name="newX" type="int"/>
                    <param name="newY" type="int"/>
                </params>
                <declaration name="previousBounds" type="Rectangle" line="497"/>
                <scope line="500"/>
                <scope line="503"/>
                <declaration name="floaterCollision" type="boolean" line="507"/>
                <declaration name="parent" type="JComponent" line="508"/>
                <declaration name="visBounds" type="Rectangle" line="509"/>
                <declaration name="currentManager" type="RepaintManager" line="510"/>
                <scope line="512">
                    <scope line="513"/>
                    <scope line="517"/>
                    <declaration name="dirtyRects" type="Rectangle[]" line="524"/>
                    <scope line="525"/>
                    <scope line="528"/>
                    <scope line="533"/>
                    <scope line="536">
                        <scope line="538"/>
                    </scope>
                </scope>
                <scope line="547"/>
                <declaration name="topLevel" type="Window" line="550"/>
                <declaration name="tk" type="Toolkit" line="551"/>
                <scope line="552"/>
            </method>
            <method name="isFloaterCollision" type="boolean" line="556">
                <params>
                    <param name="moveFrom" type="Rectangle"/>
                    <param name="moveTo" type="Rectangle"/>
                </params>
                <scope line="557"/>
                <scope line="560">
                    <declaration name="intersectsFrom" type="boolean" line="561"/>
                    <scope line="562"/>
                    <declaration name="intersectsTo" type="boolean" line="565"/>
                    <scope line="566"/>
                </scope>
            </method>
            <method name="findFloatingItems" type="Rectangle[]" line="572">
                <params>
                    <param name="f" type="JComponent"/>
                </params>
                <declaration name="desktop" type="Container" line="573"/>
                <declaration name="children" type="Component[]" line="574"/>
                <declaration name="i" type="int" line="575"/>
                <scope line="576">
                    <scope line="577"/>
                </scope>
                <declaration name="floaters" type="Rectangle[]" line="581"/>
                <scope line="582"/>
            </method>
            <javadoc line="587">
                This method is here to clean up problems associated
                  with a race condition which can occur when the full contents
                  of a copyArea&apos;s source argument is not available onscreen.
                  This uses brute force to clean up in case of possible damage                
            </javadoc>
            <method name="emergencyCleanup" type="void" line="593">
                <params>
                    <param name="f" type="JComponent"/>
                </params>
                <scope line="594">
                    <anonymous_class line="595">
                        <method name="run" type="void" line="596"/>
                    </anonymous_class>
                </scope>
            </method>
        </class>
    </source>