<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="sun.swing.SwingUtilities2"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.lang.reflect"/>
        <import package="java.net"/>
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.util"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.text.html"/>
        <import package="javax.accessibility"/>
        <class name="JEditorPane" line="43">
            <extends class="JTextComponent"/>
            <comment line="1314">
                --- java.awt.Component methods --------------------------                
            </comment>
            <comment line="1363">
                --- JTextComponent methods -----------------------------                
            </comment>
            <comment line="1447">
                --- Scrollable  ----------------------------------------                
            </comment>
            <comment line="1496">
                --- Serialization ------------------------------------                
            </comment>
            <comment line="1514">
                --- variables ---------------------------------------                
            </comment>
            <comment line="1534">
                Private AppContext keys for this class&apos;s static variables.                
            </comment>
            <comment line="1602">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="2267">
                This is useful for the nightmare of parsing multi-part HTTPRFC822 headers
                 sensibly:
                 From a String like: &apos;timeout=15, max=5&apos;
                 create an array of Strings:
                 { {&quot;timeout&quot;, &quot;15&quot;},
                   {&quot;max&quot;, &quot;5&quot;}
                 }
                 From one like: &apos;Basic Realm=&quot;FuzzFace&quot; Foo=&quot;Biz Bar Baz&quot;&apos;
                 create one like (no quotes in literal):
                 { {&quot;basic&quot;, null},
                   {&quot;realm&quot;, &quot;FuzzFace&quot;}
                   {&quot;foo&quot;, &quot;Biz Bar Baz&quot;}
                 }
                 keys are converted to lower case, vals are left as is....
                
                 author Dave Brown                
            </comment>
            <javadoc line="43">
                A text component to edit various kinds of content.
                  You can find how-to information and examples of using editor panes in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  This component uses implementations of the
                  &lt;code&gt;EditorKit&lt;/code&gt; to accomplish its behavior. It effectively
                  morphs into the proper kind of text editor for the kind
                  of content it is given.  The content type that editor is bound
                  to at any given time is determined by the &lt;code&gt;EditorKit&lt;/code&gt; currently
                  installed.  If the content is set to a new URL, its type is used
                  to determine the &lt;code&gt;EditorKit&lt;/code&gt; that should be used to
                  load the content.
                  &lt;p&gt;
                  By default, the following types of content are known:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;text/plain&lt;/b&gt;
                  &lt;dd&gt;Plain text, which is the default the type given isn&apos;t
                  recognized.  The kit used in this case is an extension of
                  &lt;code&gt;DefaultEditorKit&lt;/code&gt; that produces a wrapped plain text view.
                  &lt;dt&gt;&lt;b&gt;text/html&lt;/b&gt;
                  &lt;dd&gt;HTML text.  The kit used in this case is the class
                  &lt;code&gt;javax.swing.text.html.HTMLEditorKit&lt;/code&gt;
                  which provides HTML 3.2 support.
                  &lt;dt&gt;&lt;b&gt;text/rtf&lt;/b&gt;
                  &lt;dd&gt;RTF text.  The kit used in this case is the class
                  &lt;code&gt;javax.swing.text.rtf.RTFEditorKit&lt;/code&gt;
                  which provides a limited support of the Rich Text Format.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  There are several ways to load content into this component.
                  &lt;ol&gt;
                  &lt;li&gt;
                  The {@link #setText setText} method can be used to initialize
                  the component from a string.  In this case the current
                  &lt;code&gt;EditorKit&lt;/code&gt; will be used, and the content type will be
                  expected to be of this type.
                  &lt;li&gt;
                  The {@link #read read} method can be used to initialize the
                  component from a &lt;code&gt;Reader&lt;/code&gt;.  Note that if the content type is HTML,
                  relative references (e.g. for things like images) can&apos;t be resolved
                  unless the &amp;lt;base&amp;gt; tag is used or the &lt;em&gt;Base&lt;/em&gt; property
                  on &lt;code&gt;HTMLDocument&lt;/code&gt; is set.
                  In this case the current &lt;code&gt;EditorKit&lt;/code&gt; will be used,
                  and the content type will be expected to be of this type.
                  &lt;li&gt;
                  The {@link #setPage setPage} method can be used to initialize
                  the component from a URL.  In this case, the content type will be
                  determined from the URL, and the registered &lt;code&gt;EditorKit&lt;/code&gt;
                  for that content type will be set.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  Some kinds of content may provide hyperlink support by generating
                  hyperlink events.  The HTML &lt;code&gt;EditorKit&lt;/code&gt; will generate
                  hyperlink events if the &lt;code&gt;JEditorPane&lt;/code&gt; is &lt;em&gt;not editable&lt;/em&gt;
                  (&lt;code&gt;JEditorPane.setEditable(false);&lt;/code&gt; has been called).
                  If HTML frames are embedded in the document, the typical response would be
                  to change a portion of the current document.  The following code
                  fragment is a possible hyperlink listener implementation, that treats
                  HTML frame events specially, and simply displays any other activated
                  hyperlinks.
                  &lt;code&gt;&lt;pre&gt;
                  &amp;nbsp;    class Hyperactive implements HyperlinkListener {
                  &amp;nbsp;
                  &amp;nbsp;        public void hyperlinkUpdate(HyperlinkEvent e) {
                  &amp;nbsp;            if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                  &amp;nbsp;                JEditorPane pane = (JEditorPane) e.getSource();
                  &amp;nbsp;                if (e instanceof HTMLFrameHyperlinkEvent) {
                  &amp;nbsp;                    HTMLFrameHyperlinkEvent  evt = (HTMLFrameHyperlinkEvent)e;
                  &amp;nbsp;                    HTMLDocument doc = (HTMLDocument)pane.getDocument();
                  &amp;nbsp;                    doc.processHTMLFrameHyperlinkEvent(evt);
                  &amp;nbsp;                } else {
                  &amp;nbsp;                    try {
                  &amp;nbsp;                        pane.setPage(e.getURL());
                  &amp;nbsp;                    } catch (Throwable t) {
                  &amp;nbsp;                        t.printStackTrace();
                  &amp;nbsp;                    }
                  &amp;nbsp;                }
                  &amp;nbsp;            }
                  &amp;nbsp;        }
                  &amp;nbsp;    }
                  &lt;/pre&gt;&lt;/code&gt;
                  &lt;p&gt;
                  For information on customizing how &lt;b&gt;text/html&lt;/b&gt; is rendered please see{@link #W3C_LENGTH_UNITS} and {@link #HONOR_DISPLAY_PROPERTIES}&lt;p&gt;
                  Culturally dependent information in some documents is handled through
                  a mechanism called character encoding.  Character encoding is an
                  unambiguous mapping of the members of a character set (letters, ideographs,
                  digits, symbols, or control functions) to specific numeric code values. It
                  represents the way the file is stored. Example character encodings are
                  ISO-8859-1, ISO-8859-5, Shift-jis, Euc-jp, and UTF-8. When the file is
                  passed to an user agent (&lt;code&gt;JEditorPane&lt;/code&gt;) it is converted to
                  the document character set (ISO-10646 aka Unicode).
                  &lt;p&gt;
                  There are multiple ways to get a character set mapping to happen
                  with &lt;code&gt;JEditorPane&lt;/code&gt;.
                  &lt;ol&gt;
                  &lt;li&gt;
                  One way is to specify the character set as a parameter of the MIME
                  type.  This will be established by a call to the{@link #setContentType setContentType} method.  If the content
                  is loaded by the {@link #setPage setPage} method the content
                  type will have been set according to the specification of the URL.
                  It the file is loaded directly, the content type would be expected to
                  have been set prior to loading.
                  &lt;li&gt;
                  Another way the character set can be specified is in the document itself.
                  This requires reading the document prior to determining the character set
                  that is desired.  To handle this, it is expected that the
                  &lt;code&gt;EditorKit&lt;/code&gt;.read operation throw a
                  &lt;code&gt;ChangedCharSetException&lt;/code&gt; which will
                  be caught.  The read is then restarted with a new Reader that uses
                  the character set specified in the &lt;code&gt;ChangedCharSetException&lt;/code&gt;
                  (which is an &lt;code&gt;IOException&lt;/code&gt;).
                  &lt;/ol&gt;
                  &lt;p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Newlines&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  For a discussion on how newlines are handled, see
                  &lt;a href=&quot;text/DefaultEditorKit.html&quot;&gt;DefaultEditorKit&lt;/a&gt;.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A text component to edit various types of content.                    
                </beaninfo>
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="194">
                Creates a new &lt;code&gt;JEditorPane&lt;/code&gt;.
                  The document model is set to &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <method name="JEditorPane" type="constructor" line="198">
                <anonymous_class line="201">
                    <method name="getComponentAfter" type="Component" line="203">
                        <params>
                            <param name="focusCycleRoot" type="Container"/>
                            <param name="aComponent" type="Component"/>
                        </params>
                        <scope line="205"/>
                        <scope line="208">
                            <declaration name="rootAncestor" type="Container" line="209"/>
                        </scope>
                    </method>
                    <method name="getComponentBefore" type="Component" line="218">
                        <params>
                            <param name="focusCycleRoot" type="Container"/>
                            <param name="aComponent" type="Component"/>
                        </params>
                        <scope line="220"/>
                        <scope line="223">
                            <declaration name="rootAncestor" type="Container" line="224"/>
                        </scope>
                    </method>
                    <method name="getDefaultComponent" type="Component" line="233">
                        <params>
                            <param name="focusCycleRoot" type="Container"/>
                        </params>
                    </method>
                    <method name="accept" type="boolean" line="239">
                        <params>
                            <param name="aComponent" type="Component"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="255">
                Creates a &lt;code&gt;JEditorPane&lt;/code&gt; based on a specified URL for input.                
                <param>
                    initialPage the URL                    
                </param>
                <exception>
                    IOException if the URL is &lt;code&gt;null&lt;/code&gt;
                      or cannot be accessed                    
                </exception>
            </javadoc>
            <method name="JEditorPane" type="constructor" line="262">
                <params>
                    <param name="initialPage" type="URL"/>
                </params>
            </method>
            <javadoc line="267">
                Creates a &lt;code&gt;JEditorPane&lt;/code&gt; based on a string containing
                  a URL specification.                
                <param>
                    url the URL                    
                </param>
                <exception>
                    IOException if the URL is &lt;code&gt;null&lt;/code&gt; or
                      cannot be accessed                    
                </exception>
            </javadoc>
            <method name="JEditorPane" type="constructor" line="275">
                <params>
                    <param name="url" type="String"/>
                </params>
            </method>
            <javadoc line="280">
                Creates a &lt;code&gt;JEditorPane&lt;/code&gt; that has been initialized
                  to the given text.  This is a convenience constructor that calls the
                  &lt;code&gt;setContentType&lt;/code&gt; and &lt;code&gt;setText&lt;/code&gt; methods.                
                <param>
                    type mime type of the given text                    
                </param>
                <param>
                    text the text to initialize with; may be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <exception>
                    NullPointerException if the &lt;code&gt;type&lt;/code&gt; parameter
                      is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
            </javadoc>
            <method name="JEditorPane" type="constructor" line="290">
                <params>
                    <param name="type" type="String"/>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="296">
                Adds a hyperlink listener for notification of any changes, for example
                  when a link is selected and entered.                
                <param>
                    listener the listener                    
                </param>
            </javadoc>
            <method name="addHyperlinkListener" type="void" line="302">
                <params>
                    <param name="listener" type="HyperlinkListener"/>
                </params>
            </method>
            <javadoc line="306">
                Removes a hyperlink listener.                
                <param>
                    listener the listener                    
                </param>
            </javadoc>
            <method name="removeHyperlinkListener" type="void" line="311">
                <params>
                    <param name="listener" type="HyperlinkListener"/>
                </params>
            </method>
            <javadoc line="315">
                Returns an array of all the &lt;code&gt;HyperLinkListener&lt;/code&gt;s added
                  to this JEditorPane with addHyperlinkListener().                
                <return>
                    all of the &lt;code&gt;HyperLinkListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getHyperlinkListeners" type="HyperlinkListener[]" line="323"/>
            <javadoc line="327">
                Notifies all listeners that have registered interest for
                  notification on this event type.  This is normally called
                  by the currently installed &lt;code&gt;EditorKit&lt;/code&gt; if a content type
                  that supports hyperlinks is currently active and there
                  was activity with a link.  The listener list is processed
                  last to first.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireHyperlinkUpdate" type="void" line="338">
                <params>
                    <param name="e" type="HyperlinkEvent"/>
                </params>
                <comment line="340">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="342">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <declaration name="listeners" type="Object[]" line="340"/>
                <scope line="343">
                    <scope line="344"/>
                </scope>
            </method>
            <javadoc line="351">
                Sets the current URL being displayed.  The content type of the
                  pane is set, and if the editor kit for the pane is
                  non-&lt;code&gt;null&lt;/code&gt;, then
                  a new default document is created and the URL is read into it.
                  If the URL contains and reference location, the location will
                  be scrolled to by calling the &lt;code&gt;scrollToReference&lt;/code&gt;
                  method. If the desired URL is the one currently being displayed,
                  the document will not be reloaded. To force a document
                  reload it is necessary to clear the stream description property
                  of the document. The following code shows how this can be done:
                  &lt;pre&gt;
                  Document doc = jEditorPane.getDocument();
                  doc.putProperty(Document.StreamDescriptionProperty, null);
                  &lt;/pre&gt;
                  If the desired URL is not the one currently being
                  displayed, the &lt;code&gt;getStream&lt;/code&gt; method is called to
                  give subclasses control over the stream provided.
                  &lt;p&gt;
                  This may load either synchronously or asynchronously
                  depending upon the document returned by the &lt;code&gt;EditorKit&lt;/code&gt;.
                  If the &lt;code&gt;Document&lt;/code&gt; is of type
                  &lt;code&gt;AbstractDocument&lt;/code&gt; and has a value returned by
                  &lt;code&gt;AbstractDocument.getAsynchronousLoadPriority&lt;/code&gt;
                  that is greater than or equal to zero, the page will be
                  loaded on a separate thread using that priority.
                  &lt;p&gt;
                  If the document is loaded synchronously, it will be
                  filled in with the stream prior to being installed into
                  the editor with a call to &lt;code&gt;setDocument&lt;/code&gt;, which
                  is bound and will fire a property change event.  If an
                  &lt;code&gt;IOException&lt;/code&gt; is thrown the partially loaded
                  document will
                  be discarded and neither the document or page property
                  change events will be fired.  If the document is
                  successfully loaded and installed, a view will be
                  built for it by the UI which will then be scrolled if
                  necessary, and then the page property change event
                  will be fired.
                  &lt;p&gt;
                  If the document is loaded asynchronously, the document
                  will be installed into the editor immediately using a
                  call to &lt;code&gt;setDocument&lt;/code&gt; which will fire a
                  document property change event, then a thread will be
                  created which will begin doing the actual loading.
                  In this case, the page property change event will not be
                  fired by the call to this method directly, but rather will be
                  fired when the thread doing the loading has finished.
                  It will also be fired on the event-dispatch thread.
                  Since the calling thread can not throw an &lt;code&gt;IOException&lt;/code&gt;
                  in the event of failure on the other thread, the page
                  property change event will be fired when the other
                  thread is done whether the load was successful or not.                
                <param>
                    page the URL of the page                    
                </param>
                <exception>
                    IOException for a &lt;code&gt;null&lt;/code&gt; or invalid
                      page specification, or exception from the stream being read                    
                </exception>
                <see>
                    #getPage                    
                </see>
                <beaninfo>
                    description: the URL used to set content
                      bound: true
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setPage" type="void" line="416">
                <params>
                    <param name="page" type="URL"/>
                </params>
                <comment line="424">
                    reset scrollbar                    
                </comment>
                <comment line="431">
                    different url or POST method, load the new content                    
                </comment>
                <comment line="435">
                    open stream synchronously                    
                </comment>
                <comment line="440">
                    At this point, one could either load up the model with no
                     view notifications slowing it down (i.e. best synchronous
                     behavior) or set the model and start to feed it on a separate
                     thread (best asynchronous behavior).                    
                </comment>
                <comment line="446">
                    load asynchronously                    
                </comment>
                <comment line="459">
                    we may need to cancel background loading                    
                </comment>
                <comment line="464">
                    Do everything in a background thread.
                     Model initialization is deferred to that thread, too.                    
                </comment>
                <comment line="477">
                    Have to scroll after painted.                    
                </comment>
                <scope line="417"/>
                <declaration name="loaded" type="URL" line="420"/>
                <scope line="424"/>
                <declaration name="reloaded" type="boolean" line="427"/>
                <declaration name="postData" type="Object" line="428"/>
                <scope line="429">
                    <declaration name="p" type="int" line="432"/>
                    <scope line="433">
                        <declaration name="in" type="InputStream" line="435"/>
                        <scope line="436">
                            <declaration name="doc" type="Document" line="437"/>
                            <scope line="444">
                                <scope line="447"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="457">
                        <scope line="459"/>
                    </scope>
                </scope>
                <declaration name="reference" type="String" line="470"/>
                <scope line="471">
                    <scope line="472"/>
                    <scope line="475">
                        <anonymous_class line="477">
                            <method name="run" type="void" line="478"/>
                        </anonymous_class>
                    </scope>
                </scope>
            </method>
            <javadoc line="488">
                Create model and initialize document properties from page properties.                
            </javadoc>
            <method name="initializeModel" type="Document" line="491">
                <params>
                    <param name="kit" type="EditorKit"/>
                    <param name="page" type="URL"/>
                </params>
                <comment line="495">
                    transfer properties discovered in stream to the
                     document property collection.                    
                </comment>
                <declaration name="doc" type="Document" line="492"/>
                <scope line="493">
                    <scope line="496">
                        <declaration name="key" type="String" line="497"/>
                    </scope>
                </scope>
                <scope line="502"/>
            </method>
            <javadoc line="508">
                Return load priority for the document or -1 if priority not supported.                
            </javadoc>
            <method name="getAsynchronousLoadPriority" type="int" line="511">
                <params>
                    <param name="doc" type="Document"/>
                </params>
            </method>
            <javadoc line="516">
                This method initializes from a stream.  If the kit is
                  set to be of type &lt;code&gt;HTMLEditorKit&lt;/code&gt;, and the
                  &lt;code&gt;desc&lt;/code&gt; parameter is an &lt;code&gt;HTMLDocument&lt;/code&gt;,
                  then it invokes the &lt;code&gt;HTMLEditorKit&lt;/code&gt; to initiate
                  the read. Otherwise it calls the superclass
                  method which loads the model as plain text.                
                <param>
                    in the stream from which to read                    
                </param>
                <param>
                    desc an object describing the stream                    
                </param>
                <exception>
                    IOException as thrown by the stream being
                      used to initialize                    
                </exception>
                <see>
                    JTextComponent#read                    
                </see>
                <see>
                    #setDocument                    
                </see>
            </javadoc>
            <method name="read" type="void" line="531">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="desc" type="Object"/>
                </params>
                <scope line="534">
                    <declaration name="hdoc" type="HTMLDocument" line="535"/>
                </scope>
                <scope line="538">
                    <declaration name="charset" type="String" line="539"/>
                    <declaration name="r" type="Reader" line="540"/>
                </scope>
            </method>
            <javadoc line="547">
                This method invokes the &lt;code&gt;EditorKit&lt;/code&gt; to initiate a
                  read.  In the case where a &lt;code&gt;ChangedCharSetException&lt;/code&gt;
                  is thrown this exception will contain the new CharSet.
                  Therefore the &lt;code&gt;read&lt;/code&gt; operation
                  is then restarted after building a new Reader with the new charset.                
                <param>
                    in the inputstream to use                    
                </param>
                <param>
                    doc the document to load                    
                </param>
            </javadoc>
            <method name="read" type="void" line="558">
                <params>
                    <param name="in" type="InputStream"/>
                    <param name="doc" type="Document"/>
                </params>
                <comment line="582">
                    mark was invalidated                    
                </comment>
                <comment line="589">
                    there is nothing we can do to recover stream                    
                </comment>
                <scope line="559">
                    <declaration name="READ_LIMIT" type="int" line="560"/>
                </scope>
                <scope line="564">
                    <declaration name="charset" type="String" line="565"/>
                    <declaration name="r" type="Reader" line="566"/>
                </scope>
                <scope line="569"/>
                <scope line="571">
                    <declaration name="charSetSpec" type="String" line="572"/>
                    <scope line="573"/>
                    <scope line="575"/>
                    <scope line="578"/>
                    <scope line="580">
                        <declaration name="url" type="URL" line="583"/>
                        <scope line="584">
                            <declaration name="conn" type="URLConnection" line="585"/>
                        </scope>
                        <scope line="587"/>
                    </scope>
                    <scope line="592"/>
                    <scope line="594"/>
                </scope>
            </method>
            <class name="PageLoader" line="601">
                <extends class="SwingWorker">
                    <type_params>
                        <type_param name="URL"/>
                        <type_param name="Object"/>
                    </type_params>
                </extends>
                <comment line="2288">
                                        
                </comment>
                <javadoc line="601">
                    Loads a stream into the text document model.                    
                </javadoc>
                <javadoc line="606">
                    Construct an asynchronous page loader.                    
                </javadoc>
                <method name="PageLoader" type="constructor" line="609">
                    <params>
                        <param name="doc" type="Document"/>
                        <param name="in" type="InputStream"/>
                        <param name="old" type="URL"/>
                        <param name="page" type="URL"/>
                    </params>
                </method>
                <javadoc line="616">
                    Try to load the document, then scroll the view
                      to the reference (if specified).  When done, fire
                      a page property change event.                    
                </javadoc>
                <method name="doInBackground" type="URL" line="621">
                    <comment line="628">
                        We received document of unknown content type.                        
                    </comment>
                    <comment line="658">
                        scroll the page if necessary, but do it on the
                         event thread... that is the only guarantee that
                         modelToView can be safely called.                        
                    </comment>
                    <declaration name="pageLoaded" type="boolean" line="622"/>
                    <scope line="623">
                        <scope line="624">
                            <scope line="626"/>
                        </scope>
                        <scope line="634">
                            <scope line="635">
                                <anonymous_class line="636">
                                    <method name="run" type="void" line="637"/>
                                </anonymous_class>
                            </scope>
                            <scope line="642"/>
                            <scope line="646"/>
                        </scope>
                        <declaration name="page" type="URL" line="654"/>
                        <declaration name="reference" type="String" line="655"/>
                        <scope line="656">
                            <anonymous_class line="660">
                                <method name="run" type="void" line="661">
                                    <declaration name="u" type="URL" line="662"/>
                                    <declaration name="ref" type="String" line="664"/>
                                </method>
                            </anonymous_class>
                            <declaration name="callScrollToReference" type="Runnable" line="660"/>
                        </scope>
                    </scope>
                    <scope line="671"/>
                    <scope line="673">
                        <scope line="674">
                            <anonymous_class line="675">
                                <method name="run" type="void" line="676"/>
                            </anonymous_class>
                        </scope>
                    </scope>
                </method>
                <declaration name="in" type="InputStream" line="685"/>
                <javadoc line="685">
                    The stream to load the document with                    
                </javadoc>
                <declaration name="old" type="URL" line="690"/>
                <javadoc line="690">
                    URL of the old page that was replaced (for the property change event)                    
                </javadoc>
                <declaration name="page" type="URL" line="695"/>
                <javadoc line="695">
                    URL of the page being loaded (for the property change event)                    
                </javadoc>
                <declaration name="doc" type="Document" line="700"/>
                <javadoc line="700">
                    The Document instance to load into. This is cached in case a
                      new Document is created between the time the thread this is created
                      and run.                    
                </javadoc>
            </class>
            <javadoc line="708">
                Fetches a stream for the given URL, which is about to
                  be loaded by the &lt;code&gt;setPage&lt;/code&gt; method.  By
                  default, this simply opens the URL and returns the
                  stream.  This can be reimplemented to do useful things
                  like fetch the stream from a cache, monitor the progress
                  of the stream, etc.
                  &lt;p&gt;
                  This method is expected to have the the side effect of
                  establishing the content type, and therefore setting the
                  appropriate &lt;code&gt;EditorKit&lt;/code&gt; to use for loading the stream.
                  &lt;p&gt;
                  If this the stream was an http connection, redirects
                  will be followed and the resulting URL will be set as
                  the &lt;code&gt;Document.StreamDescriptionProperty&lt;/code&gt; so that relative
                  URL&apos;s can be properly resolved.                
                <param>
                    page  the URL of the page                    
                </param>
            </javadoc>
            <method name="getStream" type="InputStream" line="727">
                <params>
                    <param name="page" type="URL"/>
                </params>
                <comment line="740">
                    In the case of a redirect, we want to actually change the URL
                     that was input to the new, redirected URL                    
                </comment>
                <comment line="755">
                    Connection properties handler should be forced to run on EDT,
                     as it instantiates the EditorKit.                    
                </comment>
                <declaration name="conn" type="URLConnection" line="728"/>
                <scope line="729">
                    <declaration name="hconn" type="HttpURLConnection" line="730"/>
                    <declaration name="postData" type="Object" line="732"/>
                    <scope line="733"/>
                    <declaration name="response" type="int" line="736"/>
                    <declaration name="redirect" type="boolean" line="737"/>
                    <scope line="743">
                        <declaration name="loc" type="String" line="744"/>
                        <scope line="745"/>
                        <scope line="747"/>
                    </scope>
                </scope>
                <scope line="756"/>
                <scope line="758">
                    <scope line="759">
                        <anonymous_class line="760">
                            <method name="run" type="void" line="761"/>
                        </anonymous_class>
                    </scope>
                    <scope line="765"/>
                    <scope line="767"/>
                </scope>
            </method>
            <javadoc line="774">
                Handle URL connection properties (most notably, content type).                
            </javadoc>
            <method name="handleConnectionProperties" type="void" line="777">
                <params>
                    <param name="conn" type="URLConnection"/>
                </params>
                <scope line="778"/>
                <declaration name="type" type="String" line="781"/>
                <scope line="782"/>
                <declaration name="enc" type="String" line="787"/>
                <scope line="788"/>
            </method>
            <method name="getPostData" type="Object" line="793"/>
            <method name="handlePostData" type="void" line="798">
                <params>
                    <param name="conn" type="HttpURLConnection"/>
                    <param name="postData" type="Object"/>
                </params>
                <declaration name="os" type="DataOutputStream" line="800"/>
                <scope line="801"/>
                <scope line="806">
                    <scope line="807"/>
                </scope>
            </method>
            <javadoc line="814">
                Scrolls the view to the given reference location
                  (that is, the value returned by the &lt;code&gt;UL.getRef&lt;/code&gt;
                  method for the URL being displayed).  By default, this
                  method only knows how to locate a reference in an
                  HTMLDocument.  The implementation calls the
                  &lt;code&gt;scrollRectToVisible&lt;/code&gt; method to
                  accomplish the actual scrolling.  If scrolling to a
                  reference location is needed for document types other
                  than HTML, this method should be reimplemented.
                  This method will have no effect if the component
                  is not visible.                
                <param>
                    reference the named location to scroll to                    
                </param>
            </javadoc>
            <method name="scrollToReference" type="void" line="829">
                <params>
                    <param name="reference" type="String"/>
                </params>
                <comment line="839">
                    found a matching reference in the document.                    
                </comment>
                <comment line="844">
                    the view is visible, scroll it to the
                     center of the current visible area.                    
                </comment>
                <comment line="847">
                    r.y -= (vis.height / 2);                    
                </comment>
                <declaration name="d" type="Document" line="830"/>
                <scope line="831">
                    <declaration name="doc" type="HTMLDocument" line="832"/>
                    <declaration name="iter" type="HTMLDocument.Iterator" line="833"/>
                    <scope line="834">
                        <declaration name="a" type="AttributeSet" line="835"/>
                        <declaration name="nm" type="String" line="836"/>
                        <scope line="837">
                            <scope line="839">
                                <declaration name="pos" type="int" line="840"/>
                                <declaration name="r" type="Rectangle" line="841"/>
                                <scope line="842">
                                    <declaration name="vis" type="Rectangle" line="845"/>
                                </scope>
                            </scope>
                            <scope line="851"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="859">
                Gets the current URL being displayed.  If a URL was
                  not specified in the creation of the document, this
                  will return &lt;code&gt;null&lt;/code&gt;, and relative URL&apos;s will not be
                  resolved.                
                <return>
                    the URL, or &lt;code&gt;null&lt;/code&gt; if none                    
                </return>
            </javadoc>
            <method name="getPage" type="URL" line="867"/>
            <javadoc line="871">
                Sets the current URL being displayed.                
                <param>
                    url the URL for display                    
                </param>
                <exception>
                    IOException for a &lt;code&gt;null&lt;/code&gt; or invalid URL
                      specification                    
                </exception>
            </javadoc>
            <method name="setPage" type="void" line="878">
                <params>
                    <param name="url" type="String"/>
                </params>
                <scope line="879"/>
                <declaration name="page" type="URL" line="882"/>
            </method>
            <javadoc line="886">
                Gets the class ID for the UI.                
                <return>
                    the string &quot;EditorPaneUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="893"/>
            <javadoc line="897">
                Creates the default editor kit (&lt;code&gt;PlainEditorKit&lt;/code&gt;) for when
                  the component is first created.                
                <return>
                    the editor kit                    
                </return>
            </javadoc>
            <method name="createDefaultEditorKit" type="EditorKit" line="903"/>
            <javadoc line="907">
                Fetches the currently installed kit for handling content.
                  &lt;code&gt;createDefaultEditorKit&lt;/code&gt; is called to set up a default
                  if necessary.                
                <return>
                    the editor kit                    
                </return>
            </javadoc>
            <method name="getEditorKit" type="EditorKit" line="914">
                <scope line="915"/>
            </method>
            <javadoc line="922">
                Gets the type of content that this editor
                  is currently set to deal with.  This is
                  defined to be the type associated with the
                  currently installed &lt;code&gt;EditorKit&lt;/code&gt;.                
                <return>
                    the content type, &lt;code&gt;null&lt;/code&gt; if no editor kit set                    
                </return>
            </javadoc>
            <method name="getContentType" type="String" line="930"/>
            <javadoc line="934">
                Sets the type of content that this editor
                  handles.  This calls &lt;code&gt;getEditorKitForContentType&lt;/code&gt;,
                  and then &lt;code&gt;setEditorKit&lt;/code&gt; if an editor kit can
                  be successfully located.  This is mostly convenience method
                  that can be used as an alternative to calling
                  &lt;code&gt;setEditorKit&lt;/code&gt; directly.
                  &lt;p&gt;
                  If there is a charset definition specified as a parameter
                  of the content type specification, it will be used when
                  loading input streams using the associated &lt;code&gt;EditorKit&lt;/code&gt;.
                  For example if the type is specified as
                  &lt;code&gt;text/html; charset=EUC-JP&lt;/code&gt; the content
                  will be loaded using the &lt;code&gt;EditorKit&lt;/code&gt; registered for
                  &lt;code&gt;text/html&lt;/code&gt; and the Reader provided to
                  the &lt;code&gt;EditorKit&lt;/code&gt; to load unicode into the document will
                  use the &lt;code&gt;EUC-JP&lt;/code&gt; charset for translating
                  to unicode.  If the type is not recognized, the content
                  will be loaded using the &lt;code&gt;EditorKit&lt;/code&gt; registered
                  for plain text, &lt;code&gt;text/plain&lt;/code&gt;.                
                <param>
                    type the non-&lt;code&gt;null&lt;/code&gt; mime type for the content editing
                      support                    
                </param>
                <see>
                    #getContentType                    
                </see>
                <beaninfo>
                    description: the type of content                    
                </beaninfo>
                <throws>
                    NullPointerException if the &lt;code&gt;type&lt;/code&gt; parameter
                      is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="setContentType" type="void" line="963">
                <params>
                    <param name="type" type="String"/>
                </params>
                <comment line="965">
                    The type could have optional info is part of it,
                     for example some charset info.  We need to strip that
                     of and save it.                    
                </comment>
                <comment line="970">
                    Save the paramList.                    
                </comment>
                <comment line="972">
                    update the content type string.                    
                </comment>
                <declaration name="parm" type="int" line="967"/>
                <scope line="968">
                    <declaration name="paramList" type="String" line="970"/>
                    <scope line="973"/>
                </scope>
                <scope line="978">
                    <declaration name="k" type="EditorKit" line="979"/>
                    <scope line="980"/>
                </scope>
            </method>
            <javadoc line="988">
                This method gets the charset information specified as part
                  of the content type in the http header information.                
            </javadoc>
            <method name="setCharsetFromContentTypeParameters" type="void" line="992">
                <params>
                    <param name="paramlist" type="String"/>
                </params>
                <comment line="996">
                    paramlist is handed to us with a leading &apos;;&apos;, strip it.                    
                </comment>
                <comment line="1003">
                    parse the paramlist into attr-value pairs &amp; get the
                     charset pair&apos;s value                    
                </comment>
                <comment line="1013">
                    malformed parameter list, use charset we have                    
                </comment>
                <comment line="1016">
                    malformed parameter list, use charset we have                    
                </comment>
                <comment line="1019">
                    malformed parameter list, use charset we have; but complain                    
                </comment>
                <declaration name="charset" type="String" line="993"/>
                <scope line="994">
                    <declaration name="semi" type="int" line="996"/>
                    <scope line="997"/>
                    <scope line="1001">
                        <declaration name="hdrParser" type="HeaderParser" line="1004"/>
                        <scope line="1006"/>
                    </scope>
                </scope>
                <scope line="1011"/>
                <scope line="1014"/>
                <scope line="1017"/>
            </method>
            <javadoc line="1025">
                Sets the currently installed kit for handling
                  content.  This is the bound property that
                  establishes the content type of the editor.
                  Any old kit is first deinstalled, then if kit is
                  non-&lt;code&gt;null&lt;/code&gt;,
                  the new kit is installed, and a default document created for it.
                  A &lt;code&gt;PropertyChange&lt;/code&gt; event (&quot;editorKit&quot;) is always fired when
                  &lt;code&gt;setEditorKit&lt;/code&gt; is called.
                  &lt;p&gt;
                  &lt;em&gt;NOTE: This has the side effect of changing the model,
                  because the &lt;code&gt;EditorKit&lt;/code&gt; is the source of how a
                  particular type
                  of content is modeled.  This method will cause &lt;code&gt;setDocument&lt;/code&gt;
                  to be called on behalf of the caller to ensure integrity
                  of the internal state.&lt;/em&gt;                
                <param>
                    kit the desired editor behavior                    
                </param>
                <see>
                    #getEditorKit                    
                </see>
                <beaninfo>
                    description: the currently installed kit for handling content
                      bound: true
                      expert: true                    
                </beaninfo>
            </javadoc>
            <method name="setEditorKit" type="void" line="1049">
                <params>
                    <param name="kit" type="EditorKit"/>
                </params>
                <declaration name="old" type="EditorKit" line="1050"/>
                <scope line="1052"/>
                <scope line="1056"/>
            </method>
            <javadoc line="1063">
                Fetches the editor kit to use for the given type
                  of content.  This is called when a type is requested
                  that doesn&apos;t match the currently installed type.
                  If the component doesn&apos;t have an &lt;code&gt;EditorKit&lt;/code&gt; registered
                  for the given type, it will try to create an
                  &lt;code&gt;EditorKit&lt;/code&gt; from the default &lt;code&gt;EditorKit&lt;/code&gt; registry.
                  If that fails, a &lt;code&gt;PlainEditorKit&lt;/code&gt; is used on the
                  assumption that all text documents can be represented
                  as plain text.
                  &lt;p&gt;
                  This method can be reimplemented to use some
                  other kind of type registry.  This can
                  be reimplemented to use the Java Activation
                  Framework, for example.                
                <param>
                    type the non-&lt;code&gt;null&lt;/code&gt; content type                    
                </param>
                <return>
                    the editor kit                    
                </return>
            </javadoc>
            <method name="getEditorKitForContentType" type="EditorKit" line="1082">
                <params>
                    <param name="type" type="String"/>
                </params>
                <scope line="1083"/>
                <declaration name="k" type="EditorKit" line="1086"/>
                <scope line="1087">
                    <scope line="1089"/>
                </scope>
                <scope line="1093"/>
            </method>
            <javadoc line="1099">
                Directly sets the editor kit to use for the given type.  A
                  look-and-feel implementation might use this in conjunction
                  with &lt;code&gt;createEditorKitForContentType&lt;/code&gt; to install handlers for
                  content types with a look-and-feel bias.                
                <param>
                    type the non-&lt;code&gt;null&lt;/code&gt; content type                    
                </param>
                <param>
                    k the editor kit to be set                    
                </param>
            </javadoc>
            <method name="setEditorKitForContentType" type="void" line="1108">
                <params>
                    <param name="type" type="String"/>
                    <param name="k" type="EditorKit"/>
                </params>
                <scope line="1109"/>
            </method>
            <javadoc line="1115">
                Replaces the currently selected content with new content
                  represented by the given string.  If there is no selection
                  this amounts to an insert of the given text.  If there
                  is no replacement text (i.e. the content string is empty
                  or &lt;code&gt;null&lt;/code&gt;) this amounts to a removal of the
                  current selection.  The replacement text will have the
                  attributes currently defined for input.  If the component is not
                  editable, beep and return.                
                <param>
                    content  the content to replace the selection with.  This
                      value can be &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="replaceSelection" type="void" line="1129">
                <params>
                    <param name="content" type="String"/>
                </params>
                <scope line="1130"/>
                <declaration name="kit" type="EditorKit" line="1134"/>
                <scope line="1135">
                    <scope line="1136">
                        <declaration name="doc" type="Document" line="1137"/>
                        <declaration name="caret" type="Caret" line="1138"/>
                        <declaration name="composedTextSaved" type="boolean" line="1139"/>
                        <declaration name="p0" type="int" line="1140"/>
                        <declaration name="p1" type="int" line="1141"/>
                        <scope line="1142"/>
                        <scope line="1146">
                            <scope line="1147"/>
                            <scope line="1150"/>
                        </scope>
                        <scope line="1155"/>
                    </scope>
                    <scope line="1158"/>
                </scope>
                <scope line="1162"/>
            </method>
            <javadoc line="1167">
                Creates a handler for the given type from the default registry
                  of editor kits.  The registry is created if necessary.  If the
                  registered class has not yet been loaded, an attempt
                  is made to dynamically load the prototype of the kit for the
                  given type.  If the type was registered with a &lt;code&gt;ClassLoader&lt;/code&gt;,
                  that &lt;code&gt;ClassLoader&lt;/code&gt; will be used to load the prototype.
                  If there was no registered &lt;code&gt;ClassLoader&lt;/code&gt;,
                  &lt;code&gt;Class.forName&lt;/code&gt; will be used to load the prototype.
                  &lt;p&gt;
                  Once a prototype &lt;code&gt;EditorKit&lt;/code&gt; instance is successfully
                  located, it is cloned and the clone is returned.                
                <param>
                    type the content type                    
                </param>
                <return>
                    the editor kit, or &lt;code&gt;null&lt;/code&gt; if there is nothing
                      registered for the given type                    
                </return>
            </javadoc>
            <method name="createEditorKitForContentType" type="EditorKit" line="1184">
                <params>
                    <param name="type" type="String"/>
                </params>
                <comment line="1189">
                    try to dynamically load the support                    
                </comment>
                <comment line="1197">
                    Will only happen if developer has invoked
                     registerEditorKitForContentType(type, class, null).                    
                </comment>
                <comment line="1209">
                    create a copy of the prototype or null if there
                     is no prototype.                    
                </comment>
                <declaration name="kitRegistry" type="Hashtable&lt;String,EditorKit&gt;" line="1185"/>
                <declaration name="k" type="EditorKit" line="1186"/>
                <scope line="1187">
                    <declaration name="classname" type="String" line="1189"/>
                    <declaration name="loader" type="ClassLoader" line="1190"/>
                    <scope line="1191">
                        <declaration name="c" type="Class" line="1192"/>
                        <scope line="1193"/>
                        <scope line="1195"/>
                    </scope>
                    <scope line="1203"/>
                </scope>
                <scope line="1210"/>
            </method>
            <javadoc line="1216">
                Establishes the default bindings of &lt;code&gt;type&lt;/code&gt; to
                  &lt;code&gt;classname&lt;/code&gt;.
                  The class will be dynamically loaded later when actually
                  needed, and can be safely changed before attempted uses
                  to avoid loading unwanted classes.  The prototype
                  &lt;code&gt;EditorKit&lt;/code&gt; will be loaded with &lt;code&gt;Class.forName&lt;/code&gt;
                  when registered with this method.                
                <param>
                    type the non-&lt;code&gt;null&lt;/code&gt; content type                    
                </param>
                <param>
                    classname the class to load later                    
                </param>
            </javadoc>
            <method name="registerEditorKitForContentType" type="void" line="1228">
                <params>
                    <param name="type" type="String"/>
                    <param name="classname" type="String"/>
                </params>
            </method>
            <javadoc line="1233">
                Establishes the default bindings of &lt;code&gt;type&lt;/code&gt; to
                  &lt;code&gt;classname&lt;/code&gt;.
                  The class will be dynamically loaded later when actually
                  needed using the given &lt;code&gt;ClassLoader&lt;/code&gt;,
                  and can be safely changed
                  before attempted uses to avoid loading unwanted classes.                
                <param>
                    type the non-&lt;code&gt;null&lt;/code&gt; content type                    
                </param>
                <param>
                    classname the class to load later                    
                </param>
                <param>
                    loader the &lt;code&gt;ClassLoader&lt;/code&gt; to use to load the name                    
                </param>
            </javadoc>
            <method name="registerEditorKitForContentType" type="void" line="1245">
                <params>
                    <param name="type" type="String"/>
                    <param name="classname" type="String"/>
                    <param name="loader" type="ClassLoader"/>
                </params>
            </method>
            <javadoc line="1251">
                Returns the currently registered &lt;code&gt;EditorKit&lt;/code&gt;
                  class name for the type &lt;code&gt;type&lt;/code&gt;.                
                <param>
                    type  the non-&lt;code&gt;null&lt;/code&gt; content type                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getEditorKitClassNameForContentType" type="String" line="1259">
                <params>
                    <param name="type" type="String"/>
                </params>
            </method>
            <method name="getKitTypeRegistry" type="Hashtable<String,String>" line="1263"/>
            <method name="getKitLoaderRegistry" type="Hashtable<String,ClassLoader>" line="1268"/>
            <method name="getKitRegisty" type="Hashtable<String,EditorKit>" line="1273">
                <declaration name="ht" type="Hashtable" line="1274"/>
                <scope line="1275"/>
            </method>
            <javadoc line="1282">
                This is invoked every time the registries are accessed. Loading
                  is done this way instead of via a static as the static is only
                  called once when running in plugin resulting in the entries only
                  appearing in the first applet.                
            </javadoc>
            <method name="loadDefaultKitsIfNecessary" type="void" line="1288">
                <scope line="1289">
                    <scope line="1290">
                        <scope line="1291"/>
                    </scope>
                    <declaration name="ht" type="Hashtable" line="1302"/>
                    <scope line="1306"/>
                </scope>
            </method>
            <javadoc line="1315">
                Returns the preferred size for the &lt;code&gt;JEditorPane&lt;/code&gt;.
                  The preferred size for &lt;code&gt;JEditorPane&lt;/code&gt; is slightly altered
                  from the preferred size of the superclass.  If the size
                  of the viewport has become smaller than the minimum size
                  of the component, the scrollable definition for tracking
                  width or height will turn to false.  The default viewport
                  layout will give the preferred size, and that is not desired
                  in the case where the scrollable is tracking.  In that case
                  the &lt;em&gt;normal&lt;/em&gt; preferred size is adjusted to the
                  minimum size.  This allows things like HTML tables to
                  shrink down to their minimum size and then be laid out at
                  their minimum size, refusing to shrink any further.                
                <return>
                    a &lt;code&gt;Dimension&lt;/code&gt; containing the preferred size                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="1331">
                <comment line="1344">
                    Only adjust to min if we have a valid size                    
                </comment>
                <comment line="1352">
                    Only adjust to min if we have a valid size                    
                </comment>
                <declaration name="d" type="Dimension" line="1332"/>
                <declaration name="parent" type="Container" line="1333"/>
                <scope line="1334">
                    <declaration name="port" type="JViewport" line="1335"/>
                    <declaration name="ui" type="TextUI" line="1336"/>
                    <declaration name="prefWidth" type="int" line="1337"/>
                    <declaration name="prefHeight" type="int" line="1338"/>
                    <scope line="1339">
                        <declaration name="w" type="int" line="1340"/>
                        <declaration name="min" type="Dimension" line="1341"/>
                        <scope line="1342"/>
                    </scope>
                    <scope line="1347">
                        <declaration name="h" type="int" line="1348"/>
                        <declaration name="min" type="Dimension" line="1349"/>
                        <scope line="1350"/>
                    </scope>
                    <scope line="1355"/>
                </scope>
            </method>
            <javadoc line="1364">
                Sets the text of this &lt;code&gt;TextComponent&lt;/code&gt; to the specified
                  content,
                  which is expected to be in the format of the content type of
                  this editor.  For example, if the type is set to &lt;code&gt;text/html&lt;/code&gt;
                  the string should be specified in terms of HTML.
                  &lt;p&gt;
                  This is implemented to remove the contents of the current document,
                  and replace them by parsing the given string using the current
                  &lt;code&gt;EditorKit&lt;/code&gt;.  This gives the semantics of the
                  superclass by not changing
                  out the model, while supporting the content type currently set on
                  this component.  The assumption is that the previous content is
                  relatively
                  small, and that the previous content doesn&apos;t have side effects.
                  Both of those assumptions can be violated and cause undesirable results.
                  To avoid this, create a new document,
                  &lt;code&gt;getEditorKit().createDefaultDocument()&lt;/code&gt;, and replace the
                  existing &lt;code&gt;Document&lt;/code&gt; with the new one. You are then assured the
                  previous &lt;code&gt;Document&lt;/code&gt; won&apos;t have any lingering state.
                  &lt;ol&gt;
                  &lt;li&gt;
                  Leaving the existing model in place means that the old view will be
                  torn down, and a new view created, where replacing the document would
                  avoid the tear down of the old view.
                  &lt;li&gt;
                  Some formats (such as HTML) can install things into the document that
                  can influence future contents.  HTML can have style information embedded
                  that would influence the next content installed unexpectedly.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  An alternative way to load this component with a string would be to
                  create a StringReader and call the read method.  In this case the model
                  would be replaced after it was initialized with the contents of the
                  string.                
                <param>
                    t the new text to be set; if &lt;code&gt;null&lt;/code&gt; the old
                      text will be deleted                    
                </param>
                <see>
                    #getText                    
                </see>
                <beaninfo>
                    description: the text of this component                    
                </beaninfo>
            </javadoc>
            <method name="setText" type="void" line="1406">
                <params>
                    <param name="t" type="String"/>
                </params>
                <scope line="1407">
                    <declaration name="doc" type="Document" line="1408"/>
                    <scope line="1410"/>
                    <declaration name="r" type="Reader" line="1413"/>
                    <declaration name="kit" type="EditorKit" line="1414"/>
                </scope>
                <scope line="1416"/>
                <scope line="1418"/>
            </method>
            <javadoc line="1423">
                Returns the text contained in this &lt;code&gt;TextComponent&lt;/code&gt;
                  in terms of the
                  content type of this editor.  If an exception is thrown while
                  attempting to retrieve the text, &lt;code&gt;null&lt;/code&gt; will be returned.
                  This is implemented to call &lt;code&gt;JTextComponent.write&lt;/code&gt; with
                  a &lt;code&gt;StringWriter&lt;/code&gt;.                
                <return>
                    the text                    
                </return>
                <see>
                    #setText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="1434">
                <declaration name="txt" type="String" line="1435"/>
                <scope line="1436">
                    <declaration name="buf" type="StringWriter" line="1437"/>
                </scope>
                <scope line="1440"/>
            </method>
            <javadoc line="1448">
                Returns true if a viewport should always force the width of this
                  &lt;code&gt;Scrollable&lt;/code&gt; to match the width of the viewport.                
                <return>
                    true if a viewport should force the Scrollables width to
                      match its own, false otherwise                    
                </return>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="1455">
                <declaration name="parent" type="Container" line="1456"/>
                <scope line="1457">
                    <declaration name="port" type="JViewport" line="1458"/>
                    <declaration name="ui" type="TextUI" line="1459"/>
                    <declaration name="w" type="int" line="1460"/>
                    <declaration name="min" type="Dimension" line="1461"/>
                    <declaration name="max" type="Dimension" line="1462"/>
                    <scope line="1463"/>
                </scope>
            </method>
            <javadoc line="1470">
                Returns true if a viewport should always force the height of this
                  &lt;code&gt;Scrollable&lt;/code&gt; to match the height of the viewport.                
                <return>
                    true if a viewport should force the
                      &lt;code&gt;Scrollable&lt;/code&gt;&apos;s height to match its own,
                      false otherwise                    
                </return>
            </javadoc>
            <method name="getScrollableTracksViewportHeight" type="boolean" line="1478">
                <declaration name="parent" type="Container" line="1479"/>
                <scope line="1480">
                    <declaration name="port" type="JViewport" line="1481"/>
                    <declaration name="ui" type="TextUI" line="1482"/>
                    <declaration name="h" type="int" line="1483"/>
                    <declaration name="min" type="Dimension" line="1484"/>
                    <scope line="1485">
                        <declaration name="max" type="Dimension" line="1486"/>
                        <scope line="1487"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1497">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1502">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="1504">
                    <declaration name="count" type="byte" line="1505"/>
                    <scope line="1507"/>
                </scope>
            </method>
            <declaration name="pageLoader" type="SwingWorker&lt;URL,Object&gt;" line="1515"/>
            <declaration name="kit" type="EditorKit" line="1517"/>
            <javadoc line="1517">
                Current content binding of the editor.                
            </javadoc>
            <declaration name="isUserSetEditorKit" type="boolean" line="1521"/>
            <declaration name="pageProperties" type="Hashtable&lt;String,Object&gt;" line="1523"/>
            <declaration name="PostDataProperty" type="String" line="1525"/>
            <javadoc line="1525">
                Should be kept in sync with javax.swing.text.html.FormView counterpart.                
            </javadoc>
            <declaration name="typeHandlers" type="Hashtable&lt;String,EditorKit&gt;" line="1528"/>
            <javadoc line="1528">
                Table of registered type handlers for this editor.                
            </javadoc>
            <declaration name="kitRegistryKey" type="Object" line="1536"/>
            <declaration name="kitTypeRegistryKey" type="Object" line="1538"/>
            <declaration name="kitLoaderRegistryKey" type="Object" line="1540"/>
            <declaration name="uiClassID" type="String" line="1543"/>
            <javadoc line="1543">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="W3C_LENGTH_UNITS" type="String" line="1550"/>
            <javadoc line="1550">
                Key for a client property used to indicate whether
                  &lt;a href=&quot;http://www.w3.org/TR/CSS21/syndata.html#length-units&quot;&gt;
                  w3c compliant&lt;/a&gt; length units are used for html rendering.
                  &lt;p&gt;
                  By default this is not enabled; to enable
                  it set the client {@link #putClientProperty property} with this name
                  to &lt;code&gt;Boolean.TRUE&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="HONOR_DISPLAY_PROPERTIES" type="String" line="1563"/>
            <javadoc line="1563">
                Key for a client property used to indicate whether
                  the default font and foreground color from the component are
                  used if a font or foreground color is not specified in the styled
                  text.
                  &lt;p&gt;
                  The default varies based on the look and feel;
                  to enable it set the client {@link #putClientProperty property} with
                  this name to &lt;code&gt;Boolean.TRUE&lt;/code&gt;.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="defaultEditorKitMap" type="Map&lt;String,String&gt;" line="1577"/>
            <javadoc line="1579">
                Returns a string representation of this &lt;code&gt;JEditorPane&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JEditorPane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1589">
                <declaration name="kitString" type="String" line="1590"/>
                <declaration name="typeHandlersString" type="String" line="1592"/>
            </method>
            <javadoc line="1606">
                Gets the AccessibleContext associated with this JEditorPane.
                  For editor panes, the AccessibleContext takes the form of an
                  AccessibleJEditorPane.
                  A new AccessibleJEditorPane instance is created if necessary.                
                <return>
                    an AccessibleJEditorPane that serves as the
                      AccessibleContext of this JEditorPane                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1615">
                <scope line="1616">
                    <scope line="1618"/>
                </scope>
                <scope line="1622"/>
            </method>
            <class name="AccessibleJEditorPane" line="1628">
                <extends class="AccessibleJTextComponent"/>
                <comment line="2288">
                                        
                </comment>
                <javadoc line="1628">
                    This class implements accessibility support for the
                      &lt;code&gt;JEditorPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to editor pane user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1645">
                    Gets the accessibleDescription property of this object.  If this
                      property isn&apos;t set, returns the content type of this
                      &lt;code&gt;JEditorPane&lt;/code&gt; instead (e.g. &quot;plain/text&quot;, &quot;html/text&quot;).                    
                    <return>
                        the localized description of the object; &lt;code&gt;null&lt;/code&gt;
                          if this object does not have a description                        
                    </return>
                    <see>
                        #setAccessibleName                        
                    </see>
                </javadoc>
                <method name="getAccessibleDescription" type="String" line="1655">
                    <comment line="1659">
                        fallback to client property                        
                    </comment>
                    <declaration name="description" type="String" line="1656"/>
                    <scope line="1659"/>
                    <scope line="1662"/>
                </method>
                <javadoc line="1668">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleStateSet describing the states
                          of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1675">
                    <declaration name="states" type="AccessibleStateSet" line="1676"/>
                </method>
            </class>
            <class name="AccessibleJEditorPaneHTML" line="1682">
                <extends class="AccessibleJEditorPane"/>
                <comment line="2288">
                                        
                </comment>
                <javadoc line="1682">
                    This class provides support for &lt;code&gt;AccessibleHypertext&lt;/code&gt;,
                      and is used in instances where the &lt;code&gt;EditorKit&lt;/code&gt;
                      installed in this &lt;code&gt;JEditorPane&lt;/code&gt; is an instance of
                      &lt;code&gt;HTMLEditorKit&lt;/code&gt;.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="accessibleContext" type="AccessibleContext" line="1699"/>
                <method name="getAccessibleText" type="AccessibleText" line="1701"/>
                <method name="AccessibleJEditorPaneHTML" type="constructor" line="1705">
                    <declaration name="kit" type="HTMLEditorKit" line="1706"/>
                </method>
                <javadoc line="1710">
                    Returns the number of accessible children of the object.                    
                    <return>
                        the number of accessible children of the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="1715">
                    <scope line="1716"/>
                    <scope line="1718"/>
                </method>
                <javadoc line="1723">
                    Returns the specified Accessible child of the object.  The Accessible
                      children of an Accessible object are zero-based, so the first child
                      of an Accessible child is at index 0, the second child is at index 1,
                      and so on.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the Accessible child of the object                        
                    </return>
                    <see>
                        #getAccessibleChildrenCount                        
                    </see>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="1733">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="1734"/>
                    <scope line="1736"/>
                </method>
                <javadoc line="1741">
                    Returns the Accessible child, if one exists, contained at the local
                      coordinate Point.                    
                    <param>
                        p The point relative to the coordinate system of this object.                        
                    </param>
                    <return>
                        the Accessible, if it exists, at the specified location;
                          otherwise null                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="1749">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <scope line="1750">
                        <scope line="1751">
                            <declaration name="acomp" type="AccessibleComponent" line="1752"/>
                            <scope line="1754"/>
                            <scope line="1756"/>
                        </scope>
                        <scope line="1759"/>
                    </scope>
                    <scope line="1762"/>
                </method>
            </class>
            <class name="JEditorPaneAccessibleHypertextSupport" line="1768">
                <extends class="AccessibleJEditorPane"/>
                <comment line="2288">
                                        
                </comment>
                <implements interface="AccessibleHypertext"/>
                <javadoc line="1768">
                    What&apos;s returned by
                      &lt;code&gt;AccessibleJEditorPaneHTML.getAccessibleText&lt;/code&gt;.
                      Provides support for &lt;code&gt;AccessibleHypertext&lt;/code&gt; in case
                      there is an HTML document being displayed in this
                      &lt;code&gt;JEditorPane&lt;/code&gt;.                    
                </javadoc>
                <class name="HTMLLink" line="1780">
                    <extends class="AccessibleHyperlink"/>
                    <declaration name="element" type="Element" line="1781"/>
                    <method name="HTMLLink" type="constructor" line="1783">
                        <params>
                            <param name="e" type="Element"/>
                        </params>
                    </method>
                    <javadoc line="1787">
                        Since the document a link is associated with may have
                          changed, this method returns whether this Link is valid
                          anymore (with respect to the document it references).                        
                        <return>
                            a flag indicating whether this link is still valid with
                              respect to the AccessibleHypertext it belongs to                            
                        </return>
                    </javadoc>
                    <method name="isValid" type="boolean" line="1795"/>
                    <javadoc line="1799">
                        Returns the number of accessible actions available in this Link
                          If there are more than one, the first one is NOT considered the
                          &quot;default&quot; action of this LINK object (e.g. in an HTML imagemap).
                          In general, links will have only one AccessibleAction in them.                        
                        <return>
                            the zero-based number of Actions in this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleActionCount" type="int" line="1807"/>
                    <javadoc line="1811">
                        Perform the specified Action on the object                        
                        <param>
                            i zero-based index of actions                            
                        </param>
                        <return>
                            true if the the action was performed; else false.                            
                        </return>
                        <see>
                            #getAccessibleActionCount                            
                        </see>
                    </javadoc>
                    <method name="doAccessibleAction" type="boolean" line="1818">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="1829">
                            link invalid or i != 0                            
                        </comment>
                        <scope line="1819">
                            <declaration name="u" type="URL" line="1820"/>
                            <scope line="1821">
                                <declaration name="linkEvent" type="HyperlinkEvent" line="1822"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="1831">
                        Return a String description of this particular
                          link action.  The string returned is the text
                          within the document associated with the element
                          which contains this link.                        
                        <param>
                            i zero-based index of the actions                            
                        </param>
                        <return>
                            a String description of the action                            
                        </return>
                        <see>
                            #getAccessibleActionCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleActionDescription" type="String" line="1841">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <scope line="1842">
                            <declaration name="d" type="Document" line="1843"/>
                            <scope line="1844">
                                <scope line="1845"/>
                                <scope line="1848"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="1856">
                        Returns a URL object that represents the link.                        
                        <param>
                            i zero-based index of the actions                            
                        </param>
                        <return>
                            an URL representing the HTML link itself                            
                        </return>
                        <see>
                            #getAccessibleActionCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleActionObject" type="Object" line="1863">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <comment line="1881">
                            link invalid or i != 0                            
                        </comment>
                        <scope line="1864">
                            <declaration name="as" type="AttributeSet" line="1865"/>
                            <declaration name="anchor" type="AttributeSet" line="1866"/>
                            <declaration name="href" type="String" line="1868"/>
                            <scope line="1870">
                                <declaration name="u" type="URL" line="1871"/>
                                <scope line="1872"/>
                                <scope line="1874"/>
                            </scope>
                        </scope>
                    </method>
                    <javadoc line="1883">
                        Return an object that represents the link anchor,
                          as appropriate for that link.  E.g. from HTML:
                          &lt;a href=&quot;http://www.sun.com/access&quot;&gt;Accessibility&lt;/a&gt;
                          this method would return a String containing the text:
                          &apos;Accessibility&apos;.
                          Similarly, from this HTML:
                          &amp;lt;a HREF=&quot;#top&quot;&amp;gt;&amp;lt;img src=&quot;top-hat.gif&quot; alt=&quot;top hat&quot;&amp;gt;&amp;lt;/a&amp;gt;
                          this might return the object ImageIcon(&quot;top-hat.gif&quot;, &quot;top hat&quot;);                        
                        <param>
                            i zero-based index of the actions                            
                        </param>
                        <return>
                            an Object representing the hypertext anchor                            
                        </return>
                        <see>
                            #getAccessibleActionCount                            
                        </see>
                    </javadoc>
                    <method name="getAccessibleActionAnchor" type="Object" line="1898">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                    <javadoc line="1903">
                        Get the index with the hypertext document at which this
                          link begins                        
                        <return>
                            index of start of link                            
                        </return>
                    </javadoc>
                    <method name="getStartIndex" type="int" line="1909"/>
                    <javadoc line="1913">
                        Get the index with the hypertext document at which this
                          link ends                        
                        <return>
                            index of end of link                            
                        </return>
                    </javadoc>
                    <method name="getEndIndex" type="int" line="1919"/>
                </class>
                <class name="LinkVector" line="1924">
                    <extends class="Vector">
                        <type_params>
                            <type_param name="HTMLLink"/>
                        </type_params>
                    </extends>
                    <method name="baseElementIndex" type="int" line="1925">
                        <params>
                            <param name="e" type="Element"/>
                        </params>
                        <declaration name="l" type="HTMLLink" line="1926"/>
                        <scope line="1927">
                            <scope line="1929"/>
                        </scope>
                    </method>
                </class>
                <declaration name="hyperlinks" type="LinkVector" line="1937"/>
                <declaration name="linksValid" type="boolean" line="1938"/>
                <javadoc line="1940">
                    Build the private table mapping links to locations in the text                    
                </javadoc>
                <method name="buildLinkTable" type="void" line="1943">
                    <declaration name="d" type="Document" line="1945"/>
                    <scope line="1946">
                        <declaration name="ei" type="ElementIterator" line="1947"/>
                        <declaration name="e" type="Element" line="1948"/>
                        <declaration name="as" type="AttributeSet" line="1949"/>
                        <declaration name="anchor" type="AttributeSet" line="1950"/>
                        <declaration name="href" type="String" line="1951"/>
                        <scope line="1952">
                            <scope line="1953">
                                <scope line="1958"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1967">
                    Make one of these puppies                    
                </javadoc>
                <method name="JEditorPaneAccessibleHypertextSupport" type="constructor" line="1970">
                    <declaration name="d" type="Document" line="1972"/>
                    <scope line="1973">
                        <anonymous_class line="1974">
                            <method name="changedUpdate" type="void" line="1975">
                                <params>
                                    <param name="theEvent" type="DocumentEvent"/>
                                </params>
                            </method>
                            <method name="insertUpdate" type="void" line="1978">
                                <params>
                                    <param name="theEvent" type="DocumentEvent"/>
                                </params>
                            </method>
                            <method name="removeUpdate" type="void" line="1981">
                                <params>
                                    <param name="theEvent" type="DocumentEvent"/>
                                </params>
                            </method>
                        </anonymous_class>
                    </scope>
                </method>
                <javadoc line="1988">
                    Returns the number of links within this hypertext doc.                    
                    <return>
                        number of links in this hypertext doc.                        
                    </return>
                </javadoc>
                <method name="getLinkCount" type="int" line="1993">
                    <scope line="1994"/>
                </method>
                <javadoc line="2000">
                    Returns the index into an array of hyperlinks that
                      is associated with this character index, or -1 if there
                      is no hyperlink associated with this index.                    
                    <param>
                        charIndex index within the text                        
                    </param>
                    <return>
                        index into the set of hyperlinks for this hypertext doc.                        
                    </return>
                </javadoc>
                <method name="getLinkIndex" type="int" line="2008">
                    <params>
                        <param name="charIndex" type="int"/>
                    </params>
                    <comment line="2022">
                        don&apos;t need to verify that it&apos;s an HREF element; if
                         not, then it won&apos;t be in the hyperlinks Vector, and
                         so indexOf will return -1 in any case                        
                    </comment>
                    <scope line="2009"/>
                    <declaration name="e" type="Element" line="2012"/>
                    <declaration name="doc" type="Document" line="2013"/>
                    <scope line="2014">
                        <scope line="2015">
                            <declaration name="index" type="int" line="2016"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="2027">
                    Returns the index into an array of hyperlinks that
                      index.  If there is no hyperlink at this index, it returns
                      null.                    
                    <param>
                        linkIndex into the set of hyperlinks for this hypertext doc.                        
                    </param>
                    <return>
                        string representation of the hyperlink                        
                    </return>
                </javadoc>
                <method name="getLink" type="AccessibleHyperlink" line="2035">
                    <params>
                        <param name="linkIndex" type="int"/>
                    </params>
                    <scope line="2036"/>
                    <scope line="2039"/>
                    <scope line="2041"/>
                </method>
                <javadoc line="2046">
                    Returns the contiguous text within the document that
                      is associated with this hyperlink.                    
                    <param>
                        linkIndex into the set of hyperlinks for this hypertext doc.                        
                    </param>
                    <return>
                        the contiguous text sharing the link at this index                        
                    </return>
                </javadoc>
                <method name="getLinkText" type="String" line="2053">
                    <params>
                        <param name="linkIndex" type="int"/>
                    </params>
                    <scope line="2054"/>
                    <declaration name="e" type="Element" line="2057"/>
                    <scope line="2058">
                        <declaration name="d" type="Document" line="2059"/>
                        <scope line="2060">
                            <scope line="2061"/>
                            <scope line="2064"/>
                        </scope>
                    </scope>
                </method>
            </class>
            <class name="PlainEditorKit" line="2073">
                <extends class="DefaultEditorKit"/>
                <comment line="2288">
                                        
                </comment>
                <implements interface="ViewFactory"/>
                <javadoc line="2075">
                    Fetches a factory that is suitable for producing
                      views of any models that are produced by this
                      kit.  The default is to have the UI produce the
                      factory, so this method has no implementation.                    
                    <return>
                        the view factory                        
                    </return>
                </javadoc>
                <method name="getViewFactory" type="ViewFactory" line="2083"/>
                <javadoc line="2087">
                    Creates a view from the given structural element of a
                      document.                    
                    <param>
                        elem  the piece of the document to build a view of                        
                    </param>
                    <return>
                        the view                        
                    </return>
                    <see>
                        View                        
                    </see>
                </javadoc>
                <method name="create" type="View" line="2095">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <comment line="2099">
                                                
                    </comment>
                    <comment line="2101">
                        build a view that support bidi                        
                    </comment>
                    <declaration name="doc" type="Document" line="2096"/>
                    <declaration name="i18nFlag" type="Object" line="2097"/>
                    <scope line="2099"/>
                    <scope line="2102"/>
                </method>
                <method name="createI18N" type="View" line="2107">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <declaration name="kind" type="String" line="2108"/>
                    <scope line="2109">
                        <scope line="2110"/>
                        <scope line="2112"/>
                    </scope>
                </method>
                <class name="PlainParagraph" line="2119">
                    <extends class="javax.swing.text.ParagraphView"/>
                    <javadoc line="2119">
                        Paragraph for representing plain-text lines that support
                          bidirectional text.                        
                    </javadoc>
                    <method name="PlainParagraph" type="constructor" line="2125">
                        <params>
                            <param name="elem" type="Element"/>
                        </params>
                    </method>
                    <method name="setPropertiesFromAttributes" type="void" line="2131">
                        <declaration name="c" type="Component" line="2132"/>
                        <scope line="2135"/>
                        <scope line="2137"/>
                    </method>
                    <javadoc line="2142">
                        Fetch the constraining span to flow against for
                          the given child index.                        
                    </javadoc>
                    <method name="getFlowSpan" type="int" line="2146">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                        <comment line="2152">
                            no limit if unwrapped                            
                        </comment>
                        <declaration name="c" type="Component" line="2147"/>
                        <scope line="2148">
                            <declaration name="area" type="JTextArea" line="2149"/>
                            <scope line="2150"/>
                        </scope>
                    </method>
                    <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="2160">
                        <params>
                            <param name="axis" type="int"/>
                            <param name="r" type="SizeRequirements"/>
                        </params>
                        <comment line="2168">
                            min is pref if unwrapped                            
                        </comment>
                        <declaration name="req" type="SizeRequirements" line="2161"/>
                        <declaration name="c" type="Component" line="2163"/>
                        <scope line="2164">
                            <declaration name="area" type="JTextArea" line="2165"/>
                            <scope line="2166"/>
                        </scope>
                    </method>
                    <class name="LogicalView" line="2174">
                        <extends class="CompositeView"/>
                        <comment line="2243">
                            The following methods don&apos;t do anything useful, they
                             simply keep the class from being abstract.                            
                        </comment>
                        <javadoc line="2174">
                            This class can be used to represent a logical view for
                              a flow.  It keeps the children updated to reflect the state
                              of the model, gives the logical child views access to the
                              view hierarchy, and calculates a preferred span.  It doesn&apos;t
                              do any rendering, layout, or model/view translation.                            
                        </javadoc>
                        <method name="LogicalView" type="constructor" line="2183">
                            <params>
                                <param name="elem" type="Element"/>
                            </params>
                        </method>
                        <method name="getViewIndexAtPosition" type="int" line="2187">
                            <params>
                                <param name="pos" type="int"/>
                            </params>
                            <declaration name="elem" type="Element" line="2188"/>
                            <scope line="2189"/>
                        </method>
                        <method name="updateChildren" type="boolean" line="2198">
                            <params>
                                <param name="ec" type="DocumentEvent.ElementChange"/>
                                <param name="e" type="DocumentEvent"/>
                                <param name="f" type="ViewFactory"/>
                            </params>
                        </method>
                        <method name="loadChildren" type="void" line="2202">
                            <params>
                                <param name="f" type="ViewFactory"/>
                            </params>
                            <declaration name="elem" type="Element" line="2203"/>
                            <scope line="2204"/>
                            <scope line="2206">
                                <declaration name="v" type="View" line="2207"/>
                            </scope>
                        </method>
                        <method name="getPreferredSpan" type="float" line="2212">
                            <params>
                                <param name="axis" type="int"/>
                            </params>
                            <comment line="2218">
                                ((GlyphView)v).setGlyphPainter(null);                                
                            </comment>
                            <declaration name="v" type="View" line="2216"/>
                        </method>
                        <javadoc line="2221">
                            Forward the DocumentEvent to the given child view.  This
                              is implemented to reparent the child to the logical view
                              (the children may have been parented by a row in the flow
                              if they fit without breaking) and then execute the
                              superclass behavior.                            
                            <param>
                                v the child view to forward the event to.                                
                            </param>
                            <param>
                                e the change information from the associated document                                
                            </param>
                            <param>
                                a the current allocation of the view                                
                            </param>
                            <param>
                                f the factory to use to rebuild if the view has
                                  children                                
                            </param>
                            <see>
                                #forwardUpdate                                
                            </see>
                            <since>
                                1.3                                
                            </since>
                        </javadoc>
                        <method name="forwardUpdateToView" type="void" line="2237">
                            <params>
                                <param name="v" type="View"/>
                                <param name="e" type="DocumentEvent"/>
                                <param name="a" type="Shape"/>
                                <param name="f" type="ViewFactory"/>
                            </params>
                        </method>
                        <method name="paint" type="void" line="2245">
                            <params>
                                <param name="g" type="Graphics"/>
                                <param name="allocation" type="Shape"/>
                            </params>
                        </method>
                        <method name="isBefore" type="boolean" line="2248">
                            <params>
                                <param name="x" type="int"/>
                                <param name="y" type="int"/>
                                <param name="alloc" type="Rectangle"/>
                            </params>
                        </method>
                        <method name="isAfter" type="boolean" line="2252">
                            <params>
                                <param name="x" type="int"/>
                                <param name="y" type="int"/>
                                <param name="alloc" type="Rectangle"/>
                            </params>
                        </method>
                        <method name="getViewAtPoint" type="View" line="2256">
                            <params>
                                <param name="x" type="int"/>
                                <param name="y" type="int"/>
                                <param name="alloc" type="Rectangle"/>
                            </params>
                        </method>
                        <method name="childAllocation" type="void" line="2260">
                            <params>
                                <param name="index" type="int"/>
                                <param name="a" type="Rectangle"/>
                            </params>
                        </method>
                    </class>
                </class>
            </class>
            <class name="HeaderParser" line="2285">
                <comment line="2288">
                                        
                </comment>
                <declaration name="raw" type="String" line="2288"/>
                <declaration name="tab" type="String[][]" line="2289"/>
                <method name="HeaderParser" type="constructor" line="2291">
                    <params>
                        <param name="raw" type="String"/>
                    </params>
                </method>
                <method name="parse" type="void" line="2297">
                    <comment line="2309">
                        end of a key                        
                    </comment>
                    <comment line="2328">
                        end key/val, of whatever we&apos;re in                        
                    </comment>
                    <comment line="2346">
                        get last key/val, if any                        
                    </comment>
                    <scope line="2299">
                        <declaration name="ca" type="char[]" line="2301"/>
                        <declaration name="beg" type="int" line="2302"/>
                        <declaration name="inKey" type="boolean" line="2303"/>
                        <declaration name="inQuote" type="boolean" line="2304"/>
                        <declaration name="len" type="int" line="2305"/>
                        <scope line="2306">
                            <declaration name="c" type="char" line="2307"/>
                            <scope line="2308"/>
                            <scope line="2313">
                                <scope line="2314">
                                    <scope line="2317"/>
                                </scope>
                                <scope line="2322"/>
                            </scope>
                            <scope line="2327">
                                <scope line="2328"/>
                                <scope line="2331"/>
                                <scope line="2333"/>
                                <scope line="2336"/>
                            </scope>
                            <scope line="2341"/>
                        </scope>
                        <scope line="2346">
                            <scope line="2347">
                                <scope line="2348"/>
                                <scope line="2350"/>
                            </scope>
                            <scope line="2353"/>
                        </scope>
                        <scope line="2356">
                            <scope line="2357">
                                <scope line="2358"/>
                                <scope line="2360"/>
                            </scope>
                            <scope line="2363"/>
                        </scope>
                    </scope>
                </method>
                <method name="findKey" type="String" line="2371">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="findValue" type="String" line="2377">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="findValue" type="String" line="2383">
                    <params>
                        <param name="key" type="String"/>
                    </params>
                </method>
                <method name="findValue" type="String" line="2387">
                    <params>
                        <param name="k" type="String"/>
                        <param name="Default" type="String"/>
                    </params>
                    <scope line="2391">
                        <scope line="2392"/>
                        <scope line="2394"/>
                    </scope>
                </method>
                <method name="findInt" type="int" line="2401">
                    <params>
                        <param name="k" type="String"/>
                        <param name="Default" type="int"/>
                    </params>
                    <scope line="2402"/>
                    <scope line="2404"/>
                </method>
            </class>
        </class>
    </source>