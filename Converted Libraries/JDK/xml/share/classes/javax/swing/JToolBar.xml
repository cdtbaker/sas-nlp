<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.ComponentOrientation"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.LayoutManager"/>
        <import package="java.awt.LayoutManager2"/>
        <import package="java.awt.event"/>
        <import package="java.beans"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Hashtable"/>
        <class name="JToolBar" line="21">
            <extends class="JComponent"/>
            <implements interface="SwingConstants"/>
            <implements interface="Accessible"/>
            <javadoc line="21">
                &lt;code&gt;JToolBar&lt;/code&gt; provides a component that is useful for
                  displaying commonly used &lt;code&gt;Action&lt;/code&gt;s or controls.
                  For examples and information on using tool bars see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/toolbar.html&quot;&gt;How to Use Tool Bars&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  With most look and feels,
                  the user can drag out a tool bar into a separate window
                  (unless the &lt;code&gt;floatable&lt;/code&gt; property is set to &lt;code&gt;false&lt;/code&gt;).
                  For drag-out to work correctly, it is recommended that you add
                  &lt;code&gt;JToolBar&lt;/code&gt; instances to one of the four &quot;sides&quot; of a
                  container whose layout manager is a &lt;code&gt;BorderLayout&lt;/code&gt;,
                  and do not add children to any of the other four &quot;sides&quot;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfoattribute>
                    : isContainer true
                      description: A component which displays commonly used controls or Actions.                    
                </beaninfoattribute>
                <author>
                    Georges Saab                    
                </author>
                <author>
                    Jeff Shapiro                    
                </author>
                <see>
                    Action                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="56"/>
            <javadoc line="56">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="paintBorder" type="boolean" line="61"/>
            <declaration name="margin" type="Insets" line="62"/>
            <declaration name="floatable" type="boolean" line="63"/>
            <declaration name="orientation" type="int" line="64"/>
            <javadoc line="65">
                Creates a new tool bar; orientation defaults to &lt;code&gt;HORIZONTAL&lt;/code&gt;.                
            </javadoc>
            <method name="JToolBar" type="constructor" line="68"/>
            <javadoc line="71">
                Creates a new tool bar with the specified &lt;code&gt;orientation&lt;/code&gt;.
                  The &lt;code&gt;orientation&lt;/code&gt; must be either &lt;code&gt;HORIZONTAL&lt;/code&gt;
                  or &lt;code&gt;VERTICAL&lt;/code&gt;.                
                <param>
                    orientation  the orientation desired                    
                </param>
            </javadoc>
            <method name="JToolBar" type="constructor" line="77">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="80">
                Creates a new tool bar with the specified &lt;code&gt;name&lt;/code&gt;.  The
                  name is used as the title of the undocked tool bar.  The default
                  orientation is &lt;code&gt;HORIZONTAL&lt;/code&gt;.                
                <param>
                    name the name of the tool bar                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JToolBar" type="constructor" line="87">
                <params>
                    <param name="name" type="String"/>
                </params>
            </method>
            <javadoc line="90">
                Creates a new tool bar with a specified &lt;code&gt;name&lt;/code&gt; and
                  &lt;code&gt;orientation&lt;/code&gt;.
                  All other constructors call this constructor.
                  If &lt;code&gt;orientation&lt;/code&gt; is an invalid value, an exception will
                  be thrown.                
                <param>
                    name  the name of the tool bar                    
                </param>
                <param>
                    orientation  the initial orientation -- it must be
                      either <code>HORIZONTAL</code> or <code>VERTICAL</code>                    
                </param>
                <exception>
                    IllegalArgumentException if orientation is neither
                      <code>HORIZONTAL</code> nor <code>VERTICAL</code>                    
                </exception>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="JToolBar" type="constructor" line="103">
                <params>
                    <param name="name" type="String"/>
                    <param name="orientation" type="int"/>
                </params>
                <declaration name="layout" type="DefaultToolBarLayout" line="107"/>
            </method>
            <javadoc line="112">
                Returns the tool bar&apos;s current UI.                
                <see>
                    #setUI                    
                </see>
            </javadoc>
            <method name="getUI" type="ToolBarUI" line="116"/>
            <javadoc line="119">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui  the <code>ToolBarUI</code> L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="128">
                <params>
                    <param name="ui" type="ToolBarUI"/>
                </params>
            </method>
            <javadoc line="131">
                Notification from the &lt;code&gt;UIFactory&lt;/code&gt; that the L&amp;F has changed.
                  Called to replace the UI with the latest version from the
                  &lt;code&gt;UIFactory&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="137">
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "ToolBarUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="150"/>
            <javadoc line="153">
                Returns the index of the specified component.
                  (Note: Separators occupy index positions.)                
                <param>
                    c  the <code>Component</code> to find                    
                </param>
                <return>
                    an integer indicating the component's position,
                      where 0 is first                    
                </return>
            </javadoc>
            <method name="getComponentIndex" type="int" line="160">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="ncomponents" type="int" line="161"/>
                <declaration name="component" type="Component[]" line="162"/>
                <scope line="163">
                    <declaration name="comp" type="Component" line="164"/>
                </scope>
            </method>
            <javadoc line="169">
                Returns the component at the specified index.                
                <param>
                    i  the component's position, where 0 is first                    
                </param>
                <return>
                    the <code>Component</code> at that position,
                      or <code>null</code> for an invalid index                    
                </return>
            </javadoc>
            <method name="getComponentAtIndex" type="Component" line="175">
                <params>
                    <param name="i" type="int"/>
                </params>
                <declaration name="ncomponents" type="int" line="176"/>
                <scope line="177">
                    <declaration name="component" type="Component[]" line="178"/>
                </scope>
            </method>
            <javadoc line="183">
                Sets the margin between the tool bar&apos;s border and
                  its buttons. Setting to &lt;code&gt;null&lt;/code&gt; causes the tool bar to
                  use the default margins. The tool bar&apos;s default &lt;code&gt;Border&lt;/code&gt;
                  object uses this value to create the proper margin.
                  However, if a non-default border is set on the tool bar,
                  it is that &lt;code&gt;Border&lt;/code&gt; object&apos;s responsibility to create the
                  appropriate margin space (otherwise this property will
                  effectively be ignored).                
                <param>
                    m an <code>Insets</code> object that defines the space
                      between the border and the buttons                    
                </param>
                <see>
                    Insets                    
                </see>
                <beaninfodescription>
                    : The margin between the tool bar's border and contents
                      bound: true
                      expert: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setMargin" type="void" line="199">
                <params>
                    <param name="m" type="Insets"/>
                </params>
                <declaration name="old" type="Insets" line="200"/>
            </method>
            <javadoc line="206">
                Returns the margin between the tool bar&apos;s border and
                  its buttons.                
                <return>
                    an <code>Insets</code> object containing the margin values                    
                </return>
                <see>
                    Insets                    
                </see>
            </javadoc>
            <method name="getMargin" type="Insets" line="212">
                <scope line="213"/>
                <scope line="216"/>
            </method>
            <javadoc line="220">
                Gets the &lt;code&gt;borderPainted&lt;/code&gt; property.                
                <return>
                    the value of the <code>borderPainted</code> property                    
                </return>
                <see>
                    #setBorderPainted                    
                </see>
            </javadoc>
            <method name="isBorderPainted" type="boolean" line="225"/>
            <javadoc line="228">
                Sets the &lt;code&gt;borderPainted&lt;/code&gt; property, which is
                  &lt;code&gt;true&lt;/code&gt; if the border should be painted.
                  The default value for this property is &lt;code&gt;true&lt;/code&gt;.
                  Some look and feels might not implement painted borders;
                  they will ignore this property.                
                <param>
                    b if true, the border is painted                    
                </param>
                <see>
                    #isBorderPainted                    
                </see>
                <beaninfodescription>
                    : Does the tool bar paint its borders?
                      bound: true
                      expert: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setBorderPainted" type="void" line="240">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="241">
                    <declaration name="old" type="boolean" line="242"/>
                </scope>
            </method>
            <javadoc line="249">
                Paints the tool bar&apos;s border if the &lt;code&gt;borderPainted&lt;/code&gt; property
                  is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    g  the <code>Graphics</code> context in which the painting
                      is done                    
                </param>
                <see>
                    JComponent#paint                    
                </see>
                <see>
                    JComponent#setBorder                    
                </see>
            </javadoc>
            <method name="paintBorder" type="void" line="257">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="258"/>
            </method>
            <javadoc line="262">
                Gets the &lt;code&gt;floatable&lt;/code&gt; property.                
                <return>
                    the value of the <code>floatable</code> property                    
                </return>
                <see>
                    #setFloatable                    
                </see>
            </javadoc>
            <method name="isFloatable" type="boolean" line="267"/>
            <javadoc line="270">
                Sets the &lt;code&gt;floatable&lt;/code&gt; property,
                  which must be &lt;code&gt;true&lt;/code&gt; for the user to move the tool bar.
                  Typically, a floatable tool bar can be
                  dragged into a different position within the same container
                  or out into its own window.
                  The default value of this property is &lt;code&gt;true&lt;/code&gt;.
                  Some look and feels might not implement floatable tool bars;
                  they will ignore this property.                
                <param>
                    b if <code>true</code>, the tool bar can be moved;
                      <code>false</code> otherwise                    
                </param>
                <see>
                    #isFloatable                    
                </see>
                <beaninfodescription>
                    : Can the tool bar be made to float by the user?
                      bound: true
                      preferred: true                    
                </beaninfodescription>
            </javadoc>
            <method name="setFloatable" type="void" line="286">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="287">
                    <declaration name="old" type="boolean" line="288"/>
                </scope>
            </method>
            <javadoc line="295">
                Returns the current orientation of the tool bar.  The value is either
                  &lt;code&gt;HORIZONTAL&lt;/code&gt; or &lt;code&gt;VERTICAL&lt;/code&gt;.                
                <return>
                    an integer representing the current orientation -- either
                      <code>HORIZONTAL</code> or <code>VERTICAL</code>                    
                </return>
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <method name="getOrientation" type="int" line="302"/>
            <javadoc line="305">
                Sets the orientation of the tool bar.  The orientation must have
                  either the value &lt;code&gt;HORIZONTAL&lt;/code&gt; or &lt;code&gt;VERTICAL&lt;/code&gt;.
                  If &lt;code&gt;orientation&lt;/code&gt; is
                  an invalid value, an exception will be thrown.                
                <param>
                    o  the new orientation -- either <code>HORIZONTAL</code> or
                      <code>VERTICAL</code>                    
                </param>
                <exception>
                    IllegalArgumentException if orientation is neither
                      <code>HORIZONTAL</code> nor <code>VERTICAL</code>                    
                </exception>
                <see>
                    #getOrientation                    
                </see>
                <beaninfodescription>
                    : The current orientation of the tool bar
                      bound: true
                      preferred: true
                      enum: HORIZONTAL SwingConstants.HORIZONTAL
                      VERTICAL   SwingConstants.VERTICAL                    
                </beaninfodescription>
            </javadoc>
            <method name="setOrientation" type="void" line="321">
                <params>
                    <param name="o" type="int"/>
                </params>
                <scope line="323">
                    <declaration name="old" type="int" line="324"/>
                </scope>
            </method>
            <javadoc line="331">
                Sets the rollover state of this toolbar. If the rollover state is true
                  then the border of the toolbar buttons will be drawn only when the
                  mouse pointer hovers over them. The default value of this property
                  is false.
                  &lt;p&gt;
                  The implementation of a look and feel may choose to ignore this
                  property.                
                <param>
                    rollover true for rollover toolbar buttons; otherwise false                    
                </param>
                <since>
                    1.4                    
                </since>
                <beaninfobound>
                    : true
                      preferred: true
                      attribute: visualUpdate true
                      description: Will draw rollover button borders in the toolbar.                    
                </beaninfobound>
            </javadoc>
            <method name="setRollover" type="void" line="346">
                <params>
                    <param name="rollover" type="boolean"/>
                </params>
            </method>
            <javadoc line="349">
                Returns the rollover state.                
                <return>
                    true if rollover toolbar buttons are to be drawn; otherwise false                    
                </return>
                <see>
                    #setRollover(boolean)                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="isRollover" type="boolean" line="355">
                <declaration name="rollover" type="Boolean" line="356"/>
                <scope line="357"/>
            </method>
            <method name="checkOrientation" type="void" line="362">
                <params>
                    <param name="orientation" type="int"/>
                </params>
            </method>
            <javadoc line="371">
                Appends a separator of default size to the end of the tool bar.
                  The default size is determined by the current look and feel.                
            </javadoc>
            <method name="addSeparator" type="void" line="375"/>
            <javadoc line="378">
                Appends a separator of a specified size to the end
                  of the tool bar.                
                <param>
                    size the <code>Dimension</code> of the separator                    
                </param>
            </javadoc>
            <method name="addSeparator" type="void" line="383">
                <params>
                    <param name="size" type="Dimension"/>
                </params>
                <declaration name="s" type="JToolBar.Separator" line="384"/>
            </method>
            <javadoc line="387">
                Adds a new &lt;code&gt;JButton&lt;/code&gt; which dispatches the action.                
                <param>
                    a the <code>Action</code> object to add as a new menu item                    
                </param>
                <return>
                    the new button which dispatches the action                    
                </return>
            </javadoc>
            <method name="add" type="JButton" line="392">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <declaration name="b" type="JButton" line="393"/>
            </method>
            <javadoc line="398">
                Factory method which creates the &lt;code&gt;JButton&lt;/code&gt; for
                  &lt;code&gt;Action&lt;/code&gt;s added to the &lt;code&gt;JToolBar&lt;/code&gt;.
                  The default name is empty if a &lt;code&gt;null&lt;/code&gt; action is passed.                
                <param>
                    a the <code>Action</code> for the button to be added                    
                </param>
                <return>
                    the newly created button                    
                </return>
                <see>
                    Action                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createActionComponent" type="JButton" line="407">
                <params>
                    <param name="a" type="Action"/>
                </params>
                <anonymous_class line="408">
                    <method name="createActionPropertyChangeListener" type="PropertyChangeListener" line="409">
                        <params>
                            <param name="a" type="Action"/>
                        </params>
                        <declaration name="pcl" type="PropertyChangeListener" line="410"/>
                        <scope line="411"/>
                    </method>
                </anonymous_class>
                <declaration name="b" type="JButton" line="408"/>
                <scope line="418"/>
            </method>
            <javadoc line="425">
                Returns a properly configured &lt;code&gt;PropertyChangeListener&lt;/code&gt;
                  which updates the control as changes to the &lt;code&gt;Action&lt;/code&gt; occur,
                  or &lt;code&gt;null&lt;/code&gt; if the default
                  property change listener for the control is desired.                
                <return>
                    <code>null</code>                    
                </return>
            </javadoc>
            <method name="createActionChangeListener" type="PropertyChangeListener" line="432">
                <params>
                    <param name="b" type="JButton"/>
                </params>
            </method>
            <javadoc line="435">
                If a &lt;code&gt;JButton&lt;/code&gt; is being added, it is initially
                  set to be disabled.                
                <param>
                    comp  the component to be enhanced                    
                </param>
                <param>
                    constraints  the constraints to be enforced on the component                    
                </param>
                <param>
                    index the index of the component                    
                </param>
            </javadoc>
            <method name="addImpl" type="void" line="442">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="443">
                    <scope line="444"/>
                    <scope line="447"/>
                </scope>
                <scope line="452"/>
            </method>
            <class name="Separator" line="456">
                <extends class="JSeparator"/>
                <javadoc line="456">
                    A toolbar-specific separator. An object with dimension but
                      no contents used to divide buttons on a tool bar into groups.                    
                </javadoc>
                <declaration name="separatorSize" type="Dimension" line="461"/>
                <javadoc line="462">
                    Creates a new toolbar separator with the default size
                      as defined by the current look and feel.                    
                </javadoc>
                <method name="Separator" type="constructor" line="466"/>
                <javadoc line="469">
                    Creates a new toolbar separator with the specified size.                    
                    <param>
                        size the <code>Dimension</code> of the separator                        
                    </param>
                </javadoc>
                <method name="Separator" type="constructor" line="473">
                    <params>
                        <param name="size" type="Dimension"/>
                    </params>
                </method>
                <javadoc line="477">
                    Returns the name of the L&amp;F class that renders this component.                    
                    <return>
                        the string "ToolBarSeparatorUI"                        
                    </return>
                    <see>
                        JComponent#getUIClassID                        
                    </see>
                    <see>
                        UIDefaults#getUI                        
                    </see>
                </javadoc>
                <method name="getUIClassID" type="String" line="483"/>
                <javadoc line="486">
                    Sets the size of the separator.                    
                    <param>
                        size the new <code>Dimension</code> of the separator                        
                    </param>
                </javadoc>
                <method name="setSeparatorSize" type="void" line="490">
                    <params>
                        <param name="size" type="Dimension"/>
                    </params>
                    <scope line="491"/>
                    <scope line="494"/>
                </method>
                <javadoc line="499">
                    Returns the size of the separator                    
                    <return>
                        the <code>Dimension</code> object containing the separator's
                          size (This is a reference, NOT a copy!)                        
                    </return>
                </javadoc>
                <method name="getSeparatorSize" type="Dimension" line="504"/>
                <javadoc line="507">
                    Returns the minimum size for the separator.                    
                    <return>
                        the <code>Dimension</code> object containing the separator's
                          minimum size                        
                    </return>
                </javadoc>
                <method name="getMinimumSize" type="Dimension" line="512">
                    <scope line="513"/>
                    <scope line="516"/>
                </method>
                <javadoc line="520">
                    Returns the maximum size for the separator.                    
                    <return>
                        the <code>Dimension</code> object containing the separator's
                          maximum size                        
                    </return>
                </javadoc>
                <method name="getMaximumSize" type="Dimension" line="525">
                    <scope line="526"/>
                    <scope line="529"/>
                </method>
                <javadoc line="533">
                    Returns the preferred size for the separator.                    
                    <return>
                        the <code>Dimension</code> object containing the separator's
                          preferred size                        
                    </return>
                </javadoc>
                <method name="getPreferredSize" type="Dimension" line="538">
                    <scope line="539"/>
                    <scope line="542"/>
                </method>
            </class>
            <javadoc line="547">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="552">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="554">
                    <declaration name="count" type="byte" line="555"/>
                    <scope line="557"/>
                </scope>
            </method>
            <javadoc line="562">
                Returns a string representation of this &lt;code&gt;JToolBar&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JToolBar</code>.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="571">
                <declaration name="paintBorderString" type="String" line="572"/>
                <declaration name="marginString" type="String" line="573"/>
                <declaration name="floatableString" type="String" line="574"/>
                <declaration name="orientationString" type="String" line="575"/>
            </method>
            <class name="DefaultToolBarLayout" line="578">
                <implements interface="LayoutManager2"/>
                <implements interface="Serializable"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="UIResource"/>
                <declaration name="lm" type="BoxLayout" line="579"/>
                <method name="DefaultToolBarLayout" type="constructor" line="580">
                    <params>
                        <param name="orientation" type="int"/>
                    </params>
                    <scope line="581"/>
                    <scope line="584"/>
                </method>
                <method name="addLayoutComponent" type="void" line="588">
                    <params>
                        <param name="name" type="String"/>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="addLayoutComponent" type="void" line="591">
                    <params>
                        <param name="comp" type="Component"/>
                        <param name="constraints" type="Object"/>
                    </params>
                </method>
                <method name="removeLayoutComponent" type="void" line="594">
                    <params>
                        <param name="comp" type="Component"/>
                    </params>
                </method>
                <method name="preferredLayoutSize" type="Dimension" line="597">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="minimumLayoutSize" type="Dimension" line="600">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="maximumLayoutSize" type="Dimension" line="603">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="layoutContainer" type="void" line="606">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="getLayoutAlignmentX" type="float" line="609">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="getLayoutAlignmentY" type="float" line="612">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="invalidateLayout" type="void" line="615">
                    <params>
                        <param name="target" type="Container"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="618">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="name" type="String" line="619"/>
                    <scope line="620">
                        <declaration name="o" type="int" line="621"/>
                        <scope line="623"/>
                    </scope>
                </method>
            </class>
            <method name="setLayout" type="void" line="629">
                <params>
                    <param name="mgr" type="LayoutManager"/>
                </params>
                <declaration name="oldMgr" type="LayoutManager" line="630"/>
                <scope line="631"/>
            </method>
            <javadoc line="636">
                Gets the AccessibleContext associated with this JToolBar.
                  For tool bars, the AccessibleContext takes the form of an
                  AccessibleJToolBar.
                  A new AccessibleJToolBar instance is created if necessary.                
                <return>
                    an AccessibleJToolBar that serves as the
                      AccessibleContext of this JToolBar                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="644">
                <scope line="645"/>
            </method>
            <class name="AccessibleJToolBar" line="650">
                <extends class="AccessibleJComponent"/>
                <javadoc line="650">
                    This class implements accessibility support for the
                      &lt;code&gt;JToolBar&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to toolbar user-interface elements.                    
                </javadoc>
                <javadoc line="656">
                    Get the state of this object.                    
                    <return>
                        an instance of AccessibleStateSet containing the current
                          state set of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="662">
                    <declaration name="states" type="AccessibleStateSet" line="663"/>
                </method>
                <javadoc line="666">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="670"/>
            </class>
        </class>
    </source>