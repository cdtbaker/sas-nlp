<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.util.Collections"/>
        <import package="java.util.Set"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JTextArea" line="41">
            <extends class="JTextComponent"/>
            <comment line="443">
                --- java.awt.TextArea methods ---------------------------------                
            </comment>
            <comment line="610">
                --- Component methods -----------------------------------------                
            </comment>
            <comment line="672">
                --- Scrollable methods ----------------------------------------                
            </comment>
            <comment line="755">
                ///////////////                
            </comment>
            <comment line="756">
                Accessibility support                
            </comment>
            <comment line="757">
                //////////////                
            </comment>
            <comment line="807">
                --- variables -------------------------------------------------                
            </comment>
            <javadoc line="41">
                A &lt;code&gt;JTextArea&lt;/code&gt; is a multi-line area that displays plain text.
                  It is intended to be a lightweight component that provides source
                  compatibility with the &lt;code&gt;java.awt.TextArea&lt;/code&gt; class where it can
                  reasonably do so.
                  You can find information and examples of using all the text components in
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  This component has capabilities not found in the
                  &lt;code&gt;java.awt.TextArea&lt;/code&gt; class.  The superclass should be
                  consulted for additional capabilities.
                  Alternative multi-line text classes with
                  more capabilities are &lt;code&gt;JTextPane&lt;/code&gt; and &lt;code&gt;JEditorPane&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;java.awt.TextArea&lt;/code&gt; internally handles scrolling.
                  &lt;code&gt;JTextArea&lt;/code&gt; is different in that it doesn&apos;t manage scrolling,
                  but implements the swing &lt;code&gt;Scrollable&lt;/code&gt; interface.  This allows it
                  to be placed inside a &lt;code&gt;JScrollPane&lt;/code&gt; if scrolling
                  behavior is desired, and used directly if scrolling is not desired.
                  &lt;p&gt;
                  The &lt;code&gt;java.awt.TextArea&lt;/code&gt; has the ability to do line wrapping.
                  This was controlled by the horizontal scrolling policy.  Since
                  scrolling is not done by &lt;code&gt;JTextArea&lt;/code&gt; directly, backward
                  compatibility must be provided another way.  &lt;code&gt;JTextArea&lt;/code&gt; has
                  a bound property for line wrapping that controls whether or
                  not it will wrap lines.  By default, the line wrapping property
                  is set to false (not wrapped).
                  &lt;p&gt;
                  &lt;code&gt;java.awt.TextArea&lt;/code&gt; has two properties &lt;code&gt;rows&lt;/code&gt;
                  and &lt;code&gt;columns&lt;/code&gt; that are used to determine the preferred size.
                  &lt;code&gt;JTextArea&lt;/code&gt; uses these properties to indicate the
                  preferred size of the viewport when placed inside a &lt;code&gt;JScrollPane&lt;/code&gt;
                  to match the functionality provided by &lt;code&gt;java.awt.TextArea&lt;/code&gt;.
                  &lt;code&gt;JTextArea&lt;/code&gt; has a preferred size of what is needed to
                  display all of the text, so that it functions properly inside of
                  a &lt;code&gt;JScrollPane&lt;/code&gt;.  If the value for &lt;code&gt;rows&lt;/code&gt;
                  or &lt;code&gt;columns&lt;/code&gt; is equal to zero,
                  the preferred size along that axis is used for
                  the viewport preferred size along the same axis.
                  &lt;p&gt;
                  The &lt;code&gt;java.awt.TextArea&lt;/code&gt; could be monitored for changes by adding
                  a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;s.
                  In the &lt;code&gt;JTextComponent&lt;/code&gt; based
                  components, changes are broadcasted from the model via a
                  &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;.
                  The &lt;code&gt;DocumentEvent&lt;/code&gt; gives
                  the location of the change and the kind of change if desired.
                  The code fragment might look something like:
                  &lt;pre&gt;
                  DocumentListener myListener = ??;
                  JTextArea myArea = ??;
                  myArea.getDocument().addDocumentListener(myListener);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;&lt;font size=+1&gt;Newlines&lt;/font&gt;&lt;/b&gt;
                  &lt;dd&gt;
                  For a discussion on how newlines are handled, see
                  &lt;a href=&quot;text/DefaultEditorKit.html&quot;&gt;DefaultEditorKit&lt;/a&gt;.
                  &lt;/dl&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer false
                      description: A multi-line area that displays plain text.                    
                </beaninfo>
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    JTextPane                    
                </see>
                <see>
                    JEditorPane                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="129"/>
            <javadoc line="129">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <javadoc line="135">
                Constructs a new TextArea.  A default model is set, the initial string
                  is null, and rows/columns are set to 0.                
            </javadoc>
            <method name="JTextArea" type="constructor" line="139"/>
            <javadoc line="143">
                Constructs a new TextArea with the specified text displayed.
                  A default model is created and rows/columns are set to 0.                
                <param>
                    text the text to be displayed, or null                    
                </param>
            </javadoc>
            <method name="JTextArea" type="constructor" line="149">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="153">
                Constructs a new empty TextArea with the specified number of
                  rows and columns.  A default model is created, and the initial
                  string is null.                
                <param>
                    rows the number of rows >= 0                    
                </param>
                <param>
                    columns the number of columns >= 0                    
                </param>
                <exception>
                    IllegalArgumentException if the rows or columns
                      arguments are negative.                    
                </exception>
            </javadoc>
            <method name="JTextArea" type="constructor" line="163">
                <params>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Constructs a new TextArea with the specified text and number
                  of rows and columns.  A default model is created.                
                <param>
                    text the text to be displayed, or null                    
                </param>
                <param>
                    rows the number of rows >= 0                    
                </param>
                <param>
                    columns the number of columns >= 0                    
                </param>
                <exception>
                    IllegalArgumentException if the rows or columns
                      arguments are negative.                    
                </exception>
            </javadoc>
            <method name="JTextArea" type="constructor" line="177">
                <params>
                    <param name="text" type="String"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
            </method>
            <javadoc line="181">
                Constructs a new JTextArea with the given document model, and defaults
                  for all of the other arguments (null, 0, 0).                
                <param>
                    doc  the model to use                    
                </param>
            </javadoc>
            <method name="JTextArea" type="constructor" line="187">
                <params>
                    <param name="doc" type="Document"/>
                </params>
            </method>
            <javadoc line="191">
                Constructs a new JTextArea with the specified number of rows
                  and columns, and the given model.  All of the constructors
                  feed through this constructor.                
                <param>
                    doc the model to use, or create a default one if null                    
                </param>
                <param>
                    text the text to be displayed, null if none                    
                </param>
                <param>
                    rows the number of rows >= 0                    
                </param>
                <param>
                    columns the number of columns >= 0                    
                </param>
                <exception>
                    IllegalArgumentException if the rows or columns
                      arguments are negative.                    
                </exception>
            </javadoc>
            <method name="JTextArea" type="constructor" line="203">
                <params>
                    <param name="doc" type="Document"/>
                    <param name="text" type="String"/>
                    <param name="rows" type="int"/>
                    <param name="columns" type="int"/>
                </params>
                <scope line="207"/>
                <scope line="211"/>
                <scope line="215"/>
                <scope line="218"/>
            </method>
            <javadoc line="231">
                Returns the class ID for the UI.                
                <return>
                    the ID ("TextAreaUI")                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="238"/>
            <javadoc line="242">
                Creates the default implementation of the model
                  to be used at construction if one isn&apos;t explicitly
                  given.  A new instance of PlainDocument is returned.                
                <return>
                    the default document model                    
                </return>
            </javadoc>
            <method name="createDefaultModel" type="Document" line="249"/>
            <javadoc line="253">
                Sets the number of characters to expand tabs to.
                  This will be multiplied by the maximum advance for
                  variable width fonts.  A PropertyChange event (&quot;tabSize&quot;) is fired
                  when the tab size changes.                
                <param>
                    size number of characters to expand to                    
                </param>
                <see>
                    #getTabSize                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: the number of characters to expand tabs to                    
                </beaninfo>
            </javadoc>
            <method name="setTabSize" type="void" line="266">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="267"/>
                <scope line="268">
                    <declaration name="old" type="int" line="269"/>
                </scope>
            </method>
            <javadoc line="275">
                Gets the number of characters used to expand tabs.  If the document is
                  null or doesn&apos;t have a tab setting, return a default of 8.                
                <return>
                    the number of characters                    
                </return>
            </javadoc>
            <method name="getTabSize" type="int" line="281">
                <declaration name="size" type="int" line="282"/>
                <declaration name="doc" type="Document" line="283"/>
                <scope line="284">
                    <declaration name="i" type="Integer" line="285"/>
                    <scope line="286"/>
                </scope>
            </method>
            <javadoc line="293">
                Sets the line-wrapping policy of the text area.  If set
                  to true the lines will be wrapped if they are too long
                  to fit within the allocated width.  If set to false,
                  the lines will always be unwrapped.  A &lt;code&gt;PropertyChange&lt;/code&gt;
                  event (&quot;lineWrap&quot;) is fired when the policy is changed.
                  By default this property is false.                
                <param>
                    wrap indicates if lines should be wrapped                    
                </param>
                <see>
                    #getLineWrap                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: should lines be wrapped                    
                </beaninfo>
            </javadoc>
            <method name="setLineWrap" type="void" line="308">
                <params>
                    <param name="wrap" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="309"/>
            </method>
            <javadoc line="314">
                Gets the line-wrapping policy of the text area.  If set
                  to true the lines will be wrapped if they are too long
                  to fit within the allocated width.  If set to false,
                  the lines will always be unwrapped.                
                <return>
                    if lines will be wrapped                    
                </return>
            </javadoc>
            <method name="getLineWrap" type="boolean" line="322"/>
            <javadoc line="326">
                Sets the style of wrapping used if the text area is wrapping
                  lines.  If set to true the lines will be wrapped at word
                  boundaries (whitespace) if they are too long
                  to fit within the allocated width.  If set to false,
                  the lines will be wrapped at character boundaries.
                  By default this property is false.                
                <param>
                    word indicates if word boundaries should be used
                      for line wrapping                    
                </param>
                <see>
                    #getWrapStyleWord                    
                </see>
                <beaninfo>
                    preferred: false
                      bound: true
                      description: should wrapping occur at word boundaries                    
                </beaninfo>
            </javadoc>
            <method name="setWrapStyleWord" type="void" line="342">
                <params>
                    <param name="word" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="343"/>
            </method>
            <javadoc line="348">
                Gets the style of wrapping used if the text area is wrapping
                  lines.  If set to true the lines will be wrapped at word
                  boundaries (ie whitespace) if they are too long
                  to fit within the allocated width.  If set to false,
                  the lines will be wrapped at character boundaries.                
                <return>
                    if the wrap style should be word boundaries
                      instead of character boundaries                    
                </return>
                <see>
                    #setWrapStyleWord                    
                </see>
            </javadoc>
            <method name="getWrapStyleWord" type="boolean" line="359"/>
            <javadoc line="363">
                Translates an offset into the components text to a
                  line number.                
                <param>
                    offset the offset >= 0                    
                </param>
                <return>
                    the line number >= 0                    
                </return>
                <exception>
                    BadLocationException thrown if the offset is
                      less than zero or greater than the document length.                    
                </exception>
            </javadoc>
            <method name="getLineOfOffset" type="int" line="372">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="373"/>
                <scope line="374"/>
                <scope line="376"/>
                <scope line="378">
                    <declaration name="map" type="Element" line="379"/>
                </scope>
            </method>
            <javadoc line="384">
                Determines the number of lines contained in the area.                
                <return>
                    the number of lines > 0                    
                </return>
            </javadoc>
            <method name="getLineCount" type="int" line="389">
                <declaration name="map" type="Element" line="390"/>
            </method>
            <javadoc line="394">
                Determines the offset of the start of the given line.                
                <param>
                    line  the line number to translate >= 0                    
                </param>
                <return>
                    the offset >= 0                    
                </return>
                <exception>
                    BadLocationException thrown if the line is
                      less than zero or greater or equal to the number of
                      lines contained in the document (as reported by
                      getLineCount).                    
                </exception>
            </javadoc>
            <method name="getLineStartOffset" type="int" line="404">
                <params>
                    <param name="line" type="int"/>
                </params>
                <declaration name="lineCount" type="int" line="405"/>
                <scope line="406"/>
                <scope line="408"/>
                <scope line="410">
                    <declaration name="map" type="Element" line="411"/>
                    <declaration name="lineElem" type="Element" line="412"/>
                </scope>
            </method>
            <javadoc line="417">
                Determines the offset of the end of the given line.                
                <param>
                    line  the line >= 0                    
                </param>
                <return>
                    the offset >= 0                    
                </return>
                <exception>
                    BadLocationException Thrown if the line is
                      less than zero or greater or equal to the number of
                      lines contained in the document (as reported by
                      getLineCount).                    
                </exception>
            </javadoc>
            <method name="getLineEndOffset" type="int" line="427">
                <params>
                    <param name="line" type="int"/>
                </params>
                <comment line="437">
                    hide the implicit break at the end of the document                    
                </comment>
                <declaration name="lineCount" type="int" line="428"/>
                <scope line="429"/>
                <scope line="431"/>
                <scope line="433">
                    <declaration name="map" type="Element" line="434"/>
                    <declaration name="lineElem" type="Element" line="435"/>
                    <declaration name="endOffset" type="int" line="436"/>
                </scope>
            </method>
            <javadoc line="444">
                Inserts the specified text at the specified position.  Does nothing
                  if the model is null or if the text is null or empty.                
                <param>
                    str the text to insert                    
                </param>
                <param>
                    pos the position at which to insert >= 0                    
                </param>
                <exception>
                    IllegalArgumentException  if pos is an
                      invalid position in the model                    
                </exception>
                <see>
                    TextComponent#setText                    
                </see>
                <see>
                    #replaceRange                    
                </see>
            </javadoc>
            <method name="insert" type="void" line="455">
                <params>
                    <param name="str" type="String"/>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="456"/>
                <scope line="457">
                    <scope line="458"/>
                    <scope line="460"/>
                </scope>
            </method>
            <javadoc line="466">
                Appends the given text to the end of the document.  Does nothing if
                  the model is null or the string is null or empty.                
                <param>
                    str the text to insert                    
                </param>
                <see>
                    #insert                    
                </see>
            </javadoc>
            <method name="append" type="void" line="473">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="doc" type="Document" line="474"/>
                <scope line="475">
                    <scope line="476"/>
                    <scope line="478"/>
                </scope>
            </method>
            <javadoc line="483">
                Replaces text from the indicated start to end position with the
                  new text specified.  Does nothing if the model is null.  Simply
                  does a delete if the new string is null or empty.                
                <param>
                    str the text to use as the replacement                    
                </param>
                <param>
                    start the start position >= 0                    
                </param>
                <param>
                    end the end position >= start                    
                </param>
                <exception>
                    IllegalArgumentException  if part of the range is an
                      invalid position in the model                    
                </exception>
                <see>
                    #insert                    
                </see>
                <see>
                    #replaceRange                    
                </see>
            </javadoc>
            <method name="replaceRange" type="void" line="496">
                <params>
                    <param name="str" type="String"/>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                </params>
                <scope line="497"/>
                <declaration name="doc" type="Document" line="500"/>
                <scope line="501">
                    <scope line="502">
                        <scope line="503"/>
                        <scope line="507"/>
                    </scope>
                    <scope line="511"/>
                </scope>
            </method>
            <javadoc line="517">
                Returns the number of rows in the TextArea.                
                <return>
                    the number of rows >= 0                    
                </return>
            </javadoc>
            <method name="getRows" type="int" line="522"/>
            <javadoc line="526">
                Sets the number of rows for this TextArea.  Calls invalidate() after
                  setting the new value.                
                <param>
                    rows the number of rows >= 0                    
                </param>
                <exception>
                    IllegalArgumentException if rows is less than 0                    
                </exception>
                <see>
                    #getRows                    
                </see>
                <beaninfo>
                    description: the number of rows preferred for display                    
                </beaninfo>
            </javadoc>
            <method name="setRows" type="void" line="536">
                <params>
                    <param name="rows" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="537"/>
                <scope line="538"/>
                <scope line="541"/>
            </method>
            <javadoc line="547">
                Defines the meaning of the height of a row.  This defaults to
                  the height of the font.                
                <return>
                    the height >= 1                    
                </return>
            </javadoc>
            <method name="getRowHeight" type="int" line="553">
                <scope line="554">
                    <declaration name="metrics" type="FontMetrics" line="555"/>
                </scope>
            </method>
            <javadoc line="561">
                Returns the number of columns in the TextArea.                
                <return>
                    number of columns >= 0                    
                </return>
            </javadoc>
            <method name="getColumns" type="int" line="566"/>
            <javadoc line="570">
                Sets the number of columns for this TextArea.  Does an invalidate()
                  after setting the new value.                
                <param>
                    columns the number of columns >= 0                    
                </param>
                <exception>
                    IllegalArgumentException if columns is less than 0                    
                </exception>
                <see>
                    #getColumns                    
                </see>
                <beaninfo>
                    description: the number of columns preferred for display                    
                </beaninfo>
            </javadoc>
            <method name="setColumns" type="void" line="580">
                <params>
                    <param name="columns" type="int"/>
                </params>
                <declaration name="oldVal" type="int" line="581"/>
                <scope line="582"/>
                <scope line="585"/>
            </method>
            <javadoc line="591">
                Gets column width.
                  The meaning of what a column is can be considered a fairly weak
                  notion for some fonts.  This method is used to define the width
                  of a column.  By default this is defined to be the width of the
                  character &lt;em&gt;m&lt;/em&gt; for the font used.  This method can be
                  redefined to be some alternative amount.                
                <return>
                    the column width >= 1                    
                </return>
            </javadoc>
            <method name="getColumnWidth" type="int" line="601">
                <scope line="602">
                    <declaration name="metrics" type="FontMetrics" line="603"/>
                </scope>
            </method>
            <javadoc line="611">
                Returns the preferred size of the TextArea.  This is the
                  maximum of the size needed to display the text and the
                  size requested for the viewport.                
                <return>
                    the size                    
                </return>
            </javadoc>
            <method name="getPreferredSize" type="Dimension" line="618">
                <declaration name="d" type="Dimension" line="619"/>
                <declaration name="insets" type="Insets" line="621"/>
                <scope line="623"/>
                <scope line="627"/>
            </method>
            <javadoc line="634">
                Sets the current font.  This removes cached row height and column
                  width so the new font will be reflected, and calls revalidate().                
                <param>
                    f the font to use as the current font                    
                </param>
            </javadoc>
            <method name="setFont" type="void" line="640">
                <params>
                    <param name="f" type="Font"/>
                </params>
            </method>
            <javadoc line="647">
                Returns a string representation of this JTextArea. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JTextArea.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="656">
                <declaration name="wrapString" type="String" line="657"/>
                <declaration name="wordString" type="String" line="659"/>
            </method>
            <javadoc line="673">
                Returns true if a viewport should always force the width of this
                  Scrollable to match the width of the viewport.  This is implemented
                  to return true if the line wrapping policy is true, and false
                  if lines are not being wrapped.                
                <return>
                    true if a viewport should force the Scrollables width
                      to match its own.                    
                </return>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="682"/>
            <javadoc line="686">
                Returns the preferred size of the viewport if this component
                  is embedded in a JScrollPane.  This uses the desired column
                  and row settings if they have been set, otherwise the superclass
                  behavior is used.                
                <return>
                    The preferredSize of a JViewport whose view is this Scrollable.                    
                </return>
                <see>
                    JViewport#getPreferredSize                    
                </see>
            </javadoc>
            <method name="getPreferredScrollableViewportSize" type="Dimension" line="695">
                <declaration name="size" type="Dimension" line="696"/>
                <declaration name="insets" type="Insets" line="698"/>
            </method>
            <javadoc line="707">
                Components that display logical rows or columns should compute
                  the scroll increment that will completely expose one new row
                  or column, depending on the value of orientation.  This is implemented
                  to use the values returned by the &lt;code&gt;getRowHeight&lt;/code&gt; and
                  &lt;code&gt;getColumnWidth&lt;/code&gt; methods.
                  &lt;p&gt;
                  Scrolling containers, like JScrollPane, will use this method
                  each time the user requests a unit scroll.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation Either SwingConstants.VERTICAL or
                      SwingConstants.HORIZONTAL.                    
                </param>
                <param>
                    direction Less than zero to scroll up/left,
                      greater than zero for down/right.                    
                </param>
                <return>
                    The "unit" increment for scrolling in the specified direction                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid orientation                    
                </exception>
                <see>
                    JScrollBar#setUnitIncrement                    
                </see>
                <see>
                    #getRowHeight                    
                </see>
                <see>
                    #getColumnWidth                    
                </see>
            </javadoc>
            <method name="getScrollableUnitIncrement" type="int" line="728">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="739">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="743">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="745">
                    <declaration name="count" type="byte" line="746"/>
                    <scope line="748"/>
                </scope>
            </method>
            <javadoc line="759">
                Gets the AccessibleContext associated with this JTextArea.
                  For JTextAreas, the AccessibleContext takes the form of an
                  AccessibleJTextArea.
                  A new AccessibleJTextArea instance is created if necessary.                
                <return>
                    an AccessibleJTextArea that serves as the
                      AccessibleContext of this JTextArea                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="768">
                <scope line="769"/>
            </method>
            <class name="AccessibleJTextArea" line="775">
                <extends class="AccessibleJTextComponent"/>
                <javadoc line="775">
                    This class implements accessibility support for the
                      &lt;code&gt;JTextArea&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to text area user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="792">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleStateSet describing the states
                          of the object                        
                    </return>
                    <see>
                        AccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="799">
                    <declaration name="states" type="AccessibleStateSet" line="800"/>
                </method>
            </class>
            <declaration name="rows" type="int" line="808"/>
            <declaration name="columns" type="int" line="809"/>
            <declaration name="columnWidth" type="int" line="810"/>
            <declaration name="rowHeight" type="int" line="811"/>
            <declaration name="wrap" type="boolean" line="812"/>
            <declaration name="word" type="boolean" line="813"/>
        </class>
    </source>