<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.SortOrder"/>
        <import package="javax.swing.event"/>
        <import package="java.util"/>
        <class name="RowSorter" line="5">
            <type_params>
                <type_param name="M"/>
            </type_params>
            <javadoc line="5">
                &lt;code&gt;RowSorter&lt;/code&gt; provides the basis for sorting and filtering.
                  Beyond creating and installing a &lt;code&gt;RowSorter&lt;/code&gt;, you very rarely
                  need to interact with one directly.  Refer to{@link javax.swing.table.TableRowSorter TableRowSorter} for a concrete
                  implementation of &lt;code&gt;RowSorter&lt;/code&gt; for &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;code&gt;RowSorter&lt;/code&gt;&apos;s primary role is to provide a mapping between
                  two coordinate systems: that of the view (for example a
                  &lt;code&gt;JTable&lt;/code&gt;) and that of the underlying data source, typically a
                  model.
                  &lt;p&gt;
                  The view invokes the following methods on the &lt;code&gt;RowSorter&lt;/code&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;toggleSortOrder&lt;/code&gt; &amp;#151; The view invokes this when the
                  appropriate user gesture has occurred to trigger a sort.  For example,
                  the user clicked a column header in a table.
                  &lt;li&gt;One of the model change methods &amp;#151; The view invokes a model
                  change method when the underlying model
                  has changed.  There may be order dependencies in how the events are
                  delivered, so a &lt;code&gt;RowSorter&lt;/code&gt; should not update its mapping
                  until one of these methods is invoked.
                  &lt;/ul&gt;
                  Because the view makes extensive use of  the
                  &lt;code&gt;convertRowIndexToModel&lt;/code&gt;,
                  &lt;code&gt;convertRowIndexToView&lt;/code&gt; and &lt;code&gt;getViewRowCount&lt;/code&gt; methods,
                  these methods need to be fast.
                  &lt;p&gt;
                  &lt;code&gt;RowSorter&lt;/code&gt; provides notification of changes by way of
                  &lt;code&gt;RowSorterListener&lt;/code&gt;.  Two types of notification are sent:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;RowSorterEvent.Type.SORT_ORDER_CHANGED&lt;/code&gt; &amp;#151; notifies
                  listeners that the sort order has changed.  This is typically followed
                  by a notification that the sort has changed.
                  &lt;li&gt;&lt;code&gt;RowSorterEvent.Type.SORTED&lt;/code&gt; &amp;#151; notifies listeners that
                  the mapping maintained by the &lt;code&gt;RowSorter&lt;/code&gt; has changed in
                  some way.
                  &lt;/ul&gt;
                  &lt;code&gt;RowSorter&lt;/code&gt; implementations typically don&apos;t have a one-to-one
                  mapping with the underlying model, but they can.
                  For example, if a database does the sorting,
                  &lt;code&gt;toggleSortOrder&lt;/code&gt; might call through to the database
                  (on a background thread), and override the mapping methods to return the
                  argument that is passed in.
                  &lt;p&gt;
                  Concrete implementations of &lt;code&gt;RowSorter&lt;/code&gt;
                  need to reference a model such as &lt;code&gt;TableModel&lt;/code&gt; or
                  &lt;code&gt;ListModel&lt;/code&gt;.  The view classes, such as
                  &lt;code&gt;JTable&lt;/code&gt; and &lt;code&gt;JList&lt;/code&gt;, will also have a
                  reference to the model.  To avoid ordering dependencies,
                  &lt;code&gt;RowSorter&lt;/code&gt; implementations should not install a
                  listener on the model.  Instead the view class will call into the
                  &lt;code&gt;RowSorter&lt;/code&gt; when the model changes.  For
                  example, if a row is updated in a &lt;code&gt;TableModel&lt;/code&gt;
                  &lt;code&gt;JTable&lt;/code&gt; invokes &lt;code&gt;rowsUpdated&lt;/code&gt;.
                  When the model changes, the view may call into any of the following methods:
                  &lt;code&gt;modelStructureChanged&lt;/code&gt;, &lt;code&gt;allRowsChanged&lt;/code&gt;,
                  &lt;code&gt;rowsInserted&lt;/code&gt;, &lt;code&gt;rowsDeleted&lt;/code&gt; and
                  &lt;code&gt;rowsUpdated&lt;/code&gt;.                
                <param>
                    &lt;M&gt;
                      the type of the underlying model                    
                </param>
                <see>
                    javax.swing.table.TableRowSorter                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="69"/>
            <javadoc line="70">
                Creates a &lt;code&gt;RowSorter&lt;/code&gt;.                
            </javadoc>
            <method name="RowSorter" type="constructor" line="73"/>
            <method name="getModel" type="M" line="75"/>
            <javadoc line="75">
                Returns the underlying model.                
                <return>
                    the underlying model                    
                </return>
            </javadoc>
            <method name="toggleSortOrder" type="void" line="80"/>
            <javadoc line="80">
                Reverses the sort order of the specified column.  It is up to
                  subclasses to provide the exact behavior when invoked.  Typically
                  this will reverse the sort order from ascending to descending (or
                  descending to ascending) if the specified column is already the
                  primary sorted column; otherwise, makes the specified column
                  the primary sorted column, with an ascending sort order.  If
                  the specified column is not sortable, this method has no
                  effect.
                  &lt;p&gt;
                  If this results in changing the sort order and sorting, the
                  appropriate &lt;code&gt;RowSorterListener&lt;/code&gt; notification will be
                  sent.                
                <param>
                    column the column to toggle the sort ordering of, in
                      terms of the underlying model                    
                </param>
                <throws>
                    IndexOutOfBoundsException if column is outside the range of
                      the underlying model                    
                </throws>
            </javadoc>
            <method name="convertRowIndexToModel" type="int" line="99"/>
            <javadoc line="99">
                Returns the location of &lt;code&gt;index&lt;/code&gt; in terms of the
                  underlying model.  That is, for the row &lt;code&gt;index&lt;/code&gt; in
                  the coordinates of the view this returns the row index in terms
                  of the underlying model.                
                <param>
                    index the row index in terms of the underlying view                    
                </param>
                <return>
                    row index in terms of the view                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is outside the
                      range of the view                    
                </throws>
            </javadoc>
            <method name="convertRowIndexToView" type="int" line="110"/>
            <javadoc line="110">
                Returns the location of &lt;code&gt;index&lt;/code&gt; in terms of the
                  view.  That is, for the row &lt;code&gt;index&lt;/code&gt; in the
                  coordinates of the underlying model this returns the row index
                  in terms of the view.                
                <param>
                    index the row index in terms of the underlying model                    
                </param>
                <return>
                    row index in terms of the view, or -1 if index has been
                      filtered out of the view                    
                </return>
                <throws>
                    IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt; is outside
                      the range of the model                    
                </throws>
            </javadoc>
            <method name="setSortKeys" type="void" line="122"/>
            <javadoc line="122">
                Sets the current sort keys.                
                <param>
                    keys the new &lt;code&gt;SortKeys&lt;/code&gt;; &lt;code&gt;null&lt;/code&gt;
                      is a shorthand for specifying an empty list,
                      indicating that the view should be unsorted                    
                </param>
            </javadoc>
            <method name="getSortKeys" type="List&lt;? extends SortKey&gt;" line="129"/>
            <javadoc line="129">
                Returns the current sort keys.  This must return a {@codenon-null List} and may return an unmodifiable {@code List}. If
                  you need to change the sort keys, make a copy of the returned{@code List}, mutate the copy and invoke {@code setSortKeys}with the new list.                
                <return>
                    the current sort order                    
                </return>
            </javadoc>
            <method name="getViewRowCount" type="int" line="135"/>
            <javadoc line="135">
                Returns the number of rows in the view.  If the contents have
                  been filtered this might differ from the row count of the
                  underlying model.                
                <return>
                    number of rows in the view                    
                </return>
                <see>
                    #getModelRowCount                    
                </see>
            </javadoc>
            <method name="getModelRowCount" type="int" line="143"/>
            <javadoc line="143">
                Returns the number of rows in the underlying model.                
                <return>
                    number of rows in the underlying model                    
                </return>
                <see>
                    #getViewRowCount                    
                </see>
            </javadoc>
            <method name="modelStructureChanged" type="void" line="149"/>
            <javadoc line="149">
                Invoked when the underlying model structure has completely
                  changed.  For example, if the number of columns in a
                  &lt;code&gt;TableModel&lt;/code&gt; changed, this method would be invoked.
                  &lt;p&gt;
                  You normally do not call this method.  This method is public
                  to allow view classes to call it.                
            </javadoc>
            <method name="allRowsChanged" type="void" line="158"/>
            <javadoc line="158">
                Invoked when the contents of the underlying model have
                  completely changed. The structure of the table is the same,
                  only the contents have changed. This is typically sent when it
                  is too expensive to characterize the change in terms of the
                  other methods.
                  &lt;p&gt;
                  You normally do not call this method.  This method is public
                  to allow view classes to call it.                
            </javadoc>
            <method name="rowsInserted" type="void" line="169"/>
            <javadoc line="169">
                Invoked when rows have been inserted into the underlying model
                  in the specified range (inclusive).
                  &lt;p&gt;
                  The arguments give the indices of the effected range.
                  The first argument is in terms of the model before the change, and
                  must be less than or equal to the size of the model before the change.
                  The second argument is in terms of the model after the change and must
                  be less than the size of the model after the change. For example,
                  if you have a 5-row model and add 3 items to the end of the model
                  the indices are 5, 7.
                  &lt;p&gt;
                  You normally do not call this method.  This method is public
                  to allow view classes to call it.                
                <param>
                    firstRow the first row                    
                </param>
                <param>
                    endRow the last row                    
                </param>
                <throws>
                    IndexOutOfBoundsException if either argument is invalid, or
                      &lt;code&gt;firstRow&lt;/code&gt; &amp;gt; &lt;code&gt;endRow&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="rowsDeleted" type="void" line="189"/>
            <javadoc line="189">
                Invoked when rows have been deleted from the underlying model
                  in the specified range (inclusive).
                  &lt;p&gt;
                  The arguments give the indices of the effected range and
                  are in terms of the model &lt;b&gt;before&lt;/b&gt; the change.
                  For example, if you have a 5-row model and delete 3 items from the end
                  of the model the indices are 2, 4.
                  &lt;p&gt;
                  You normally do not call this method.  This method is public
                  to allow view classes to call it.                
                <param>
                    firstRow the first row                    
                </param>
                <param>
                    endRow the last row                    
                </param>
                <throws>
                    IndexOutOfBoundsException if either argument is outside
                      the range of the model before the change, or
                      &lt;code&gt;firstRow&lt;/code&gt; &amp;gt; &lt;code&gt;endRow&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="rowsUpdated" type="void" line="207"/>
            <javadoc line="207">
                Invoked when rows have been changed in the underlying model
                  between the specified range (inclusive).
                  &lt;p&gt;
                  You normally do not call this method.  This method is public
                  to allow view classes to call it.                
                <param>
                    firstRow the first row, in terms of the underlying model                    
                </param>
                <param>
                    endRow the last row, in terms of the underlying model                    
                </param>
                <throws>
                    IndexOutOfBoundsException if either argument is outside
                      the range of the underlying model, or
                      &lt;code&gt;firstRow&lt;/code&gt; &amp;gt; &lt;code&gt;endRow&lt;/code&gt;                    
                </throws>
            </javadoc>
            <method name="rowsUpdated" type="void" line="220"/>
            <javadoc line="220">
                Invoked when the column in the rows have been updated in
                  the underlying model between the specified range.
                  &lt;p&gt;
                  You normally do not call this method.  This method is public
                  to allow view classes to call it.                
                <param>
                    firstRow the first row, in terms of the underlying model                    
                </param>
                <param>
                    endRow the last row, in terms of the underlying model                    
                </param>
                <param>
                    column the column that has changed, in terms of the underlying
                      model                    
                </param>
                <throws>
                    IndexOutOfBoundsException if either argument is outside
                      the range of the underlying model after the change,
                      &lt;code&gt;firstRow&lt;/code&gt; &amp;gt; &lt;code&gt;endRow&lt;/code&gt;, or
                      &lt;code&gt;column&lt;/code&gt; is outside the range of the underlying
                      model                    
                </throws>
            </javadoc>
            <javadoc line="237">
                Adds a &lt;code&gt;RowSorterListener&lt;/code&gt; to receive notification
                  about this &lt;code&gt;RowSorter&lt;/code&gt;.  If the same
                  listener is added more than once it will receive multiple
                  notifications.  If &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; nothing
                  is done.                
                <param>
                    l the &lt;code&gt;RowSorterListener&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="addRowSorterListener" type="void" line="245">
                <params>
                    <param name="l" type="RowSorterListener"/>
                </params>
            </method>
            <javadoc line="248">
                Removes a &lt;code&gt;RowSorterListener&lt;/code&gt;.  If
                  &lt;code&gt;l&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; nothing is done.                
                <param>
                    l the &lt;code&gt;RowSorterListener&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="removeRowSorterListener" type="void" line="253">
                <params>
                    <param name="l" type="RowSorterListener"/>
                </params>
            </method>
            <javadoc line="256">
                Notifies listener that the sort order has changed.                
            </javadoc>
            <method name="fireSortOrderChanged" type="void" line="259"/>
            <javadoc line="262">
                Notifies listener that the mapping has changed.                
                <param>
                    lastRowIndexToModel the mapping from model indices to
                      view indices prior to the sort, may be &lt;code&gt;null&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="fireRowSorterChanged" type="void" line="267">
                <params>
                    <param name="lastRowIndexToModel" type="int[]"/>
                </params>
            </method>
            <method name="fireRowSorterChanged" type="void" line="270">
                <params>
                    <param name="event" type="RowSorterEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="271"/>
                <scope line="272">
                    <scope line="273"/>
                </scope>
            </method>
            <class name="SortKey" line="278">
                <javadoc line="278">
                    SortKey describes the sort order for a particular column.  The
                      column index is in terms of the underlying model, which may differ
                      from that of the view.                    
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="column" type="int" line="285"/>
                <declaration name="sortOrder" type="SortOrder" line="286"/>
                <javadoc line="287">
                    Creates a &lt;code&gt;SortKey&lt;/code&gt; for the specified column with
                      the specified sort order.                    
                    <param>
                        column index of the column, in terms of the model                        
                    </param>
                    <param>
                        sortOrder the sorter order                        
                    </param>
                    <throws>
                        IllegalArgumentException if &lt;code&gt;sortOrder&lt;/code&gt; is
                          &lt;code&gt;null&lt;/code&gt;                        
                    </throws>
                </javadoc>
                <method name="SortKey" type="constructor" line="295">
                    <params>
                        <param name="column" type="int"/>
                        <param name="sortOrder" type="SortOrder"/>
                    </params>
                    <scope line="296"/>
                </method>
                <javadoc line="302">
                    Returns the index of the column.                    
                    <return>
                        index of column                        
                    </return>
                </javadoc>
                <method name="getColumn" type="int" line="306"/>
                <javadoc line="309">
                    Returns the sort order of the column.                    
                    <return>
                        the sort order of the column                        
                    </return>
                </javadoc>
                <method name="getSortOrder" type="SortOrder" line="313"/>
                <javadoc line="316">
                    Returns the hash code for this &lt;code&gt;SortKey&lt;/code&gt;.                    
                    <return>
                        hash code                        
                    </return>
                </javadoc>
                <method name="hashCode" type="int" line="320">
                    <declaration name="result" type="int" line="321"/>
                </method>
                <javadoc line="326">
                    Returns true if this object equals the specified object.
                      If the specified object is a &lt;code&gt;SortKey&lt;/code&gt; and
                      references the same column and sort order, the two objects
                      are equal.                    
                    <param>
                        o the object to compare to                        
                    </param>
                    <return>
                        true if &lt;code&gt;o&lt;/code&gt; is equal to this &lt;code&gt;SortKey&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="334">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="335"/>
                    <scope line="338"/>
                </method>
            </class>
        </class>
    </source>