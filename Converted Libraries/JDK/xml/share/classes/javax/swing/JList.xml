<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Locale"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.Collections"/>
        <import package="java.util.List"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.Transient"/>
        <import package="javax.swing.event"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.swing.text.Position"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.io.Serializable"/>
        <import package="sun.swing.SwingUtilities2"/>
        <import package="sun.swing.SwingUtilities2.Section"/>
        <import package="sun.swing.SwingUtilities2.Section"/>
        <class name="JList" line="56">
            <type_params>
                <type_param name="E"/>
            </type_params>
            <extends class="JComponent"/>
            <comment line="564">
                -----private-----
                 This method is called by setPrototypeCellValue and setCellRenderer
                 to update the fixedCellWidth and fixedCellHeight properties from the
                 current value of prototypeCellValue (if it&apos;s non null).
                 &lt;p&gt;
                 This method sets fixedCellWidth and fixedCellHeight but does &lt;b&gt;not&lt;b&gt;
                 generate PropertyChangeEvents for them.
                
                 @see #setPrototypeCellValue
                 @see #setCellRenderer                
            </comment>
            <comment line="1572">
                --- ListUI Delegations ---                
            </comment>
            <comment line="1638">
                --- ListModel Support ---                
            </comment>
            <comment line="1730">
                --- ListSelectionModel delegations and extensions ---                
            </comment>
            <comment line="1805">
                A ListSelectionListener that forwards ListSelectionEvents from
                 the selectionModel to the JList ListSelectionListeners.  The
                 forwarded events only differ from the originals in that their
                 source is the JList instead of the selectionModel itself.                
            </comment>
            <comment line="2807">
                See {@code readObject} and {@code writeObject} in {@code JComponent}
                 for more information about serialization in Swing.                
            </comment>
            <comment line="2851">
                --- Accessibility Support ---                
            </comment>
            <comment line="3735">
                inner class AccessibleJList                
            </comment>
            <implements interface="Scrollable"/>
            <implements interface="Accessible"/>
            <javadoc line="56">
                A component that displays a list of objects and allows the user to select
                  one or more items. A separate model, {@code ListModel}, maintains the
                  contents of the list.
                  &lt;p&gt;
                  It&apos;s easy to display an array or Vector of objects, using the {@code JList}constructor that automatically builds a read-only {@code ListModel} instance
                  for you:
                  &lt;pre&gt;{@code// Create a JList that displays strings from an array}String[] data = 
                  &quot;one&quot;, &quot;two&quot;, &quot;three&quot;, &quot;four&quot;};
                  JList&lt;String&gt; myList = new JList&lt;String&gt;(data);
                  // Create a JList that displays the superclasses of JList.class, by
                  // creating it with a Vector populated with this data
                  Vector&lt;Class&lt;?&gt;&gt; superClasses = new Vector&lt;Class&lt;?&gt;&gt;();
                  Class&lt;JList&gt; rootClass = javax.swing.JList.class;
                  for(Class&lt;?&gt; cls = rootClass; cls != null; cls = cls.getSuperclass()) {
                  superClasses.addElement(cls);
                  }
                  JList&lt;Class&lt;?&gt;&gt; myList = new JList&lt;Class&lt;?&gt;&gt;(superClasses);
                  // The automatically created model is stored in JList&apos;s &quot;model&quot;
                  // property, which you can retrieve
                  ListModel&lt;Class&lt;?&gt;&gt; model = myList.getModel();
                  for(int i = 0; i &lt; model.getSize(); i++) {
                  System.out.println(model.getElementAt(i));
                  }
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  A {@code ListModel} can be supplied directly to a {@code JList} by way of a
                  constructor or the {@code setModel} method. The contents need not be static -
                  the number of items, and the values of items can change over time. A correct{@code ListModel} implementation notifies the set of{@code javax.swing.event.ListDataListener}s that have been added to it, each
                  time a change occurs. These changes are characterized by a{@code javax.swing.event.ListDataEvent}, which identifies the range of list
                  indices that have been modified, added, or removed. {@code JList}&apos;s{@code ListUI} is responsible for keeping the visual representation up to
                  date with changes, by listening to the model.
                  &lt;p&gt;
                  Simple, dynamic-content, {@code JList} applications can use the{@code DefaultListModel} class to maintain list elements. This class
                  implements the {@code ListModel} interface and also provides a
                  &lt;code&gt;java.util.Vector&lt;/code&gt;-like API. Applications that need a more
                  custom &lt;code&gt;ListModel&lt;/code&gt; implementation may instead wish to subclass{@code AbstractListModel}, which provides basic support for managing and
                  notifying listeners. For example, a read-only implementation of{@code AbstractListModel}:
                  &lt;pre&gt;{@code// This list model has about 2^16 elements.  Enjoy scrolling.}ListModel&lt;String&gt; bigData = new AbstractListModel&lt;String&gt;() 
                  public int getSize() { return Short.MAX_VALUE; }
                  public String getElementAt(int index) { return &quot;Index &quot; + index; }
                  };
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The selection state of a {@code JList} is managed by another separate
                  model, an instance of {@code ListSelectionModel}. {@code JList} is
                  initialized with a selection model on construction, and also contains
                  methods to query or set this selection model. Additionally, {@code JList}provides convenient methods for easily managing the selection. These methods,
                  such as {@code setSelectedIndex} and {@code getSelectedValue}, are cover
                  methods that take care of the details of interacting with the selection
                  model. By default, {@code JList}&apos;s selection model is configured to allow any
                  combination of items to be selected at a time; selection mode{@code MULTIPLE_INTERVAL_SELECTION}. The selection mode can be changed
                  on the selection model directly, or via {@code JList}&apos;s cover method.
                  Responsibility for updating the selection model in response to user gestures
                  lies with the list&apos;s {@code ListUI}.
                  &lt;p&gt;
                  A correct {@code ListSelectionModel} implementation notifies the set of{@code javax.swing.event.ListSelectionListener}s that have been added to it
                  each time a change to the selection occurs. These changes are characterized
                  by a {@code javax.swing.event.ListSelectionEvent}, which identifies the range
                  of the selection change.
                  &lt;p&gt;
                  The preferred way to listen for changes in list selection is to add{@code ListSelectionListener}s directly to the {@code JList}. {@code JList}then takes care of listening to the the selection model and notifying your
                  listeners of change.
                  &lt;p&gt;
                  Responsibility for listening to selection changes in order to keep the list&apos;s
                  visual representation up to date lies with the list&apos;s {@code ListUI}.
                  &lt;p&gt;
                  &lt;a name=&quot;renderer&quot;&gt;
                  Painting of cells in a {@code JList} is handled by a delegate called a
                  cell renderer, installed on the list as the {@code cellRenderer} property.
                  The renderer provides a {@code java.awt.Component} that is used
                  like a &quot;rubber stamp&quot; to paint the cells. Each time a cell needs to be
                  painted, the list&apos;s {@code ListUI} asks the cell renderer for the component,
                  moves it into place, and has it paint the contents of the cell by way of its{@code paint} method. A default cell renderer, which uses a {@code JLabel}component to render, is installed by the lists&apos;s {@code ListUI}. You can
                  substitute your own renderer using code like this:
                  &lt;pre&gt;{@code// Display an icon and a string for each object in the list.}class MyCellRenderer extends JLabel implements ListCellRenderer&lt;Object&gt; 
                  final static ImageIcon longIcon = new ImageIcon(&quot;long.gif&quot;);
                  final static ImageIcon shortIcon = new ImageIcon(&quot;short.gif&quot;);
                  // This is the only method defined by ListCellRenderer.
                  // We just reconfigure the JLabel each time we&apos;re called.
                  public Component getListCellRendererComponent(
                  JList&lt;?&gt; list,           // the list
                  Object value,            // value to display
                  int index,               // cell index
                  boolean isSelected,      // is the cell selected
                  boolean cellHasFocus)    // does the cell have focus
                  {
                  String s = value.toString();
                  setText(s);
                  setIcon((s.length() &gt; 10) ? longIcon : shortIcon);
                  if (isSelected) {
                  setBackground(list.getSelectionBackground());
                  setForeground(list.getSelectionForeground());
                  } else {
                  setBackground(list.getBackground());
                  setForeground(list.getForeground());
                  }
                  setEnabled(list.isEnabled());
                  setFont(list.getFont());
                  setOpaque(true);
                  return this;
                  }
                  }
                  myList.setCellRenderer(new MyCellRenderer());
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Another job for the cell renderer is in helping to determine sizing
                  information for the list. By default, the list&apos;s {@code ListUI} determines
                  the size of cells by asking the cell renderer for its preferred
                  size for each list item. This can be expensive for large lists of items.
                  To avoid these calculations, you can set a {@code fixedCellWidth} and{@code fixedCellHeight} on the list, or have these values calculated
                  automatically based on a single prototype value:
                  &lt;a name=&quot;prototype_example&quot;&gt;
                  &lt;pre&gt;{@codeJList&lt;String&gt; bigDataList = new JList&lt;String&gt;(bigData);
                  // We don&apos;t want the JList implementation to compute the width
                  // or height of all of the list cells, so we give it a string
                  // that&apos;s as big as we&apos;ll need for any cell.  It uses this to
                  // compute values for the fixedCellWidth and fixedCellHeight
                  // properties.
                  bigDataList.setPrototypeCellValue(&quot;Index 1234567890&quot;);}&lt;/pre&gt;
                  &lt;p&gt;{@code JList} doesn&apos;t implement scrolling directly. To create a list that
                  scrolls, make it the viewport view of a {@code JScrollPane}. For example:
                  &lt;pre&gt;
                  JScrollPane scrollPane = new JScrollPane(myList);
                  // Or in two steps:
                  JScrollPane scrollPane = new JScrollPane();
                  scrollPane.getViewport().setView(myList);
                  &lt;/pre&gt;
                  &lt;p&gt;{@code JList} doesn&apos;t provide any special handling of double or triple
                  (or N) mouse clicks, but it&apos;s easy to add a {@code MouseListener} if you
                  wish to take action on these events. Use the {@code locationToIndex}method to determine what cell was clicked. For example:
                  &lt;pre&gt;
                  MouseListener mouseListener = new MouseAdapter() {
                  public void mouseClicked(MouseEvent e) {
                  if (e.getClickCount() == 2) {
                  int index = list.locationToIndex(e.getPoint());
                  System.out.println(&quot;Double clicked on Item &quot; + index);
                  }
                  }
                  };
                  list.addMouseListener(mouseListener);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.
                  &lt;p&gt;
                  See &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/list.html&quot;&gt;How to Use Lists&lt;/a&gt;
                  in &lt;a href=&quot;http://java.sun.com/Series/Tutorial/index.html&quot;&gt;&lt;em&gt;The Java Tutorial&lt;/em&gt;&lt;/a&gt;
                  for further documentation.
                  Also see the article &lt;a href=&quot;http://java.sun.com/products/jfc/tsc/tech_topics/jlist_1/jlist.html&quot;&gt;Advanced JList Programming&lt;/a&gt;
                  in &lt;a href=&quot;http://java.sun.com/products/jfc/tsc&quot;&gt;&lt;em&gt;The Swing Connection&lt;/em&gt;&lt;/a&gt;.
                  &lt;p&gt;                
                <see>
                    ListModel                    
                </see>
                <see>
                    AbstractListModel                    
                </see>
                <see>
                    DefaultListModel                    
                </see>
                <see>
                    ListSelectionModel                    
                </see>
                <see>
                    DefaultListSelectionModel                    
                </see>
                <see>
                    ListCellRenderer                    
                </see>
                <see>
                    DefaultListCellRenderer                    
                </see>
                <param>
                    <E>
                       the type of the elements of this list                    
                </param>
                <beaninfo>
                    attribute: isContainer false
                      description: A component which allows for the selection of one or more objects from a list.                    
                </beaninfo>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="284"/>
            <javadoc line="284">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="VERTICAL" type="int" line="290"/>
            <javadoc line="290">
                Indicates a vertical layout of cells, in a single column;
                  the default layout.                
                <see>
                    #setLayoutOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="VERTICAL_WRAP" type="int" line="298"/>
            <javadoc line="298">
                Indicates a &quot;newspaper style&quot; layout with cells flowing vertically
                  then horizontally.                
                <see>
                    #setLayoutOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="HORIZONTAL_WRAP" type="int" line="306"/>
            <javadoc line="306">
                Indicates a &quot;newspaper style&quot; layout with cells flowing horizontally
                  then vertically.                
                <see>
                    #setLayoutOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="fixedCellWidth" type="int" line="314"/>
            <declaration name="fixedCellHeight" type="int" line="315"/>
            <declaration name="horizontalScrollIncrement" type="int" line="316"/>
            <declaration name="prototypeCellValue" type="E" line="317"/>
            <declaration name="visibleRowCount" type="int" line="318"/>
            <declaration name="selectionForeground" type="Color" line="319"/>
            <declaration name="selectionBackground" type="Color" line="320"/>
            <declaration name="dragEnabled" type="boolean" line="321"/>
            <declaration name="selectionModel" type="ListSelectionModel" line="323"/>
            <declaration name="dataModel" type="ListModel&lt;E&gt;" line="324"/>
            <declaration name="cellRenderer" type="ListCellRenderer&lt;? super E&gt;" line="325"/>
            <declaration name="selectionListener" type="ListSelectionListener" line="326"/>
            <declaration name="layoutOrientation" type="int" line="328"/>
            <javadoc line="328">
                How to lay out the cells; defaults to &lt;code&gt;VERTICAL&lt;/code&gt;.                
            </javadoc>
            <declaration name="dropMode" type="DropMode" line="333"/>
            <javadoc line="333">
                The drop mode for this component.                
            </javadoc>
            <declaration name="dropLocation" type="DropLocation" line="338"/>
            <javadoc line="338">
                The drop location.                
            </javadoc>
            <class name="DropLocation" line="343">
                <extends class="TransferHandler.DropLocation"/>
                <comment line="3018">
                    AccessibleContext methods                    
                </comment>
                <comment line="3102">
                    AccessibleSelection methods                    
                </comment>
                <comment line="3734">
                    inner class AccessibleJListChild                    
                </comment>
                <javadoc line="343">
                    A subclass of &lt;code&gt;TransferHandler.DropLocation&lt;/code&gt; representing
                      a drop location for a &lt;code&gt;JList&lt;/code&gt;.                    
                    <see>
                        #getDropLocation                        
                    </see>
                    <since>
                        1.6                        
                    </since>
                </javadoc>
                <declaration name="index" type="int" line="351"/>
                <declaration name="isInsert" type="boolean" line="352"/>
                <method name="DropLocation" type="constructor" line="354">
                    <params>
                        <param name="p" type="Point"/>
                        <param name="index" type="int"/>
                        <param name="isInsert" type="boolean"/>
                    </params>
                </method>
                <javadoc line="360">
                    Returns the index where dropped data should be placed in the
                      list. Interpretation of the value depends on the drop mode set on
                      the associated component. If the drop mode is either
                      &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt; or &lt;code&gt;DropMode.ON&lt;/code&gt;,
                      the return value is an index of a row in the list. If the drop mode is
                      &lt;code&gt;DropMode.INSERT&lt;/code&gt;, the return value refers to the index
                      where the data should be inserted. If the drop mode is
                      &lt;code&gt;DropMode.ON_OR_INSERT&lt;/code&gt;, the value of
                      &lt;code&gt;isInsert()&lt;/code&gt; indicates whether the index is an index
                      of a row, or an insert index.
                      &lt;p&gt;
                      &lt;code&gt;-1&lt;/code&gt; indicates that the drop occurred over empty space,
                      and no index could be calculated.                    
                    <return>
                        the drop index                        
                    </return>
                </javadoc>
                <method name="getIndex" type="int" line="377"/>
                <javadoc line="381">
                    Returns whether or not this location represents an insert
                      location.                    
                    <return>
                        whether or not this is an insert location                        
                    </return>
                </javadoc>
                <method name="isInsert" type="boolean" line="387"/>
                <javadoc line="391">
                    Returns a string representation of this drop location.
                      This method is intended to be used for debugging purposes,
                      and the content and format of the returned string may vary
                      between implementations.                    
                    <return>
                        a string representation of this drop location                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="399"/>
            </class>
            <javadoc line="407">
                Constructs a {@code JList} that displays elements from the specified,{@code non-null}, model. All {@code JList} constructors delegate to
                  this one.
                  &lt;p&gt;
                  This constructor registers the list with the {@code ToolTipManager},
                  allowing for tooltips to be provided by the cell renderers.                
                <param>
                    dataModel the model for the list                    
                </param>
                <exception>
                    IllegalArgumentException if the model is {@code null}                    
                </exception>
            </javadoc>
            <method name="JList" type="constructor" line="419">
                <params>
                    <param name="dataModel" type="ListModel<E>"/>
                </params>
                <comment line="424">
                    Register with the ToolTipManager so that tooltips from the                    
                </comment>
                <comment line="425">
                    renderer show through.                    
                </comment>
                <scope line="420"/>
                <declaration name="toolTipManager" type="ToolTipManager" line="426"/>
            </method>
            <javadoc line="439">
                Constructs a &lt;code&gt;JList&lt;/code&gt; that displays the elements in
                  the specified array. This constructor creates a read-only model
                  for the given array, and then delegates to the constructor that
                  takes a {@code ListModel}.
                  &lt;p&gt;
                  Attempts to pass a {@code null} value to this method results in
                  undefined behavior and, most likely, exceptions. The created model
                  references the given array directly. Attempts to modify the array
                  after constructing the list results in undefined behavior.                
                <param>
                    listData  the array of Objects to be loaded into the data model,{@code non-null}                    
                </param>
            </javadoc>
            <method name="JList" type="constructor" line="454">
                <params>
                    <param name="listData" type="E[]"/>
                </params>
                <anonymous_class line="456">
                    <method name="getSize" type="int" line="457"/>
                    <method name="getElementAt" type="E" line="458">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="464">
                Constructs a &lt;code&gt;JList&lt;/code&gt; that displays the elements in
                  the specified &lt;code&gt;Vector&lt;/code&gt;. This constructor creates a read-only
                  model for the given {@code Vector}, and then delegates to the constructor
                  that takes a {@code ListModel}.
                  &lt;p&gt;
                  Attempts to pass a {@code null} value to this method results in
                  undefined behavior and, most likely, exceptions. The created model
                  references the given {@code Vector} directly. Attempts to modify the{@code Vector} after constructing the list results in undefined behavior.                
                <param>
                    listData  the <code>Vector</code> to be loaded into the
                      data model, {@code non-null}                    
                </param>
            </javadoc>
            <method name="JList" type="constructor" line="478">
                <params>
                    <param name="listData" type="Vector<? extends E>"/>
                </params>
                <anonymous_class line="480">
                    <method name="getSize" type="int" line="481"/>
                    <method name="getElementAt" type="E" line="482">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="488">
                Constructs a &lt;code&gt;JList&lt;/code&gt; with an empty, read-only, model.                
            </javadoc>
            <method name="JList" type="constructor" line="491">
                <anonymous_class line="493">
                    <method name="getSize" type="int" line="494"/>
                    <method name="getElementAt" type="E" line="495">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="501">
                Returns the {@code ListUI}, the look and feel object that
                  renders this component.                
                <return>
                    the <code>ListUI</code> object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="ListUI" line="507"/>
            <javadoc line="512">
                Sets the {@code ListUI}, the look and feel object that
                  renders this component.                
                <param>
                    ui  the <code>ListUI</code> object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="524">
                <params>
                    <param name="ui" type="ListUI"/>
                </params>
            </method>
            <javadoc line="529">
                Resets the {@code ListUI} property by setting it to the value provided
                  by the current look and feel. If the current cell renderer was installed
                  by the developer (rather than the look and feel itself), this also causes
                  the cell renderer and its children to be updated, by calling{@code SwingUtilities.updateComponentTreeUI} on it.                
                <see>
                    UIManager#getUI                    
                </see>
                <see>
                    SwingUtilities#updateComponentTreeUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="539">
                <declaration name="renderer" type="ListCellRenderer&lt;? super E&gt;" line="542"/>
                <scope line="543"/>
            </method>
            <javadoc line="549">
                Returns {@code &quot;ListUI&quot;}, the &lt;code&gt;UIDefaults&lt;/code&gt; key used to look
                  up the name of the {@code javax.swing.plaf.ListUI} class that defines
                  the look and feel for this component.                
                <return>
                    the string "ListUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="558"/>
            <method name="updateFixedCellSize" type="void" line="575">
                <comment line="582">
                    The ListUI implementation will add Component c to its private
                     CellRendererPane however we can&apos;t assume that&apos;s already
                     been done here.  So we temporarily set the one &quot;inherited&quot;
                     property that may affect the renderer components preferred size:
                     its font.                    
                </comment>
                <declaration name="cr" type="ListCellRenderer&lt;? super E&gt;" line="576"/>
                <declaration name="value" type="E" line="577"/>
                <scope line="579">
                    <declaration name="c" type="Component" line="580"/>
                    <declaration name="f" type="Font" line="588"/>
                    <declaration name="d" type="Dimension" line="591"/>
                </scope>
            </method>
            <javadoc line="600">
                Returns the &quot;prototypical&quot; cell value -- a value used to calculate a
                  fixed width and height for cells. This can be {@code null} if there
                  is no such value.                
                <return>
                    the value of the {@code prototypeCellValue} property                    
                </return>
                <see>
                    #setPrototypeCellValue                    
                </see>
            </javadoc>
            <method name="getPrototypeCellValue" type="E" line="608"/>
            <javadoc line="612">
                Sets the {@code prototypeCellValue} property, and then (if the new value
                  is {@code non-null}), computes the {@code fixedCellWidth} and{@code fixedCellHeight} properties by requesting the cell renderer
                  component for the given value (and index 0) from the cell renderer, and
                  using that component&apos;s preferred size.
                  &lt;p&gt;
                  This method is useful when the list is too long to allow the{@code ListUI} to compute the width/height of each cell, and there is a
                  single cell value that is known to occupy as much space as any of the
                  others, a so-called prototype.
                  &lt;p&gt;
                  While all three of the {@code prototypeCellValue},{@code fixedCellHeight}, and {@code fixedCellWidth} properties may be
                  modified by this method, {@code PropertyChangeEvent} notifications are
                  only sent when the {@code prototypeCellValue} property changes.
                  &lt;p&gt;
                  To see an example which sets this property, see the
                  &lt;a href=&quot;#prototype_example&quot;&gt;class description&lt;/a&gt; above.
                  &lt;p&gt;
                  The default value of this property is &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    prototypeCellValue  the value on which to base
                      <code>fixedCellWidth</code> and
                      <code>fixedCellHeight</code>                    
                </param>
                <see>
                    #getPrototypeCellValue                    
                </see>
                <see>
                    #setFixedCellWidth                    
                </see>
                <see>
                    #setFixedCellHeight                    
                </see>
                <see>
                    JComponent#addPropertyChangeListener                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The cell prototype value, used to compute cell width and height.                    
                </beaninfo>
            </javadoc>
            <method name="setPrototypeCellValue" type="void" line="648">
                <params>
                    <param name="prototypeCellValue" type="E"/>
                </params>
                <comment line="652">
                    If the prototypeCellValue has changed and is non-null,
                     then recompute fixedCellWidth and fixedCellHeight.                    
                </comment>
                <declaration name="oldValue" type="E" line="649"/>
                <scope line="656"/>
            </method>
            <javadoc line="664">
                Returns the value of the {@code fixedCellWidth} property.                
                <return>
                    the fixed cell width                    
                </return>
                <see>
                    #setFixedCellWidth                    
                </see>
            </javadoc>
            <method name="getFixedCellWidth" type="int" line="670"/>
            <javadoc line="674">
                Sets a fixed value to be used for the width of every cell in the list.
                  If {@code width} is -1, cell widths are computed in the {@code ListUI}by applying &lt;code&gt;getPreferredSize&lt;/code&gt; to the cell renderer component
                  for each list element.
                  &lt;p&gt;
                  The default value of this property is {@code -1}.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    width the width to be used for all cells in the list                    
                </param>
                <see>
                    #setPrototypeCellValue                    
                </see>
                <see>
                    #setFixedCellWidth                    
                </see>
                <see>
                    JComponent#addPropertyChangeListener                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Defines a fixed cell width when greater than zero.                    
                </beaninfo>
            </javadoc>
            <method name="setFixedCellWidth" type="void" line="693">
                <params>
                    <param name="width" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="694"/>
            </method>
            <javadoc line="700">
                Returns the value of the {@code fixedCellHeight} property.                
                <return>
                    the fixed cell height                    
                </return>
                <see>
                    #setFixedCellHeight                    
                </see>
            </javadoc>
            <method name="getFixedCellHeight" type="int" line="706"/>
            <javadoc line="710">
                Sets a fixed value to be used for the height of every cell in the list.
                  If {@code height} is -1, cell heights are computed in the {@code ListUI}by applying &lt;code&gt;getPreferredSize&lt;/code&gt; to the cell renderer component
                  for each list element.
                  &lt;p&gt;
                  The default value of this property is {@code -1}.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    height the height to be used for for all cells in the list                    
                </param>
                <see>
                    #setPrototypeCellValue                    
                </see>
                <see>
                    #setFixedCellWidth                    
                </see>
                <see>
                    JComponent#addPropertyChangeListener                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Defines a fixed cell height when greater than zero.                    
                </beaninfo>
            </javadoc>
            <method name="setFixedCellHeight" type="void" line="729">
                <params>
                    <param name="height" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="730"/>
            </method>
            <javadoc line="736">
                Returns the object responsible for painting list items.                
                <return>
                    the value of the {@code cellRenderer} property                    
                </return>
                <see>
                    #setCellRenderer                    
                </see>
            </javadoc>
            <method name="getCellRenderer" type="ListCellRenderer<? super E>" line="743"/>
            <javadoc line="747">
                Sets the delegate that is used to paint each cell in the list.
                  The job of a cell renderer is discussed in detail in the
                  &lt;a href=&quot;#renderer&quot;&gt;class level documentation&lt;/a&gt;.
                  &lt;p&gt;
                  If the {@code prototypeCellValue} property is {@code non-null},
                  setting the cell renderer also causes the {@code fixedCellWidth} and{@code fixedCellHeight} properties to be re-calculated. Only one
                  &lt;code&gt;PropertyChangeEvent&lt;/code&gt; is generated however -
                  for the &lt;code&gt;cellRenderer&lt;/code&gt; property.
                  &lt;p&gt;
                  The default value of this property is provided by the {@code ListUI}delegate, i.e. by the look and feel implementation.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    cellRenderer the <code>ListCellRenderer</code>
                      that paints list cells                    
                </param>
                <see>
                    #getCellRenderer                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The component used to draw the cells.                    
                </beaninfo>
            </javadoc>
            <method name="setCellRenderer" type="void" line="771">
                <params>
                    <param name="cellRenderer" type="ListCellRenderer<? super E>"/>
                </params>
                <comment line="775">
                    If the cellRenderer has changed and prototypeCellValue
                     was set, then recompute fixedCellWidth and fixedCellHeight.                    
                </comment>
                <declaration name="oldValue" type="ListCellRenderer&lt;? super E&gt;" line="772"/>
                <scope line="778"/>
            </method>
            <javadoc line="786">
                Returns the color used to draw the foreground of selected items.{@code DefaultListCellRenderer} uses this color to draw the foreground
                  of items in the selected state, as do the renderers installed by most{@code ListUI} implementations.                
                <return>
                    the color to draw the foreground of selected items                    
                </return>
                <see>
                    #setSelectionForeground                    
                </see>
                <see>
                    DefaultListCellRenderer                    
                </see>
            </javadoc>
            <method name="getSelectionForeground" type="Color" line="796"/>
            <javadoc line="801">
                Sets the color used to draw the foreground of selected items, which
                  cell renderers can use to render text and graphics.{@code DefaultListCellRenderer} uses this color to draw the foreground
                  of items in the selected state, as do the renderers installed by most{@code ListUI} implementations.
                  &lt;p&gt;
                  The default value of this property is defined by the look and feel
                  implementation.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    selectionForeground  the {@code Color} to use in the foreground
                      for selected list items                    
                </param>
                <see>
                    #getSelectionForeground                    
                </see>
                <see>
                    #setSelectionBackground                    
                </see>
                <see>
                    #setForeground                    
                </see>
                <see>
                    #setBackground                    
                </see>
                <see>
                    #setFont                    
                </see>
                <see>
                    DefaultListCellRenderer                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The foreground color of selected cells.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionForeground" type="void" line="826">
                <params>
                    <param name="selectionForeground" type="Color"/>
                </params>
                <declaration name="oldValue" type="Color" line="827"/>
            </method>
            <javadoc line="833">
                Returns the color used to draw the background of selected items.{@code DefaultListCellRenderer} uses this color to draw the background
                  of items in the selected state, as do the renderers installed by most{@code ListUI} implementations.                
                <return>
                    the color to draw the background of selected items                    
                </return>
                <see>
                    #setSelectionBackground                    
                </see>
                <see>
                    DefaultListCellRenderer                    
                </see>
            </javadoc>
            <method name="getSelectionBackground" type="Color" line="843"/>
            <javadoc line="848">
                Sets the color used to draw the background of selected items, which
                  cell renderers can use fill selected cells.{@code DefaultListCellRenderer} uses this color to fill the background
                  of items in the selected state, as do the renderers installed by most{@code ListUI} implementations.
                  &lt;p&gt;
                  The default value of this property is defined by the look
                  and feel implementation.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    selectionBackground  the {@code Color} to use for the
                      background of selected cells                    
                </param>
                <see>
                    #getSelectionBackground                    
                </see>
                <see>
                    #setSelectionForeground                    
                </see>
                <see>
                    #setForeground                    
                </see>
                <see>
                    #setBackground                    
                </see>
                <see>
                    #setFont                    
                </see>
                <see>
                    DefaultListCellRenderer                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The background color of selected cells.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionBackground" type="void" line="873">
                <params>
                    <param name="selectionBackground" type="Color"/>
                </params>
                <declaration name="oldValue" type="Color" line="874"/>
            </method>
            <javadoc line="880">
                Returns the value of the {@code visibleRowCount} property. See the
                  documentation for {@link #setVisibleRowCount} for details on how to
                  interpret this value.                
                <return>
                    the value of the {@code visibleRowCount} property.                    
                </return>
                <see>
                    #setVisibleRowCount                    
                </see>
            </javadoc>
            <method name="getVisibleRowCount" type="int" line="888"/>
            <javadoc line="892">
                Sets the {@code visibleRowCount} property, which has different meanings
                  depending on the layout orientation: For a {@code VERTICAL} layout
                  orientation, this sets the preferred number of rows to display without
                  requiring scrolling; for other orientations, it affects the wrapping of
                  cells.
                  &lt;p&gt;
                  In {@code VERTICAL} orientation:&lt;br&gt;
                  Setting this property affects the return value of the{@link #getPreferredScrollableViewportSize} method, which is used to
                  calculate the preferred size of an enclosing viewport. See that method&apos;s
                  documentation for more details.
                  &lt;p&gt;
                  In {@code HORIZONTAL_WRAP} and {@code VERTICAL_WRAP} orientations:&lt;br&gt;
                  This affects how cells are wrapped. See the documentation of{@link #setLayoutOrientation} for more details.
                  &lt;p&gt;
                  The default value of this property is {@code 8}.
                  &lt;p&gt;
                  Calling this method with a negative value results in the property
                  being set to {@code 0}.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    visibleRowCount  an integer specifying the preferred number of
                      rows to display without requiring scrolling                    
                </param>
                <see>
                    #getVisibleRowCount                    
                </see>
                <see>
                    #getPreferredScrollableViewportSize                    
                </see>
                <see>
                    #setLayoutOrientation                    
                </see>
                <see>
                    JComponent#getVisibleRect                    
                </see>
                <see>
                    JViewport                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The preferred number of rows to display without
                      requiring scrolling                    
                </beaninfo>
            </javadoc>
            <method name="setVisibleRowCount" type="void" line="929">
                <params>
                    <param name="visibleRowCount" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="930"/>
            </method>
            <javadoc line="936">
                Returns the layout orientation property for the list: {@code VERTICAL}if the layout is a single column of cells, {@code VERTICAL_WRAP} if the
                  layout is &quot;newspaper style&quot; with the content flowing vertically then
                  horizontally, or {@code HORIZONTAL_WRAP} if the layout is &quot;newspaper
                  style&quot; with the content flowing horizontally then vertically.                
                <return>
                    the value of the {@code layoutOrientation} property                    
                </return>
                <see>
                    #setLayoutOrientation                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getLayoutOrientation" type="int" line="947"/>
            <javadoc line="952">
                Defines the way list cells are layed out. Consider a {@code JList}with five cells. Cells can be layed out in one of the following ways:
                  &lt;p&gt;
                  &lt;pre&gt;
                  VERTICAL:          0
                  1
                  2
                  3
                  4
                  HORIZONTAL_WRAP:   0  1  2
                  3  4
                  VERTICAL_WRAP:     0  3
                  1  4
                  2
                  &lt;/pre&gt;
                  &lt;p&gt;
                  A description of these layouts follows:
                  &lt;table border=&quot;1&quot;
                  summary=&quot;Describes layouts VERTICAL, HORIZONTAL_WRAP, and VERTICAL_WRAP&quot;&gt;
                  &lt;tr&gt;&lt;th&gt;&lt;p align=&quot;left&quot;&gt;Value&lt;/p&gt;&lt;/th&gt;&lt;th&gt;&lt;p align=&quot;left&quot;&gt;Description&lt;/p&gt;&lt;/th&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;VERTICAL&lt;/code&gt;
                  &lt;td&gt;Cells are layed out vertically in a single column.
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;HORIZONTAL_WRAP&lt;/code&gt;
                  &lt;td&gt;Cells are layed out horizontally, wrapping to a new row as
                  necessary. If the {@code visibleRowCount} property is less than
                  or equal to zero, wrapping is determined by the width of the
                  list; otherwise wrapping is done in such a way as to ensure{@code visibleRowCount} rows in the list.
                  &lt;tr&gt;&lt;td&gt;&lt;code&gt;VERTICAL_WRAP&lt;/code&gt;
                  &lt;td&gt;Cells are layed out vertically, wrapping to a new column as
                  necessary. If the {@code visibleRowCount} property is less than
                  or equal to zero, wrapping is determined by the height of the
                  list; otherwise wrapping is done at {@code visibleRowCount} rows.
                  &lt;/table&gt;
                  &lt;p&gt;
                  The default value of this property is &lt;code&gt;VERTICAL&lt;/code&gt;.                
                <param>
                    layoutOrientation the new layout orientation, one of:{@code VERTICAL}, {@code HORIZONTAL_WRAP} or {@code VERTICAL_WRAP}                    
                </param>
                <see>
                    #getLayoutOrientation                    
                </see>
                <see>
                    #setVisibleRowCount                    
                </see>
                <see>
                    #getScrollableTracksViewportHeight                    
                </see>
                <see>
                    #getScrollableTracksViewportWidth                    
                </see>
                <throws>
                    IllegalArgumentException if {@code layoutOrientation} isn't one of the
                      allowable values                    
                </throws>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Defines the way list cells are layed out.
                      enum: VERTICAL JList.VERTICAL
                      HORIZONTAL_WRAP JList.HORIZONTAL_WRAP
                      VERTICAL_WRAP JList.VERTICAL_WRAP                    
                </beaninfo>
            </javadoc>
            <method name="setLayoutOrientation" type="void" line="1010">
                <params>
                    <param name="layoutOrientation" type="int"/>
                </params>
                <declaration name="oldValue" type="int" line="1011"/>
            </method>
            <javadoc line="1025">
                Returns the smallest list index that is currently visible.
                  In a left-to-right {@code componentOrientation}, the first visible
                  cell is found closest to the list&apos;s upper-left corner. In right-to-left
                  orientation, it is found closest to the upper-right corner.
                  If nothing is visible or the list is empty, {@code -1} is returned.
                  Note that the returned cell may only be partially visible.                
                <return>
                    the index of the first visible cell                    
                </return>
                <see>
                    #getLastVisibleIndex                    
                </see>
                <see>
                    JComponent#getVisibleRect                    
                </see>
            </javadoc>
            <method name="getFirstVisibleIndex" type="int" line="1037">
                <declaration name="r" type="Rectangle" line="1038"/>
                <declaration name="first" type="int" line="1039"/>
                <scope line="1040"/>
                <scope line="1042"/>
                <scope line="1045">
                    <declaration name="bounds" type="Rectangle" line="1046"/>
                    <scope line="1047">
                        <scope line="1049"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1058">
                Returns the largest list index that is currently visible.
                  If nothing is visible or the list is empty, {@code -1} is returned.
                  Note that the returned cell may only be partially visible.                
                <return>
                    the index of the last visible cell                    
                </return>
                <see>
                    #getFirstVisibleIndex                    
                </see>
                <see>
                    JComponent#getVisibleRect                    
                </see>
            </javadoc>
            <method name="getLastVisibleIndex" type="int" line="1067">
                <comment line="1084">
                    Try the top left(LTR) or top right(RTL) corner, and                    
                </comment>
                <comment line="1085">
                    then go across checking each cell for HORIZONTAL_WRAP.                    
                </comment>
                <comment line="1086">
                    Try the lower left corner, and then go across checking                    
                </comment>
                <comment line="1087">
                    each cell for other list layout orientation.                    
                </comment>
                <comment line="1110">
                    Past visible region, bail.                    
                </comment>
                <comment line="1117">
                    Past visible region, bail.                    
                </comment>
                <declaration name="leftToRight" type="boolean" line="1068"/>
                <declaration name="r" type="Rectangle" line="1069"/>
                <declaration name="lastPoint" type="Point" line="1070"/>
                <scope line="1071"/>
                <scope line="1073"/>
                <declaration name="location" type="int" line="1076"/>
                <scope line="1078">
                    <declaration name="bounds" type="Rectangle" line="1079"/>
                    <scope line="1081">
                        <scope line="1083">
                            <declaration name="isHorizontalWrap" type="boolean" line="1088"/>
                            <declaration name="visibleLocation" type="Point" line="1090"/>
                            <declaration name="last" type="int" line="1093"/>
                            <declaration name="visIndex" type="int" line="1094"/>
                            <declaration name="lIndex" type="int" line="1095"/>
                            <scope line="1098">
                                <scope line="1102">
                                    <scope line="1105">
                                        <scope line="1107">
                                            <scope line="1109"/>
                                        </scope>
                                        <scope line="1114">
                                            <scope line="1116"/>
                                        </scope>
                                    </scope>
                                    <scope line="1123"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1135">
                Scrolls the list within an enclosing viewport to make the specified
                  cell completely visible. This calls {@code scrollRectToVisible} with
                  the bounds of the specified cell. For this method to work, the{@code JList} must be within a &lt;code&gt;JViewport&lt;/code&gt;.
                  &lt;p&gt;
                  If the given index is outside the list&apos;s range of cells, this method
                  results in nothing.                
                <param>
                    index  the index of the cell to make visible                    
                </param>
                <see>
                    JComponent#scrollRectToVisible                    
                </see>
                <see>
                    #getVisibleRect                    
                </see>
            </javadoc>
            <method name="ensureIndexIsVisible" type="void" line="1148">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="cellBounds" type="Rectangle" line="1149"/>
                <scope line="1150"/>
            </method>
            <javadoc line="1155">
                Turns on or off automatic drag handling. In order to enable automatic
                  drag handling, this property should be set to {@code true}, and the
                  list&apos;s {@code TransferHandler} needs to be {@code non-null}.
                  The default value of the {@code dragEnabled} property is {@code false}.
                  &lt;p&gt;
                  The job of honoring this property, and recognizing a user drag gesture,
                  lies with the look and feel implementation, and in particular, the list&apos;s{@code ListUI}. When automatic drag handling is enabled, most look and
                  feels (including those that subclass {@code BasicLookAndFeel}) begin a
                  drag and drop operation whenever the user presses the mouse button over
                  an item and then moves the mouse a few pixels. Setting this property to{@code true} can therefore have a subtle effect on how selections behave.
                  &lt;p&gt;
                  If a look and feel is used that ignores this property, you can still
                  begin a drag and drop operation by calling {@code exportAsDrag} on the
                  list&apos;s {@code TransferHandler}.                
                <param>
                    b whether or not to enable automatic drag handling                    
                </param>
                <exception>
                    HeadlessException if
                      <code>b</code> is <code>true</code> and
                      <code>GraphicsEnvironment.isHeadless()</code>
                      returns <code>true</code>                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #getDragEnabled                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    description: determines whether automatic drag handling is enabled
                      bound: false                    
                </beaninfo>
            </javadoc>
            <method name="setDragEnabled" type="void" line="1188">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1189"/>
            </method>
            <javadoc line="1195">
                Returns whether or not automatic drag handling is enabled.                
                <return>
                    the value of the {@code dragEnabled} property                    
                </return>
                <see>
                    #setDragEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragEnabled" type="boolean" line="1202"/>
            <javadoc line="1206">
                Sets the drop mode for this component. For backward compatibility,
                  the default for this property is &lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;.
                  Usage of one of the other modes is recommended, however, for an
                  improved user experience. &lt;code&gt;DropMode.ON&lt;/code&gt;, for instance,
                  offers similar behavior of showing items as selected, but does so without
                  affecting the actual selection in the list.
                  &lt;p&gt;
                  &lt;code&gt;JList&lt;/code&gt; supports the following drop modes:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.USE_SELECTION&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;DropMode.ON_OR_INSERT&lt;/code&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                  The drop mode is only meaningful if this component has a
                  &lt;code&gt;TransferHandler&lt;/code&gt; that accepts drops.                
                <param>
                    dropMode the drop mode to use                    
                </param>
                <throws>
                    IllegalArgumentException if the drop mode is unsupported
                      or <code>null</code>                    
                </throws>
                <see>
                    #getDropMode                    
                </see>
                <see>
                    #getDropLocation                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDropMode" type="void" line="1233">
                <params>
                    <param name="dropMode" type="DropMode"/>
                </params>
                <scope line="1234"/>
            </method>
            <javadoc line="1248">
                Returns the drop mode for this component.                
                <return>
                    the drop mode for this component                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropMode" type="DropMode" line="1255"/>
            <javadoc line="1259">
                Calculates a drop location in this component, representing where a
                  drop at the given point should insert data.                
                <param>
                    p the point to calculate a drop location for                    
                </param>
                <return>
                    the drop location, or <code>null</code>                    
                </return>
            </javadoc>
            <method name="dropLocationForPoint" type="DropLocation" line="1266">
                <params>
                    <param name="p" type="Point"/>
                </params>
                <comment line="1294">
                    special case for below all cells                    
                </comment>
                <comment line="1322">
                    special case for below all cells                    
                </comment>
                <declaration name="location" type="DropLocation" line="1267"/>
                <declaration name="rect" type="Rectangle" line="1268"/>
                <declaration name="index" type="int" line="1270"/>
                <scope line="1271"/>
                <scope line="1284"/>
                <scope line="1289">
                    <declaration name="ltr" type="boolean" line="1290"/>
                    <scope line="1292"/>
                    <scope line="1295"/>
                </scope>
                <scope line="1298">
                    <scope line="1299"/>
                </scope>
                <scope line="1308"/>
                <declaration name="between" type="boolean" line="1313"/>
                <scope line="1315">
                    <declaration name="ltr" type="boolean" line="1316"/>
                    <declaration name="section" type="Section" line="1318"/>
                    <scope line="1319"/>
                    <scope line="1323"/>
                    <scope line="1326"/>
                </scope>
                <scope line="1329">
                    <declaration name="section" type="Section" line="1330"/>
                    <scope line="1331"/>
                    <scope line="1333"/>
                </scope>
            </method>
            <javadoc line="1349">
                Called to set or clear the drop location during a DnD operation.
                  In some cases, the component may need to use it&apos;s internal selection
                  temporarily to indicate the drop location. To help facilitate this,
                  this method returns and accepts as a parameter a state object.
                  This state object can be used to store, and later restore, the selection
                  state. Whatever this method returns will be passed back to it in
                  future calls, as the state parameter. If it wants the DnD system to
                  continue storing the same state, it must pass it back every time.
                  Here&apos;s how this is used:
                  &lt;p&gt;
                  Let&apos;s say that on the first call to this method the component decides
                  to save some state (because it is about to use the selection to show
                  a drop index). It can return a state object to the caller encapsulating
                  any saved selection state. On a second call, let&apos;s say the drop location
                  is being changed to something else. The component doesn&apos;t need to
                  restore anything yet, so it simply passes back the same state object
                  to have the DnD system continue storing it. Finally, let&apos;s say this
                  method is messaged with &lt;code&gt;null&lt;/code&gt;. This means DnD
                  is finished with this component for now, meaning it should restore
                  state. At this point, it can use the state parameter to restore
                  said state, and of course return &lt;code&gt;null&lt;/code&gt; since there&apos;s
                  no longer anything to store.                
                <param>
                    location the drop location (as calculated by
                      <code>dropLocationForPoint</code>) or <code>null</code>
                      if there's no longer a valid drop location                    
                </param>
                <param>
                    state the state object saved earlier for this component,
                      or <code>null</code>                    
                </param>
                <param>
                    forDrop whether or not the method is being called because an
                      actual drop occurred                    
                </param>
                <return>
                    any saved state for this component, or <code>null</code> if none                    
                </return>
            </javadoc>
            <method name="setDropLocation" type="Object" line="1384">
                <params>
                    <param name="location" type="TransferHandler.DropLocation"/>
                    <param name="state" type="Object"/>
                    <param name="forDrop" type="boolean"/>
                </params>
                <declaration name="retVal" type="Object" line="1386"/>
                <declaration name="listLocation" type="DropLocation" line="1387"/>
                <scope line="1389">
                    <scope line="1390">
                        <scope line="1391">
                            <declaration name="anchor" type="int" line="1394"/>
                            <declaration name="lead" type="int" line="1395"/>
                        </scope>
                    </scope>
                    <scope line="1400">
                        <scope line="1401">
                            <declaration name="inds" type="int[]" line="1402"/>
                        </scope>
                        <scope line="1405"/>
                        <declaration name="index" type="int" line="1409"/>
                        <scope line="1410"/>
                        <scope line="1414"/>
                    </scope>
                </scope>
                <declaration name="old" type="DropLocation" line="1420"/>
            </method>
            <javadoc line="1427">
                Returns the location that this component should visually indicate
                  as the drop location during a DnD operation over the component,
                  or {@code null} if no location is to currently be shown.
                  &lt;p&gt;
                  This method is not meant for querying the drop location
                  from a {@code TransferHandler}, as the drop location is only
                  set after the {@code TransferHandler}&apos;s &lt;code&gt;canImport&lt;/code&gt;
                  has returned and has allowed for the location to be shown.
                  &lt;p&gt;
                  When this property changes, a property change event with
                  name &quot;dropLocation&quot; is fired by the component.
                  &lt;p&gt;
                  By default, responsibility for listening for changes to this property
                  and indicating the drop location visually lies with the list&apos;s{@code ListUI}, which may paint it directly and/or install a cell
                  renderer to do so. Developers wishing to implement custom drop location
                  painting and/or replace the default cell renderer, may need to honor
                  this property.                
                <return>
                    the drop location                    
                </return>
                <see>
                    #setDropMode                    
                </see>
                <see>
                    TransferHandler#canImport(TransferHandler.TransferSupport)                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDropLocation" type="DropLocation" line="1452"/>
            <javadoc line="1456">
                Returns the next list element whose {@code toString} value
                  starts with the given prefix.                
                <param>
                    prefix the string to test for a match                    
                </param>
                <param>
                    startIndex the index for starting the search                    
                </param>
                <param>
                    bias the search direction, either
                      Position.Bias.Forward or Position.Bias.Backward.                    
                </param>
                <return>
                    the index of the next list element that
                      starts with the prefix; otherwise {@code -1}                    
                </return>
                <exception>
                    IllegalArgumentException if prefix is {@code null}or startIndex is out of bounds                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getNextMatch" type="int" line="1470">
                <params>
                    <param name="prefix" type="String"/>
                    <param name="startIndex" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
                <comment line="1481">
                    start search from the next element after the selected element                    
                </comment>
                <declaration name="model" type="ListModel&lt;E&gt;" line="1471"/>
                <declaration name="max" type="int" line="1472"/>
                <scope line="1473"/>
                <scope line="1476"/>
                <declaration name="increment" type="int" line="1482"/>
                <declaration name="index" type="int" line="1483"/>
                <scope line="1484">
                    <declaration name="element" type="E" line="1485"/>
                    <scope line="1487">
                        <declaration name="string" type="String" line="1488"/>
                        <scope line="1490"/>
                        <scope line="1493">
                            <scope line="1495"/>
                        </scope>
                        <scope line="1500"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1509">
                Returns the tooltip text to be used for the given event. This overrides{@code JComponent}&apos;s {@code getToolTipText} to first check the cell
                  renderer component for the cell over which the event occurred, returning
                  its tooltip text, if any. This implementation allows you to specify
                  tooltip text on the cell level, by using {@code setToolTipText} on your
                  cell renderer component.
                  &lt;p&gt;
                  &lt;bold&gt;Note:&lt;/bold&gt; For &lt;code&gt;JList&lt;/code&gt; to properly display the
                  tooltips of its renderers in this manner, &lt;code&gt;JList&lt;/code&gt; must be a
                  registered component with the &lt;code&gt;ToolTipManager&lt;/code&gt;. This registration
                  is done automatically in the constructor. However, if at a later point
                  &lt;code&gt;JList&lt;/code&gt; is unregistered, by way of a call to{@code setToolTipText(null)}, tips from the renderers will no longer display.                
                <param>
                    event the {@code MouseEvent} to fetch the tooltip text for                    
                </param>
                <see>
                    JComponent#setToolTipText                    
                </see>
                <see>
                    JComponent#getToolTipText                    
                </see>
            </javadoc>
            <method name="getToolTipText" type="String" line="1528">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <scope line="1529">
                    <declaration name="p" type="Point" line="1530"/>
                    <declaration name="index" type="int" line="1531"/>
                    <declaration name="r" type="ListCellRenderer&lt;? super E&gt;" line="1532"/>
                    <declaration name="cellBounds" type="Rectangle" line="1533"/>
                    <scope line="1537">
                        <declaration name="lsm" type="ListSelectionModel" line="1538"/>
                        <declaration name="rComponent" type="Component" line="1539"/>
                        <scope line="1545">
                            <declaration name="newEvent" type="MouseEvent" line="1546"/>
                            <declaration name="tip" type="String" line="1559"/>
                            <scope line="1562"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1576">
                Returns the cell index closest to the given location in the list&apos;s
                  coordinate system. To determine if the cell actually contains the
                  specified location, compare the point against the cell&apos;s bounds,
                  as provided by {@code getCellBounds}. This method returns {@code -1}if the model is empty
                  &lt;p&gt;
                  This is a cover method that delegates to the method of the same name
                  in the list&apos;s {@code ListUI}. It returns {@code -1} if the list has
                  no {@code ListUI}.                
                <param>
                    location the coordinates of the point                    
                </param>
                <return>
                    the cell index closest to the given location, or {@code -1}                    
                </return>
            </javadoc>
            <method name="locationToIndex" type="int" line="1590">
                <params>
                    <param name="location" type="Point"/>
                </params>
                <declaration name="ui" type="ListUI" line="1591"/>
            </method>
            <javadoc line="1596">
                Returns the origin of the specified item in the list&apos;s coordinate
                  system. This method returns {@code null} if the index isn&apos;t valid.
                  &lt;p&gt;
                  This is a cover method that delegates to the method of the same name
                  in the list&apos;s {@code ListUI}. It returns {@code null} if the list has
                  no {@code ListUI}.                
                <param>
                    index the cell index                    
                </param>
                <return>
                    the origin of the cell, or {@code null}                    
                </return>
            </javadoc>
            <method name="indexToLocation" type="Point" line="1607">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="ui" type="ListUI" line="1608"/>
            </method>
            <javadoc line="1613">
                Returns the bounding rectangle, in the list&apos;s coordinate system,
                  for the range of cells specified by the two indices.
                  These indices can be supplied in any order.
                  &lt;p&gt;
                  If the smaller index is outside the list&apos;s range of cells, this method
                  returns {@code null}. If the smaller index is valid, but the larger
                  index is outside the list&apos;s range, the bounds of just the first index
                  is returned. Otherwise, the bounds of the valid range is returned.
                  &lt;p&gt;
                  This is a cover method that delegates to the method of the same name
                  in the list&apos;s {@code ListUI}. It returns {@code null} if the list has
                  no {@code ListUI}.                
                <param>
                    index0 the first index in the range                    
                </param>
                <param>
                    index1 the second index in the range                    
                </param>
                <return>
                    the bounding rectangle for the range of cells, or {@code null}                    
                </return>
            </javadoc>
            <method name="getCellBounds" type="Rectangle" line="1631">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="ui" type="ListUI" line="1632"/>
            </method>
            <javadoc line="1642">
                Returns the data model that holds the list of items displayed
                  by the &lt;code&gt;JList&lt;/code&gt; component.                
                <return>
                    the <code>ListModel</code> that provides the displayed
                      list of items                    
                </return>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="getModel" type="ListModel<E>" line="1650"/>
            <javadoc line="1654">
                Sets the model that represents the contents or &quot;value&quot; of the
                  list, notifies property change listeners, and then clears the
                  list&apos;s selection.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    model  the <code>ListModel</code> that provides the
                      list of items for display                    
                </param>
                <exception>
                    IllegalArgumentException  if <code>model</code> is
                      <code>null</code>                    
                </exception>
                <see>
                    #getModel                    
                </see>
                <see>
                    #clearSelection                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The object that contains the data to be drawn by this JList.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="1672">
                <params>
                    <param name="model" type="ListModel<E>"/>
                </params>
                <scope line="1673"/>
                <declaration name="oldValue" type="ListModel&lt;E&gt;" line="1676"/>
            </method>
            <javadoc line="1683">
                Constructs a read-only &lt;code&gt;ListModel&lt;/code&gt; from an array of items,
                  and calls {@code setModel} with this model.
                  &lt;p&gt;
                  Attempts to pass a {@code null} value to this method results in
                  undefined behavior and, most likely, exceptions. The created model
                  references the given array directly. Attempts to modify the array
                  after invoking this method results in undefined behavior.                
                <param>
                    listData an array of {@code E} containing the items to
                      display in the list                    
                </param>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="setListData" type="void" line="1696">
                <params>
                    <param name="listData" type="E[]"/>
                </params>
                <anonymous_class line="1698">
                    <method name="getSize" type="int" line="1699"/>
                    <method name="getElementAt" type="E" line="1700">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="1706">
                Constructs a read-only &lt;code&gt;ListModel&lt;/code&gt; from a &lt;code&gt;Vector&lt;/code&gt;
                  and calls {@code setModel} with this model.
                  &lt;p&gt;
                  Attempts to pass a {@code null} value to this method results in
                  undefined behavior and, most likely, exceptions. The created model
                  references the given {@code Vector} directly. Attempts to modify the{@code Vector} after invoking this method results in undefined behavior.                
                <param>
                    listData a <code>Vector</code> containing the items to
                      display in the list                    
                </param>
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <method name="setListData" type="void" line="1719">
                <params>
                    <param name="listData" type="Vector<? extends E>"/>
                </params>
                <anonymous_class line="1721">
                    <method name="getSize" type="int" line="1722"/>
                    <method name="getElementAt" type="E" line="1723">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="1734">
                Returns an instance of {@code DefaultListSelectionModel}; called
                  during construction to initialize the list&apos;s selection model
                  property.                
                <return>
                    a {@code DefaultListSelecitonModel}, used to initialize
                      the list's selection model property during construction                    
                </return>
                <see>
                    #setSelectionModel                    
                </see>
                <see>
                    DefaultListSelectionModel                    
                </see>
            </javadoc>
            <method name="createSelectionModel" type="ListSelectionModel" line="1744"/>
            <javadoc line="1749">
                Returns the current selection model. The selection model maintains the
                  selection state of the list. See the class level documentation for more
                  details.                
                <return>
                    the <code>ListSelectionModel</code> that maintains the
                      list's selections                    
                </return>
                <see>
                    #setSelectionModel                    
                </see>
                <see>
                    ListSelectionModel                    
                </see>
            </javadoc>
            <method name="getSelectionModel" type="ListSelectionModel" line="1760"/>
            <javadoc line="1765">
                Notifies {@code ListSelectionListener}s added directly to the list
                  of selection changes made to the selection model. {@code JList}listens for changes made to the selection in the selection model,
                  and forwards notification to listeners added to the list directly,
                  by calling this method.
                  &lt;p&gt;
                  This method constructs a {@code ListSelectionEvent} with this list
                  as the source, and the specified arguments, and sends it to the
                  registered {@code ListSelectionListeners}.                
                <param>
                    firstIndex the first index in the range, {@code <= lastIndex}                    
                </param>
                <param>
                    lastIndex the last index in the range, {@code >= firstIndex}                    
                </param>
                <param>
                    isAdjusting whether or not this is one in a series of
                      multiple events, where changes are still being made                    
                </param>
                <see>
                    #addListSelectionListener                    
                </see>
                <see>
                    #removeListSelectionListener                    
                </see>
                <see>
                    javax.swing.event.ListSelectionEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireSelectionValueChanged" type="void" line="1788">
                <params>
                    <param name="firstIndex" type="int"/>
                    <param name="lastIndex" type="int"/>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <declaration name="listeners" type="Object[]" line="1789"/>
                <declaration name="e" type="ListSelectionEvent" line="1790"/>
                <scope line="1792">
                    <scope line="1793">
                        <scope line="1794"/>
                    </scope>
                </scope>
            </method>
            <class name="ListSelectionHandler" line="1809">
                <comment line="3018">
                    AccessibleContext methods                    
                </comment>
                <comment line="3102">
                    AccessibleSelection methods                    
                </comment>
                <comment line="3734">
                    inner class AccessibleJListChild                    
                </comment>
                <implements interface="ListSelectionListener"/>
                <implements interface="Serializable"/>
                <method name="valueChanged" type="void" line="1811">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="1819">
                Adds a listener to the list, to be notified each time a change to the
                  selection occurs; the preferred way of listening for selection state
                  changes. {@code JList} takes care of listening for selection state
                  changes in the selection model, and notifies the given listener of
                  each change. {@code ListSelectionEvent}s sent to the listener have a{@code source} property set to this list.                
                <param>
                    listener the {@code ListSelectionListener} to add                    
                </param>
                <see>
                    #getSelectionModel                    
                </see>
                <see>
                    #getListSelectionListeners                    
                </see>
            </javadoc>
            <method name="addListSelectionListener" type="void" line="1832">
                <params>
                    <param name="listener" type="ListSelectionListener"/>
                </params>
                <scope line="1833"/>
            </method>
            <javadoc line="1842">
                Removes a selection listener from the list.                
                <param>
                    listener the {@code ListSelectionListener} to remove                    
                </param>
                <see>
                    #addListSelectionListener                    
                </see>
                <see>
                    #getSelectionModel                    
                </see>
            </javadoc>
            <method name="removeListSelectionListener" type="void" line="1849">
                <params>
                    <param name="listener" type="ListSelectionListener"/>
                </params>
            </method>
            <javadoc line="1854">
                Returns an array of all the {@code ListSelectionListener}s added
                  to this {@code JList} by way of {@code addListSelectionListener}.                
                <return>
                    all of the {@code ListSelectionListener}s on this list, or
                      an empty array if no listeners have been added                    
                </return>
                <see>
                    #addListSelectionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getListSelectionListeners" type="ListSelectionListener[]" line="1863"/>
            <javadoc line="1868">
                Sets the &lt;code&gt;selectionModel&lt;/code&gt; for the list to a
                  non-&lt;code&gt;null&lt;/code&gt; &lt;code&gt;ListSelectionModel&lt;/code&gt;
                  implementation. The selection model handles the task of making single
                  selections, selections of contiguous ranges, and non-contiguous
                  selections.
                  &lt;p&gt;
                  This is a JavaBeans bound property.                
                <param>
                    selectionModel  the <code>ListSelectionModel</code> that
                      implements the selections                    
                </param>
                <exception>
                    IllegalArgumentException   if <code>selectionModel</code>
                      is <code>null</code>                    
                </exception>
                <see>
                    #getSelectionModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The selection model, recording which cells are selected.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionModel" type="void" line="1886">
                <params>
                    <param name="selectionModel" type="ListSelectionModel"/>
                </params>
                <comment line="1891">
                    Remove the forwarding ListSelectionListener from the old
                     selectionModel, and add it to the new one, if necessary.                    
                </comment>
                <scope line="1887"/>
                <scope line="1894"/>
                <declaration name="oldValue" type="ListSelectionModel" line="1899"/>
            </method>
            <javadoc line="1905">
                Sets the selection mode for the list. This is a cover method that sets
                  the selection mode directly on the selection model.
                  &lt;p&gt;
                  The following list describes the accepted selection modes:
                  &lt;ul&gt;
                  &lt;li&gt;{@code ListSelectionModel.SINGLE_SELECTION} -
                  Only one list index can be selected at a time. In this mode,{@code setSelectionInterval} and {@code addSelectionInterval} are
                  equivalent, both replacing the current selection with the index
                  represented by the second argument (the &quot;lead&quot;).
                  &lt;li&gt;{@code ListSelectionModel.SINGLE_INTERVAL_SELECTION} -
                  Only one contiguous interval can be selected at a time.
                  In this mode, {@code addSelectionInterval} behaves like{@code setSelectionInterval} (replacing the current selection},
                  unless the given interval is immediately adjacent to or overlaps
                  the existing selection, and can be used to grow the selection.
                  &lt;li&gt;{@code ListSelectionModel.MULTIPLE_INTERVAL_SELECTION} -
                  In this mode, there&apos;s no restriction on what can be selected.
                  This mode is the default.
                  &lt;/ul&gt;                
                <param>
                    selectionMode the selection mode                    
                </param>
                <see>
                    #getSelectionMode                    
                </see>
                <throws>
                    IllegalArgumentException if the selection mode isn't
                      one of those allowed                    
                </throws>
                <beaninfo>
                    description: The selection mode.
                      enum: SINGLE_SELECTION            ListSelectionModel.SINGLE_SELECTION
                      SINGLE_INTERVAL_SELECTION   ListSelectionModel.SINGLE_INTERVAL_SELECTION
                      MULTIPLE_INTERVAL_SELECTION ListSelectionModel.MULTIPLE_INTERVAL_SELECTION                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionMode" type="void" line="1937">
                <params>
                    <param name="selectionMode" type="int"/>
                </params>
            </method>
            <javadoc line="1941">
                Returns the current selection mode for the list. This is a cover
                  method that delegates to the method of the same name on the
                  list&apos;s selection model.                
                <return>
                    the current selection mode                    
                </return>
                <see>
                    #setSelectionMode                    
                </see>
            </javadoc>
            <method name="getSelectionMode" type="int" line="1949"/>
            <javadoc line="1954">
                Returns the anchor selection index. This is a cover method that
                  delegates to the method of the same name on the list&apos;s selection model.                
                <return>
                    the anchor selection index                    
                </return>
                <see>
                    ListSelectionModel#getAnchorSelectionIndex                    
                </see>
            </javadoc>
            <method name="getAnchorSelectionIndex" type="int" line="1961"/>
            <javadoc line="1966">
                Returns the lead selection index. This is a cover method that
                  delegates to the method of the same name on the list&apos;s selection model.                
                <return>
                    the lead selection index                    
                </return>
                <see>
                    ListSelectionModel#getLeadSelectionIndex                    
                </see>
                <beaninfo>
                    description: The lead selection index.                    
                </beaninfo>
            </javadoc>
            <method name="getLeadSelectionIndex" type="int" line="1975"/>
            <javadoc line="1980">
                Returns the smallest selected cell index, or {@code -1} if the selection
                  is empty. This is a cover method that delegates to the method of the same
                  name on the list&apos;s selection model.                
                <return>
                    the smallest selected cell index, or {@code -1}                    
                </return>
                <see>
                    ListSelectionModel#getMinSelectionIndex                    
                </see>
            </javadoc>
            <method name="getMinSelectionIndex" type="int" line="1988"/>
            <javadoc line="1993">
                Returns the largest selected cell index, or {@code -1} if the selection
                  is empty. This is a cover method that delegates to the method of the same
                  name on the list&apos;s selection model.                
                <return>
                    the largest selected cell index                    
                </return>
                <see>
                    ListSelectionModel#getMaxSelectionIndex                    
                </see>
            </javadoc>
            <method name="getMaxSelectionIndex" type="int" line="2001"/>
            <javadoc line="2006">
                Returns {@code true} if the specified index is selected,
                  else {@code false}. This is a cover method that delegates to the method
                  of the same name on the list&apos;s selection model.                
                <param>
                    index index to be queried for selection state                    
                </param>
                <return>
                    {@code true} if the specified index is selected,
                      else {@code false}                    
                </return>
                <see>
                    ListSelectionModel#isSelectedIndex                    
                </see>
                <see>
                    #setSelectedIndex                    
                </see>
            </javadoc>
            <method name="isSelectedIndex" type="boolean" line="2017">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="2022">
                Returns {@code true} if nothing is selected, else {@code false}.
                  This is a cover method that delegates to the method of the same
                  name on the list&apos;s selection model.                
                <return>
                    {@code true} if nothing is selected, else {@code false}                    
                </return>
                <see>
                    ListSelectionModel#isSelectionEmpty                    
                </see>
                <see>
                    #clearSelection                    
                </see>
            </javadoc>
            <method name="isSelectionEmpty" type="boolean" line="2031"/>
            <javadoc line="2036">
                Clears the selection; after calling this method, {@code isSelectionEmpty}will return {@code true}. This is a cover method that delegates to the
                  method of the same name on the list&apos;s selection model.                
                <see>
                    ListSelectionModel#clearSelection                    
                </see>
                <see>
                    #isSelectionEmpty                    
                </see>
            </javadoc>
            <method name="clearSelection" type="void" line="2044"/>
            <javadoc line="2049">
                Selects the specified interval. Both {@code anchor} and {@code lead}indices are included. {@code anchor} doesn&apos;t have to be less than or
                  equal to {@code lead}. This is a cover method that delegates to the
                  method of the same name on the list&apos;s selection model.
                  &lt;p&gt;
                  Refer to the documentation of the selection model class being used
                  for details on how values less than {@code 0} are handled.                
                <param>
                    anchor the first index to select                    
                </param>
                <param>
                    lead the last index to select                    
                </param>
                <see>
                    ListSelectionModel#setSelectionInterval                    
                </see>
                <see>
                    DefaultListSelectionModel#setSelectionInterval                    
                </see>
                <see>
                    #createSelectionModel                    
                </see>
                <see>
                    #addSelectionInterval                    
                </see>
                <see>
                    #removeSelectionInterval                    
                </see>
            </javadoc>
            <method name="setSelectionInterval" type="void" line="2066">
                <params>
                    <param name="anchor" type="int"/>
                    <param name="lead" type="int"/>
                </params>
            </method>
            <javadoc line="2071">
                Sets the selection to be the union of the specified interval with current
                  selection. Both the {@code anchor} and {@code lead} indices are
                  included. {@code anchor} doesn&apos;t have to be less than or
                  equal to {@code lead}. This is a cover method that delegates to the
                  method of the same name on the list&apos;s selection model.
                  &lt;p&gt;
                  Refer to the documentation of the selection model class being used
                  for details on how values less than {@code 0} are handled.                
                <param>
                    anchor the first index to add to the selection                    
                </param>
                <param>
                    lead the last index to add to the selection                    
                </param>
                <see>
                    ListSelectionModel#addSelectionInterval                    
                </see>
                <see>
                    DefaultListSelectionModel#addSelectionInterval                    
                </see>
                <see>
                    #createSelectionModel                    
                </see>
                <see>
                    #setSelectionInterval                    
                </see>
                <see>
                    #removeSelectionInterval                    
                </see>
            </javadoc>
            <method name="addSelectionInterval" type="void" line="2089">
                <params>
                    <param name="anchor" type="int"/>
                    <param name="lead" type="int"/>
                </params>
            </method>
            <javadoc line="2094">
                Sets the selection to be the set difference of the specified interval
                  and the current selection. Both the {@code index0} and {@code index1}indices are removed. {@code index0} doesn&apos;t have to be less than or
                  equal to {@code index1}. This is a cover method that delegates to the
                  method of the same name on the list&apos;s selection model.
                  &lt;p&gt;
                  Refer to the documentation of the selection model class being used
                  for details on how values less than {@code 0} are handled.                
                <param>
                    index0 the first index to remove from the selection                    
                </param>
                <param>
                    index1 the last index to remove from the selection                    
                </param>
                <see>
                    ListSelectionModel#removeSelectionInterval                    
                </see>
                <see>
                    DefaultListSelectionModel#removeSelectionInterval                    
                </see>
                <see>
                    #createSelectionModel                    
                </see>
                <see>
                    #setSelectionInterval                    
                </see>
                <see>
                    #addSelectionInterval                    
                </see>
            </javadoc>
            <method name="removeSelectionInterval" type="void" line="2112">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
            </method>
            <javadoc line="2117">
                Sets the selection model&apos;s {@code valueIsAdjusting} property. When{@code true}, upcoming changes to selection should be considered part
                  of a single change. This property is used internally and developers
                  typically need not call this method. For example, when the model is being
                  updated in response to a user drag, the value of the property is set
                  to {@code true} when the drag is initiated and set to {@code false}when the drag is finished. This allows listeners to update only
                  when a change has been finalized, rather than handling all of the
                  intermediate values.
                  &lt;p&gt;
                  You may want to use this directly if making a series of changes
                  that should be considered part of a single change.
                  &lt;p&gt;
                  This is a cover method that delegates to the method of the same name on
                  the list&apos;s selection model. See the documentation for{@link javax.swing.ListSelectionModel#setValueIsAdjusting} for
                  more details.                
                <param>
                    b the new value for the property                    
                </param>
                <see>
                    ListSelectionModel#setValueIsAdjusting                    
                </see>
                <see>
                    javax.swing.event.ListSelectionEvent#getValueIsAdjusting                    
                </see>
                <see>
                    #getValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="setValueIsAdjusting" type="void" line="2141">
                <params>
                    <param name="b" type="boolean"/>
                </params>
            </method>
            <javadoc line="2146">
                Returns the value of the selection model&apos;s {@code isAdjusting} property.
                  &lt;p&gt;
                  This is a cover method that delegates to the method of the same name on
                  the list&apos;s selection model.                
                <return>
                    the value of the selection model's {@code isAdjusting} property.                    
                </return>
                <see>
                    #setValueIsAdjusting                    
                </see>
                <see>
                    ListSelectionModel#getValueIsAdjusting                    
                </see>
            </javadoc>
            <method name="getValueIsAdjusting" type="boolean" line="2157"/>
            <javadoc line="2162">
                Returns an array of all of the selected indices, in increasing
                  order.                
                <return>
                    all of the selected indices, in increasing order,
                      or an empty array if nothing is selected                    
                </return>
                <see>
                    #removeSelectionInterval                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
            <method name="getSelectedIndices" type="int[]" line="2172">
                <declaration name="sm" type="ListSelectionModel" line="2173"/>
                <declaration name="iMin" type="int" line="2174"/>
                <declaration name="iMax" type="int" line="2175"/>
                <scope line="2177"/>
                <declaration name="rvTmp" type="int[]" line="2181"/>
                <declaration name="n" type="int" line="2182"/>
                <scope line="2183">
                    <scope line="2184"/>
                </scope>
                <declaration name="rv" type="int[]" line="2188"/>
            </method>
            <javadoc line="2194">
                Selects a single cell. Does nothing if the given index is greater
                  than or equal to the model size. This is a convenience method that uses{@code setSelectionInterval} on the selection model. Refer to the
                  documentation for the selection model class being used for details on
                  how values less than {@code 0} are handled.                
                <param>
                    index the index of the cell to select                    
                </param>
                <see>
                    ListSelectionModel#setSelectionInterval                    
                </see>
                <see>
                    #isSelectedIndex                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
                <beaninfo>
                    description: The index of the selected cell.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectedIndex" type="void" line="2208">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="2209"/>
            </method>
            <javadoc line="2216">
                Changes the selection to be the set of indices specified by the given
                  array. Indices greater than or equal to the model size are ignored.
                  This is a convenience method that clears the selection and then uses{@code addSelectionInterval} on the selection model to add the indices.
                  Refer to the documentation of the selection model class being used for
                  details on how values less than {@code 0} are handled.                
                <param>
                    indices an array of the indices of the cells to select,{@code non-null}                    
                </param>
                <see>
                    ListSelectionModel#addSelectionInterval                    
                </see>
                <see>
                    #isSelectedIndex                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
                <throws>
                    NullPointerException if the given array is {@code null}                    
                </throws>
            </javadoc>
            <method name="setSelectedIndices" type="void" line="2231">
                <params>
                    <param name="indices" type="int[]"/>
                </params>
                <declaration name="sm" type="ListSelectionModel" line="2232"/>
                <declaration name="size" type="int" line="2234"/>
                <scope line="2235">
                    <scope line="2236"/>
                </scope>
            </method>
            <javadoc line="2243">
                Returns an array of all the selected values, in increasing order based
                  on their indices in the list.                
                <return>
                    the selected values, or an empty array if nothing is selected                    
                </return>
                <see>
                    #isSelectedIndex                    
                </see>
                <see>
                    #getModel                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
                <deprecated>
                    As of JDK 1.7, replaced by {@link #getSelectedValuesList()}                    
                </deprecated>
            </javadoc>
            <method name="getSelectedValues" type="Object[]" line="2255">
                <declaration name="sm" type="ListSelectionModel" line="2256"/>
                <declaration name="dm" type="ListModel&lt;E&gt;" line="2257"/>
                <declaration name="iMin" type="int" line="2259"/>
                <declaration name="iMax" type="int" line="2260"/>
                <scope line="2262"/>
                <declaration name="rvTmp" type="Object[]" line="2266"/>
                <declaration name="n" type="int" line="2267"/>
                <scope line="2268">
                    <scope line="2269"/>
                </scope>
                <declaration name="rv" type="Object[]" line="2273"/>
            </method>
            <javadoc line="2278">
                Returns a list of all the selected items, in increasing order based
                  on their indices in the list.                
                <return>
                    the selected items, or an empty list if nothing is selected                    
                </return>
                <see>
                    #isSelectedIndex                    
                </see>
                <see>
                    #getModel                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
                <since>
                    1.7                    
                </since>
            </javadoc>
            <method name="getSelectedValuesList" type="List<E>" line="2289">
                <declaration name="sm" type="ListSelectionModel" line="2290"/>
                <declaration name="dm" type="ListModel&lt;E&gt;" line="2291"/>
                <declaration name="iMin" type="int" line="2293"/>
                <declaration name="iMax" type="int" line="2294"/>
                <scope line="2296"/>
                <declaration name="selectedItems" type="List&lt;E&gt;" line="2300"/>
                <scope line="2301">
                    <scope line="2302"/>
                </scope>
            </method>
            <javadoc line="2310">
                Returns the smallest selected cell index; &lt;i&gt;the selection&lt;/i&gt; when only
                  a single item is selected in the list. When multiple items are selected,
                  it is simply the smallest selected index. Returns {@code -1} if there is
                  no selection.
                  &lt;p&gt;
                  This method is a cover that delegates to {@code getMinSelectionIndex}.                
                <return>
                    the smallest selected cell index                    
                </return>
                <see>
                    #getMinSelectionIndex                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
            <method name="getSelectedIndex" type="int" line="2322"/>
            <javadoc line="2327">
                Returns the value for the smallest selected cell index;
                  &lt;i&gt;the selected value&lt;/i&gt; when only a single item is selected in the
                  list. When multiple items are selected, it is simply the value for the
                  smallest selected index. Returns {@code null} if there is no selection.
                  &lt;p&gt;
                  This is a convenience method that simply returns the model value for{@code getMinSelectionIndex}.                
                <return>
                    the first selected value                    
                </return>
                <see>
                    #getMinSelectionIndex                    
                </see>
                <see>
                    #getModel                    
                </see>
                <see>
                    #addListSelectionListener                    
                </see>
            </javadoc>
            <method name="getSelectedValue" type="E" line="2341">
                <declaration name="i" type="int" line="2342"/>
            </method>
            <javadoc line="2347">
                Selects the specified object from the list.                
                <param>
                    anObject      the object to select                    
                </param>
                <param>
                    shouldScroll  {@code true} if the list should scroll to display
                      the selected object, if one exists; otherwise {@code false}                    
                </param>
            </javadoc>
            <method name="setSelectedValue" type="void" line="2354">
                <params>
                    <param name="anObject" type="Object"/>
                    <param name="shouldScroll" type="boolean"/>
                </params>
                <comment line="2365">
                                        
                </comment>
                <comment line="2370">
                                        
                </comment>
                <scope line="2357">
                    <declaration name="i" type="int" line="2358"/>
                    <declaration name="dm" type="ListModel&lt;E&gt;" line="2359"/>
                    <scope line="2361"/>
                </scope>
            </method>
            <javadoc line="2375">
                --- The Scrollable Implementation ---                
            </javadoc>
            <method name="checkScrollableParameters" type="void" line="2379">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                </params>
                <scope line="2380"/>
            </method>
            <javadoc line="2393">
                Computes the size of viewport needed to display {@code visibleRowCount}rows. The value returned by this method depends on the layout
                  orientation:
                  &lt;p&gt;
                  &lt;b&gt;{@code VERTICAL}:&lt;/b&gt;
                  &lt;br&gt;
                  This is trivial if both {@code fixedCellWidth} and {@code fixedCellHeight}have been set (either explicitly or by specifying a prototype cell value).
                  The width is simply the {@code fixedCellWidth} plus the list&apos;s horizontal
                  insets. The height is the {@code fixedCellHeight} multiplied by the{@code visibleRowCount}, plus the list&apos;s vertical insets.
                  &lt;p&gt;
                  If either {@code fixedCellWidth} or {@code fixedCellHeight} haven&apos;t been
                  specified, heuristics are used. If the model is empty, the width is
                  the {@code fixedCellWidth}, if greater than {@code 0}, or a hard-coded
                  value of {@code 256}. The height is the {@code fixedCellHeight} multiplied
                  by {@code visibleRowCount}, if {@code fixedCellHeight} is greater than{@code 0}, otherwise it is a hard-coded value of {@code 16} multiplied by{@code visibleRowCount}.
                  &lt;p&gt;
                  If the model isn&apos;t empty, the width is the preferred size&apos;s width,
                  typically the width of the widest list element. The height is the{@code fixedCellHeight} multiplied by the {@code visibleRowCount},
                  plus the list&apos;s vertical insets.
                  &lt;p&gt;
                  &lt;b&gt;{@code VERTICAL_WRAP} or {@code HORIZONTAL_WRAP}:&lt;/b&gt;
                  &lt;br&gt;
                  This method simply returns the value from {@code getPreferredSize}.
                  The list&apos;s {@code ListUI} is expected to override {@code getPreferredSize}to return an appropriate value.                
                <return>
                    a dimension containing the size of the viewport needed
                      to display {@code visibleRowCount} rows                    
                </return>
                <see>
                    #getPreferredScrollableViewportSize                    
                </see>
                <see>
                    #setPrototypeCellValue                    
                </see>
            </javadoc>
            <method name="getPreferredScrollableViewportSize" type="Dimension" line="2431">
                <comment line="2456">
                    Will only happen if UI null, shouldn&apos;t matter what we return                    
                </comment>
                <scope line="2432"/>
                <declaration name="insets" type="Insets" line="2435"/>
                <declaration name="dx" type="int" line="2436"/>
                <declaration name="dy" type="int" line="2437"/>
                <declaration name="visibleRowCount" type="int" line="2439"/>
                <declaration name="fixedCellWidth" type="int" line="2440"/>
                <declaration name="fixedCellHeight" type="int" line="2441"/>
                <scope line="2443">
                    <declaration name="width" type="int" line="2444"/>
                    <declaration name="height" type="int" line="2445"/>
                </scope>
                <scope line="2448">
                    <declaration name="width" type="int" line="2449"/>
                    <declaration name="height" type="int" line="2450"/>
                    <declaration name="r" type="Rectangle" line="2451"/>
                    <scope line="2452"/>
                    <scope line="2455"/>
                </scope>
                <scope line="2461"/>
            </method>
            <javadoc line="2469">
                Returns the distance to scroll to expose the next or previous
                  row (for vertical scrolling) or column (for horizontal scrolling).
                  &lt;p&gt;
                  For horizontal scrolling, if the layout orientation is {@code VERTICAL},
                  then the list&apos;s font size is returned (or {@code 1} if the font is{@code null}).                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation {@code SwingConstants.HORIZONTAL} or{@code SwingConstants.VERTICAL}                    
                </param>
                <param>
                    direction less or equal to zero to scroll up/back,
                      greater than zero for down/forward                    
                </param>
                <return>
                    the "unit" increment for scrolling in the specified direction;
                      always positive                    
                </return>
                <see>
                    #getScrollableBlockIncrement                    
                </see>
                <see>
                    Scrollable#getScrollableUnitIncrement                    
                </see>
                <throws>
                    IllegalArgumentException if {@code visibleRect} is {@code null}, or{@code orientation} isn't one of {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}                    
                </throws>
            </javadoc>
            <method name="getScrollableUnitIncrement" type="int" line="2491">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="2501">
                                        
                </comment>
                <comment line="2506">
                                        
                </comment>
                <comment line="2510">
                    The first row is completely visible and it&apos;s row 0.
                     We&apos;re done.                    
                </comment>
                <comment line="2516">
                    The first row is completely visible, return the
                     height of the previous row or 0 if the first row
                     is the top row of the list.                    
                </comment>
                <comment line="2531">
                    The first row is partially visible, return the
                     height of hidden part.                    
                </comment>
                <comment line="2571">
                    Show remainder of leading cell                    
                </comment>
                <comment line="2576">
                    Hide rest of leading cell                    
                </comment>
                <comment line="2580">
                    Hide rest of leading cell                    
                </comment>
                <comment line="2584">
                    ASSUME: All cells are the same width                    
                </comment>
                <scope line="2494">
                    <declaration name="row" type="int" line="2495"/>
                    <scope line="2497"/>
                    <scope line="2500">
                        <scope line="2502">
                            <declaration name="r" type="Rectangle" line="2503"/>
                        </scope>
                        <scope line="2507">
                            <declaration name="r" type="Rectangle" line="2508"/>
                            <scope line="2513"/>
                            <scope line="2520">
                                <declaration name="loc" type="Point" line="2521"/>
                                <declaration name="prevIndex" type="int" line="2523"/>
                                <declaration name="prevR" type="Rectangle" line="2524"/>
                                <scope line="2526"/>
                            </scope>
                            <scope line="2534"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="2540">
                    <declaration name="leftToRight" type="boolean" line="2541"/>
                    <declaration name="index" type="int" line="2542"/>
                    <declaration name="leadingPoint" type="Point" line="2543"/>
                    <scope line="2545"/>
                    <scope line="2548"/>
                    <scope line="2554">
                        <declaration name="cellBounds" type="Rectangle" line="2555"/>
                        <scope line="2556">
                            <declaration name="leadingVisibleEdge" type="int" line="2557"/>
                            <declaration name="leadingCellEdge" type="int" line="2558"/>
                            <scope line="2560"/>
                            <scope line="2564"/>
                            <scope line="2569">
                                <scope line="2570"/>
                                <scope line="2575"/>
                                <scope line="2579"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <declaration name="f" type="Font" line="2589"/>
            </method>
            <javadoc line="2594">
                Returns the distance to scroll to expose the next or previous block.
                  &lt;p&gt;
                  For vertical scrolling, the following rules are used:
                  &lt;ul&gt;
                  &lt;li&gt;if scrolling down, returns the distance to scroll so that the last
                  visible element becomes the first completely visible element
                  &lt;li&gt;if scrolling up, returns the distance to scroll so that the first
                  visible element becomes the last completely visible element
                  &lt;li&gt;returns {@code visibleRect.height} if the list is empty
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For horizontal scrolling, when the layout orientation is either{@code VERTICAL_WRAP} or {@code HORIZONTAL_WRAP}:
                  &lt;ul&gt;
                  &lt;li&gt;if scrolling right, returns the distance to scroll so that the
                  last visible element becomes
                  the first completely visible element
                  &lt;li&gt;if scrolling left, returns the distance to scroll so that the first
                  visible element becomes the last completely visible element
                  &lt;li&gt;returns {@code visibleRect.width} if the list is empty
                  &lt;/ul&gt;
                  &lt;p&gt;
                  For horizontal scrolling and {@code VERTICAL} orientation,
                  returns {@code visibleRect.width}.
                  &lt;p&gt;
                  Note that the value of {@code visibleRect} must be the equal to{@code this.getVisibleRect()}.                
                <param>
                    visibleRect the view area visible within the viewport                    
                </param>
                <param>
                    orientation {@code SwingConstants.HORIZONTAL} or{@code SwingConstants.VERTICAL}                    
                </param>
                <param>
                    direction less or equal to zero to scroll up/back,
                      greater than zero for down/forward                    
                </param>
                <return>
                    the "block" increment for scrolling in the specified direction;
                      always positive                    
                </return>
                <see>
                    #getScrollableUnitIncrement                    
                </see>
                <see>
                    Scrollable#getScrollableBlockIncrement                    
                </see>
                <throws>
                    IllegalArgumentException if {@code visibleRect} is {@code null}, or{@code orientation} isn't one of {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}                    
                </throws>
            </javadoc>
            <method name="getScrollableBlockIncrement" type="int" line="2636">
                <params>
                    <param name="visibleRect" type="Rectangle"/>
                    <param name="orientation" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="2640">
                                        
                </comment>
                <comment line="2642">
                    last cell is the lowest left cell                    
                </comment>
                <comment line="2654">
                                        
                </comment>
                <comment line="2688">
                                        
                </comment>
                <comment line="2690">
                    position is upper right if ltr, or upper left otherwise                    
                </comment>
                <comment line="2711">
                                        
                </comment>
                <comment line="2713">
                    position is upper left corner of the visibleRect shifted                    
                </comment>
                <comment line="2714">
                    left by the visibleRect.width if ltr, or upper right shifted                    
                </comment>
                <comment line="2715">
                    right by the visibleRect.width otherwise                    
                </comment>
                <comment line="2724">
                    the right of the first cell                    
                </comment>
                <scope line="2638">
                    <declaration name="inc" type="int" line="2639"/>
                    <scope line="2641">
                        <declaration name="last" type="int" line="2643"/>
                        <scope line="2644">
                            <declaration name="lastRect" type="Rectangle" line="2645"/>
                            <scope line="2646">
                                <scope line="2648"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2655">
                        <declaration name="newFirst" type="int" line="2656"/>
                        <declaration name="first" type="int" line="2657"/>
                        <scope line="2658">
                            <scope line="2659"/>
                            <declaration name="newFirstRect" type="Rectangle" line="2662"/>
                            <declaration name="firstRect" type="Rectangle" line="2663"/>
                            <scope line="2664">
                                <scope line="2667"/>
                                <scope line="2672">
                                    <scope line="2675"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="2685">
                    <declaration name="leftToRight" type="boolean" line="2686"/>
                    <declaration name="inc" type="int" line="2687"/>
                    <scope line="2689">
                        <declaration name="x" type="int" line="2691"/>
                        <declaration name="last" type="int" line="2692"/>
                        <scope line="2694">
                            <declaration name="lastRect" type="Rectangle" line="2695"/>
                            <scope line="2696">
                                <scope line="2697"/>
                                <scope line="2699"/>
                                <scope line="2703"/>
                                <scope line="2705"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2712">
                        <declaration name="x" type="int" line="2716"/>
                        <declaration name="first" type="int" line="2719"/>
                        <scope line="2721">
                            <declaration name="firstRect" type="Rectangle" line="2722"/>
                            <scope line="2723">
                                <declaration name="firstRight" type="int" line="2725"/>
                                <scope line="2727">
                                    <scope line="2729"/>
                                    <scope line="2731"/>
                                </scope>
                                <scope line="2734">
                                    <declaration name="visibleRight" type="int" line="2735"/>
                                    <scope line="2738"/>
                                    <scope line="2740"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="2753">
                Returns {@code true} if this {@code JList} is displayed in a{@code JViewport} and the viewport is wider than the list&apos;s
                  preferred width, or if the layout orientation is {@code HORIZONTAL_WRAP}and {@code visibleRowCount &lt;= 0}; otherwise returns {@code false}.
                  &lt;p&gt;
                  If {@code false}, then don&apos;t track the viewport&apos;s width. This allows
                  horizontal scrolling if the {@code JViewport} is itself embedded in a{@code JScrollPane}.                
                <return>
                    whether or not an enclosing viewport should force the list's
                      width to match its own                    
                </return>
                <see>
                    Scrollable#getScrollableTracksViewportWidth                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportWidth" type="boolean" line="2767">
                <scope line="2769"/>
                <declaration name="parent" type="Container" line="2772"/>
                <scope line="2773"/>
            </method>
            <javadoc line="2779">
                Returns {@code true} if this {@code JList} is displayed in a{@code JViewport} and the viewport is taller than the list&apos;s
                  preferred height, or if the layout orientation is {@code VERTICAL_WRAP}and {@code visibleRowCount &lt;= 0}; otherwise returns {@code false}.
                  &lt;p&gt;
                  If {@code false}, then don&apos;t track the viewport&apos;s height. This allows
                  vertical scrolling if the {@code JViewport} is itself embedded in a{@code JScrollPane}.                
                <return>
                    whether or not an enclosing viewport should force the list's
                      height to match its own                    
                </return>
                <see>
                    Scrollable#getScrollableTracksViewportHeight                    
                </see>
            </javadoc>
            <method name="getScrollableTracksViewportHeight" type="boolean" line="2793">
                <scope line="2795"/>
                <declaration name="parent" type="Container" line="2798"/>
                <scope line="2799"/>
            </method>
            <method name="writeObject" type="void" line="2810">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="2812">
                    <declaration name="count" type="byte" line="2813"/>
                    <scope line="2815"/>
                </scope>
            </method>
            <javadoc line="2822">
                Returns a {@code String} representation of this {@code JList}.
                  This method is intended to be used only for debugging purposes,
                  and the content and format of the returned {@code String} may vary
                  between implementations. The returned {@code String} may be empty,
                  but may not be {@code null}.                
                <return>
                    a {@code String} representation of this {@code JList}.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="2831">
                <declaration name="selectionForegroundString" type="String" line="2832"/>
                <declaration name="selectionBackgroundString" type="String" line="2835"/>
            </method>
            <javadoc line="2854">
                Gets the {@code AccessibleContext} associated with this {@code JList}.
                  For {@code JList}, the {@code AccessibleContext} takes the form of an{@code AccessibleJList}.
                  &lt;p&gt;
                  A new {@code AccessibleJList} instance is created if necessary.                
                <return>
                    an {@code AccessibleJList} that serves as the{@code AccessibleContext} of this {@code JList}                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="2864">
                <scope line="2865"/>
            </method>
            <class name="AccessibleJList" line="2871">
                <extends class="AccessibleJComponent"/>
                <comment line="3018">
                    AccessibleContext methods                    
                </comment>
                <comment line="3102">
                    AccessibleSelection methods                    
                </comment>
                <comment line="3734">
                    inner class AccessibleJListChild                    
                </comment>
                <implements interface="AccessibleSelection"/>
                <implements interface="PropertyChangeListener"/>
                <implements interface="ListSelectionListener"/>
                <implements interface="ListDataListener"/>
                <javadoc line="2871">
                    This class implements accessibility support for the{@code JList} class. It provides an implementation of the
                      Java Accessibility API appropriate to list user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <declaration name="leadSelectionIndex" type="int" line="2890"/>
                <method name="AccessibleJList" type="constructor" line="2892"/>
                <javadoc line="2900">
                    Property Change Listener change method. Used to track changes
                      to the DataModel and ListSelectionModel, in order to re-set
                      listeners to those for reporting changes there via the Accessibility
                      PropertyChange mechanism.                    
                    <param>
                        e PropertyChangeEvent                        
                    </param>
                </javadoc>
                <method name="propertyChange" type="void" line="2908">
                    <params>
                        <param name="e" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="2913">
                        re-set listData listeners                        
                    </comment>
                    <comment line="2923">
                        re-set listSelectionModel listeners                        
                    </comment>
                    <declaration name="name" type="String" line="2909"/>
                    <declaration name="oldValue" type="Object" line="2910"/>
                    <declaration name="newValue" type="Object" line="2911"/>
                    <scope line="2914">
                        <scope line="2916"/>
                        <scope line="2919"/>
                    </scope>
                    <scope line="2924">
                        <scope line="2926"/>
                        <scope line="2929"/>
                    </scope>
                </method>
                <javadoc line="2939">
                    List Selection Listener value change method. Used to fire
                      the property change                    
                    <param>
                        e ListSelectionEvent                        
                    </param>
                </javadoc>
                <method name="valueChanged" type="void" line="2946">
                    <params>
                        <param name="e" type="ListSelectionEvent"/>
                    </params>
                    <comment line="2966">
                        Process the State changes for Multiselectable                        
                    </comment>
                    <declaration name="oldLeadSelectionIndex" type="int" line="2947"/>
                    <scope line="2949">
                        <declaration name="oldLS" type="Accessible" line="2950"/>
                    </scope>
                    <declaration name="s" type="AccessibleStateSet" line="2967"/>
                    <declaration name="lsm" type="ListSelectionModel" line="2968"/>
                    <scope line="2969">
                        <scope line="2970"/>
                    </scope>
                    <scope line="2975">
                        <scope line="2976"/>
                    </scope>
                </method>
                <javadoc line="2984">
                    List Data Listener interval added method. Used to fire the visible data property change                    
                    <param>
                        e ListDataEvent                        
                    </param>
                </javadoc>
                <method name="intervalAdded" type="void" line="2990">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <javadoc line="2995">
                    List Data Listener interval removed method. Used to fire the visible data property change                    
                    <param>
                        e ListDataEvent                        
                    </param>
                </javadoc>
                <method name="intervalRemoved" type="void" line="3001">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <javadoc line="3006">
                    List Data Listener contents changed method. Used to fire the visible data property change                    
                    <param>
                        e ListDataEvent                        
                    </param>
                </javadoc>
                <method name="contentsChanged" type="void" line="3012">
                    <params>
                        <param name="e" type="ListDataEvent"/>
                    </params>
                </method>
                <javadoc line="3019">
                    Get the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="3026">
                    <declaration name="states" type="AccessibleStateSet" line="3027"/>
                    <scope line="3029"/>
                </method>
                <javadoc line="3035">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="3042"/>
                <javadoc line="3046">
                    Returns the &lt;code&gt;Accessible&lt;/code&gt; child contained at
                      the local coordinate &lt;code&gt;Point&lt;/code&gt;, if one exists.
                      Otherwise returns &lt;code&gt;null&lt;/code&gt;.                    
                    <return>
                        the <code>Accessible</code> at the specified
                          location, if it exists                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="3054">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="i" type="int" line="3055"/>
                    <scope line="3056"/>
                    <scope line="3058"/>
                </method>
                <javadoc line="3063">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement Accessible, than this
                      method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="3070"/>
                <javadoc line="3074">
                    Return the nth Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="3080">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="3081"/>
                    <scope line="3083"/>
                </method>
                <javadoc line="3088">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="3096"/>
                <javadoc line="3103">
                    Returns the number of items currently selected.
                      If no items are selected, the return value will be 0.                    
                    <return>
                        the number of items currently selected.                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="3109"/>
                <javadoc line="3113">
                    Returns an Accessible representing the specified selected item
                      in the object.  If there isn&apos;t a selection, or there are
                      fewer items selected than the integer passed in, the return
                      value will be &lt;code&gt;null&lt;/code&gt;.                    
                    <param>
                        i the zero-based index of selected items                        
                    </param>
                    <return>
                        an Accessible containing the selected item                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="3122">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <declaration name="len" type="int" line="3123"/>
                    <scope line="3124"/>
                    <scope line="3126"/>
                </method>
                <javadoc line="3131">
                    Returns true if the current child of this object is selected.                    
                    <param>
                        i the zero-based index of the child in this Accessible
                          object.                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="3138">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="3142">
                    Adds the specified selected item in the object to the object&apos;s
                      selection.  If the object supports multiple selections,
                      the specified item is added to any existing selection, otherwise
                      it replaces any existing selection in the object.  If the
                      specified item is already selected, this method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="3151">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="3155">
                    Removes the specified selected item in the object from the object&apos;s
                      selection.  If the specified item isn&apos;t currently selected, this
                      method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="3162">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="3166">
                    Clears the selection in the object, so that nothing in the
                      object is selected.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="3170"/>
                <javadoc line="3174">
                    Causes every selected item in the object to be selected
                      if the object supports multiple selections.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="3178"/>
                <class name="AccessibleJListChild" line="3182">
                    <extends class="AccessibleContext"/>
                    <comment line="3242">
                        Accessible Methods                        
                    </comment>
                    <comment line="3255">
                        AccessibleContext methods                        
                    </comment>
                    <comment line="3405">
                        AccessibleComponent methods                        
                    </comment>
                    <comment line="3716">
                        TIGER - 4733624                        
                    </comment>
                    <implements interface="Accessible"/>
                    <implements interface="AccessibleComponent"/>
                    <javadoc line="3182">
                        This class implements accessibility support appropriate
                          for list children.                        
                    </javadoc>
                    <declaration name="parent" type="JList&lt;E&gt;" line="3188"/>
                    <declaration name="indexInParent" type="int" line="3189"/>
                    <declaration name="component" type="Component" line="3190"/>
                    <declaration name="accessibleContext" type="AccessibleContext" line="3191"/>
                    <declaration name="listModel" type="ListModel&lt;E&gt;" line="3192"/>
                    <declaration name="cellRenderer" type="ListCellRenderer&lt;? super E&gt;" line="3193"/>
                    <method name="AccessibleJListChild" type="constructor" line="3195">
                        <params>
                            <param name="parent" type="JList<E>"/>
                            <param name="indexInParent" type="int"/>
                        </params>
                        <scope line="3199"/>
                    </method>
                    <method name="getCurrentComponent" type="Component" line="3205"/>
                    <method name="getCurrentAccessibleContext" type="AccessibleContext" line="3209">
                        <declaration name="c" type="Component" line="3210"/>
                        <scope line="3211"/>
                        <scope line="3213"/>
                    </method>
                    <method name="getComponentAtIndex" type="Component" line="3218">
                        <params>
                            <param name="index" type="int"/>
                        </params>
                        <scope line="3219"/>
                        <scope line="3224">
                            <declaration name="value" type="E" line="3225"/>
                            <declaration name="isSelected" type="boolean" line="3226"/>
                            <declaration name="isFocussed" type="boolean" line="3227"/>
                        </scope>
                        <scope line="3235"/>
                    </method>
                    <javadoc line="3242">
                        Get the AccessibleContext for this object. In the
                          implementation of the Java Accessibility API for this class,
                          returns this object, which is its own AccessibleContext.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleContext" type="AccessibleContext" line="3249"/>
                    <method name="getAccessibleName" type="String" line="3256">
                        <declaration name="ac" type="AccessibleContext" line="3257"/>
                        <scope line="3258"/>
                        <scope line="3260"/>
                    </method>
                    <method name="setAccessibleName" type="void" line="3265">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3266"/>
                        <scope line="3267"/>
                    </method>
                    <method name="getAccessibleDescription" type="String" line="3272">
                        <declaration name="ac" type="AccessibleContext" line="3273"/>
                        <scope line="3274"/>
                        <scope line="3276"/>
                    </method>
                    <method name="setAccessibleDescription" type="void" line="3281">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3282"/>
                        <scope line="3283"/>
                    </method>
                    <method name="getAccessibleRole" type="AccessibleRole" line="3288">
                        <declaration name="ac" type="AccessibleContext" line="3289"/>
                        <scope line="3290"/>
                        <scope line="3292"/>
                    </method>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="3297">
                        <comment line="3324">
                            cell-rendered                            
                        </comment>
                        <declaration name="ac" type="AccessibleContext" line="3298"/>
                        <declaration name="s" type="AccessibleStateSet" line="3299"/>
                        <scope line="3300"/>
                        <scope line="3302"/>
                        <scope line="3308"/>
                        <scope line="3311"/>
                        <scope line="3314"/>
                        <scope line="3316"/>
                        <scope line="3319"/>
                        <scope line="3321"/>
                    </method>
                    <method name="getAccessibleIndexInParent" type="int" line="3328"/>
                    <method name="getAccessibleChildrenCount" type="int" line="3332">
                        <declaration name="ac" type="AccessibleContext" line="3333"/>
                        <scope line="3334"/>
                        <scope line="3336"/>
                    </method>
                    <method name="getAccessibleChild" type="Accessible" line="3341">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3342"/>
                        <scope line="3343">
                            <declaration name="accessibleChild" type="Accessible" line="3344"/>
                        </scope>
                        <scope line="3347"/>
                    </method>
                    <method name="getLocale" type="Locale" line="3352">
                        <declaration name="ac" type="AccessibleContext" line="3353"/>
                        <scope line="3354"/>
                        <scope line="3356"/>
                    </method>
                    <method name="addPropertyChangeListener" type="void" line="3361">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3362"/>
                        <scope line="3363"/>
                    </method>
                    <method name="removePropertyChangeListener" type="void" line="3368">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3369"/>
                        <scope line="3370"/>
                    </method>
                    <method name="getAccessibleAction" type="AccessibleAction" line="3375"/>
                    <javadoc line="3379">
                        Get the AccessibleComponent associated with this object.  In the
                          implementation of the Java Accessibility API for this class,
                          return this object, which is responsible for implementing the
                          AccessibleComponent interface on behalf of itself.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleComponent" type="AccessibleComponent" line="3387">
                        <comment line="3388">
                            to override getBounds()                            
                        </comment>
                    </method>
                    <method name="getAccessibleSelection" type="AccessibleSelection" line="3391"/>
                    <method name="getAccessibleText" type="AccessibleText" line="3395"/>
                    <method name="getAccessibleValue" type="AccessibleValue" line="3399"/>
                    <method name="getBackground" type="Color" line="3406">
                        <declaration name="ac" type="AccessibleContext" line="3407"/>
                        <scope line="3408"/>
                        <scope line="3410">
                            <declaration name="c" type="Component" line="3411"/>
                            <scope line="3412"/>
                            <scope line="3414"/>
                        </scope>
                    </method>
                    <method name="setBackground" type="void" line="3420">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3421"/>
                        <scope line="3422"/>
                        <scope line="3424">
                            <declaration name="cp" type="Component" line="3425"/>
                            <scope line="3426"/>
                        </scope>
                    </method>
                    <method name="getForeground" type="Color" line="3432">
                        <declaration name="ac" type="AccessibleContext" line="3433"/>
                        <scope line="3434"/>
                        <scope line="3436">
                            <declaration name="c" type="Component" line="3437"/>
                            <scope line="3438"/>
                            <scope line="3440"/>
                        </scope>
                    </method>
                    <method name="setForeground" type="void" line="3446">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3447"/>
                        <scope line="3448"/>
                        <scope line="3450">
                            <declaration name="cp" type="Component" line="3451"/>
                            <scope line="3452"/>
                        </scope>
                    </method>
                    <method name="getCursor" type="Cursor" line="3458">
                        <declaration name="ac" type="AccessibleContext" line="3459"/>
                        <scope line="3460"/>
                        <scope line="3462">
                            <declaration name="c" type="Component" line="3463"/>
                            <scope line="3464"/>
                            <scope line="3466">
                                <declaration name="ap" type="Accessible" line="3467"/>
                                <scope line="3468"/>
                                <scope line="3470"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="setCursor" type="void" line="3477">
                        <params>
                            <param name="c" type="Cursor"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3478"/>
                        <scope line="3479"/>
                        <scope line="3481">
                            <declaration name="cp" type="Component" line="3482"/>
                            <scope line="3483"/>
                        </scope>
                    </method>
                    <method name="getFont" type="Font" line="3489">
                        <declaration name="ac" type="AccessibleContext" line="3490"/>
                        <scope line="3491"/>
                        <scope line="3493">
                            <declaration name="c" type="Component" line="3494"/>
                            <scope line="3495"/>
                            <scope line="3497"/>
                        </scope>
                    </method>
                    <method name="setFont" type="void" line="3503">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3504"/>
                        <scope line="3505"/>
                        <scope line="3507">
                            <declaration name="c" type="Component" line="3508"/>
                            <scope line="3509"/>
                        </scope>
                    </method>
                    <method name="getFontMetrics" type="FontMetrics" line="3515">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3516"/>
                        <scope line="3517"/>
                        <scope line="3519">
                            <declaration name="c" type="Component" line="3520"/>
                            <scope line="3521"/>
                            <scope line="3523"/>
                        </scope>
                    </method>
                    <method name="isEnabled" type="boolean" line="3529">
                        <declaration name="ac" type="AccessibleContext" line="3530"/>
                        <scope line="3531"/>
                        <scope line="3533">
                            <declaration name="c" type="Component" line="3534"/>
                            <scope line="3535"/>
                            <scope line="3537"/>
                        </scope>
                    </method>
                    <method name="setEnabled" type="void" line="3543">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3544"/>
                        <scope line="3545"/>
                        <scope line="3547">
                            <declaration name="c" type="Component" line="3548"/>
                            <scope line="3549"/>
                        </scope>
                    </method>
                    <method name="isVisible" type="boolean" line="3555">
                        <comment line="3558">
                            The UI incorrectly returns a -1 for the last                            
                        </comment>
                        <comment line="3559">
                            visible index if the list is smaller than the                            
                        </comment>
                        <comment line="3560">
                            viewport size.                            
                        </comment>
                        <declaration name="fi" type="int" line="3556"/>
                        <declaration name="li" type="int" line="3557"/>
                        <scope line="3561"/>
                    </method>
                    <method name="setVisible" type="void" line="3568">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                    </method>
                    <method name="isShowing" type="boolean" line="3571"/>
                    <method name="contains" type="boolean" line="3575">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3576"/>
                        <scope line="3577">
                            <declaration name="r" type="Rectangle" line="3578"/>
                        </scope>
                        <scope line="3580">
                            <declaration name="c" type="Component" line="3581"/>
                            <scope line="3582">
                                <declaration name="r" type="Rectangle" line="3583"/>
                            </scope>
                            <scope line="3585"/>
                        </scope>
                    </method>
                    <method name="getLocationOnScreen" type="Point" line="3591">
                        <scope line="3592">
                            <declaration name="listLocation" type="Point" line="3593"/>
                            <declaration name="componentLocation" type="Point" line="3594"/>
                            <scope line="3595"/>
                            <scope line="3598"/>
                        </scope>
                        <scope line="3601"/>
                    </method>
                    <method name="getLocation" type="Point" line="3606">
                        <scope line="3607"/>
                        <scope line="3609"/>
                    </method>
                    <method name="setLocation" type="void" line="3614">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <scope line="3615"/>
                    </method>
                    <method name="getBounds" type="Rectangle" line="3620">
                        <scope line="3621"/>
                        <scope line="3623"/>
                    </method>
                    <method name="setBounds" type="void" line="3628">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3629"/>
                        <scope line="3630"/>
                    </method>
                    <method name="getSize" type="Dimension" line="3635">
                        <declaration name="cellBounds" type="Rectangle" line="3636"/>
                        <scope line="3637"/>
                        <scope line="3639"/>
                    </method>
                    <method name="setSize" type="void" line="3644">
                        <params>
                            <param name="d" type="Dimension"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3645"/>
                        <scope line="3646"/>
                        <scope line="3648">
                            <declaration name="c" type="Component" line="3649"/>
                            <scope line="3650"/>
                        </scope>
                    </method>
                    <method name="getAccessibleAt" type="Accessible" line="3656">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3657"/>
                        <scope line="3658"/>
                        <scope line="3660"/>
                    </method>
                    <method name="isFocusTraversable" type="boolean" line="3665">
                        <declaration name="ac" type="AccessibleContext" line="3666"/>
                        <scope line="3667"/>
                        <scope line="3669">
                            <declaration name="c" type="Component" line="3670"/>
                            <scope line="3671"/>
                            <scope line="3673"/>
                        </scope>
                    </method>
                    <method name="requestFocus" type="void" line="3679">
                        <declaration name="ac" type="AccessibleContext" line="3680"/>
                        <scope line="3681"/>
                        <scope line="3683">
                            <declaration name="c" type="Component" line="3684"/>
                            <scope line="3685"/>
                        </scope>
                    </method>
                    <method name="addFocusListener" type="void" line="3691">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3692"/>
                        <scope line="3693"/>
                        <scope line="3695">
                            <declaration name="c" type="Component" line="3696"/>
                            <scope line="3697"/>
                        </scope>
                    </method>
                    <method name="removeFocusListener" type="void" line="3703">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="3704"/>
                        <scope line="3705"/>
                        <scope line="3707">
                            <declaration name="c" type="Component" line="3708"/>
                            <scope line="3709"/>
                        </scope>
                    </method>
                    <javadoc line="3716">
                        Returns the icon for the element renderer, as the only item
                          of an array of &lt;code&gt;AccessibleIcon&lt;/code&gt;s or a &lt;code&gt;null&lt;/code&gt; array
                          if the renderer component contains no icons.                        
                        <return>
                            an array containing the accessible icon
                              or a <code>null</code> array if none                            
                        </return>
                        <since>
                            1.3                            
                        </since>
                    </javadoc>
                    <method name="getAccessibleIcon" type="AccessibleIcon[]" line="3725">
                        <declaration name="ac" type="AccessibleContext" line="3726"/>
                        <scope line="3727"/>
                        <scope line="3729"/>
                    </method>
                </class>
            </class>
        </class>
    </source>