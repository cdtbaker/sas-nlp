<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.io.Serializable"/>
        <import package="sun.swing.DefaultLookup"/>
        <class name="DefaultTableCellRenderer" line="39">
            <extends class="JLabel"/>
            <comment line="100">
                We need a place to store the color the JLabel should be returned                
            </comment>
            <comment line="101">
                to after its foreground and background colors have been set                
            </comment>
            <comment line="102">
                to the selection background color.                
            </comment>
            <comment line="103">
                These ivars will be made protected when their names are finalized.                
            </comment>
            <comment line="166">
                implements javax.swing.table.TableCellRenderer                
            </comment>
            <comment line="263">
                The following methods are overridden as a performance measure to
                 to prune code-paths are often called in the case of renders
                 but which we know are unnecessary.  Great care should be taken
                 when writing your own renderer to weigh the benefits and
                 drawbacks of overriding methods like these.                
            </comment>
            <implements interface="TableCellRenderer"/>
            <implements interface="Serializable"/>
            <javadoc line="39">
                The standard class for rendering (displaying) individual cells
                  in a &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;&lt;a name=&quot;override&quot;&gt;Implementation Note:&lt;/a&gt;&lt;/strong&gt;
                  This class inherits from &lt;code&gt;JLabel&lt;/code&gt;, a standard component class.
                  However &lt;code&gt;JTable&lt;/code&gt; employs a unique mechanism for rendering
                  its cells and therefore requires some slightly modified behavior
                  from its cell renderer.
                  The table class defines a single cell renderer and uses it as a
                  as a rubber-stamp for rendering all cells in the table;
                  it renders the first cell,
                  changes the contents of that cell renderer,
                  shifts the origin to the new location, re-draws it, and so on.
                  The standard &lt;code&gt;JLabel&lt;/code&gt; component was not
                  designed to be used this way and we want to avoid
                  triggering a &lt;code&gt;revalidate&lt;/code&gt; each time the
                  cell is drawn. This would greatly decrease performance because the
                  &lt;code&gt;revalidate&lt;/code&gt; message would be
                  passed up the hierarchy of the container to determine whether any other
                  components would be affected.
                  As the renderer is only parented for the lifetime of a painting operation
                  we similarly want to avoid the overhead associated with walking the
                  hierarchy for painting operations.
                  So this class
                  overrides the &lt;code&gt;validate&lt;/code&gt;, &lt;code&gt;invalidate&lt;/code&gt;,
                  &lt;code&gt;revalidate&lt;/code&gt;, &lt;code&gt;repaint&lt;/code&gt;, and
                  &lt;code&gt;firePropertyChange&lt;/code&gt; methods to be
                  no-ops and override the &lt;code&gt;isOpaque&lt;/code&gt; method solely to improve
                  performance.  If you write your own renderer,
                  please keep this performance consideration in mind.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Philip Milne                    
                </author>
                <see>
                    JTable                    
                </see>
            </javadoc>
            <declaration name="SAFE_NO_FOCUS_BORDER" type="Border" line="89"/>
            <javadoc line="89">
                An empty &lt;code&gt;Border&lt;/code&gt;. This field might not be used. To change the
                  &lt;code&gt;Border&lt;/code&gt; used by this renderer override the
                  &lt;code&gt;getTableCellRendererComponent&lt;/code&gt; method and set the border
                  of the returned component directly.                
            </javadoc>
            <declaration name="DEFAULT_NO_FOCUS_BORDER" type="Border" line="96"/>
            <declaration name="noFocusBorder" type="Border" line="97"/>
            <declaration name="unselectedForeground" type="Color" line="103"/>
            <declaration name="unselectedBackground" type="Color" line="104"/>
            <javadoc line="106">
                Creates a default table cell renderer.                
            </javadoc>
            <method name="DefaultTableCellRenderer" type="constructor" line="109"/>
            <method name="getNoFocusBorder" type="Border" line="116">
                <declaration name="border" type="Border" line="117"/>
                <scope line="118"/>
                <scope line="121">
                    <scope line="122"/>
                </scope>
            </method>
            <javadoc line="129">
                Overrides &lt;code&gt;JComponent.setForeground&lt;/code&gt; to assign
                  the unselected-foreground color to the specified color.                
                <param>
                    c set the foreground color to this value                    
                </param>
            </javadoc>
            <method name="setForeground" type="void" line="135">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="140">
                Overrides &lt;code&gt;JComponent.setBackground&lt;/code&gt; to assign
                  the unselected-background color to the specified color.                
                <param>
                    c set the background color to this value                    
                </param>
            </javadoc>
            <method name="setBackground" type="void" line="146">
                <params>
                    <param name="c" type="Color"/>
                </params>
            </method>
            <javadoc line="151">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the look and feel
                  [L&amp;F] has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="159"/>
            <javadoc line="166">
                Returns the default table cell renderer.
                  &lt;p&gt;
                  During a printing operation, this method will be called with
                  &lt;code&gt;isSelected&lt;/code&gt; and &lt;code&gt;hasFocus&lt;/code&gt; values of
                  &lt;code&gt;false&lt;/code&gt; to prevent selection and focus from appearing
                  in the printed output. To do other customization based on whether
                  or not the table is being printed, check the return value from{@link javax.swing.JComponent#isPaintingForPrint()}.                
                <param>
                    table  the <code>JTable</code>                    
                </param>
                <param>
                    value  the value to assign to the cell at
                      <code>[row, column]</code>                    
                </param>
                <param>
                    isSelected true if cell is selected                    
                </param>
                <param>
                    hasFocus true if cell has focus                    
                </param>
                <param>
                    row  the row of the cell to render                    
                </param>
                <param>
                    column the column of the cell to render                    
                </param>
                <return>
                    the default table cell renderer                    
                </return>
                <see>
                    javax.swing.JComponent#isPaintingForPrint()                    
                </see>
            </javadoc>
            <method name="getTableCellRendererComponent" type="Component" line="188">
                <params>
                    <param name="table" type="JTable"/>
                    <param name="value" type="Object"/>
                    <param name="isSelected" type="boolean"/>
                    <param name="hasFocus" type="boolean"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <scope line="189"/>
                <declaration name="fg" type="Color" line="193"/>
                <declaration name="bg" type="Color" line="194"/>
                <declaration name="dropLocation" type="JTable.DropLocation" line="196"/>
                <scope line="201"/>
                <scope line="209"/>
                <scope line="214">
                    <declaration name="background" type="Color" line="215"/>
                    <scope line="218">
                        <declaration name="alternateColor" type="Color" line="219"/>
                        <scope line="220"/>
                    </scope>
                </scope>
                <scope line="232">
                    <declaration name="border" type="Border" line="233"/>
                    <scope line="234"/>
                    <scope line="237"/>
                    <scope line="242">
                        <declaration name="col" type="Color" line="243"/>
                        <scope line="245"/>
                        <scope line="249"/>
                    </scope>
                </scope>
                <scope line="253"/>
            </method>
            <javadoc line="270">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="isOpaque" type="boolean" line="275">
                <comment line="282">
                    p should now be the JTable.                    
                </comment>
                <declaration name="back" type="Color" line="276"/>
                <declaration name="p" type="Component" line="277"/>
                <scope line="278"/>
                <declaration name="colorMatch" type="boolean" line="283"/>
            </method>
            <javadoc line="289">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="invalidate" type="void" line="296"/>
            <javadoc line="298">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="validate" type="void" line="303"/>
            <javadoc line="305">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="revalidate" type="void" line="310"/>
            <javadoc line="312">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="repaint" type="void" line="317">
                <params>
                    <param name="tm" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
            </method>
            <javadoc line="319">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="repaint" type="void" line="324">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
            </method>
            <javadoc line="326">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="333"/>
            <javadoc line="336">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="341">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <comment line="342">
                    Strings get interned...                    
                </comment>
                <scope line="348"/>
            </method>
            <javadoc line="354">
                Overridden for performance reasons.
                  See the &lt;a href=&quot;#override&quot;&gt;Implementation Note&lt;/a&gt;
                  for more information.                
            </javadoc>
            <method name="firePropertyChange" type="void" line="359">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="boolean"/>
                    <param name="newValue" type="boolean"/>
                </params>
            </method>
            <javadoc line="362">
                Sets the &lt;code&gt;String&lt;/code&gt; object for the cell being rendered to
                  &lt;code&gt;value&lt;/code&gt;.                
                <param>
                    value  the string value for this cell; if value is
                      <code>null</code> it sets the text value to an empty string                    
                </param>
                <see>
                    JLabel#setText                    
                </see>
            </javadoc>
            <method name="setValue" type="void" line="371">
                <params>
                    <param name="value" type="Object"/>
                </params>
            </method>
            <class name="UIResource" line="376">
                <extends class="DefaultTableCellRenderer"/>
                <implements interface="javax.swing.plaf.UIResource"/>
                <javadoc line="376">
                    A subclass of &lt;code&gt;DefaultTableCellRenderer&lt;/code&gt; that
                      implements &lt;code&gt;UIResource&lt;/code&gt;.
                      &lt;code&gt;DefaultTableCellRenderer&lt;/code&gt; doesn&apos;t implement
                      &lt;code&gt;UIResource&lt;/code&gt;
                      directly so that applications can safely override the
                      &lt;code&gt;cellRenderer&lt;/code&gt; property with
                      &lt;code&gt;DefaultTableCellRenderer&lt;/code&gt; subclasses.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
            </class>
        </class>
    </source>