<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <interface name="TableModel">
            <javadoc line="4">
                The &lt;code&gt;TableModel&lt;/code&gt; interface specifies the methods the
                  &lt;code&gt;JTable&lt;/code&gt; will use to interrogate a tabular data model. &lt;p&gt;
                  The &lt;code&gt;JTable&lt;/code&gt; can be set up to display any data
                  model which implements the
                  &lt;code&gt;TableModel&lt;/code&gt; interface with a couple of lines of code:  &lt;p&gt;
                  &lt;pre&gt;
                  TableModel myData = new MyTableModel();
                  JTable table = new JTable(myData);
                  &lt;/pre&gt;&lt;p&gt;
                  For further documentation, see &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/table.html#data&quot;&gt;Creating a Table Model&lt;/a&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;                
                <author>
                    Philip Milne                    
                </author>
                <see>
                    JTable                    
                </see>
            </javadoc>
            <method name="getRowCount" type="int" line="21"/>
            <javadoc line="21">
                Returns the number of rows in the model. A
                  &lt;code&gt;JTable&lt;/code&gt; uses this method to determine how many rows it
                  should display.  This method should be quick, as it
                  is called frequently during rendering.                
                <return>
                    the number of rows in the model                    
                </return>
                <see>
                    #getColumnCount                    
                </see>
            </javadoc>
            <method name="getColumnCount" type="int" line="30"/>
            <javadoc line="30">
                Returns the number of columns in the model. A
                  &lt;code&gt;JTable&lt;/code&gt; uses this method to determine how many columns it
                  should create and display by default.                
                <return>
                    the number of columns in the model                    
                </return>
                <see>
                    #getRowCount                    
                </see>
            </javadoc>
            <method name="getColumnName" type="String" line="38"/>
            <javadoc line="38">
                Returns the name of the column at &lt;code&gt;columnIndex&lt;/code&gt;.  This is used
                  to initialize the table&apos;s column header name.  Note: this name does
                  not need to be unique; two columns in a table can have the same name.                
                <param>
                    columnIndex     the index of the column                    
                </param>
                <return>
                    the name of the column                    
                </return>
            </javadoc>
            <method name="getColumnClass" type="Class<?>" line="46"/>
            <javadoc line="46">
                Returns the most specific superclass for all the cell values
                  in the column.  This is used by the &lt;code&gt;JTable&lt;/code&gt; to set up a
                  default renderer and editor for the column.                
                <param>
                    columnIndex  the index of the column                    
                </param>
                <return>
                    the common ancestor class of the object values in the model.                    
                </return>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="54"/>
            <javadoc line="54">
                Returns true if the cell at &lt;code&gt;rowIndex&lt;/code&gt; and
                  &lt;code&gt;columnIndex&lt;/code&gt;
                  is editable.  Otherwise, &lt;code&gt;setValueAt&lt;/code&gt; on the cell will not
                  change the value of that cell.                
                <param>
                    rowIndex        the row whose value to be queried                    
                </param>
                <param>
                    columnIndex     the column whose value to be queried                    
                </param>
                <return>
                    true if the cell is editable                    
                </return>
                <see>
                    #setValueAt                    
                </see>
            </javadoc>
            <method name="getValueAt" type="Object" line="65"/>
            <javadoc line="65">
                Returns the value for the cell at &lt;code&gt;columnIndex&lt;/code&gt; and
                  &lt;code&gt;rowIndex&lt;/code&gt;.                
                <param>
                    rowIndex        the row whose value is to be queried                    
                </param>
                <param>
                    columnIndex     the column whose value is to be queried                    
                </param>
                <return>
                    the value Object at the specified cell                    
                </return>
            </javadoc>
            <method name="setValueAt" type="void" line="73"/>
            <javadoc line="73">
                Sets the value in the cell at &lt;code&gt;columnIndex&lt;/code&gt; and
                  &lt;code&gt;rowIndex&lt;/code&gt; to &lt;code&gt;aValue&lt;/code&gt;.                
                <param>
                    aValue           the new value                    
                </param>
                <param>
                    rowIndex         the row whose value is to be changed                    
                </param>
                <param>
                    columnIndex      the column whose value is to be changed                    
                </param>
                <see>
                    #getValueAt                    
                </see>
                <see>
                    #isCellEditable                    
                </see>
            </javadoc>
            <method name="addTableModelListener" type="void" line="83"/>
            <javadoc line="83">
                Adds a listener to the list that is notified each time a change
                  to the data model occurs.                
                <param>
                    l               the TableModelListener                    
                </param>
            </javadoc>
            <method name="removeTableModelListener" type="void" line="89"/>
            <javadoc line="89">
                Removes a listener from the list that is notified each time a
                  change to the data model occurs.                
                <param>
                    l               the TableModelListener                    
                </param>
            </javadoc>
        </interface>
    </source>