<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="java.text.Collator"/>
        <import package="java.util"/>
        <import package="javax.swing.DefaultRowSorter"/>
        <import package="javax.swing.RowFilter"/>
        <import package="javax.swing.SortOrder"/>
        <class name="TableRowSorter" line="33">
            <type_params>
                <type_param name="M"/>
            </type_params>
            <extends class="DefaultRowSorter">
                <type_params>
                    <type_param name="M"/>
                    <type_param name="Integer"/>
                </type_params>
            </extends>
            <javadoc line="33">
                An implementation of &lt;code&gt;RowSorter&lt;/code&gt; that provides sorting
                  and filtering using a &lt;code&gt;TableModel&lt;/code&gt;.
                  The following example shows adding sorting to a &lt;code&gt;JTable&lt;/code&gt;:
                  &lt;pre&gt;
                  TableModel myModel = createMyTableModel();
                  JTable table = new JTable(myModel);
                  table.setRowSorter(new TableRowSorter(myModel));
                  &lt;/pre&gt;
                  This will do all the wiring such that when the user does the appropriate
                  gesture, such as clicking on the column header, the table will
                  visually sort.
                  &lt;p&gt;
                  &lt;code&gt;JTable&lt;/code&gt;&apos;s row-based methods and &lt;code&gt;JTable&lt;/code&gt;&apos;s
                  selection model refer to the view and not the underlying
                  model. Therefore, it is necessary to convert between the two.  For
                  example, to get the selection in terms of &lt;code&gt;myModel&lt;/code&gt;
                  you need to convert the indices:
                  &lt;pre&gt;
                  int[] selection = table.getSelectedRows();
                  for (int i = 0; i &amp;lt; selection.length; i++) {
                  selection[i] = table.convertRowIndexToModel(selection[i]);
                  }
                  &lt;/pre&gt;
                  Similarly to select a row in &lt;code&gt;JTable&lt;/code&gt; based on
                  a coordinate from the underlying model do the inverse:
                  &lt;pre&gt;
                  table.setRowSelectionInterval(table.convertRowIndexToView(row),
                  table.convertRowIndexToView(row));
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The previous example assumes you have not enabled filtering.  If you
                  have enabled filtering &lt;code&gt;convertRowIndexToView&lt;/code&gt; will return
                  -1 for locations that are not visible in the view.
                  &lt;p&gt;
                  &lt;code&gt;TableRowSorter&lt;/code&gt; uses &lt;code&gt;Comparator&lt;/code&gt;s for doing
                  comparisons. The following defines how a &lt;code&gt;Comparator&lt;/code&gt; is
                  chosen for a column:
                  &lt;ol&gt;
                  &lt;li&gt;If a &lt;code&gt;Comparator&lt;/code&gt; has been specified for the column by the
                  &lt;code&gt;setComparator&lt;/code&gt; method, use it.
                  &lt;li&gt;If the column class as returned by &lt;code&gt;getColumnClass&lt;/code&gt; is
                  &lt;code&gt;String&lt;/code&gt;, use the &lt;code&gt;Comparator&lt;/code&gt; returned by
                  &lt;code&gt;Collator.getInstance()&lt;/code&gt;.
                  &lt;li&gt;If the column class implements &lt;code&gt;Comparable&lt;/code&gt;, use a
                  &lt;code&gt;Comparator&lt;/code&gt; that invokes the &lt;code&gt;compareTo&lt;/code&gt;
                  method.
                  &lt;li&gt;If a &lt;code&gt;TableStringConverter&lt;/code&gt; has been specified, use it
                  to convert the values to &lt;code&gt;String&lt;/code&gt;s and then use the
                  &lt;code&gt;Comparator&lt;/code&gt; returned by &lt;code&gt;Collator.getInstance()&lt;/code&gt;.
                  &lt;li&gt;Otherwise use the &lt;code&gt;Comparator&lt;/code&gt; returned by
                  &lt;code&gt;Collator.getInstance()&lt;/code&gt; on the results from
                  calling &lt;code&gt;toString&lt;/code&gt; on the objects.
                  &lt;/ol&gt;
                  &lt;p&gt;
                  In addition to sorting &lt;code&gt;TableRowSorter&lt;/code&gt; provides the ability
                  to filter.  A filter is specified using the &lt;code&gt;setFilter&lt;/code&gt;
                  method. The following example will only show rows containing the string
                  &quot;foo&quot;:
                  &lt;pre&gt;
                  TableModel myModel = createMyTableModel();
                  TableRowSorter sorter = new TableRowSorter(myModel);
                  sorter.setRowFilter(RowFilter.regexFilter(&quot;.foo.&quot;));
                  JTable table = new JTable(myModel);
                  table.setRowSorter(sorter);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  If the underlying model structure changes (the
                  &lt;code&gt;modelStructureChanged&lt;/code&gt; method is invoked) the following
                  are reset to their default values: &lt;code&gt;Comparator&lt;/code&gt;s by
                  column, current sort order, and whether each column is sortable. The default
                  sort order is natural (the same as the model), and columns are
                  sortable by default.
                  &lt;p&gt;
                  &lt;code&gt;TableRowSorter&lt;/code&gt; has one formal type parameter: the type
                  of the model.  Passing in a type that corresponds exactly to your
                  model allows you to filter based on your model without casting.
                  Refer to the documentation of &lt;code&gt;RowFilter&lt;/code&gt; for an example
                  of this.
                  &lt;p&gt;
                  &lt;b&gt;WARNING:&lt;/b&gt; &lt;code&gt;DefaultTableModel&lt;/code&gt; returns a column
                  class of &lt;code&gt;Object&lt;/code&gt;.  As such all comparisons will
                  be done using &lt;code&gt;toString&lt;/code&gt;.  This may be unnecessarily
                  expensive.  If the column only contains one type of value, such as
                  an &lt;code&gt;Integer&lt;/code&gt;, you should override &lt;code&gt;getColumnClass&lt;/code&gt; and
                  return the appropriate &lt;code&gt;Class&lt;/code&gt;.  This will dramatically
                  increase the performance of this class.                
                <param>
                    <M>
                       the type of the model, which must be an implementation of
                      <code>TableModel</code>                    
                </param>
                <see>
                    javax.swing.JTable                    
                </see>
                <see>
                    javax.swing.RowFilter                    
                </see>
                <see>
                    javax.swing.table.DefaultTableModel                    
                </see>
                <see>
                    java.text.Collator                    
                </see>
                <see>
                    java.util.Comparator                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <declaration name="COMPARABLE_COMPARATOR" type="Comparator" line="131"/>
            <javadoc line="131">
                Comparator that uses compareTo on the contents.                
            </javadoc>
            <declaration name="tableModel" type="M" line="137"/>
            <javadoc line="137">
                Underlying model.                
            </javadoc>
            <declaration name="stringConverter" type="TableStringConverter" line="142"/>
            <javadoc line="142">
                For toString conversions.                
            </javadoc>
            <javadoc line="148">
                Creates a &lt;code&gt;TableRowSorter&lt;/code&gt; with an empty model.                
            </javadoc>
            <method name="TableRowSorter" type="constructor" line="151"/>
            <javadoc line="155">
                Creates a &lt;code&gt;TableRowSorter&lt;/code&gt; using &lt;code&gt;model&lt;/code&gt;
                  as the underlying &lt;code&gt;TableModel&lt;/code&gt;.                
                <param>
                    model the underlying <code>TableModel</code> to use,
                      <code>null</code> is treated as an empty model                    
                </param>
            </javadoc>
            <method name="TableRowSorter" type="constructor" line="162">
                <params>
                    <param name="model" type="M"/>
                </params>
            </method>
            <javadoc line="166">
                Sets the &lt;code&gt;TableModel&lt;/code&gt; to use as the underlying model
                  for this &lt;code&gt;TableRowSorter&lt;/code&gt;.  A value of &lt;code&gt;null&lt;/code&gt;
                  can be used to set an empty model.                
                <param>
                    model the underlying model to use, or <code>null</code>                    
                </param>
            </javadoc>
            <method name="setModel" type="void" line="173">
                <params>
                    <param name="model" type="M"/>
                </params>
            </method>
            <javadoc line="178">
                Sets the object responsible for converting values from the
                  model to strings.  If non-&lt;code&gt;null&lt;/code&gt; this
                  is used to convert any object values, that do not have a
                  registered &lt;code&gt;Comparator&lt;/code&gt;, to strings.                
                <param>
                    stringConverter the object responsible for converting values
                      from the model to strings                    
                </param>
            </javadoc>
            <method name="setStringConverter" type="void" line="187">
                <params>
                    <param name="stringConverter" type="TableStringConverter"/>
                </params>
            </method>
            <javadoc line="191">
                Returns the object responsible for converting values from the
                  model to strings.                
                <return>
                    object responsible for converting values to strings.                    
                </return>
            </javadoc>
            <method name="getStringConverter" type="TableStringConverter" line="197"/>
            <javadoc line="201">
                Returns the &lt;code&gt;Comparator&lt;/code&gt; for the specified
                  column.  If a &lt;code&gt;Comparator&lt;/code&gt; has not been specified using
                  the &lt;code&gt;setComparator&lt;/code&gt; method a &lt;code&gt;Comparator&lt;/code&gt;
                  will be returned based on the column class
                  (&lt;code&gt;TableModel.getColumnClass&lt;/code&gt;) of the specified column.
                  If the column class is &lt;code&gt;String&lt;/code&gt;,
                  &lt;code&gt;Collator.getInstance&lt;/code&gt; is returned.  If the
                  column class implements &lt;code&gt;Comparable&lt;/code&gt; a private
                  &lt;code&gt;Comparator&lt;/code&gt; is returned that invokes the
                  &lt;code&gt;compareTo&lt;/code&gt; method.  Otherwise
                  &lt;code&gt;Collator.getInstance&lt;/code&gt; is returned.                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="getComparator" type="Comparator<?>" line="216">
                <params>
                    <param name="column" type="int"/>
                </params>
                <declaration name="comparator" type="Comparator" line="217"/>
                <scope line="218"/>
                <declaration name="columnClass" type="Class" line="221"/>
                <scope line="222"/>
                <scope line="225"/>
            </method>
            <javadoc line="231">
                {@inheritDoc}                
                <throws>
                    IndexOutOfBoundsException {@inheritDoc}                    
                </throws>
            </javadoc>
            <method name="useToString" type="boolean" line="236">
                <params>
                    <param name="column" type="int"/>
                </params>
                <declaration name="comparator" type="Comparator" line="237"/>
                <scope line="238"/>
                <declaration name="columnClass" type="Class" line="241"/>
                <scope line="242"/>
                <scope line="245"/>
            </method>
            <class name="TableRowSorterModelWrapper" line="251">
                <extends class="ModelWrapper">
                    <type_params>
                        <type_param name="M"/>
                        <type_param name="Integer"/>
                    </type_params>
                </extends>
                <javadoc line="251">
                    Implementation of DefaultRowSorter.ModelWrapper that delegates to a
                      TableModel.                    
                </javadoc>
                <method name="getModel" type="M" line="256"/>
                <method name="getColumnCount" type="int" line="260"/>
                <method name="getRowCount" type="int" line="264"/>
                <method name="getValueAt" type="Object" line="268">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                </method>
                <method name="getStringValueAt" type="String" line="272">
                    <params>
                        <param name="row" type="int"/>
                        <param name="column" type="int"/>
                    </params>
                    <comment line="276">
                        Use the converter                        
                    </comment>
                    <comment line="285">
                        No converter, use getValueAt followed by toString                        
                    </comment>
                    <declaration name="converter" type="TableStringConverter" line="273"/>
                    <scope line="274">
                        <declaration name="value" type="String" line="276"/>
                        <scope line="278"/>
                    </scope>
                    <declaration name="o" type="Object" line="285"/>
                    <scope line="286"/>
                    <declaration name="string" type="String" line="289"/>
                    <scope line="290"/>
                </method>
                <method name="getIdentifier" type="Integer" line="296">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
            </class>
            <class name="ComparableComparator" line="302">
                <implements interface="Comparator"/>
                <method name="compare" type="int" line="304">
                    <params>
                        <param name="o1" type="Object"/>
                        <param name="o2" type="Object"/>
                    </params>
                </method>
            </class>
        </class>
    </source>