<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="sun.swing.table.DefaultTableCellHeaderRenderer"/>
        <import package="java.util"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.Transient"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <class name="JTableHeader" line="15">
            <extends class="JComponent"/>
            <implements interface="TableColumnModelListener"/>
            <implements interface="Accessible"/>
            <javadoc line="15">
                This is the object which manages the header of the &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <see>
                    javax.swing.JTable                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="31"/>
            <javadoc line="31">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="table" type="JTable" line="36"/>
            <javadoc line="36">
                The table for which this object is the header;
                  the default is &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="columnModel" type="TableColumnModel" line="41"/>
            <javadoc line="41">
                The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table header.                
            </javadoc>
            <declaration name="reorderingAllowed" type="boolean" line="45"/>
            <javadoc line="45">
                If true, reordering of columns are allowed by the user;
                  the default is true.                
            </javadoc>
            <declaration name="resizingAllowed" type="boolean" line="50"/>
            <javadoc line="50">
                If true, resizing of columns are allowed by the user;
                  the default is true.                
            </javadoc>
            <declaration name="updateTableInRealTime" type="boolean" line="55"/>
            <javadoc line="55">
                Obsolete as of Java 2 platform v1.3.  Real time repaints, in response
                  to column dragging or resizing, are now unconditional.                
            </javadoc>
            <declaration name="resizingColumn" type="TableColumn" line="60"/>
            <javadoc line="60">
                The index of the column being resized. &lt;code&gt;null&lt;/code&gt; if not resizing.                
            </javadoc>
            <declaration name="draggedColumn" type="TableColumn" line="64"/>
            <javadoc line="64">
                The index of the column being dragged. &lt;code&gt;null&lt;/code&gt; if not dragging.                
            </javadoc>
            <declaration name="draggedDistance" type="int" line="68"/>
            <javadoc line="68">
                The distance from its original position the column has been dragged.                
            </javadoc>
            <declaration name="defaultRenderer" type="TableCellRenderer" line="72"/>
            <javadoc line="72">
                The default renderer to be used when a &lt;code&gt;TableColumn&lt;/code&gt;
                  does not define a &lt;code&gt;headerRenderer&lt;/code&gt;.                
            </javadoc>
            <javadoc line="77">
                Constructs a &lt;code&gt;JTableHeader&lt;/code&gt; with a default
                  &lt;code&gt;TableColumnModel&lt;/code&gt;.                
                <see>
                    #createDefaultColumnModel                    
                </see>
            </javadoc>
            <method name="JTableHeader" type="constructor" line="82"/>
            <javadoc line="85">
                Constructs a &lt;code&gt;JTableHeader&lt;/code&gt; which is initialized with
                  &lt;code&gt;cm&lt;/code&gt; as the column model.  If &lt;code&gt;cm&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt; this method will initialize the table header
                  with a default &lt;code&gt;TableColumnModel&lt;/code&gt;.                
                <param>
                    cm        the column model for the table                    
                </param>
                <see>
                    #createDefaultColumnModel                    
                </see>
            </javadoc>
            <method name="JTableHeader" type="constructor" line="93">
                <params>
                    <param name="cm" type="TableColumnModel"/>
                </params>
            </method>
            <javadoc line="100">
                Sets the table associated with this header.                
                <param>
                    table   the new table                    
                </param>
                <beaninfobound>
                    : true
                      description: The table associated with this header.                    
                </beaninfobound>
            </javadoc>
            <method name="setTable" type="void" line="106">
                <params>
                    <param name="table" type="JTable"/>
                </params>
                <declaration name="old" type="JTable" line="107"/>
            </method>
            <javadoc line="111">
                Returns the table associated with this header.                
                <return>
                    the &lt;code&gt;table&lt;/code&gt; property                    
                </return>
            </javadoc>
            <method name="getTable" type="JTable" line="115"/>
            <javadoc line="118">
                Sets whether the user can drag column headers to reorder columns.                
                <param>
                    reorderingAllowed       true if the table view should allow
                      reordering; otherwise false                    
                </param>
                <see>
                    #getReorderingAllowed                    
                </see>
                <beaninfobound>
                    : true
                      description: Whether the user can drag column headers to reorder columns.                    
                </beaninfobound>
            </javadoc>
            <method name="setReorderingAllowed" type="void" line="126">
                <params>
                    <param name="reorderingAllowed" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="127"/>
            </method>
            <javadoc line="131">
                Returns true if the user is allowed to rearrange columns by
                  dragging their headers, false otherwise. The default is true. You can
                  rearrange columns programmatically regardless of this setting.                
                <return>
                    the &lt;code&gt;reorderingAllowed&lt;/code&gt; property                    
                </return>
                <see>
                    #setReorderingAllowed                    
                </see>
            </javadoc>
            <method name="getReorderingAllowed" type="boolean" line="138"/>
            <javadoc line="141">
                Sets whether the user can resize columns by dragging between headers.                
                <param>
                    resizingAllowed         true if table view should allow
                      resizing                    
                </param>
                <see>
                    #getResizingAllowed                    
                </see>
                <beaninfobound>
                    : true
                      description: Whether the user can resize columns by dragging between headers.                    
                </beaninfobound>
            </javadoc>
            <method name="setResizingAllowed" type="void" line="149">
                <params>
                    <param name="resizingAllowed" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="150"/>
            </method>
            <javadoc line="154">
                Returns true if the user is allowed to resize columns by dragging
                  between their headers, false otherwise. The default is true. You can
                  resize columns programmatically regardless of this setting.                
                <return>
                    the &lt;code&gt;resizingAllowed&lt;/code&gt; property                    
                </return>
                <see>
                    #setResizingAllowed                    
                </see>
            </javadoc>
            <method name="getResizingAllowed" type="boolean" line="161"/>
            <javadoc line="164">
                Returns the the dragged column, if and only if, a drag is in
                  process, otherwise returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the dragged column, if a drag is in
                      process, otherwise returns &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    #getDraggedDistance                    
                </see>
            </javadoc>
            <method name="getDraggedColumn" type="TableColumn" line="171"/>
            <javadoc line="174">
                Returns the column&apos;s horizontal distance from its original
                  position, if and only if, a drag is in process. Otherwise, the
                  the return value is meaningless.                
                <return>
                    the column&apos;s horizontal distance from its original
                      position, if a drag is in process, otherwise the return
                      value is meaningless                    
                </return>
                <see>
                    #getDraggedColumn                    
                </see>
            </javadoc>
            <method name="getDraggedDistance" type="int" line="183"/>
            <javadoc line="186">
                Returns the resizing column.  If no column is being
                  resized this method returns &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the resizing column, if a resize is in process, otherwise
                      returns &lt;code&gt;null&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getResizingColumn" type="TableColumn" line="192"/>
            <javadoc line="195">
                Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to
                  column dragging or resizing, are now unconditional.                
            </javadoc>
            <method name="setUpdateTableInRealTime" type="void" line="199">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="202">
                Obsolete as of Java 2 platform v1.3.  Real time repaints, in response to
                  column dragging or resizing, are now unconditional.                
            </javadoc>
            <method name="getUpdateTableInRealTime" type="boolean" line="206"/>
            <javadoc line="209">
                Sets the default renderer to be used when no &lt;code&gt;headerRenderer&lt;/code&gt;
                  is defined by a &lt;code&gt;TableColumn&lt;/code&gt;.                
                <param>
                    defaultRenderer  the default renderer                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setDefaultRenderer" type="void" line="215">
                <params>
                    <param name="defaultRenderer" type="TableCellRenderer"/>
                </params>
            </method>
            <javadoc line="218">
                Returns the default renderer used when no &lt;code&gt;headerRenderer&lt;/code&gt;
                  is defined by a &lt;code&gt;TableColumn&lt;/code&gt;.                
                <return>
                    the default renderer                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getDefaultRenderer" type="TableCellRenderer" line="224"/>
            <javadoc line="227">
                Returns the index of the column that &lt;code&gt;point&lt;/code&gt; lies in, or -1 if it
                  lies out of bounds.                
                <return>
                    the index of the column that &lt;code&gt;point&lt;/code&gt; lies in, or -1 if it
                      lies out of bounds                    
                </return>
            </javadoc>
            <method name="columnAtPoint" type="int" line="233">
                <params>
                    <param name="point" type="Point"/>
                </params>
                <declaration name="x" type="int" line="234"/>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Returns the rectangle containing the header tile at &lt;code&gt;column&lt;/code&gt;.
                  When the &lt;code&gt;column&lt;/code&gt; parameter is out of bounds this method uses the
                  same conventions as the &lt;code&gt;JTable&lt;/code&gt; method &lt;code&gt;getCellRect&lt;/code&gt;.                
                <return>
                    the rectangle containing the header tile at &lt;code&gt;column&lt;/code&gt;                    
                </return>
                <see>
                    JTable#getCellRect                    
                </see>
            </javadoc>
            <method name="getHeaderRect" type="Rectangle" line="247">
                <params>
                    <param name="column" type="int"/>
                </params>
                <declaration name="r" type="Rectangle" line="248"/>
                <declaration name="cm" type="TableColumnModel" line="249"/>
                <scope line="251">
                    <scope line="252"/>
                </scope>
                <scope line="256">
                    <scope line="257"/>
                </scope>
                <scope line="261">
                    <scope line="262"/>
                    <scope line="265"/>
                </scope>
            </method>
            <javadoc line="272">
                Allows the renderer&apos;s tips to be used if there is text set.                
                <param>
                    event  the location of the event identifies the proper
                      renderer and, therefore, the proper tip                    
                </param>
                <return>
                    the tool tip for this component                    
                </return>
            </javadoc>
            <method name="getToolTipText" type="String" line="278">
                <params>
                    <param name="event" type="MouseEvent"/>
                </params>
                <declaration name="tip" type="String" line="279"/>
                <declaration name="p" type="Point" line="280"/>
                <declaration name="column" type="int" line="281"/>
                <scope line="282">
                    <declaration name="aColumn" type="TableColumn" line="283"/>
                    <declaration name="renderer" type="TableCellRenderer" line="284"/>
                    <scope line="285"/>
                    <declaration name="component" type="Component" line="288"/>
                    <scope line="289">
                        <declaration name="newEvent" type="MouseEvent" line="290"/>
                        <declaration name="cellRect" type="Rectangle" line="291"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="300">
                Returns the look and feel (L&amp;F) object that renders this component.                
                <return>
                    the &lt;code&gt;TableHeaderUI&lt;/code&gt; object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="TableHeaderUI" line="304"/>
            <javadoc line="307">
                Sets the look and feel (L&amp;F) object that renders this component.                
                <param>
                    ui  the &lt;code&gt;TableHeaderUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="setUI" type="void" line="312">
                <params>
                    <param name="ui" type="TableHeaderUI"/>
                </params>
                <scope line="313"/>
            </method>
            <javadoc line="318">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the look and feel
                  (L&amp;F) has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="325">
                <declaration name="renderer" type="TableCellRenderer" line="327"/>
                <scope line="328"/>
            </method>
            <javadoc line="332">
                Returns the suffix used to construct the name of the look and feel
                  (L&amp;F) class used to render this component.                
                <return>
                    the string &quot;TableHeaderUI&quot;                    
                </return>
                <return>
                    &quot;TableHeaderUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="340"/>
            <javadoc line="343">
                Sets the column model for this table to &lt;code&gt;newModel&lt;/code&gt; and registers
                  for listener notifications from the new column model.                
                <param>
                    columnModel     the new data source for this table                    
                </param>
                <exception>
                    IllegalArgumentExceptionif &lt;code&gt;newModel&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;                    
                </exception>
                <see>
                    #getColumnModel                    
                </see>
                <beaninfobound>
                    : true
                      description: The object governing the way columns appear in the view.                    
                </beaninfobound>
            </javadoc>
            <method name="setColumnModel" type="void" line="352">
                <params>
                    <param name="columnModel" type="TableColumnModel"/>
                </params>
                <scope line="353"/>
                <declaration name="old" type="TableColumnModel" line="356"/>
                <scope line="357">
                    <scope line="358"/>
                </scope>
            </method>
            <javadoc line="367">
                Returns the &lt;code&gt;TableColumnModel&lt;/code&gt; that contains all column information
                  of this table header.                
                <return>
                    the &lt;code&gt;columnModel&lt;/code&gt; property                    
                </return>
                <see>
                    #setColumnModel                    
                </see>
            </javadoc>
            <method name="getColumnModel" type="TableColumnModel" line="373"/>
            <javadoc line="376">
                Invoked when a column is added to the table column model.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnAdded" type="void" line="384">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
            </method>
            <javadoc line="387">
                Invoked when a column is removed from the table column model.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnRemoved" type="void" line="395">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
            </method>
            <javadoc line="398">
                Invoked when a column is repositioned.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    e the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnMoved" type="void" line="406">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
            </method>
            <javadoc line="409">
                Invoked when a column is moved due to a margin change.
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    e the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnMarginChanged" type="void" line="417">
                <params>
                    <param name="e" type="ChangeEvent"/>
                </params>
            </method>
            <javadoc line="420">
                Invoked when the selection model of the &lt;code&gt;TableColumnModel&lt;/code&gt;
                  is changed.  This method currently has no effect (the header is not
                  redrawn).
                  &lt;p&gt;
                  Application code will not use these methods explicitly, they
                  are used internally by &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    e the event received                    
                </param>
                <see>
                    TableColumnModelListener                    
                </see>
            </javadoc>
            <method name="columnSelectionChanged" type="void" line="430">
                <params>
                    <param name="e" type="ListSelectionEvent"/>
                </params>
            </method>
            <javadoc line="432">
                Returns the default column model object which is
                  a &lt;code&gt;DefaultTableColumnModel&lt;/code&gt;.  A subclass can override this
                  method to return a different column model object                
                <return>
                    the default column model object                    
                </return>
            </javadoc>
            <method name="createDefaultColumnModel" type="TableColumnModel" line="438"/>
            <javadoc line="441">
                Returns a default renderer to be used when no header renderer
                  is defined by a &lt;code&gt;TableColumn&lt;/code&gt;.                
                <return>
                    the default table column renderer                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createDefaultRenderer" type="TableCellRenderer" line="447"/>
            <javadoc line="450">
                Initializes the local variables and properties with default values.
                  Used by the constructor methods.                
            </javadoc>
            <method name="initializeLocalVars" type="void" line="454">
                <declaration name="toolTipManager" type="ToolTipManager" line="463"/>
            </method>
            <javadoc line="467">
                Sizes the header and marks it as needing display.  Equivalent
                  to &lt;code&gt;revalidate&lt;/code&gt; followed by &lt;code&gt;repaint&lt;/code&gt;.                
            </javadoc>
            <method name="resizeAndRepaint" type="void" line="471"/>
            <javadoc line="475">
                Sets the header&apos;s &lt;code&gt;draggedColumn&lt;/code&gt; to &lt;code&gt;aColumn&lt;/code&gt;.
                  &lt;p&gt;
                  Application code will not use this method explicitly, it is used
                  internally by the column dragging mechanism.                
                <param>
                    aColumn  the column being dragged, or &lt;code&gt;null&lt;/code&gt; if
                      no column is being dragged                    
                </param>
            </javadoc>
            <method name="setDraggedColumn" type="void" line="483">
                <params>
                    <param name="aColumn" type="TableColumn"/>
                </params>
            </method>
            <javadoc line="486">
                Sets the header&apos;s &lt;code&gt;draggedDistance&lt;/code&gt; to &lt;code&gt;distance&lt;/code&gt;.                
                <param>
                    distance  the distance dragged                    
                </param>
            </javadoc>
            <method name="setDraggedDistance" type="void" line="490">
                <params>
                    <param name="distance" type="int"/>
                </params>
            </method>
            <javadoc line="493">
                Sets the header&apos;s &lt;code&gt;resizingColumn&lt;/code&gt; to &lt;code&gt;aColumn&lt;/code&gt;.
                  &lt;p&gt;
                  Application code will not use this method explicitly, it
                  is used internally by the column sizing mechanism.                
                <param>
                    aColumn  the column being resized, or &lt;code&gt;null&lt;/code&gt; if
                      no column is being resized                    
                </param>
            </javadoc>
            <method name="setResizingColumn" type="void" line="501">
                <params>
                    <param name="aColumn" type="TableColumn"/>
                </params>
            </method>
            <javadoc line="504">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="509">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="511"/>
            </method>
            <method name="getWidthInRightToLeft" type="int" line="515">
                <scope line="516"/>
            </method>
            <javadoc line="521">
                Returns a string representation of this &lt;code&gt;JTableHeader&lt;/code&gt;. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.
                  &lt;P&gt;
                  Overriding &lt;code&gt;paramString&lt;/code&gt; to provide information about the
                  specific new aspects of the JFC components.                
                <return>
                    a string representation of this &lt;code&gt;JTableHeader&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="532">
                <declaration name="reorderingAllowedString" type="String" line="533"/>
                <declaration name="resizingAllowedString" type="String" line="534"/>
                <declaration name="updateTableInRealTimeString" type="String" line="535"/>
            </method>
            <javadoc line="538">
                Gets the AccessibleContext associated with this JTableHeader.
                  For JTableHeaders, the AccessibleContext takes the form of an
                  AccessibleJTableHeader.
                  A new AccessibleJTableHeader instance is created if necessary.                
                <return>
                    an AccessibleJTableHeader that serves as the
                      AccessibleContext of this JTableHeader                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="546">
                <scope line="547"/>
            </method>
            <class name="AccessibleJTableHeader" line="552">
                <extends class="AccessibleJComponent"/>
                <javadoc line="552">
                    This class implements accessibility support for the
                      &lt;code&gt;JTableHeader&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to table header user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="568">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="574"/>
                <javadoc line="577">
                    Returns the Accessible child, if one exists, contained at the local
                      coordinate Point.                    
                    <param>
                        p The point defining the top-left corner of the Accessible,
                          given in the coordinate space of the object&apos;s parent.                        
                    </param>
                    <return>
                        the Accessible, if it exists, at the specified location;
                          else null                        
                    </return>
                </javadoc>
                <method name="getAccessibleAt" type="Accessible" line="585">
                    <params>
                        <param name="p" type="Point"/>
                    </params>
                    <declaration name="column" type="int" line="586"/>
                    <scope line="587">
                        <declaration name="aColumn" type="TableColumn" line="588"/>
                        <declaration name="renderer" type="TableCellRenderer" line="589"/>
                        <scope line="590">
                            <scope line="591"/>
                            <scope line="594"/>
                        </scope>
                        <declaration name="component" type="Component" line="598"/>
                    </scope>
                    <scope line="601"/>
                </method>
                <javadoc line="605">
                    Returns the number of accessible children in the object.  If all
                      of the children of this object implement Accessible, than this
                      method should return the number of children of this object.                    
                    <return>
                        the number of accessible children in the object.                        
                    </return>
                </javadoc>
                <method name="getAccessibleChildrenCount" type="int" line="611"/>
                <javadoc line="614">
                    Return the nth Accessible child of the object.                    
                    <param>
                        i zero-based index of child                        
                    </param>
                    <return>
                        the nth Accessible child of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleChild" type="Accessible" line="619">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <scope line="620"/>
                    <scope line="623">
                        <declaration name="aColumn" type="TableColumn" line="624"/>
                        <declaration name="renderer" type="TableCellRenderer" line="625"/>
                        <scope line="626">
                            <scope line="627"/>
                            <scope line="630"/>
                        </scope>
                        <declaration name="component" type="Component" line="634"/>
                    </scope>
                </method>
                <class name="AccessibleJTableHeaderEntry" line="638">
                    <extends class="AccessibleContext"/>
                    <implements interface="Accessible"/>
                    <implements interface="AccessibleComponent"/>
                    <javadoc line="638">
                        This class provides an implementation of the Java Accessibility
                          API appropropriate for JTableHeader entries.                        
                    </javadoc>
                    <declaration name="parent" type="JTableHeader" line="643"/>
                    <declaration name="column" type="int" line="644"/>
                    <declaration name="table" type="JTable" line="645"/>
                    <javadoc line="646">
                        Constructs an AccessiblJTableHeaaderEntry                        
                        <since>
                            1.4                            
                        </since>
                    </javadoc>
                    <method name="AccessibleJTableHeaderEntry" type="constructor" line="650">
                        <params>
                            <param name="c" type="int"/>
                            <param name="p" type="JTableHeader"/>
                            <param name="t" type="JTable"/>
                        </params>
                    </method>
                    <javadoc line="656">
                        Get the AccessibleContext associated with this object.
                          In the implementation of the Java Accessibility API
                          for this class, returns this object, which serves as
                          its own AccessibleContext.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleContext" type="AccessibleContext" line="663"/>
                    <method name="getCurrentAccessibleContext" type="AccessibleContext" line="666">
                        <declaration name="tcm" type="TableColumnModel" line="667"/>
                        <scope line="668">
                            <scope line="669"/>
                            <declaration name="aColumn" type="TableColumn" line="672"/>
                            <declaration name="renderer" type="TableCellRenderer" line="673"/>
                            <scope line="674">
                                <scope line="675"/>
                                <scope line="678"/>
                            </scope>
                            <declaration name="c" type="Component" line="682"/>
                            <scope line="683"/>
                        </scope>
                    </method>
                    <method name="getCurrentComponent" type="Component" line="689">
                        <declaration name="tcm" type="TableColumnModel" line="690"/>
                        <scope line="691">
                            <scope line="692"/>
                            <declaration name="aColumn" type="TableColumn" line="695"/>
                            <declaration name="renderer" type="TableCellRenderer" line="696"/>
                            <scope line="697">
                                <scope line="698"/>
                                <scope line="701"/>
                            </scope>
                        </scope>
                        <scope line="707"/>
                    </method>
                    <method name="getAccessibleName" type="String" line="711">
                        <declaration name="ac" type="AccessibleContext" line="712"/>
                        <scope line="713">
                            <declaration name="name" type="String" line="714"/>
                            <scope line="715"/>
                        </scope>
                        <scope line="719"/>
                        <scope line="722">
                            <declaration name="name" type="String" line="723"/>
                            <scope line="724"/>
                            <scope line="727"/>
                        </scope>
                    </method>
                    <method name="setAccessibleName" type="void" line="732">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="733"/>
                        <scope line="734"/>
                        <scope line="737"/>
                    </method>
                    <method name="getAccessibleDescription" type="String" line="741">
                        <declaration name="ac" type="AccessibleContext" line="742"/>
                        <scope line="743"/>
                        <scope line="746"/>
                    </method>
                    <method name="setAccessibleDescription" type="void" line="750">
                        <params>
                            <param name="s" type="String"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="751"/>
                        <scope line="752"/>
                        <scope line="755"/>
                    </method>
                    <method name="getAccessibleRole" type="AccessibleRole" line="759">
                        <declaration name="ac" type="AccessibleContext" line="760"/>
                        <scope line="761"/>
                        <scope line="764"/>
                    </method>
                    <method name="getAccessibleStateSet" type="AccessibleStateSet" line="768">
                        <declaration name="ac" type="AccessibleContext" line="769"/>
                        <scope line="770">
                            <declaration name="states" type="AccessibleStateSet" line="771"/>
                            <scope line="772"/>
                        </scope>
                        <scope line="777"/>
                    </method>
                    <method name="getAccessibleIndexInParent" type="int" line="781"/>
                    <method name="getAccessibleChildrenCount" type="int" line="784">
                        <declaration name="ac" type="AccessibleContext" line="785"/>
                        <scope line="786"/>
                        <scope line="789"/>
                    </method>
                    <method name="getAccessibleChild" type="Accessible" line="793">
                        <params>
                            <param name="i" type="int"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="794"/>
                        <scope line="795">
                            <declaration name="accessibleChild" type="Accessible" line="796"/>
                        </scope>
                        <scope line="800"/>
                    </method>
                    <method name="getLocale" type="Locale" line="804">
                        <declaration name="ac" type="AccessibleContext" line="805"/>
                        <scope line="806"/>
                        <scope line="809"/>
                    </method>
                    <method name="addPropertyChangeListener" type="void" line="813">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="814"/>
                        <scope line="815"/>
                        <scope line="818"/>
                    </method>
                    <method name="removePropertyChangeListener" type="void" line="822">
                        <params>
                            <param name="l" type="PropertyChangeListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="823"/>
                        <scope line="824"/>
                        <scope line="827"/>
                    </method>
                    <method name="getAccessibleAction" type="AccessibleAction" line="831"/>
                    <javadoc line="834">
                        Get the AccessibleComponent associated with this object.  In the
                          implementation of the Java Accessibility API for this class,
                          return this object, which is responsible for implementing the
                          AccessibleComponent interface on behalf of itself.                        
                        <return>
                            this object                            
                        </return>
                    </javadoc>
                    <method name="getAccessibleComponent" type="AccessibleComponent" line="841"/>
                    <method name="getAccessibleSelection" type="AccessibleSelection" line="844"/>
                    <method name="getAccessibleText" type="AccessibleText" line="847"/>
                    <method name="getAccessibleValue" type="AccessibleValue" line="850"/>
                    <method name="getBackground" type="Color" line="853">
                        <declaration name="ac" type="AccessibleContext" line="854"/>
                        <scope line="855"/>
                        <scope line="858">
                            <declaration name="c" type="Component" line="859"/>
                            <scope line="860"/>
                            <scope line="863"/>
                        </scope>
                    </method>
                    <method name="setBackground" type="void" line="868">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="869"/>
                        <scope line="870"/>
                        <scope line="873">
                            <declaration name="cp" type="Component" line="874"/>
                            <scope line="875"/>
                        </scope>
                    </method>
                    <method name="getForeground" type="Color" line="880">
                        <declaration name="ac" type="AccessibleContext" line="881"/>
                        <scope line="882"/>
                        <scope line="885">
                            <declaration name="c" type="Component" line="886"/>
                            <scope line="887"/>
                            <scope line="890"/>
                        </scope>
                    </method>
                    <method name="setForeground" type="void" line="895">
                        <params>
                            <param name="c" type="Color"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="896"/>
                        <scope line="897"/>
                        <scope line="900">
                            <declaration name="cp" type="Component" line="901"/>
                            <scope line="902"/>
                        </scope>
                    </method>
                    <method name="getCursor" type="Cursor" line="907">
                        <declaration name="ac" type="AccessibleContext" line="908"/>
                        <scope line="909"/>
                        <scope line="912">
                            <declaration name="c" type="Component" line="913"/>
                            <scope line="914"/>
                            <scope line="917">
                                <declaration name="ap" type="Accessible" line="918"/>
                                <scope line="919"/>
                                <scope line="922"/>
                            </scope>
                        </scope>
                    </method>
                    <method name="setCursor" type="void" line="928">
                        <params>
                            <param name="c" type="Cursor"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="929"/>
                        <scope line="930"/>
                        <scope line="933">
                            <declaration name="cp" type="Component" line="934"/>
                            <scope line="935"/>
                        </scope>
                    </method>
                    <method name="getFont" type="Font" line="940">
                        <declaration name="ac" type="AccessibleContext" line="941"/>
                        <scope line="942"/>
                        <scope line="945">
                            <declaration name="c" type="Component" line="946"/>
                            <scope line="947"/>
                            <scope line="950"/>
                        </scope>
                    </method>
                    <method name="setFont" type="void" line="955">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="956"/>
                        <scope line="957"/>
                        <scope line="960">
                            <declaration name="c" type="Component" line="961"/>
                            <scope line="962"/>
                        </scope>
                    </method>
                    <method name="getFontMetrics" type="FontMetrics" line="967">
                        <params>
                            <param name="f" type="Font"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="968"/>
                        <scope line="969"/>
                        <scope line="972">
                            <declaration name="c" type="Component" line="973"/>
                            <scope line="974"/>
                            <scope line="977"/>
                        </scope>
                    </method>
                    <method name="isEnabled" type="boolean" line="982">
                        <declaration name="ac" type="AccessibleContext" line="983"/>
                        <scope line="984"/>
                        <scope line="987">
                            <declaration name="c" type="Component" line="988"/>
                            <scope line="989"/>
                            <scope line="992"/>
                        </scope>
                    </method>
                    <method name="setEnabled" type="void" line="997">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="998"/>
                        <scope line="999"/>
                        <scope line="1002">
                            <declaration name="c" type="Component" line="1003"/>
                            <scope line="1004"/>
                        </scope>
                    </method>
                    <method name="isVisible" type="boolean" line="1009">
                        <declaration name="ac" type="AccessibleContext" line="1010"/>
                        <scope line="1011"/>
                        <scope line="1014">
                            <declaration name="c" type="Component" line="1015"/>
                            <scope line="1016"/>
                            <scope line="1019"/>
                        </scope>
                    </method>
                    <method name="setVisible" type="void" line="1024">
                        <params>
                            <param name="b" type="boolean"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1025"/>
                        <scope line="1026"/>
                        <scope line="1029">
                            <declaration name="c" type="Component" line="1030"/>
                            <scope line="1031"/>
                        </scope>
                    </method>
                    <method name="isShowing" type="boolean" line="1036">
                        <scope line="1037"/>
                        <scope line="1040"/>
                    </method>
                    <method name="contains" type="boolean" line="1044">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1045"/>
                        <scope line="1046">
                            <declaration name="r" type="Rectangle" line="1047"/>
                        </scope>
                        <scope line="1050">
                            <declaration name="c" type="Component" line="1051"/>
                            <scope line="1052">
                                <declaration name="r" type="Rectangle" line="1053"/>
                            </scope>
                            <scope line="1056"/>
                        </scope>
                    </method>
                    <method name="getLocationOnScreen" type="Point" line="1061">
                        <scope line="1062">
                            <declaration name="parentLocation" type="Point" line="1063"/>
                            <declaration name="componentLocation" type="Point" line="1064"/>
                        </scope>
                        <scope line="1068"/>
                    </method>
                    <method name="getLocation" type="Point" line="1072">
                        <declaration name="ac" type="AccessibleContext" line="1073"/>
                        <scope line="1074">
                            <declaration name="r" type="Rectangle" line="1075"/>
                        </scope>
                        <scope line="1078">
                            <declaration name="c" type="Component" line="1079"/>
                            <scope line="1080">
                                <declaration name="r" type="Rectangle" line="1081"/>
                            </scope>
                            <scope line="1084"/>
                        </scope>
                    </method>
                    <method name="setLocation" type="void" line="1089">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                    </method>
                    <method name="getBounds" type="Rectangle" line="1091">
                        <declaration name="r" type="Rectangle" line="1092"/>
                    </method>
                    <method name="setBounds" type="void" line="1096">
                        <params>
                            <param name="r" type="Rectangle"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1097"/>
                        <scope line="1098"/>
                        <scope line="1101">
                            <declaration name="c" type="Component" line="1102"/>
                            <scope line="1103"/>
                        </scope>
                    </method>
                    <method name="getSize" type="Dimension" line="1108"/>
                    <method name="setSize" type="void" line="1111">
                        <params>
                            <param name="d" type="Dimension"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1112"/>
                        <scope line="1113"/>
                        <scope line="1116">
                            <declaration name="c" type="Component" line="1117"/>
                            <scope line="1118"/>
                        </scope>
                    </method>
                    <method name="getAccessibleAt" type="Accessible" line="1123">
                        <params>
                            <param name="p" type="Point"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1124"/>
                        <scope line="1125"/>
                        <scope line="1128"/>
                    </method>
                    <method name="isFocusTraversable" type="boolean" line="1132">
                        <declaration name="ac" type="AccessibleContext" line="1133"/>
                        <scope line="1134"/>
                        <scope line="1137">
                            <declaration name="c" type="Component" line="1138"/>
                            <scope line="1139"/>
                            <scope line="1142"/>
                        </scope>
                    </method>
                    <method name="requestFocus" type="void" line="1147">
                        <declaration name="ac" type="AccessibleContext" line="1148"/>
                        <scope line="1149"/>
                        <scope line="1152">
                            <declaration name="c" type="Component" line="1153"/>
                            <scope line="1154"/>
                        </scope>
                    </method>
                    <method name="addFocusListener" type="void" line="1159">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1160"/>
                        <scope line="1161"/>
                        <scope line="1164">
                            <declaration name="c" type="Component" line="1165"/>
                            <scope line="1166"/>
                        </scope>
                    </method>
                    <method name="removeFocusListener" type="void" line="1171">
                        <params>
                            <param name="l" type="FocusListener"/>
                        </params>
                        <declaration name="ac" type="AccessibleContext" line="1172"/>
                        <scope line="1173"/>
                        <scope line="1176">
                            <declaration name="c" type="Component" line="1177"/>
                            <scope line="1178"/>
                        </scope>
                    </method>
                </class>
            </class>
        </class>
    </source>