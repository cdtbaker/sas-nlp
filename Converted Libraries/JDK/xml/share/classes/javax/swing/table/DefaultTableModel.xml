<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="java.io.Serializable"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="javax.swing.event.TableModelEvent"/>
        <class name="DefaultTableModel" line="6">
            <extends class="AbstractTableModel"/>
            <implements interface="Serializable"/>
            <javadoc line="6">
                This is an implementation of &lt;code&gt;TableModel&lt;/code&gt; that
                  uses a &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt; to store the
                  cell value objects.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; &lt;code&gt;DefaultTableModel&lt;/code&gt; returns a
                  column class of &lt;code&gt;Object&lt;/code&gt;.  When
                  &lt;code&gt;DefaultTableModel&lt;/code&gt; is used with a
                  &lt;code&gt;TableRowSorter&lt;/code&gt; this will result in extensive use of
                  &lt;code&gt;toString&lt;/code&gt;, which for non-&lt;code&gt;String&lt;/code&gt; data types
                  is expensive.  If you use &lt;code&gt;DefaultTableModel&lt;/code&gt; with a
                  &lt;code&gt;TableRowSorter&lt;/code&gt; you are strongly encouraged to override
                  &lt;code&gt;getColumnClass&lt;/code&gt; to return the appropriate type.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Philip Milne                    
                </author>
                <see>
                    TableModel                    
                </see>
                <see>
                    #getDataVector                    
                </see>
            </javadoc>
            <declaration name="dataVector" type="Vector" line="33"/>
            <javadoc line="33">
                The &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt; of
                  &lt;code&gt;Object&lt;/code&gt; values.                
            </javadoc>
            <declaration name="columnIdentifiers" type="Vector" line="38"/>
            <javadoc line="38">
                The &lt;code&gt;Vector&lt;/code&gt; of column identifiers.                
            </javadoc>
            <javadoc line="42">
                Constructs a default &lt;code&gt;DefaultTableModel&lt;/code&gt;
                  which is a table of zero columns and zero rows.                
            </javadoc>
            <method name="DefaultTableModel" type="constructor" line="46"/>
            <method name="newVector" type="Vector" line="49">
                <params>
                    <param name="size" type="int"/>
                </params>
                <declaration name="v" type="Vector" line="50"/>
            </method>
            <javadoc line="54">
                Constructs a &lt;code&gt;DefaultTableModel&lt;/code&gt; with
                  &lt;code&gt;rowCount&lt;/code&gt; and &lt;code&gt;columnCount&lt;/code&gt; of
                  &lt;code&gt;null&lt;/code&gt; object values.                
                <param>
                    rowCount           the number of rows the table holds                    
                </param>
                <param>
                    columnCount        the number of columns the table holds                    
                </param>
                <see>
                    #setValueAt                    
                </see>
            </javadoc>
            <method name="DefaultTableModel" type="constructor" line="62">
                <params>
                    <param name="rowCount" type="int"/>
                    <param name="columnCount" type="int"/>
                </params>
            </method>
            <javadoc line="65">
                Constructs a &lt;code&gt;DefaultTableModel&lt;/code&gt; with as many columns
                  as there are elements in &lt;code&gt;columnNames&lt;/code&gt;
                  and &lt;code&gt;rowCount&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;
                  object values.  Each column&apos;s name will be taken from
                  the &lt;code&gt;columnNames&lt;/code&gt; vector.                
                <param>
                    columnNames       <code>vector</code> containing the names
                      of the new columns; if this is
                      <code>null</code> then the model has no columns                    
                </param>
                <param>
                    rowCount           the number of rows the table holds                    
                </param>
                <see>
                    #setDataVector                    
                </see>
                <see>
                    #setValueAt                    
                </see>
            </javadoc>
            <method name="DefaultTableModel" type="constructor" line="78">
                <params>
                    <param name="columnNames" type="Vector"/>
                    <param name="rowCount" type="int"/>
                </params>
            </method>
            <javadoc line="81">
                Constructs a &lt;code&gt;DefaultTableModel&lt;/code&gt; with as many
                  columns as there are elements in &lt;code&gt;columnNames&lt;/code&gt;
                  and &lt;code&gt;rowCount&lt;/code&gt; of &lt;code&gt;null&lt;/code&gt;
                  object values.  Each column&apos;s name will be taken from
                  the &lt;code&gt;columnNames&lt;/code&gt; array.                
                <param>
                    columnNames       <code>array</code> containing the names
                      of the new columns; if this is
                      <code>null</code> then the model has no columns                    
                </param>
                <param>
                    rowCount           the number of rows the table holds                    
                </param>
                <see>
                    #setDataVector                    
                </see>
                <see>
                    #setValueAt                    
                </see>
            </javadoc>
            <method name="DefaultTableModel" type="constructor" line="94">
                <params>
                    <param name="columnNames" type="Object[]"/>
                    <param name="rowCount" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Constructs a &lt;code&gt;DefaultTableModel&lt;/code&gt; and initializes the table
                  by passing &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;columnNames&lt;/code&gt;
                  to the &lt;code&gt;setDataVector&lt;/code&gt; method.                
                <param>
                    data              the data of the table, a <code>Vector</code>
                      of <code>Vector</code>s of <code>Object</code>
                      values                    
                </param>
                <param>
                    columnNames       <code>vector</code> containing the names
                      of the new columns                    
                </param>
                <see>
                    #getDataVector                    
                </see>
                <see>
                    #setDataVector                    
                </see>
            </javadoc>
            <method name="DefaultTableModel" type="constructor" line="109">
                <params>
                    <param name="data" type="Vector"/>
                    <param name="columnNames" type="Vector"/>
                </params>
            </method>
            <javadoc line="112">
                Constructs a &lt;code&gt;DefaultTableModel&lt;/code&gt; and initializes the table
                  by passing &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;columnNames&lt;/code&gt;
                  to the &lt;code&gt;setDataVector&lt;/code&gt;
                  method. The first index in the &lt;code&gt;Object[][]&lt;/code&gt; array is
                  the row index and the second is the column index.                
                <param>
                    data              the data of the table                    
                </param>
                <param>
                    columnNames       the names of the columns                    
                </param>
                <see>
                    #getDataVector                    
                </see>
                <see>
                    #setDataVector                    
                </see>
            </javadoc>
            <method name="DefaultTableModel" type="constructor" line="123">
                <params>
                    <param name="data" type="Object[][]"/>
                    <param name="columnNames" type="Object[]"/>
                </params>
            </method>
            <javadoc line="126">
                Returns the &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt;
                  that contains the table&apos;s
                  data values.  The vectors contained in the outer vector are
                  each a single row of values.  In other words, to get to the cell
                  at row 1, column 5: &lt;p&gt;
                  &lt;code&gt;((Vector)getDataVector().elementAt(1)).elementAt(5);&lt;/code&gt;&lt;p&gt;                
                <return>
                    the vector of vectors containing the tables data values                    
                </return>
                <see>
                    #newDataAvailable                    
                </see>
                <see>
                    #newRowsAdded                    
                </see>
                <see>
                    #setDataVector                    
                </see>
            </javadoc>
            <method name="getDataVector" type="Vector" line="138"/>
            <method name="nonNullVector" type="Vector" line="141">
                <params>
                    <param name="v" type="Vector"/>
                </params>
            </method>
            <javadoc line="144">
                Replaces the current &lt;code&gt;dataVector&lt;/code&gt; instance variable
                  with the new &lt;code&gt;Vector&lt;/code&gt; of rows, &lt;code&gt;dataVector&lt;/code&gt;.
                  Each row is represented in &lt;code&gt;dataVector&lt;/code&gt; as a
                  &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Object&lt;/code&gt; values.
                  &lt;code&gt;columnIdentifiers&lt;/code&gt; are the names of the new
                  columns.  The first name in &lt;code&gt;columnIdentifiers&lt;/code&gt; is
                  mapped to column 0 in &lt;code&gt;dataVector&lt;/code&gt;. Each row in
                  &lt;code&gt;dataVector&lt;/code&gt; is adjusted to match the number of
                  columns in &lt;code&gt;columnIdentifiers&lt;/code&gt;
                  either by truncating the &lt;code&gt;Vector&lt;/code&gt; if it is too long,
                  or adding &lt;code&gt;null&lt;/code&gt; values if it is too short.
                  &lt;p&gt;Note that passing in a &lt;code&gt;null&lt;/code&gt; value for
                  &lt;code&gt;dataVector&lt;/code&gt; results in unspecified behavior,
                  an possibly an exception.                
                <param>
                    dataVector         the new data vector                    
                </param>
                <param>
                    columnIdentifiers     the names of the columns                    
                </param>
                <see>
                    #getDataVector                    
                </see>
            </javadoc>
            <method name="setDataVector" type="void" line="163">
                <params>
                    <param name="dataVector" type="Vector"/>
                    <param name="columnIdentifiers" type="Vector"/>
                </params>
            </method>
            <javadoc line="169">
                Replaces the value in the &lt;code&gt;dataVector&lt;/code&gt; instance
                  variable with the values in the array &lt;code&gt;dataVector&lt;/code&gt;.
                  The first index in the &lt;code&gt;Object[][]&lt;/code&gt;
                  array is the row index and the second is the column index.
                  &lt;code&gt;columnIdentifiers&lt;/code&gt; are the names of the new columns.                
                <param>
                    dataVector                the new data vector                    
                </param>
                <param>
                    columnIdentifiers the names of the columns                    
                </param>
                <see>
                    #setDataVector(Vector,Vector)                    
                </see>
            </javadoc>
            <method name="setDataVector" type="void" line="179">
                <params>
                    <param name="dataVector" type="Object[][]"/>
                    <param name="columnIdentifiers" type="Object[]"/>
                </params>
            </method>
            <javadoc line="182">
                Equivalent to &lt;code&gt;fireTableChanged&lt;/code&gt;.                
                <param>
                    event  the change event                    
                </param>
            </javadoc>
            <method name="newDataAvailable" type="void" line="186">
                <params>
                    <param name="event" type="TableModelEvent"/>
                </params>
            </method>
            <method name="justifyRows" type="void" line="189">
                <params>
                    <param name="from" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <scope line="191">
                    <scope line="192"/>
                </scope>
            </method>
            <javadoc line="198">
                Ensures that the new rows have the correct number of columns.
                  This is accomplished by  using the &lt;code&gt;setSize&lt;/code&gt; method in
                  &lt;code&gt;Vector&lt;/code&gt; which truncates vectors
                  which are too long, and appends &lt;code&gt;null&lt;/code&gt;s if they
                  are too short.
                  This method also sends out a &lt;code&gt;tableChanged&lt;/code&gt;
                  notification message to all the listeners.                
                <param>
                    e         this <code>TableModelEvent</code> describes
                      where the rows were added.
                      If <code>null</code> it assumes
                      all the rows were newly added                    
                </param>
                <see>
                    #getDataVector                    
                </see>
            </javadoc>
            <method name="newRowsAdded" type="void" line="212">
                <params>
                    <param name="e" type="TableModelEvent"/>
                </params>
            </method>
            <javadoc line="216">
                Equivalent to &lt;code&gt;fireTableChanged&lt;/code&gt;.                
                <param>
                    event the change event                    
                </param>
            </javadoc>
            <method name="rowsRemoved" type="void" line="220">
                <params>
                    <param name="event" type="TableModelEvent"/>
                </params>
            </method>
            <javadoc line="223">
                Obsolete as of Java 2 platform v1.3.  Please use &lt;code&gt;setRowCount&lt;/code&gt; instead.                
            </javadoc>
            <method name="setNumRows" type="void" line="226">
                <params>
                    <param name="rowCount" type="int"/>
                </params>
                <declaration name="old" type="int" line="227"/>
                <scope line="228"/>
                <scope line="232"/>
                <scope line="235"/>
            </method>
            <javadoc line="240">
                Sets the number of rows in the model.  If the new size is greater
                  than the current size, new rows are added to the end of the model
                  If the new size is less than the current size, all
                  rows at index &lt;code&gt;rowCount&lt;/code&gt; and greater are discarded. &lt;p&gt;                
                <see>
                    #setColumnCount                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setRowCount" type="void" line="248">
                <params>
                    <param name="rowCount" type="int"/>
                </params>
            </method>
            <javadoc line="251">
                Adds a row to the end of the model.  The new row will contain
                  &lt;code&gt;null&lt;/code&gt; values unless &lt;code&gt;rowData&lt;/code&gt; is specified.
                  Notification of the row being added will be generated.                
                <param>
                    rowData          optional data of the row being added                    
                </param>
            </javadoc>
            <method name="addRow" type="void" line="257">
                <params>
                    <param name="rowData" type="Vector"/>
                </params>
            </method>
            <javadoc line="260">
                Adds a row to the end of the model.  The new row will contain
                  &lt;code&gt;null&lt;/code&gt; values unless &lt;code&gt;rowData&lt;/code&gt; is specified.
                  Notification of the row being added will be generated.                
                <param>
                    rowData          optional data of the row being added                    
                </param>
            </javadoc>
            <method name="addRow" type="void" line="266">
                <params>
                    <param name="rowData" type="Object[]"/>
                </params>
            </method>
            <javadoc line="269">
                Inserts a row at &lt;code&gt;row&lt;/code&gt; in the model.  The new row
                  will contain &lt;code&gt;null&lt;/code&gt; values unless &lt;code&gt;rowData&lt;/code&gt;
                  is specified.  Notification of the row being added will be generated.                
                <param>
                    row             the row index of the row to be inserted                    
                </param>
                <param>
                    rowData         optional data of the row being added                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if the row was invalid                    
                </exception>
            </javadoc>
            <method name="insertRow" type="void" line="277">
                <params>
                    <param name="row" type="int"/>
                    <param name="rowData" type="Vector"/>
                </params>
            </method>
            <javadoc line="282">
                Inserts a row at &lt;code&gt;row&lt;/code&gt; in the model.  The new row
                  will contain &lt;code&gt;null&lt;/code&gt; values unless &lt;code&gt;rowData&lt;/code&gt;
                  is specified.  Notification of the row being added will be generated.                
                <param>
                    row      the row index of the row to be inserted                    
                </param>
                <param>
                    rowData          optional data of the row being added                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if the row was invalid                    
                </exception>
            </javadoc>
            <method name="insertRow" type="void" line="290">
                <params>
                    <param name="row" type="int"/>
                    <param name="rowData" type="Object[]"/>
                </params>
            </method>
            <method name="gcd" type="int" line="293">
                <params>
                    <param name="i" type="int"/>
                    <param name="j" type="int"/>
                </params>
            </method>
            <method name="rotate" type="void" line="296">
                <params>
                    <param name="v" type="Vector"/>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="shift" type="int"/>
                </params>
                <declaration name="size" type="int" line="297"/>
                <declaration name="r" type="int" line="298"/>
                <declaration name="g" type="int" line="299"/>
                <scope line="300">
                    <declaration name="to" type="int" line="301"/>
                    <declaration name="tmp" type="Object" line="302"/>
                    <scope line="303"/>
                </scope>
            </method>
            <javadoc line="310">
                Moves one or more rows from the inclusive range &lt;code&gt;start&lt;/code&gt; to
                  &lt;code&gt;end&lt;/code&gt; to the &lt;code&gt;to&lt;/code&gt; position in the model.
                  After the move, the row that was at index &lt;code&gt;start&lt;/code&gt;
                  will be at index &lt;code&gt;to&lt;/code&gt;.
                  This method will send a &lt;code&gt;tableChanged&lt;/code&gt; notification
                  message to all the listeners. &lt;p&gt;
                  &lt;pre&gt;
                  Examples of moves:
                  &lt;p&gt;
                  1. moveRow(1,3,5);
                  a|B|C|D|e|f|g|h|i|j|k   - before
                  a|e|f|g|h|B|C|D|i|j|k   - after
                  &lt;p&gt;
                  2. moveRow(6,7,1);
                  a|b|c|d|e|f|G|H|i|j|k   - before
                  a|G|H|b|c|d|e|f|i|j|k   - after
                  &lt;p&gt;
                  &lt;/pre&gt;                
                <param>
                    start       the starting row index to be moved                    
                </param>
                <param>
                    end         the ending row index to be moved                    
                </param>
                <param>
                    to          the destination of the rows to be moved                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if any of the elements
                      would be moved out of the table's range                    
                </exception>
            </javadoc>
            <method name="moveRow" type="void" line="335">
                <params>
                    <param name="start" type="int"/>
                    <param name="end" type="int"/>
                    <param name="to" type="int"/>
                </params>
                <declaration name="shift" type="int" line="336"/>
                <declaration name="first" type="int" line="337"/>
                <scope line="338"/>
                <scope line="342"/>
            </method>
            <javadoc line="349">
                Removes the row at &lt;code&gt;row&lt;/code&gt; from the model.  Notification
                  of the row being removed will be sent to all the listeners.                
                <param>
                    row      the row index of the row to be removed                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if the row was invalid                    
                </exception>
            </javadoc>
            <method name="removeRow" type="void" line="355">
                <params>
                    <param name="row" type="int"/>
                </params>
            </method>
            <javadoc line="359">
                Replaces the column identifiers in the model.  If the number of
                  &lt;code&gt;newIdentifier&lt;/code&gt;s is greater than the current number
                  of columns, new columns are added to the end of each row in the model.
                  If the number of &lt;code&gt;newIdentifier&lt;/code&gt;s is less than the current
                  number of columns, all the extra columns at the end of a row are
                  discarded. &lt;p&gt;                
                <param>
                    columnIdentifiers  vector of column identifiers.  If
                      <code>null</code>, set the model
                      to zero columns                    
                </param>
                <see>
                    #setNumRows                    
                </see>
            </javadoc>
            <method name="setColumnIdentifiers" type="void" line="371">
                <params>
                    <param name="columnIdentifiers" type="Vector"/>
                </params>
            </method>
            <javadoc line="374">
                Replaces the column identifiers in the model.  If the number of
                  &lt;code&gt;newIdentifier&lt;/code&gt;s is greater than the current number
                  of columns, new columns are added to the end of each row in the model.
                  If the number of &lt;code&gt;newIdentifier&lt;/code&gt;s is less than the current
                  number of columns, all the extra columns at the end of a row are
                  discarded. &lt;p&gt;                
                <param>
                    newIdentifiers  array of column identifiers.
                      If <code>null</code>, set
                      the model to zero columns                    
                </param>
                <see>
                    #setNumRows                    
                </see>
            </javadoc>
            <method name="setColumnIdentifiers" type="void" line="386">
                <params>
                    <param name="newIdentifiers" type="Object[]"/>
                </params>
            </method>
            <javadoc line="389">
                Sets the number of columns in the model.  If the new size is greater
                  than the current size, new columns are added to the end of the model
                  with &lt;code&gt;null&lt;/code&gt; cell values.
                  If the new size is less than the current size, all columns at index
                  &lt;code&gt;columnCount&lt;/code&gt; and greater are discarded.                
                <param>
                    columnCount  the new number of columns in the model                    
                </param>
                <see>
                    #setColumnCount                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setColumnCount" type="void" line="399">
                <params>
                    <param name="columnCount" type="int"/>
                </params>
            </method>
            <javadoc line="404">
                Adds a column to the model.  The new column will have the
                  identifier &lt;code&gt;columnName&lt;/code&gt;, which may be null.  This method
                  will send a
                  &lt;code&gt;tableChanged&lt;/code&gt; notification message to all the listeners.
                  This method is a cover for &lt;code&gt;addColumn(Object, Vector)&lt;/code&gt; which
                  uses &lt;code&gt;null&lt;/code&gt; as the data vector.                
                <param>
                    columnName the identifier of the column being added                    
                </param>
            </javadoc>
            <method name="addColumn" type="void" line="413">
                <params>
                    <param name="columnName" type="Object"/>
                </params>
            </method>
            <javadoc line="416">
                Adds a column to the model.  The new column will have the
                  identifier &lt;code&gt;columnName&lt;/code&gt;, which may be null.
                  &lt;code&gt;columnData&lt;/code&gt; is the
                  optional vector of data for the column.  If it is &lt;code&gt;null&lt;/code&gt;
                  the column is filled with &lt;code&gt;null&lt;/code&gt; values.  Otherwise,
                  the new data will be added to model starting with the first
                  element going to row 0, etc.  This method will send a
                  &lt;code&gt;tableChanged&lt;/code&gt; notification message to all the listeners.                
                <param>
                    columnName the identifier of the column being added                    
                </param>
                <param>
                    columnData       optional data of the column being added                    
                </param>
            </javadoc>
            <method name="addColumn" type="void" line="428">
                <params>
                    <param name="columnName" type="Object"/>
                    <param name="columnData" type="Vector"/>
                </params>
                <scope line="430">
                    <declaration name="columnSize" type="int" line="431"/>
                    <scope line="432"/>
                    <declaration name="newColumn" type="int" line="436"/>
                    <scope line="437">
                        <declaration name="row" type="Vector" line="438"/>
                    </scope>
                </scope>
                <scope line="442"/>
            </method>
            <javadoc line="447">
                Adds a column to the model.  The new column will have the
                  identifier &lt;code&gt;columnName&lt;/code&gt;.  &lt;code&gt;columnData&lt;/code&gt; is the
                  optional array of data for the column.  If it is &lt;code&gt;null&lt;/code&gt;
                  the column is filled with &lt;code&gt;null&lt;/code&gt; values.  Otherwise,
                  the new data will be added to model starting with the first
                  element going to row 0, etc.  This method will send a
                  &lt;code&gt;tableChanged&lt;/code&gt; notification message to all the listeners.                
                <see>
                    #addColumn(Object,Vector)                    
                </see>
            </javadoc>
            <method name="addColumn" type="void" line="457">
                <params>
                    <param name="columnName" type="Object"/>
                    <param name="columnData" type="Object[]"/>
                </params>
            </method>
            <javadoc line="460">
                Returns the number of rows in this data table.                
                <return>
                    the number of rows in the model                    
                </return>
            </javadoc>
            <method name="getRowCount" type="int" line="464"/>
            <javadoc line="467">
                Returns the number of columns in this data table.                
                <return>
                    the number of columns in the model                    
                </return>
            </javadoc>
            <method name="getColumnCount" type="int" line="471"/>
            <javadoc line="474">
                Returns the column name.                
                <return>
                    a name for this column using the string value of the
                      appropriate member in <code>columnIdentifiers</code>.
                      If <code>columnIdentifiers</code> does not have an entry
                      for this index, returns the default
                      name provided by the superclass.                    
                </return>
            </javadoc>
            <method name="getColumnName" type="String" line="482">
                <params>
                    <param name="column" type="int"/>
                </params>
                <declaration name="id" type="Object" line="483"/>
                <scope line="484"/>
            </method>
            <javadoc line="489">
                Returns true regardless of parameter values.                
                <param>
                    row             the row whose value is to be queried                    
                </param>
                <param>
                    column          the column whose value is to be queried                    
                </param>
                <return>
                    true                    
                </return>
                <see>
                    #setValueAt                    
                </see>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="496">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="499">
                Returns an attribute value for the cell at &lt;code&gt;row&lt;/code&gt;
                  and &lt;code&gt;column&lt;/code&gt;.                
                <param>
                    row             the row whose value is to be queried                    
                </param>
                <param>
                    column          the column whose value is to be queried                    
                </param>
                <return>
                    the value Object at the specified cell                    
                </return>
                <exception>
                    ArrayIndexOutOfBoundsException  if an invalid row or
                      column was given                    
                </exception>
            </javadoc>
            <method name="getValueAt" type="Object" line="508">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="rowVector" type="Vector" line="509"/>
            </method>
            <javadoc line="512">
                Sets the object value for the cell at &lt;code&gt;column&lt;/code&gt; and
                  &lt;code&gt;row&lt;/code&gt;.  &lt;code&gt;aValue&lt;/code&gt; is the new value.  This method
                  will generate a &lt;code&gt;tableChanged&lt;/code&gt; notification.                
                <param>
                    aValue          the new value; this can be null                    
                </param>
                <param>
                    row             the row whose value is to be changed                    
                </param>
                <param>
                    column          the column whose value is to be changed                    
                </param>
                <exception>
                    ArrayIndexOutOfBoundsException  if an invalid row or
                      column was given                    
                </exception>
            </javadoc>
            <method name="setValueAt" type="void" line="522">
                <params>
                    <param name="aValue" type="Object"/>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
                <declaration name="rowVector" type="Vector" line="523"/>
            </method>
            <javadoc line="527">
                Returns a vector that contains the same objects as the array.                
                <param>
                    anArray  the array to be converted                    
                </param>
                <return>
                    the new vector; if <code>anArray</code> is <code>null</code>,
                      returns <code>null</code>                    
                </return>
            </javadoc>
            <method name="convertToVector" type="Vector" line="533">
                <params>
                    <param name="anArray" type="Object[]"/>
                </params>
                <scope line="534"/>
                <declaration name="v" type="Vector&lt;Object&gt;" line="537"/>
                <scope line="538"/>
            </method>
            <javadoc line="543">
                Returns a vector of vectors that contains the same objects as the array.                
                <param>
                    anArray  the double array to be converted                    
                </param>
                <return>
                    the new vector of vectors; if <code>anArray</code> is
                      <code>null</code>, returns <code>null</code>                    
                </return>
            </javadoc>
            <method name="convertToVector" type="Vector" line="549">
                <params>
                    <param name="anArray" type="Object[][]"/>
                </params>
                <scope line="550"/>
                <declaration name="v" type="Vector&lt;Vector&gt;" line="553"/>
                <scope line="554"/>
            </method>
        </class>
    </source>