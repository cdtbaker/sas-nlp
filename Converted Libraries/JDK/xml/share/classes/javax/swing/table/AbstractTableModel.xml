<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="java.io.Serializable"/>
        <import package="java.util.EventListener"/>
        <class name="AbstractTableModel" line="33">
            <comment line="63">
                Instance Variables                
            </comment>
            <comment line="70">
                Default Implementation of the Interface                
            </comment>
            <comment line="142">
                Managing Listeners                
            </comment>
            <comment line="183">
                Fire methods                
            </comment>
            <implements interface="TableModel"/>
            <implements interface="Serializable"/>
            <javadoc line="33">
                This abstract class provides default implementations for most of
                  the methods in the &lt;code&gt;TableModel&lt;/code&gt; interface. It takes care of
                  the management of listeners and provides some conveniences for generating
                  &lt;code&gt;TableModelEvents&lt;/code&gt; and dispatching them to the listeners.
                  To create a concrete &lt;code&gt;TableModel&lt;/code&gt; as a subclass of
                  &lt;code&gt;AbstractTableModel&lt;/code&gt; you need only provide implementations
                  for the following three methods:
                  &lt;pre&gt;
                  public int getRowCount();
                  public int getColumnCount();
                  public Object getValueAt(int row, int column);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="66"/>
            <javadoc line="66">
                List of listeners                
            </javadoc>
            <javadoc line="73">
                Returns a default name for the column using spreadsheet conventions:
                  A, B, C, ... Z, AA, AB, etc.  If &lt;code&gt;column&lt;/code&gt; cannot be found,
                  returns an empty string.                
                <param>
                    column  the column being queried                    
                </param>
                <return>
                    a string containing the default name of &lt;code&gt;column&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getColumnName" type="String" line="81">
                <params>
                    <param name="column" type="int"/>
                </params>
                <declaration name="result" type="String" line="82"/>
                <scope line="83"/>
            </method>
            <javadoc line="89">
                Returns a column given its name.
                  Implementation is naive so this should be overridden if
                  this method is to be called often. This method is not
                  in the &lt;code&gt;TableModel&lt;/code&gt; interface and is not used by the
                  &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    columnName string containing name of column to be located                    
                </param>
                <return>
                    the column with &lt;code&gt;columnName&lt;/code&gt;, or -1 if not found                    
                </return>
            </javadoc>
            <method name="findColumn" type="int" line="99">
                <params>
                    <param name="columnName" type="String"/>
                </params>
                <scope line="100">
                    <scope line="101"/>
                </scope>
            </method>
            <javadoc line="108">
                Returns &lt;code&gt;Object.class&lt;/code&gt; regardless of &lt;code&gt;columnIndex&lt;/code&gt;.                
                <param>
                    columnIndex  the column being queried                    
                </param>
                <return>
                    the Object.class                    
                </return>
            </javadoc>
            <method name="getColumnClass" type="Class<?>" line="114">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="118">
                Returns false.  This is the default implementation for all cells.                
                <param>
                    rowIndex  the row being queried                    
                </param>
                <param>
                    columnIndex the column being queried                    
                </param>
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="isCellEditable" type="boolean" line="125">
                <params>
                    <param name="rowIndex" type="int"/>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="129">
                This empty implementation is provided so users don&apos;t have to implement
                  this method if their data model is not editable.                
                <param>
                    aValue   value to assign to cell                    
                </param>
                <param>
                    rowIndex   row of cell                    
                </param>
                <param>
                    columnIndex  column of cell                    
                </param>
            </javadoc>
            <method name="setValueAt" type="void" line="137">
                <params>
                    <param name="aValue" type="Object"/>
                    <param name="rowIndex" type="int"/>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="145">
                Adds a listener to the list that&apos;s notified each time a change
                  to the data model occurs.                
                <param>
                    l               the TableModelListener                    
                </param>
            </javadoc>
            <method name="addTableModelListener" type="void" line="151">
                <params>
                    <param name="l" type="TableModelListener"/>
                </params>
            </method>
            <javadoc line="155">
                Removes a listener from the list that&apos;s notified each time a
                  change to the data model occurs.                
                <param>
                    l               the TableModelListener                    
                </param>
            </javadoc>
            <method name="removeTableModelListener" type="void" line="161">
                <params>
                    <param name="l" type="TableModelListener"/>
                </params>
            </method>
            <javadoc line="165">
                Returns an array of all the table model listeners
                  registered on this model.                
                <return>
                    all of this model&apos;s &lt;code&gt;TableModelListener&lt;/code&gt;s
                      or an empty
                      array if no table model listeners are currently registered                    
                </return>
                <see>
                    #addTableModelListener                    
                </see>
                <see>
                    #removeTableModelListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getTableModelListeners" type="TableModelListener[]" line="178"/>
            <javadoc line="186">
                Notifies all listeners that all cell values in the table&apos;s
                  rows may have changed. The number of rows may also have changed
                  and the &lt;code&gt;JTable&lt;/code&gt; should redraw the
                  table from scratch. The structure of the table (as in the order of the
                  columns) is assumed to be the same.                
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
                <see>
                    javax.swing.JTable#tableChanged(TableModelEvent)                    
                </see>
            </javadoc>
            <method name="fireTableDataChanged" type="void" line="197"/>
            <javadoc line="201">
                Notifies all listeners that the table&apos;s structure has changed.
                  The number of columns in the table, and the names and types of
                  the new columns may be different from the previous state.
                  If the &lt;code&gt;JTable&lt;/code&gt; receives this event and its
                  &lt;code&gt;autoCreateColumnsFromModel&lt;/code&gt;
                  flag is set it discards any table columns that it had and reallocates
                  default columns in the order they appear in the model. This is the
                  same as calling &lt;code&gt;setModel(TableModel)&lt;/code&gt; on the
                  &lt;code&gt;JTable&lt;/code&gt;.                
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTableStructureChanged" type="void" line="215"/>
            <javadoc line="219">
                Notifies all listeners that rows in the range
                  &lt;code&gt;[firstRow, lastRow]&lt;/code&gt;, inclusive, have been inserted.                
                <param>
                    firstRow  the first row                    
                </param>
                <param>
                    lastRow   the last row                    
                </param>
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTableRowsInserted" type="void" line="230">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
            </method>
            <javadoc line="235">
                Notifies all listeners that rows in the range
                  &lt;code&gt;[firstRow, lastRow]&lt;/code&gt;, inclusive, have been updated.                
                <param>
                    firstRow  the first row                    
                </param>
                <param>
                    lastRow   the last row                    
                </param>
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTableRowsUpdated" type="void" line="245">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
            </method>
            <javadoc line="250">
                Notifies all listeners that rows in the range
                  &lt;code&gt;[firstRow, lastRow]&lt;/code&gt;, inclusive, have been deleted.                
                <param>
                    firstRow  the first row                    
                </param>
                <param>
                    lastRow   the last row                    
                </param>
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTableRowsDeleted" type="void" line="260">
                <params>
                    <param name="firstRow" type="int"/>
                    <param name="lastRow" type="int"/>
                </params>
            </method>
            <javadoc line="265">
                Notifies all listeners that the value of the cell at
                  &lt;code&gt;[row, column]&lt;/code&gt; has been updated.                
                <param>
                    row  row of cell which has been updated                    
                </param>
                <param>
                    column  column of cell which has been updated                    
                </param>
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTableCellUpdated" type="void" line="274">
                <params>
                    <param name="row" type="int"/>
                    <param name="column" type="int"/>
                </params>
            </method>
            <javadoc line="278">
                Forwards the given notification event to all
                  &lt;code&gt;TableModelListeners&lt;/code&gt; that registered
                  themselves as listeners for this table model.                
                <param>
                    e  the event to be forwarded                    
                </param>
                <see>
                    #addTableModelListener                    
                </see>
                <see>
                    TableModelEvent                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireTableChanged" type="void" line="289">
                <params>
                    <param name="e" type="TableModelEvent"/>
                </params>
                <comment line="291">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="293">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <declaration name="listeners" type="Object[]" line="291"/>
                <scope line="294">
                    <scope line="295"/>
                </scope>
            </method>
            <javadoc line="301">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this &lt;code&gt;AbstractTableModel&lt;/code&gt;.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal,
                  such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  model &lt;code&gt;m&lt;/code&gt;
                  for its table model listeners with the following code:
                  &lt;pre&gt;TableModelListener[] tmls = (TableModelListener[])(m.getListeners(TableModelListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this component,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getTableModelListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="337">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
            </method>
        </class>
    </source>