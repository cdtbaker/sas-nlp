<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="java.awt"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.EventListener"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.io.Serializable"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="DefaultTableColumnModel" line="12">
            <implements interface="TableColumnModel"/>
            <implements interface="PropertyChangeListener"/>
            <implements interface="ListSelectionListener"/>
            <implements interface="Serializable"/>
            <javadoc line="12">
                The standard column-handler for a &lt;code&gt;JTable&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <see>
                    JTable                    
                </see>
            </javadoc>
            <declaration name="tableColumns" type="Vector&lt;TableColumn&gt;" line="28"/>
            <javadoc line="28">
                Array of TableColumn objects in this model                
            </javadoc>
            <declaration name="selectionModel" type="ListSelectionModel" line="32"/>
            <javadoc line="32">
                Model for keeping track of column selections                
            </javadoc>
            <declaration name="columnMargin" type="int" line="36"/>
            <javadoc line="36">
                Width margin between each column                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="40"/>
            <javadoc line="40">
                List of TableColumnModelListener                
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="44"/>
            <javadoc line="44">
                Change event (only one needed)                
            </javadoc>
            <declaration name="columnSelectionAllowed" type="boolean" line="48"/>
            <javadoc line="48">
                Column selection allowed in this column model                
            </javadoc>
            <declaration name="totalColumnWidth" type="int" line="52"/>
            <javadoc line="52">
                A local cache of the combined width of all columns                
            </javadoc>
            <javadoc line="56">
                Creates a default table column model.                
            </javadoc>
            <method name="DefaultTableColumnModel" type="constructor" line="59"/>
            <javadoc line="67">
                Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the
                  &lt;code&gt;tableColumns&lt;/code&gt; array.
                  This method also posts the &lt;code&gt;columnAdded&lt;/code&gt;
                  event to its listeners.                
                <param>
                    aColumn         the <code>TableColumn</code> to be added                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>aColumn</code> is
                      <code>null</code>                    
                </exception>
                <see>
                    #removeColumn                    
                </see>
            </javadoc>
            <method name="addColumn" type="void" line="77">
                <params>
                    <param name="aColumn" type="TableColumn"/>
                </params>
                <scope line="78"/>
            </method>
            <javadoc line="86">
                Deletes the &lt;code&gt;column&lt;/code&gt; from the
                  &lt;code&gt;tableColumns&lt;/code&gt; array.  This method will do nothing if
                  &lt;code&gt;column&lt;/code&gt; is not in the table&apos;s columns list.
                  &lt;code&gt;tile&lt;/code&gt; is called
                  to resize both the header and table views.
                  This method also posts a &lt;code&gt;columnRemoved&lt;/code&gt;
                  event to its listeners.                
                <param>
                    column          the <code>TableColumn</code> to be removed                    
                </param>
                <see>
                    #addColumn                    
                </see>
            </javadoc>
            <method name="removeColumn" type="void" line="97">
                <params>
                    <param name="column" type="TableColumn"/>
                </params>
                <declaration name="columnIndex" type="int" line="98"/>
                <scope line="99">
                    <scope line="100"/>
                </scope>
            </method>
            <javadoc line="109">
                Moves the column and heading at &lt;code&gt;columnIndex&lt;/code&gt; to
                  &lt;code&gt;newIndex&lt;/code&gt;.  The old column at &lt;code&gt;columnIndex&lt;/code&gt;
                  will now be found at &lt;code&gt;newIndex&lt;/code&gt;.  The column
                  that used to be at &lt;code&gt;newIndex&lt;/code&gt; is shifted
                  left or right to make room.  This will not move any columns if
                  &lt;code&gt;columnIndex&lt;/code&gt; equals &lt;code&gt;newIndex&lt;/code&gt;.  This method
                  also posts a &lt;code&gt;columnMoved&lt;/code&gt; event to its listeners.                
                <param>
                    columnIndex                     the index of column to be moved                    
                </param>
                <param>
                    newIndex                        new index to move the column                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>column</code> or
                      <code>newIndex</code>
                      are not in the valid range                    
                </exception>
            </javadoc>
            <method name="moveColumn" type="void" line="123">
                <params>
                    <param name="columnIndex" type="int"/>
                    <param name="newIndex" type="int"/>
                </params>
                <declaration name="aColumn" type="TableColumn" line="125"/>
                <scope line="126"/>
                <declaration name="selected" type="boolean" line="132"/>
                <scope line="136"/>
                <scope line="139"/>
            </method>
            <javadoc line="144">
                Sets the column margin to &lt;code&gt;newMargin&lt;/code&gt;.  This method
                  also posts a &lt;code&gt;columnMarginChanged&lt;/code&gt; event to its
                  listeners.                
                <param>
                    newMargin               the new margin width, in pixels                    
                </param>
                <see>
                    #getColumnMargin                    
                </see>
                <see>
                    #getTotalColumnWidth                    
                </see>
            </javadoc>
            <method name="setColumnMargin" type="void" line="152">
                <params>
                    <param name="newMargin" type="int"/>
                </params>
                <scope line="153"/>
            </method>
            <javadoc line="158">
                Returns the number of columns in the &lt;code&gt;tableColumns&lt;/code&gt; array.                
                <return>
                    the number of columns in the <code>tableColumns</code> array                    
                </return>
                <see>
                    #getColumns                    
                </see>
            </javadoc>
            <method name="getColumnCount" type="int" line="163"/>
            <javadoc line="166">
                Returns an &lt;code&gt;Enumeration&lt;/code&gt; of all the columns in the model.                
                <return>
                    an <code>Enumeration</code> of the columns in the model                    
                </return>
            </javadoc>
            <method name="getColumns" type="Enumeration<TableColumn>" line="170"/>
            <javadoc line="173">
                Returns the index of the first column in the &lt;code&gt;tableColumns&lt;/code&gt;
                  array whose identifier is equal to &lt;code&gt;identifier&lt;/code&gt;,
                  when compared using &lt;code&gt;equals&lt;/code&gt;.                
                <param>
                    identifier              the identifier object                    
                </param>
                <return>
                    the index of the first column in the
                      <code>tableColumns</code> array whose identifier
                      is equal to <code>identifier</code>                    
                </return>
                <exception>
                    IllegalArgumentException  if <code>identifier</code>
                      is <code>null</code>, or if no
                      <code>TableColumn</code> has this
                      <code>identifier</code>                    
                </exception>
                <see>
                    #getColumn                    
                </see>
            </javadoc>
            <method name="getColumnIndex" type="int" line="187">
                <params>
                    <param name="identifier" type="Object"/>
                </params>
                <scope line="188"/>
                <declaration name="enumeration" type="Enumeration" line="191"/>
                <declaration name="aColumn" type="TableColumn" line="192"/>
                <declaration name="index" type="int" line="193"/>
                <scope line="194"/>
            </method>
            <javadoc line="201">
                Returns the &lt;code&gt;TableColumn&lt;/code&gt; object for the column
                  at &lt;code&gt;columnIndex&lt;/code&gt;.                
                <param>
                    columnIndex     the index of the column desired                    
                </param>
                <return>
                    the <code>TableColumn</code> object for the column
                      at <code>columnIndex</code>                    
                </return>
            </javadoc>
            <method name="getColumn" type="TableColumn" line="208">
                <params>
                    <param name="columnIndex" type="int"/>
                </params>
            </method>
            <javadoc line="211">
                Returns the width margin for &lt;code&gt;TableColumn&lt;/code&gt;.
                  The default &lt;code&gt;columnMargin&lt;/code&gt; is 1.                
                <return>
                    the maximum width for the <code>TableColumn</code>                    
                </return>
                <see>
                    #setColumnMargin                    
                </see>
            </javadoc>
            <method name="getColumnMargin" type="int" line="217"/>
            <javadoc line="220">
                Returns the index of the column that lies at position &lt;code&gt;x&lt;/code&gt;,
                  or -1 if no column covers this point.
                  In keeping with Swing&apos;s separable model architecture, a
                  TableColumnModel does not know how the table columns actually appear on
                  screen.  The visual presentation of the columns is the responsibility
                  of the view/controller object using this model (typically JTable).  The
                  view/controller need not display the columns sequentially from left to
                  right.  For example, columns could be displayed from right to left to
                  accomodate a locale preference or some columns might be hidden at the
                  request of the user.  Because the model does not know how the columns
                  are laid out on screen, the given &lt;code&gt;xPosition&lt;/code&gt; should not be
                  considered to be a coordinate in 2D graphics space.  Instead, it should
                  be considered to be a width from the start of the first column in the
                  model.  If the column index for a given X coordinate in 2D space is
                  required, &lt;code&gt;JTable.columnAtPoint&lt;/code&gt; can be used instead.                
                <param>
                    x  the horizontal location of interest                    
                </param>
                <return>
                    the index of the column or -1 if no column is found                    
                </return>
                <see>
                    javax.swing.JTable#columnAtPoint                    
                </see>
            </javadoc>
            <method name="getColumnIndexAtX" type="int" line="240">
                <params>
                    <param name="x" type="int"/>
                </params>
                <scope line="241"/>
                <declaration name="cc" type="int" line="244"/>
                <scope line="245">
                    <scope line="247"/>
                </scope>
            </method>
            <javadoc line="253">
                Returns the total combined width of all columns.                
                <return>
                    the <code>totalColumnWidth</code> property                    
                </return>
            </javadoc>
            <method name="getTotalColumnWidth" type="int" line="257">
                <scope line="258"/>
            </method>
            <javadoc line="263">
                Sets the selection model for this &lt;code&gt;TableColumnModel&lt;/code&gt;
                  to &lt;code&gt;newModel&lt;/code&gt;
                  and registers for listener notifications from the new selection
                  model.  If &lt;code&gt;newModel&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  an exception is thrown.                
                <param>
                    newModel        the new selection model                    
                </param>
                <exception>
                    IllegalArgumentException      if <code>newModel</code>
                      is <code>null</code>                    
                </exception>
                <see>
                    #getSelectionModel                    
                </see>
            </javadoc>
            <method name="setSelectionModel" type="void" line="274">
                <params>
                    <param name="newModel" type="ListSelectionModel"/>
                </params>
                <scope line="275"/>
                <declaration name="oldModel" type="ListSelectionModel" line="278"/>
                <scope line="279">
                    <scope line="280"/>
                </scope>
            </method>
            <javadoc line="287">
                Returns the &lt;code&gt;ListSelectionModel&lt;/code&gt; that is used to
                  maintain column selection state.                
                <return>
                    the object that provides column selection state.  Or
                      <code>null</code> if row selection is not allowed.                    
                </return>
                <see>
                    #setSelectionModel                    
                </see>
            </javadoc>
            <method name="getSelectionModel" type="ListSelectionModel" line="294"/>
            <javadoc line="297">
                Sets whether column selection is allowed.  The default is false.                
                <param>
                    flag true if column selection will be allowed, false otherwise                    
                </param>
            </javadoc>
            <method name="setColumnSelectionAllowed" type="void" line="301">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="304">
                Returns true if column selection is allowed, otherwise false.
                  The default is false.                
                <return>
                    the <code>columnSelectionAllowed</code> property                    
                </return>
            </javadoc>
            <method name="getColumnSelectionAllowed" type="boolean" line="309"/>
            <javadoc line="312">
                Returns an array of selected columns.  If &lt;code&gt;selectionModel&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;, returns an empty array.                
                <return>
                    an array of selected columns or an empty array if nothing
                      is selected or the <code>selectionModel</code> is
                      <code>null</code>                    
                </return>
            </javadoc>
            <method name="getSelectedColumns" type="int[]" line="319">
                <scope line="320">
                    <declaration name="iMin" type="int" line="321"/>
                    <declaration name="iMax" type="int" line="322"/>
                    <scope line="323"/>
                    <declaration name="rvTmp" type="int[]" line="326"/>
                    <declaration name="n" type="int" line="327"/>
                    <scope line="328">
                        <scope line="329"/>
                    </scope>
                    <declaration name="rv" type="int[]" line="333"/>
                </scope>
            </method>
            <javadoc line="339">
                Returns the number of columns selected.                
                <return>
                    the number of columns selected                    
                </return>
            </javadoc>
            <method name="getSelectedColumnCount" type="int" line="343">
                <scope line="344">
                    <declaration name="iMin" type="int" line="345"/>
                    <declaration name="iMax" type="int" line="346"/>
                    <declaration name="count" type="int" line="347"/>
                    <scope line="348">
                        <scope line="349"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="357">
                Adds a listener for table column model events.                
                <param>
                    x  a <code>TableColumnModelListener</code> object                    
                </param>
            </javadoc>
            <method name="addColumnModelListener" type="void" line="361">
                <params>
                    <param name="x" type="TableColumnModelListener"/>
                </params>
            </method>
            <javadoc line="364">
                Removes a listener for table column model events.                
                <param>
                    x  a <code>TableColumnModelListener</code> object                    
                </param>
            </javadoc>
            <method name="removeColumnModelListener" type="void" line="368">
                <params>
                    <param name="x" type="TableColumnModelListener"/>
                </params>
            </method>
            <javadoc line="371">
                Returns an array of all the column model listeners
                  registered on this model.                
                <return>
                    all of this default table column model's <code>ColumnModelListener</code>s
                      or an empty
                      array if no column model listeners are currently registered                    
                </return>
                <see>
                    #addColumnModelListener                    
                </see>
                <see>
                    #removeColumnModelListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getColumnModelListeners" type="TableColumnModelListener[]" line="381"/>
            <javadoc line="384">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireColumnAdded" type="void" line="392">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="393"/>
                <scope line="394">
                    <scope line="395"/>
                </scope>
            </method>
            <javadoc line="400">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e  the event received                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireColumnRemoved" type="void" line="408">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="409"/>
                <scope line="410">
                    <scope line="411"/>
                </scope>
            </method>
            <javadoc line="416">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event received                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireColumnMoved" type="void" line="424">
                <params>
                    <param name="e" type="TableColumnModelEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="425"/>
                <scope line="426">
                    <scope line="427"/>
                </scope>
            </method>
            <javadoc line="432">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event received                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireColumnSelectionChanged" type="void" line="440">
                <params>
                    <param name="e" type="ListSelectionEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="441"/>
                <scope line="442">
                    <scope line="443"/>
                </scope>
            </method>
            <javadoc line="448">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireColumnMarginChanged" type="void" line="455">
                <declaration name="listeners" type="Object[]" line="456"/>
                <scope line="457">
                    <scope line="458"/>
                </scope>
            </method>
            <javadoc line="464">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this model.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal,
                  such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;DefaultTableColumnModel&lt;/code&gt; &lt;code&gt;m&lt;/code&gt;
                  for its column model listeners with the following code:
                  &lt;pre&gt;ColumnModelListener[] cmls = (ColumnModelListener[])(m.getListeners(ColumnModelListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      <code>java.util.EventListener</code>                    
                </param>
                <return>
                    an array of all objects registered as
                      <code><em>Foo</em>Listener</code>s on this model,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if <code>listenerType</code>
                      doesn't specify a class or interface that implements
                      <code>java.util.EventListener</code>                    
                </exception>
                <see>
                    #getColumnModelListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="493">
                <params>
                    <param name="listenerType" type="Class<T>"/>
                </params>
            </method>
            <javadoc line="496">
                Property Change Listener change method.  Used to track changes
                  to the column width or preferred column width.                
                <param>
                    evt  <code>PropertyChangeEvent</code>                    
                </param>
            </javadoc>
            <method name="propertyChange" type="void" line="501">
                <params>
                    <param name="evt" type="PropertyChangeEvent"/>
                </params>
                <declaration name="name" type="String" line="502"/>
                <scope line="503"/>
            </method>
            <javadoc line="508">
                A &lt;code&gt;ListSelectionListener&lt;/code&gt; that forwards
                  &lt;code&gt;ListSelectionEvents&lt;/code&gt; when there is a column
                  selection change.                
                <param>
                    e  the change event                    
                </param>
            </javadoc>
            <method name="valueChanged" type="void" line="514">
                <params>
                    <param name="e" type="ListSelectionEvent"/>
                </params>
            </method>
            <javadoc line="517">
                Creates a new default list selection model.                
            </javadoc>
            <method name="createSelectionModel" type="ListSelectionModel" line="520"/>
            <javadoc line="523">
                Recalculates the total combined width of all columns.  Updates the
                  &lt;code&gt;totalColumnWidth&lt;/code&gt; property.                
            </javadoc>
            <method name="recalcWidthCache" type="void" line="527">
                <declaration name="enumeration" type="Enumeration" line="528"/>
                <scope line="530"/>
            </method>
            <method name="invalidateWidthCache" type="void" line="534"/>
        </class>
    </source>