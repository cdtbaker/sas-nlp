<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="java.awt.Component"/>
        <import package="javax.swing"/>
        <interface name="TableCellRenderer">
            <javadoc line="31">
                This interface defines the method required by any object that
                  would like to be a renderer for cells in a &lt;code&gt;JTable&lt;/code&gt;.                
                <author>
                    Alan Chung                    
                </author>
            </javadoc>
            <method name="getTableCellRendererComponent" type="Component" line="40"/>
            <javadoc line="40">
                Returns the component used for drawing the cell.  This method is
                  used to configure the renderer appropriately before drawing.
                  &lt;p&gt;
                  The &lt;code&gt;TableCellRenderer&lt;/code&gt; is also responsible for rendering the
                  the cell representing the table&apos;s current DnD drop location if
                  it has one. If this renderer cares about rendering
                  the DnD drop location, it should query the table directly to
                  see if the given row and column represent the drop location:
                  &lt;pre&gt;
                  JTable.DropLocation dropLocation = table.getDropLocation();
                  if (dropLocation != null
                  &amp;&amp; !dropLocation.isInsertRow()
                  &amp;&amp; !dropLocation.isInsertColumn()
                  &amp;&amp; dropLocation.getRow() == row
                  &amp;&amp; dropLocation.getColumn() == column) {
                  // this cell represents the current drop location
                  // so render it specially, perhaps with a different color
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  During a printing operation, this method will be called with
                  &lt;code&gt;isSelected&lt;/code&gt; and &lt;code&gt;hasFocus&lt;/code&gt; values of
                  &lt;code&gt;false&lt;/code&gt; to prevent selection and focus from appearing
                  in the printed output. To do other customization based on whether
                  or not the table is being printed, check the return value from{@link javax.swing.JComponent#isPaintingForPrint()}.                
                <param>
                    table           the &lt;code&gt;JTable&lt;/code&gt; that is asking the
                      renderer to draw; can be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    value           the value of the cell to be rendered.  It is
                      up to the specific renderer to interpret
                      and draw the value.  For example, if
                      &lt;code&gt;value&lt;/code&gt;
                      is the string &quot;true&quot;, it could be rendered as a
                      string or it could be rendered as a check
                      box that is checked.  &lt;code&gt;null&lt;/code&gt; is a
                      valid value                    
                </param>
                <param>
                    isSelected      true if the cell is to be rendered with the
                      selection highlighted; otherwise false                    
                </param>
                <param>
                    hasFocus        if true, render cell appropriately.  For
                      example, put a special border on the cell, if
                      the cell can be edited, render in the color used
                      to indicate editing                    
                </param>
                <param>
                    row             the row index of the cell being drawn.  When
                      drawing the header, the value of
                      &lt;code&gt;row&lt;/code&gt; is -1                    
                </param>
                <param>
                    column          the column index of the cell being drawn                    
                </param>
                <see>
                    javax.swing.JComponent#isPaintingForPrint()                    
                </see>
            </javadoc>
        </interface>
    </source>