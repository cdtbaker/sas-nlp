<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.table">
        <import package="javax.swing"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event.SwingPropertyChangeSupport"/>
        <import package="java.lang.Integer"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Component"/>
        <import package="java.io.Serializable"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <class name="TableColumn" line="11">
            <extends class="Object"/>
            <implements interface="Serializable"/>
            <javadoc line="11">
                A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a
                  &lt;code&gt;JTable&lt;/code&gt;, such as width, resizibility, minimum and maximum width.
                  In addition, the &lt;code&gt;TableColumn&lt;/code&gt; provides slots for a renderer and
                  an editor that can be used to display and edit the values in this column.
                  &lt;p&gt;
                  It is also possible to specify renderers and editors on a per type basis
                  rather than a per column basis - see the
                  &lt;code&gt;setDefaultRenderer&lt;/code&gt; method in the &lt;code&gt;JTable&lt;/code&gt; class.
                  This default mechanism is only used when the renderer (or
                  editor) in the &lt;code&gt;TableColumn&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;TableColumn&lt;/code&gt; stores the link between the columns in the
                  &lt;code&gt;JTable&lt;/code&gt; and the columns in the &lt;code&gt;TableModel&lt;/code&gt;.
                  The &lt;code&gt;modelIndex&lt;/code&gt; is the column in the
                  &lt;code&gt;TableModel&lt;/code&gt;, which will be queried for the data values for the
                  cells in this column. As the column moves around in the view this
                  &lt;code&gt;modelIndex&lt;/code&gt; does not change.
                  &lt;p&gt;
                  &lt;b&gt;Note:&lt;/b&gt; Some implementations may assume that all
                  &lt;code&gt;TableColumnModel&lt;/code&gt;s are unique, therefore we would
                  recommend that the same &lt;code&gt;TableColumn&lt;/code&gt; instance
                  not be added more than once to a &lt;code&gt;TableColumnModel&lt;/code&gt;.
                  To show &lt;code&gt;TableColumn&lt;/code&gt;s with the same column of
                  data from the model, create a new instance with the same
                  &lt;code&gt;modelIndex&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Alan Chung                    
                </author>
                <author>
                    Philip Milne                    
                </author>
                <see>
                    javax.swing.table.TableColumnModel                    
                </see>
                <see>
                    javax.swing.table.DefaultTableColumnModel                    
                </see>
                <see>
                    javax.swing.table.JTableHeader#getDefaultRenderer()                    
                </see>
                <see>
                    JTable#getDefaultRenderer(Class)                    
                </see>
                <see>
                    JTable#getDefaultEditor(Class)                    
                </see>
                <see>
                    JTable#getCellRenderer(int,int)                    
                </see>
                <see>
                    JTable#getCellEditor(int,int)                    
                </see>
            </javadoc>
            <declaration name="COLUMN_WIDTH_PROPERTY" type="String" line="57"/>
            <javadoc line="57">
                Obsolete as of Java 2 platform v1.3.  Please use string literals to identify
                  properties.                
            </javadoc>
            <declaration name="HEADER_VALUE_PROPERTY" type="String" line="62"/>
            <javadoc line="62">
                Obsolete as of Java 2 platform v1.3.  Please use string literals to identify
                  properties.                
            </javadoc>
            <declaration name="HEADER_RENDERER_PROPERTY" type="String" line="67"/>
            <javadoc line="67">
                Obsolete as of Java 2 platform v1.3.  Please use string literals to identify
                  properties.                
            </javadoc>
            <declaration name="CELL_RENDERER_PROPERTY" type="String" line="72"/>
            <javadoc line="72">
                Obsolete as of Java 2 platform v1.3.  Please use string literals to identify
                  properties.                
            </javadoc>
            <declaration name="modelIndex" type="int" line="77"/>
            <javadoc line="77">
                The index of the column in the model which is to be displayed by
                  this &lt;code&gt;TableColumn&lt;/code&gt;. As columns are moved around in the
                  view &lt;code&gt;modelIndex&lt;/code&gt; remains constant.                
            </javadoc>
            <declaration name="identifier" type="Object" line="83"/>
            <javadoc line="83">
                This object is not used internally by the drawing machinery of
                  the &lt;code&gt;JTable&lt;/code&gt;; identifiers may be set in the
                  &lt;code&gt;TableColumn&lt;/code&gt; as as an
                  optional way to tag and locate table columns. The table package does
                  not modify or invoke any methods in these identifier objects other
                  than the &lt;code&gt;equals&lt;/code&gt; method which is used in the
                  &lt;code&gt;getColumnIndex()&lt;/code&gt; method in the
                  &lt;code&gt;DefaultTableColumnModel&lt;/code&gt;.                
            </javadoc>
            <declaration name="width" type="int" line="94"/>
            <javadoc line="94">
                The width of the column.                
            </javadoc>
            <declaration name="minWidth" type="int" line="98"/>
            <javadoc line="98">
                The minimum width of the column.                
            </javadoc>
            <declaration name="preferredWidth" type="int" line="102"/>
            <javadoc line="102">
                The preferred width of the column.                
            </javadoc>
            <declaration name="maxWidth" type="int" line="106"/>
            <javadoc line="106">
                The maximum width of the column.                
            </javadoc>
            <declaration name="headerRenderer" type="TableCellRenderer" line="110"/>
            <javadoc line="110">
                The renderer used to draw the header of the column.                
            </javadoc>
            <declaration name="headerValue" type="Object" line="114"/>
            <javadoc line="114">
                The header value of the column.                
            </javadoc>
            <declaration name="cellRenderer" type="TableCellRenderer" line="118"/>
            <javadoc line="118">
                The renderer used to draw the data cells of the column.                
            </javadoc>
            <declaration name="cellEditor" type="TableCellEditor" line="122"/>
            <javadoc line="122">
                The editor used to edit the data cells of the column.                
            </javadoc>
            <declaration name="isResizable" type="boolean" line="126"/>
            <javadoc line="126">
                If true, the user is allowed to resize the column; the default is true.                
            </javadoc>
            <declaration name="resizedPostingDisableCount" type="int" line="130"/>
            <javadoc line="130">
                This field was not used in previous releases and there are
                  currently no plans to support it in the future.                
                <deprecated>
                    as of Java 2 platform v1.3                    
                </deprecated>
            </javadoc>
            <declaration name="changeSupport" type="SwingPropertyChangeSupport" line="136"/>
            <javadoc line="136">
                If any &lt;code&gt;PropertyChangeListeners&lt;/code&gt; have been registered, the
                  &lt;code&gt;changeSupport&lt;/code&gt; field describes them.                
            </javadoc>
            <javadoc line="141">
                Cover method, using a default model index of 0,
                  default width of 75, a &lt;code&gt;null&lt;/code&gt; renderer and a
                  &lt;code&gt;null&lt;/code&gt; editor.
                  This method is intended for serialization.                
                <see>
                    #TableColumn(int,int,TableCellRenderer,TableCellEditor)                    
                </see>
            </javadoc>
            <method name="TableColumn" type="constructor" line="148"/>
            <javadoc line="151">
                Cover method, using a default width of 75, a &lt;code&gt;null&lt;/code&gt;
                  renderer and a &lt;code&gt;null&lt;/code&gt; editor.                
                <see>
                    #TableColumn(int,int,TableCellRenderer,TableCellEditor)                    
                </see>
            </javadoc>
            <method name="TableColumn" type="constructor" line="156">
                <params>
                    <param name="modelIndex" type="int"/>
                </params>
            </method>
            <javadoc line="159">
                Cover method, using a &lt;code&gt;null&lt;/code&gt; renderer and a
                  &lt;code&gt;null&lt;/code&gt; editor.                
                <see>
                    #TableColumn(int,int,TableCellRenderer,TableCellEditor)                    
                </see>
            </javadoc>
            <method name="TableColumn" type="constructor" line="164">
                <params>
                    <param name="modelIndex" type="int"/>
                    <param name="width" type="int"/>
                </params>
            </method>
            <javadoc line="167">
                Creates and initializes an instance of
                  &lt;code&gt;TableColumn&lt;/code&gt; with the specified model index,
                  width, cell renderer, and cell editor;
                  all &lt;code&gt;TableColumn&lt;/code&gt; constructors delegate to this one.
                  The value of &lt;code&gt;width&lt;/code&gt; is used
                  for both the initial and preferred width;
                  if &lt;code&gt;width&lt;/code&gt; is negative,
                  they&apos;re set to 0.
                  The minimum width is set to 15 unless the initial width is less,
                  in which case the minimum width is set to
                  the initial width.
                  &lt;p&gt;
                  When the &lt;code&gt;cellRenderer&lt;/code&gt;
                  or &lt;code&gt;cellEditor&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;,
                  a default value provided by the &lt;code&gt;JTable&lt;/code&gt;
                  &lt;code&gt;getDefaultRenderer&lt;/code&gt;
                  or &lt;code&gt;getDefaultEditor&lt;/code&gt; method, respectively,
                  is used to
                  provide defaults based on the type of the data in this column.
                  This column-centric rendering strategy can be circumvented by overriding
                  the &lt;code&gt;getCellRenderer&lt;/code&gt; methods in &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    modelIndex the index of the column
                      in the model that supplies the data for this column in the table;
                      the model index remains the same
                      even when columns are reordered in the view                    
                </param>
                <param>
                    width this column's preferred width and initial width                    
                </param>
                <param>
                    cellRenderer the object used to render values in this column                    
                </param>
                <param>
                    cellEditor the object used to edit values in this column                    
                </param>
                <see>
                    #getMinWidth()                    
                </see>
                <see>
                    JTable#getDefaultRenderer(Class)                    
                </see>
                <see>
                    JTable#getDefaultEditor(Class)                    
                </see>
                <see>
                    JTable#getCellRenderer(int,int)                    
                </see>
                <see>
                    JTable#getCellEditor(int,int)                    
                </see>
            </javadoc>
            <method name="TableColumn" type="constructor" line="202">
                <params>
                    <param name="modelIndex" type="int"/>
                    <param name="width" type="int"/>
                    <param name="cellRenderer" type="TableCellRenderer"/>
                    <param name="cellEditor" type="TableCellEditor"/>
                </params>
            </method>
            <method name="firePropertyChange" type="void" line="214">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="Object"/>
                    <param name="newValue" type="Object"/>
                </params>
                <scope line="215"/>
            </method>
            <method name="firePropertyChange" type="void" line="219">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="int"/>
                    <param name="newValue" type="int"/>
                </params>
                <scope line="220"/>
            </method>
            <method name="firePropertyChange" type="void" line="224">
                <params>
                    <param name="propertyName" type="String"/>
                    <param name="oldValue" type="boolean"/>
                    <param name="newValue" type="boolean"/>
                </params>
                <scope line="225"/>
            </method>
            <javadoc line="229">
                Sets the model index for this column. The model index is the
                  index of the column in the model that will be displayed by this
                  &lt;code&gt;TableColumn&lt;/code&gt;. As the &lt;code&gt;TableColumn&lt;/code&gt;
                  is moved around in the view the model index remains constant.                
                <param>
                    modelIndex  the new modelIndex                    
                </param>
                <beaninfobound>
                    : true
                      description: The model index.                    
                </beaninfobound>
            </javadoc>
            <method name="setModelIndex" type="void" line="238">
                <params>
                    <param name="modelIndex" type="int"/>
                </params>
                <declaration name="old" type="int" line="239"/>
            </method>
            <javadoc line="243">
                Returns the model index for this column.                
                <return>
                    the <code>modelIndex</code> property                    
                </return>
            </javadoc>
            <method name="getModelIndex" type="int" line="247"/>
            <javadoc line="250">
                Sets the &lt;code&gt;TableColumn&lt;/code&gt;&apos;s identifier to
                  &lt;code&gt;anIdentifier&lt;/code&gt;. &lt;p&gt;
                  Note: identifiers are not used by the &lt;code&gt;JTable&lt;/code&gt;,
                  they are purely a
                  convenience for the external tagging and location of columns.                
                <param>
                    identifier           an identifier for this column                    
                </param>
                <see>
                    #getIdentifier                    
                </see>
                <beaninfobound>
                    : true
                      description: A unique identifier for this column.                    
                </beaninfobound>
            </javadoc>
            <method name="setIdentifier" type="void" line="261">
                <params>
                    <param name="identifier" type="Object"/>
                </params>
                <declaration name="old" type="Object" line="262"/>
            </method>
            <javadoc line="266">
                Returns the &lt;code&gt;identifier&lt;/code&gt; object for this column.
                  Note identifiers are not used by &lt;code&gt;JTable&lt;/code&gt;,
                  they are purely a convenience for external use.
                  If the &lt;code&gt;identifier&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  &lt;code&gt;getIdentifier()&lt;/code&gt; returns &lt;code&gt;getHeaderValue&lt;/code&gt;
                  as a default.                
                <return>
                    the <code>identifier</code> property                    
                </return>
                <see>
                    #setIdentifier                    
                </see>
            </javadoc>
            <method name="getIdentifier" type="Object" line="276"/>
            <javadoc line="279">
                Sets the &lt;code&gt;Object&lt;/code&gt; whose string representation will be
                  used as the value for the &lt;code&gt;headerRenderer&lt;/code&gt;.  When the
                  &lt;code&gt;TableColumn&lt;/code&gt; is created, the default &lt;code&gt;headerValue&lt;/code&gt;
                  is &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    headerValue  the new headerValue                    
                </param>
                <see>
                    #getHeaderValue                    
                </see>
                <beaninfobound>
                    : true
                      description: The text to be used by the header renderer.                    
                </beaninfobound>
            </javadoc>
            <method name="setHeaderValue" type="void" line="289">
                <params>
                    <param name="headerValue" type="Object"/>
                </params>
                <declaration name="old" type="Object" line="290"/>
            </method>
            <javadoc line="294">
                Returns the &lt;code&gt;Object&lt;/code&gt; used as the value for the header
                  renderer.                
                <return>
                    the <code>headerValue</code> property                    
                </return>
                <see>
                    #setHeaderValue                    
                </see>
            </javadoc>
            <method name="getHeaderValue" type="Object" line="300"/>
            <javadoc line="303">
                Sets the &lt;code&gt;TableCellRenderer&lt;/code&gt; used to draw the
                  &lt;code&gt;TableColumn&lt;/code&gt;&apos;s header to &lt;code&gt;headerRenderer&lt;/code&gt;.
                  &lt;p&gt;
                  It is the header renderers responsibility to render the sorting
                  indicator.  If you are using sorting and specify a renderer your
                  renderer must render the sorting indication.                
                <param>
                    headerRenderer  the new headerRenderer                    
                </param>
                <see>
                    #getHeaderRenderer                    
                </see>
                <beaninfobound>
                    : true
                      description: The header renderer.                    
                </beaninfobound>
            </javadoc>
            <method name="setHeaderRenderer" type="void" line="315">
                <params>
                    <param name="headerRenderer" type="TableCellRenderer"/>
                </params>
                <declaration name="old" type="TableCellRenderer" line="316"/>
            </method>
            <javadoc line="320">
                Returns the &lt;code&gt;TableCellRenderer&lt;/code&gt; used to draw the header of the
                  &lt;code&gt;TableColumn&lt;/code&gt;. When the &lt;code&gt;headerRenderer&lt;/code&gt; is
                  &lt;code&gt;null&lt;/code&gt;, the &lt;code&gt;JTableHeader&lt;/code&gt;
                  uses its &lt;code&gt;defaultRenderer&lt;/code&gt;. The default value for a
                  &lt;code&gt;headerRenderer&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>headerRenderer</code> property                    
                </return>
                <see>
                    #setHeaderRenderer                    
                </see>
                <see>
                    #setHeaderValue                    
                </see>
                <see>
                    javax.swing.table.JTableHeader#getDefaultRenderer()                    
                </see>
            </javadoc>
            <method name="getHeaderRenderer" type="TableCellRenderer" line="331"/>
            <javadoc line="334">
                Sets the &lt;code&gt;TableCellRenderer&lt;/code&gt; used by &lt;code&gt;JTable&lt;/code&gt;
                  to draw individual values for this column.                
                <param>
                    cellRenderer  the new cellRenderer                    
                </param>
                <see>
                    #getCellRenderer                    
                </see>
                <beaninfobound>
                    : true
                      description: The renderer to use for cell values.                    
                </beaninfobound>
            </javadoc>
            <method name="setCellRenderer" type="void" line="342">
                <params>
                    <param name="cellRenderer" type="TableCellRenderer"/>
                </params>
                <declaration name="old" type="TableCellRenderer" line="343"/>
            </method>
            <javadoc line="347">
                Returns the &lt;code&gt;TableCellRenderer&lt;/code&gt; used by the
                  &lt;code&gt;JTable&lt;/code&gt; to draw
                  values for this column.  The &lt;code&gt;cellRenderer&lt;/code&gt; of the column
                  not only controls the visual look for the column, but is also used to
                  interpret the value object supplied by the &lt;code&gt;TableModel&lt;/code&gt;.
                  When the &lt;code&gt;cellRenderer&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  the &lt;code&gt;JTable&lt;/code&gt; uses a default renderer based on the
                  class of the cells in that column. The default value for a
                  &lt;code&gt;cellRenderer&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>cellRenderer</code> property                    
                </return>
                <see>
                    #setCellRenderer                    
                </see>
                <see>
                    JTable#setDefaultRenderer                    
                </see>
            </javadoc>
            <method name="getCellRenderer" type="TableCellRenderer" line="361"/>
            <javadoc line="364">
                Sets the editor to used by when a cell in this column is edited.                
                <param>
                    cellEditor  the new cellEditor                    
                </param>
                <see>
                    #getCellEditor                    
                </see>
                <beaninfobound>
                    : true
                      description: The editor to use for cell values.                    
                </beaninfobound>
            </javadoc>
            <method name="setCellEditor" type="void" line="371">
                <params>
                    <param name="cellEditor" type="TableCellEditor"/>
                </params>
                <declaration name="old" type="TableCellEditor" line="372"/>
            </method>
            <javadoc line="376">
                Returns the &lt;code&gt;TableCellEditor&lt;/code&gt; used by the
                  &lt;code&gt;JTable&lt;/code&gt; to edit values for this column.  When the
                  &lt;code&gt;cellEditor&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, the &lt;code&gt;JTable&lt;/code&gt;
                  uses a default editor based on the
                  class of the cells in that column. The default value for a
                  &lt;code&gt;cellEditor&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    the <code>cellEditor</code> property                    
                </return>
                <see>
                    #setCellEditor                    
                </see>
                <see>
                    JTable#setDefaultEditor                    
                </see>
            </javadoc>
            <method name="getCellEditor" type="TableCellEditor" line="387"/>
            <javadoc line="390">
                This method should not be used to set the widths of columns in the
                  &lt;code&gt;JTable&lt;/code&gt;, use &lt;code&gt;setPreferredWidth&lt;/code&gt; instead.
                  Like a layout manager in the
                  AWT, the &lt;code&gt;JTable&lt;/code&gt; adjusts a column&apos;s width automatically
                  whenever the
                  table itself changes size, or a column&apos;s preferred width is changed.
                  Setting widths programmatically therefore has no long term effect.
                  &lt;p&gt;
                  This method sets this column&apos;s width to &lt;code&gt;width&lt;/code&gt;.
                  If &lt;code&gt;width&lt;/code&gt; exceeds the minimum or maximum width,
                  it is adjusted to the appropriate limiting value.                
                <param>
                    width  the new width                    
                </param>
                <see>
                    #getWidth                    
                </see>
                <see>
                    #setMinWidth                    
                </see>
                <see>
                    #setMaxWidth                    
                </see>
                <see>
                    #setPreferredWidth                    
                </see>
                <see>
                    JTable#doLayout()                    
                </see>
                <beaninfobound>
                    : true
                      description: The width of the column.                    
                </beaninfobound>
            </javadoc>
            <method name="setWidth" type="void" line="411">
                <params>
                    <param name="width" type="int"/>
                </params>
                <declaration name="old" type="int" line="412"/>
            </method>
            <javadoc line="416">
                Returns the width of the &lt;code&gt;TableColumn&lt;/code&gt;. The default width is
                  75.                
                <return>
                    the <code>width</code> property                    
                </return>
                <see>
                    #setWidth                    
                </see>
            </javadoc>
            <method name="getWidth" type="int" line="422"/>
            <javadoc line="425">
                Sets this column&apos;s preferred width to &lt;code&gt;preferredWidth&lt;/code&gt;.
                  If &lt;code&gt;preferredWidth&lt;/code&gt; exceeds the minimum or maximum width,
                  it is adjusted to the appropriate limiting value.
                  &lt;p&gt;
                  For details on how the widths of columns in the &lt;code&gt;JTable&lt;/code&gt;
                  (and &lt;code&gt;JTableHeader&lt;/code&gt;) are calculated from the
                  &lt;code&gt;preferredWidth&lt;/code&gt;,
                  see the &lt;code&gt;doLayout&lt;/code&gt; method in &lt;code&gt;JTable&lt;/code&gt;.                
                <param>
                    preferredWidth the new preferred width                    
                </param>
                <see>
                    #getPreferredWidth                    
                </see>
                <see>
                    JTable#doLayout()                    
                </see>
                <beaninfobound>
                    : true
                      description: The preferred width of the column.                    
                </beaninfobound>
            </javadoc>
            <method name="setPreferredWidth" type="void" line="440">
                <params>
                    <param name="preferredWidth" type="int"/>
                </params>
                <declaration name="old" type="int" line="441"/>
            </method>
            <javadoc line="445">
                Returns the preferred width of the &lt;code&gt;TableColumn&lt;/code&gt;.
                  The default preferred width is 75.                
                <return>
                    the <code>preferredWidth</code> property                    
                </return>
                <see>
                    #setPreferredWidth                    
                </see>
            </javadoc>
            <method name="getPreferredWidth" type="int" line="451"/>
            <javadoc line="454">
                Sets the &lt;code&gt;TableColumn&lt;/code&gt;&apos;s minimum width to
                  &lt;code&gt;minWidth&lt;/code&gt;,
                  adjusting the new minimum width if necessary to ensure that
                  0 &amp;lt;= &lt;code&gt;minWidth&lt;/code&gt; &amp;lt;= &lt;code&gt;maxWidth&lt;/code&gt;.
                  For example, if the &lt;code&gt;minWidth&lt;/code&gt; argument is negative,
                  this method sets the &lt;code&gt;minWidth&lt;/code&gt; property to 0.
                  &lt;p&gt;
                  If the value of the
                  &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;preferredWidth&lt;/code&gt; property
                  is less than the new minimum width,
                  this method sets that property to the new minimum width.                
                <param>
                    minWidth  the new minimum width                    
                </param>
                <see>
                    #getMinWidth                    
                </see>
                <see>
                    #setPreferredWidth                    
                </see>
                <see>
                    #setMaxWidth                    
                </see>
                <beaninfobound>
                    : true
                      description: The minimum width of the column.                    
                </beaninfobound>
            </javadoc>
            <method name="setMinWidth" type="void" line="473">
                <params>
                    <param name="minWidth" type="int"/>
                </params>
                <declaration name="old" type="int" line="474"/>
                <scope line="476"/>
                <scope line="479"/>
            </method>
            <javadoc line="484">
                Returns the minimum width for the &lt;code&gt;TableColumn&lt;/code&gt;. The
                  &lt;code&gt;TableColumn&lt;/code&gt;&apos;s width can&apos;t be made less than this either
                  by the user or programmatically.                
                <return>
                    the <code>minWidth</code> property                    
                </return>
                <see>
                    #setMinWidth                    
                </see>
                <see>
                    #TableColumn(int,int,TableCellRenderer,TableCellEditor)                    
                </see>
            </javadoc>
            <method name="getMinWidth" type="int" line="492"/>
            <javadoc line="495">
                Sets the &lt;code&gt;TableColumn&lt;/code&gt;&apos;s maximum width to
                  &lt;code&gt;maxWidth&lt;/code&gt; or,
                  if &lt;code&gt;maxWidth&lt;/code&gt; is less than the minimum width,
                  to the minimum width.
                  &lt;p&gt;
                  If the value of the
                  &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;preferredWidth&lt;/code&gt; property
                  is more than the new maximum width,
                  this method sets that property to the new maximum width.                
                <param>
                    maxWidth  the new maximum width                    
                </param>
                <see>
                    #getMaxWidth                    
                </see>
                <see>
                    #setPreferredWidth                    
                </see>
                <see>
                    #setMinWidth                    
                </see>
                <beaninfobound>
                    : true
                      description: The maximum width of the column.                    
                </beaninfobound>
            </javadoc>
            <method name="setMaxWidth" type="void" line="512">
                <params>
                    <param name="maxWidth" type="int"/>
                </params>
                <declaration name="old" type="int" line="513"/>
                <scope line="515"/>
                <scope line="518"/>
            </method>
            <javadoc line="523">
                Returns the maximum width for the &lt;code&gt;TableColumn&lt;/code&gt;. The
                  &lt;code&gt;TableColumn&lt;/code&gt;&apos;s width can&apos;t be made larger than this
                  either by the user or programmatically.  The default maxWidth
                  is Integer.MAX_VALUE.                
                <return>
                    the <code>maxWidth</code> property                    
                </return>
                <see>
                    #setMaxWidth                    
                </see>
            </javadoc>
            <method name="getMaxWidth" type="int" line="531"/>
            <javadoc line="534">
                Sets whether this column can be resized.                
                <param>
                    isResizable  if true, resizing is allowed; otherwise false                    
                </param>
                <see>
                    #getResizable                    
                </see>
                <beaninfobound>
                    : true
                      description: Whether or not this column can be resized.                    
                </beaninfobound>
            </javadoc>
            <method name="setResizable" type="void" line="541">
                <params>
                    <param name="isResizable" type="boolean"/>
                </params>
                <declaration name="old" type="boolean" line="542"/>
            </method>
            <javadoc line="546">
                Returns true if the user is allowed to resize the
                  &lt;code&gt;TableColumn&lt;/code&gt;&apos;s
                  width, false otherwise. You can change the width programmatically
                  regardless of this setting.  The default is true.                
                <return>
                    the <code>isResizable</code> property                    
                </return>
                <see>
                    #setResizable                    
                </see>
            </javadoc>
            <method name="getResizable" type="boolean" line="554"/>
            <javadoc line="557">
                Resizes the &lt;code&gt;TableColumn&lt;/code&gt; to fit the width of its header cell.
                  This method does nothing if the header renderer is &lt;code&gt;null&lt;/code&gt;
                  (the default case). Otherwise, it sets the minimum, maximum and preferred
                  widths of this column to the widths of the minimum, maximum and preferred
                  sizes of the Component delivered by the header renderer.
                  The transient &quot;width&quot; property of this TableColumn is also set to the
                  preferred width. Note this method is not used internally by the table
                  package.                
                <see>
                    #setPreferredWidth                    
                </see>
            </javadoc>
            <method name="sizeWidthToFit" type="void" line="568">
                <scope line="569"/>
                <declaration name="c" type="Component" line="572"/>
            </method>
            <javadoc line="578">
                This field was not used in previous releases and there are
                  currently no plans to support it in the future.                
                <deprecated>
                    as of Java 2 platform v1.3                    
                </deprecated>
            </javadoc>
            <method name="disableResizedPosting" type="void" line="583"/>
            <javadoc line="586">
                This field was not used in previous releases and there are
                  currently no plans to support it in the future.                
                <deprecated>
                    as of Java 2 platform v1.3                    
                </deprecated>
            </javadoc>
            <method name="enableResizedPosting" type="void" line="591"/>
            <javadoc line="594">
                Adds a &lt;code&gt;PropertyChangeListener&lt;/code&gt; to the listener list.
                  The listener is registered for all properties.
                  &lt;p&gt;
                  A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired in response to an
                  explicit call to &lt;code&gt;setFont&lt;/code&gt;, &lt;code&gt;setBackground&lt;/code&gt;,
                  or &lt;code&gt;setForeground&lt;/code&gt; on the
                  current component.  Note that if the current component is
                  inheriting its foreground, background, or font from its
                  container, then no event will be fired in response to a
                  change in the inherited property.                
                <param>
                    listener  the listener to be added                    
                </param>
            </javadoc>
            <method name="addPropertyChangeListener" type="void" line="607">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="608"/>
            </method>
            <javadoc line="613">
                Removes a &lt;code&gt;PropertyChangeListener&lt;/code&gt; from the listener list.
                  The &lt;code&gt;PropertyChangeListener&lt;/code&gt; to be removed was registered
                  for all properties.                
                <param>
                    listener  the listener to be removed                    
                </param>
            </javadoc>
            <method name="removePropertyChangeListener" type="void" line="619">
                <params>
                    <param name="listener" type="PropertyChangeListener"/>
                </params>
                <scope line="620"/>
            </method>
            <javadoc line="624">
                Returns an array of all the &lt;code&gt;PropertyChangeListener&lt;/code&gt;s added
                  to this TableColumn with addPropertyChangeListener().                
                <return>
                    all of the <code>PropertyChangeListener</code>s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getPropertyChangeListeners" type="PropertyChangeListener[]" line="631">
                <scope line="632"/>
            </method>
            <javadoc line="637">
                As of Java 2 platform v1.3, this method is not called by the &lt;code&gt;TableColumn&lt;/code&gt;
                  constructor.  Previously this method was used by the
                  &lt;code&gt;TableColumn&lt;/code&gt; to create a default header renderer.
                  As of Java 2 platform v1.3, the default header renderer is &lt;code&gt;null&lt;/code&gt;.
                  &lt;code&gt;JTableHeader&lt;/code&gt; now provides its own shared default
                  renderer, just as the &lt;code&gt;JTable&lt;/code&gt; does for its cell renderers.                
                <return>
                    the default header renderer                    
                </return>
                <see>
                    javax.swing.table.JTableHeader#createDefaultRenderer()                    
                </see>
            </javadoc>
            <method name="createDefaultHeaderRenderer" type="TableCellRenderer" line="647">
                <anonymous_class line="648">
                    <method name="getTableCellRendererComponent" type="Component" line="649">
                        <params>
                            <param name="table" type="JTable"/>
                            <param name="value" type="Object"/>
                            <param name="isSelected" type="boolean"/>
                            <param name="hasFocus" type="boolean"/>
                            <param name="row" type="int"/>
                            <param name="column" type="int"/>
                        </params>
                        <scope line="650">
                            <declaration name="header" type="JTableHeader" line="651"/>
                            <scope line="652"/>
                        </scope>
                    </method>
                </anonymous_class>
                <declaration name="label" type="DefaultTableCellRenderer" line="648"/>
            </method>
        </class>
    </source>