<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.applet.Applet"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.util.Locale"/>
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.accessibility"/>
        <class name="JApplet" line="36">
            <extends class="Applet"/>
            <comment line="539">
                ///////////////                
            </comment>
            <comment line="540">
                Accessibility support                
            </comment>
            <comment line="541">
                //////////////                
            </comment>
            <implements interface="Accessible"/>
            <implements interface="RootPaneContainer"/>
            <implements interface="TransferHandler.HasGetTransferHandler"/>
            <javadoc line="36">
                An extended version of &lt;code&gt;java.applet.Applet&lt;/code&gt; that adds support for
                  the JFC/Swing component architecture.
                  You can find task-oriented documentation about using &lt;code&gt;JApplet&lt;/code&gt;
                  in &lt;em&gt;The Java Tutorial&lt;/em&gt;,
                  in the section
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/applet.html&quot;&gt;How to Make Applets&lt;/a&gt;.
                  &lt;p&gt;
                  The &lt;code&gt;JApplet&lt;/code&gt; class is slightly incompatible with
                  &lt;code&gt;java.applet.Applet&lt;/code&gt;.  &lt;code&gt;JApplet&lt;/code&gt; contains a
                  &lt;code&gt;JRootPane&lt;/code&gt; as its only child.  The &lt;code&gt;contentPane&lt;/code&gt;
                  should be the parent of any children of the &lt;code&gt;JApplet&lt;/code&gt;.
                  As a convenience &lt;code&gt;add&lt;/code&gt; and its variants, &lt;code&gt;remove&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; have been overridden to forward to the
                  &lt;code&gt;contentPane&lt;/code&gt; as necessary. This means you can write:
                  &lt;pre&gt;
                  applet.add(child);
                  &lt;/pre&gt;
                  And the child will be added to the &lt;code&gt;contentPane&lt;/code&gt;.
                  The &lt;code&gt;contentPane&lt;/code&gt; will always be non-&lt;code&gt;null&lt;/code&gt;.
                  Attempting to set it to &lt;code&gt;null&lt;/code&gt; will cause the
                  &lt;code&gt;JApplet&lt;/code&gt; to throw an exception. The default
                  &lt;code&gt;contentPane&lt;/code&gt; will have a &lt;code&gt;BorderLayout&lt;/code&gt;
                  manager set on it.
                  Refer to {@link javax.swing.RootPaneContainer}for details on adding, removing and setting the &lt;code&gt;LayoutManager&lt;/code&gt;
                  of a &lt;code&gt;JApplet&lt;/code&gt;.
                  &lt;p&gt;
                  Please see the &lt;code&gt;JRootPane&lt;/code&gt; documentation for a
                  complete description of the &lt;code&gt;contentPane&lt;/code&gt;, &lt;code&gt;glassPane&lt;/code&gt;,
                  and &lt;code&gt;layeredPane&lt;/code&gt; properties.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfo>
                    attribute: isContainer true
                      attribute: containerDelegate getContentPane
                      description: Swing's Applet subclass.                    
                </beaninfo>
                <author>
                    Arnaud Weber                    
                </author>
            </javadoc>
            <declaration name="rootPane" type="JRootPane" line="96"/>
            <javadoc line="96">
                @see #getRootPane                
                <see>
                    #setRootPane                    
                </see>
            </javadoc>
            <declaration name="rootPaneCheckingEnabled" type="boolean" line="102"/>
            <javadoc line="102">
                If true then calls to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt;
                  will be forwarded to the &lt;code&gt;contentPane&lt;/code&gt;. This is initially
                  false, but is set to true when the &lt;code&gt;JApplet&lt;/code&gt; is constructed.                
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <declaration name="transferHandler" type="TransferHandler" line="113"/>
            <javadoc line="113">
                The &lt;code&gt;TransferHandler&lt;/code&gt; for this applet.                
            </javadoc>
            <javadoc line="118">
                Creates a swing applet instance.
                  &lt;p&gt;
                  This constructor sets the component&apos;s locale property to the value
                  returned by &lt;code&gt;JComponent.getDefaultLocale&lt;/code&gt;.                
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    JComponent#getDefaultLocale                    
                </see>
            </javadoc>
            <method name="JApplet" type="constructor" line="129">
                <comment line="131">
                    Check the timerQ and restart if necessary.                    
                </comment>
                <comment line="137">
                    Workaround for bug 4155072.  The shared double buffer image
                     may hang on to a reference to this applet; unfortunately
                     Image.getGraphics() will continue to call JApplet.getForeground()
                     and getBackground() even after this applet has been destroyed.
                     So we ensure that these properties are non-null here.                    
                </comment>
                <declaration name="q" type="TimerQueue" line="132"/>
                <scope line="133"/>
            </method>
            <javadoc line="158">
                Called by the constructor methods to create the default rootPane.                
            </javadoc>
            <method name="createRootPane" type="JRootPane" line="159">
                <comment line="161">
                    NOTE: this uses setOpaque vs LookAndFeel.installProperty as there                    
                </comment>
                <comment line="162">
                    is NO reason for the RootPane not to be opaque. For painting to                    
                </comment>
                <comment line="163">
                    work the contentPane must be opaque, therefor the RootPane can                    
                </comment>
                <comment line="164">
                    also be opaque.                    
                </comment>
                <declaration name="rp" type="JRootPane" line="160"/>
            </method>
            <javadoc line="169">
                Sets the {@code transferHandler} property, which is a mechanism to
                  support transfer of data into this component. Use {@code null}if the component does not support data transfer operations.
                  &lt;p&gt;
                  If the system property {@code suppressSwingDropSupport} is {@code false}(the default) and the current drop target on this component is either{@code null} or not a user-set drop target, this method will change the
                  drop target as follows: If {@code newHandler} is {@code null} it will
                  clear the drop target. If not {@code null} it will install a new{@code DropTarget}.
                  &lt;p&gt;
                  Note: When used with {@code JApplet}, {@code TransferHandler} only
                  provides data import capability, as the data export related methods
                  are currently typed to {@code JComponent}.
                  &lt;p&gt;
                  Please see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/dnd.html&quot;&gt;
                  How to Use Drag and Drop and Data Transfer&lt;/a&gt;, a section in
                  &lt;em&gt;The Java Tutorial&lt;/em&gt;, for more information.                
                <param>
                    newHandler the new {@code TransferHandler}                    
                </param>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #getTransferHandler                    
                </see>
                <see>
                    java.awt.Component#setDropTarget                    
                </see>
                <since>
                    1.6                    
                </since>
                <beaninfo>
                    bound: true
                      hidden: true
                      description: Mechanism for transfer of data into the component                    
                </beaninfo>
            </javadoc>
            <method name="setTransferHandler" type="void" line="202">
                <params>
                    <param name="newHandler" type="TransferHandler"/>
                </params>
                <declaration name="oldHandler" type="TransferHandler" line="203"/>
            </method>
            <javadoc line="209">
                Gets the &lt;code&gt;transferHandler&lt;/code&gt; property.                
                <return>
                    the value of the <code>transferHandler</code> property                    
                </return>
                <see>
                    TransferHandler                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getTransferHandler" type="TransferHandler" line="218"/>
            <javadoc line="222">
                Just calls &lt;code&gt;paint(g)&lt;/code&gt;.  This method was overridden to
                  prevent an unnecessary call to clear the background.                
            </javadoc>
            <method name="update" type="void" line="226">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
            </method>
            <javadoc line="230">
                Sets the menubar for this applet.                
                <param>
                    menuBar the menubar being placed in the applet                    
                </param>
                <see>
                    #getJMenuBar                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The menubar for accessing pulldown menus from this applet.                    
                </beaninfo>
            </javadoc>
            <method name="setJMenuBar" type="void" line="240">
                <params>
                    <param name="menuBar" type="JMenuBar"/>
                </params>
            </method>
            <javadoc line="244">
                Returns the menubar set on this applet.                
                <see>
                    #setJMenuBar                    
                </see>
            </javadoc>
            <method name="getJMenuBar" type="JMenuBar" line="249"/>
            <javadoc line="254">
                Returns whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <return>
                    true if <code>add</code> and <code>setLayout</code>
                      are fowarded; false otherwise                    
                </return>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="isRootPaneCheckingEnabled" type="boolean" line="266"/>
            <javadoc line="271">
                Sets whether calls to &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; are forwarded to the &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    enabled  true if <code>add</code> and <code>setLayout</code>
                      are forwarded, false if they should operate directly on the
                      <code>JApplet</code>.                    
                </param>
                <see>
                    #addImpl                    
                </see>
                <see>
                    #setLayout                    
                </see>
                <see>
                    #isRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
                <beaninfo>
                    hidden: true
                      description: Whether the add and setLayout methods are forwarded                    
                </beaninfo>
            </javadoc>
            <method name="setRootPaneCheckingEnabled" type="void" line="287">
                <params>
                    <param name="enabled" type="boolean"/>
                </params>
            </method>
            <javadoc line="292">
                Adds the specified child &lt;code&gt;Component&lt;/code&gt;.
                  This method is overridden to conditionally forward calls to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  By default, children are added to the &lt;code&gt;contentPane&lt;/code&gt; instead
                  of the frame, refer to {@link javax.swing.RootPaneContainer} for
                  details.                
                <param>
                    comp the component to be enhanced                    
                </param>
                <param>
                    constraints the constraints to be respected                    
                </param>
                <param>
                    index the index                    
                </param>
                <exception>
                    IllegalArgumentException if <code>index</code> is invalid                    
                </exception>
                <exception>
                    IllegalArgumentException if adding the container's parent
                      to itself                    
                </exception>
                <exception>
                    IllegalArgumentException if adding a window to a container                    
                </exception>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="addImpl" type="void" line="312">
                <params>
                    <param name="comp" type="Component"/>
                    <param name="constraints" type="Object"/>
                    <param name="index" type="int"/>
                </params>
                <scope line="313"/>
                <scope line="316"/>
            </method>
            <javadoc line="321">
                Removes the specified component from the container. If
                  &lt;code&gt;comp&lt;/code&gt; is not the &lt;code&gt;rootPane&lt;/code&gt;, this will forward
                  the call to the &lt;code&gt;contentPane&lt;/code&gt;. This will do nothing if
                  &lt;code&gt;comp&lt;/code&gt; is not a child of the &lt;code&gt;JFrame&lt;/code&gt; or
                  &lt;code&gt;contentPane&lt;/code&gt;.                
                <param>
                    comp the component to be removed                    
                </param>
                <throws>
                    NullPointerException if <code>comp</code> is null                    
                </throws>
                <see>
                    #add                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="333">
                <params>
                    <param name="comp" type="Component"/>
                </params>
                <scope line="334"/>
                <scope line="336"/>
            </method>
            <javadoc line="342">
                Sets the &lt;code&gt;LayoutManager&lt;/code&gt;.
                  Overridden to conditionally forward the call to the
                  &lt;code&gt;contentPane&lt;/code&gt;.
                  Refer to {@link javax.swing.RootPaneContainer} for
                  more information.                
                <param>
                    manager the <code>LayoutManager</code>                    
                </param>
                <see>
                    #setRootPaneCheckingEnabled                    
                </see>
                <see>
                    javax.swing.RootPaneContainer                    
                </see>
            </javadoc>
            <method name="setLayout" type="void" line="353">
                <params>
                    <param name="manager" type="LayoutManager"/>
                </params>
                <scope line="354"/>
                <scope line="357"/>
            </method>
            <javadoc line="363">
                Returns the rootPane object for this applet.                
                <see>
                    #setRootPane                    
                </see>
                <see>
                    RootPaneContainer#getRootPane                    
                </see>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="369"/>
            <javadoc line="374">
                Sets the rootPane property.  This method is called by the constructor.                
                <param>
                    root the rootPane object for this applet                    
                </param>
                <see>
                    #getRootPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: the RootPane object for this applet.                    
                </beaninfo>
            </javadoc>
            <method name="setRootPane" type="void" line="384">
                <params>
                    <param name="root" type="JRootPane"/>
                </params>
                <scope line="385"/>
                <scope line="389">
                    <declaration name="checkingEnabled" type="boolean" line="390"/>
                    <scope line="391"/>
                    <scope line="395"/>
                </scope>
            </method>
            <javadoc line="402">
                Returns the contentPane object for this applet.                
                <see>
                    #setContentPane                    
                </see>
                <see>
                    RootPaneContainer#getContentPane                    
                </see>
            </javadoc>
            <method name="getContentPane" type="Container" line="408"/>
            <javadoc line="412">
                Sets the contentPane property.  This method is called by the constructor.                
                <param>
                    contentPane the contentPane object for this applet                    
                </param>
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is null                    
                </exception>
                <see>
                    #getContentPane                    
                </see>
                <see>
                    RootPaneContainer#setContentPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The client area of the applet where child
                      components are normally inserted.                    
                </beaninfo>
            </javadoc>
            <method name="setContentPane" type="void" line="426">
                <params>
                    <param name="contentPane" type="Container"/>
                </params>
            </method>
            <javadoc line="430">
                Returns the layeredPane object for this applet.                
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the layered pane parameter is null                    
                </exception>
                <see>
                    #setLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#getLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="438"/>
            <javadoc line="442">
                Sets the layeredPane property.  This method is called by the constructor.                
                <param>
                    layeredPane the layeredPane object for this applet                    
                </param>
                <see>
                    #getLayeredPane                    
                </see>
                <see>
                    RootPaneContainer#setLayeredPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: The pane which holds the various applet layers.                    
                </beaninfo>
            </javadoc>
            <method name="setLayeredPane" type="void" line="453">
                <params>
                    <param name="layeredPane" type="JLayeredPane"/>
                </params>
            </method>
            <javadoc line="457">
                Returns the glassPane object for this applet.                
                <see>
                    #setGlassPane                    
                </see>
                <see>
                    RootPaneContainer#getGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="463"/>
            <javadoc line="467">
                Sets the glassPane property.
                  This method is called by the constructor.                
                <param>
                    glassPane the glassPane object for this applet                    
                </param>
                <see>
                    #getGlassPane                    
                </see>
                <see>
                    RootPaneContainer#setGlassPane                    
                </see>
                <beaninfo>
                    hidden: true
                      description: A transparent pane used for menu rendering.                    
                </beaninfo>
            </javadoc>
            <method name="setGlassPane" type="void" line="479">
                <params>
                    <param name="glassPane" type="Component"/>
                </params>
            </method>
            <javadoc line="483">
                {@inheritDoc}                
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="488"/>
            <javadoc line="493">
                Repaints the specified rectangle of this component within
                  &lt;code&gt;time&lt;/code&gt; milliseconds.  Refer to &lt;code&gt;RepaintManager&lt;/code&gt;
                  for details on how the repaint is handled.                
                <param>
                    time   maximum time in milliseconds before update                    
                </param>
                <param>
                    x    the <i>x</i> coordinate                    
                </param>
                <param>
                    y    the <i>y</i> coordinate                    
                </param>
                <param>
                    width    the width                    
                </param>
                <param>
                    height   the height                    
                </param>
                <see>
                    RepaintManager                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="repaint" type="void" line="506">
                <params>
                    <param name="time" type="long"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="width" type="int"/>
                    <param name="height" type="int"/>
                </params>
                <scope line="507"/>
                <scope line="511"/>
            </method>
            <javadoc line="516">
                Returns a string representation of this JApplet. This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this JApplet.                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="525">
                <declaration name="rootPaneString" type="String" line="526"/>
                <declaration name="rootPaneCheckingEnabledString" type="String" line="528"/>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="542"/>
            <javadoc line="544">
                Gets the AccessibleContext associated with this JApplet.
                  For JApplets, the AccessibleContext takes the form of an
                  AccessibleJApplet.
                  A new AccessibleJApplet instance is created if necessary.                
                <return>
                    an AccessibleJApplet that serves as the
                      AccessibleContext of this JApplet                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="553">
                <scope line="554"/>
            </method>
            <class name="AccessibleJApplet" line="560">
                <extends class="AccessibleApplet"/>
                <comment line="566">
                    everything moved to new parent, AccessibleApplet                    
                </comment>
                <javadoc line="560">
                    This class implements accessibility support for the
                      &lt;code&gt;JApplet&lt;/code&gt; class.                    
                </javadoc>
            </class>
        </class>
    </source>