<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.util"/>
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.applet"/>
        <import package="java.beans"/>
        <import package="javax.swing.event"/>
        <import package="sun.awt.EmbeddedFrame"/>
        <class name="KeyboardManager" line="36">
            <javadoc line="36">
                The KeyboardManager class is used to help dispatch keyboard actions for the
                  WHEN_IN_FOCUSED_WINDOW style actions.  Actions with other conditions are handled
                  directly in JComponent.
                  Here&apos;s a description of the symantics of how keyboard dispatching should work
                  atleast as I understand it.
                  KeyEvents are dispatched to the focused component.  The focus manager gets first
                  crack at processing this event.  If the focus manager doesn&apos;t want it, then
                  the JComponent calls super.processKeyEvent() this allows listeners a chance
                  to process the event.
                  If none of the listeners &quot;consumes&quot; the event then the keybindings get a shot.
                  This is where things start to get interesting.  First, KeyStokes defined with the
                  WHEN_FOCUSED condition get a chance.  If none of these want the event, then the component
                  walks though it&apos;s parents looked for actions of type WHEN_ANCESTOR_OF_FOCUSED_COMPONENT.
                  If no one has taken it yet, then it winds up here.  We then look for components registered
                  for WHEN_IN_FOCUSED_WINDOW events and fire to them.  Note that if none of those are found
                  then we pass the event to the menubars and let them have a crack at it.  They&apos;re handled differently.
                  Lastly, we check if we&apos;re looking at an internal frame.  If we are and no one wanted the event
                  then we move up to the InternalFrame&apos;s creator and see if anyone wants the event (and so on and so on).                
                <see>
                    InputMap                    
                </see>
            </javadoc>
            <declaration name="currentManager" type="KeyboardManager" line="66"/>
            <declaration name="containerMap" type="Hashtable&lt;Container,Hashtable&gt;" line="68"/>
            <javadoc line="68">
                maps top-level containers to a sub-hashtable full of keystrokes                
            </javadoc>
            <declaration name="componentKeyStrokeMap" type="Hashtable&lt;ComponentKeyStrokePair,Container&gt;" line="73"/>
            <javadoc line="73">
                Maps component/keystroke pairs to a topLevel container
                  This is mainly used for fast unregister operations                
            </javadoc>
            <method name="getCurrentManager" type="KeyboardManager" line="79"/>
            <method name="setCurrentManager" type="void" line="83">
                <params>
                    <param name="km" type="KeyboardManager"/>
                </params>
            </method>
            <javadoc line="87">
                register keystrokes here which are for the WHEN_IN_FOCUSED_WINDOW
                  case.
                  Other types of keystrokes will be handled by walking the hierarchy
                  That simplifies some potentially hairy stuff.                
            </javadoc>
            <method name="registerKeyStroke" type="void" line="93">
                <params>
                    <param name="k" type="KeyStroke"/>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="100">
                    lazy evaluate one                    
                </comment>
                <comment line="107">
                    if there&apos;s a Vector there then add to it.                    
                </comment>
                <comment line="109">
                    only add if this keystroke isn&apos;t registered for this component                    
                </comment>
                <comment line="113">
                    if a JComponent is there then remove it and replace it with a vector                    
                </comment>
                <comment line="114">
                    Then add the old compoennt and the new compoent to the vector                    
                </comment>
                <comment line="115">
                    then insert the vector in the table                    
                </comment>
                <comment line="116">
                    this means this is already registered for this component, no need to dup                    
                </comment>
                <comment line="129">
                    Check for EmbeddedFrame case, they know how to process accelerators even                    
                </comment>
                <comment line="130">
                    when focus is not in Java                    
                </comment>
                <declaration name="topContainer" type="Container" line="94"/>
                <scope line="95"/>
                <declaration name="keyMap" type="Hashtable" line="98"/>
                <scope line="100"/>
                <declaration name="tmp" type="Object" line="104"/>
                <scope line="105"/>
                <scope line="107">
                    <declaration name="v" type="Vector" line="108"/>
                    <scope line="109"/>
                </scope>
                <scope line="112">
                    <scope line="116">
                        <declaration name="v" type="Vector&lt;JComponent&gt;" line="117"/>
                    </scope>
                </scope>
                <scope line="122"/>
                <scope line="131"/>
            </method>
            <javadoc line="136">
                Find the top focusable Window, Applet, or InternalFrame                
            </javadoc>
            <method name="getTopAncestor" type="Container" line="139">
                <params>
                    <param name="c" type="JComponent"/>
                </params>
                <scope line="140">
                    <scope line="142"/>
                </scope>
            </method>
            <method name="unregisterKeyStroke" type="void" line="150">
                <params>
                    <param name="ks" type="KeyStroke"/>
                    <param name="c" type="JComponent"/>
                </params>
                <comment line="152">
                    component may have already been removed from the hierarchy, we                    
                </comment>
                <comment line="153">
                    need to look up the container using the componentKeyStrokeMap.                    
                </comment>
                <comment line="159">
                    never heard of this pairing, so bail                    
                </comment>
                <comment line="164">
                    this should never happen, but I&apos;m being safe                    
                </comment>
                <comment line="170">
                    this should never happen, but I&apos;m being safe                    
                </comment>
                <comment line="176">
                    remove the KeyStroke from the Map                    
                </comment>
                <comment line="177">
                    System.out.println(&quot;removed a stroke&quot; + ks);                    
                </comment>
                <comment line="178">
                    this means there is more than one component reg for this key                    
                </comment>
                <comment line="182">
                    remove the KeyStroke from the Map                    
                </comment>
                <comment line="183">
                    System.out.println(&quot;removed a ks vector&quot;);                    
                </comment>
                <comment line="187">
                    if no more bindings in this table                    
                </comment>
                <comment line="188">
                    remove table to enable GC                    
                </comment>
                <comment line="189">
                    System.out.println(&quot;removed a container&quot;);                    
                </comment>
                <comment line="194">
                    Check for EmbeddedFrame case, they know how to process accelerators even                    
                </comment>
                <comment line="195">
                    when focus is not in Java                    
                </comment>
                <declaration name="ckp" type="ComponentKeyStrokePair" line="155"/>
                <declaration name="topContainer" type="Container" line="157"/>
                <scope line="159"/>
                <declaration name="keyMap" type="Hashtable" line="163"/>
                <scope line="164"/>
                <declaration name="tmp" type="Object" line="169"/>
                <scope line="170"/>
                <scope line="175"/>
                <scope line="178">
                    <declaration name="v" type="Vector" line="179"/>
                    <scope line="181"/>
                </scope>
                <scope line="187"/>
                <scope line="196"/>
            </method>
            <javadoc line="201">
                This method is called when the focused component (and none of
                  its ancestors) want the key event.  This will look up the keystroke
                  to see if any chidren (or subchildren) of the specified container
                  want a crack at the event.
                  If one of them wants it, then it will &quot;DO-THE-RIGHT-THING&quot;                
            </javadoc>
            <method name="fireKeyboardAction" type="boolean" line="208">
                <params>
                    <param name="e" type="KeyEvent"/>
                    <param name="pressed" type="boolean"/>
                    <param name="topAncestor" type="Container"/>
                </params>
                <comment line="215">
                    There may be two keystrokes associated with a low-level key event;                    
                </comment>
                <comment line="216">
                    in this case a keystroke made of an extended key code has a priority.                    
                </comment>
                <comment line="231">
                    this container isn&apos;t registered, so bail                    
                </comment>
                <comment line="234">
                    extended code has priority                    
                </comment>
                <comment line="246">
                    don&apos;t do anything                    
                </comment>
                <comment line="249">
                    only give it out if enabled and visible                    
                </comment>
                <comment line="252">
                    more than one comp registered for this                    
                </comment>
                <comment line="254">
                    There is no well defined order for WHEN_IN_FOCUSED_WINDOW                    
                </comment>
                <comment line="255">
                    bindings, but we give precedence to those bindings just                    
                </comment>
                <comment line="256">
                    added. This is done so that JMenus WHEN_IN_FOCUSED_WINDOW                    
                </comment>
                <comment line="257">
                    bindings are accessed before those of the JRootPane (they                    
                </comment>
                <comment line="258">
                    both have a WHEN_IN_FOCUSED_WINDOW binding for enter).                    
                </comment>
                <comment line="261">
                    System.out.println(&quot;Trying collision: &quot; + c + &quot; vector = &quot;+ v.size());                    
                </comment>
                <comment line="262">
                    don&apos;t want to give these out                    
                </comment>
                <comment line="270">
                    This means that tmp wasn&apos;t null, a JComponent, or a Vector.  What is it?                    
                </comment>
                <comment line="278">
                    if no one else handled it, then give the menus a crack                    
                </comment>
                <comment line="279">
                    The&apos;re handled differently.  The key is to let any JMenuBars                    
                </comment>
                <comment line="280">
                    process the event                    
                </comment>
                <comment line="287">
                    don&apos;t want to give these out                    
                </comment>
                <scope line="210"/>
                <declaration name="ks" type="KeyStroke" line="217"/>
                <declaration name="ksE" type="KeyStroke" line="218"/>
                <scope line="221"/>
                <scope line="223">
                    <scope line="224"/>
                </scope>
                <declaration name="keyMap" type="Hashtable" line="230"/>
                <scope line="231">
                    <declaration name="tmp" type="Object" line="233"/>
                    <scope line="235">
                        <scope line="237"/>
                    </scope>
                    <scope line="241"/>
                    <scope line="245"/>
                    <scope line="247">
                        <declaration name="c" type="JComponent" line="248"/>
                        <scope line="249"/>
                    </scope>
                    <scope line="252">
                        <declaration name="v" type="Vector" line="253"/>
                        <scope line="259">
                            <declaration name="c" type="JComponent" line="260"/>
                            <scope line="262"/>
                        </scope>
                    </scope>
                    <scope line="268"/>
                </scope>
                <scope line="275"/>
                <scope line="281">
                    <declaration name="v" type="Vector" line="282"/>
                    <scope line="283">
                        <declaration name="iter" type="Enumeration" line="284"/>
                        <scope line="285">
                            <declaration name="mb" type="JMenuBar" line="286"/>
                            <scope line="287">
                                <scope line="288"/>
                                <scope line="291"/>
                                <scope line="294"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="fireBinding" type="void" line="305">
                <params>
                    <param name="c" type="JComponent"/>
                    <param name="ks" type="KeyStroke"/>
                    <param name="e" type="KeyEvent"/>
                    <param name="pressed" type="boolean"/>
                </params>
                <scope line="307"/>
            </method>
            <method name="registerMenuBar" type="void" line="312">
                <params>
                    <param name="mb" type="JMenuBar"/>
                </params>
                <comment line="319">
                    lazy evaluate one                    
                </comment>
                <comment line="322">
                    use the menubar class as the key                    
                </comment>
                <comment line="325">
                    if we don&apos;t have a list of menubars,                    
                </comment>
                <comment line="326">
                    then make one.                    
                </comment>
                <declaration name="top" type="Container" line="313"/>
                <scope line="314"/>
                <declaration name="keyMap" type="Hashtable" line="317"/>
                <scope line="319"/>
                <declaration name="menuBars" type="Vector" line="323"/>
                <scope line="325"/>
                <scope line="331"/>
            </method>
            <method name="unregisterMenuBar" type="void" line="337">
                <params>
                    <param name="mb" type="JMenuBar"/>
                </params>
                <comment line="350">
                    remove table to enable GC                    
                </comment>
                <declaration name="topContainer" type="Container" line="338"/>
                <scope line="339"/>
                <declaration name="keyMap" type="Hashtable" line="342"/>
                <scope line="343">
                    <declaration name="v" type="Vector" line="344"/>
                    <scope line="345">
                        <scope line="347">
                            <scope line="349"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="registerNewTopContainer" type="Hashtable" line="357">
                <params>
                    <param name="topContainer" type="Container"/>
                </params>
                <declaration name="keyMap" type="Hashtable" line="358"/>
            </method>
            <class name="ComponentKeyStrokePair" line="363">
                <javadoc line="363">
                    This class is used to create keys for a hashtable
                      which looks up topContainers based on component, keystroke pairs
                      This is used to make unregistering KeyStrokes fast                    
                </javadoc>
                <declaration name="component" type="Object" line="369"/>
                <declaration name="keyStroke" type="Object" line="370"/>
                <method name="ComponentKeyStrokePair" type="constructor" line="372">
                    <params>
                        <param name="comp" type="Object"/>
                        <param name="key" type="Object"/>
                    </params>
                </method>
                <method name="equals" type="boolean" line="377">
                    <params>
                        <param name="o" type="Object"/>
                    </params>
                    <scope line="378"/>
                    <declaration name="ckp" type="ComponentKeyStrokePair" line="381"/>
                </method>
                <method name="hashCode" type="int" line="385"/>
            </class>
        </class>
    </source>