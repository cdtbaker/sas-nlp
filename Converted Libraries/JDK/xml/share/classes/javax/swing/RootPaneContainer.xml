<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <interface name="RootPaneContainer">
            <javadoc line="4">
                This interface is implemented by components that have a single
                  JRootPane child: JDialog, JFrame, JWindow, JApplet, JInternalFrame.
                  The methods in  this interface are just &lt;i&gt;covers&lt;/i&gt; for the JRootPane
                  properties, e.g. &lt;code&gt;getContentPane()&lt;/code&gt; is generally implemented
                  like this:&lt;pre&gt;
                  public Container getContentPane() {
                  return getRootPane().getContentPane();
                  }
                  &lt;/pre&gt;
                  This interface serves as a &lt;i&gt;marker&lt;/i&gt; for Swing GUI builders
                  that need to treat components like JFrame, that contain a
                  single JRootPane, specially.  For example in a GUI builder,
                  dropping a component on a RootPaneContainer would be interpreted
                  as &lt;code&gt;frame.getContentPane().add(child)&lt;/code&gt;.
                  &lt;p&gt;
                  For conveniance
                  &lt;code&gt;JFrame&lt;/code&gt;, &lt;code&gt;JDialog&lt;/code&gt;, &lt;code&gt;JWindow&lt;/code&gt;,
                  &lt;code&gt;JApplet&lt;/code&gt; and &lt;code&gt;JInternalFrame&lt;/code&gt;, by default,
                  forward, by default, all calls to the &lt;code&gt;add&lt;/code&gt;,
                  &lt;code&gt;remove&lt;/code&gt; and &lt;code&gt;setLayout&lt;/code&gt; methods, to the
                  &lt;code&gt;contentPane&lt;/code&gt;. This means you can call:
                  &lt;pre&gt;
                  rootPaneContainer.add(component);
                  &lt;/pre&gt;
                  instead of:
                  &lt;pre&gt;
                  rootPaneContainer.getContentPane().add(component);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  The behavior of the &lt;code&gt;add&lt;/code&gt; and
                  &lt;code&gt;setLayout&lt;/code&gt; methods for
                  &lt;code&gt;JFrame&lt;/code&gt;, &lt;code&gt;JDialog&lt;/code&gt;, &lt;code&gt;JWindow&lt;/code&gt;,
                  &lt;code&gt;JApplet&lt;/code&gt; and &lt;code&gt;JInternalFrame&lt;/code&gt; is controlled by
                  the &lt;code&gt;rootPaneCheckingEnabled&lt;/code&gt; property. If this property is
                  true (the default), then calls to these methods are
                  forwarded to the &lt;code&gt;contentPane&lt;/code&gt;; if false, these
                  methods operate directly on the &lt;code&gt;RootPaneContainer&lt;/code&gt;. This
                  property is only intended for subclasses, and is therefore protected.                
                <see>
                    JRootPane                    
                </see>
                <see>
                    JFrame                    
                </see>
                <see>
                    JDialog                    
                </see>
                <see>
                    JWindow                    
                </see>
                <see>
                    JApplet                    
                </see>
                <see>
                    JInternalFrame                    
                </see>
                <author>
                    Hans Muller                    
                </author>
            </javadoc>
            <method name="getRootPane" type="JRootPane" line="52"/>
            <javadoc line="52">
                Return this component&apos;s single JRootPane child.  A conventional
                  implementation of this interface will have all of the other
                  methods indirect through this one.  The rootPane has two
                  children: the glassPane and the layeredPane.                
                <return>
                    this components single JRootPane child.                    
                </return>
                <see>
                    JRootPane                    
                </see>
            </javadoc>
            <method name="setContentPane" type="void" line="61"/>
            <javadoc line="61">
                The &quot;contentPane&quot; is the primary container for application
                  specific components.  Applications should add children to
                  the contentPane, set its layout manager, and so on.
                  &lt;p&gt;
                  The contentPane may not be null.
                  &lt;p&gt;
                  Generally implemented with
                  &lt;code&gt;getRootPane().setContentPane(contentPane);&lt;/code&gt;                
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the content pane parameter is null                    
                </exception>
                <param>
                    contentPane the Container to use for the contents of this
                      JRootPane                    
                </param>
                <see>
                    JRootPane#getContentPane                    
                </see>
                <see>
                    #getContentPane                    
                </see>
            </javadoc>
            <method name="getContentPane" type="Container" line="78"/>
            <javadoc line="78">
                Returns the contentPane.                
                <return>
                    the value of the contentPane property.                    
                </return>
                <see>
                    #setContentPane                    
                </see>
            </javadoc>
            <method name="setLayeredPane" type="void" line="84"/>
            <javadoc line="84">
                A Container that manages the contentPane and in some cases a menu bar.
                  The layeredPane can be used by descendants that want to add a child
                  to the RootPaneContainer that isn&apos;t layout managed.  For example
                  an internal dialog or a drag and drop effect component.
                  &lt;p&gt;
                  The layeredPane may not be null.
                  &lt;p&gt;
                  Generally implemented with&lt;pre&gt;
                  getRootPane().setLayeredPane(layeredPane);&lt;/pre&gt;                
                <exception>
                    java.awt.IllegalComponentStateException (a runtime
                      exception) if the layered pane parameter is null                    
                </exception>
                <see>
                    #getLayeredPane                    
                </see>
                <see>
                    JRootPane#getLayeredPane                    
                </see>
            </javadoc>
            <method name="getLayeredPane" type="JLayeredPane" line="100"/>
            <javadoc line="100">
                Returns the layeredPane.                
                <return>
                    the value of the layeredPane property.                    
                </return>
                <see>
                    #setLayeredPane                    
                </see>
            </javadoc>
            <method name="setGlassPane" type="void" line="106"/>
            <javadoc line="106">
                The glassPane is always the first child of the rootPane
                  and the rootPanes layout manager ensures that it&apos;s always
                  as big as the rootPane.  By default it&apos;s transparent and
                  not visible.  It can be used to temporarily grab all keyboard
                  and mouse input by adding listeners and then making it visible.
                  by default it&apos;s not visible.
                  &lt;p&gt;
                  The glassPane may not be null.
                  &lt;p&gt;
                  Generally implemented with
                  &lt;code&gt;getRootPane().setGlassPane(glassPane);&lt;/code&gt;                
                <see>
                    #getGlassPane                    
                </see>
                <see>
                    JRootPane#setGlassPane                    
                </see>
            </javadoc>
            <method name="getGlassPane" type="Component" line="122"/>
            <javadoc line="122">
                Returns the glassPane.                
                <return>
                    the value of the glassPane property.                    
                </return>
                <see>
                    #setGlassPane                    
                </see>
            </javadoc>
        </interface>
    </source>