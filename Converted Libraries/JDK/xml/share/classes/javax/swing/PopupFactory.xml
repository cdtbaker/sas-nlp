<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.applet.Applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.swing.ClientPropertyKey.PopupFactory_FORCE_HEAVYWEIGHT_POPUP"/>
        <class name="PopupFactory" line="11">
            <javadoc line="11">
                &lt;code&gt;PopupFactory&lt;/code&gt;, as the name implies, is used to obtain
                  instances of &lt;code&gt;Popup&lt;/code&gt;s. &lt;code&gt;Popup&lt;/code&gt;s are used to
                  display a &lt;code&gt;Component&lt;/code&gt; above all other &lt;code&gt;Component&lt;/code&gt;s
                  in a particular containment hierarchy. The general contract is that
                  once you have obtained a &lt;code&gt;Popup&lt;/code&gt; from a
                  &lt;code&gt;PopupFactory&lt;/code&gt;, you must invoke &lt;code&gt;hide&lt;/code&gt; on the
                  &lt;code&gt;Popup&lt;/code&gt;. The typical usage is:
                  &lt;pre&gt;
                  PopupFactory factory = PopupFactory.getSharedInstance();
                  Popup popup = factory.getPopup(owner, contents, x, y);
                  popup.show();
                  ...
                  popup.hide();
                  &lt;/pre&gt;                
                <see>
                    Popup                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="SharedInstanceKey" type="Object" line="30"/>
            <javadoc line="30">
                The shared instanceof &lt;code&gt;PopupFactory&lt;/code&gt; is per
                  &lt;code&gt;AppContext&lt;/code&gt;. This is the key used in the
                  &lt;code&gt;AppContext&lt;/code&gt; to locate the &lt;code&gt;PopupFactory&lt;/code&gt;.                
            </javadoc>
            <declaration name="MAX_CACHE_SIZE" type="int" line="36"/>
            <javadoc line="36">
                Max number of items to store in any one particular cache.                
            </javadoc>
            <declaration name="LIGHT_WEIGHT_POPUP" type="int" line="40"/>
            <javadoc line="40">
                Key used to indicate a light weight popup should be used.                
            </javadoc>
            <declaration name="MEDIUM_WEIGHT_POPUP" type="int" line="44"/>
            <javadoc line="44">
                Key used to indicate a medium weight Popup should be used.                
            </javadoc>
            <declaration name="HEAVY_WEIGHT_POPUP" type="int" line="48"/>
            <declaration name="popupType" type="int" line="49"/>
            <javadoc line="49">
                Default type of Popup to create.                
            </javadoc>
            <javadoc line="53">
                Sets the &lt;code&gt;PopupFactory&lt;/code&gt; that will be used to obtain
                  &lt;code&gt;Popup&lt;/code&gt;s.
                  This will throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if
                  &lt;code&gt;factory&lt;/code&gt; is null.                
                <param>
                    factory Shared PopupFactory                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;factory&lt;/code&gt; is null                    
                </exception>
                <see>
                    #getPopup                    
                </see>
            </javadoc>
            <method name="setSharedInstance" type="void" line="62">
                <params>
                    <param name="factory" type="PopupFactory"/>
                </params>
                <scope line="63"/>
            </method>
            <javadoc line="68">
                Returns the shared &lt;code&gt;PopupFactory&lt;/code&gt; which can be used
                  to obtain &lt;code&gt;Popup&lt;/code&gt;s.                
                <return>
                    Shared PopupFactory                    
                </return>
            </javadoc>
            <method name="getSharedInstance" type="PopupFactory" line="73">
                <declaration name="factory" type="PopupFactory" line="74"/>
                <scope line="75"/>
            </method>
            <javadoc line="81">
                Provides a hint as to the type of &lt;code&gt;Popup&lt;/code&gt; that should
                  be created.                
            </javadoc>
            <method name="setPopupType" type="void" line="85">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="88">
                Returns the preferred type of Popup to create.                
            </javadoc>
            <method name="getPopupType" type="int" line="91"/>
            <javadoc line="94">
                Creates a &lt;code&gt;Popup&lt;/code&gt; for the Component &lt;code&gt;owner&lt;/code&gt;
                  containing the Component &lt;code&gt;contents&lt;/code&gt;. &lt;code&gt;owner&lt;/code&gt;
                  is used to determine which &lt;code&gt;Window&lt;/code&gt; the new
                  &lt;code&gt;Popup&lt;/code&gt; will parent the &lt;code&gt;Component&lt;/code&gt; the
                  &lt;code&gt;Popup&lt;/code&gt; creates to. A null &lt;code&gt;owner&lt;/code&gt; implies there
                  is no valid parent. &lt;code&gt;x&lt;/code&gt; and
                  &lt;code&gt;y&lt;/code&gt; specify the preferred initial location to place
                  the &lt;code&gt;Popup&lt;/code&gt; at. Based on screen size, or other paramaters,
                  the &lt;code&gt;Popup&lt;/code&gt; may not display at &lt;code&gt;x&lt;/code&gt; and
                  &lt;code&gt;y&lt;/code&gt;.                
                <param>
                    owner    Component mouse coordinates are relative to, may be null                    
                </param>
                <param>
                    contents Contents of the Popup                    
                </param>
                <param>
                    x        Initial x screen coordinate                    
                </param>
                <param>
                    y        Initial y screen coordinate                    
                </param>
                <exception>
                    IllegalArgumentException if contents is null                    
                </exception>
                <return>
                    Popup containing Contents                    
                </return>
            </javadoc>
            <method name="getPopup" type="Popup" line="112">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <scope line="113"/>
                <declaration name="popupType" type="int" line="116"/>
                <declaration name="popup" type="Popup" line="117"/>
                <scope line="118"/>
            </method>
            <javadoc line="123">
                Returns the popup type to use for the specified parameters.                
            </javadoc>
            <method name="getPopupType" type="int" line="126">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
                <declaration name="popupType" type="int" line="127"/>
                <scope line="128"/>
                <scope line="131"/>
                <declaration name="c" type="Component" line="134"/>
                <scope line="135">
                    <scope line="136">
                        <scope line="137"/>
                    </scope>
                    <scope line="142">
                        <declaration name="w" type="Window" line="143"/>
                        <scope line="144"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="153">
                Obtains the appropriate &lt;code&gt;Popup&lt;/code&gt; based on
                  &lt;code&gt;popupType&lt;/code&gt;.                
            </javadoc>
            <method name="getPopup" type="Popup" line="157">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                    <param name="popupType" type="int"/>
                </params>
                <scope line="158"/>
            </method>
            <javadoc line="171">
                Creates a headless popup                
            </javadoc>
            <method name="getHeadlessPopup" type="Popup" line="174">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
            </method>
            <javadoc line="177">
                Creates a light weight popup.                
            </javadoc>
            <method name="getLightWeightPopup" type="Popup" line="180">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
            </method>
            <javadoc line="183">
                Creates a medium weight popup.                
            </javadoc>
            <method name="getMediumWeightPopup" type="Popup" line="186">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
            </method>
            <javadoc line="189">
                Creates a heavy weight popup.                
            </javadoc>
            <method name="getHeavyWeightPopup" type="Popup" line="192">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
                <scope line="193"/>
            </method>
            <javadoc line="198">
                Returns true if the Component &lt;code&gt;i&lt;/code&gt; inside a heavy weight
                  &lt;code&gt;Popup&lt;/code&gt;.                
            </javadoc>
            <method name="invokerInHeavyWeightPopup" type="boolean" line="202">
                <params>
                    <param name="i" type="Component"/>
                </params>
                <scope line="203">
                    <declaration name="parent" type="Container" line="204"/>
                    <scope line="205">
                        <scope line="206"/>
                    </scope>
                </scope>
            </method>
            <class name="HeavyWeightPopup" line="213">
                <extends class="Popup"/>
                <javadoc line="213">
                    Popup implementation that uses a Window as the popup.                    
                </javadoc>
                <declaration name="heavyWeightPopupCacheKey" type="Object" line="217"/>
                <javadoc line="218">
                    Returns either a new or recycled &lt;code&gt;Popup&lt;/code&gt; containing
                      the specified children.                    
                </javadoc>
                <method name="getHeavyWeightPopup" type="Popup" line="222">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="window" type="Window" line="223"/>
                    <declaration name="popup" type="HeavyWeightPopup" line="224"/>
                    <scope line="225"/>
                    <declaration name="focusPopup" type="boolean" line="228"/>
                    <scope line="229">
                        <scope line="230">
                            <declaration name="jpm" type="JPopupMenu" line="231"/>
                            <declaration name="popComps" type="Component" line="232"/>
                            <scope line="233">
                                <scope line="234"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="241">
                        <scope line="242"/>
                    </scope>
                    <scope line="248">
                        <declaration name="wnd" type="JWindow" line="249"/>
                    </scope>
                </method>
                <javadoc line="255">
                    Returns a previously disposed heavy weight &lt;code&gt;Popup&lt;/code&gt;
                      associated with &lt;code&gt;window&lt;/code&gt;. This will return null if
                      there is no &lt;code&gt;HeavyWeightPopup&lt;/code&gt; associated with
                      &lt;code&gt;window&lt;/code&gt;.                    
                </javadoc>
                <method name="getRecycledHeavyWeightPopup" type="HeavyWeightPopup" line="261">
                    <params>
                        <param name="w" type="Window"/>
                    </params>
                    <scope line="262">
                        <declaration name="cache" type="List&amp;lt;HeavyWeightPopup&amp;gt;" line="263"/>
                        <declaration name="heavyPopupCache" type="Map&amp;lt;Window,List&amp;lt;HeavyWeightPopup&amp;gt;&amp;gt;" line="264"/>
                        <scope line="265"/>
                        <scope line="268"/>
                        <scope line="271">
                            <declaration name="r" type="HeavyWeightPopup" line="272"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="279">
                    Returns the cache to use for heavy weight popups. Maps from
                      &lt;code&gt;Window&lt;/code&gt; to a &lt;code&gt;List&lt;/code&gt; of
                      &lt;code&gt;HeavyWeightPopup&lt;/code&gt;s.                    
                </javadoc>
                <method name="getHeavyWeightPopupCache" type="Map&lt;Window,List&lt;HeavyWeightPopup&gt;&gt;" line="284">
                    <scope line="285">
                        <declaration name="cache" type="Map&amp;lt;Window,List&amp;lt;HeavyWeightPopup&amp;gt;&amp;gt;" line="286"/>
                        <scope line="287"/>
                    </scope>
                </method>
                <javadoc line="294">
                    Recycles the passed in &lt;code&gt;HeavyWeightPopup&lt;/code&gt;.                    
                </javadoc>
                <method name="recycleHeavyWeightPopup" type="void" line="297">
                    <params>
                        <param name="popup" type="HeavyWeightPopup"/>
                    </params>
                    <scope line="298">
                        <declaration name="cache" type="List&amp;lt;HeavyWeightPopup&amp;gt;" line="299"/>
                        <declaration name="window" type="Window" line="300"/>
                        <declaration name="heavyPopupCache" type="Map&amp;lt;Window,List&amp;lt;HeavyWeightPopup&amp;gt;&amp;gt;" line="301"/>
                        <scope line="302"/>
                        <scope line="306"/>
                        <scope line="309">
                            <declaration name="w" type="Window" line="312"/>
                            <anonymous_class line="313">
                                <method name="windowClosed" type="void" line="314">
                                    <params>
                                        <param name="e" type="WindowEvent"/>
                                    </params>
                                    <declaration name="popups" type="List&amp;lt;HeavyWeightPopup&amp;gt;" line="315"/>
                                    <scope line="316">
                                        <declaration name="heavyPopupCache2" type="Map&amp;lt;Window,List&amp;lt;HeavyWeightPopup&amp;gt;&amp;gt;" line="317"/>
                                    </scope>
                                    <scope line="320">
                                        <scope line="321"/>
                                    </scope>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="329"/>
                        <scope line="332"/>
                    </scope>
                </method>
                <method name="hide" type="void" line="337"/>
                <javadoc line="341">
                    As we recycle the &lt;code&gt;Window&lt;/code&gt;, we don&apos;t want to dispose it,
                      thus this method does nothing, instead use &lt;code&gt;_dipose&lt;/code&gt;
                      which will handle the disposing.                    
                </javadoc>
                <method name="dispose" type="void" line="346"/>
                <method name="_dispose" type="void" line="348"/>
            </class>
            <class name="ContainerPopup" line="352">
                <extends class="Popup"/>
                <javadoc line="352">
                    ContainerPopup consolidates the common code used in the light/medium
                      weight implementations of &lt;code&gt;Popup&lt;/code&gt;.                    
                </javadoc>
                <declaration name="owner" type="Component" line="357"/>
                <javadoc line="357">
                    Component we are to be added to.                    
                </javadoc>
                <declaration name="x" type="int" line="361"/>
                <javadoc line="361">
                    Desired x location.                    
                </javadoc>
                <declaration name="y" type="int" line="365"/>
                <javadoc line="365">
                    Desired y location.                    
                </javadoc>
                <method name="hide" type="void" line="369">
                    <declaration name="component" type="Component" line="370"/>
                    <scope line="371">
                        <declaration name="parent" type="Container" line="372"/>
                        <scope line="373">
                            <declaration name="bounds" type="Rectangle" line="374"/>
                        </scope>
                    </scope>
                </method>
                <method name="pack" type="void" line="381">
                    <declaration name="component" type="Component" line="382"/>
                    <scope line="383"/>
                </method>
                <method name="reset" type="void" line="387">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <scope line="388"/>
                </method>
                <method name="overlappedByOwnedWindow" type="boolean" line="396">
                    <declaration name="component" type="Component" line="397"/>
                    <scope line="398">
                        <declaration name="w" type="Window" line="399"/>
                        <scope line="400"/>
                        <declaration name="ownedWindows" type="Window[]" line="403"/>
                        <scope line="404">
                            <declaration name="bnd" type="Rectangle" line="405"/>
                            <scope line="406">
                                <scope line="407"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="415">
                    Returns true if popup can fit the screen and the owner&apos;s top parent.
                      It determines can popup be lightweight or mediumweight.                    
                </javadoc>
                <method name="fitsOnScreen" type="boolean" line="419">
                    <declaration name="result" type="boolean" line="420"/>
                    <declaration name="component" type="Component" line="421"/>
                    <scope line="422">
                        <declaration name="popupWidth" type="int" line="423"/>
                        <declaration name="popupHeight" type="int" line="424"/>
                        <declaration name="parent" type="Container" line="425"/>
                        <scope line="426">
                            <declaration name="parentBounds" type="Rectangle" line="427"/>
                            <declaration name="i" type="Insets" line="428"/>
                            <scope line="433">
                                <declaration name="gc" type="GraphicsConfiguration" line="434"/>
                                <declaration name="popupArea" type="Rectangle" line="435"/>
                            </scope>
                            <scope line="438"/>
                        </scope>
                        <scope line="442">
                            <declaration name="parentBounds" type="Rectangle" line="443"/>
                            <declaration name="p" type="Point" line="444"/>
                        </scope>
                    </scope>
                </method>
                <method name="getContainerPopupArea" type="Rectangle" line="452">
                    <params>
                        <param name="gc" type="GraphicsConfiguration"/>
                    </params>
                    <declaration name="screenBounds" type="Rectangle" line="453"/>
                    <declaration name="toolkit" type="Toolkit" line="454"/>
                    <declaration name="insets" type="Insets" line="455"/>
                    <scope line="456"/>
                    <scope line="460"/>
                </method>
            </class>
            <class name="HeadlessPopup" line="471">
                <extends class="ContainerPopup"/>
                <javadoc line="471">
                    Popup implementation that is used in headless environment.                    
                </javadoc>
                <method name="getHeadlessPopup" type="Popup" line="475">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="popup" type="HeadlessPopup" line="476"/>
                </method>
                <method name="createComponent" type="Component" line="480">
                    <params>
                        <param name="owner" type="Component"/>
                    </params>
                </method>
                <method name="show" type="void" line="483"/>
                <method name="hide" type="void" line="485"/>
            </class>
            <class name="LightWeightPopup" line="488">
                <extends class="ContainerPopup"/>
                <javadoc line="488">
                    Popup implementation that uses a JPanel as the popup.                    
                </javadoc>
                <declaration name="lightWeightPopupCacheKey" type="Object" line="492"/>
                <javadoc line="493">
                    Returns a light weight &lt;code&gt;Popup&lt;/code&gt; implementation. If
                      the &lt;code&gt;Popup&lt;/code&gt; needs more space that in available in
                      &lt;code&gt;owner&lt;/code&gt;, this will return null.                    
                </javadoc>
                <method name="getLightWeightPopup" type="Popup" line="498">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="popup" type="LightWeightPopup" line="499"/>
                    <scope line="500"/>
                    <scope line="504"/>
                </method>
                <javadoc line="510">
                    Returns the cache to use for heavy weight popups.                    
                </javadoc>
                <method name="getLightWeightPopupCache" type="List&lt;LightWeightPopup&gt;" line="513">
                    <declaration name="cache" type="List&amp;lt;LightWeightPopup&amp;gt;" line="514"/>
                    <scope line="515"/>
                </method>
                <javadoc line="521">
                    Recycles the LightWeightPopup &lt;code&gt;popup&lt;/code&gt;.                    
                </javadoc>
                <method name="recycleLightWeightPopup" type="void" line="524">
                    <params>
                        <param name="popup" type="LightWeightPopup"/>
                    </params>
                    <scope line="525">
                        <declaration name="lightPopupCache" type="List&amp;lt;LightWeightPopup&amp;gt;" line="526"/>
                        <scope line="527"/>
                    </scope>
                </method>
                <javadoc line="532">
                    Returns a previously used &lt;code&gt;LightWeightPopup&lt;/code&gt;, or null
                      if none of the popups have been recycled.                    
                </javadoc>
                <method name="getRecycledLightWeightPopup" type="LightWeightPopup" line="536">
                    <scope line="537">
                        <declaration name="lightPopupCache" type="List&amp;lt;LightWeightPopup&amp;gt;" line="538"/>
                        <scope line="539">
                            <declaration name="r" type="LightWeightPopup" line="540"/>
                        </scope>
                    </scope>
                </method>
                <method name="hide" type="void" line="547">
                    <declaration name="component" type="Container" line="549"/>
                </method>
                <method name="show" type="void" line="553">
                    <declaration name="parent" type="Container" line="554"/>
                    <scope line="555"/>
                    <scope line="558">
                        <scope line="559">
                            <scope line="560"/>
                        </scope>
                        <scope line="565">
                            <scope line="566"/>
                        </scope>
                        <scope line="571"/>
                    </scope>
                    <declaration name="p" type="Point" line="575"/>
                    <declaration name="component" type="Component" line="576"/>
                    <scope line="578"/>
                    <scope line="581"/>
                </method>
                <method name="createComponent" type="Component" line="585">
                    <params>
                        <param name="owner" type="Component"/>
                    </params>
                    <declaration name="component" type="JComponent" line="586"/>
                </method>
                <javadoc line="590">
                    Resets the &lt;code&gt;Popup&lt;/code&gt; to an initial state.                    
                </javadoc>
                <method name="reset" type="void" line="593">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="component" type="JComponent" line="595"/>
                </method>
            </class>
            <class name="MediumWeightPopup" line="603">
                <extends class="ContainerPopup"/>
                <javadoc line="603">
                    Popup implementation that uses a Panel as the popup.                    
                </javadoc>
                <declaration name="mediumWeightPopupCacheKey" type="Object" line="607"/>
                <declaration name="rootPane" type="JRootPane" line="608"/>
                <javadoc line="608">
                    Child of the panel. The contents are added to this.                    
                </javadoc>
                <javadoc line="612">
                    Returns a medium weight &lt;code&gt;Popup&lt;/code&gt; implementation. If
                      the &lt;code&gt;Popup&lt;/code&gt; needs more space that in available in
                      &lt;code&gt;owner&lt;/code&gt;, this will return null.                    
                </javadoc>
                <method name="getMediumWeightPopup" type="Popup" line="617">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="popup" type="MediumWeightPopup" line="618"/>
                    <scope line="619"/>
                    <scope line="623"/>
                </method>
                <javadoc line="629">
                    Returns the cache to use for medium weight popups.                    
                </javadoc>
                <method name="getMediumWeightPopupCache" type="List&lt;MediumWeightPopup&gt;" line="632">
                    <declaration name="cache" type="List&amp;lt;MediumWeightPopup&amp;gt;" line="633"/>
                    <scope line="634"/>
                </method>
                <javadoc line="640">
                    Recycles the MediumWeightPopup &lt;code&gt;popup&lt;/code&gt;.                    
                </javadoc>
                <method name="recycleMediumWeightPopup" type="void" line="643">
                    <params>
                        <param name="popup" type="MediumWeightPopup"/>
                    </params>
                    <scope line="644">
                        <declaration name="mediumPopupCache" type="List&amp;lt;MediumWeightPopup&amp;gt;" line="645"/>
                        <scope line="646"/>
                    </scope>
                </method>
                <javadoc line="651">
                    Returns a previously used &lt;code&gt;MediumWeightPopup&lt;/code&gt;, or null
                      if none of the popups have been recycled.                    
                </javadoc>
                <method name="getRecycledMediumWeightPopup" type="MediumWeightPopup" line="655">
                    <scope line="656">
                        <declaration name="mediumPopupCache" type="List&amp;lt;MediumWeightPopup&amp;gt;" line="657"/>
                        <scope line="658">
                            <declaration name="r" type="MediumWeightPopup" line="659"/>
                        </scope>
                    </scope>
                </method>
                <method name="hide" type="void" line="666"/>
                <method name="show" type="void" line="671">
                    <declaration name="component" type="Component" line="672"/>
                    <declaration name="parent" type="Container" line="673"/>
                    <scope line="674"/>
                    <scope line="677"/>
                    <scope line="680">
                        <declaration name="p" type="Point" line="682"/>
                    </scope>
                    <scope line="687">
                        <declaration name="p" type="Point" line="688"/>
                    </scope>
                </method>
                <method name="createComponent" type="Component" line="695">
                    <params>
                        <param name="owner" type="Component"/>
                    </params>
                    <declaration name="component" type="Panel" line="696"/>
                </method>
                <javadoc line="702">
                    Resets the &lt;code&gt;Popup&lt;/code&gt; to an initial state.                    
                </javadoc>
                <method name="reset" type="void" line="705">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="component" type="Component" line="707"/>
                </method>
                <class name="MediumWeightComponent" line="714">
                    <extends class="Panel"/>
                    <implements interface="SwingHeavyWeight"/>
                    <method name="MediumWeightComponent" type="constructor" line="715"/>
                </class>
            </class>
        </class>
    </source>