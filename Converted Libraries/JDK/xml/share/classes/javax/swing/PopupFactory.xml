<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.applet.Applet"/>
        <import package="java.awt"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.util.ArrayList"/>
        <import package="java.util.HashMap"/>
        <import package="java.util.List"/>
        <import package="java.util.Map"/>
        <import package="javax.swing.ClientPropertyKey.PopupFactory_FORCE_HEAVYWEIGHT_POPUP"/>
        <class name="PopupFactory" line="38">
            <comment line="83">
                Key used to indicate a heavy weight Popup should be used.                
            </comment>
            <javadoc line="38">
                &lt;code&gt;PopupFactory&lt;/code&gt;, as the name implies, is used to obtain
                  instances of &lt;code&gt;Popup&lt;/code&gt;s. &lt;code&gt;Popup&lt;/code&gt;s are used to
                  display a &lt;code&gt;Component&lt;/code&gt; above all other &lt;code&gt;Component&lt;/code&gt;s
                  in a particular containment hierarchy. The general contract is that
                  once you have obtained a &lt;code&gt;Popup&lt;/code&gt; from a
                  &lt;code&gt;PopupFactory&lt;/code&gt;, you must invoke &lt;code&gt;hide&lt;/code&gt; on the
                  &lt;code&gt;Popup&lt;/code&gt;. The typical usage is:
                  &lt;pre&gt;
                  PopupFactory factory = PopupFactory.getSharedInstance();
                  Popup popup = factory.getPopup(owner, contents, x, y);
                  popup.show();
                  ...
                  popup.hide();
                  &lt;/pre&gt;                
                <see>
                    Popup                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="SharedInstanceKey" type="Object" line="59"/>
            <javadoc line="59">
                The shared instanceof &lt;code&gt;PopupFactory&lt;/code&gt; is per
                  &lt;code&gt;AppContext&lt;/code&gt;. This is the key used in the
                  &lt;code&gt;AppContext&lt;/code&gt; to locate the &lt;code&gt;PopupFactory&lt;/code&gt;.                
            </javadoc>
            <declaration name="MAX_CACHE_SIZE" type="int" line="67"/>
            <javadoc line="67">
                Max number of items to store in any one particular cache.                
            </javadoc>
            <declaration name="LIGHT_WEIGHT_POPUP" type="int" line="72"/>
            <javadoc line="72">
                Key used to indicate a light weight popup should be used.                
            </javadoc>
            <declaration name="MEDIUM_WEIGHT_POPUP" type="int" line="77"/>
            <javadoc line="77">
                Key used to indicate a medium weight Popup should be used.                
            </javadoc>
            <declaration name="HEAVY_WEIGHT_POPUP" type="int" line="85"/>
            <declaration name="popupType" type="int" line="87"/>
            <javadoc line="87">
                Default type of Popup to create.                
            </javadoc>
            <javadoc line="93">
                Sets the &lt;code&gt;PopupFactory&lt;/code&gt; that will be used to obtain
                  &lt;code&gt;Popup&lt;/code&gt;s.
                  This will throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if
                  &lt;code&gt;factory&lt;/code&gt; is null.                
                <param>
                    factory Shared PopupFactory                    
                </param>
                <exception>
                    IllegalArgumentException if <code>factory</code> is null                    
                </exception>
                <see>
                    #getPopup                    
                </see>
            </javadoc>
            <method name="setSharedInstance" type="void" line="103">
                <params>
                    <param name="factory" type="PopupFactory"/>
                </params>
                <scope line="104"/>
            </method>
            <javadoc line="110">
                Returns the shared &lt;code&gt;PopupFactory&lt;/code&gt; which can be used
                  to obtain &lt;code&gt;Popup&lt;/code&gt;s.                
                <return>
                    Shared PopupFactory                    
                </return>
            </javadoc>
            <method name="getSharedInstance" type="PopupFactory" line="116">
                <declaration name="factory" type="PopupFactory" line="117"/>
                <scope line="120"/>
            </method>
            <javadoc line="128">
                Provides a hint as to the type of &lt;code&gt;Popup&lt;/code&gt; that should
                  be created.                
            </javadoc>
            <method name="setPopupType" type="void" line="132">
                <params>
                    <param name="type" type="int"/>
                </params>
            </method>
            <javadoc line="136">
                Returns the preferred type of Popup to create.                
            </javadoc>
            <method name="getPopupType" type="int" line="139"/>
            <javadoc line="143">
                Creates a &lt;code&gt;Popup&lt;/code&gt; for the Component &lt;code&gt;owner&lt;/code&gt;
                  containing the Component &lt;code&gt;contents&lt;/code&gt;. &lt;code&gt;owner&lt;/code&gt;
                  is used to determine which &lt;code&gt;Window&lt;/code&gt; the new
                  &lt;code&gt;Popup&lt;/code&gt; will parent the &lt;code&gt;Component&lt;/code&gt; the
                  &lt;code&gt;Popup&lt;/code&gt; creates to. A null &lt;code&gt;owner&lt;/code&gt; implies there
                  is no valid parent. &lt;code&gt;x&lt;/code&gt; and
                  &lt;code&gt;y&lt;/code&gt; specify the preferred initial location to place
                  the &lt;code&gt;Popup&lt;/code&gt; at. Based on screen size, or other paramaters,
                  the &lt;code&gt;Popup&lt;/code&gt; may not display at &lt;code&gt;x&lt;/code&gt; and
                  &lt;code&gt;y&lt;/code&gt;.                
                <param>
                    owner    Component mouse coordinates are relative to, may be null                    
                </param>
                <param>
                    contents Contents of the Popup                    
                </param>
                <param>
                    x        Initial x screen coordinate                    
                </param>
                <param>
                    y        Initial y screen coordinate                    
                </param>
                <exception>
                    IllegalArgumentException if contents is null                    
                </exception>
                <return>
                    Popup containing Contents                    
                </return>
            </javadoc>
            <method name="getPopup" type="Popup" line="163">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <comment line="174">
                    Didn&apos;t fit, force to heavy.                    
                </comment>
                <scope line="164"/>
                <declaration name="popupType" type="int" line="169"/>
                <declaration name="popup" type="Popup" line="170"/>
                <scope line="172"/>
            </method>
            <javadoc line="179">
                Returns the popup type to use for the specified parameters.                
            </javadoc>
            <method name="getPopupType" type="int" line="183">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
                <comment line="196">
                    Check if the parent component is an option pane.  If so we need to
                     force a heavy weight popup in order to have event dispatching work
                     correctly.                    
                </comment>
                <declaration name="popupType" type="int" line="184"/>
                <scope line="186"/>
                <scope line="191"/>
                <declaration name="c" type="Component" line="198"/>
                <scope line="199">
                    <scope line="200">
                        <scope line="202"/>
                    </scope>
                    <scope line="206">
                        <declaration name="w" type="Window" line="207"/>
                        <scope line="208"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="219">
                Obtains the appropriate &lt;code&gt;Popup&lt;/code&gt; based on
                  &lt;code&gt;popupType&lt;/code&gt;.                
            </javadoc>
            <method name="getPopup" type="Popup" line="224">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                    <param name="popupType" type="int"/>
                </params>
                <scope line="225"/>
            </method>
            <javadoc line="240">
                Creates a headless popup                
            </javadoc>
            <method name="getHeadlessPopup" type="Popup" line="244">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
            </method>
            <javadoc line="248">
                Creates a light weight popup.                
            </javadoc>
            <method name="getLightWeightPopup" type="Popup" line="252">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
            </method>
            <javadoc line="257">
                Creates a medium weight popup.                
            </javadoc>
            <method name="getMediumWeightPopup" type="Popup" line="261">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
            </method>
            <javadoc line="266">
                Creates a heavy weight popup.                
            </javadoc>
            <method name="getHeavyWeightPopup" type="Popup" line="270">
                <params>
                    <param name="owner" type="Component"/>
                    <param name="contents" type="Component"/>
                    <param name="ownerX" type="int"/>
                    <param name="ownerY" type="int"/>
                </params>
                <scope line="271"/>
            </method>
            <javadoc line="278">
                Returns true if the Component &lt;code&gt;i&lt;/code&gt; inside a heavy weight
                  &lt;code&gt;Popup&lt;/code&gt;.                
            </javadoc>
            <method name="invokerInHeavyWeightPopup" type="boolean" line="282">
                <params>
                    <param name="i" type="Component"/>
                </params>
                <scope line="283">
                    <declaration name="parent" type="Container" line="284"/>
                    <scope line="286">
                        <scope line="287"/>
                    </scope>
                </scope>
            </method>
            <class name="HeavyWeightPopup" line="296">
                <extends class="Popup"/>
                <comment line="458">
                    Popup methods                    
                </comment>
                <comment line="715">
                    Popup methods                    
                </comment>
                <comment line="774">
                    Local methods                    
                </comment>
                <comment line="871">
                    Popup                    
                </comment>
                <comment line="949">
                    This implements SwingHeavyWeight so that repaints on it
                     are processed by the RepaintManager and SwingPaintEventDispatcher.                    
                </comment>
                <javadoc line="296">
                    Popup implementation that uses a Window as the popup.                    
                </javadoc>
                <declaration name="heavyWeightPopupCacheKey" type="Object" line="300"/>
                <javadoc line="303">
                    Returns either a new or recycled &lt;code&gt;Popup&lt;/code&gt; containing
                      the specified children.                    
                </javadoc>
                <method name="getHeavyWeightPopup" type="Popup" line="308">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <comment line="338">
                        The recycled popup can&apos;t serve us well
                         dispose it and create new one                        
                    </comment>
                    <comment line="351">
                        Set window name. We need this in BasicPopupMenuUI
                         to identify focusable popup window.                        
                    </comment>
                    <declaration name="window" type="Window" line="309"/>
                    <declaration name="popup" type="HeavyWeightPopup" line="311"/>
                    <scope line="313"/>
                    <declaration name="focusPopup" type="boolean" line="317"/>
                    <scope line="318">
                        <scope line="319">
                            <declaration name="jpm" type="JPopupMenu" line="320"/>
                            <declaration name="popComps" type="Component" line="321"/>
                            <scope line="322">
                                <scope line="324"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="334">
                        <scope line="336"/>
                    </scope>
                    <scope line="347">
                        <declaration name="wnd" type="JWindow" line="348"/>
                    </scope>
                </method>
                <javadoc line="358">
                    Returns a previously disposed heavy weight &lt;code&gt;Popup&lt;/code&gt;
                      associated with &lt;code&gt;window&lt;/code&gt;. This will return null if
                      there is no &lt;code&gt;HeavyWeightPopup&lt;/code&gt; associated with
                      &lt;code&gt;window&lt;/code&gt;.                    
                </javadoc>
                <method name="getRecycledHeavyWeightPopup" type="HeavyWeightPopup" line="364">
                    <params>
                        <param name="w" type="Window"/>
                    </params>
                    <scope line="365">
                        <declaration name="cache" type="List&lt;HeavyWeightPopup&gt;" line="366"/>
                        <declaration name="heavyPopupCache" type="Map&lt;Window,List&lt;HeavyWeightPopup&gt;&gt;" line="367"/>
                        <scope line="369"/>
                        <scope line="371"/>
                        <scope line="374">
                            <declaration name="r" type="HeavyWeightPopup" line="375"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="383">
                    Returns the cache to use for heavy weight popups. Maps from
                      &lt;code&gt;Window&lt;/code&gt; to a &lt;code&gt;List&lt;/code&gt; of
                      &lt;code&gt;HeavyWeightPopup&lt;/code&gt;s.                    
                </javadoc>
                <method name="getHeavyWeightPopupCache" type="Map<Window,List<HeavyWeightPopup>>" line="388">
                    <scope line="389">
                        <declaration name="cache" type="Map&lt;Window,List&lt;HeavyWeightPopup&gt;&gt;" line="390"/>
                        <scope line="393"/>
                    </scope>
                </method>
                <javadoc line="402">
                    Recycles the passed in &lt;code&gt;HeavyWeightPopup&lt;/code&gt;.                    
                </javadoc>
                <method name="recycleHeavyWeightPopup" type="void" line="405">
                    <params>
                        <param name="popup" type="HeavyWeightPopup"/>
                    </params>
                    <comment line="415">
                        If the Window isn&apos;t visible, we don&apos;t cache it as we
                         likely won&apos;t ever get a windowClosed event to clean up.
                         We also don&apos;t cache DefaultFrames as this indicates
                         there wasn&apos;t a valid Window parent, and thus we don&apos;t
                         know when to clean up.                        
                    </comment>
                    <comment line="427">
                        Clean up if the Window is closed                        
                    </comment>
                    <scope line="406">
                        <declaration name="cache" type="List&lt;HeavyWeightPopup&gt;" line="407"/>
                        <declaration name="window" type="Window" line="408"/>
                        <declaration name="heavyPopupCache" type="Map&lt;Window,List&lt;HeavyWeightPopup&gt;&gt;" line="410"/>
                        <scope line="413"/>
                        <scope line="421"/>
                        <scope line="423">
                            <declaration name="w" type="Window" line="427"/>
                            <anonymous_class line="429">
                                <method name="windowClosed" type="void" line="430">
                                    <params>
                                        <param name="e" type="WindowEvent"/>
                                    </params>
                                    <declaration name="popups" type="List&lt;HeavyWeightPopup&gt;" line="431"/>
                                    <scope line="433">
                                        <declaration name="heavyPopupCache2" type="Map&lt;Window,List&lt;HeavyWeightPopup&gt;&gt;" line="434"/>
                                    </scope>
                                    <scope line="439">
                                        <scope line="441"/>
                                    </scope>
                                </method>
                            </anonymous_class>
                        </scope>
                        <scope line="449"/>
                        <scope line="451"/>
                    </scope>
                </method>
                <method name="hide" type="void" line="460"/>
                <javadoc line="465">
                    As we recycle the &lt;code&gt;Window&lt;/code&gt;, we don&apos;t want to dispose it,
                      thus this method does nothing, instead use &lt;code&gt;_dipose&lt;/code&gt;
                      which will handle the disposing.                    
                </javadoc>
                <method name="dispose" type="void" line="470"/>
                <method name="_dispose" type="void" line="473"/>
            </class>
            <class name="ContainerPopup" line="480">
                <extends class="Popup"/>
                <comment line="458">
                    Popup methods                    
                </comment>
                <comment line="715">
                    Popup methods                    
                </comment>
                <comment line="774">
                    Local methods                    
                </comment>
                <comment line="871">
                    Popup                    
                </comment>
                <comment line="949">
                    This implements SwingHeavyWeight so that repaints on it
                     are processed by the RepaintManager and SwingPaintEventDispatcher.                    
                </comment>
                <javadoc line="480">
                    ContainerPopup consolidates the common code used in the light/medium
                      weight implementations of &lt;code&gt;Popup&lt;/code&gt;.                    
                </javadoc>
                <declaration name="owner" type="Component" line="485"/>
                <javadoc line="485">
                    Component we are to be added to.                    
                </javadoc>
                <declaration name="x" type="int" line="487"/>
                <javadoc line="487">
                    Desired x location.                    
                </javadoc>
                <declaration name="y" type="int" line="489"/>
                <javadoc line="489">
                    Desired y location.                    
                </javadoc>
                <method name="hide" type="void" line="492">
                    <declaration name="component" type="Component" line="493"/>
                    <scope line="495">
                        <declaration name="parent" type="Container" line="496"/>
                        <scope line="498">
                            <declaration name="bounds" type="Rectangle" line="499"/>
                        </scope>
                    </scope>
                </method>
                <method name="pack" type="void" line="508">
                    <declaration name="component" type="Component" line="509"/>
                    <scope line="511"/>
                </method>
                <method name="reset" type="void" line="517">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <comment line="521">
                        Force the content to be added to the layered pane, otherwise
                         we&apos;ll get an exception when adding to the RootPaneContainer.                        
                    </comment>
                    <scope line="519"/>
                </method>
                <method name="overlappedByOwnedWindow" type="boolean" line="531">
                    <declaration name="component" type="Component" line="532"/>
                    <scope line="533">
                        <declaration name="w" type="Window" line="534"/>
                        <scope line="535"/>
                        <declaration name="ownedWindows" type="Window[]" line="538"/>
                        <scope line="539">
                            <declaration name="bnd" type="Rectangle" line="540"/>
                            <scope line="541">
                                <scope line="543"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="553">
                    Returns true if popup can fit the screen and the owner&apos;s top parent.
                      It determines can popup be lightweight or mediumweight.                    
                </javadoc>
                <method name="fitsOnScreen" type="boolean" line="557">
                    <declaration name="result" type="boolean" line="558"/>
                    <declaration name="component" type="Component" line="559"/>
                    <scope line="560">
                        <declaration name="popupWidth" type="int" line="561"/>
                        <declaration name="popupHeight" type="int" line="562"/>
                        <declaration name="parent" type="Container" line="564"/>
                        <scope line="567">
                            <declaration name="parentBounds" type="Rectangle" line="569"/>
                            <declaration name="i" type="Insets" line="570"/>
                            <scope line="576">
                                <declaration name="gc" type="GraphicsConfiguration" line="577"/>
                                <declaration name="popupArea" type="Rectangle" line="579"/>
                            </scope>
                            <scope line="582"/>
                        </scope>
                        <scope line="586">
                            <declaration name="parentBounds" type="Rectangle" line="587"/>
                            <declaration name="p" type="Point" line="588"/>
                        </scope>
                    </scope>
                </method>
                <method name="getContainerPopupArea" type="Rectangle" line="597">
                    <params>
                        <param name="gc" type="GraphicsConfiguration"/>
                    </params>
                    <comment line="603">
                        If we have GraphicsConfiguration use it
                         to get screen bounds                        
                    </comment>
                    <comment line="608">
                        If we don&apos;t have GraphicsConfiguration use primary screen                        
                    </comment>
                    <comment line="612">
                        Take insets into account                        
                    </comment>
                    <declaration name="screenBounds" type="Rectangle" line="598"/>
                    <declaration name="toolkit" type="Toolkit" line="599"/>
                    <declaration name="insets" type="Insets" line="600"/>
                    <scope line="601"/>
                    <scope line="606"/>
                </method>
            </class>
            <class name="HeadlessPopup" line="621">
                <extends class="ContainerPopup"/>
                <comment line="458">
                    Popup methods                    
                </comment>
                <comment line="715">
                    Popup methods                    
                </comment>
                <comment line="774">
                    Local methods                    
                </comment>
                <comment line="871">
                    Popup                    
                </comment>
                <comment line="949">
                    This implements SwingHeavyWeight so that repaints on it
                     are processed by the RepaintManager and SwingPaintEventDispatcher.                    
                </comment>
                <javadoc line="621">
                    Popup implementation that is used in headless environment.                    
                </javadoc>
                <method name="getHeadlessPopup" type="Popup" line="626">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="popup" type="HeadlessPopup" line="627"/>
                </method>
                <method name="createComponent" type="Component" line="632">
                    <params>
                        <param name="owner" type="Component"/>
                    </params>
                </method>
                <method name="show" type="void" line="636"/>
                <method name="hide" type="void" line="638"/>
            </class>
            <class name="LightWeightPopup" line="643">
                <extends class="ContainerPopup"/>
                <comment line="458">
                    Popup methods                    
                </comment>
                <comment line="715">
                    Popup methods                    
                </comment>
                <comment line="774">
                    Local methods                    
                </comment>
                <comment line="871">
                    Popup                    
                </comment>
                <comment line="949">
                    This implements SwingHeavyWeight so that repaints on it
                     are processed by the RepaintManager and SwingPaintEventDispatcher.                    
                </comment>
                <javadoc line="643">
                    Popup implementation that uses a JPanel as the popup.                    
                </javadoc>
                <declaration name="lightWeightPopupCacheKey" type="Object" line="647"/>
                <javadoc line="650">
                    Returns a light weight &lt;code&gt;Popup&lt;/code&gt; implementation. If
                      the &lt;code&gt;Popup&lt;/code&gt; needs more space that in available in
                      &lt;code&gt;owner&lt;/code&gt;, this will return null.                    
                </javadoc>
                <method name="getLightWeightPopup" type="Popup" line="656">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="popup" type="LightWeightPopup" line="657"/>
                    <scope line="659"/>
                    <scope line="664"/>
                </method>
                <javadoc line="671">
                    Returns the cache to use for heavy weight popups.                    
                </javadoc>
                <method name="getLightWeightPopupCache" type="List<LightWeightPopup>" line="674">
                    <declaration name="cache" type="List&lt;LightWeightPopup&gt;" line="675"/>
                    <scope line="677"/>
                </method>
                <javadoc line="684">
                    Recycles the LightWeightPopup &lt;code&gt;popup&lt;/code&gt;.                    
                </javadoc>
                <method name="recycleLightWeightPopup" type="void" line="687">
                    <params>
                        <param name="popup" type="LightWeightPopup"/>
                    </params>
                    <scope line="688">
                        <declaration name="lightPopupCache" type="List&lt;LightWeightPopup&gt;" line="689"/>
                        <scope line="690"/>
                    </scope>
                </method>
                <javadoc line="696">
                    Returns a previously used &lt;code&gt;LightWeightPopup&lt;/code&gt;, or null
                      if none of the popups have been recycled.                    
                </javadoc>
                <method name="getRecycledLightWeightPopup" type="LightWeightPopup" line="700">
                    <scope line="701">
                        <declaration name="lightPopupCache" type="List&lt;LightWeightPopup&gt;" line="702"/>
                        <scope line="703">
                            <declaration name="r" type="LightWeightPopup" line="704"/>
                        </scope>
                    </scope>
                </method>
                <method name="hide" type="void" line="717">
                    <declaration name="component" type="Container" line="720"/>
                </method>
                <method name="show" type="void" line="725">
                    <comment line="733">
                        Try to find a JLayeredPane and Window to add                        
                    </comment>
                    <comment line="740">
                        Continue, so that if there is a higher JRootPane, we&apos;ll
                         pick it up.                        
                    </comment>
                    <comment line="748">
                        Painting code stops at Applets, we don&apos;t want
                         to add to a Component above an Applet otherwise
                         you&apos;ll never see it painted.                        
                    </comment>
                    <declaration name="parent" type="Container" line="726"/>
                    <scope line="728"/>
                    <scope line="733">
                        <scope line="734">
                            <scope line="735"/>
                        </scope>
                        <scope line="741">
                            <scope line="742"/>
                        </scope>
                        <scope line="746"/>
                    </scope>
                    <declaration name="p" type="Point" line="754"/>
                    <declaration name="component" type="Component" line="756"/>
                    <scope line="759"/>
                    <scope line="761"/>
                </method>
                <method name="createComponent" type="Component" line="766">
                    <params>
                        <param name="owner" type="Component"/>
                    </params>
                    <declaration name="component" type="JComponent" line="767"/>
                </method>
                <javadoc line="777">
                    Resets the &lt;code&gt;Popup&lt;/code&gt; to an initial state.                    
                </javadoc>
                <method name="reset" type="void" line="781">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="component" type="JComponent" line="784"/>
                </method>
            </class>
            <class name="MediumWeightPopup" line="795">
                <extends class="ContainerPopup"/>
                <comment line="458">
                    Popup methods                    
                </comment>
                <comment line="715">
                    Popup methods                    
                </comment>
                <comment line="774">
                    Local methods                    
                </comment>
                <comment line="871">
                    Popup                    
                </comment>
                <comment line="949">
                    This implements SwingHeavyWeight so that repaints on it
                     are processed by the RepaintManager and SwingPaintEventDispatcher.                    
                </comment>
                <javadoc line="795">
                    Popup implementation that uses a Panel as the popup.                    
                </javadoc>
                <declaration name="mediumWeightPopupCacheKey" type="Object" line="799"/>
                <declaration name="rootPane" type="JRootPane" line="802"/>
                <javadoc line="802">
                    Child of the panel. The contents are added to this.                    
                </javadoc>
                <javadoc line="806">
                    Returns a medium weight &lt;code&gt;Popup&lt;/code&gt; implementation. If
                      the &lt;code&gt;Popup&lt;/code&gt; needs more space that in available in
                      &lt;code&gt;owner&lt;/code&gt;, this will return null.                    
                </javadoc>
                <method name="getMediumWeightPopup" type="Popup" line="812">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="popup" type="MediumWeightPopup" line="813"/>
                    <scope line="815"/>
                    <scope line="820"/>
                </method>
                <javadoc line="827">
                    Returns the cache to use for medium weight popups.                    
                </javadoc>
                <method name="getMediumWeightPopupCache" type="List<MediumWeightPopup>" line="830">
                    <declaration name="cache" type="List&lt;MediumWeightPopup&gt;" line="831"/>
                    <scope line="834"/>
                </method>
                <javadoc line="841">
                    Recycles the MediumWeightPopup &lt;code&gt;popup&lt;/code&gt;.                    
                </javadoc>
                <method name="recycleMediumWeightPopup" type="void" line="844">
                    <params>
                        <param name="popup" type="MediumWeightPopup"/>
                    </params>
                    <scope line="845">
                        <declaration name="mediumPopupCache" type="List&lt;MediumWeightPopup&gt;" line="846"/>
                        <scope line="847"/>
                    </scope>
                </method>
                <javadoc line="853">
                    Returns a previously used &lt;code&gt;MediumWeightPopup&lt;/code&gt;, or null
                      if none of the popups have been recycled.                    
                </javadoc>
                <method name="getRecycledMediumWeightPopup" type="MediumWeightPopup" line="857">
                    <scope line="858">
                        <declaration name="mediumPopupCache" type="List&lt;MediumWeightPopup&gt;" line="859"/>
                        <scope line="860">
                            <declaration name="r" type="MediumWeightPopup" line="861"/>
                        </scope>
                    </scope>
                </method>
                <method name="hide" type="void" line="874"/>
                <method name="show" type="void" line="879">
                    <comment line="887">
                        Find the top level window,
                        if it has a layered pane,
                        add to that, otherwise                        
                    </comment>
                    <comment line="896">
                        Set the visibility to false before adding to workaround a
                         bug in Solaris in which the Popup gets added at the wrong
                         location, which will result in a mouseExit, which will then
                         result in the ToolTip being removed.                        
                    </comment>
                    <declaration name="component" type="Component" line="880"/>
                    <declaration name="parent" type="Container" line="881"/>
                    <scope line="883"/>
                    <scope line="892"/>
                    <scope line="899">
                        <declaration name="p" type="Point" line="901"/>
                    </scope>
                    <scope line="907">
                        <declaration name="p" type="Point" line="908"/>
                    </scope>
                </method>
                <method name="createComponent" type="Component" line="918">
                    <params>
                        <param name="owner" type="Component"/>
                    </params>
                    <comment line="923">
                        NOTE: this uses setOpaque vs LookAndFeel.installProperty as
                         there is NO reason for the RootPane not to be opaque. For
                         painting to work the contentPane must be opaque, therefor the
                         RootPane can also be opaque.                        
                    </comment>
                    <declaration name="component" type="Panel" line="919"/>
                </method>
                <javadoc line="931">
                    Resets the &lt;code&gt;Popup&lt;/code&gt; to an initial state.                    
                </javadoc>
                <method name="reset" type="void" line="935">
                    <params>
                        <param name="owner" type="Component"/>
                        <param name="contents" type="Component"/>
                        <param name="ownerX" type="int"/>
                        <param name="ownerY" type="int"/>
                    </params>
                    <declaration name="component" type="Component" line="938"/>
                </method>
                <class name="MediumWeightComponent" line="950">
                    <extends class="Panel"/>
                    <implements interface="SwingHeavyWeight"/>
                    <method name="MediumWeightComponent" type="constructor" line="952"/>
                </class>
            </class>
        </class>
    </source>