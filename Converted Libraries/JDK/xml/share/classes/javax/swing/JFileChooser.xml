<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="javax.swing.event"/>
        <import package="javax.swing.filechooser"/>
        <import package="javax.swing.plaf.FileChooserUI"/>
        <import package="javax.accessibility"/>
        <import package="java.io.File"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.IOException"/>
        <import package="java.util.Vector"/>
        <import package="java.awt.AWTEvent"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Window"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.GraphicsEnvironment"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.EventQueue"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.event"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.lang.ref.WeakReference"/>
        <class name="JFileChooser" line="55">
            <extends class="JComponent"/>
            <comment line="100">
                ************************
                 ***** Dialog Types *****
                 ************************                
            </comment>
            <comment line="123">
                ********************************
                 ***** Dialog Return Values *****
                 ********************************                
            </comment>
            <comment line="143">
                **********************************
                 ***** JFileChooser properties *****
                 **********************************                
            </comment>
            <comment line="243">
                ******************************
                 ***** instance variables *****
                 ******************************                
            </comment>
            <comment line="265">
                Listens to changes in the native setting for showing hidden files.
                 The Listener is removed and the native setting is ignored if
                 setFileHidingEnabled() is ever called.                
            </comment>
            <comment line="286">
                *************************************
                 ***** JFileChooser Constructors *****
                 *************************************                
            </comment>
            <comment line="451">
                *****************************
                 ****** File Operations ******
                 *****************************                
            </comment>
            <comment line="614">
                **************************************
                 ***** JFileChooser Dialog methods *****
                 **************************************                
            </comment>
            <comment line="812">
                **************************
                 ***** Dialog Options *****
                 **************************                
            </comment>
            <comment line="964">
                ************************************
                 ***** JFileChooser View Options *****
                 ************************************                
            </comment>
            <comment line="1482">
                ******************************
                 *****FileView delegation *****
                 ******************************                
            </comment>
            <comment line="1486">
                NOTE: all of the following methods attempt to delegate
                 first to the client set fileView, and if &lt;code&gt;null&lt;/code&gt; is returned
                 (or there is now client defined fileView) then calls the
                 UI&apos;s default fileView.                
            </comment>
            <comment line="1651">
                **************************
                 ***** Event Handling *****
                 **************************                
            </comment>
            <comment line="1786">
                *********************************
                 ***** Pluggable L&amp;F methods *****
                 *********************************                
            </comment>
            <comment line="1939">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="1980">
                inner class AccessibleJFileChooser                
            </comment>
            <implements interface="Accessible"/>
            <javadoc line="55">
                &lt;code&gt;JFileChooser&lt;/code&gt; provides a simple mechanism for the user to
                  choose a file.
                  For information about using &lt;code&gt;JFileChooser&lt;/code&gt;, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/filechooser.html&quot;&gt;How to Use File Choosers&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  The following code pops up a file chooser for the user&apos;s home directory that
                  sees only .jpg and .gif images:
                  &lt;pre&gt;
                  JFileChooser chooser = new JFileChooser();
                  FileNameExtensionFilter filter = new FileNameExtensionFilter(
                  &quot;JPG &amp; GIF Images&quot;, &quot;jpg&quot;, &quot;gif&quot;);
                  chooser.setFileFilter(filter);
                  int returnVal = chooser.showOpenDialog(parent);
                  if(returnVal == JFileChooser.APPROVE_OPTION) {
                  System.out.println(&quot;You chose to open this file: &quot; +
                  chooser.getSelectedFile().getName());
                  }
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.                
                <beaninfo>
                    attribute: isContainer false
                      description: A component which allows for the interactive selection of a file.                    
                </beaninfo>
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="93"/>
            <javadoc line="93">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="OPEN_DIALOG" type="int" line="103"/>
            <javadoc line="103">
                Type value indicating that the &lt;code&gt;JFileChooser&lt;/code&gt; supports an
                  &quot;Open&quot; file operation.                
            </javadoc>
            <declaration name="SAVE_DIALOG" type="int" line="109"/>
            <javadoc line="109">
                Type value indicating that the &lt;code&gt;JFileChooser&lt;/code&gt; supports a
                  &quot;Save&quot; file operation.                
            </javadoc>
            <declaration name="CUSTOM_DIALOG" type="int" line="115"/>
            <javadoc line="115">
                Type value indicating that the &lt;code&gt;JFileChooser&lt;/code&gt; supports a
                  developer-specified file operation.                
            </javadoc>
            <declaration name="CANCEL_OPTION" type="int" line="126"/>
            <javadoc line="126">
                Return value if cancel is chosen.                
            </javadoc>
            <declaration name="APPROVE_OPTION" type="int" line="131"/>
            <javadoc line="131">
                Return value if approve (yes, ok) is chosen.                
            </javadoc>
            <declaration name="ERROR_OPTION" type="int" line="136"/>
            <javadoc line="136">
                Return value if an error occured.                
            </javadoc>
            <declaration name="FILES_ONLY" type="int" line="147"/>
            <javadoc line="147">
                Instruction to display only files.                
            </javadoc>
            <declaration name="DIRECTORIES_ONLY" type="int" line="150"/>
            <javadoc line="150">
                Instruction to display only directories.                
            </javadoc>
            <declaration name="FILES_AND_DIRECTORIES" type="int" line="153"/>
            <javadoc line="153">
                Instruction to display both files and directories.                
            </javadoc>
            <declaration name="CANCEL_SELECTION" type="String" line="156"/>
            <javadoc line="156">
                Instruction to cancel the current selection.                
            </javadoc>
            <declaration name="APPROVE_SELECTION" type="String" line="159"/>
            <javadoc line="159">
                Instruction to approve the current selection
                  (same as pressing yes or ok).                
            </javadoc>
            <declaration name="APPROVE_BUTTON_TEXT_CHANGED_PROPERTY" type="String" line="165"/>
            <javadoc line="165">
                Identifies change in the text on the approve (yes, ok) button.                
            </javadoc>
            <declaration name="APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY" type="String" line="168"/>
            <javadoc line="168">
                Identifies change in the tooltip text for the approve (yes, ok)
                  button.                
            </javadoc>
            <declaration name="APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY" type="String" line="174"/>
            <javadoc line="174">
                Identifies change in the mnemonic for the approve (yes, ok) button.                
            </javadoc>
            <declaration name="CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY" type="String" line="177"/>
            <javadoc line="177">
                Instruction to display the control buttons.                
            </javadoc>
            <declaration name="DIRECTORY_CHANGED_PROPERTY" type="String" line="180"/>
            <javadoc line="180">
                Identifies user&apos;s directory change.                
            </javadoc>
            <declaration name="SELECTED_FILE_CHANGED_PROPERTY" type="String" line="183"/>
            <javadoc line="183">
                Identifies change in user&apos;s single-file selection.                
            </javadoc>
            <declaration name="SELECTED_FILES_CHANGED_PROPERTY" type="String" line="186"/>
            <javadoc line="186">
                Identifies change in user&apos;s multiple-file selection.                
            </javadoc>
            <declaration name="MULTI_SELECTION_ENABLED_CHANGED_PROPERTY" type="String" line="189"/>
            <javadoc line="189">
                Enables multiple-file selections.                
            </javadoc>
            <declaration name="FILE_SYSTEM_VIEW_CHANGED_PROPERTY" type="String" line="192"/>
            <javadoc line="192">
                Says that a different object is being used to find available drives
                  on the system.                
            </javadoc>
            <declaration name="FILE_VIEW_CHANGED_PROPERTY" type="String" line="198"/>
            <javadoc line="198">
                Says that a different object is being used to retrieve file
                  information.                
            </javadoc>
            <declaration name="FILE_HIDING_CHANGED_PROPERTY" type="String" line="204"/>
            <javadoc line="204">
                Identifies a change in the display-hidden-files property.                
            </javadoc>
            <declaration name="FILE_FILTER_CHANGED_PROPERTY" type="String" line="207"/>
            <javadoc line="207">
                User changed the kind of files to display.                
            </javadoc>
            <declaration name="FILE_SELECTION_MODE_CHANGED_PROPERTY" type="String" line="210"/>
            <javadoc line="210">
                Identifies a change in the kind of selection (single,
                  multiple, etc.).                
            </javadoc>
            <declaration name="ACCESSORY_CHANGED_PROPERTY" type="String" line="216"/>
            <javadoc line="216">
                Says that a different accessory component is in use
                  (for example, to preview files).                
            </javadoc>
            <declaration name="ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY" type="String" line="222"/>
            <javadoc line="222">
                Identifies whether a the AcceptAllFileFilter is used or not.                
            </javadoc>
            <declaration name="DIALOG_TITLE_CHANGED_PROPERTY" type="String" line="227"/>
            <javadoc line="227">
                Identifies a change in the dialog title.                
            </javadoc>
            <declaration name="DIALOG_TYPE_CHANGED_PROPERTY" type="String" line="230"/>
            <javadoc line="230">
                Identifies a change in the type of files displayed (files only,
                  directories only, or both files and directories).                
            </javadoc>
            <declaration name="CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY" type="String" line="236"/>
            <javadoc line="236">
                Identifies a change in the list of predefined file filters
                  the user can choose from.                
            </javadoc>
            <declaration name="dialogTitle" type="String" line="246"/>
            <declaration name="approveButtonText" type="String" line="247"/>
            <declaration name="approveButtonToolTipText" type="String" line="248"/>
            <declaration name="approveButtonMnemonic" type="int" line="249"/>
            <declaration name="filters" type="Vector&lt;FileFilter&gt;" line="251"/>
            <declaration name="dialog" type="JDialog" line="252"/>
            <declaration name="dialogType" type="int" line="253"/>
            <declaration name="returnValue" type="int" line="254"/>
            <declaration name="accessory" type="JComponent" line="255"/>
            <declaration name="fileView" type="FileView" line="257"/>
            <declaration name="controlsShown" type="boolean" line="259"/>
            <declaration name="useFileHiding" type="boolean" line="261"/>
            <declaration name="SHOW_HIDDEN_PROP" type="String" line="262"/>
            <declaration name="showFilesListener" type="PropertyChangeListener" line="267"/>
            <declaration name="fileSelectionMode" type="int" line="269"/>
            <declaration name="multiSelectionEnabled" type="boolean" line="271"/>
            <declaration name="useAcceptAllFileFilter" type="boolean" line="273"/>
            <declaration name="dragEnabled" type="boolean" line="275"/>
            <declaration name="fileFilter" type="FileFilter" line="277"/>
            <declaration name="fileSystemView" type="FileSystemView" line="279"/>
            <declaration name="currentDirectory" type="File" line="281"/>
            <declaration name="selectedFile" type="File" line="282"/>
            <declaration name="selectedFiles" type="File[]" line="283"/>
            <javadoc line="289">
                Constructs a &lt;code&gt;JFileChooser&lt;/code&gt; pointing to the user&apos;s
                  default directory. This default depends on the operating system.
                  It is typically the &quot;My Documents&quot; folder on Windows, and the
                  user&apos;s home directory on Unix.                
            </javadoc>
            <method name="JFileChooser" type="constructor" line="295"/>
            <javadoc line="299">
                Constructs a &lt;code&gt;JFileChooser&lt;/code&gt; using the given path.
                  Passing in a &lt;code&gt;null&lt;/code&gt;
                  string causes the file chooser to point to the user&apos;s default directory.
                  This default depends on the operating system. It is
                  typically the &quot;My Documents&quot; folder on Windows, and the user&apos;s
                  home directory on Unix.                
                <param>
                    currentDirectoryPath  a &lt;code&gt;String&lt;/code&gt; giving the path
                      to a file or directory                    
                </param>
            </javadoc>
            <method name="JFileChooser" type="constructor" line="310">
                <params>
                    <param name="currentDirectoryPath" type="String"/>
                </params>
            </method>
            <javadoc line="314">
                Constructs a &lt;code&gt;JFileChooser&lt;/code&gt; using the given &lt;code&gt;File&lt;/code&gt;
                  as the path. Passing in a &lt;code&gt;null&lt;/code&gt; file
                  causes the file chooser to point to the user&apos;s default directory.
                  This default depends on the operating system. It is
                  typically the &quot;My Documents&quot; folder on Windows, and the user&apos;s
                  home directory on Unix.                
                <param>
                    currentDirectory  a &lt;code&gt;File&lt;/code&gt; object specifying
                      the path to a file or directory                    
                </param>
            </javadoc>
            <method name="JFileChooser" type="constructor" line="325">
                <params>
                    <param name="currentDirectory" type="File"/>
                </params>
            </method>
            <javadoc line="329">
                Constructs a &lt;code&gt;JFileChooser&lt;/code&gt; using the given
                  &lt;code&gt;FileSystemView&lt;/code&gt;.                
            </javadoc>
            <method name="JFileChooser" type="constructor" line="333">
                <params>
                    <param name="fsv" type="FileSystemView"/>
                </params>
            </method>
            <javadoc line="338">
                Constructs a &lt;code&gt;JFileChooser&lt;/code&gt; using the given current directory
                  and &lt;code&gt;FileSystemView&lt;/code&gt;.                
            </javadoc>
            <method name="JFileChooser" type="constructor" line="342">
                <params>
                    <param name="currentDirectory" type="File"/>
                    <param name="fsv" type="FileSystemView"/>
                </params>
            </method>
            <javadoc line="347">
                Constructs a &lt;code&gt;JFileChooser&lt;/code&gt; using the given current directory
                  path and &lt;code&gt;FileSystemView&lt;/code&gt;.                
            </javadoc>
            <method name="JFileChooser" type="constructor" line="351">
                <params>
                    <param name="currentDirectoryPath" type="String"/>
                    <param name="fsv" type="FileSystemView"/>
                </params>
                <scope line="353"/>
                <scope line="355"/>
            </method>
            <javadoc line="360">
                Performs common constructor initialization and setup.                
            </javadoc>
            <method name="setup" type="void" line="363">
                <params>
                    <param name="view" type="FileSystemView"/>
                </params>
                <scope line="366"/>
                <scope line="371"/>
            </method>
            <method name="installShowFilesListener" type="void" line="377">
                <comment line="379">
                    Track native setting for showing hidden files                    
                </comment>
                <declaration name="tk" type="Toolkit" line="379"/>
                <declaration name="showHiddenProperty" type="Object" line="380"/>
                <scope line="381"/>
            </method>
            <javadoc line="388">
                Sets the &lt;code&gt;dragEnabled&lt;/code&gt; property,
                  which must be &lt;code&gt;true&lt;/code&gt; to enable
                  automatic drag handling (the first part of drag and drop)
                  on this component.
                  The &lt;code&gt;transferHandler&lt;/code&gt; property needs to be set
                  to a non-&lt;code&gt;null&lt;/code&gt; value for the drag to do
                  anything.  The default value of the &lt;code&gt;dragEnabled&lt;/code&gt;
                  property
                  is &lt;code&gt;false&lt;/code&gt;.
                  &lt;p&gt;
                  When automatic drag handling is enabled,
                  most look and feels begin a drag-and-drop operation
                  whenever the user presses the mouse button over an item
                  and then moves the mouse a few pixels.
                  Setting this property to &lt;code&gt;true&lt;/code&gt;
                  can therefore have a subtle effect on
                  how selections behave.
                  &lt;p&gt;
                  Some look and feels might not support automatic drag and drop;
                  they will ignore this property.  You can work around such
                  look and feels by modifying the component
                  to directly call the &lt;code&gt;exportAsDrag&lt;/code&gt; method of a
                  &lt;code&gt;TransferHandler&lt;/code&gt;.                
                <param>
                    b the value to set the &lt;code&gt;dragEnabled&lt;/code&gt; property to                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and
                      &lt;code&gt;GraphicsEnvironment.isHeadless()&lt;/code&gt;
                      returns &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #getDragEnabled                    
                </see>
                <see>
                    #setTransferHandler                    
                </see>
                <see>
                    TransferHandler                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    description: determines whether automatic drag handling is enabled
                      bound: false                    
                </beaninfo>
            </javadoc>
            <method name="setDragEnabled" type="void" line="432">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="433"/>
            </method>
            <javadoc line="439">
                Gets the value of the &lt;code&gt;dragEnabled&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;dragEnabled&lt;/code&gt; property                    
                </return>
                <see>
                    #setDragEnabled                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDragEnabled" type="boolean" line="446"/>
            <javadoc line="454">
                Returns the selected file. This can be set either by the
                  programmer via &lt;code&gt;setSelectedFile&lt;/code&gt; or by a user action, such as
                  either typing the filename into the UI or selecting the
                  file from a list in the UI.                
                <see>
                    #setSelectedFile                    
                </see>
                <return>
                    the selected file                    
                </return>
            </javadoc>
            <method name="getSelectedFile" type="File" line="463"/>
            <javadoc line="467">
                Sets the selected file. If the file&apos;s parent directory is
                  not the current directory, changes the current directory
                  to be the file&apos;s parent directory.                
                <beaninfo>
                    preferred: true
                      bound: true                    
                </beaninfo>
                <see>
                    #getSelectedFile                    
                </see>
                <param>
                    file the selected file                    
                </param>
            </javadoc>
            <method name="setSelectedFile" type="void" line="480">
                <params>
                    <param name="file" type="File"/>
                </params>
                <declaration name="oldValue" type="File" line="481"/>
                <scope line="483">
                    <scope line="484"/>
                    <scope line="487"/>
                </scope>
            </method>
            <javadoc line="494">
                Returns a list of selected files if the file chooser is
                  set to allow multiple selection.                
            </javadoc>
            <method name="getSelectedFiles" type="File[]" line="498">
                <scope line="499"/>
                <scope line="501"/>
            </method>
            <javadoc line="506">
                Sets the list of selected files if the file chooser is
                  set to allow multiple selection.                
                <beaninfo>
                    bound: true
                      description: The list of selected files if the chooser is in multiple selection mode.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectedFiles" type="void" line="514">
                <params>
                    <param name="selectedFiles" type="File[]"/>
                </params>
                <declaration name="oldValue" type="File[]" line="515"/>
                <scope line="516"/>
                <scope line="520"/>
            </method>
            <javadoc line="527">
                Returns the current directory.                
                <return>
                    the current directory                    
                </return>
                <see>
                    #setCurrentDirectory                    
                </see>
            </javadoc>
            <method name="getCurrentDirectory" type="File" line="533"/>
            <javadoc line="537">
                Sets the current directory. Passing in &lt;code&gt;null&lt;/code&gt; sets the
                  file chooser to point to the user&apos;s default directory.
                  This default depends on the operating system. It is
                  typically the &quot;My Documents&quot; folder on Windows, and the user&apos;s
                  home directory on Unix.
                  If the file passed in as &lt;code&gt;currentDirectory&lt;/code&gt; is not a
                  directory, the parent of the file will be used as the currentDirectory.
                  If the parent is not traversable, then it will walk up the parent tree
                  until it finds a traversable directory, or hits the root of the
                  file system.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: The directory that the JFileChooser is showing files of.                    
                </beaninfo>
                <param>
                    dir the current directory to point to                    
                </param>
                <see>
                    #getCurrentDirectory                    
                </see>
            </javadoc>
            <method name="setCurrentDirectory" type="void" line="558">
                <params>
                    <param name="dir" type="File"/>
                </params>
                <comment line="569">
                                        
                </comment>
                <declaration name="oldValue" type="File" line="559"/>
                <scope line="561"/>
                <scope line="564"/>
                <scope line="567">
                    <scope line="569"/>
                </scope>
                <declaration name="prev" type="File" line="574"/>
                <scope line="575"/>
            </method>
            <javadoc line="584">
                Changes the directory to be set to the parent of the
                  current directory.                
                <see>
                    #getCurrentDirectory                    
                </see>
            </javadoc>
            <method name="changeToParentDirectory" type="void" line="590">
                <declaration name="oldValue" type="File" line="592"/>
            </method>
            <javadoc line="596">
                Tells the UI to rescan its files list from the current directory.                
            </javadoc>
            <method name="rescanCurrentDirectory" type="void" line="599"/>
            <javadoc line="603">
                Makes sure that the specified file is viewable, and
                  not hidden.                
                <param>
                    f  a File object                    
                </param>
            </javadoc>
            <method name="ensureFileIsVisible" type="void" line="609">
                <params>
                    <param name="f" type="File"/>
                </params>
            </method>
            <javadoc line="617">
                Pops up an &quot;Open File&quot; file chooser dialog. Note that the
                  text that appears in the approve button is determined by
                  the L&amp;F.                
                <param>
                    parent  the parent component of the dialog,
                      can be &lt;code&gt;null&lt;/code&gt;;
                      see &lt;code&gt;showDialog&lt;/code&gt; for details                    
                </param>
                <return>
                    the return state of the file chooser on popdown:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.CANCEL_OPTION
                      &lt;li&gt;JFileChooser.APPROVE_OPTION
                      &lt;li&gt;JFileChooser.ERROR_OPTION if an error occurs or the
                      dialog is dismissed
                      &lt;/ul&gt;                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #showDialog                    
                </see>
            </javadoc>
            <method name="showOpenDialog" type="int" line="637">
                <params>
                    <param name="parent" type="Component"/>
                </params>
            </method>
            <javadoc line="642">
                Pops up a &quot;Save File&quot; file chooser dialog. Note that the
                  text that appears in the approve button is determined by
                  the L&amp;F.                
                <param>
                    parent  the parent component of the dialog,
                      can be &lt;code&gt;null&lt;/code&gt;;
                      see &lt;code&gt;showDialog&lt;/code&gt; for details                    
                </param>
                <return>
                    the return state of the file chooser on popdown:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.CANCEL_OPTION
                      &lt;li&gt;JFileChooser.APPROVE_OPTION
                      &lt;li&gt;JFileChooser.ERROR_OPTION if an error occurs or the
                      dialog is dismissed
                      &lt;/ul&gt;                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <see>
                    #showDialog                    
                </see>
            </javadoc>
            <method name="showSaveDialog" type="int" line="662">
                <params>
                    <param name="parent" type="Component"/>
                </params>
            </method>
            <javadoc line="667">
                Pops a custom file chooser dialog with a custom approve button.
                  For example, the following code
                  pops up a file chooser with a &quot;Run Application&quot; button
                  (instead of the normal &quot;Save&quot; or &quot;Open&quot; button):
                  &lt;pre&gt;
                  filechooser.showDialog(parentFrame, &quot;Run Application&quot;);
                  &lt;/pre&gt;
                  Alternatively, the following code does the same thing:
                  &lt;pre&gt;
                  JFileChooser chooser = new JFileChooser(null);
                  chooser.setApproveButtonText(&quot;Run Application&quot;);
                  chooser.showDialog(parentFrame, null);
                  &lt;/pre&gt;
                  &lt;!--PENDING(jeff) - the following method should be added to the api:
                  showDialog(Component parent);--&gt;
                  &lt;!--PENDING(kwalrath) - should specify modality and what
                  &quot;depends&quot; means.--&gt;
                  &lt;p&gt;
                  The &lt;code&gt;parent&lt;/code&gt; argument determines two things:
                  the frame on which the open dialog depends and
                  the component whose position the look and feel
                  should consider when placing the dialog.  If the parent
                  is a &lt;code&gt;Frame&lt;/code&gt; object (such as a &lt;code&gt;JFrame&lt;/code&gt;)
                  then the dialog depends on the frame and
                  the look and feel positions the dialog
                  relative to the frame (for example, centered over the frame).
                  If the parent is a component, then the dialog
                  depends on the frame containing the component,
                  and is positioned relative to the component
                  (for example, centered over the component).
                  If the parent is &lt;code&gt;null&lt;/code&gt;, then the dialog depends on
                  no visible window, and it&apos;s placed in a
                  look-and-feel-dependent position
                  such as the center of the screen.                
                <param>
                    parent  the parent component of the dialog;
                      can be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <param>
                    approveButtonText the text of the &lt;code&gt;ApproveButton&lt;/code&gt;                    
                </param>
                <return>
                    the return state of the file chooser on popdown:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.CANCEL_OPTION
                      &lt;li&gt;JFileChooser.APPROVE_OPTION
                      &lt;li&gt;JFileChooser.ERROR_OPTION if an error occurs or the
                      dialog is dismissed
                      &lt;/ul&gt;                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showDialog" type="int" line="722">
                <params>
                    <param name="parent" type="Component"/>
                    <param name="approveButtonText" type="String"/>
                </params>
                <comment line="725">
                    Prevent to show second instance of dialog if the previous one still exists                    
                </comment>
                <comment line="745">
                    Remove all components from dialog. The MetalFileChooserUI.installUI() method (and other LAFs)
                     registers AWT listener for dialogs and produces memory leaks. It happens when
                     installUI invoked after the showDialog method.                    
                </comment>
                <scope line="723"/>
                <scope line="728"/>
                <anonymous_class line="733">
                    <method name="windowClosing" type="void" line="734">
                        <params>
                            <param name="e" type="WindowEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="753">
                Creates and returns a new &lt;code&gt;JDialog&lt;/code&gt; wrapping
                  &lt;code&gt;this&lt;/code&gt; centered on the &lt;code&gt;parent&lt;/code&gt;
                  in the &lt;code&gt;parent&lt;/code&gt;&apos;s frame.
                  This method can be overriden to further manipulate the dialog,
                  to disable resizing, set the location, etc. Example:
                  &lt;pre&gt;
                  class MyFileChooser extends JFileChooser {
                  protected JDialog createDialog(Component parent) throws HeadlessException {
                  JDialog dialog = super.createDialog(parent);
                  dialog.setLocation(300, 200);
                  dialog.setResizable(false);
                  return dialog;
                  }
                  }
                  &lt;/pre&gt;                
                <param>
                    parent  the parent component of the dialog;
                      can be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    a new &lt;code&gt;JDialog&lt;/code&gt; containing this instance                    
                </return>
                <exception>
                    HeadlessException if GraphicsEnvironment.isHeadless()
                      returns true.                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="createDialog" type="JDialog" line="778">
                <params>
                    <param name="parent" type="Component"/>
                </params>
                <declaration name="ui" type="FileChooserUI" line="779"/>
                <declaration name="title" type="String" line="780"/>
                <declaration name="dialog" type="JDialog" line="784"/>
                <declaration name="window" type="Window" line="785"/>
                <scope line="786"/>
                <scope line="788"/>
                <declaration name="contentPane" type="Container" line="793"/>
                <scope line="797">
                    <declaration name="supportsWindowDecorations" type="boolean" line="798"/>
                    <scope line="800"/>
                </scope>
            </method>
            <javadoc line="815">
                Returns the value of the &lt;code&gt;controlButtonsAreShown&lt;/code&gt;
                  property.                
                <return>
                    the value of the &lt;code&gt;controlButtonsAreShown&lt;/code&gt;
                      property                    
                </return>
                <see>
                    #setControlButtonsAreShown                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getControlButtonsAreShown" type="boolean" line="825"/>
            <javadoc line="830">
                Sets the property
                  that indicates whether the &lt;i&gt;approve&lt;/i&gt; and &lt;i&gt;cancel&lt;/i&gt;
                  buttons are shown in the file chooser.  This property
                  is &lt;code&gt;true&lt;/code&gt; by default.  Look and feels
                  that always show these buttons will ignore the value
                  of this property.
                  This method fires a property-changed event,
                  using the string value of
                  &lt;code&gt;CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY&lt;/code&gt;
                  as the name of the property.                
                <param>
                    b &lt;code&gt;false&lt;/code&gt; if control buttons should not be
                      shown; otherwise, &lt;code&gt;true&lt;/code&gt;                    
                </param>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets whether the approve &amp; cancel buttons are shown.                    
                </beaninfo>
                <see>
                    #getControlButtonsAreShown                    
                </see>
                <see>
                    #CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setControlButtonsAreShown" type="void" line="854">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="855"/>
                <declaration name="oldValue" type="boolean" line="858"/>
            </method>
            <javadoc line="863">
                Returns the type of this dialog.  The default is
                  &lt;code&gt;JFileChooser.OPEN_DIALOG&lt;/code&gt;.                
                <return>
                    the type of dialog to be displayed:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.OPEN_DIALOG
                      &lt;li&gt;JFileChooser.SAVE_DIALOG
                      &lt;li&gt;JFileChooser.CUSTOM_DIALOG
                      &lt;/ul&gt;                    
                </return>
                <see>
                    #setDialogType                    
                </see>
            </javadoc>
            <method name="getDialogType" type="int" line="876"/>
            <javadoc line="880">
                Sets the type of this dialog. Use &lt;code&gt;OPEN_DIALOG&lt;/code&gt; when you
                  want to bring up a file chooser that the user can use to open a file.
                  Likewise, use &lt;code&gt;SAVE_DIALOG&lt;/code&gt; for letting the user choose
                  a file for saving.
                  Use &lt;code&gt;CUSTOM_DIALOG&lt;/code&gt; when you want to use the file
                  chooser in a context other than &quot;Open&quot; or &quot;Save&quot;.
                  For instance, you might want to bring up a file chooser that allows
                  the user to choose a file to execute. Note that you normally would not
                  need to set the &lt;code&gt;JFileChooser&lt;/code&gt; to use
                  &lt;code&gt;CUSTOM_DIALOG&lt;/code&gt;
                  since a call to &lt;code&gt;setApproveButtonText&lt;/code&gt; does this for you.
                  The default dialog type is &lt;code&gt;JFileChooser.OPEN_DIALOG&lt;/code&gt;.                
                <param>
                    dialogType the type of dialog to be displayed:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.OPEN_DIALOG
                      &lt;li&gt;JFileChooser.SAVE_DIALOG
                      &lt;li&gt;JFileChooser.CUSTOM_DIALOG
                      &lt;/ul&gt;                    
                </param>
                <exception>
                    IllegalArgumentException if &lt;code&gt;dialogType&lt;/code&gt; is
                      not legal                    
                </exception>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: The type (open, save, custom) of the JFileChooser.
                      enum:
                      OPEN_DIALOG JFileChooser.OPEN_DIALOG
                      SAVE_DIALOG JFileChooser.SAVE_DIALOG
                      CUSTOM_DIALOG JFileChooser.CUSTOM_DIALOG                    
                </beaninfo>
                <see>
                    #getDialogType                    
                </see>
                <see>
                    #setApproveButtonText                    
                </see>
            </javadoc>
            <method name="setDialogType" type="void" line="916">
                <params>
                    <param name="dialogType" type="int"/>
                </params>
                <comment line="916">
                    PENDING(jeff) - fire button text change property                    
                </comment>
                <scope line="917"/>
                <scope line="920"/>
                <declaration name="oldValue" type="int" line="923"/>
                <scope line="925"/>
            </method>
            <javadoc line="931">
                Sets the string that goes in the &lt;code&gt;JFileChooser&lt;/code&gt; window&apos;s
                  title bar.                
                <param>
                    dialogTitle the new &lt;code&gt;String&lt;/code&gt; for the title bar                    
                </param>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: The title of the JFileChooser dialog window.                    
                </beaninfo>
                <see>
                    #getDialogTitle                    
                </see>
            </javadoc>
            <method name="setDialogTitle" type="void" line="945">
                <params>
                    <param name="dialogTitle" type="String"/>
                </params>
                <declaration name="oldValue" type="String" line="946"/>
                <scope line="948"/>
            </method>
            <javadoc line="954">
                Gets the string that goes in the &lt;code&gt;JFileChooser&lt;/code&gt;&apos;s titlebar.                
                <see>
                    #setDialogTitle                    
                </see>
            </javadoc>
            <method name="getDialogTitle" type="String" line="959"/>
            <javadoc line="969">
                Sets the tooltip text used in the &lt;code&gt;ApproveButton&lt;/code&gt;.
                  If &lt;code&gt;null&lt;/code&gt;, the UI object will determine the button&apos;s text.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: The tooltip text for the ApproveButton.                    
                </beaninfo>
                <param>
                    toolTipText the tooltip text for the approve button                    
                </param>
                <see>
                    #setApproveButtonText                    
                </see>
                <see>
                    #setDialogType                    
                </see>
                <see>
                    #showDialog                    
                </see>
            </javadoc>
            <method name="setApproveButtonToolTipText" type="void" line="983">
                <params>
                    <param name="toolTipText" type="String"/>
                </params>
                <scope line="984"/>
                <declaration name="oldValue" type="String" line="987"/>
            </method>
            <javadoc line="993">
                Returns the tooltip text used in the &lt;code&gt;ApproveButton&lt;/code&gt;.
                  If &lt;code&gt;null&lt;/code&gt;, the UI object will determine the button&apos;s text.                
                <return>
                    the tooltip text used for the approve button                    
                </return>
                <see>
                    #setApproveButtonText                    
                </see>
                <see>
                    #setDialogType                    
                </see>
                <see>
                    #showDialog                    
                </see>
            </javadoc>
            <method name="getApproveButtonToolTipText" type="String" line="1003"/>
            <javadoc line="1007">
                Returns the approve button&apos;s mnemonic.                
                <return>
                    an integer value for the mnemonic key                    
                </return>
                <see>
                    #setApproveButtonMnemonic                    
                </see>
            </javadoc>
            <method name="getApproveButtonMnemonic" type="int" line="1013"/>
            <javadoc line="1017">
                Sets the approve button&apos;s mnemonic using a numeric keycode.                
                <param>
                    mnemonic  an integer value for the mnemonic key                    
                </param>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: The mnemonic key accelerator for the ApproveButton.                    
                </beaninfo>
                <see>
                    #getApproveButtonMnemonic                    
                </see>
            </javadoc>
            <method name="setApproveButtonMnemonic" type="void" line="1029">
                <params>
                    <param name="mnemonic" type="int"/>
                </params>
                <scope line="1030"/>
                <declaration name="oldValue" type="int" line="1033"/>
            </method>
            <javadoc line="1038">
                Sets the approve button&apos;s mnemonic using a character.                
                <param>
                    mnemonic  a character value for the mnemonic key                    
                </param>
                <see>
                    #getApproveButtonMnemonic                    
                </see>
            </javadoc>
            <method name="setApproveButtonMnemonic" type="void" line="1044">
                <params>
                    <param name="mnemonic" type="char"/>
                </params>
                <declaration name="vk" type="int" line="1045"/>
                <scope line="1046"/>
            </method>
            <javadoc line="1053">
                Sets the text used in the &lt;code&gt;ApproveButton&lt;/code&gt; in the
                  &lt;code&gt;FileChooserUI&lt;/code&gt;.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: The text that goes in the ApproveButton.                    
                </beaninfo>
                <param>
                    approveButtonText the text used in the &lt;code&gt;ApproveButton&lt;/code&gt;                    
                </param>
                <see>
                    #getApproveButtonText                    
                </see>
                <see>
                    #setDialogType                    
                </see>
                <see>
                    #showDialog                    
                </see>
            </javadoc>
            <method name="setApproveButtonText" type="void" line="1069">
                <params>
                    <param name="approveButtonText" type="String"/>
                </params>
                <comment line="1069">
                    PENDING(jeff) - have ui set this on dialog type change                    
                </comment>
                <scope line="1070"/>
                <declaration name="oldValue" type="String" line="1073"/>
            </method>
            <javadoc line="1078">
                Returns the text used in the &lt;code&gt;ApproveButton&lt;/code&gt; in the
                  &lt;code&gt;FileChooserUI&lt;/code&gt;.
                  If &lt;code&gt;null&lt;/code&gt;, the UI object will determine the button&apos;s text.
                  Typically, this would be &quot;Open&quot; or &quot;Save&quot;.                
                <return>
                    the text used in the &lt;code&gt;ApproveButton&lt;/code&gt;                    
                </return>
                <see>
                    #setApproveButtonText                    
                </see>
                <see>
                    #setDialogType                    
                </see>
                <see>
                    #showDialog                    
                </see>
            </javadoc>
            <method name="getApproveButtonText" type="String" line="1091"/>
            <javadoc line="1095">
                Gets the list of user choosable file filters.                
                <return>
                    a &lt;code&gt;FileFilter&lt;/code&gt; array containing all the choosable
                      file filters                    
                </return>
                <see>
                    #addChoosableFileFilter                    
                </see>
                <see>
                    #removeChoosableFileFilter                    
                </see>
                <see>
                    #resetChoosableFileFilters                    
                </see>
            </javadoc>
            <method name="getChoosableFileFilters" type="FileFilter[]" line="1105">
                <declaration name="filterArray" type="FileFilter[]" line="1106"/>
            </method>
            <javadoc line="1111">
                Adds a filter to the list of user choosable file filters.
                  For information on setting the file selection mode, see{@link #setFileSelectionMode setFileSelectionMode}.                
                <param>
                    filter the &lt;code&gt;FileFilter&lt;/code&gt; to add to the choosable file
                      filter list                    
                </param>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Adds a filter to the list of user choosable file filters.                    
                </beaninfo>
                <see>
                    #getChoosableFileFilters                    
                </see>
                <see>
                    #removeChoosableFileFilter                    
                </see>
                <see>
                    #resetChoosableFileFilters                    
                </see>
                <see>
                    #setFileSelectionMode                    
                </see>
            </javadoc>
            <method name="addChoosableFileFilter" type="void" line="1129">
                <params>
                    <param name="filter" type="FileFilter"/>
                </params>
                <scope line="1130">
                    <declaration name="oldValue" type="FileFilter[]" line="1131"/>
                    <scope line="1134"/>
                </scope>
            </method>
            <javadoc line="1140">
                Removes a filter from the list of user choosable file filters. Returns
                  true if the file filter was removed.                
                <see>
                    #addChoosableFileFilter                    
                </see>
                <see>
                    #getChoosableFileFilters                    
                </see>
                <see>
                    #resetChoosableFileFilters                    
                </see>
            </javadoc>
            <method name="removeChoosableFileFilter" type="boolean" line="1148">
                <params>
                    <param name="f" type="FileFilter"/>
                </params>
                <scope line="1149">
                    <scope line="1150"/>
                    <declaration name="oldValue" type="FileFilter[]" line="1153"/>
                </scope>
                <scope line="1157"/>
            </method>
            <javadoc line="1162">
                Resets the choosable file filter list to its starting state. Normally,
                  this removes all added file filters while leaving the
                  &lt;code&gt;AcceptAll&lt;/code&gt; file filter.                
                <see>
                    #addChoosableFileFilter                    
                </see>
                <see>
                    #getChoosableFileFilters                    
                </see>
                <see>
                    #removeChoosableFileFilter                    
                </see>
            </javadoc>
            <method name="resetChoosableFileFilters" type="void" line="1171">
                <declaration name="oldValue" type="FileFilter[]" line="1172"/>
                <scope line="1175"/>
            </method>
            <javadoc line="1181">
                Returns the &lt;code&gt;AcceptAll&lt;/code&gt; file filter.
                  For example, on Microsoft Windows this would be All Files (.).                
            </javadoc>
            <method name="getAcceptAllFileFilter" type="FileFilter" line="1185">
                <declaration name="filter" type="FileFilter" line="1186"/>
                <scope line="1187"/>
            </method>
            <javadoc line="1193">
                Returns whether the &lt;code&gt;AcceptAll FileFilter&lt;/code&gt; is used.                
                <return>
                    true if the &lt;code&gt;AcceptAll FileFilter&lt;/code&gt; is used                    
                </return>
                <see>
                    #setAcceptAllFileFilterUsed                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="isAcceptAllFileFilterUsed" type="boolean" line="1199"/>
            <javadoc line="1203">
                Determines whether the &lt;code&gt;AcceptAll FileFilter&lt;/code&gt; is used
                  as an available choice in the choosable filter list.
                  If false, the &lt;code&gt;AcceptAll&lt;/code&gt; file filter is removed from
                  the list of available file filters.
                  If true, the &lt;code&gt;AcceptAll&lt;/code&gt; file filter will become the
                  the actively used file filter.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets whether the AcceptAll FileFilter is used as an available choice in the choosable filter list.                    
                </beaninfo>
                <see>
                    #isAcceptAllFileFilterUsed                    
                </see>
                <see>
                    #getAcceptAllFileFilter                    
                </see>
                <see>
                    #setFileFilter                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="setAcceptAllFileFilterUsed" type="void" line="1221">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1222"/>
                <scope line="1224"/>
                <scope line="1226"/>
            </method>
            <javadoc line="1233">
                Returns the accessory component.                
                <return>
                    this JFileChooser&apos;s accessory component, or null                    
                </return>
                <see>
                    #setAccessory                    
                </see>
            </javadoc>
            <method name="getAccessory" type="JComponent" line="1239"/>
            <javadoc line="1243">
                Sets the accessory component. An accessory is often used to show a
                  preview image of the selected file; however, it can be used for anything
                  that the programmer wishes, such as extra custom file chooser controls.
                  &lt;p&gt;
                  Note: if there was a previous accessory, you should unregister
                  any listeners that the accessory might have registered with the
                  file chooser.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets the accessory component on the JFileChooser.                    
                </beaninfo>
            </javadoc>
            <method name="setAccessory" type="void" line="1258">
                <params>
                    <param name="newAccessory" type="JComponent"/>
                </params>
                <declaration name="oldValue" type="JComponent" line="1259"/>
            </method>
            <javadoc line="1264">
                Sets the &lt;code&gt;JFileChooser&lt;/code&gt; to allow the user to just
                  select files, just select
                  directories, or select both files and directories.  The default is
                  &lt;code&gt;JFilesChooser.FILES_ONLY&lt;/code&gt;.                
                <param>
                    mode the type of files to be displayed:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.FILES_ONLY
                      &lt;li&gt;JFileChooser.DIRECTORIES_ONLY
                      &lt;li&gt;JFileChooser.FILES_AND_DIRECTORIES
                      &lt;/ul&gt;                    
                </param>
                <exception>
                    IllegalArgumentException  if &lt;code&gt;mode&lt;/code&gt; is an
                      illegal file selection mode                    
                </exception>
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets the types of files that the JFileChooser can choose.
                      enum: FILES_ONLY JFileChooser.FILES_ONLY
                      DIRECTORIES_ONLY JFileChooser.DIRECTORIES_ONLY
                      FILES_AND_DIRECTORIES JFileChooser.FILES_AND_DIRECTORIES                    
                </beaninfo>
                <see>
                    #getFileSelectionMode                    
                </see>
            </javadoc>
            <method name="setFileSelectionMode" type="void" line="1290">
                <params>
                    <param name="mode" type="int"/>
                </params>
                <scope line="1291"/>
                <scope line="1295">
                    <declaration name="oldValue" type="int" line="1296"/>
                </scope>
                <scope line="1299"/>
            </method>
            <javadoc line="1304">
                Returns the current file-selection mode.  The default is
                  &lt;code&gt;JFilesChooser.FILES_ONLY&lt;/code&gt;.                
                <return>
                    the type of files to be displayed, one of the following:
                      &lt;ul&gt;
                      &lt;li&gt;JFileChooser.FILES_ONLY
                      &lt;li&gt;JFileChooser.DIRECTORIES_ONLY
                      &lt;li&gt;JFileChooser.FILES_AND_DIRECTORIES
                      &lt;/ul&gt;                    
                </return>
                <see>
                    #setFileSelectionMode                    
                </see>
            </javadoc>
            <method name="getFileSelectionMode" type="int" line="1316"/>
            <javadoc line="1320">
                Convenience call that determines if files are selectable based on the
                  current file selection mode.                
                <see>
                    #setFileSelectionMode                    
                </see>
                <see>
                    #getFileSelectionMode                    
                </see>
            </javadoc>
            <method name="isFileSelectionEnabled" type="boolean" line="1327"/>
            <javadoc line="1331">
                Convenience call that determines if directories are selectable based
                  on the current file selection mode.                
                <see>
                    #setFileSelectionMode                    
                </see>
                <see>
                    #getFileSelectionMode                    
                </see>
            </javadoc>
            <method name="isDirectorySelectionEnabled" type="boolean" line="1338"/>
            <javadoc line="1342">
                Sets the file chooser to allow multiple file selections.                
                <param>
                    b true if multiple files may be selected                    
                </param>
                <beaninfo>
                    bound: true
                      description: Sets multiple file selection mode.                    
                </beaninfo>
                <see>
                    #isMultiSelectionEnabled                    
                </see>
            </javadoc>
            <method name="setMultiSelectionEnabled" type="void" line="1352">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <scope line="1353"/>
                <declaration name="oldValue" type="boolean" line="1356"/>
            </method>
            <javadoc line="1361">
                Returns true if multiple files can be selected.                
                <return>
                    true if multiple files can be selected                    
                </return>
                <see>
                    #setMultiSelectionEnabled                    
                </see>
            </javadoc>
            <method name="isMultiSelectionEnabled" type="boolean" line="1366"/>
            <javadoc line="1371">
                Returns true if hidden files are not shown in the file chooser;
                  otherwise, returns false.                
                <return>
                    the status of the file hiding property                    
                </return>
                <see>
                    #setFileHidingEnabled                    
                </see>
            </javadoc>
            <method name="isFileHidingEnabled" type="boolean" line="1378"/>
            <javadoc line="1382">
                Sets file hiding on or off. If true, hidden files are not shown
                  in the file chooser. The job of determining which files are
                  shown is done by the &lt;code&gt;FileView&lt;/code&gt;.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets file hiding on or off.                    
                </beaninfo>
                <param>
                    b the boolean value that determines whether file hiding is
                      turned on                    
                </param>
                <see>
                    #isFileHidingEnabled                    
                </see>
            </javadoc>
            <method name="setFileHidingEnabled" type="void" line="1396">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="1398">
                    Dump showFilesListener since we&apos;ll ignore it from now on                    
                </comment>
                <scope line="1398"/>
                <declaration name="oldValue" type="boolean" line="1402"/>
            </method>
            <javadoc line="1407">
                Sets the current file filter. The file filter is used by the
                  file chooser to filter out files from the user&apos;s view.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets the File Filter used to filter out files of type.                    
                </beaninfo>
                <param>
                    filter the new current file filter to use                    
                </param>
                <see>
                    #getFileFilter                    
                </see>
            </javadoc>
            <method name="setFileFilter" type="void" line="1419">
                <params>
                    <param name="filter" type="FileFilter"/>
                </params>
                <declaration name="oldValue" type="FileFilter" line="1420"/>
                <scope line="1422">
                    <scope line="1423">
                        <declaration name="fList" type="Vector&lt;File&gt;" line="1424"/>
                        <declaration name="failed" type="boolean" line="1425"/>
                        <scope line="1426">
                            <scope line="1427"/>
                            <scope line="1429"/>
                        </scope>
                        <scope line="1433"/>
                    </scope>
                    <scope line="1436"/>
                </scope>
            </method>
            <javadoc line="1444">
                Returns the currently selected file filter.                
                <return>
                    the current file filter                    
                </return>
                <see>
                    #setFileFilter                    
                </see>
                <see>
                    #addChoosableFileFilter                    
                </see>
            </javadoc>
            <method name="getFileFilter" type="FileFilter" line="1451"/>
            <javadoc line="1455">
                Sets the file view to used to retrieve UI information, such as
                  the icon that represents a file or the type description of a file.                
                <beaninfo>
                    preferred: true
                      bound: true
                      description: Sets the File View used to get file type information.                    
                </beaninfo>
                <see>
                    #getFileView                    
                </see>
            </javadoc>
            <method name="setFileView" type="void" line="1466">
                <params>
                    <param name="fileView" type="FileView"/>
                </params>
                <declaration name="oldValue" type="FileView" line="1467"/>
            </method>
            <javadoc line="1472">
                Returns the current file view.                
                <see>
                    #setFileView                    
                </see>
            </javadoc>
            <method name="getFileView" type="FileView" line="1477"/>
            <javadoc line="1490">
                Returns the filename.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt; containing the filename for
                      &lt;code&gt;f&lt;/code&gt;                    
                </return>
                <see>
                    FileView#getName                    
                </see>
            </javadoc>
            <method name="getName" type="String" line="1497">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="filename" type="String" line="1498"/>
                <scope line="1499">
                    <scope line="1500"/>
                    <declaration name="uiFileView" type="FileView" line="1504"/>
                    <scope line="1506"/>
                </scope>
            </method>
            <javadoc line="1513">
                Returns the file description.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt; containing the file description for
                      &lt;code&gt;f&lt;/code&gt;                    
                </return>
                <see>
                    FileView#getDescription                    
                </see>
            </javadoc>
            <method name="getDescription" type="String" line="1520">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="description" type="String" line="1521"/>
                <scope line="1522">
                    <scope line="1523"/>
                    <declaration name="uiFileView" type="FileView" line="1527"/>
                    <scope line="1529"/>
                </scope>
            </method>
            <javadoc line="1536">
                Returns the file type.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;String&lt;/code&gt; containing the file type description for
                      &lt;code&gt;f&lt;/code&gt;                    
                </return>
                <see>
                    FileView#getTypeDescription                    
                </see>
            </javadoc>
            <method name="getTypeDescription" type="String" line="1543">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="typeDescription" type="String" line="1544"/>
                <scope line="1545">
                    <scope line="1546"/>
                    <declaration name="uiFileView" type="FileView" line="1550"/>
                    <scope line="1552"/>
                </scope>
            </method>
            <javadoc line="1559">
                Returns the icon for this file or type of file, depending
                  on the system.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Icon&lt;/code&gt; for this file, or type of file                    
                </return>
                <see>
                    FileView#getIcon                    
                </see>
            </javadoc>
            <method name="getIcon" type="Icon" line="1566">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="icon" type="Icon" line="1567"/>
                <scope line="1568">
                    <scope line="1569"/>
                    <declaration name="uiFileView" type="FileView" line="1573"/>
                    <scope line="1575"/>
                </scope>
            </method>
            <javadoc line="1582">
                Returns true if the file (directory) can be visited.
                  Returns false if the directory cannot be traversed.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    true if the file/directory can be traversed, otherwise false                    
                </return>
                <see>
                    FileView#isTraversable                    
                </see>
            </javadoc>
            <method name="isTraversable" type="boolean" line="1589">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="traversable" type="Boolean" line="1590"/>
                <scope line="1591">
                    <scope line="1592"/>
                    <declaration name="uiFileView" type="FileView" line="1596"/>
                    <scope line="1598"/>
                    <scope line="1601"/>
                </scope>
            </method>
            <javadoc line="1608">
                Returns true if the file should be displayed.                
                <param>
                    f the &lt;code&gt;File&lt;/code&gt;                    
                </param>
                <return>
                    true if the file should be displayed, otherwise false                    
                </return>
                <see>
                    FileFilter#accept                    
                </see>
            </javadoc>
            <method name="accept" type="boolean" line="1614">
                <params>
                    <param name="f" type="File"/>
                </params>
                <declaration name="shown" type="boolean" line="1615"/>
                <scope line="1616"/>
            </method>
            <javadoc line="1622">
                Sets the file system view that the &lt;code&gt;JFileChooser&lt;/code&gt; uses for
                  accessing and creating file system resources, such as finding
                  the floppy drive and getting a list of root drives.                
                <param>
                    fsv  the new &lt;code&gt;FileSystemView&lt;/code&gt;                    
                </param>
                <beaninfo>
                    expert: true
                      bound: true
                      description: Sets the FileSytemView used to get filesystem information.                    
                </beaninfo>
                <see>
                    FileSystemView                    
                </see>
            </javadoc>
            <method name="setFileSystemView" type="void" line="1635">
                <params>
                    <param name="fsv" type="FileSystemView"/>
                </params>
                <declaration name="oldValue" type="FileSystemView" line="1636"/>
            </method>
            <javadoc line="1641">
                Returns the file system view.                
                <return>
                    the &lt;code&gt;FileSystemView&lt;/code&gt; object                    
                </return>
                <see>
                    #setFileSystemView                    
                </see>
            </javadoc>
            <method name="getFileSystemView" type="FileSystemView" line="1646"/>
            <javadoc line="1654">
                Called by the UI when the user hits the Approve button
                  (labeled &quot;Open&quot; or &quot;Save&quot;, by default). This can also be
                  called by the programmer.
                  This method causes an action event to fire
                  with the command string equal to
                  &lt;code&gt;APPROVE_SELECTION&lt;/code&gt;.                
                <see>
                    #APPROVE_SELECTION                    
                </see>
            </javadoc>
            <method name="approveSelection" type="void" line="1664">
                <scope line="1666"/>
            </method>
            <javadoc line="1672">
                Called by the UI when the user chooses the Cancel button.
                  This can also be called by the programmer.
                  This method causes an action event to fire
                  with the command string equal to
                  &lt;code&gt;CANCEL_SELECTION&lt;/code&gt;.                
                <see>
                    #CANCEL_SELECTION                    
                </see>
            </javadoc>
            <method name="cancelSelection" type="void" line="1681">
                <scope line="1683"/>
            </method>
            <javadoc line="1689">
                Adds an &lt;code&gt;ActionListener&lt;/code&gt; to the file chooser.                
                <param>
                    l  the listener to be added                    
                </param>
                <see>
                    #approveSelection                    
                </see>
                <see>
                    #cancelSelection                    
                </see>
            </javadoc>
            <method name="addActionListener" type="void" line="1697">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="1701">
                Removes an &lt;code&gt;ActionListener&lt;/code&gt; from the file chooser.                
                <param>
                    l  the listener to be removed                    
                </param>
                <see>
                    #addActionListener                    
                </see>
            </javadoc>
            <method name="removeActionListener" type="void" line="1708">
                <params>
                    <param name="l" type="ActionListener"/>
                </params>
            </method>
            <javadoc line="1712">
                Returns an array of all the action listeners
                  registered on this file chooser.                
                <return>
                    all of this file chooser&apos;s &lt;code&gt;ActionListener&lt;/code&gt;s
                      or an empty
                      array if no action listeners are currently registered                    
                </return>
                <see>
                    #addActionListener                    
                </see>
                <see>
                    #removeActionListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getActionListeners" type="ActionListener[]" line="1725"/>
            <javadoc line="1729">
                Notifies all listeners that have registered interest for
                  notification on this event type. The event instance
                  is lazily created using the &lt;code&gt;command&lt;/code&gt; parameter.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireActionPerformed" type="void" line="1736">
                <params>
                    <param name="command" type="String"/>
                </params>
                <comment line="1738">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="1749">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="1753">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="1738"/>
                <declaration name="mostRecentEventTime" type="long" line="1739"/>
                <declaration name="modifiers" type="int" line="1740"/>
                <declaration name="currentEvent" type="AWTEvent" line="1741"/>
                <scope line="1742"/>
                <scope line="1744"/>
                <declaration name="e" type="ActionEvent" line="1747"/>
                <scope line="1750">
                    <scope line="1751">
                        <scope line="1753"/>
                    </scope>
                </scope>
            </method>
            <class name="WeakPCL" line="1763">
                <comment line="916">
                    PENDING(jeff) - fire button text change property                    
                </comment>
                <comment line="1069">
                    PENDING(jeff) - have ui set this on dialog type change                    
                </comment>
                <implements interface="PropertyChangeListener"/>
                <declaration name="jfcRef" type="WeakReference&lt;JFileChooser&gt;" line="1764"/>
                <method name="WeakPCL" type="constructor" line="1766">
                    <params>
                        <param name="jfc" type="JFileChooser"/>
                    </params>
                </method>
                <method name="propertyChange" type="void" line="1769">
                    <params>
                        <param name="ev" type="PropertyChangeEvent"/>
                    </params>
                    <comment line="1774">
                        Our JFileChooser is no longer around, so we no longer need to
                         listen for PropertyChangeEvents.                        
                    </comment>
                    <declaration name="jfc" type="JFileChooser" line="1771"/>
                    <scope line="1772"/>
                    <scope line="1777">
                        <declaration name="oldValue" type="boolean" line="1778"/>
                    </scope>
                </method>
            </class>
            <javadoc line="1789">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="1794">
                <comment line="1801">
                    We were probably deserialized                    
                </comment>
                <scope line="1795"/>
                <declaration name="ui" type="FileChooserUI" line="1798"/>
                <scope line="1799"/>
                <scope line="1805"/>
            </method>
            <javadoc line="1810">
                Returns a string that specifies the name of the L&amp;F class
                  that renders this component.                
                <return>
                    the string &quot;FileChooserUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    expert: true
                      description: A string that specifies the name of the L&amp;F class.                    
                </beaninfo>
            </javadoc>
            <method name="getUIClassID" type="String" line="1821"/>
            <javadoc line="1825">
                Gets the UI object which implements the L&amp;F for this component.                
                <return>
                    the FileChooserUI object that implements the FileChooserUI L&amp;F                    
                </return>
            </javadoc>
            <method name="getUI" type="FileChooserUI" line="1830"/>
            <javadoc line="1834">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="readObject" type="void" line="1840">
                <params>
                    <param name="in" type="java.io.ObjectInputStream"/>
                </params>
            </method>
            <javadoc line="1845">
                See &lt;code&gt;readObject&lt;/code&gt; and &lt;code&gt;writeObject&lt;/code&gt; in
                  &lt;code&gt;JComponent&lt;/code&gt; for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="1850">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <comment line="1855">
                    The AcceptAllFileFilter is UI specific, it will be reset by
                    updateUI() after deserialization                    
                </comment>
                <comment line="1860">
                    The default FileSystemView is platform specific, it will be
                    reset by updateUI() after deserialization                    
                </comment>
                <declaration name="fsv" type="FileSystemView" line="1851"/>
                <scope line="1853"/>
                <scope line="1858"/>
                <scope line="1865"/>
                <scope line="1868"/>
                <scope line="1871">
                    <declaration name="count" type="byte" line="1872"/>
                    <scope line="1874"/>
                </scope>
            </method>
            <javadoc line="1881">
                Returns a string representation of this &lt;code&gt;JFileChooser&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JFileChooser&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="1891">
                <declaration name="approveButtonTextString" type="String" line="1892"/>
                <declaration name="dialogTitleString" type="String" line="1894"/>
                <declaration name="dialogTypeString" type="String" line="1896"/>
                <scope line="1897"/>
                <scope line="1899"/>
                <scope line="1901"/>
                <declaration name="returnValueString" type="String" line="1904"/>
                <scope line="1905"/>
                <scope line="1907"/>
                <scope line="1909"/>
                <declaration name="useFileHidingString" type="String" line="1912"/>
                <declaration name="fileSelectionModeString" type="String" line="1914"/>
                <scope line="1915"/>
                <scope line="1917"/>
                <scope line="1919"/>
                <declaration name="currentDirectoryString" type="String" line="1922"/>
                <declaration name="selectedFileString" type="String" line="1924"/>
            </method>
            <declaration name="accessibleContext" type="AccessibleContext" line="1942"/>
            <javadoc line="1944">
                Gets the AccessibleContext associated with this JFileChooser.
                  For file choosers, the AccessibleContext takes the form of an
                  AccessibleJFileChooser.
                  A new AccessibleJFileChooser instance is created if necessary.                
                <return>
                    an AccessibleJFileChooser that serves as the
                      AccessibleContext of this JFileChooser                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1953">
                <scope line="1954"/>
            </method>
            <class name="AccessibleJFileChooser" line="1960">
                <extends class="AccessibleJComponent"/>
                <comment line="916">
                    PENDING(jeff) - fire button text change property                    
                </comment>
                <comment line="1069">
                    PENDING(jeff) - have ui set this on dialog type change                    
                </comment>
                <javadoc line="1960">
                    This class implements accessibility support for the
                      &lt;code&gt;JFileChooser&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to file chooser user-interface
                      elements.                    
                </javadoc>
                <javadoc line="1968">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1975"/>
            </class>
        </class>
    </source>