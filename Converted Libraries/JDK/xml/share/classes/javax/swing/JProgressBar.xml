<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Color"/>
        <import package="java.awt.Graphics"/>
        <import package="java.text.Format"/>
        <import package="java.text.NumberFormat"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.event"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.plaf.ProgressBarUI"/>
        <class name="JProgressBar" line="44">
            <extends class="JComponent"/>
            <comment line="639">
                We pass each Change event to the listeners with the
                 the progress bar as the event source.
                 &lt;p&gt;
                 &lt;strong&gt;Warning:&lt;strong&gt;
                 Serialized objects of this class will not be compatible with
                 future Swing releases. The current serialization support is
                 appropriate for short term storage or RMI between applications running
                 the same version of Swing.  As of 1.4, support for long term storage
                 of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;font&gt;&lt;sup&gt;
                 has been added to the &lt;code&gt;java.beans&lt;code&gt; package.
                 Please see {@link java.beans.XMLEncoder}.                
            </comment>
            <comment line="791">
                                
            </comment>
            <comment line="1000">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="1126">
                AccessibleJProgressBar                
            </comment>
            <implements interface="SwingConstants"/>
            <implements interface="Accessible"/>
            <javadoc line="44">
                A component that visually displays the progress of some task.  As the task
                  progresses towards completion, the progress bar displays the
                  task&apos;s percentage of completion.
                  This percentage is typically represented visually by a rectangle which
                  starts out empty and gradually becomes filled in as the task progresses.
                  In addition, the progress bar can display a textual representation of this
                  percentage.
                  &lt;p&gt;{@code JProgressBar} uses a {@code BoundedRangeModel} as its data model,
                  with the {@code value} property representing the &quot;current&quot; state of the task,
                  and the {@code minimum} and {@code maximum} properties representing the
                  beginning and end points, respectively.
                  &lt;p&gt;
                  To indicate that a task of unknown length is executing,
                  you can put a progress bar into indeterminate mode.
                  While the bar is in indeterminate mode,
                  it animates constantly to show that work is occurring.
                  As soon as you can determine the task&apos;s length and amount of progress,
                  you should update the progress bar&apos;s value
                  and switch it back to determinate mode.
                  &lt;p&gt;
                  Here is an example of creating a progress bar,
                  where &lt;code&gt;task&lt;/code&gt; is an object (representing some piece of work)
                  which returns information about the progress of the task:
                  &lt;pre&gt;
                  progressBar = new JProgressBar(0, task.getLengthOfTask());
                  progressBar.setValue(0);
                  progressBar.setStringPainted(true);
                  &lt;/pre&gt;
                  Here is an example of querying the current state of the task, and using
                  the returned value to update the progress bar:
                  &lt;pre&gt;
                  progressBar.setValue(task.getCurrent());
                  &lt;/pre&gt;
                  Here is an example of putting a progress bar into
                  indeterminate mode,
                  and then switching back to determinate mode
                  once the length of the task is known:
                  &lt;pre&gt;
                  progressBar = new JProgressBar();
                  &lt;em&gt;...//when the task of (initially) unknown length begins:&lt;/em&gt;
                  progressBar.setIndeterminate(true);
                  &lt;em&gt;...//do some work; get length of task...&lt;/em&gt;
                  progressBar.setMaximum(newLength);
                  progressBar.setValue(newValue);
                  progressBar.setIndeterminate(false);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  For complete examples and further documentation see
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html&quot; target=&quot;_top&quot;&gt;How to Monitor Progress&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.plaf.basic.BasicProgressBarUI                    
                </see>
                <see>
                    javax.swing.BoundedRangeModel                    
                </see>
                <see>
                    javax.swing.SwingWorker                    
                </see>
                <beaninfo>
                    attribute: isContainer false
                      description: A component that displays an integer value.                    
                </beaninfo>
                <author>
                    Michael C. Albers                    
                </author>
                <author>
                    Kathy Walrath                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="134"/>
            <javadoc line="134">
                @see #getUIClassID                
            </javadoc>
            <declaration name="orientation" type="int" line="139"/>
            <javadoc line="139">
                Whether the progress bar is horizontal or vertical.
                  The default is &lt;code&gt;HORIZONTAL&lt;/code&gt;.                
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <declaration name="paintBorder" type="boolean" line="147"/>
            <javadoc line="147">
                Whether to display a border around the progress bar.
                  The default is &lt;code&gt;true&lt;/code&gt;.                
                <see>
                    #setBorderPainted                    
                </see>
            </javadoc>
            <declaration name="model" type="BoundedRangeModel" line="155"/>
            <javadoc line="155">
                The object that holds the data for the progress bar.                
                <see>
                    #setModel                    
                </see>
            </javadoc>
            <declaration name="progressString" type="String" line="162"/>
            <javadoc line="162">
                An optional string that can be displayed on the progress bar.
                  The default is &lt;code&gt;null&lt;/code&gt;. Setting this to a non-&lt;code&gt;null&lt;/code&gt;
                  value does not imply that the string will be displayed.
                  To display the string, {@code paintString} must be {@code true}.                
                <see>
                    #setString                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
            </javadoc>
            <declaration name="paintString" type="boolean" line="173"/>
            <javadoc line="173">
                Whether to display a string of text on the progress bar.
                  The default is &lt;code&gt;false&lt;/code&gt;.
                  Setting this to &lt;code&gt;true&lt;/code&gt; causes a textual
                  display of the progress to be rendered on the progress bar. If
                  the &lt;code&gt;progressString&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
                  the percentage of completion is displayed on the progress bar.
                  Otherwise, the &lt;code&gt;progressString&lt;/code&gt; is
                  rendered on the progress bar.                
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
            </javadoc>
            <declaration name="defaultMinimum" type="int" line="188"/>
            <javadoc line="188">
                The default minimum for a progress bar is 0.                
            </javadoc>
            <declaration name="defaultMaximum" type="int" line="192"/>
            <javadoc line="192">
                The default maximum for a progress bar is 100.                
            </javadoc>
            <declaration name="defaultOrientation" type="int" line="196"/>
            <javadoc line="196">
                The default orientation for a progress bar is &lt;code&gt;HORIZONTAL&lt;/code&gt;.                
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="201"/>
            <javadoc line="201">
                Only one &lt;code&gt;ChangeEvent&lt;/code&gt; is needed per instance since the
                  event&apos;s only interesting property is the immutable source, which
                  is the progress bar.
                  The event is lazily created the first time that an
                  event notification is fired.                
                <see>
                    #fireStateChanged                    
                </see>
            </javadoc>
            <declaration name="changeListener" type="ChangeListener" line="212"/>
            <javadoc line="212">
                Listens for change events sent by the progress bar&apos;s model,
                  redispatching them
                  to change-event listeners registered upon
                  this progress bar.                
                <see>
                    #createChangeListener                    
                </see>
            </javadoc>
            <declaration name="format" type="Format" line="222"/>
            <javadoc line="222">
                Format used when displaying percent complete.                
            </javadoc>
            <declaration name="indeterminate" type="boolean" line="227"/>
            <javadoc line="227">
                Whether the progress bar is indeterminate (&lt;code&gt;true&lt;/code&gt;) or
                  normal (&lt;code&gt;false&lt;/code&gt;); the default is &lt;code&gt;false&lt;/code&gt;.                
                <see>
                    #setIndeterminate                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <javadoc line="237">
                Creates a horizontal progress bar
                  that displays a border but no progress string.
                  The initial and minimum values are 0,
                  and the maximum is 100.                
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setBorderPainted                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
                <see>
                    #setIndeterminate                    
                </see>
            </javadoc>
            <method name="JProgressBar" type="constructor" line="250"/>
            <javadoc line="254">
                Creates a progress bar with the specified orientation,
                  which can be
                  either {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}.
                  By default, a border is painted but a progress string is not.
                  The initial and minimum values are 0,
                  and the maximum is 100.                
                <param>
                    orient  the desired orientation of the progress bar                    
                </param>
                <throws>
                    IllegalArgumentException if {@code orient} is an illegal value                    
                </throws>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setBorderPainted                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
                <see>
                    #setIndeterminate                    
                </see>
            </javadoc>
            <method name="JProgressBar" type="constructor" line="273">
                <params>
                    <param name="orient" type="int"/>
                </params>
            </method>
            <javadoc line="278">
                Creates a horizontal progress bar
                  with the specified minimum and maximum.
                  Sets the initial value of the progress bar to the specified minimum.
                  By default, a border is painted but a progress string is not.
                  &lt;p&gt;
                  The &lt;code&gt;BoundedRangeModel&lt;/code&gt; that holds the progress bar&apos;s data
                  handles any issues that may arise from improperly setting the
                  minimum, initial, and maximum values on the progress bar.
                  See the {@code BoundedRangeModel} documentation for details.                
                <param>
                    min  the minimum value of the progress bar                    
                </param>
                <param>
                    max  the maximum value of the progress bar                    
                </param>
                <see>
                    BoundedRangeModel                    
                </see>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setBorderPainted                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
                <see>
                    #setIndeterminate                    
                </see>
            </javadoc>
            <method name="JProgressBar" type="constructor" line="300">
                <params>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
            </method>
            <javadoc line="305">
                Creates a progress bar using the specified orientation,
                  minimum, and maximum.
                  By default, a border is painted but a progress string is not.
                  Sets the initial value of the progress bar to the specified minimum.
                  &lt;p&gt;
                  The &lt;code&gt;BoundedRangeModel&lt;/code&gt; that holds the progress bar&apos;s data
                  handles any issues that may arise from improperly setting the
                  minimum, initial, and maximum values on the progress bar.
                  See the {@code BoundedRangeModel} documentation for details.                
                <param>
                    orient  the desired orientation of the progress bar                    
                </param>
                <param>
                    min  the minimum value of the progress bar                    
                </param>
                <param>
                    max  the maximum value of the progress bar                    
                </param>
                <throws>
                    IllegalArgumentException if {@code orient} is an illegal value                    
                </throws>
                <see>
                    BoundedRangeModel                    
                </see>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setBorderPainted                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
                <see>
                    #setIndeterminate                    
                </see>
            </javadoc>
            <method name="JProgressBar" type="constructor" line="329">
                <params>
                    <param name="orient" type="int"/>
                    <param name="min" type="int"/>
                    <param name="max" type="int"/>
                </params>
                <comment line="331">
                    Creating the model this way is a bit simplistic, but
                      I believe that it is the the most common usage of this
                      component - it&apos;s what people will expect.                    
                </comment>
                <comment line="337">
                    documented with set/getOrientation()                    
                </comment>
                <comment line="338">
                    documented with is/setBorderPainted()                    
                </comment>
                <comment line="339">
                    see setStringPainted                    
                </comment>
                <comment line="340">
                    see getString                    
                </comment>
                <comment line="341">
                    see setIndeterminate                    
                </comment>
            </method>
            <javadoc line="344">
                Creates a horizontal progress bar
                  that uses the specified model
                  to hold the progress bar&apos;s data.
                  By default, a border is painted but a progress string is not.                
                <param>
                    newModel  the data model for the progress bar                    
                </param>
                <see>
                    #setOrientation                    
                </see>
                <see>
                    #setBorderPainted                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
                <see>
                    #setIndeterminate                    
                </see>
            </javadoc>
            <method name="JProgressBar" type="constructor" line="359">
                <params>
                    <param name="newModel" type="BoundedRangeModel"/>
                </params>
                <comment line="364">
                    see setOrientation()                    
                </comment>
                <comment line="365">
                    see setBorderPainted()                    
                </comment>
                <comment line="366">
                    see setStringPainted                    
                </comment>
                <comment line="367">
                    see getString                    
                </comment>
                <comment line="368">
                    see setIndeterminate                    
                </comment>
            </method>
            <javadoc line="371">
                Returns {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}, depending on the orientation
                  of the progress bar. The default orientation is{@code SwingConstants.HORIZONTAL}.                
                <return>
                    &lt;code&gt;HORIZONTAL&lt;/code&gt; or &lt;code&gt;VERTICAL&lt;/code&gt;                    
                </return>
                <see>
                    #setOrientation                    
                </see>
            </javadoc>
            <method name="getOrientation" type="int" line="380"/>
            <javadoc line="385">
                Sets the progress bar&apos;s orientation to &lt;code&gt;newOrientation&lt;/code&gt;,
                  which must be {@code SwingConstants.VERTICAL} or{@code SwingConstants.HORIZONTAL}. The default orientation
                  is {@code SwingConstants.HORIZONTAL}.                
                <param>
                    newOrientation  &lt;code&gt;HORIZONTAL&lt;/code&gt; or &lt;code&gt;VERTICAL&lt;/code&gt;                    
                </param>
                <exception>
                    IllegalArgumentException    if &lt;code&gt;newOrientation&lt;/code&gt;
                      is an illegal value                    
                </exception>
                <see>
                    #getOrientation                    
                </see>
                <beaninfo>
                    preferred: true
                      bound: true
                      attribute: visualUpdate true
                      description: Set the progress bar&apos;s orientation.                    
                </beaninfo>
            </javadoc>
            <method name="setOrientation" type="void" line="402">
                <params>
                    <param name="newOrientation" type="int"/>
                </params>
                <scope line="403">
                    <declaration name="oldOrientation" type="int" line="407"/>
                    <scope line="410"/>
                </scope>
            </method>
            <javadoc line="430">
                Returns the value of the &lt;code&gt;stringPainted&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;stringPainted&lt;/code&gt; property                    
                </return>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
            </javadoc>
            <method name="isStringPainted" type="boolean" line="437"/>
            <javadoc line="442">
                Sets the value of the &lt;code&gt;stringPainted&lt;/code&gt; property,
                  which determines whether the progress bar
                  should render a progress string.
                  The default is &lt;code&gt;false&lt;/code&gt;, meaning
                  no string is painted.
                  Some look and feels might not support progress strings
                  or might support them only when the progress bar is in determinate mode.                
                <param>
                    b       &lt;code&gt;true&lt;/code&gt; if the progress bar should render a string                    
                </param>
                <see>
                    #isStringPainted                    
                </see>
                <see>
                    #setString                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether the progress bar should render a string.                    
                </beaninfo>
            </javadoc>
            <method name="setStringPainted" type="void" line="459">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <comment line="461">
                    PENDING: specify that string not painted when in indeterminate mode?
                             or just leave that to the L&amp;F?                    
                </comment>
                <declaration name="oldValue" type="boolean" line="462"/>
                <scope line="465"/>
            </method>
            <javadoc line="472">
                Returns a {@code String} representation of the current progress.
                  By default, this returns a simple percentage {@code String} based on
                  the value returned from {@code getPercentComplete}.  An example
                  would be the &quot;42%&quot;.  You can change this by calling {@code setString}.                
                <return>
                    the value of the progress string, or a simple percentage string
                      if the progress string is {@code null}                    
                </return>
                <see>
                    #setString                    
                </see>
            </javadoc>
            <method name="getString" type="String" line="482">
                <scope line="483"/>
                <scope line="485">
                    <scope line="486"/>
                </scope>
            </method>
            <javadoc line="493">
                Sets the value of the progress string. By default,
                  this string is &lt;code&gt;null&lt;/code&gt;, implying the built-in behavior of
                  using a simple percent string.
                  If you have provided a custom progress string and want to revert to
                  the built-in behavior, set the string back to &lt;code&gt;null&lt;/code&gt;.
                  &lt;p&gt;
                  The progress string is painted only if
                  the &lt;code&gt;isStringPainted&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    s       the value of the progress string                    
                </param>
                <see>
                    #getString                    
                </see>
                <see>
                    #setStringPainted                    
                </see>
                <see>
                    #isStringPainted                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Specifies the progress string to paint                    
                </beaninfo>
            </javadoc>
            <method name="setString" type="void" line="512">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="oldValue" type="String" line="513"/>
                <scope line="516"/>
            </method>
            <javadoc line="521">
                Returns the percent complete for the progress bar.
                  Note that this number is between 0.0 and 1.0.                
                <return>
                    the percent complete for this progress bar                    
                </return>
            </javadoc>
            <method name="getPercentComplete" type="double" line="527">
                <declaration name="span" type="long" line="528"/>
                <declaration name="currentValue" type="double" line="529"/>
                <declaration name="pc" type="double" line="530"/>
            </method>
            <javadoc line="534">
                Returns the &lt;code&gt;borderPainted&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;borderPainted&lt;/code&gt; property                    
                </return>
                <see>
                    #setBorderPainted                    
                </see>
                <beaninfo>
                    description: Does the progress bar paint its border                    
                </beaninfo>
            </javadoc>
            <method name="isBorderPainted" type="boolean" line="542"/>
            <javadoc line="546">
                Sets the &lt;code&gt;borderPainted&lt;/code&gt; property, which is
                  &lt;code&gt;true&lt;/code&gt; if the progress bar should paint its border.
                  The default value for this property is &lt;code&gt;true&lt;/code&gt;.
                  Some look and feels might not implement painted borders;
                  they will ignore this property.                
                <param>
                    b       &lt;code&gt;true&lt;/code&gt; if the progress bar
                      should paint its border;
                      otherwise, &lt;code&gt;false&lt;/code&gt;                    
                </param>
                <see>
                    #isBorderPainted                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether the progress bar should paint its border.                    
                </beaninfo>
            </javadoc>
            <method name="setBorderPainted" type="void" line="562">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="563"/>
                <scope line="566"/>
            </method>
            <javadoc line="571">
                Paints the progress bar&apos;s border if the &lt;code&gt;borderPainted&lt;/code&gt;
                  property is &lt;code&gt;true&lt;/code&gt;.                
                <param>
                    g  the &lt;code&gt;Graphics&lt;/code&gt; context within which to paint the border                    
                </param>
                <see>
                    #paint                    
                </see>
                <see>
                    #setBorder                    
                </see>
                <see>
                    #isBorderPainted                    
                </see>
                <see>
                    #setBorderPainted                    
                </see>
            </javadoc>
            <method name="paintBorder" type="void" line="581">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="582"/>
            </method>
            <javadoc line="588">
                Returns the look-and-feel object that renders this component.                
                <return>
                    the &lt;code&gt;ProgressBarUI&lt;/code&gt; object that renders this component                    
                </return>
            </javadoc>
            <method name="getUI" type="ProgressBarUI" line="593"/>
            <javadoc line="597">
                Sets the look-and-feel object that renders this component.                
                <param>
                    ui  a &lt;code&gt;ProgressBarUI&lt;/code&gt; object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component&apos;s LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="608">
                <params>
                    <param name="ui" type="ProgressBarUI"/>
                </params>
            </method>
            <javadoc line="613">
                Resets the UI property to a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="618"/>
            <javadoc line="623">
                Returns the name of the look-and-feel class that renders this component.                
                <return>
                    the string &quot;ProgressBarUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    expert: true
                      description: A string that specifies the name of the look-and-feel class.                    
                </beaninfo>
            </javadoc>
            <method name="getUIClassID" type="String" line="633"/>
            <class name="ModelListener" line="650">
                <implements interface="ChangeListener"/>
                <implements interface="Serializable"/>
                <method name="stateChanged" type="void" line="651">
                    <params>
                        <param name="e" type="ChangeEvent"/>
                    </params>
                </method>
            </class>
            <javadoc line="656">
                Subclasses that want to handle change events
                  from the model differently
                  can override this to return
                  an instance of a custom &lt;code&gt;ChangeListener&lt;/code&gt; implementation.
                  The default {@code ChangeListener} simply calls the{@code fireStateChanged} method to forward {@code ChangeEvent}s
                  to the {@code ChangeListener}s that have been added directly to the
                  progress bar.                
                <see>
                    #changeListener                    
                </see>
                <see>
                    #fireStateChanged                    
                </see>
                <see>
                    javax.swing.event.ChangeListener                    
                </see>
                <see>
                    javax.swing.BoundedRangeModel                    
                </see>
            </javadoc>
            <method name="createChangeListener" type="ChangeListener" line="671"/>
            <javadoc line="675">
                Adds the specified &lt;code&gt;ChangeListener&lt;/code&gt; to the progress bar.                
                <param>
                    l the &lt;code&gt;ChangeListener&lt;/code&gt; to add                    
                </param>
            </javadoc>
            <method name="addChangeListener" type="void" line="680">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="684">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt; from the progress bar.                
                <param>
                    l the &lt;code&gt;ChangeListener&lt;/code&gt; to remove                    
                </param>
            </javadoc>
            <method name="removeChangeListener" type="void" line="689">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="693">
                Returns an array of all the &lt;code&gt;ChangeListener&lt;/code&gt;s added
                  to this progress bar with &lt;code&gt;addChangeListener&lt;/code&gt;.                
                <return>
                    all of the &lt;code&gt;ChangeListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="701"/>
            <javadoc line="705">
                Send a {@code ChangeEvent}, whose source is this {@code JProgressBar}, to
                  all {@code ChangeListener}s that have registered interest in{@code ChangeEvent}s.
                  This method is called each time a {@code ChangeEvent} is received from
                  the model.
                  &lt;p&gt;
                  The event instance is created if necessary, and stored in{@code changeEvent}.                
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="719">
                <comment line="721">
                    Guaranteed to return a non-null array                    
                </comment>
                <comment line="723">
                    Process the listeners last to first, notifying
                     those that are interested in this event                    
                </comment>
                <comment line="727">
                    Lazily create the event:                    
                </comment>
                <declaration name="listeners" type="Object[]" line="721"/>
                <scope line="724">
                    <scope line="725"/>
                </scope>
            </method>
            <javadoc line="734">
                Returns the data model used by this progress bar.                
                <return>
                    the &lt;code&gt;BoundedRangeModel&lt;/code&gt; currently in use                    
                </return>
                <see>
                    #setModel                    
                </see>
                <see>
                    BoundedRangeModel                    
                </see>
            </javadoc>
            <method name="getModel" type="BoundedRangeModel" line="741"/>
            <javadoc line="745">
                Sets the data model used by the &lt;code&gt;JProgressBar&lt;/code&gt;.
                  Note that the {@code BoundedRangeModel}&apos;s {@code extent} is not used,
                  and is set to {@code 0}.                
                <param>
                    newModel the &lt;code&gt;BoundedRangeModel&lt;/code&gt; to use                    
                </param>
                <beaninfo>
                    expert: true
                      description: The data model used by the JProgressBar.                    
                </beaninfo>
            </javadoc>
            <method name="setModel" type="void" line="756">
                <params>
                    <param name="newModel" type="BoundedRangeModel"/>
                </params>
                <comment line="758">
                    PENDING(???) setting the same model to multiple bars is broken; listeners                    
                </comment>
                <declaration name="oldModel" type="BoundedRangeModel" line="758"/>
                <scope line="760">
                    <scope line="761"/>
                    <scope line="768"/>
                    <scope line="773"/>
                    <scope line="782"/>
                </scope>
            </method>
            <javadoc line="792">
                Returns the progress bar&apos;s current {@code value}from the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.
                  The value is always between the
                  minimum and maximum values, inclusive.                
                <return>
                    the current value of the progress bar                    
                </return>
                <see>
                    #setValue                    
                </see>
                <see>
                    BoundedRangeModel#getValue                    
                </see>
            </javadoc>
            <method name="getValue" type="int" line="802"/>
            <javadoc line="804">
                Returns the progress bar&apos;s {@code minimum} value
                  from the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.                
                <return>
                    the progress bar&apos;s minimum value                    
                </return>
                <see>
                    #setMinimum                    
                </see>
                <see>
                    BoundedRangeModel#getMinimum                    
                </see>
            </javadoc>
            <method name="getMinimum" type="int" line="812"/>
            <javadoc line="814">
                Returns the progress bar&apos;s {@code maximum} value
                  from the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.                
                <return>
                    the progress bar&apos;s maximum value                    
                </return>
                <see>
                    #setMaximum                    
                </see>
                <see>
                    BoundedRangeModel#getMaximum                    
                </see>
            </javadoc>
            <method name="getMaximum" type="int" line="822"/>
            <javadoc line="824">
                Sets the progress bar&apos;s current value to {@code n}.  This method
                  forwards the new value to the model.
                  &lt;p&gt;
                  The data model (an instance of {@code BoundedRangeModel})
                  handles any mathematical
                  issues arising from assigning faulty values.  See the{@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the new value is different from the previous value,
                  all change listeners are notified.                
                <param>
                    n       the new value                    
                </param>
                <see>
                    #getValue                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#setValue                    
                </see>
                <beaninfo>
                    preferred: true
                      description: The progress bar&apos;s current value.                    
                </beaninfo>
            </javadoc>
            <method name="setValue" type="void" line="844">
                <params>
                    <param name="n" type="int"/>
                </params>
                <declaration name="brm" type="BoundedRangeModel" line="845"/>
                <declaration name="oldValue" type="int" line="846"/>
                <scope line="849"/>
            </method>
            <javadoc line="857">
                Sets the progress bar&apos;s minimum value
                  (stored in the progress bar&apos;s data model) to &lt;code&gt;n&lt;/code&gt;.
                  &lt;p&gt;
                  The data model (a &lt;code&gt;BoundedRangeModel&lt;/code&gt; instance)
                  handles any mathematical
                  issues arising from assigning faulty values.
                  See the {@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the minimum value is different from the previous minimum,
                  all change listeners are notified.                
                <param>
                    n       the new minimum                    
                </param>
                <see>
                    #getMinimum                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#setMinimum                    
                </see>
                <beaninfo>
                    preferred: true
                      description: The progress bar&apos;s minimum value.                    
                </beaninfo>
            </javadoc>
            <method name="setMinimum" type="void" line="877">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="879">
                Sets the progress bar&apos;s maximum value
                  (stored in the progress bar&apos;s data model) to &lt;code&gt;n&lt;/code&gt;.
                  &lt;p&gt;
                  The underlying &lt;code&gt;BoundedRangeModel&lt;/code&gt; handles any mathematical
                  issues arising from assigning faulty values.
                  See the {@code BoundedRangeModel} documentation for details.
                  &lt;p&gt;
                  If the maximum value is different from the previous maximum,
                  all change listeners are notified.                
                <param>
                    n       the new maximum                    
                </param>
                <see>
                    #getMaximum                    
                </see>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    BoundedRangeModel#setMaximum                    
                </see>
                <beaninfo>
                    preferred: true
                      description: The progress bar&apos;s maximum value.                    
                </beaninfo>
            </javadoc>
            <method name="setMaximum" type="void" line="898">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="900">
                Sets the &lt;code&gt;indeterminate&lt;/code&gt; property of the progress bar,
                  which determines whether the progress bar is in determinate
                  or indeterminate mode.
                  An indeterminate progress bar continuously displays animation
                  indicating that an operation of unknown length is occurring.
                  By default, this property is &lt;code&gt;false&lt;/code&gt;.
                  Some look and feels might not support indeterminate progress bars;
                  they will ignore this property.
                  &lt;p&gt;
                  See
                  &lt;a href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/progress.html&quot; target=&quot;_top&quot;&gt;How to Monitor Progress&lt;/a&gt;
                  for examples of using indeterminate progress bars.                
                <param>
                    newValue  &lt;code&gt;true&lt;/code&gt; if the progress bar
                      should change to indeterminate mode;
                      &lt;code&gt;false&lt;/code&gt; if it should revert to normal.                    
                </param>
                <see>
                    #isIndeterminate                    
                </see>
                <see>
                    javax.swing.plaf.basic.BasicProgressBarUI                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Set whether the progress bar is indeterminate (true)
                      or normal (false).                    
                </beaninfo>
            </javadoc>
            <method name="setIndeterminate" type="void" line="931">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="932"/>
            </method>
            <javadoc line="937">
                Returns the value of the &lt;code&gt;indeterminate&lt;/code&gt; property.                
                <return>
                    the value of the &lt;code&gt;indeterminate&lt;/code&gt; property                    
                </return>
                <see>
                    #setIndeterminate                    
                </see>
                <since>
                    1.4                    
                </since>
                <beaninfo>
                    description: Is the progress bar indeterminate (true)
                      or normal (false)?                    
                </beaninfo>
            </javadoc>
            <method name="isIndeterminate" type="boolean" line="949"/>
            <javadoc line="954">
                See readObject() and writeObject() in JComponent for more
                  information about serialization in Swing.                
            </javadoc>
            <method name="writeObject" type="void" line="958">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="960">
                    <declaration name="count" type="byte" line="961"/>
                    <scope line="963"/>
                </scope>
            </method>
            <javadoc line="970">
                Returns a string representation of this &lt;code&gt;JProgressBar&lt;/code&gt;.
                  This method is intended to be used only for debugging purposes. The
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JProgressBar&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="979">
                <declaration name="orientationString" type="String" line="980"/>
                <declaration name="paintBorderString" type="String" line="982"/>
                <declaration name="progressStringString" type="String" line="984"/>
                <declaration name="paintStringString" type="String" line="986"/>
                <declaration name="indeterminateString" type="String" line="988"/>
            </method>
            <javadoc line="1003">
                Gets the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this
                  &lt;code&gt;JProgressBar&lt;/code&gt;. For progress bars, the
                  &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJProgressBar&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJProgressBar&lt;/code&gt; instance is created if necessary.                
                <return>
                    an &lt;code&gt;AccessibleJProgressBar&lt;/code&gt; that serves as the
                      &lt;code&gt;AccessibleContext&lt;/code&gt; of this &lt;code&gt;JProgressBar&lt;/code&gt;                    
                </return>
                <beaninfo>
                    expert: true
                      description: The AccessibleContext associated with this ProgressBar.                    
                </beaninfo>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="1016">
                <scope line="1017"/>
            </method>
            <class name="AccessibleJProgressBar" line="1023">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleValue"/>
                <javadoc line="1023">
                    This class implements accessibility support for the
                      &lt;code&gt;JProgressBar&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to progress bar user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1041">
                    Gets the state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                    <see>
                        AccessibleState                        
                    </see>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="1048">
                    <declaration name="states" type="AccessibleStateSet" line="1049"/>
                    <scope line="1050"/>
                    <scope line="1053"/>
                    <scope line="1055"/>
                </method>
                <javadoc line="1061">
                    Gets the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="1067"/>
                <javadoc line="1071">
                    Gets the &lt;code&gt;AccessibleValue&lt;/code&gt; associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      returns this object, which is responsible for implementing the
                      &lt;code&gt;AccessibleValue&lt;/code&gt; interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleValue" type="AccessibleValue" line="1079"/>
                <javadoc line="1083">
                    Gets the accessible value of this object.                    
                    <return>
                        the current value of this object                        
                    </return>
                </javadoc>
                <method name="getCurrentAccessibleValue" type="Number" line="1088"/>
                <javadoc line="1092">
                    Sets the value of this object as a &lt;code&gt;Number&lt;/code&gt;.                    
                    <return>
                        &lt;code&gt;true&lt;/code&gt; if the value was set                        
                    </return>
                </javadoc>
                <method name="setCurrentAccessibleValue" type="boolean" line="1097">
                    <params>
                        <param name="n" type="Number"/>
                    </params>
                    <comment line="1099">
                        TIGER- 4422535                        
                    </comment>
                    <scope line="1099"/>
                </method>
                <javadoc line="1106">
                    Gets the minimum accessible value of this object.                    
                    <return>
                        the minimum value of this object                        
                    </return>
                </javadoc>
                <method name="getMinimumAccessibleValue" type="Number" line="1111"/>
                <javadoc line="1115">
                    Gets the maximum accessible value of this object.                    
                    <return>
                        the maximum value of this object                        
                    </return>
                </javadoc>
                <method name="getMaximumAccessibleValue" type="Number" line="1120">
                    <comment line="1122">
                        TIGER - 4422362                        
                    </comment>
                </method>
            </class>
        </class>
    </source>