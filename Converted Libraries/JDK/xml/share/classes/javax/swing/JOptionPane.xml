<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.BorderLayout"/>
        <import package="java.awt.Component"/>
        <import package="java.awt.Container"/>
        <import package="java.awt.Dialog"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.KeyboardFocusManager"/>
        <import package="java.awt.Frame"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.HeadlessException"/>
        <import package="java.awt.Toolkit"/>
        <import package="java.awt.Window"/>
        <import package="java.beans.PropertyChangeEvent"/>
        <import package="java.beans.PropertyChangeListener"/>
        <import package="java.awt.event.WindowListener"/>
        <import package="java.awt.event.WindowAdapter"/>
        <import package="java.awt.event.WindowEvent"/>
        <import package="java.awt.event.ComponentAdapter"/>
        <import package="java.awt.event.ComponentEvent"/>
        <import package="java.io.IOException"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect.Method"/>
        <import package="java.lang.reflect.InvocationTargetException"/>
        <import package="java.security.AccessController"/>
        <import package="java.security.PrivilegedAction"/>
        <import package="java.util.Vector"/>
        <import package="javax.swing.plaf.OptionPaneUI"/>
        <import package="javax.swing.event.InternalFrameEvent"/>
        <import package="javax.swing.event.InternalFrameAdapter"/>
        <import package="javax.accessibility"/>
        <import package="javax.swing.ClientPropertyKey.PopupFactory_FORCE_HEAVYWEIGHT_POPUP"/>
        <class name="JOptionPane" line="34">
            <extends class="JComponent"/>
            <implements interface="Accessible"/>
            <javadoc line="34">
                &lt;code&gt;JOptionPane&lt;/code&gt; makes it easy to pop up a standard dialog box that
                  prompts users for a value or informs them of something.
                  For information about using &lt;code&gt;JOptionPane&lt;/code&gt;, see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/dialog.html&quot;&gt;How to Make Dialogs&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.
                  &lt;p&gt;
                  While the &lt;code&gt;JOptionPane&lt;/code&gt;
                  class may appear complex because of the large number of methods, almost
                  all uses of this class are one-line calls to one of the static
                  &lt;code&gt;showXxxDialog&lt;/code&gt; methods shown below:
                  &lt;blockquote&gt;
                  &lt;table border=1 summary=&quot;Common JOptionPane method names and their descriptions&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Method Name&lt;/th&gt;
                  &lt;th&gt;Description&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;showConfirmDialog&lt;/td&gt;
                  &lt;td&gt;Asks a confirming question, like yes/no/cancel.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;showInputDialog&lt;/td&gt;
                  &lt;td&gt;Prompt for some input.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;showMessageDialog&lt;/td&gt;
                  &lt;td&gt;Tell the user about something that has happened.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;showOptionDialog&lt;/td&gt;
                  &lt;td&gt;The Grand Unification of the above three.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;/blockquote&gt;
                  Each of these methods also comes in a &lt;code&gt;showInternalXXX&lt;/code&gt;
                  flavor, which uses an internal frame to hold the dialog box (see{@link JInternalFrame}).
                  Multiple convenience methods have also been defined -- overloaded
                  versions of the basic methods that use different parameter lists.
                  &lt;p&gt;
                  All dialogs are modal. Each &lt;code&gt;showXxxDialog&lt;/code&gt; method blocks
                  the caller until the user&apos;s interaction is complete.
                  &lt;p&gt;
                  &lt;table cellspacing=6 cellpadding=4 border=0 align=right summary=&quot;layout&quot;&gt;
                  &lt;tr&gt;
                  &lt;td bgcolor=#FFe0d0 rowspan=2&gt;icon&lt;/td&gt;
                  &lt;td bgcolor=#FFe0d0&gt;message&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td bgcolor=#FFe0d0&gt;input value&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td bgcolor=#FFe0d0 colspan=2&gt;option buttons&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;/table&gt;
                  The basic appearance of one of these dialog boxes is generally
                  similar to the picture at the right, although the various
                  look-and-feels are
                  ultimately responsible for the final result.  In particular, the
                  look-and-feels will adjust the layout to accommodate the option pane&apos;s
                  &lt;code&gt;ComponentOrientation&lt;/code&gt; property.
                  &lt;br clear=all&gt;
                  &lt;p&gt;
                  &lt;b&gt;Parameters:&lt;/b&gt;&lt;br&gt;
                  The parameters to these methods follow consistent patterns:
                  &lt;blockquote&gt;
                  &lt;dl compact&gt;
                  &lt;dt&gt;parentComponent&lt;dd&gt;
                  Defines the &lt;code&gt;Component&lt;/code&gt; that is to be the parent of this
                  dialog box.
                  It is used in two ways: the &lt;code&gt;Frame&lt;/code&gt; that contains
                  it is used as the &lt;code&gt;Frame&lt;/code&gt;
                  parent for the dialog box, and its screen coordinates are used in
                  the placement of the dialog box. In general, the dialog box is placed
                  just below the component. This parameter may be &lt;code&gt;null&lt;/code&gt;,
                  in which case a default &lt;code&gt;Frame&lt;/code&gt; is used as the parent,
                  and the dialog will be
                  centered on the screen (depending on the L&amp;F).
                  &lt;dt&gt;&lt;a name=message&gt;message&lt;/a&gt;&lt;dd&gt;
                  A descriptive message to be placed in the dialog box.
                  In the most common usage, message is just a &lt;code&gt;String&lt;/code&gt; or
                  &lt;code&gt;String&lt;/code&gt; constant.
                  However, the type of this parameter is actually &lt;code&gt;Object&lt;/code&gt;. Its
                  interpretation depends on its type:
                  &lt;dl compact&gt;
                  &lt;dt&gt;Object[]&lt;dd&gt;An array of objects is interpreted as a series of
                  messages (one per object) arranged in a vertical stack.
                  The interpretation is recursive -- each object in the
                  array is interpreted according to its type.
                  &lt;dt&gt;Component&lt;dd&gt;The &lt;code&gt;Component&lt;/code&gt; is displayed in the dialog.
                  &lt;dt&gt;Icon&lt;dd&gt;The &lt;code&gt;Icon&lt;/code&gt; is wrapped in a &lt;code&gt;JLabel&lt;/code&gt;
                  and displayed in the dialog.
                  &lt;dt&gt;others&lt;dd&gt;The object is converted to a &lt;code&gt;String&lt;/code&gt; by calling
                  its &lt;code&gt;toString&lt;/code&gt; method. The result is wrapped in a
                  &lt;code&gt;JLabel&lt;/code&gt; and displayed.
                  &lt;/dl&gt;
                  &lt;dt&gt;messageType&lt;dd&gt;Defines the style of the message. The Look and Feel
                  manager may lay out the dialog differently depending on this value, and
                  will often provide a default icon. The possible values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;ERROR_MESSAGE&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;WARNING_MESSAGE&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;dt&gt;optionType&lt;dd&gt;Defines the set of option buttons that appear at
                  the bottom of the dialog box:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;DEFAULT_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;YES_NO_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;
                  &lt;/ul&gt;
                  You aren&apos;t limited to this set of option buttons.  You can provide any
                  buttons you want using the options parameter.
                  &lt;dt&gt;options&lt;dd&gt;A more detailed description of the set of option buttons
                  that will appear at the bottom of the dialog box.
                  The usual value for the options parameter is an array of
                  &lt;code&gt;String&lt;/code&gt;s. But
                  the parameter type is an array of &lt;code&gt;Objects&lt;/code&gt;.
                  A button is created for each object depending on its type:
                  &lt;dl compact&gt;
                  &lt;dt&gt;Component&lt;dd&gt;The component is added to the button row directly.
                  &lt;dt&gt;Icon&lt;dd&gt;A &lt;code&gt;JButton&lt;/code&gt; is created with this as its label.
                  &lt;dt&gt;other&lt;dd&gt;The &lt;code&gt;Object&lt;/code&gt; is converted to a string using its
                  &lt;code&gt;toString&lt;/code&gt; method and the result is used to
                  label a &lt;code&gt;JButton&lt;/code&gt;.
                  &lt;/dl&gt;
                  &lt;dt&gt;icon&lt;dd&gt;A decorative icon to be placed in the dialog box. A default
                  value for this is determined by the &lt;code&gt;messageType&lt;/code&gt; parameter.
                  &lt;dt&gt;title&lt;dd&gt;The title for the dialog box.
                  &lt;dt&gt;initialValue&lt;dd&gt;The default selection (input value).
                  &lt;/dl&gt;
                  &lt;/blockquote&gt;
                  &lt;p&gt;
                  When the selection is changed, &lt;code&gt;setValue&lt;/code&gt; is invoked,
                  which generates a &lt;code&gt;PropertyChangeEvent&lt;/code&gt;.
                  &lt;p&gt;
                  If a &lt;code&gt;JOptionPane&lt;/code&gt; has configured to all input
                  &lt;code&gt;setWantsInput&lt;/code&gt;
                  the bound property &lt;code&gt;JOptionPane.INPUT_VALUE_PROPERTY&lt;/code&gt;
                  can also be listened
                  to, to determine when the user has input or selected a value.
                  &lt;p&gt;
                  When one of the &lt;code&gt;showXxxDialog&lt;/code&gt; methods returns an integer,
                  the possible values are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;YES_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;NO_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;CANCEL_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;OK_OPTION&lt;/code&gt;
                  &lt;li&gt;&lt;code&gt;CLOSED_OPTION&lt;/code&gt;
                  &lt;/ul&gt;
                  &lt;b&gt;Examples:&lt;/b&gt;
                  &lt;dl&gt;
                  &lt;dt&gt;Show an error dialog that displays the message, &apos;alert&apos;:
                  &lt;dd&gt;&lt;code&gt;
                  JOptionPane.showMessageDialog(null, &quot;alert&quot;, &quot;alert&quot;, JOptionPane.ERROR_MESSAGE);
                  &lt;/code&gt;&lt;p&gt;
                  &lt;dt&gt;Show an internal information dialog with the message, &apos;information&apos;:
                  &lt;dd&gt;&lt;code&gt;
                  JOptionPane.showInternalMessageDialog(frame, &quot;information&quot;,&lt;br&gt;
                  &lt;ul&gt;&lt;ul&gt;&quot;information&quot;, JOptionPane.INFORMATION_MESSAGE);&lt;/ul&gt;&lt;/ul&gt;
                  &lt;/code&gt;&lt;p&gt;
                  &lt;dt&gt;Show an information panel with the options yes/no and message &apos;choose one&apos;:
                  &lt;dd&gt;&lt;code&gt;JOptionPane.showConfirmDialog(null,
                  &lt;ul&gt;&lt;ul&gt;&quot;choose one&quot;, &quot;choose one&quot;, JOptionPane.YES_NO_OPTION);&lt;/ul&gt;&lt;/ul&gt;
                  &lt;/code&gt;&lt;p&gt;
                  &lt;dt&gt;Show an internal information dialog with the options yes/no/cancel and
                  message &apos;please choose one&apos; and title information:
                  &lt;dd&gt;&lt;code&gt;JOptionPane.showInternalConfirmDialog(frame,
                  &lt;ul&gt;&lt;ul&gt;&quot;please choose one&quot;, &quot;information&quot;,&lt;/ul&gt;&lt;/ul&gt;
                  &lt;ul&gt;&lt;ul&gt;JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);&lt;/ul&gt;&lt;/ul&gt;
                  &lt;/code&gt;&lt;p&gt;
                  &lt;dt&gt;Show a warning dialog with the options OK, CANCEL, title &apos;Warning&apos;, and
                  message &apos;Click OK to continue&apos;:
                  &lt;dd&gt;&lt;code&gt;
                  Object[] options = { &quot;OK&quot;, &quot;CANCEL&quot; };&lt;br&gt;
                  JOptionPane.showOptionDialog(null, &quot;Click OK to continue&quot;, &quot;Warning&quot;,
                  &lt;ul&gt;&lt;ul&gt;JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,&lt;/ul&gt;&lt;/ul&gt;
                  &lt;ul&gt;&lt;ul&gt;null, options, options[0]);&lt;/ul&gt;&lt;/ul&gt;
                  &lt;/code&gt;&lt;p&gt;
                  &lt;dt&gt;Show a dialog asking the user to type in a String:
                  &lt;dd&gt;&lt;code&gt;
                  String inputValue = JOptionPane.showInputDialog(&quot;Please input a value&quot;);
                  &lt;/code&gt;&lt;p&gt;
                  &lt;dt&gt;Show a dialog asking the user to select a String:
                  &lt;dd&gt;&lt;code&gt;
                  Object[] possibleValues = { &quot;First&quot;, &quot;Second&quot;, &quot;Third&quot; };&lt;br&gt;
                  Object selectedValue = JOptionPane.showInputDialog(null,
                  &lt;ul&gt;&lt;ul&gt;&quot;Choose one&quot;, &quot;Input&quot;,&lt;/ul&gt;&lt;/ul&gt;
                  &lt;ul&gt;&lt;ul&gt;JOptionPane.INFORMATION_MESSAGE, null,&lt;/ul&gt;&lt;/ul&gt;
                  &lt;ul&gt;&lt;ul&gt;possibleValues, possibleValues[0]);&lt;/ul&gt;&lt;/ul&gt;
                  &lt;/code&gt;&lt;p&gt;
                  &lt;/dl&gt;
                  &lt;b&gt;Direct Use:&lt;/b&gt;&lt;br&gt;
                  To create and use an &lt;code&gt;JOptionPane&lt;/code&gt; directly, the
                  standard pattern is roughly as follows:
                  &lt;pre&gt;
                  JOptionPane pane = new JOptionPane(&lt;i&gt;arguments&lt;/i&gt;);
                  pane.set&lt;i&gt;.Xxxx(...); // Configure&lt;/i&gt;
                  JDialog dialog = pane.createDialog(&lt;i&gt;parentComponent, title&lt;/i&gt;);
                  dialog.show();
                  Object selectedValue = pane.getValue();
                  if(selectedValue == null)
                  return CLOSED_OPTION;
                  &lt;i&gt;//If there is &lt;b&gt;not&lt;/b&gt; an array of option buttons:&lt;/i&gt;
                  if(options == null) {
                  if(selectedValue instanceof Integer)
                  return ((Integer)selectedValue).intValue();
                  return CLOSED_OPTION;
                  }
                  &lt;i&gt;//If there is an array of option buttons:&lt;/i&gt;
                  for(int counter = 0, maxCounter = options.length;
                  counter &lt; maxCounter; counter++) {
                  if(options[counter].equals(selectedValue))
                  return counter;
                  }
                  return CLOSED_OPTION;
                  &lt;/pre&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    JInternalFrame                    
                </see>
                <beaninfoattribute>
                    : isContainer true
                      description: A component which implements standard dialog box controls.                    
                </beaninfoattribute>
                <author>
                    James Gosling                    
                </author>
                <author>
                    Scott Violet                    
                </author>
            </javadoc>
            <declaration name="uiClassID" type="String" line="277"/>
            <javadoc line="277">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="UNINITIALIZED_VALUE" type="Object" line="282"/>
            <javadoc line="282">
                Indicates that the user has not yet selected a value.                
            </javadoc>
            <declaration name="DEFAULT_OPTION" type="int" line="286"/>
            <javadoc line="286">
                Type meaning Look and Feel should not supply any options -- only
                  use the options from the &lt;code&gt;JOptionPane&lt;/code&gt;.                
            </javadoc>
            <declaration name="YES_NO_OPTION" type="int" line="291"/>
            <javadoc line="291">
                Type used for &lt;code&gt;showConfirmDialog&lt;/code&gt;.                
            </javadoc>
            <declaration name="YES_NO_CANCEL_OPTION" type="int" line="295"/>
            <javadoc line="295">
                Type used for &lt;code&gt;showConfirmDialog&lt;/code&gt;.                
            </javadoc>
            <declaration name="OK_CANCEL_OPTION" type="int" line="299"/>
            <javadoc line="299">
                Type used for &lt;code&gt;showConfirmDialog&lt;/code&gt;.                
            </javadoc>
            <declaration name="YES_OPTION" type="int" line="303"/>
            <javadoc line="303">
                Return value from class method if YES is chosen.                
            </javadoc>
            <declaration name="NO_OPTION" type="int" line="307"/>
            <javadoc line="307">
                Return value from class method if NO is chosen.                
            </javadoc>
            <declaration name="CANCEL_OPTION" type="int" line="311"/>
            <javadoc line="311">
                Return value from class method if CANCEL is chosen.                
            </javadoc>
            <declaration name="OK_OPTION" type="int" line="315"/>
            <javadoc line="315">
                Return value form class method if OK is chosen.                
            </javadoc>
            <declaration name="CLOSED_OPTION" type="int" line="319"/>
            <javadoc line="319">
                Return value from class method if user closes window without selecting
                  anything, more than likely this should be treated as either a
                  &lt;code&gt;CANCEL_OPTION&lt;/code&gt; or &lt;code&gt;NO_OPTION&lt;/code&gt;.                
            </javadoc>
            <declaration name="ERROR_MESSAGE" type="int" line="325"/>
            <javadoc line="325">
                Used for error messages.                
            </javadoc>
            <declaration name="INFORMATION_MESSAGE" type="int" line="329"/>
            <javadoc line="329">
                Used for information messages.                
            </javadoc>
            <declaration name="WARNING_MESSAGE" type="int" line="333"/>
            <javadoc line="333">
                Used for warning messages.                
            </javadoc>
            <declaration name="QUESTION_MESSAGE" type="int" line="337"/>
            <javadoc line="337">
                Used for questions.                
            </javadoc>
            <declaration name="PLAIN_MESSAGE" type="int" line="341"/>
            <javadoc line="341">
                No icon is used.                
            </javadoc>
            <declaration name="ICON_PROPERTY" type="String" line="345"/>
            <javadoc line="345">
                Bound property name for &lt;code&gt;icon&lt;/code&gt;.                
            </javadoc>
            <declaration name="MESSAGE_PROPERTY" type="String" line="349"/>
            <javadoc line="349">
                Bound property name for &lt;code&gt;message&lt;/code&gt;.                
            </javadoc>
            <declaration name="VALUE_PROPERTY" type="String" line="353"/>
            <javadoc line="353">
                Bound property name for &lt;code&gt;value&lt;/code&gt;.                
            </javadoc>
            <declaration name="OPTIONS_PROPERTY" type="String" line="357"/>
            <javadoc line="357">
                Bound property name for &lt;code&gt;option&lt;/code&gt;.                
            </javadoc>
            <declaration name="INITIAL_VALUE_PROPERTY" type="String" line="361"/>
            <javadoc line="361">
                Bound property name for &lt;code&gt;initialValue&lt;/code&gt;.                
            </javadoc>
            <declaration name="MESSAGE_TYPE_PROPERTY" type="String" line="365"/>
            <javadoc line="365">
                Bound property name for &lt;code&gt;type&lt;/code&gt;.                
            </javadoc>
            <declaration name="OPTION_TYPE_PROPERTY" type="String" line="369"/>
            <javadoc line="369">
                Bound property name for &lt;code&gt;optionType&lt;/code&gt;.                
            </javadoc>
            <declaration name="SELECTION_VALUES_PROPERTY" type="String" line="373"/>
            <javadoc line="373">
                Bound property name for &lt;code&gt;selectionValues&lt;/code&gt;.                
            </javadoc>
            <declaration name="INITIAL_SELECTION_VALUE_PROPERTY" type="String" line="377"/>
            <javadoc line="377">
                Bound property name for &lt;code&gt;initialSelectionValue&lt;/code&gt;.                
            </javadoc>
            <declaration name="INPUT_VALUE_PROPERTY" type="String" line="381"/>
            <javadoc line="381">
                Bound property name for &lt;code&gt;inputValue&lt;/code&gt;.                
            </javadoc>
            <declaration name="WANTS_INPUT_PROPERTY" type="String" line="385"/>
            <javadoc line="385">
                Bound property name for &lt;code&gt;wantsInput&lt;/code&gt;.                
            </javadoc>
            <declaration name="icon" type="Icon" line="389"/>
            <javadoc line="389">
                Icon used in pane.                
            </javadoc>
            <declaration name="message" type="Object" line="393"/>
            <javadoc line="393">
                Message to display.                
            </javadoc>
            <declaration name="options" type="Object[]" line="397"/>
            <javadoc line="397">
                Options to display to the user.                
            </javadoc>
            <declaration name="initialValue" type="Object" line="401"/>
            <javadoc line="401">
                Value that should be initially selected in &lt;code&gt;options&lt;/code&gt;.                
            </javadoc>
            <declaration name="messageType" type="int" line="405"/>
            <javadoc line="405">
                Message type.                
            </javadoc>
            <declaration name="optionType" type="int" line="409"/>
            <javadoc line="409">
                Option type, one of &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;,
                  &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                  &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt; or
                  &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;.                
            </javadoc>
            <declaration name="value" type="Object" line="416"/>
            <javadoc line="416">
                Currently selected value, will be a valid option, or
                  &lt;code&gt;UNINITIALIZED_VALUE&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.                
            </javadoc>
            <declaration name="selectionValues" type="Object[]" line="421"/>
            <javadoc line="421">
                Array of values the user can choose from. Look and feel will
                  provide the UI component to choose this from.                
            </javadoc>
            <declaration name="inputValue" type="Object" line="426"/>
            <javadoc line="426">
                Value the user has input.                
            </javadoc>
            <declaration name="initialSelectionValue" type="Object" line="430"/>
            <javadoc line="430">
                Initial value to select in &lt;code&gt;selectionValues&lt;/code&gt;.                
            </javadoc>
            <declaration name="wantsInput" type="boolean" line="434"/>
            <javadoc line="434">
                If true, a UI widget will be provided to the user to get input.                
            </javadoc>
            <javadoc line="438">
                Shows a question-message dialog requesting input from the user. The
                  dialog uses the default frame, which usually means it is centered on
                  the screen.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showInputDialog" type="String" line="448">
                <params>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="451">
                Shows a question-message dialog requesting input from the user, with
                  the input value initialized to &lt;code&gt;initialSelectionValue&lt;/code&gt;. The
                  dialog uses the default frame, which usually means it is centered on
                  the screen.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    initialSelectionValue the value used to initialize the input
                      field                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="showInputDialog" type="String" line="461">
                <params>
                    <param name="message" type="Object"/>
                    <param name="initialSelectionValue" type="Object"/>
                </params>
            </method>
            <javadoc line="464">
                Shows a question-message dialog requesting input from the user
                  parented to &lt;code&gt;parentComponent&lt;/code&gt;.
                  The dialog is displayed on top of the &lt;code&gt;Component&lt;/code&gt;&apos;s
                  frame, and is usually positioned below the &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    parentComponent  the parent &lt;code&gt;Component&lt;/code&gt; for the
                      dialog                    
                </param>
                <param>
                    message  the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showInputDialog" type="String" line="477">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="480">
                Shows a question-message dialog requesting input from the user and
                  parented to &lt;code&gt;parentComponent&lt;/code&gt;. The input value will be
                  initialized to &lt;code&gt;initialSelectionValue&lt;/code&gt;.
                  The dialog is displayed on top of the &lt;code&gt;Component&lt;/code&gt;&apos;s
                  frame, and is usually positioned below the &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    parentComponent  the parent &lt;code&gt;Component&lt;/code&gt; for the
                      dialog                    
                </param>
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    initialSelectionValue the value used to initialize the input
                      field                    
                </param>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="showInputDialog" type="String" line="493">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="initialSelectionValue" type="Object"/>
                </params>
            </method>
            <javadoc line="496">
                Shows a dialog requesting input from the user parented to
                  &lt;code&gt;parentComponent&lt;/code&gt; with the dialog having the title
                  &lt;code&gt;title&lt;/code&gt; and message type &lt;code&gt;messageType&lt;/code&gt;.                
                <param>
                    parentComponent  the parent &lt;code&gt;Component&lt;/code&gt; for the
                      dialog                    
                </param>
                <param>
                    message  the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title    the &lt;code&gt;String&lt;/code&gt; to display in the dialog
                      title bar                    
                </param>
                <param>
                    messageType the type of message that is to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showInputDialog" type="String" line="516">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="519">
                Prompts the user for input in a blocking dialog where the
                  initial selection, possible selections, and all other options can
                  be specified. The user will able to choose from
                  &lt;code&gt;selectionValues&lt;/code&gt;, where &lt;code&gt;null&lt;/code&gt; implies the
                  user can input
                  whatever they wish, usually by means of a &lt;code&gt;JTextField&lt;/code&gt;.
                  &lt;code&gt;initialSelectionValue&lt;/code&gt; is the initial value to prompt
                  the user with. It is up to the UI to decide how best to represent
                  the &lt;code&gt;selectionValues&lt;/code&gt;, but usually a
                  &lt;code&gt;JComboBox&lt;/code&gt;, &lt;code&gt;JList&lt;/code&gt;, or
                  &lt;code&gt;JTextField&lt;/code&gt; will be used.                
                <param>
                    parentComponent  the parent &lt;code&gt;Component&lt;/code&gt; for the
                      dialog                    
                </param>
                <param>
                    message  the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title    the &lt;code&gt;String&lt;/code&gt; to display in the
                      dialog title bar                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon     the &lt;code&gt;Icon&lt;/code&gt; image to display                    
                </param>
                <param>
                    selectionValues an array of &lt;code&gt;Object&lt;/code&gt;s that
                      gives the possible selections                    
                </param>
                <param>
                    initialSelectionValue the value used to initialize the input
                      field                    
                </param>
                <return>
                    user&apos;s input, or &lt;code&gt;null&lt;/code&gt; meaning the user
                      canceled the input                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showInputDialog" type="Object" line="554">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                    <param name="selectionValues" type="Object[]"/>
                    <param name="initialSelectionValue" type="Object"/>
                </params>
                <declaration name="pane" type="JOptionPane" line="555"/>
                <declaration name="style" type="int" line="560"/>
                <declaration name="dialog" type="JDialog" line="561"/>
                <declaration name="value" type="Object" line="565"/>
                <scope line="566"/>
            </method>
            <javadoc line="571">
                Brings up an information-message dialog titled &quot;Message&quot;.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in
                      which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showMessageDialog" type="void" line="583">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="586">
                Brings up a dialog that displays a message using a default
                  icon determined by the &lt;code&gt;messageType&lt;/code&gt; parameter.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showMessageDialog" type="void" line="606">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="609">
                Brings up a dialog displaying a message, specifying all parameters.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in which the
                      dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon      an icon to display in the dialog that helps the user
                      identify the kind of message that is being displayed                    
                </param>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showMessageDialog" type="void" line="631">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="634">
                Brings up a dialog with the options &lt;i&gt;Yes&lt;/i&gt;,
                  &lt;i&gt;No&lt;/i&gt; and &lt;i&gt;Cancel&lt;/i&gt;; with the
                  title, &lt;b&gt;Select an Option&lt;/b&gt;.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in which the
                      dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <return>
                    an integer indicating the option selected by the user                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showConfirmDialog" type="int" line="650">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="653">
                Brings up a dialog where the number of choices is determined
                  by the &lt;code&gt;optionType&lt;/code&gt; parameter.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in which the
                      dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an int designating the options available on the dialog:
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      or &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <return>
                    an int indicating the option selected by the user                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showConfirmDialog" type="int" line="673">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                </params>
            </method>
            <javadoc line="676">
                Brings up a dialog where the number of choices is determined
                  by the &lt;code&gt;optionType&lt;/code&gt; parameter, where the
                  &lt;code&gt;messageType&lt;/code&gt;
                  parameter determines the icon to display.
                  The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply
                  a default icon from the Look and Feel.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in
                      which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used.                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an integer designating the options available
                      on the dialog: &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      or &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    messageType an integer designating the kind of message this is;
                      primarily used to determine the icon from the pluggable
                      Look and Feel: &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <return>
                    an integer indicating the option selected by the user                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showConfirmDialog" type="int" line="707">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="710">
                Brings up a dialog with a specified icon, where the number of
                  choices is determined by the &lt;code&gt;optionType&lt;/code&gt; parameter.
                  The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply
                  a default icon from the look and feel.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in which the
                      dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the Object to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an int designating the options available on the dialog:
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      or &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    messageType an int designating the kind of message this is,
                      primarily used to determine the icon from the pluggable
                      Look and Feel: &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon      the icon to display in the dialog                    
                </param>
                <return>
                    an int indicating the option selected by the user                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showConfirmDialog" type="int" line="740">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="743">
                Brings up a dialog with a specified icon, where the initial
                  choice is determined by the &lt;code&gt;initialValue&lt;/code&gt; parameter and
                  the number of choices is determined by the &lt;code&gt;optionType&lt;/code&gt;
                  parameter.
                  &lt;p&gt;
                  If &lt;code&gt;optionType&lt;/code&gt; is &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                  or &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;
                  and the &lt;code&gt;options&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;,
                  then the options are
                  supplied by the look and feel.
                  &lt;p&gt;
                  The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply
                  a default icon from the look and feel.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed;  if
                      &lt;code&gt;null&lt;/code&gt;, or if the
                      &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an integer designating the options available on the
                      dialog: &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      or &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    messageType an integer designating the kind of message this is,
                      primarily used to determine the icon from the
                      pluggable Look and Feel: &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon      the icon to display in the dialog                    
                </param>
                <param>
                    options   an array of objects indicating the possible choices
                      the user can make; if the objects are components, they
                      are rendered properly; non-&lt;code&gt;String&lt;/code&gt;
                      objects are
                      rendered using their &lt;code&gt;toString&lt;/code&gt; methods;
                      if this parameter is &lt;code&gt;null&lt;/code&gt;,
                      the options are determined by the Look and Feel                    
                </param>
                <param>
                    initialValue the object that represents the default selection
                      for the dialog; only meaningful if &lt;code&gt;options&lt;/code&gt;
                      is used; can be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    an integer indicating the option chosen by the user,
                      or &lt;code&gt;CLOSED_OPTION&lt;/code&gt; if the user closed
                      the dialog                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="showOptionDialog" type="int" line="796">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                    <param name="options" type="Object[]"/>
                    <param name="initialValue" type="Object"/>
                </params>
                <declaration name="pane" type="JOptionPane" line="797"/>
                <declaration name="style" type="int" line="800"/>
                <declaration name="dialog" type="JDialog" line="801"/>
                <declaration name="selectedValue" type="Object" line="805"/>
                <scope line="807"/>
                <scope line="811"/>
            </method>
            <javadoc line="816">
                Creates and returns a new &lt;code&gt;JDialog&lt;/code&gt; wrapping
                  &lt;code&gt;this&lt;/code&gt; centered on the &lt;code&gt;parentComponent&lt;/code&gt;
                  in the &lt;code&gt;parentComponent&lt;/code&gt;&apos;s frame.
                  &lt;code&gt;title&lt;/code&gt; is the title of the returned dialog.
                  The returned &lt;code&gt;JDialog&lt;/code&gt; will not be resizable by the
                  user, however programs can invoke &lt;code&gt;setResizable&lt;/code&gt; on
                  the &lt;code&gt;JDialog&lt;/code&gt; instance to change this property.
                  The returned &lt;code&gt;JDialog&lt;/code&gt; will be set up such that
                  once it is closed, or the user clicks on one of the buttons,
                  the optionpane&apos;s value property will be set accordingly and
                  the dialog will be closed.  Each time the dialog is made visible,
                  it will reset the option pane&apos;s value property to
                  &lt;code&gt;JOptionPane.UNINITIALIZED_VALUE&lt;/code&gt; to ensure the
                  user&apos;s subsequent action closes the dialog properly.                
                <param>
                    parentComponent determines the frame in which the dialog
                      is displayed; if the &lt;code&gt;parentComponent&lt;/code&gt; has
                      no &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <return>
                    a new &lt;code&gt;JDialog&lt;/code&gt; containing this instance                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="createDialog" type="JDialog" line="841">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="style" type="int" line="842"/>
            </method>
            <javadoc line="845">
                Creates and returns a new parentless &lt;code&gt;JDialog&lt;/code&gt;
                  with the specified title.
                  The returned &lt;code&gt;JDialog&lt;/code&gt; will not be resizable by the
                  user, however programs can invoke &lt;code&gt;setResizable&lt;/code&gt; on
                  the &lt;code&gt;JDialog&lt;/code&gt; instance to change this property.
                  The returned &lt;code&gt;JDialog&lt;/code&gt; will be set up such that
                  once it is closed, or the user clicks on one of the buttons,
                  the optionpane&apos;s value property will be set accordingly and
                  the dialog will be closed.  Each time the dialog is made visible,
                  it will reset the option pane&apos;s value property to
                  &lt;code&gt;JOptionPane.UNINITIALIZED_VALUE&lt;/code&gt; to ensure the
                  user&apos;s subsequent action closes the dialog properly.                
                <param>
                    title     the title string for the dialog                    
                </param>
                <return>
                    a new &lt;code&gt;JDialog&lt;/code&gt; containing this instance                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="createDialog" type="JDialog" line="866">
                <params>
                    <param name="title" type="String"/>
                </params>
                <declaration name="style" type="int" line="867"/>
                <declaration name="dialog" type="JDialog" line="868"/>
            </method>
            <method name="createDialog" type="JDialog" line="872">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="title" type="String"/>
                    <param name="style" type="int"/>
                </params>
                <declaration name="dialog" type="JDialog" line="873"/>
                <declaration name="window" type="Window" line="874"/>
                <scope line="875"/>
                <scope line="878"/>
                <scope line="881">
                    <declaration name="ownerShutdownListener" type="WindowListener" line="882"/>
                </scope>
            </method>
            <method name="initDialog" type="void" line="888">
                <params>
                    <param name="dialog" type="JDialog"/>
                    <param name="style" type="int"/>
                    <param name="parentComponent" type="Component"/>
                </params>
                <declaration name="contentPane" type="Container" line="890"/>
                <scope line="894">
                    <declaration name="supportsWindowDecorations" type="boolean" line="895"/>
                    <scope line="896"/>
                </scope>
                <anonymous_class line="903">
                    <method name="propertyChange" type="void" line="904">
                        <params>
                            <param name="event" type="PropertyChangeEvent"/>
                        </params>
                        <scope line="905"/>
                    </method>
                </anonymous_class>
                <declaration name="listener" type="PropertyChangeListener" line="903"/>
                <anonymous_class line="911">
                    <declaration name="gotFocus" type="boolean" line="912"/>
                    <method name="windowClosing" type="void" line="913">
                        <params>
                            <param name="we" type="WindowEvent"/>
                        </params>
                    </method>
                    <method name="windowClosed" type="void" line="916">
                        <params>
                            <param name="e" type="WindowEvent"/>
                        </params>
                    </method>
                    <method name="windowGainedFocus" type="void" line="920">
                        <params>
                            <param name="we" type="WindowEvent"/>
                        </params>
                        <scope line="921"/>
                    </method>
                </anonymous_class>
                <declaration name="adapter" type="WindowAdapter" line="911"/>
                <anonymous_class line="930">
                    <method name="componentShown" type="void" line="931">
                        <params>
                            <param name="ce" type="ComponentEvent"/>
                        </params>
                    </method>
                </anonymous_class>
            </method>
            <javadoc line="938">
                Brings up an internal confirmation dialog panel. The dialog
                  is a information-message dialog titled &quot;Message&quot;.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the object to display                    
                </param>
            </javadoc>
            <method name="showInternalMessageDialog" type="void" line="947">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="950">
                Brings up an internal dialog panel that displays a message
                  using a default icon determined by the &lt;code&gt;messageType&lt;/code&gt;
                  parameter.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="showInternalMessageDialog" type="void" line="967">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="970">
                Brings up an internal dialog panel displaying a message,
                  specifying all parameters.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon      an icon to display in the dialog that helps the user
                      identify the kind of message that is being displayed                    
                </param>
            </javadoc>
            <method name="showInternalMessageDialog" type="void" line="988">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="991">
                Brings up an internal dialog panel with the options &lt;i&gt;Yes&lt;/i&gt;, &lt;i&gt;No&lt;/i&gt;
                  and &lt;i&gt;Cancel&lt;/i&gt;; with the title, &lt;b&gt;Select an Option&lt;/b&gt;.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in
                      which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <return>
                    an integer indicating the option selected by the user                    
                </return>
            </javadoc>
            <method name="showInternalConfirmDialog" type="int" line="1001">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="1004">
                Brings up a internal dialog panel where the number of choices
                  is determined by the &lt;code&gt;optionType&lt;/code&gt; parameter.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the object to display in the dialog; a
                      &lt;code&gt;Component&lt;/code&gt; object is rendered as a
                      &lt;code&gt;Component&lt;/code&gt;; a &lt;code&gt;String&lt;/code&gt;
                      object is rendered as a string; other objects
                      are converted to a &lt;code&gt;String&lt;/code&gt; using the
                      &lt;code&gt;toString&lt;/code&gt; method                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an integer designating the options
                      available on the dialog: &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      or &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <return>
                    an integer indicating the option selected by the user                    
                </return>
            </javadoc>
            <method name="showInternalConfirmDialog" type="int" line="1023">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                </params>
            </method>
            <javadoc line="1026">
                Brings up an internal dialog panel where the number of choices
                  is determined by the &lt;code&gt;optionType&lt;/code&gt; parameter, where
                  the &lt;code&gt;messageType&lt;/code&gt; parameter determines the icon to display.
                  The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply
                  a default icon from the Look and Feel.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt; in
                      which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the object to display in the dialog; a
                      &lt;code&gt;Component&lt;/code&gt; object is rendered as a
                      &lt;code&gt;Component&lt;/code&gt;; a &lt;code&gt;String&lt;/code&gt;
                      object is rendered as a string; other objects are
                      converted to a &lt;code&gt;String&lt;/code&gt; using the
                      &lt;code&gt;toString&lt;/code&gt; method                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an integer designating the options
                      available on the dialog:
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;, or &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    messageType an integer designating the kind of message this is,
                      primarily used to determine the icon from the
                      pluggable Look and Feel: &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;, &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <return>
                    an integer indicating the option selected by the user                    
                </return>
            </javadoc>
            <method name="showInternalConfirmDialog" type="int" line="1054">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="1057">
                Brings up an internal dialog panel with a specified icon, where
                  the number of choices is determined by the &lt;code&gt;optionType&lt;/code&gt;
                  parameter.
                  The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply
                  a default icon from the look and feel.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the parentComponent has no Frame, a
                      default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the object to display in the dialog; a
                      &lt;code&gt;Component&lt;/code&gt; object is rendered as a
                      &lt;code&gt;Component&lt;/code&gt;; a &lt;code&gt;String&lt;/code&gt;
                      object is rendered as a string; other objects are
                      converted to a &lt;code&gt;String&lt;/code&gt; using the
                      &lt;code&gt;toString&lt;/code&gt; method                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an integer designating the options available
                      on the dialog:
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;, or
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;.                    
                </param>
                <param>
                    messageType an integer designating the kind of message this is,
                      primarily used to determine the icon from the pluggable
                      Look and Feel: &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;, &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon      the icon to display in the dialog                    
                </param>
                <return>
                    an integer indicating the option selected by the user                    
                </return>
            </javadoc>
            <method name="showInternalConfirmDialog" type="int" line="1087">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="1090">
                Brings up an internal dialog panel with a specified icon, where
                  the initial choice is determined by the &lt;code&gt;initialValue&lt;/code&gt;
                  parameter and the number of choices is determined by the
                  &lt;code&gt;optionType&lt;/code&gt; parameter.
                  &lt;p&gt;
                  If &lt;code&gt;optionType&lt;/code&gt; is &lt;code&gt;YES_NO_OPTION&lt;/code&gt;, or
                  &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;
                  and the &lt;code&gt;options&lt;/code&gt; parameter is &lt;code&gt;null&lt;/code&gt;,
                  then the options are supplied by the Look and Feel.
                  &lt;p&gt;
                  The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply
                  a default icon from the look and feel.                
                <param>
                    parentComponent determines the &lt;code&gt;Frame&lt;/code&gt;
                      in which the dialog is displayed; if &lt;code&gt;null&lt;/code&gt;,
                      or if the &lt;code&gt;parentComponent&lt;/code&gt; has no
                      &lt;code&gt;Frame&lt;/code&gt;, a default &lt;code&gt;Frame&lt;/code&gt; is used                    
                </param>
                <param>
                    message   the object to display in the dialog; a
                      &lt;code&gt;Component&lt;/code&gt; object is rendered as a
                      &lt;code&gt;Component&lt;/code&gt;; a &lt;code&gt;String&lt;/code&gt;
                      object is rendered as a string. Other objects are
                      converted to a &lt;code&gt;String&lt;/code&gt; using the
                      &lt;code&gt;toString&lt;/code&gt; method                    
                </param>
                <param>
                    title     the title string for the dialog                    
                </param>
                <param>
                    optionType an integer designating the options available
                      on the dialog: &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      or &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    messageType an integer designating the kind of message this is;
                      primarily used to determine the icon from the
                      pluggable Look and Feel: &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;, &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon      the icon to display in the dialog                    
                </param>
                <param>
                    options   an array of objects indicating the possible choices
                      the user can make; if the objects are components, they
                      are rendered properly; non-&lt;code&gt;String&lt;/code&gt;
                      objects are rendered using their &lt;code&gt;toString&lt;/code&gt;
                      methods; if this parameter is &lt;code&gt;null&lt;/code&gt;,
                      the options are determined by the Look and Feel                    
                </param>
                <param>
                    initialValue the object that represents the default selection
                      for the dialog; only meaningful if &lt;code&gt;options&lt;/code&gt;
                      is used; can be &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <return>
                    an integer indicating the option chosen by the user,
                      or &lt;code&gt;CLOSED_OPTION&lt;/code&gt; if the user closed the Dialog                    
                </return>
            </javadoc>
            <method name="showInternalOptionDialog" type="int" line="1136">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="optionType" type="int"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                    <param name="options" type="Object[]"/>
                    <param name="initialValue" type="Object"/>
                </params>
                <declaration name="pane" type="JOptionPane" line="1137"/>
                <declaration name="fo" type="Component" line="1139"/>
                <declaration name="dialog" type="JInternalFrame" line="1141"/>
                <scope line="1144">
                    <declaration name="parent" type="Container" line="1145"/>
                    <scope line="1146">
                        <scope line="1147"/>
                    </scope>
                </scope>
                <scope line="1153">
                    <declaration name="method" type="Method" line="1154"/>
                    <scope line="1155"/>
                </scope>
                <scope line="1159"/>
                <scope line="1161"/>
                <scope line="1163"/>
                <scope line="1165">
                    <scope line="1166"/>
                    <scope line="1169"/>
                </scope>
                <declaration name="selectedValue" type="Object" line="1172"/>
                <scope line="1173"/>
                <scope line="1176"/>
                <scope line="1179">
                    <scope line="1180"/>
                </scope>
                <scope line="1185">
                    <scope line="1186"/>
                </scope>
            </method>
            <javadoc line="1192">
                Shows an internal question-message dialog requesting input from
                  the user parented to &lt;code&gt;parentComponent&lt;/code&gt;. The dialog
                  is displayed in the &lt;code&gt;Component&lt;/code&gt;&apos;s frame,
                  and is usually positioned below the &lt;code&gt;Component&lt;/code&gt;.                
                <param>
                    parentComponent  the parent &lt;code&gt;Component&lt;/code&gt;
                      for the dialog                    
                </param>
                <param>
                    message  the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
            </javadoc>
            <method name="showInternalInputDialog" type="String" line="1201">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="1204">
                Shows an internal dialog requesting input from the user parented
                  to &lt;code&gt;parentComponent&lt;/code&gt; with the dialog having the title
                  &lt;code&gt;title&lt;/code&gt; and message type &lt;code&gt;messageType&lt;/code&gt;.                
                <param>
                    parentComponent the parent &lt;code&gt;Component&lt;/code&gt; for the dialog                    
                </param>
                <param>
                    message  the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title    the &lt;code&gt;String&lt;/code&gt; to display in the
                      dialog title bar                    
                </param>
                <param>
                    messageType the type of message that is to be displayed:
                      ERROR_MESSAGE, INFORMATION_MESSAGE, WARNING_MESSAGE,
                      QUESTION_MESSAGE, or PLAIN_MESSAGE                    
                </param>
            </javadoc>
            <method name="showInternalInputDialog" type="String" line="1216">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="1219">
                Prompts the user for input in a blocking internal dialog where
                  the initial selection, possible selections, and all other
                  options can be specified. The user will able to choose from
                  &lt;code&gt;selectionValues&lt;/code&gt;, where &lt;code&gt;null&lt;/code&gt;
                  implies the user can input
                  whatever they wish, usually by means of a &lt;code&gt;JTextField&lt;/code&gt;.
                  &lt;code&gt;initialSelectionValue&lt;/code&gt; is the initial value to prompt
                  the user with. It is up to the UI to decide how best to represent
                  the &lt;code&gt;selectionValues&lt;/code&gt;, but usually a
                  &lt;code&gt;JComboBox&lt;/code&gt;, &lt;code&gt;JList&lt;/code&gt;, or
                  &lt;code&gt;JTextField&lt;/code&gt; will be used.                
                <param>
                    parentComponent the parent &lt;code&gt;Component&lt;/code&gt; for the dialog                    
                </param>
                <param>
                    message  the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    title    the &lt;code&gt;String&lt;/code&gt; to display in the dialog
                      title bar                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;, &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;, or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    icon     the &lt;code&gt;Icon&lt;/code&gt; image to display                    
                </param>
                <param>
                    selectionValues an array of &lt;code&gt;Objects&lt;/code&gt; that
                      gives the possible selections                    
                </param>
                <param>
                    initialSelectionValue the value used to initialize the input
                      field                    
                </param>
                <return>
                    user&apos;s input, or &lt;code&gt;null&lt;/code&gt; meaning the user
                      canceled the input                    
                </return>
            </javadoc>
            <method name="showInternalInputDialog" type="Object" line="1247">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="message" type="Object"/>
                    <param name="title" type="String"/>
                    <param name="messageType" type="int"/>
                    <param name="icon" type="Icon"/>
                    <param name="selectionValues" type="Object[]"/>
                    <param name="initialSelectionValue" type="Object"/>
                </params>
                <declaration name="pane" type="JOptionPane" line="1248"/>
                <declaration name="fo" type="Component" line="1250"/>
                <declaration name="dialog" type="JInternalFrame" line="1254"/>
                <scope line="1257">
                    <declaration name="parent" type="Container" line="1258"/>
                    <scope line="1259">
                        <scope line="1260"/>
                    </scope>
                </scope>
                <scope line="1266">
                    <declaration name="method" type="Method" line="1267"/>
                    <scope line="1268"/>
                </scope>
                <scope line="1272"/>
                <scope line="1274"/>
                <scope line="1276"/>
                <scope line="1278">
                    <scope line="1279"/>
                    <scope line="1282"/>
                </scope>
                <scope line="1285"/>
                <declaration name="value" type="Object" line="1288"/>
                <scope line="1289"/>
            </method>
            <javadoc line="1294">
                Creates and returns an instance of &lt;code&gt;JInternalFrame&lt;/code&gt;.
                  The internal frame is created with the specified title,
                  and wrapping the &lt;code&gt;JOptionPane&lt;/code&gt;.
                  The returned &lt;code&gt;JInternalFrame&lt;/code&gt; is
                  added to the &lt;code&gt;JDesktopPane&lt;/code&gt; ancestor of
                  &lt;code&gt;parentComponent&lt;/code&gt;, or components
                  parent if one its ancestors isn&apos;t a &lt;code&gt;JDesktopPane&lt;/code&gt;,
                  or if &lt;code&gt;parentComponent&lt;/code&gt;
                  doesn&apos;t have a parent then a &lt;code&gt;RuntimeException&lt;/code&gt; is thrown.                
                <param>
                    parentComponent  the parent &lt;code&gt;Component&lt;/code&gt; for
                      the internal frame                    
                </param>
                <param>
                    title    the &lt;code&gt;String&lt;/code&gt; to display in the
                      frame&apos;s title bar                    
                </param>
                <return>
                    a &lt;code&gt;JInternalFrame&lt;/code&gt; containing a
                      &lt;code&gt;JOptionPane&lt;/code&gt;                    
                </return>
                <exception>
                    RuntimeException if &lt;code&gt;parentComponent&lt;/code&gt; does
                      not have a valid parent                    
                </exception>
            </javadoc>
            <method name="createInternalFrame" type="JInternalFrame" line="1313">
                <params>
                    <param name="parentComponent" type="Component"/>
                    <param name="title" type="String"/>
                </params>
                <declaration name="parent" type="Container" line="1314"/>
                <scope line="1315"/>
                <declaration name="iFrame" type="JInternalFrame" line="1318"/>
                <anonymous_class line="1321">
                    <method name="internalFrameClosing" type="void" line="1322">
                        <params>
                            <param name="e" type="InternalFrameEvent"/>
                        </params>
                        <scope line="1323"/>
                    </method>
                </anonymous_class>
                <anonymous_class line="1329">
                    <method name="propertyChange" type="void" line="1330">
                        <params>
                            <param name="event" type="PropertyChangeEvent"/>
                        </params>
                        <scope line="1331">
                            <scope line="1332">
                                <declaration name="method" type="Method" line="1333"/>
                                <scope line="1334"/>
                            </scope>
                            <scope line="1338"/>
                            <scope line="1340"/>
                            <scope line="1342"/>
                            <scope line="1344"/>
                            <scope line="1347"/>
                        </scope>
                    </method>
                </anonymous_class>
                <scope line="1355"/>
                <scope line="1358"/>
                <declaration name="iFrameSize" type="Dimension" line="1361"/>
                <declaration name="rootSize" type="Dimension" line="1362"/>
                <declaration name="parentSize" type="Dimension" line="1363"/>
                <declaration name="iFrameCoord" type="Point" line="1365"/>
                <declaration name="x" type="int" line="1366"/>
                <declaration name="y" type="int" line="1367"/>
                <declaration name="ovrx" type="int" line="1368"/>
                <declaration name="ovry" type="int" line="1369"/>
                <scope line="1374"/>
                <scope line="1377"/>
            </method>
            <javadoc line="1381">
                Returns the specified component&apos;s &lt;code&gt;Frame&lt;/code&gt;.                
                <param>
                    parentComponent the &lt;code&gt;Component&lt;/code&gt; to check for a
                      &lt;code&gt;Frame&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Frame&lt;/code&gt; that contains the component,
                      or &lt;code&gt;getRootFrame&lt;/code&gt;
                      if the component is &lt;code&gt;null&lt;/code&gt;,
                      or does not have a valid &lt;code&gt;Frame&lt;/code&gt; parent                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    #getRootFrame                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getFrameForComponent" type="Frame" line="1395">
                <params>
                    <param name="parentComponent" type="Component"/>
                </params>
            </method>
            <javadoc line="1400">
                Returns the specified component&apos;s toplevel &lt;code&gt;Frame&lt;/code&gt; or
                  &lt;code&gt;Dialog&lt;/code&gt;.                
                <param>
                    parentComponent the &lt;code&gt;Component&lt;/code&gt; to check for a
                      &lt;code&gt;Frame&lt;/code&gt; or &lt;code&gt;Dialog&lt;/code&gt;                    
                </param>
                <return>
                    the &lt;code&gt;Frame&lt;/code&gt; or &lt;code&gt;Dialog&lt;/code&gt; that
                      contains the component, or the default
                      frame if the component is &lt;code&gt;null&lt;/code&gt;,
                      or does not have a valid
                      &lt;code&gt;Frame&lt;/code&gt; or &lt;code&gt;Dialog&lt;/code&gt; parent                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getWindowForComponent" type="Window" line="1415">
                <params>
                    <param name="parentComponent" type="Component"/>
                </params>
            </method>
            <javadoc line="1420">
                Returns the specified component&apos;s desktop pane.                
                <param>
                    parentComponent the &lt;code&gt;Component&lt;/code&gt; to check for a
                      desktop                    
                </param>
                <return>
                    the &lt;code&gt;JDesktopPane&lt;/code&gt; that contains the component,
                      or &lt;code&gt;null&lt;/code&gt; if the component is &lt;code&gt;null&lt;/code&gt;
                      or does not have an ancestor that is a
                      &lt;code&gt;JInternalFrame&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getDesktopPaneForComponent" type="JDesktopPane" line="1429">
                <params>
                    <param name="parentComponent" type="Component"/>
                </params>
            </method>
            <declaration name="sharedFrameKey" type="Object" line="1434"/>
            <javadoc line="1435">
                Sets the frame to use for class methods in which a frame is
                  not provided.
                  &lt;p&gt;
                  &lt;strong&gt;Note:&lt;/strong&gt;
                  It is recommended that rather than using this method you supply a valid parent.                
                <param>
                    newRootFrame the default &lt;code&gt;Frame&lt;/code&gt; to use                    
                </param>
            </javadoc>
            <method name="setRootFrame" type="void" line="1443">
                <params>
                    <param name="newRootFrame" type="Frame"/>
                </params>
                <scope line="1444"/>
                <scope line="1447"/>
            </method>
            <javadoc line="1451">
                Returns the &lt;code&gt;Frame&lt;/code&gt; to use for the class methods in
                  which a frame is not provided.                
                <return>
                    the default &lt;code&gt;Frame&lt;/code&gt; to use                    
                </return>
                <exception>
                    HeadlessException if
                      &lt;code&gt;GraphicsEnvironment.isHeadless&lt;/code&gt; returns
                      &lt;code&gt;true&lt;/code&gt;                    
                </exception>
                <see>
                    #setRootFrame                    
                </see>
                <see>
                    java.awt.GraphicsEnvironment#isHeadless                    
                </see>
            </javadoc>
            <method name="getRootFrame" type="Frame" line="1461">
                <declaration name="sharedFrame" type="Frame" line="1462"/>
                <scope line="1463"/>
            </method>
            <javadoc line="1469">
                Creates a &lt;code&gt;JOptionPane&lt;/code&gt; with a test message.                
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1472"/>
            <javadoc line="1475">
                Creates a instance of &lt;code&gt;JOptionPane&lt;/code&gt; to display a
                  message using the
                  plain-message message type and the default options delivered by
                  the UI.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1482">
                <params>
                    <param name="message" type="Object"/>
                </params>
            </method>
            <javadoc line="1485">
                Creates an instance of &lt;code&gt;JOptionPane&lt;/code&gt; to display a message
                  with the specified message type and the default options,                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1496">
                <params>
                    <param name="message" type="Object"/>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <javadoc line="1499">
                Creates an instance of &lt;code&gt;JOptionPane&lt;/code&gt; to display a message
                  with the specified message type and options.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    optionType the options to display in the pane:
                      &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;, &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1514">
                <params>
                    <param name="message" type="Object"/>
                    <param name="messageType" type="int"/>
                    <param name="optionType" type="int"/>
                </params>
            </method>
            <javadoc line="1517">
                Creates an instance of &lt;code&gt;JOptionPane&lt;/code&gt; to display a message
                  with the specified message type, options, and icon.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    optionType the options to display in the pane:
                      &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;, &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    icon the &lt;code&gt;Icon&lt;/code&gt; image to display                    
                </param>
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1533">
                <params>
                    <param name="message" type="Object"/>
                    <param name="messageType" type="int"/>
                    <param name="optionType" type="int"/>
                    <param name="icon" type="Icon"/>
                </params>
            </method>
            <javadoc line="1536">
                Creates an instance of &lt;code&gt;JOptionPane&lt;/code&gt; to display a message
                  with the specified message type, icon, and options.
                  None of the options is initially selected.
                  &lt;p&gt;
                  The options objects should contain either instances of
                  &lt;code&gt;Component&lt;/code&gt;s, (which are added directly) or
                  &lt;code&gt;Strings&lt;/code&gt; (which are wrapped in a &lt;code&gt;JButton&lt;/code&gt;).
                  If you provide &lt;code&gt;Component&lt;/code&gt;s, you must ensure that when the
                  &lt;code&gt;Component&lt;/code&gt; is clicked it messages &lt;code&gt;setValue&lt;/code&gt;
                  in the created &lt;code&gt;JOptionPane&lt;/code&gt;.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    optionType the options to display in the pane:
                      &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    icon the &lt;code&gt;Icon&lt;/code&gt; image to display                    
                </param>
                <param>
                    options  the choices the user can select                    
                </param>
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1562">
                <params>
                    <param name="message" type="Object"/>
                    <param name="messageType" type="int"/>
                    <param name="optionType" type="int"/>
                    <param name="icon" type="Icon"/>
                    <param name="options" type="Object[]"/>
                </params>
            </method>
            <javadoc line="1565">
                Creates an instance of &lt;code&gt;JOptionPane&lt;/code&gt; to display a message
                  with the specified message type, icon, and options, with the
                  initially-selected option specified.                
                <param>
                    message the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <param>
                    messageType the type of message to be displayed:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;,
                      or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <param>
                    optionType the options to display in the pane:
                      &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <param>
                    icon the Icon image to display                    
                </param>
                <param>
                    options  the choices the user can select                    
                </param>
                <param>
                    initialValue the choice that is initially selected; if
                      &lt;code&gt;null&lt;/code&gt;, then nothing will be initially selected;
                      only meaningful if &lt;code&gt;options&lt;/code&gt; is used                    
                </param>
            </javadoc>
            <method name="JOptionPane" type="constructor" line="1587">
                <params>
                    <param name="message" type="Object"/>
                    <param name="messageType" type="int"/>
                    <param name="optionType" type="int"/>
                    <param name="icon" type="Icon"/>
                    <param name="options" type="Object[]"/>
                    <param name="initialValue" type="Object"/>
                </params>
            </method>
            <javadoc line="1598">
                Sets the UI object which implements the L&amp;F for this component.                
                <param>
                    ui  the &lt;code&gt;OptionPaneUI&lt;/code&gt; L&amp;F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfobound>
                    : true
                      hidden: true
                      description: The UI object that implements the optionpane&apos;s LookAndFeel                    
                </beaninfobound>
            </javadoc>
            <method name="setUI" type="void" line="1606">
                <params>
                    <param name="ui" type="OptionPaneUI"/>
                </params>
                <scope line="1607"/>
            </method>
            <javadoc line="1612">
                Returns the UI object which implements the L&amp;F for this component.                
                <return>
                    the &lt;code&gt;OptionPaneUI&lt;/code&gt; object                    
                </return>
            </javadoc>
            <method name="getUI" type="OptionPaneUI" line="1616"/>
            <javadoc line="1619">
                Notification from the &lt;code&gt;UIManager&lt;/code&gt; that the L&amp;F has changed.
                  Replaces the current UI object with the latest version from the
                  &lt;code&gt;UIManager&lt;/code&gt;.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="1625"/>
            <javadoc line="1628">
                Returns the name of the UI class that implements the
                  L&amp;F for this component.                
                <return>
                    the string &quot;OptionPaneUI&quot;                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="1635"/>
            <javadoc line="1638">
                Sets the option pane&apos;s message-object.                
                <param>
                    newMessage the &lt;code&gt;Object&lt;/code&gt; to display                    
                </param>
                <see>
                    #getMessage                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The optionpane&apos;s message object.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setMessage" type="void" line="1646">
                <params>
                    <param name="newMessage" type="Object"/>
                </params>
                <declaration name="oldMessage" type="Object" line="1647"/>
            </method>
            <javadoc line="1651">
                Returns the message-object this pane displays.                
                <see>
                    #setMessage                    
                </see>
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; that is displayed                    
                </return>
            </javadoc>
            <method name="getMessage" type="Object" line="1656"/>
            <javadoc line="1659">
                Sets the icon to display. If non-&lt;code&gt;null&lt;/code&gt;, the look and feel
                  does not provide an icon.                
                <param>
                    newIcon the &lt;code&gt;Icon&lt;/code&gt; to display                    
                </param>
                <see>
                    #getIcon                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The option pane&apos;s type icon.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setIcon" type="void" line="1668">
                <params>
                    <param name="newIcon" type="Icon"/>
                </params>
                <declaration name="oldIcon" type="Object" line="1669"/>
            </method>
            <javadoc line="1673">
                Returns the icon this pane displays.                
                <return>
                    the &lt;code&gt;Icon&lt;/code&gt; that is displayed                    
                </return>
                <see>
                    #setIcon                    
                </see>
            </javadoc>
            <method name="getIcon" type="Icon" line="1678"/>
            <javadoc line="1681">
                Sets the value the user has chosen.                
                <param>
                    newValue  the chosen value                    
                </param>
                <see>
                    #getValue                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The option pane&apos;s value object.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setValue" type="void" line="1689">
                <params>
                    <param name="newValue" type="Object"/>
                </params>
                <declaration name="oldValue" type="Object" line="1690"/>
            </method>
            <javadoc line="1694">
                Returns the value the user has selected. &lt;code&gt;UNINITIALIZED_VALUE&lt;/code&gt;
                  implies the user has not yet made a choice, &lt;code&gt;null&lt;/code&gt; means the
                  user closed the window with out choosing anything. Otherwise
                  the returned value will be one of the options defined in this
                  object.                
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; chosen by the user,
                      &lt;code&gt;UNINITIALIZED_VALUE&lt;/code&gt;
                      if the user has not yet made a choice, or &lt;code&gt;null&lt;/code&gt; if
                      the user closed the window without making a choice                    
                </return>
                <see>
                    #setValue                    
                </see>
            </javadoc>
            <method name="getValue" type="Object" line="1706"/>
            <javadoc line="1709">
                Sets the options this pane displays. If an element in
                  &lt;code&gt;newOptions&lt;/code&gt; is a &lt;code&gt;Component&lt;/code&gt;
                  it is added directly to the pane,
                  otherwise a button is created for the element.                
                <param>
                    newOptions an array of &lt;code&gt;Objects&lt;/code&gt; that create the
                      buttons the user can click on, or arbitrary
                      &lt;code&gt;Components&lt;/code&gt; to add to the pane                    
                </param>
                <see>
                    #getOptions                    
                </see>
                <beaninfobound>
                    : true
                      description: The option pane&apos;s options objects.                    
                </beaninfobound>
            </javadoc>
            <method name="setOptions" type="void" line="1721">
                <params>
                    <param name="newOptions" type="Object[]"/>
                </params>
                <declaration name="oldOptions" type="Object[]" line="1722"/>
            </method>
            <javadoc line="1726">
                Returns the choices the user can make.                
                <return>
                    the array of &lt;code&gt;Objects&lt;/code&gt; that give the user&apos;s choices                    
                </return>
                <see>
                    #setOptions                    
                </see>
            </javadoc>
            <method name="getOptions" type="Object[]" line="1731">
                <scope line="1732">
                    <declaration name="optionCount" type="int" line="1733"/>
                    <declaration name="retOptions" type="Object[]" line="1734"/>
                </scope>
            </method>
            <javadoc line="1740">
                Sets the initial value that is to be enabled -- the
                  &lt;code&gt;Component&lt;/code&gt;
                  that has the focus when the pane is initially displayed.                
                <param>
                    newInitialValue the &lt;code&gt;Object&lt;/code&gt; that gets the initial
                      keyboard focus                    
                </param>
                <see>
                    #getInitialValue                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The option pane&apos;s initial value object.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setInitialValue" type="void" line="1751">
                <params>
                    <param name="newInitialValue" type="Object"/>
                </params>
                <declaration name="oldIV" type="Object" line="1752"/>
            </method>
            <javadoc line="1756">
                Returns the initial value.                
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; that gets the initial keyboard focus                    
                </return>
                <see>
                    #setInitialValue                    
                </see>
            </javadoc>
            <method name="getInitialValue" type="Object" line="1761"/>
            <javadoc line="1764">
                Sets the option pane&apos;s message type.
                  The message type is used by the Look and Feel to determine the
                  icon to display (if not supplied) as well as potentially how to
                  lay out the &lt;code&gt;parentComponent&lt;/code&gt;.                
                <param>
                    newType an integer specifying the kind of message to display:
                      &lt;code&gt;ERROR_MESSAGE&lt;/code&gt;, &lt;code&gt;INFORMATION_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;WARNING_MESSAGE&lt;/code&gt;,
                      &lt;code&gt;QUESTION_MESSAGE&lt;/code&gt;, or &lt;code&gt;PLAIN_MESSAGE&lt;/code&gt;                    
                </param>
                <exception>
                    RuntimeException if &lt;code&gt;newType&lt;/code&gt; is not one of the
                      legal values listed above                    
                </exception>
                <see>
                    #getMessageType                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The option pane&apos;s message type.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setMessageType" type="void" line="1780">
                <params>
                    <param name="newType" type="int"/>
                </params>
                <declaration name="oldType" type="int" line="1782"/>
            </method>
            <javadoc line="1786">
                Returns the message type.                
                <return>
                    an integer specifying the message type                    
                </return>
                <see>
                    #setMessageType                    
                </see>
            </javadoc>
            <method name="getMessageType" type="int" line="1791"/>
            <javadoc line="1794">
                Sets the options to display.
                  The option type is used by the Look and Feel to
                  determine what buttons to show (unless options are supplied).                
                <param>
                    newType an integer specifying the options the L&amp;F is to display:
                      &lt;code&gt;DEFAULT_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_OPTION&lt;/code&gt;,
                      &lt;code&gt;YES_NO_CANCEL_OPTION&lt;/code&gt;,
                      or &lt;code&gt;OK_CANCEL_OPTION&lt;/code&gt;                    
                </param>
                <exception>
                    RuntimeException if &lt;code&gt;newType&lt;/code&gt; is not one of
                      the legal values listed above                    
                </exception>
                <see>
                    #getOptionType                    
                </see>
                <see>
                    #setOptions                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The option pane&apos;s option type.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setOptionType" type="void" line="1811">
                <params>
                    <param name="newType" type="int"/>
                </params>
                <declaration name="oldType" type="int" line="1813"/>
            </method>
            <javadoc line="1817">
                Returns the type of options that are displayed.                
                <return>
                    an integer specifying the user-selectable options                    
                </return>
                <see>
                    #setOptionType                    
                </see>
            </javadoc>
            <method name="getOptionType" type="int" line="1822"/>
            <javadoc line="1825">
                Sets the input selection values for a pane that provides the user
                  with a list of items to choose from. (The UI provides a widget
                  for choosing one of the values.)  A &lt;code&gt;null&lt;/code&gt; value
                  implies the user can input whatever they wish, usually by means
                  of a &lt;code&gt;JTextField&lt;/code&gt;.
                  &lt;p&gt;
                  Sets &lt;code&gt;wantsInput&lt;/code&gt; to true. Use
                  &lt;code&gt;setInitialSelectionValue&lt;/code&gt; to specify the initially-chosen
                  value. After the pane as been enabled, &lt;code&gt;inputValue&lt;/code&gt; is
                  set to the value the user has selected.                
                <param>
                    newValues an array of &lt;code&gt;Objects&lt;/code&gt; the user to be
                      displayed
                      (usually in a list or combo-box) from which
                      the user can make a selection                    
                </param>
                <see>
                    #setWantsInput                    
                </see>
                <see>
                    #setInitialSelectionValue                    
                </see>
                <see>
                    #getSelectionValues                    
                </see>
                <beaninfobound>
                    : true
                      description: The option pane&apos;s selection values.                    
                </beaninfobound>
            </javadoc>
            <method name="setSelectionValues" type="void" line="1846">
                <params>
                    <param name="newValues" type="Object[]"/>
                </params>
                <declaration name="oldValues" type="Object[]" line="1847"/>
            </method>
            <javadoc line="1852">
                Returns the input selection values.                
                <return>
                    the array of &lt;code&gt;Objects&lt;/code&gt; the user can select                    
                </return>
                <see>
                    #setSelectionValues                    
                </see>
            </javadoc>
            <method name="getSelectionValues" type="Object[]" line="1857"/>
            <javadoc line="1860">
                Sets the input value that is initially displayed as selected to the user.
                  Only used if &lt;code&gt;wantsInput&lt;/code&gt; is true.                
                <param>
                    newValue the initially selected value                    
                </param>
                <see>
                    #setSelectionValues                    
                </see>
                <see>
                    #getInitialSelectionValue                    
                </see>
                <beaninfobound>
                    : true
                      description: The option pane&apos;s initial selection value object.                    
                </beaninfobound>
            </javadoc>
            <method name="setInitialSelectionValue" type="void" line="1869">
                <params>
                    <param name="newValue" type="Object"/>
                </params>
                <declaration name="oldValue" type="Object" line="1870"/>
            </method>
            <javadoc line="1874">
                Returns the input value that is displayed as initially selected to the user.                
                <return>
                    the initially selected value                    
                </return>
                <see>
                    #setInitialSelectionValue                    
                </see>
                <see>
                    #setSelectionValues                    
                </see>
            </javadoc>
            <method name="getInitialSelectionValue" type="Object" line="1880"/>
            <javadoc line="1883">
                Sets the input value that was selected or input by the user.
                  Only used if &lt;code&gt;wantsInput&lt;/code&gt; is true.  Note that this method
                  is invoked internally by the option pane (in response to user action)
                  and should generally not be called by client programs.  To set the
                  input value initially displayed as selected to the user, use
                  &lt;code&gt;setInitialSelectionValue&lt;/code&gt;.                
                <param>
                    newValue the &lt;code&gt;Object&lt;/code&gt; used to set the
                      value that the user specified (usually in a text field)                    
                </param>
                <see>
                    #setSelectionValues                    
                </see>
                <see>
                    #setInitialSelectionValue                    
                </see>
                <see>
                    #setWantsInput                    
                </see>
                <see>
                    #getInputValue                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: The option pane&apos;s input value object.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setInputValue" type="void" line="1900">
                <params>
                    <param name="newValue" type="Object"/>
                </params>
                <declaration name="oldValue" type="Object" line="1901"/>
            </method>
            <javadoc line="1905">
                Returns the value the user has input, if &lt;code&gt;wantsInput&lt;/code&gt;
                  is true.                
                <return>
                    the &lt;code&gt;Object&lt;/code&gt; the user specified,
                      if it was one of the objects, or a
                      &lt;code&gt;String&lt;/code&gt; if it was a value typed into a
                      field                    
                </return>
                <see>
                    #setSelectionValues                    
                </see>
                <see>
                    #setWantsInput                    
                </see>
                <see>
                    #setInputValue                    
                </see>
            </javadoc>
            <method name="getInputValue" type="Object" line="1916"/>
            <javadoc line="1919">
                Returns the maximum number of characters to place on a line in a
                  message. Default is to return &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.
                  The value can be
                  changed by overriding this method in a subclass.                
                <return>
                    an integer giving the maximum number of characters on a line                    
                </return>
            </javadoc>
            <method name="getMaxCharactersPerLineCount" type="int" line="1926"/>
            <javadoc line="1929">
                Sets the &lt;code&gt;wantsInput&lt;/code&gt; property.
                  If &lt;code&gt;newValue&lt;/code&gt; is true, an input component
                  (such as a text field or combo box) whose parent is
                  &lt;code&gt;parentComponent&lt;/code&gt; is provided to
                  allow the user to input a value. If &lt;code&gt;getSelectionValues&lt;/code&gt;
                  returns a non-&lt;code&gt;null&lt;/code&gt; array, the input value is one of the
                  objects in that array. Otherwise the input value is whatever
                  the user inputs.
                  &lt;p&gt;
                  This is a bound property.                
                <see>
                    #setSelectionValues                    
                </see>
                <see>
                    #setInputValue                    
                </see>
                <beaninfopreferred>
                    : true
                      bound: true
                      description: Flag which allows the user to input a value.                    
                </beaninfopreferred>
            </javadoc>
            <method name="setWantsInput" type="void" line="1946">
                <params>
                    <param name="newValue" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="1947"/>
            </method>
            <javadoc line="1951">
                Returns the value of the &lt;code&gt;wantsInput&lt;/code&gt; property.                
                <return>
                    true if an input component will be provided                    
                </return>
                <see>
                    #setWantsInput                    
                </see>
            </javadoc>
            <method name="getWantsInput" type="boolean" line="1956"/>
            <javadoc line="1959">
                Requests that the initial value be selected, which will set
                  focus to the initial value. This method
                  should be invoked after the window containing the option pane
                  is made visible.                
            </javadoc>
            <method name="selectInitialValue" type="void" line="1965">
                <declaration name="ui" type="OptionPaneUI" line="1966"/>
                <scope line="1967"/>
            </method>
            <method name="styleFromMessageType" type="int" line="1971">
                <params>
                    <param name="messageType" type="int"/>
                </params>
            </method>
            <method name="writeObject" type="void" line="1986">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <declaration name="values" type="Vector&amp;lt;Object&amp;gt;" line="1987"/>
                <scope line="1989"/>
                <scope line="1993"/>
                <scope line="1997">
                    <declaration name="serOptions" type="Vector&amp;lt;Object&amp;gt;" line="1998"/>
                    <scope line="2000">
                        <declaration name="optionCount" type="int" line="2001"/>
                        <declaration name="arrayOptions" type="Object[]" line="2002"/>
                    </scope>
                </scope>
                <scope line="2008"/>
                <scope line="2012"/>
                <scope line="2016">
                    <declaration name="serialize" type="boolean" line="2017"/>
                    <scope line="2018">
                        <scope line="2019"/>
                    </scope>
                    <scope line="2024"/>
                </scope>
                <scope line="2029"/>
                <scope line="2033"/>
            </method>
            <method name="readObject" type="void" line="2039">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="values" type="Vector" line="2041"/>
                <declaration name="indexCounter" type="int" line="2042"/>
                <declaration name="maxCounter" type="int" line="2043"/>
                <scope line="2044"/>
                <scope line="2048"/>
                <scope line="2052"/>
                <scope line="2056"/>
                <scope line="2060"/>
                <scope line="2064"/>
                <scope line="2068"/>
                <scope line="2072"/>
                <scope line="2076">
                    <declaration name="count" type="byte" line="2077"/>
                    <scope line="2079"/>
                </scope>
            </method>
            <javadoc line="2084">
                Returns a string representation of this &lt;code&gt;JOptionPane&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this &lt;code&gt;JOptionPane&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="2093">
                <declaration name="iconString" type="String" line="2094"/>
                <declaration name="initialValueString" type="String" line="2095"/>
                <declaration name="messageString" type="String" line="2096"/>
                <declaration name="messageTypeString" type="String" line="2097"/>
                <scope line="2098"/>
                <scope line="2101"/>
                <scope line="2104"/>
                <scope line="2107"/>
                <scope line="2110"/>
                <declaration name="optionTypeString" type="String" line="2114"/>
                <scope line="2115"/>
                <scope line="2118"/>
                <scope line="2121"/>
                <scope line="2124"/>
                <declaration name="wantsInputString" type="String" line="2128"/>
            </method>
            <class name="ModalPrivilegedAction" line="2131">
                <implements interface="PrivilegedAction">
                    <type_params>
                        <type_param name="Method"/>
                    </type_params>
                </implements>
                <javadoc line="2131">
                    Retrieves a method from the provided class and makes it accessible.                    
                </javadoc>
                <declaration name="clazz" type="Class&amp;lt;?&amp;gt;" line="2135"/>
                <declaration name="methodName" type="String" line="2136"/>
                <method name="ModalPrivilegedAction" type="constructor" line="2137">
                    <params>
                        <param name="clazz" type="Class&lt;?&gt;"/>
                        <param name="methodName" type="String"/>
                    </params>
                </method>
                <method name="run" type="Method" line="2141">
                    <declaration name="method" type="Method" line="2142"/>
                    <scope line="2143"/>
                    <scope line="2146"/>
                    <scope line="2148"/>
                </method>
            </class>
            <javadoc line="2154">
                Returns the &lt;code&gt;AccessibleContext&lt;/code&gt; associated with this JOptionPane.
                  For option panes, the &lt;code&gt;AccessibleContext&lt;/code&gt; takes the form of an
                  &lt;code&gt;AccessibleJOptionPane&lt;/code&gt;.
                  A new &lt;code&gt;AccessibleJOptionPane&lt;/code&gt; instance is created if necessary.                
                <return>
                    an AccessibleJOptionPane that serves as the
                      AccessibleContext of this AccessibleJOptionPane                    
                </return>
                <beaninfoexpert>
                    : true
                      description: The AccessibleContext associated with this option pane                    
                </beaninfoexpert>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="2164">
                <scope line="2165"/>
            </method>
            <class name="AccessibleJOptionPane" line="2170">
                <extends class="AccessibleJComponent"/>
                <javadoc line="2170">
                    This class implements accessibility support for the
                      &lt;code&gt;JOptionPane&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to option pane user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="2186">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the object                        
                    </return>
                    <see>
                        AccessibleRole                        
                    </see>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="2191"/>
            </class>
        </class>
    </source>