<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.event"/>
        <import package="java.awt"/>
        <import package="javax.swing.event"/>
        <interface name="ButtonModel">
            <implements interface="ItemSelectable"/>
            <javadoc line="5">
                State model for buttons.
                  &lt;p&gt;
                  This model is used for regular buttons, as well as check boxes
                  and radio buttons, which are special kinds of buttons. In practice,
                  a button&apos;s UI takes the responsibility of calling methods on its
                  model to manage the state, as detailed below:
                  &lt;p&gt;
                  In simple terms, pressing and releasing the mouse over a regular
                  button triggers the button and causes and &lt;code&gt;ActionEvent&lt;/code&gt;
                  to be fired. The same behavior can be produced via a keyboard key
                  defined by the look and feel of the button (typically the SPACE BAR).
                  Pressing and releasing this key while the button has
                  focus will give the same results. For check boxes and radio buttons, the
                  mouse or keyboard equivalent sequence just described causes the button
                  to become selected.
                  &lt;p&gt;
                  In details, the state model for buttons works as follows
                  when used with the mouse:
                  &lt;br&gt;
                  Pressing the mouse on top of a button makes the model both
                  armed and pressed. As long as the mouse remains down,
                  the model remains pressed, even if the mouse moves
                  outside the button. On the contrary, the model is only
                  armed while the mouse remains pressed within the bounds of
                  the button (it can move in or out of the button, but the model
                  is only armed during the portion of time spent within the button).
                  A button is triggered, and an &lt;code&gt;ActionEvent&lt;/code&gt; is fired,
                  when the mouse is released while the model is armed
                  - meaning when it is released over top of the button after the mouse
                  has previously been pressed on that button (and not already released).
                  Upon mouse release, the model becomes unarmed and unpressed.
                  &lt;p&gt;
                  In details, the state model for buttons works as follows
                  when used with the keyboard:
                  &lt;br&gt;
                  Pressing the look and feel defined keyboard key while the button
                  has focus makes the model both armed and pressed. As long as this key
                  remains down, the model remains in this state. Releasing the key sets
                  the model to unarmed and unpressed, triggers the button, and causes an
                  &lt;code&gt;ActionEvent&lt;/code&gt; to be fired.                
                <author>
                    Jeff Dinkins                    
                </author>
            </javadoc>
            <method name="isArmed" type="boolean" line="49"/>
            <javadoc line="49">
                Indicates partial commitment towards triggering the
                  button.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the button is armed,
                      and ready to be triggered                    
                </return>
                <see>
                    #setArmed                    
                </see>
            </javadoc>
            <method name="isSelected" type="boolean" line="57"/>
            <javadoc line="57">
                Indicates if the button has been selected. Only needed for
                  certain types of buttons - such as radio buttons and check boxes.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the button is selected                    
                </return>
            </javadoc>
            <method name="isEnabled" type="boolean" line="63"/>
            <javadoc line="63">
                Indicates if the button can be selected or triggered by
                  an input device, such as a mouse pointer.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the button is enabled                    
                </return>
            </javadoc>
            <method name="isPressed" type="boolean" line="69"/>
            <javadoc line="69">
                Indicates if the button is pressed.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the button is pressed                    
                </return>
            </javadoc>
            <method name="isRollover" type="boolean" line="74"/>
            <javadoc line="74">
                Indicates that the mouse is over the button.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the mouse is over the button                    
                </return>
            </javadoc>
            <method name="setArmed" type="void" line="79"/>
            <javadoc line="79">
                Marks the button as armed or unarmed.                
                <param>
                    b whether or not the button should be armed                    
                </param>
            </javadoc>
            <method name="setSelected" type="void" line="84"/>
            <javadoc line="84">
                Selects or deselects the button.                
                <param>
                    b &lt;code&gt;true&lt;/code&gt; selects the button,
                      &lt;code&gt;false&lt;/code&gt; deselects the button                    
                </param>
            </javadoc>
            <method name="setEnabled" type="void" line="90"/>
            <javadoc line="90">
                Enables or disables the button.                
                <param>
                    b whether or not the button should be enabled                    
                </param>
                <see>
                    #isEnabled                    
                </see>
            </javadoc>
            <method name="setPressed" type="void" line="96"/>
            <javadoc line="96">
                Sets the button to pressed or unpressed.                
                <param>
                    b whether or not the button should be pressed                    
                </param>
                <see>
                    #isPressed                    
                </see>
            </javadoc>
            <method name="setRollover" type="void" line="102"/>
            <javadoc line="102">
                Sets or clears the button&apos;s rollover state                
                <param>
                    b whether or not the button is in the rollover state                    
                </param>
                <see>
                    #isRollover                    
                </see>
            </javadoc>
            <method name="setMnemonic" type="void" line="108"/>
            <javadoc line="108">
                Sets the keyboard mnemonic (shortcut key or
                  accelerator key) for the button.                
                <param>
                    key an int specifying the accelerator key                    
                </param>
            </javadoc>
            <method name="getMnemonic" type="int" line="114"/>
            <javadoc line="114">
                Gets the keyboard mnemonic for the button.                
                <return>
                    an int specifying the accelerator key                    
                </return>
                <see>
                    #setMnemonic                    
                </see>
            </javadoc>
            <method name="setActionCommand" type="void" line="120"/>
            <javadoc line="120">
                Sets the action command string that gets sent as part of the
                  &lt;code&gt;ActionEvent&lt;/code&gt; when the button is triggered.                
                <param>
                    s the &lt;code&gt;String&lt;/code&gt; that identifies the generated event                    
                </param>
                <see>
                    #getActionCommand                    
                </see>
                <see>
                    java.awt.event.ActionEvent#getActionCommand                    
                </see>
            </javadoc>
            <method name="getActionCommand" type="String" line="128"/>
            <javadoc line="128">
                Returns the action command string for the button.                
                <return>
                    the &lt;code&gt;String&lt;/code&gt; that identifies the generated event                    
                </return>
                <see>
                    #setActionCommand                    
                </see>
            </javadoc>
            <method name="setGroup" type="void" line="134"/>
            <javadoc line="134">
                Identifies the group the button belongs to --
                  needed for radio buttons, which are mutually
                  exclusive within their group.                
                <param>
                    group the &lt;code&gt;ButtonGroup&lt;/code&gt; the button belongs to                    
                </param>
            </javadoc>
            <method name="addActionListener" type="void" line="141"/>
            <javadoc line="141">
                Adds an &lt;code&gt;ActionListener&lt;/code&gt; to the model.                
                <param>
                    l the listener to add                    
                </param>
            </javadoc>
            <method name="removeActionListener" type="void" line="146"/>
            <javadoc line="146">
                Removes an &lt;code&gt;ActionListener&lt;/code&gt; from the model.                
                <param>
                    l the listener to remove                    
                </param>
            </javadoc>
            <method name="addItemListener" type="void" line="151"/>
            <javadoc line="151">
                Adds an &lt;code&gt;ItemListener&lt;/code&gt; to the model.                
                <param>
                    l the listener to add                    
                </param>
            </javadoc>
            <method name="removeItemListener" type="void" line="156"/>
            <javadoc line="156">
                Removes an &lt;code&gt;ItemListener&lt;/code&gt; from the model.                
                <param>
                    l the listener to remove                    
                </param>
            </javadoc>
            <method name="addChangeListener" type="void" line="161"/>
            <javadoc line="161">
                Adds a &lt;code&gt;ChangeListener&lt;/code&gt; to the model.                
                <param>
                    l the listener to add                    
                </param>
            </javadoc>
            <method name="removeChangeListener" type="void" line="166"/>
            <javadoc line="166">
                Removes a &lt;code&gt;ChangeListener&lt;/code&gt; from the model.                
                <param>
                    l the listener to remove                    
                </param>
            </javadoc>
        </interface>
    </source>