<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing">
        <import package="java.awt.Component"/>
        <import package="java.awt.Dimension"/>
        <import package="java.awt.Graphics"/>
        <import package="java.awt.Insets"/>
        <import package="java.awt.Point"/>
        <import package="java.awt.Rectangle"/>
        <import package="java.awt.event"/>
        <import package="java.beans.Transient"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.io.Serializable"/>
        <import package="java.io.ObjectOutputStream"/>
        <import package="java.io.ObjectInputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.border.Border"/>
        <import package="javax.swing.plaf"/>
        <import package="javax.accessibility"/>
        <class name="JMenuBar" line="49">
            <extends class="JComponent"/>
            <comment line="94">
                Model for the selected subcontrol.                
            </comment>
            <comment line="102">
                                
            </comment>
            <comment line="103">
                trace creates and disposes                
            </comment>
            <comment line="104">
                show reuse hits/misses                
            </comment>
            <comment line="105">
                show bad params, misc.                
            </comment>
            <comment line="467">
                ///////////////
                 Accessibility support                
            </comment>
            <comment line="655">
                internal class AccessibleJMenuBar                
            </comment>
            <implements interface="Accessible"/>
            <implements interface="MenuElement"/>
            <javadoc line="49">
                An implementation of a menu bar. You add &lt;code&gt;JMenu&lt;/code&gt; objects to the
                  menu bar to construct a menu. When the user selects a &lt;code&gt;JMenu&lt;/code&gt;
                  object, its associated &lt;code&gt;JPopupMenu&lt;/code&gt; is displayed, allowing the
                  user to select one of the &lt;code&gt;JMenuItems&lt;/code&gt; on it.
                  &lt;p&gt;
                  For information and examples of using menu bars see
                  &lt;a
                  href=&quot;http://java.sun.com/docs/books/tutorial/uiswing/components/menu.html&quot;&gt;How to Use Menus&lt;/a&gt;,
                  a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt; Swing is not thread safe. For more
                  information see &lt;a
                  href=&quot;package-summary.html#threading&quot;&gt;Swing&apos;s Threading
                  Policy&lt;/a&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <beaninfo>
                    attribute: isContainer true
                      description: A container for holding and displaying menus.                    
                </beaninfo>
                <author>
                    Georges Saab                    
                </author>
                <author>
                    David Karlton                    
                </author>
                <author>
                    Arnaud Weber                    
                </author>
                <see>
                    JMenu                    
                </see>
                <see>
                    JPopupMenu                    
                </see>
                <see>
                    JMenuItem                    
                </see>
            </javadoc>
            <declaration name="uiClassID" type="String" line="87"/>
            <javadoc line="87">
                @see #getUIClassID                
                <see>
                    #readObject                    
                </see>
            </javadoc>
            <declaration name="selectionModel" type="SingleSelectionModel" line="96"/>
            <declaration name="paintBorder" type="boolean" line="98"/>
            <declaration name="margin" type="Insets" line="99"/>
            <declaration name="TRACE" type="boolean" line="102"/>
            <declaration name="VERBOSE" type="boolean" line="103"/>
            <declaration name="DEBUG" type="boolean" line="104"/>
            <javadoc line="106">
                Creates a new menu bar.                
            </javadoc>
            <method name="JMenuBar" type="constructor" line="109"/>
            <javadoc line="116">
                Returns the menubar&apos;s current UI.                
                <see>
                    #setUI                    
                </see>
            </javadoc>
            <method name="getUI" type="MenuBarUI" line="120"/>
            <javadoc line="124">
                Sets the L&amp;F object that renders this component.                
                <param>
                    ui the new MenuBarUI L&F object                    
                </param>
                <see>
                    UIDefaults#getUI                    
                </see>
                <beaninfo>
                    bound: true
                      hidden: true
                      attribute: visualUpdate true
                      description: The UI object that implements the Component's LookAndFeel.                    
                </beaninfo>
            </javadoc>
            <method name="setUI" type="void" line="135">
                <params>
                    <param name="ui" type="MenuBarUI"/>
                </params>
            </method>
            <javadoc line="139">
                Resets the UI property with a value from the current look and feel.                
                <see>
                    JComponent#updateUI                    
                </see>
            </javadoc>
            <method name="updateUI" type="void" line="144"/>
            <javadoc line="149">
                Returns the name of the L&amp;F class that renders this component.                
                <return>
                    the string "MenuBarUI"                    
                </return>
                <see>
                    JComponent#getUIClassID                    
                </see>
                <see>
                    UIDefaults#getUI                    
                </see>
            </javadoc>
            <method name="getUIClassID" type="String" line="156"/>
            <javadoc line="161">
                Returns the model object that handles single selections.                
                <return>
                    the <code>SingleSelectionModel</code> property                    
                </return>
                <see>
                    SingleSelectionModel                    
                </see>
            </javadoc>
            <method name="getSelectionModel" type="SingleSelectionModel" line="167"/>
            <javadoc line="171">
                Sets the model object to handle single selections.                
                <param>
                    model the <code>SingleSelectionModel</code> to use                    
                </param>
                <see>
                    SingleSelectionModel                    
                </see>
                <beaninfo>
                    bound: true
                      description: The selection model, recording which child is selected.                    
                </beaninfo>
            </javadoc>
            <method name="setSelectionModel" type="void" line="180">
                <params>
                    <param name="model" type="SingleSelectionModel"/>
                </params>
                <declaration name="oldValue" type="SingleSelectionModel" line="181"/>
            </method>
            <javadoc line="187">
                Appends the specified menu to the end of the menu bar.                
                <param>
                    c the <code>JMenu</code> component to add                    
                </param>
                <return>
                    the menu component                    
                </return>
            </javadoc>
            <method name="add" type="JMenu" line="193">
                <params>
                    <param name="c" type="JMenu"/>
                </params>
            </method>
            <javadoc line="198">
                Returns the menu at the specified position in the menu bar.                
                <param>
                    index  an integer giving the position in the menu bar, where
                      0 is the first position                    
                </param>
                <return>
                    the <code>JMenu</code> at that position, or <code>null</code> if
                      if there is no <code>JMenu</code> at that position (ie. if
                      it is a <code>JMenuItem</code>)                    
                </return>
            </javadoc>
            <method name="getMenu" type="JMenu" line="207">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="c" type="Component" line="208"/>
            </method>
            <javadoc line="214">
                Returns the number of items in the menu bar.                
                <return>
                    the number of items in the menu bar                    
                </return>
            </javadoc>
            <method name="getMenuCount" type="int" line="219"/>
            <javadoc line="223">
                Sets the help menu that appears when the user selects the
                  &quot;help&quot; option in the menu bar. This method is not yet implemented
                  and will throw an exception.                
                <param>
                    menu the JMenu that delivers help to the user                    
                </param>
            </javadoc>
            <method name="setHelpMenu" type="void" line="230">
                <params>
                    <param name="menu" type="JMenu"/>
                </params>
            </method>
            <javadoc line="234">
                Gets the help menu for the menu bar.  This method is not yet
                  implemented and will throw an exception.                
                <return>
                    the <code>JMenu</code> that delivers help to the user                    
                </return>
            </javadoc>
            <method name="getHelpMenu" type="JMenu" line="241"/>
            <javadoc line="245">
                Returns the component at the specified index.                
                <param>
                    i an integer specifying the position, where 0 is first                    
                </param>
                <return>
                    the <code>Component</code> at the position,
                      or <code>null</code> for an invalid index                    
                </return>
                <deprecated>
                    replaced by <code>getComponent(int i)</code>                    
                </deprecated>
            </javadoc>
            <method name="getComponentAtIndex" type="Component" line="254">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="255"/>
            </method>
            <javadoc line="261">
                Returns the index of the specified component.                
                <param>
                    c  the <code>Component</code> to find                    
                </param>
                <return>
                    an integer giving the component's position, where 0 is first;
                      or -1 if it can't be found                    
                </return>
            </javadoc>
            <method name="getComponentIndex" type="int" line="268">
                <params>
                    <param name="c" type="Component"/>
                </params>
                <declaration name="ncomponents" type="int" line="269"/>
                <declaration name="component" type="Component[]" line="270"/>
                <scope line="271">
                    <declaration name="comp" type="Component" line="272"/>
                </scope>
            </method>
            <javadoc line="279">
                Sets the currently selected component, producing a
                  a change to the selection model.                
                <param>
                    sel the <code>Component</code> to select                    
                </param>
            </javadoc>
            <method name="setSelected" type="void" line="285">
                <params>
                    <param name="sel" type="Component"/>
                </params>
                <declaration name="model" type="SingleSelectionModel" line="286"/>
                <declaration name="index" type="int" line="287"/>
            </method>
            <javadoc line="291">
                Returns true if the menu bar currently has a component selected.                
                <return>
                    true if a selection has been made, else false                    
                </return>
            </javadoc>
            <method name="isSelected" type="boolean" line="296"/>
            <javadoc line="300">
                Returns true if the menu bars border should be painted.                
                <return>
                    true if the border should be painted, else false                    
                </return>
            </javadoc>
            <method name="isBorderPainted" type="boolean" line="305"/>
            <javadoc line="309">
                Sets whether the border should be painted.                
                <param>
                    b if true and border property is not <code>null</code>,
                      the border is painted.                    
                </param>
                <see>
                    #isBorderPainted                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: Whether the border should be painted.                    
                </beaninfo>
            </javadoc>
            <method name="setBorderPainted" type="void" line="320">
                <params>
                    <param name="b" type="boolean"/>
                </params>
                <declaration name="oldValue" type="boolean" line="321"/>
                <scope line="324"/>
            </method>
            <javadoc line="330">
                Paints the menubar&apos;s border if &lt;code&gt;BorderPainted&lt;/code&gt;
                  property is true.                
                <param>
                    g the <code>Graphics</code> context to use for painting                    
                </param>
                <see>
                    JComponent#paint                    
                </see>
                <see>
                    JComponent#setBorder                    
                </see>
            </javadoc>
            <method name="paintBorder" type="void" line="338">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="339"/>
            </method>
            <javadoc line="344">
                Sets the margin between the menubar&apos;s border and
                  its menus. Setting to &lt;code&gt;null&lt;/code&gt; will cause the menubar to
                  use the default margins.                
                <param>
                    m an Insets object containing the margin values                    
                </param>
                <see>
                    Insets                    
                </see>
                <beaninfo>
                    bound: true
                      attribute: visualUpdate true
                      description: The space between the menubar's border and its contents                    
                </beaninfo>
            </javadoc>
            <method name="setMargin" type="void" line="356">
                <params>
                    <param name="m" type="Insets"/>
                </params>
                <declaration name="old" type="Insets" line="357"/>
                <scope line="360"/>
            </method>
            <javadoc line="366">
                Returns the margin between the menubar&apos;s border and
                  its menus.  If there is no previous margin, it will create
                  a default margin with zero size.                
                <return>
                    an <code>Insets</code> object containing the margin values                    
                </return>
                <see>
                    Insets                    
                </see>
            </javadoc>
            <method name="getMargin" type="Insets" line="374">
                <scope line="375"/>
                <scope line="377"/>
            </method>
            <javadoc line="383">
                Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- does nothing.                
                <see>
                    #getSubElements                    
                </see>
            </javadoc>
            <method name="processMouseEvent" type="void" line="388">
                <params>
                    <param name="event" type="MouseEvent"/>
                    <param name="path" type="MenuElement"/>
                    <param name="manager" type="MenuSelectionManager"/>
                </params>
            </method>
            <javadoc line="391">
                Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- does nothing.                
                <see>
                    #getSubElements                    
                </see>
            </javadoc>
            <method name="processKeyEvent" type="void" line="396">
                <params>
                    <param name="e" type="KeyEvent"/>
                    <param name="path" type="MenuElement"/>
                    <param name="manager" type="MenuSelectionManager"/>
                </params>
            </method>
            <javadoc line="399">
                Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- does nothing.                
                <see>
                    #getSubElements                    
                </see>
            </javadoc>
            <method name="menuSelectionChanged" type="void" line="404">
                <params>
                    <param name="isIncluded" type="boolean"/>
                </params>
            </method>
            <javadoc line="407">
                Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- returns the
                  menus in this menu bar.
                  This is the reason for implementing the &lt;code&gt;MenuElement&lt;/code&gt;
                  interface -- so that the menu bar can be treated the same as
                  other menu elements.                
                <return>
                    an array of menu items in the menu bar.                    
                </return>
            </javadoc>
            <method name="getSubElements" type="MenuElement[]" line="415">
                <declaration name="result" type="MenuElement" line="416"/>
                <declaration name="tmp" type="Vector&lt;MenuElement&gt;" line="417"/>
                <declaration name="c" type="int" line="418"/>
                <declaration name="i" type="int" line="419"/>
                <declaration name="m" type="Component" line="420"/>
                <scope line="422"/>
            </method>
            <javadoc line="434">
                Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt;. Returns this object.                
                <return>
                    the current <code>Component</code> (this)                    
                </return>
                <see>
                    #getSubElements                    
                </see>
            </javadoc>
            <method name="getComponent" type="Component" line="440"/>
            <javadoc line="445">
                Returns a string representation of this &lt;code&gt;JMenuBar&lt;/code&gt;.
                  This method
                  is intended to be used only for debugging purposes, and the
                  content and format of the returned string may vary between
                  implementations. The returned string may be empty but may not
                  be &lt;code&gt;null&lt;/code&gt;.                
                <return>
                    a string representation of this <code>JMenuBar</code>                    
                </return>
            </javadoc>
            <method name="paramString" type="String" line="455">
                <declaration name="paintBorderString" type="String" line="456"/>
                <declaration name="marginString" type="String" line="458"/>
            </method>
            <javadoc line="470">
                Gets the AccessibleContext associated with this JMenuBar.
                  For JMenuBars, the AccessibleContext takes the form of an
                  AccessibleJMenuBar.
                  A new AccessibleJMenuBar instance is created if necessary.                
                <return>
                    an AccessibleJMenuBar that serves as the
                      AccessibleContext of this JMenuBar                    
                </return>
            </javadoc>
            <method name="getAccessibleContext" type="AccessibleContext" line="479">
                <scope line="480"/>
            </method>
            <class name="AccessibleJMenuBar" line="486">
                <extends class="AccessibleJComponent"/>
                <implements interface="AccessibleSelection"/>
                <javadoc line="486">
                    This class implements accessibility support for the
                      &lt;code&gt;JMenuBar&lt;/code&gt; class.  It provides an implementation of the
                      Java Accessibility API appropriate to menu bar user-interface
                      elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="504">
                    Get the accessible state set of this object.                    
                    <return>
                        an instance of AccessibleState containing the current state
                          of the object                        
                    </return>
                </javadoc>
                <method name="getAccessibleStateSet" type="AccessibleStateSet" line="510">
                    <declaration name="states" type="AccessibleStateSet" line="511"/>
                </method>
                <javadoc line="515">
                    Get the role of this object.                    
                    <return>
                        an instance of AccessibleRole describing the role of the
                          object                        
                    </return>
                </javadoc>
                <method name="getAccessibleRole" type="AccessibleRole" line="521"/>
                <javadoc line="525">
                    Get the AccessibleSelection associated with this object.  In the
                      implementation of the Java Accessibility API for this class,
                      return this object, which is responsible for implementing the
                      AccessibleSelection interface on behalf of itself.                    
                    <return>
                        this object                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelection" type="AccessibleSelection" line="533"/>
                <javadoc line="537">
                    Returns 1 if a menu is currently selected in this menu bar.                    
                    <return>
                        1 if a menu is currently selected, else 0                        
                    </return>
                </javadoc>
                <method name="getAccessibleSelectionCount" type="int" line="542">
                    <scope line="543"/>
                    <scope line="545"/>
                </method>
                <javadoc line="550">
                    Returns the currently selected menu if one is selected,
                      otherwise null.                    
                </javadoc>
                <method name="getAccessibleSelection" type="Accessible" line="554">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="557">
                        single selection model for JMenuBar                        
                    </comment>
                    <scope line="555">
                        <scope line="556"/>
                        <declaration name="j" type="int" line="559"/>
                        <scope line="560"/>
                    </scope>
                </method>
                <javadoc line="567">
                    Returns true if the current child of this object is selected.                    
                    <param>
                        i the zero-based index of the child in this Accessible
                          object.                        
                    </param>
                    <see>
                        AccessibleContext#getAccessibleChild                        
                    </see>
                </javadoc>
                <method name="isAccessibleChildSelected" type="boolean" line="574">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <javadoc line="578">
                    Selects the nth menu in the menu bar, forcing it to
                      pop up.  If another menu is popped up, this will force
                      it to close.  If the nth menu is already selected, this
                      method has no effect.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                    <see>
                        #getAccessibleStateSet                        
                    </see>
                </javadoc>
                <method name="addAccessibleSelection" type="void" line="587">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="589">
                        first close up any open menu                        
                    </comment>
                    <comment line="598">
                        menu.setPopupMenuVisible(false);                        
                    </comment>
                    <comment line="601">
                        now popup the new menu                        
                    </comment>
                    <comment line="610">
                        menu.setPopupMenuVisible(true);                        
                    </comment>
                    <declaration name="j" type="int" line="589"/>
                    <scope line="590"/>
                    <scope line="593">
                        <declaration name="menu" type="JMenu" line="594"/>
                        <scope line="595"/>
                    </scope>
                    <declaration name="menu" type="JMenu" line="602"/>
                    <scope line="603">
                        <declaration name="me" type="MenuElement" line="604"/>
                    </scope>
                </method>
                <javadoc line="613">
                    Removes the nth selected item in the object from the object&apos;s
                      selection.  If the nth item isn&apos;t currently selected, this
                      method has no effect.  Otherwise, it closes the popup menu.                    
                    <param>
                        i the zero-based index of selectable items                        
                    </param>
                </javadoc>
                <method name="removeAccessibleSelection" type="void" line="620">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                    <comment line="626">
                        menu.setPopupMenuVisible(false);                        
                    </comment>
                    <scope line="621">
                        <declaration name="menu" type="JMenu" line="622"/>
                        <scope line="623"/>
                    </scope>
                </method>
                <javadoc line="631">
                    Clears the selection in the object, so that nothing in the
                      object is selected.  This will close any open menu.                    
                </javadoc>
                <method name="clearAccessibleSelection" type="void" line="635">
                    <comment line="642">
                        menu.setPopupMenuVisible(false);                        
                    </comment>
                    <declaration name="i" type="int" line="636"/>
                    <scope line="637">
                        <declaration name="menu" type="JMenu" line="638"/>
                        <scope line="639"/>
                    </scope>
                </method>
                <javadoc line="647">
                    Normally causes every selected item in the object to be selected
                      if the object supports multiple selections.  This method
                      makes no sense in a menu bar, and so does nothing.                    
                </javadoc>
                <method name="selectAllAccessibleSelection" type="void" line="652"/>
            </class>
            <javadoc line="657">
                Subclassed to check all the child menus.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="processKeyBinding" type="boolean" line="662">
                <params>
                    <param name="ks" type="KeyStroke"/>
                    <param name="e" type="KeyEvent"/>
                    <param name="condition" type="int"/>
                    <param name="pressed" type="boolean"/>
                </params>
                <comment line="664">
                    See if we have a local binding.                    
                </comment>
                <declaration name="retValue" type="boolean" line="664"/>
                <scope line="665">
                    <declaration name="subElements" type="MenuElement[]" line="666"/>
                    <scope line="667">
                        <scope line="669"/>
                    </scope>
                </scope>
            </method>
            <method name="processBindingForKeyStrokeRecursive" type="boolean" line="678">
                <params>
                    <param name="elem" type="MenuElement"/>
                    <param name="ks" type="KeyStroke"/>
                    <param name="e" type="KeyEvent"/>
                    <param name="condition" type="int"/>
                    <param name="pressed" type="boolean"/>
                </params>
                <comment line="700">
                    We don&apos;t, pass along to children JMenu&apos;s                    
                </comment>
                <scope line="679"/>
                <declaration name="c" type="Component" line="683"/>
                <scope line="685"/>
                <scope line="690"/>
                <declaration name="subElements" type="MenuElement[]" line="695"/>
                <scope line="696">
                    <scope line="697"/>
                </scope>
            </method>
            <javadoc line="705">
                Overrides &lt;code&gt;JComponent.addNotify&lt;/code&gt; to register this
                  menu bar with the current keyboard manager.                
            </javadoc>
            <method name="addNotify" type="void" line="709"/>
            <javadoc line="714">
                Overrides &lt;code&gt;JComponent.removeNotify&lt;/code&gt; to unregister this
                  menu bar with the current keyboard manager.                
            </javadoc>
            <method name="removeNotify" type="void" line="718"/>
            <method name="writeObject" type="void" line="724">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
                <scope line="726">
                    <declaration name="count" type="byte" line="727"/>
                    <scope line="729"/>
                </scope>
                <declaration name="kvData" type="Object[]" line="734"/>
                <declaration name="n" type="int" line="735"/>
                <scope line="737"/>
            </method>
            <javadoc line="746">
                See JComponent.readObject() for information about serialization
                  in Swing.                
            </javadoc>
            <method name="readObject" type="void" line="751">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <declaration name="kvData" type="Object[]" line="753"/>
                <scope line="755">
                    <scope line="756"/>
                    <scope line="759"/>
                </scope>
            </method>
        </class>
    </source>