<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <class name="MaskFormatter" line="6">
            <extends class="DefaultFormatter"/>
            <javadoc line="6">
                &lt;code&gt;MaskFormatter&lt;/code&gt; is used to format and edit strings. The behavior
                  of a &lt;code&gt;MaskFormatter&lt;/code&gt; is controlled by way of a String mask
                  that specifies the valid characters that can be contained at a particular
                  location in the &lt;code&gt;Document&lt;/code&gt; model. The following characters can
                  be specified:
                  &lt;table border=1 summary=&quot;Valid characters and their descriptions&quot;&gt;
                  &lt;tr&gt;
                  &lt;th&gt;Character&amp;nbsp;&lt;/th&gt;
                  &lt;th&gt;&lt;p align=&quot;left&quot;&gt;Description&lt;/p&gt;&lt;/th&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;#&lt;/td&gt;
                  &lt;td&gt;Any valid number, uses &lt;code&gt;Character.isDigit&lt;/code&gt;.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;&apos;&lt;/td&gt;
                  &lt;td&gt;Escape character, used to escape any of the
                  special formatting characters.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;
                  &lt;td&gt;U&lt;/td&gt;&lt;td&gt;Any character (&lt;code&gt;Character.isLetter&lt;/code&gt;). All
                  lowercase letters are mapped to upper case.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;L&lt;/td&gt;&lt;td&gt;Any character (&lt;code&gt;Character.isLetter&lt;/code&gt;). All
                  upper case letters are mapped to lower case.&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;A&lt;/td&gt;&lt;td&gt;Any character or number (&lt;code&gt;Character.isLetter&lt;/code&gt;
                  or &lt;code&gt;Character.isDigit&lt;/code&gt;)&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;?&lt;/td&gt;&lt;td&gt;Any character
                  (&lt;code&gt;Character.isLetter&lt;/code&gt;).&lt;/td&gt;
                  &lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;Anything.&lt;/td&gt;&lt;/tr&gt;
                  &lt;tr&gt;&lt;td&gt;H&lt;/td&gt;&lt;td&gt;Any hex character (0-9, a-f or A-F).&lt;/td&gt;&lt;/tr&gt;
                  &lt;/table&gt;
                  &lt;p&gt;
                  Typically characters correspond to one char, but in certain languages this
                  is not the case. The mask is on a per character basis, and will thus
                  adjust to fit as many chars as are needed.
                  &lt;p&gt;
                  You can further restrict the characters that can be input by the
                  &lt;code&gt;setInvalidCharacters&lt;/code&gt; and &lt;code&gt;setValidCharacters&lt;/code&gt;
                  methods. &lt;code&gt;setInvalidCharacters&lt;/code&gt; allows you to specify
                  which characters are not legal. &lt;code&gt;setValidCharacters&lt;/code&gt; allows
                  you to specify which characters are valid. For example, the following
                  code block is equivalent to a mask of &apos;0xHHH&apos; with no invalid/valid
                  characters:
                  &lt;pre&gt;
                  MaskFormatter formatter = new MaskFormatter(&quot;0x&quot;);
                  formatter.setValidCharacters(&quot;0123456789abcdefABCDEF&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  When initially formatting a value if the length of the string is
                  less than the length of the mask, two things can happen. Either
                  the placeholder string will be used, or the placeholder character will
                  be used. Precedence is given to the placeholder string. For example:
                  &lt;pre&gt;
                  MaskFormatter formatter = new MaskFormatter(&quot;###-####&quot;);
                  formatter.setPlaceholderCharacter(&apos;_&apos;);
                  formatter.getDisplayValue(tf, &quot;123&quot;);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  Would result in the string &apos;123-____&apos;. If
                  &lt;code&gt;setPlaceholder(&quot;555-1212&quot;)&lt;/code&gt; was invoked &apos;123-1212&apos; would
                  result. The placeholder String is only used on the initial format,
                  on subsequent formats only the placeholder character will be used.
                  &lt;p&gt;
                  If a &lt;code&gt;MaskFormatter&lt;/code&gt; is configured to only allow valid characters
                  (&lt;code&gt;setAllowsInvalid(false)&lt;/code&gt;) literal characters will be skipped as
                  necessary when editing. Consider a &lt;code&gt;MaskFormatter&lt;/code&gt; with
                  the mask &quot;###-####&quot; and current value &quot;555-1212&quot;. Using the right
                  arrow key to navigate through the field will result in (| indicates the
                  position of the caret):
                  &lt;pre&gt;
                  |555-1212
                  5|55-1212
                  55|5-1212
                  555-|1212
                  555-1|212
                  &lt;/pre&gt;
                  The &apos;-&apos; is a literal (non-editable) character, and is skipped.
                  &lt;p&gt;
                  Similar behavior will result when editing. Consider inserting the string
                  &apos;123-45&apos; and &apos;12345&apos; into the &lt;code&gt;MaskFormatter&lt;/code&gt; in the
                  previous example. Both inserts will result in the same String,
                  &apos;123-45__&apos;. When &lt;code&gt;MaskFormatter&lt;/code&gt;
                  is processing the insert at character position 3 (the &apos;-&apos;), two things can
                  happen:
                  &lt;ol&gt;
                  &lt;li&gt;If the inserted character is &apos;-&apos;, it is accepted.
                  &lt;li&gt;If the inserted character matches the mask for the next non-literal
                  character, it is accepted at the new location.
                  &lt;li&gt;Anything else results in an invalid edit
                  &lt;/ol&gt;
                  &lt;p&gt;
                  By default &lt;code&gt;MaskFormatter&lt;/code&gt; will not allow invalid edits, you can
                  change this with the &lt;code&gt;setAllowsInvalid&lt;/code&gt; method, and will
                  commit edits on valid edits (use the &lt;code&gt;setCommitsOnValidEdit&lt;/code&gt; to
                  change this).
                  &lt;p&gt;
                  By default, &lt;code&gt;MaskFormatter&lt;/code&gt; is in overwrite mode. That is as
                  characters are typed a new character is not inserted, rather the character
                  at the current location is replaced with the newly typed character. You
                  can change this behavior by way of the method &lt;code&gt;setOverwriteMode&lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="DIGIT_KEY" type="char" line="123"/>
            <declaration name="LITERAL_KEY" type="char" line="124"/>
            <declaration name="UPPERCASE_KEY" type="char" line="125"/>
            <declaration name="LOWERCASE_KEY" type="char" line="126"/>
            <declaration name="ALPHA_NUMERIC_KEY" type="char" line="127"/>
            <declaration name="CHARACTER_KEY" type="char" line="128"/>
            <declaration name="ANYTHING_KEY" type="char" line="129"/>
            <declaration name="HEX_KEY" type="char" line="130"/>
            <declaration name="EmptyMaskChars" type="MaskCharacter[]" line="131"/>
            <declaration name="mask" type="String" line="132"/>
            <javadoc line="132">
                The user specified mask.                
            </javadoc>
            <declaration name="maskChars" type="MaskCharacter[]" line="136"/>
            <declaration name="validCharacters" type="String" line="137"/>
            <javadoc line="137">
                List of valid characters.                
            </javadoc>
            <declaration name="invalidCharacters" type="String" line="141"/>
            <javadoc line="141">
                List of invalid characters.                
            </javadoc>
            <declaration name="placeholderString" type="String" line="145"/>
            <javadoc line="145">
                String used for the passed in value if it does not completely
                  fill the mask.                
            </javadoc>
            <declaration name="placeholder" type="char" line="150"/>
            <javadoc line="150">
                String used to represent characters not present.                
            </javadoc>
            <declaration name="containsLiteralChars" type="boolean" line="154"/>
            <javadoc line="154">
                Indicates if the value contains the literal characters.                
            </javadoc>
            <javadoc line="158">
                Creates a MaskFormatter with no mask.                
            </javadoc>
            <method name="MaskFormatter" type="constructor" line="161"/>
            <javadoc line="167">
                Creates a &lt;code&gt;MaskFormatter&lt;/code&gt; with the specified mask.
                  A &lt;code&gt;ParseException&lt;/code&gt;
                  will be thrown if &lt;code&gt;mask&lt;/code&gt; is an invalid mask.                
                <throws>
                    ParseException if mask does not contain valid mask characters                    
                </throws>
            </javadoc>
            <method name="MaskFormatter" type="constructor" line="173">
                <params>
                    <param name="mask" type="String"/>
                </params>
            </method>
            <javadoc line="177">
                Sets the mask dictating the legal characters.
                  This will throw a &lt;code&gt;ParseException&lt;/code&gt; if &lt;code&gt;mask&lt;/code&gt; is
                  not valid.                
                <throws>
                    ParseException if mask does not contain valid mask characters                    
                </throws>
            </javadoc>
            <method name="setMask" type="void" line="183">
                <params>
                    <param name="mask" type="String"/>
                </params>
            </method>
            <javadoc line="187">
                Returns the formatting mask.                
                <return>
                    Mask dictating legal character values.                    
                </return>
            </javadoc>
            <method name="getMask" type="String" line="191"/>
            <javadoc line="194">
                Allows for further restricting of the characters that can be input.
                  Only characters specified in the mask, not in the
                  &lt;code&gt;invalidCharacters&lt;/code&gt;, and in
                  &lt;code&gt;validCharacters&lt;/code&gt; will be allowed to be input. Passing
                  in null (the default) implies the valid characters are only bound
                  by the mask and the invalid characters.                
                <param>
                    validCharacters If non-null, specifies legal characters.                    
                </param>
            </javadoc>
            <method name="setValidCharacters" type="void" line="203">
                <params>
                    <param name="validCharacters" type="String"/>
                </params>
            </method>
            <javadoc line="206">
                Returns the valid characters that can be input.                
                <return>
                    Legal characters                    
                </return>
            </javadoc>
            <method name="getValidCharacters" type="String" line="210"/>
            <javadoc line="213">
                Allows for further restricting of the characters that can be input.
                  Only characters specified in the mask, not in the
                  &lt;code&gt;invalidCharacters&lt;/code&gt;, and in
                  &lt;code&gt;validCharacters&lt;/code&gt; will be allowed to be input. Passing
                  in null (the default) implies the valid characters are only bound
                  by the mask and the valid characters.                
                <param>
                    invalidCharacters If non-null, specifies illegal characters.                    
                </param>
            </javadoc>
            <method name="setInvalidCharacters" type="void" line="222">
                <params>
                    <param name="invalidCharacters" type="String"/>
                </params>
            </method>
            <javadoc line="225">
                Returns the characters that are not valid for input.                
                <return>
                    illegal characters.                    
                </return>
            </javadoc>
            <method name="getInvalidCharacters" type="String" line="229"/>
            <javadoc line="232">
                Sets the string to use if the value does not completely fill in
                  the mask. A null value implies the placeholder char should be used.                
                <param>
                    placeholder String used when formatting if the value does not
                      completely fill the mask                    
                </param>
            </javadoc>
            <method name="setPlaceholder" type="void" line="238">
                <params>
                    <param name="placeholder" type="String"/>
                </params>
            </method>
            <javadoc line="241">
                Returns the String to use if the value does not completely fill
                  in the mask.                
                <return>
                    String used when formatting if the value does not
                      completely fill the mask                    
                </return>
            </javadoc>
            <method name="getPlaceholder" type="String" line="247"/>
            <javadoc line="250">
                Sets the character to use in place of characters that are not present
                  in the value, ie the user must fill them in. The default value is
                  a space.
                  &lt;p&gt;
                  This is only applicable if the placeholder string has not been
                  specified, or does not completely fill in the mask.                
                <param>
                    placeholder Character used when formatting if the value does not
                      completely fill the mask                    
                </param>
            </javadoc>
            <method name="setPlaceholderCharacter" type="void" line="260">
                <params>
                    <param name="placeholder" type="char"/>
                </params>
            </method>
            <javadoc line="263">
                Returns the character to use in place of characters that are not present
                  in the value, ie the user must fill them in.                
                <return>
                    Character used when formatting if the value does not
                      completely fill the mask                    
                </return>
            </javadoc>
            <method name="getPlaceholderCharacter" type="char" line="269"/>
            <javadoc line="272">
                If true, the returned value and set value will also contain the literal
                  characters in mask.
                  &lt;p&gt;
                  For example, if the mask is &lt;code&gt;&apos;(###) ###-####&apos;&lt;/code&gt;, the
                  current value is &lt;code&gt;&apos;(415) 555-1212&apos;&lt;/code&gt;, and
                  &lt;code&gt;valueContainsLiteralCharacters&lt;/code&gt; is
                  true &lt;code&gt;stringToValue&lt;/code&gt; will return
                  &lt;code&gt;&apos;(415) 555-1212&apos;&lt;/code&gt;. On the other hand, if
                  &lt;code&gt;valueContainsLiteralCharacters&lt;/code&gt; is false,
                  &lt;code&gt;stringToValue&lt;/code&gt; will return &lt;code&gt;&apos;4155551212&apos;&lt;/code&gt;.                
                <param>
                    containsLiteralChars Used to indicate if literal characters in
                      mask should be returned in stringToValue                    
                </param>
            </javadoc>
            <method name="setValueContainsLiteralCharacters" type="void" line="286">
                <params>
                    <param name="containsLiteralChars" type="boolean"/>
                </params>
            </method>
            <javadoc line="289">
                Returns true if &lt;code&gt;stringToValue&lt;/code&gt; should return literal
                  characters in the mask.                
                <return>
                    True if literal characters in mask should be returned in
                      stringToValue                    
                </return>
            </javadoc>
            <method name="getValueContainsLiteralCharacters" type="boolean" line="295"/>
            <javadoc line="298">
                Parses the text, returning the appropriate Object representation of
                  the String &lt;code&gt;value&lt;/code&gt;. This strips the literal characters as
                  necessary and invokes supers &lt;code&gt;stringToValue&lt;/code&gt;, so that if
                  you have specified a value class (&lt;code&gt;setValueClass&lt;/code&gt;) an
                  instance of it will be created. This will throw a
                  &lt;code&gt;ParseException&lt;/code&gt; if the value does not match the current
                  mask.  Refer to {@link #setValueContainsLiteralCharacters} for details
                  on how literals are treated.                
                <throws>
                    ParseException if there is an error in the conversion                    
                </throws>
                <param>
                    value String to convert                    
                </param>
                <see>
                    #setValueContainsLiteralCharacters                    
                </see>
                <return>
                    Object representation of text                    
                </return>
            </javadoc>
            <method name="stringToValue" type="Object" line="312">
                <params>
                    <param name="value" type="String"/>
                </params>
            </method>
            <javadoc line="315">
                Returns a String representation of the Object &lt;code&gt;value&lt;/code&gt;
                  based on the mask.  Refer to{@link #setValueContainsLiteralCharacters} for details
                  on how literals are treated.                
                <throws>
                    ParseException if there is an error in the conversion                    
                </throws>
                <param>
                    value Value to convert                    
                </param>
                <see>
                    #setValueContainsLiteralCharacters                    
                </see>
                <return>
                    String representation of value                    
                </return>
            </javadoc>
            <method name="valueToString" type="String" line="324">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="sValue" type="String" line="325"/>
                <declaration name="result" type="StringBuilder" line="326"/>
                <declaration name="placeholder" type="String" line="327"/>
                <declaration name="valueCounter" type="int[]" line="328"/>
            </method>
            <javadoc line="332">
                Installs the &lt;code&gt;DefaultFormatter&lt;/code&gt; onto a particular
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  This will invoke &lt;code&gt;valueToString&lt;/code&gt; to convert the
                  current value from the &lt;code&gt;JFormattedTextField&lt;/code&gt; to
                  a String. This will then install the &lt;code&gt;Action&lt;/code&gt;s from
                  &lt;code&gt;getActions&lt;/code&gt;, the &lt;code&gt;DocumentFilter&lt;/code&gt;
                  returned from &lt;code&gt;getDocumentFilter&lt;/code&gt; and the
                  &lt;code&gt;NavigationFilter&lt;/code&gt; returned from
                  &lt;code&gt;getNavigationFilter&lt;/code&gt; onto the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  Subclasses will typically only need to override this if they
                  wish to install additional listeners on the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  If there is a &lt;code&gt;ParseException&lt;/code&gt; in converting the
                  current value to a String, this will set the text to an empty
                  String, and mark the &lt;code&gt;JFormattedTextField&lt;/code&gt; as being
                  in an invalid state.
                  &lt;p&gt;
                  While this is a public method, this is typically only useful
                  for subclassers of &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; will invoke this method at
                  the appropriate times when the value changes, or its internal
                  state changes.                
                <param>
                    ftf JFormattedTextField to format for, may be null indicating
                      uninstall from current JFormattedTextField.                    
                </param>
            </javadoc>
            <method name="install" type="void" line="361">
                <params>
                    <param name="ftf" type="JFormattedTextField"/>
                </params>
                <scope line="363">
                    <declaration name="value" type="Object" line="364"/>
                    <scope line="365"/>
                    <scope line="368"/>
                </scope>
            </method>
            <javadoc line="373">
                Actual &lt;code&gt;stringToValue&lt;/code&gt; implementation.
                  If &lt;code&gt;completeMatch&lt;/code&gt; is true, the value must exactly match
                  the mask, on the other hand if &lt;code&gt;completeMatch&lt;/code&gt; is false
                  the string must match the mask or the placeholder string.                
            </javadoc>
            <method name="stringToValue" type="Object" line="379">
                <params>
                    <param name="value" type="String"/>
                    <param name="completeMatch" type="boolean"/>
                </params>
                <declaration name="errorOffset" type="int" line="380"/>
                <scope line="381">
                    <scope line="382"/>
                </scope>
            </method>
            <javadoc line="389">
                Returns -1 if the passed in string is valid, otherwise the index of
                  the first bogus character is returned.                
            </javadoc>
            <method name="getInvalidOffset" type="int" line="393">
                <params>
                    <param name="string" type="String"/>
                    <param name="completeMatch" type="boolean"/>
                </params>
                <declaration name="iLength" type="int" line="394"/>
                <scope line="395"/>
                <scope line="398">
                    <declaration name="aChar" type="char" line="399"/>
                    <scope line="400"/>
                </scope>
            </method>
            <javadoc line="406">
                Invokes &lt;code&gt;append&lt;/code&gt; on the mask characters in
                  &lt;code&gt;mask&lt;/code&gt;.                
            </javadoc>
            <method name="append" type="void" line="410">
                <params>
                    <param name="result" type="StringBuilder"/>
                    <param name="value" type="String"/>
                    <param name="index" type="int[]"/>
                    <param name="placeholder" type="String"/>
                    <param name="mask" type="MaskCharacter[]"/>
                </params>
                <scope line="411"/>
            </method>
            <javadoc line="415">
                Updates the internal representation of the mask.                
            </javadoc>
            <method name="updateInternalMask" type="void" line="418">
                <declaration name="mask" type="String" line="419"/>
                <declaration name="fixed" type="ArrayList&amp;lt;MaskCharacter&amp;gt;" line="420"/>
                <declaration name="temp" type="ArrayList&amp;lt;MaskCharacter&amp;gt;" line="421"/>
                <scope line="422">
                    <scope line="423">
                        <declaration name="maskChar" type="char" line="424"/>
                        <scope line="430"/>
                    </scope>
                </scope>
                <scope line="459"/>
                <scope line="462"/>
            </method>
            <javadoc line="467">
                Returns the MaskCharacter at the specified location.                
            </javadoc>
            <method name="getMaskCharacter" type="MaskCharacter" line="470">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="471"/>
            </method>
            <javadoc line="476">
                Returns true if the placeholder character matches aChar.                
            </javadoc>
            <method name="isPlaceholder" type="boolean" line="479">
                <params>
                    <param name="index" type="int"/>
                    <param name="aChar" type="char"/>
                </params>
            </method>
            <javadoc line="482">
                Returns true if the passed in character matches the mask at the
                  specified location.                
            </javadoc>
            <method name="isValidCharacter" type="boolean" line="486">
                <params>
                    <param name="index" type="int"/>
                    <param name="aChar" type="char"/>
                </params>
            </method>
            <javadoc line="489">
                Returns true if the character at the specified location is a literal,
                  that is it can not be edited.                
            </javadoc>
            <method name="isLiteral" type="boolean" line="493">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="496">
                Returns the maximum length the text can be.                
            </javadoc>
            <method name="getMaxLength" type="int" line="499"/>
            <javadoc line="502">
                Returns the literal character at the specified location.                
            </javadoc>
            <method name="getLiteral" type="char" line="505">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="508">
                Returns the character to insert at the specified location based on
                  the passed in character.  This provides a way to map certain sets
                  of characters to alternative values (lowercase to
                  uppercase...).                
            </javadoc>
            <method name="getCharacter" type="char" line="514">
                <params>
                    <param name="index" type="int"/>
                    <param name="aChar" type="char"/>
                </params>
            </method>
            <javadoc line="517">
                Removes the literal characters from the passed in string.                
            </javadoc>
            <method name="stripLiteralChars" type="String" line="520">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="sb" type="StringBuilder" line="521"/>
                <declaration name="last" type="int" line="522"/>
                <scope line="523">
                    <scope line="524">
                        <scope line="525">
                            <scope line="527"/>
                        </scope>
                        <scope line="532"/>
                    </scope>
                </scope>
                <scope line="538"/>
                <scope line="541">
                    <scope line="542"/>
                </scope>
            </method>
            <javadoc line="549">
                Subclassed to update the internal representation of the mask after
                  the default read operation has completed.                
            </javadoc>
            <method name="readObject" type="void" line="553">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="555"/>
                <scope line="558"/>
            </method>
            <javadoc line="561">
                Returns true if the MaskFormatter allows invalid, or
                  the offset is less than the max length and the character at
                  &lt;code&gt;offset&lt;/code&gt; is a literal.                
            </javadoc>
            <method name="isNavigatable" type="boolean" line="566">
                <params>
                    <param name="offset" type="int"/>
                </params>
                <scope line="567"/>
            </method>
            <method name="isValidEdit" type="boolean" line="572">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
                <scope line="573">
                    <declaration name="newString" type="String" line="574"/>
                    <scope line="575"/>
                    <scope line="579"/>
                </scope>
            </method>
            <javadoc line="585">
                This method does the following (assuming !getAllowsInvalid()):
                  iterate over the max of the deleted region or the text length, for
                  each character:
                  &lt;ol&gt;
                  &lt;li&gt;If it is valid (matches the mask at the particular position, or
                  matches the literal character at the position), allow it
                  &lt;li&gt;Else if the position identifies a literal character, add it. This
                  allows for the user to paste in text that may/may not contain
                  the literals.  For example, in pasing in 5551212 into ###-####
                  when the 1 is evaluated it is illegal (by the first test), but there
                  is a literal at this position (-), so it is used.  NOTE: This has
                  a problem that you can&apos;t tell (without looking ahead) if you should
                  eat literals in the text. For example, if you paste &apos;555&apos; into
                  #5##, should it result in &apos;5555&apos; or &apos;555 &apos;? The current code will
                  result in the latter, which feels a little better as selecting
                  text than pasting will always result in the same thing.
                  &lt;li&gt;Else if at the end of the inserted text, the replace the item with
                  the placeholder
                  &lt;li&gt;Otherwise the insert is bogus and false is returned.
                  &lt;/ol&gt;                
            </javadoc>
            <method name="canReplace" type="boolean" line="607">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
                <scope line="608">
                    <declaration name="replace" type="StringBuilder" line="609"/>
                    <declaration name="text" type="String" line="610"/>
                    <declaration name="tl" type="int" line="611"/>
                    <scope line="612">
                        <scope line="613"/>
                    </scope>
                    <declaration name="max" type="int" line="617"/>
                    <scope line="618">
                        <scope line="619">
                            <declaration name="aChar" type="char" line="620"/>
                            <scope line="621">
                                <scope line="622">
                                    <scope line="624"/>
                                </scope>
                            </scope>
                            <scope line="629"/>
                        </scope>
                        <scope line="634">
                            <scope line="635">
                                <scope line="637"/>
                            </scope>
                            <scope line="641">
                                <scope line="645"/>
                                <scope line="648"/>
                            </scope>
                            <scope line="652"/>
                        </scope>
                        <scope line="659">
                            <scope line="660">
                                <scope line="662"/>
                            </scope>
                            <scope line="667"/>
                        </scope>
                        <scope line="671"/>
                    </scope>
                    <scope line="675"/>
                    <scope line="678"/>
                    <scope line="681"/>
                </scope>
            </method>
            <class name="MaskCharacter" line="687">
                <javadoc line="688">
                    Subclasses should override this returning true if the instance
                      represents a literal character. The default implementation
                      returns false.                    
                </javadoc>
                <method name="isLiteral" type="boolean" line="693"/>
                <javadoc line="696">
                    Returns true if &lt;code&gt;aChar&lt;/code&gt; is a valid reprensentation of
                      the receiver. The default implementation returns true if the
                      receiver represents a literal character and &lt;code&gt;getChar&lt;/code&gt;
                      == aChar. Otherwise, this will return true is &lt;code&gt;aChar&lt;/code&gt;
                      is contained in the valid characters and not contained
                      in the invalid characters.                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="704">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                    <scope line="705"/>
                    <declaration name="filter" type="String" line="709"/>
                    <scope line="710"/>
                    <scope line="714"/>
                </method>
                <javadoc line="719">
                    Returns the character to insert for &lt;code&gt;aChar&lt;/code&gt;. The
                      default implementation returns &lt;code&gt;aChar&lt;/code&gt;. Subclasses
                      that wish to do some sort of mapping, perhaps lower case to upper
                      case should override this and do the necessary mapping.                    
                </javadoc>
                <method name="getChar" type="char" line="725">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
                <javadoc line="728">
                    Appends the necessary character in &lt;code&gt;formatting&lt;/code&gt; at
                      &lt;code&gt;index&lt;/code&gt; to &lt;code&gt;buff&lt;/code&gt;.                    
                </javadoc>
                <method name="append" type="void" line="732">
                    <params>
                        <param name="buff" type="StringBuilder"/>
                        <param name="formatting" type="String"/>
                        <param name="index" type="int[]"/>
                        <param name="placeholder" type="String"/>
                    </params>
                    <declaration name="inString" type="boolean" line="733"/>
                    <declaration name="aChar" type="char" line="734"/>
                    <scope line="735">
                        <scope line="737">
                            <scope line="738"/>
                        </scope>
                    </scope>
                    <scope line="744">
                        <scope line="745"/>
                        <scope line="748"/>
                    </scope>
                    <scope line="753"/>
                    <scope line="757"/>
                </method>
            </class>
            <class name="LiteralCharacter" line="762">
                <extends class="MaskCharacter"/>
                <javadoc line="762">
                    Used to represent a fixed character in the mask.                    
                </javadoc>
                <declaration name="fixedChar" type="char" line="766"/>
                <method name="LiteralCharacter" type="constructor" line="767">
                    <params>
                        <param name="fixedChar" type="char"/>
                    </params>
                </method>
                <method name="isLiteral" type="boolean" line="770"/>
                <method name="getChar" type="char" line="773">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
            </class>
            <class name="DigitMaskCharacter" line="777">
                <extends class="MaskCharacter"/>
                <javadoc line="777">
                    Represents a number, uses &lt;code&gt;Character.isDigit&lt;/code&gt;.                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="781">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
            </class>
            <class name="UpperCaseCharacter" line="785">
                <extends class="MaskCharacter"/>
                <javadoc line="785">
                    Represents a character, lower case letters are mapped to upper case
                      using &lt;code&gt;Character.toUpperCase&lt;/code&gt;.                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="790">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
                <method name="getChar" type="char" line="793">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
            </class>
            <class name="LowerCaseCharacter" line="797">
                <extends class="MaskCharacter"/>
                <javadoc line="797">
                    Represents a character, upper case letters are mapped to lower case
                      using &lt;code&gt;Character.toLowerCase&lt;/code&gt;.                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="802">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
                <method name="getChar" type="char" line="805">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
            </class>
            <class name="AlphaNumericCharacter" line="809">
                <extends class="MaskCharacter"/>
                <javadoc line="809">
                    Represents either a character or digit, uses
                      &lt;code&gt;Character.isLetterOrDigit&lt;/code&gt;.                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="814">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
            </class>
            <class name="CharCharacter" line="818">
                <extends class="MaskCharacter"/>
                <javadoc line="818">
                    Represents a letter, uses &lt;code&gt;Character.isLetter&lt;/code&gt;.                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="822">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
            </class>
            <class name="HexCharacter" line="826">
                <extends class="MaskCharacter"/>
                <javadoc line="826">
                    Represents a hex character, 0-9a-fA-F. a-f is mapped to A-F                    
                </javadoc>
                <method name="isValidCharacter" type="boolean" line="830">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                </method>
                <method name="getChar" type="char" line="833">
                    <params>
                        <param name="aChar" type="char"/>
                    </params>
                    <scope line="834"/>
                </method>
            </class>
        </class>
    </source>