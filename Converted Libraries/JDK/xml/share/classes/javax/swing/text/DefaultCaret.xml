<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.awt.event"/>
        <import package="java.awt.datatransfer"/>
        <import package="java.beans"/>
        <import package="java.awt.event.ActionEvent"/>
        <import package="java.awt.event.ActionListener"/>
        <import package="java.io"/>
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.plaf"/>
        <import package="java.util.EventListener"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="DefaultCaret" line="14">
            <extends class="Rectangle"/>
            <implements interface="Caret"/>
            <implements interface="FocusListener"/>
            <implements interface="MouseListener"/>
            <implements interface="MouseMotionListener"/>
            <javadoc line="14">
                A default implementation of Caret.  The caret is rendered as
                  a vertical line in the color specified by the CaretColor property
                  of the associated JTextComponent.  It can blink at the rate specified
                  by the BlinkRate property.
                  &lt;p&gt;
                  This implementation expects two sources of asynchronous notification.
                  The timer thread fires asynchronously, and causes the caret to simply
                  repaint the most recent bounding box.  The caret also tracks change
                  as the document is modified.  Typically this will happen on the
                  event dispatch thread as a result of some mouse or keyboard event.
                  The caret behavior on both synchronous and asynchronous documents updates
                  is controlled by &lt;code&gt;UpdatePolicy&lt;/code&gt; property. The repaint of the
                  new caret location will occur on the event thread in any case, as calls to
                  &lt;code&gt;modelToView&lt;/code&gt; are only safe on the event thread.
                  &lt;p&gt;
                  The caret acts as a mouse and focus listener on the text component
                  it has been installed in, and defines the caret semantics based upon
                  those events.  The listener methods can be reimplemented to change the
                  semantics.
                  By default, the first mouse button will be used to set focus and caret
                  position.  Dragging the mouse pointer with the first mouse button will
                  sweep out a selection that is contiguous in the model.  If the associated
                  text component is editable, the caret will become visible when focus
                  is gained, and invisible when focus is lost.
                  &lt;p&gt;
                  The Highlighter bound to the associated text component is used to
                  render the selection by default.
                  Selection appearance can be customized by supplying a
                  painter to use for the highlights.  By default a painter is used that
                  will render a solid color as specified in the associated text component
                  in the &lt;code&gt;SelectionColor&lt;/code&gt; property.  This can easily be changed
                  by reimplementing the{@link #getSelectionPainter getSelectionPainter}method.
                  &lt;p&gt;
                  A customized caret appearance can be achieved by reimplementing
                  the paint method.  If the paint method is changed, the damage method
                  should also be reimplemented to cause a repaint for the area needed
                  to render the caret.  The caret extends the Rectangle class which
                  is used to hold the bounding box for where the caret was last rendered.
                  This enables the caret to repaint in a thread-safe manner when the
                  caret moves without making a call to modelToView which is unstable
                  between model updates and view repair (i.e. the order of delivery
                  to DocumentListeners is not guaranteed).
                  &lt;p&gt;
                  The magic caret position is set to null when the caret position changes.
                  A timer is used to determine the new location (after the caret change).
                  When the timer fires, if the magic caret position is still null it is
                  reset to the current caret position. Any actions that change
                  the caret position and want the magic caret position to remain the
                  same, must remember the magic caret position, change the cursor, and
                  then set the magic caret position to its original value. This has the
                  benefit that only actions that want the magic caret position to persist
                  (such as open/down) need to know about it.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    Caret                    
                </see>
            </javadoc>
            <declaration name="UPDATE_WHEN_ON_EDT" type="int" line="80"/>
            <javadoc line="80">
                Indicates that the caret position is to be updated only when
                  document changes are performed on the Event Dispatching Thread.                
                <see>
                    #setUpdatePolicy                    
                </see>
                <see>
                    #getUpdatePolicy                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="NEVER_UPDATE" type="int" line="88"/>
            <javadoc line="88">
                Indicates that the caret should remain at the same
                  absolute position in the document regardless of any document
                  updates, except when the document length becomes less than
                  the current caret position due to removal. In that case the caret
                  position is adjusted to the end of the document.                
                <see>
                    #setUpdatePolicy                    
                </see>
                <see>
                    #getUpdatePolicy                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <declaration name="ALWAYS_UPDATE" type="int" line="99"/>
            <javadoc line="99">
                Indicates that the caret position is to be &lt;b&gt;always&lt;/b&gt;
                  updated accordingly to the document changes regardless whether
                  the document updates are performed on the Event Dispatching Thread
                  or not.                
                <see>
                    #setUpdatePolicy                    
                </see>
                <see>
                    #getUpdatePolicy                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <javadoc line="109">
                Constructs a default caret.                
            </javadoc>
            <method name="DefaultCaret" type="constructor" line="112"/>
            <javadoc line="114">
                Sets the caret movement policy on the document updates. Normally
                  the caret updates its absolute position within the document on
                  insertions occurred before or at the caret position and
                  on removals before the caret position. &apos;Absolute position&apos;
                  means here the position relative to the start of the document.
                  For example if
                  a character is typed within editable text component it is inserted
                  at the caret position and the caret moves to the next absolute
                  position within the document due to insertion and if
                  &lt;code&gt;BACKSPACE&lt;/code&gt; is typed then caret decreases its absolute
                  position due to removal of a character before it. Sometimes
                  it may be useful to turn off the caret position updates so that
                  the caret stays at the same absolute position within the
                  document position regardless of any document updates.
                  &lt;p&gt;
                  The following update policies are allowed:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;code&gt;NEVER_UPDATE&lt;/code&gt;: the caret stays at the same
                  absolute position in the document regardless of any document
                  updates, except when document length becomes less than
                  the current caret position due to removal. In that case caret
                  position is adjusted to the end of the document.
                  The caret doesn&apos;t try to keep itself visible by scrolling
                  the associated view when using this policy. &lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;ALWAYS_UPDATE&lt;/code&gt;: the caret always tracks document
                  changes. For regular changes it increases its position
                  if an insertion occurs before or at its current position,
                  and decreases position if a removal occurs before
                  its current position. For undo/redo updates it is always
                  moved to the position where update occurred. The caret
                  also tries to keep itself visible by calling
                  &lt;code&gt;adjustVisibility&lt;/code&gt; method.&lt;/li&gt;
                  &lt;li&gt;&lt;code&gt;UPDATE_WHEN_ON_EDT&lt;/code&gt;: acts like &lt;code&gt;ALWAYS_UPDATE&lt;/code&gt;
                  if the document updates are performed on the Event Dispatching Thread
                  and like &lt;code&gt;NEVER_UPDATE&lt;/code&gt; if updates are performed on
                  other thread. &lt;/li&gt;
                  &lt;/ul&gt; &lt;p&gt;
                  The default property value is &lt;code&gt;UPDATE_WHEN_ON_EDT&lt;/code&gt;.                
                <param>
                    policy one of the following values : &lt;code&gt;UPDATE_WHEN_ON_EDT&lt;/code&gt;,
                      &lt;code&gt;NEVER_UPDATE&lt;/code&gt;, &lt;code&gt;ALWAYS_UPDATE&lt;/code&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if invalid value is passed                    
                </throws>
                <see>
                    #getUpdatePolicy                    
                </see>
                <see>
                    #adjustVisibility                    
                </see>
                <see>
                    #UPDATE_WHEN_ON_EDT                    
                </see>
                <see>
                    #NEVER_UPDATE                    
                </see>
                <see>
                    #ALWAYS_UPDATE                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="setUpdatePolicy" type="void" line="163">
                <params>
                    <param name="policy" type="int"/>
                </params>
            </method>
            <javadoc line="166">
                Gets the caret movement policy on document updates.                
                <return>
                    one of the following values : &lt;code&gt;UPDATE_WHEN_ON_EDT&lt;/code&gt;,
                      &lt;code&gt;NEVER_UPDATE&lt;/code&gt;, &lt;code&gt;ALWAYS_UPDATE&lt;/code&gt;                    
                </return>
                <see>
                    #setUpdatePolicy                    
                </see>
                <see>
                    #UPDATE_WHEN_ON_EDT                    
                </see>
                <see>
                    #NEVER_UPDATE                    
                </see>
                <see>
                    #ALWAYS_UPDATE                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="getUpdatePolicy" type="int" line="176"/>
            <javadoc line="179">
                Gets the text editor component that this caret is
                  is bound to.                
                <return>
                    the component                    
                </return>
            </javadoc>
            <method name="getComponent" type="JTextComponent" line="184"/>
            <javadoc line="187">
                Cause the caret to be painted.  The repaint
                  area is the bounding box of the caret (i.e.
                  the caret rectangle or &lt;em&gt;this&lt;/em&gt;).
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
            </javadoc>
            <method name="repaint" type="void" line="197">
                <scope line="198"/>
            </method>
            <javadoc line="202">
                Damages the area surrounding the caret to cause
                  it to be repainted in a new location.  If paint()
                  is reimplemented, this method should also be
                  reimplemented.  This method should update the
                  caret bounds (x, y, width, and height).                
                <param>
                    r  the current location of the caret                    
                </param>
                <see>
                    #paint                    
                </see>
            </javadoc>
            <method name="damage" type="void" line="211">
                <params>
                    <param name="r" type="Rectangle"/>
                </params>
                <scope line="212">
                    <declaration name="damageWidth" type="int" line="213"/>
                </scope>
            </method>
            <javadoc line="221">
                Scrolls the associated view (if necessary) to make
                  the caret visible.  Since how this should be done
                  is somewhat of a policy, this method can be
                  reimplemented to change the behavior.  By default
                  the scrollRectToVisible method is called on the
                  associated component.                
                <param>
                    nloc the new position to scroll to                    
                </param>
            </javadoc>
            <method name="adjustVisibility" type="void" line="230">
                <params>
                    <param name="nloc" type="Rectangle"/>
                </params>
                <scope line="231"/>
                <scope line="234"/>
                <scope line="237"/>
            </method>
            <javadoc line="241">
                Gets the painter for the Highlighter.                
                <return>
                    the painter                    
                </return>
            </javadoc>
            <method name="getSelectionPainter" type="Highlighter.HighlightPainter" line="245"/>
            <javadoc line="248">
                Tries to set the position of the caret from
                  the coordinates of a mouse event, using viewToModel().                
                <param>
                    e the mouse event                    
                </param>
            </javadoc>
            <method name="positionCaret" type="void" line="253">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="pt" type="Point" line="254"/>
                <declaration name="biasRet" type="Position.Bias[]" line="255"/>
                <declaration name="pos" type="int" line="256"/>
                <scope line="258"/>
            </method>
            <javadoc line="262">
                Tries to move the position of the caret from
                  the coordinates of a mouse event, using viewToModel().
                  This will cause a selection if the dot and mark
                  are different.                
                <param>
                    e the mouse event                    
                </param>
            </javadoc>
            <method name="moveCaret" type="void" line="269">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="pt" type="Point" line="270"/>
                <declaration name="biasRet" type="Position.Bias[]" line="271"/>
                <declaration name="pos" type="int" line="272"/>
                <scope line="274"/>
            </method>
            <javadoc line="278">
                Called when the component containing the caret gains
                  focus.  This is implemented to set the caret to visible
                  if the component is editable.                
                <param>
                    e the focus event                    
                </param>
                <see>
                    FocusListener#focusGained                    
                </see>
            </javadoc>
            <method name="focusGained" type="void" line="285">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
                <scope line="286">
                    <scope line="287"/>
                </scope>
            </method>
            <javadoc line="293">
                Called when the component containing the caret loses
                  focus.  This is implemented to set the caret to visibility
                  to false.                
                <param>
                    e the focus event                    
                </param>
                <see>
                    FocusListener#focusLost                    
                </see>
            </javadoc>
            <method name="focusLost" type="void" line="300">
                <params>
                    <param name="e" type="FocusEvent"/>
                </params>
            </method>
            <javadoc line="304">
                Selects word based on the MouseEvent                
            </javadoc>
            <method name="selectWord" type="void" line="307">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="308"/>
                <declaration name="a" type="Action" line="311"/>
                <declaration name="map" type="ActionMap" line="312"/>
                <scope line="313"/>
                <scope line="316">
                    <scope line="317"/>
                </scope>
            </method>
            <javadoc line="325">
                Called when the mouse is clicked.  If the click was generated
                  from button1, a double click selects a word,
                  and a triple click the current line.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseListener#mouseClicked                    
                </see>
            </javadoc>
            <method name="mouseClicked" type="void" line="332">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="nclicks" type="int" line="333"/>
                <scope line="334">
                    <scope line="335">
                        <scope line="336"/>
                        <scope line="339"/>
                        <scope line="343">
                            <declaration name="a" type="Action" line="344"/>
                            <declaration name="map" type="ActionMap" line="345"/>
                            <scope line="346"/>
                            <scope line="349">
                                <scope line="350"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="358">
                        <scope line="359">
                            <declaration name="c" type="JTextComponent" line="360"/>
                            <scope line="361">
                                <scope line="362">
                                    <declaration name="tk" type="Toolkit" line="363"/>
                                    <declaration name="buffer" type="Clipboard" line="364"/>
                                    <scope line="365">
                                        <declaration name="th" type="TransferHandler" line="367"/>
                                        <scope line="368">
                                            <declaration name="trans" type="Transferable" line="369"/>
                                            <scope line="370"/>
                                            <scope line="373"/>
                                            <scope line="376"/>
                                        </scope>
                                    </scope>
                                </scope>
                                <scope line="383"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="390">
                If button 1 is pressed, this is implemented to
                  request focus on the associated text component,
                  and to set the caret position. If the shift key is held down,
                  the caret will be moved, potentially resulting in a selection,
                  otherwise the
                  caret position will be set to the new location.  If the component
                  is not enabled, there will be no request for focus.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseListener#mousePressed                    
                </see>
            </javadoc>
            <method name="mousePressed" type="void" line="401">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <declaration name="nclicks" type="int" line="402"/>
                <scope line="403">
                    <scope line="404"/>
                    <scope line="407">
                        <scope line="410"/>
                    </scope>
                </scope>
            </method>
            <method name="adjustCaretAndFocus" type="void" line="416">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="420">
                Adjusts the caret location based on the MouseEvent.                
            </javadoc>
            <method name="adjustCaret" type="void" line="423">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="424"/>
                <scope line="427"/>
            </method>
            <javadoc line="431">
                Adjusts the focus, if necessary.                
                <param>
                    inWindow if true indicates requestFocusInWindow should be used                    
                </param>
            </javadoc>
            <method name="adjustFocus" type="void" line="435">
                <params>
                    <param name="inWindow" type="boolean"/>
                </params>
                <scope line="436">
                    <scope line="437"/>
                    <scope line="440"/>
                </scope>
            </method>
            <javadoc line="445">
                Called when the mouse is released.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseListener#mouseReleased                    
                </see>
            </javadoc>
            <method name="mouseReleased" type="void" line="450">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="451"/>
            </method>
            <javadoc line="455">
                Called when the mouse enters a region.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseListener#mouseEntered                    
                </see>
            </javadoc>
            <method name="mouseEntered" type="void" line="460">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="462">
                Called when the mouse exits a region.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseListener#mouseExited                    
                </see>
            </javadoc>
            <method name="mouseExited" type="void" line="467">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="469">
                Moves the caret position
                  according to the mouse pointer&apos;s current
                  location.  This effectively extends the
                  selection.  By default, this is only done
                  for mouse button 1.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseMotionListener#mouseDragged                    
                </see>
            </javadoc>
            <method name="mouseDragged" type="void" line="478">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
                <scope line="479"/>
            </method>
            <javadoc line="483">
                Called when the mouse is moved.                
                <param>
                    e the mouse event                    
                </param>
                <see>
                    MouseMotionListener#mouseMoved                    
                </see>
            </javadoc>
            <method name="mouseMoved" type="void" line="488">
                <params>
                    <param name="e" type="MouseEvent"/>
                </params>
            </method>
            <javadoc line="490">
                Renders the caret as a vertical line.  If this is reimplemented
                  the damage method should also be reimplemented as it assumes the
                  shape of the caret is a vertical line.  Sets the caret color to
                  the value returned by getCaretColor().
                  &lt;p&gt;
                  If there are multiple text directions present in the associated
                  document, a flag indicating the caret bias will be rendered.
                  This will occur only if the associated document is a subclass
                  of AbstractDocument and there are multiple bidi levels present
                  in the bidi element structure (i.e. the text has multiple
                  directions associated with it).                
                <param>
                    g the graphics context                    
                </param>
                <see>
                    #damage                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="505">
                <params>
                    <param name="g" type="Graphics"/>
                </params>
                <scope line="506">
                    <scope line="507">
                        <declaration name="mapper" type="TextUI" line="508"/>
                        <declaration name="r" type="Rectangle" line="509"/>
                        <scope line="510"/>
                        <scope line="513">
                            <declaration name="clip" type="Rectangle" line="514"/>
                            <scope line="515"/>
                        </scope>
                        <declaration name="paintWidth" type="int" line="521"/>
                        <declaration name="doc" type="Document" line="524"/>
                        <scope line="525">
                            <declaration name="bidi" type="Element" line="526"/>
                            <scope line="527"/>
                        </scope>
                    </scope>
                    <scope line="538"/>
                </scope>
            </method>
            <javadoc line="542">
                Called when the UI is being installed into the
                  interface of a JTextComponent.  This can be used
                  to gain access to the model that is being navigated
                  by the implementation of this interface.  Sets the dot
                  and mark to 0, and establishes document, property change,
                  focus, mouse, and mouse motion listeners.                
                <param>
                    c the component                    
                </param>
                <see>
                    Caret#install                    
                </see>
            </javadoc>
            <method name="install" type="void" line="552">
                <params>
                    <param name="c" type="JTextComponent"/>
                </params>
                <declaration name="doc" type="Document" line="554"/>
                <scope line="558"/>
                <scope line="565"/>
                <declaration name="ratio" type="Number" line="568"/>
                <scope line="569"/>
                <scope line="572"/>
                <declaration name="width" type="Integer" line="575"/>
                <scope line="576"/>
                <scope line="579"/>
            </method>
            <javadoc line="583">
                Called when the UI is being removed from the
                  interface of a JTextComponent.  This is used to
                  unregister any listeners that were attached.                
                <param>
                    c the component                    
                </param>
                <see>
                    Caret#deinstall                    
                </see>
            </javadoc>
            <method name="deinstall" type="void" line="590">
                <params>
                    <param name="c" type="JTextComponent"/>
                </params>
                <declaration name="doc" type="Document" line="595"/>
                <scope line="596"/>
                <scope line="599"/>
                <scope line="602"/>
            </method>
            <javadoc line="606">
                Adds a listener to track whenever the caret position has
                  been changed.                
                <param>
                    l the listener                    
                </param>
                <see>
                    Caret#addChangeListener                    
                </see>
            </javadoc>
            <method name="addChangeListener" type="void" line="612">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="615">
                Removes a listener that was tracking caret position changes.                
                <param>
                    l the listener                    
                </param>
                <see>
                    Caret#removeChangeListener                    
                </see>
            </javadoc>
            <method name="removeChangeListener" type="void" line="620">
                <params>
                    <param name="l" type="ChangeListener"/>
                </params>
            </method>
            <javadoc line="623">
                Returns an array of all the change listeners
                  registered on this caret.                
                <return>
                    all of this caret&apos;s &lt;code&gt;ChangeListener&lt;/code&gt;s
                      or an empty
                      array if no change listeners are currently registered                    
                </return>
                <see>
                    #addChangeListener                    
                </see>
                <see>
                    #removeChangeListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getChangeListeners" type="ChangeListener[]" line="633"/>
            <javadoc line="636">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.  The listener list is processed last to first.                
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireStateChanged" type="void" line="643">
                <declaration name="listeners" type="Object[]" line="644"/>
                <scope line="645">
                    <scope line="646"/>
                </scope>
            </method>
            <javadoc line="652">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this caret.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal,
                  such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  &lt;code&gt;DefaultCaret&lt;/code&gt; &lt;code&gt;c&lt;/code&gt;
                  for its change listeners with the following code:
                  &lt;pre&gt;ChangeListener[] cls = (ChangeListener[])(c.getListeners(ChangeListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this component,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getChangeListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="681">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="684">
                Changes the selection visibility.                
                <param>
                    vis the new visibility                    
                </param>
            </javadoc>
            <method name="setSelectionVisible" type="void" line="688">
                <params>
                    <param name="vis" type="boolean"/>
                </params>
                <scope line="689">
                    <scope line="691">
                        <declaration name="h" type="Highlighter" line="692"/>
                        <scope line="693">
                            <declaration name="p0" type="int" line="694"/>
                            <declaration name="p1" type="int" line="695"/>
                            <declaration name="p" type="Highlighter.HighlightPainter" line="696"/>
                            <scope line="697"/>
                            <scope line="700"/>
                        </scope>
                    </scope>
                    <scope line="705">
                        <scope line="706">
                            <declaration name="h" type="Highlighter" line="707"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="714">
                Checks whether the current selection is visible.                
                <return>
                    true if the selection is visible                    
                </return>
            </javadoc>
            <method name="isSelectionVisible" type="boolean" line="718"/>
            <javadoc line="721">
                Determines if the caret is currently active.
                  &lt;p&gt;
                  This method returns whether or not the &lt;code&gt;Caret&lt;/code&gt;
                  is currently in a blinking state. It does not provide
                  information as to whether it is currently blinked on or off.
                  To determine if the caret is currently painted use the
                  &lt;code&gt;isVisible&lt;/code&gt; method.                
                <return>
                    &lt;code&gt;true&lt;/code&gt; if active else &lt;code&gt;false&lt;/code&gt;                    
                </return>
                <see>
                    #isVisible                    
                </see>
                <since>
                    1.5                    
                </since>
            </javadoc>
            <method name="isActive" type="boolean" line="733"/>
            <javadoc line="736">
                Indicates whether or not the caret is currently visible. As the
                  caret flashes on and off the return value of this will change
                  between true, when the caret is painted, and false, when the
                  caret is not painted. &lt;code&gt;isActive&lt;/code&gt; indicates whether
                  or not the caret is in a blinking state, such that it &lt;b&gt;can&lt;/b&gt;
                  be visible, and &lt;code&gt;isVisible&lt;/code&gt; indicates whether or not
                  the caret &lt;b&gt;is&lt;/b&gt; actually visible.
                  &lt;p&gt;
                  Subclasses that wish to render a different flashing caret
                  should override paint and only paint the caret if this method
                  returns true.                
                <return>
                    true if visible else false                    
                </return>
                <see>
                    Caret#isVisible                    
                </see>
                <see>
                    #isActive                    
                </see>
            </javadoc>
            <method name="isVisible" type="boolean" line="752"/>
            <javadoc line="755">
                Sets the caret visibility, and repaints the caret.
                  It is important to understand the relationship between this method,
                  &lt;code&gt;isVisible&lt;/code&gt; and &lt;code&gt;isActive&lt;/code&gt;.
                  Calling this method with a value of &lt;code&gt;true&lt;/code&gt; activates the
                  caret blinking. Setting it to &lt;code&gt;false&lt;/code&gt; turns it completely off.
                  To determine whether the blinking is active, you should call
                  &lt;code&gt;isActive&lt;/code&gt;. In effect, &lt;code&gt;isActive&lt;/code&gt; is an
                  appropriate corresponding &quot;getter&quot; method for this one.
                  &lt;code&gt;isVisible&lt;/code&gt; can be used to fetch the current
                  visibility status of the caret, meaning whether or not it is currently
                  painted. This status will change as the caret blinks on and off.
                  &lt;p&gt;
                  Here&apos;s a list showing the potential return values of both
                  &lt;code&gt;isActive&lt;/code&gt; and &lt;code&gt;isVisible&lt;/code&gt;
                  after calling this method:
                  &lt;p&gt;
                  &lt;b&gt;&lt;code&gt;setVisible(true)&lt;/code&gt;&lt;/b&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;isActive(): true&lt;/li&gt;
                  &lt;li&gt;isVisible(): true or false depending on whether
                  or not the caret is blinked on or off&lt;/li&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;b&gt;&lt;code&gt;setVisible(false)&lt;/code&gt;&lt;/b&gt;:
                  &lt;ul&gt;
                  &lt;li&gt;isActive(): false&lt;/li&gt;
                  &lt;li&gt;isVisible(): false&lt;/li&gt;
                  &lt;/ul&gt;                
                <param>
                    e the visibility specifier                    
                </param>
                <see>
                    #isActive                    
                </see>
                <see>
                    Caret#setVisible                    
                </see>
            </javadoc>
            <method name="setVisible" type="void" line="788">
                <params>
                    <param name="e" type="boolean"/>
                </params>
                <scope line="789">
                    <declaration name="mapper" type="TextUI" line="791"/>
                    <scope line="792">
                        <scope line="794">
                            <declaration name="loc" type="Rectangle" line="795"/>
                        </scope>
                        <scope line="798"/>
                    </scope>
                </scope>
                <scope line="802">
                    <scope line="803"/>
                    <scope line="806"/>
                </scope>
            </method>
            <javadoc line="811">
                Sets the caret blink rate.                
                <param>
                    rate the rate in milliseconds, 0 to stop blinking                    
                </param>
                <see>
                    Caret#setBlinkRate                    
                </see>
            </javadoc>
            <method name="setBlinkRate" type="void" line="816">
                <params>
                    <param name="rate" type="int"/>
                </params>
                <scope line="817">
                    <scope line="818"/>
                </scope>
                <scope line="823">
                    <scope line="824"/>
                </scope>
            </method>
            <javadoc line="831">
                Gets the caret blink rate.                
                <return>
                    the delay in milliseconds.  If this is
                      zero the caret will not blink.                    
                </return>
                <see>
                    Caret#getBlinkRate                    
                </see>
            </javadoc>
            <method name="getBlinkRate" type="int" line="837"/>
            <javadoc line="840">
                Fetches the current position of the caret.                
                <return>
                    the position &amp;gt;= 0                    
                </return>
                <see>
                    Caret#getDot                    
                </see>
            </javadoc>
            <method name="getDot" type="int" line="845"/>
            <javadoc line="848">
                Fetches the current position of the mark.  If there is a selection,
                  the dot and mark will not be the same.                
                <return>
                    the position &amp;gt;= 0                    
                </return>
                <see>
                    Caret#getMark                    
                </see>
            </javadoc>
            <method name="getMark" type="int" line="854"/>
            <javadoc line="857">
                Sets the caret position and mark to the specified position,
                  with a forward bias. This implicitly sets the
                  selection range to zero.                
                <param>
                    dot the position &amp;gt;= 0                    
                </param>
                <see>
                    #setDot(int,Position.Bias)                    
                </see>
                <see>
                    Caret#setDot                    
                </see>
            </javadoc>
            <method name="setDot" type="void" line="865">
                <params>
                    <param name="dot" type="int"/>
                </params>
            </method>
            <javadoc line="868">
                Moves the caret position to the specified position,
                  with a forward bias.                
                <param>
                    dot the position &amp;gt;= 0                    
                </param>
                <see>
                    #moveDot(int,javax.swing.text.Position.Bias)                    
                </see>
                <see>
                    Caret#moveDot                    
                </see>
            </javadoc>
            <method name="moveDot" type="void" line="875">
                <params>
                    <param name="dot" type="int"/>
                </params>
            </method>
            <javadoc line="878">
                Moves the caret position to the specified position, with the
                  specified bias.                
                <param>
                    dot the position &amp;gt;= 0                    
                </param>
                <param>
                    dotBias the bias for this position, not &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if the bias is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    Caret#moveDot                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="moveDot" type="void" line="887">
                <params>
                    <param name="dot" type="int"/>
                    <param name="dotBias" type="Position.Bias"/>
                </params>
                <scope line="888"/>
                <scope line="891"/>
                <scope line="895">
                    <declaration name="filter" type="NavigationFilter" line="896"/>
                    <scope line="897"/>
                    <scope line="900"/>
                </scope>
            </method>
            <method name="handleMoveDot" type="void" line="905">
                <params>
                    <param name="dot" type="int"/>
                    <param name="dotBias" type="Position.Bias"/>
                </params>
                <scope line="907">
                    <declaration name="h" type="Highlighter" line="908"/>
                    <scope line="909">
                        <declaration name="p0" type="int" line="910"/>
                        <declaration name="p1" type="int" line="911"/>
                        <scope line="912">
                            <scope line="913"/>
                        </scope>
                        <scope line="918">
                            <scope line="919">
                                <scope line="920"/>
                                <scope line="923">
                                    <declaration name="p" type="Highlighter.HighlightPainter" line="924"/>
                                </scope>
                            </scope>
                            <scope line="928"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="935">
                Sets the caret position and mark to the specified position, with the
                  specified bias. This implicitly sets the selection range
                  to zero.                
                <param>
                    dot the position &amp;gt;= 0                    
                </param>
                <param>
                    dotBias the bias for this position, not &lt;code&gt;null&lt;/code&gt;                    
                </param>
                <throws>
                    IllegalArgumentException if the bias is &lt;code&gt;null&lt;/code&gt;                    
                </throws>
                <see>
                    Caret#setDot                    
                </see>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="setDot" type="void" line="945">
                <params>
                    <param name="dot" type="int"/>
                    <param name="dotBias" type="Position.Bias"/>
                </params>
                <scope line="946"/>
                <declaration name="filter" type="NavigationFilter" line="949"/>
                <scope line="950"/>
                <scope line="953"/>
            </method>
            <method name="handleSetDot" type="void" line="957">
                <params>
                    <param name="dot" type="int"/>
                    <param name="dotBias" type="Position.Bias"/>
                </params>
                <declaration name="doc" type="Document" line="958"/>
                <scope line="959"/>
                <scope line="965"/>
                <declaration name="h" type="Highlighter" line="970"/>
                <scope line="971"/>
            </method>
            <javadoc line="976">
                Returns the bias of the caret position.                
                <return>
                    the bias of the caret position                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getDotBias" type="Position.Bias" line="981"/>
            <javadoc line="984">
                Returns the bias of the mark.                
                <return>
                    the bias of the mark                    
                </return>
                <since>
                    1.6                    
                </since>
            </javadoc>
            <method name="getMarkBias" type="Position.Bias" line="989"/>
            <method name="isDotLeftToRight" type="boolean" line="992"/>
            <method name="isMarkLeftToRight" type="boolean" line="995"/>
            <method name="isPositionLTR" type="boolean" line="998">
                <params>
                    <param name="position" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
                <declaration name="doc" type="Document" line="999"/>
                <scope line="1000"/>
            </method>
            <method name="guessBiasForOffset" type="Position.Bias" line="1006">
                <params>
                    <param name="offset" type="int"/>
                    <param name="lastBias" type="Position.Bias"/>
                    <param name="lastLTR" type="boolean"/>
                </params>
                <scope line="1007"/>
                <scope line="1010"/>
                <scope line="1013">
                    <scope line="1014">
                        <declaration name="s" type="Segment" line="1015"/>
                        <scope line="1017"/>
                    </scope>
                    <scope line="1021"/>
                </scope>
            </method>
            <javadoc line="1026">
                Sets the caret position (dot) to a new location.  This
                  causes the old and new location to be repainted.  It
                  also makes sure that the caret is within the visible
                  region of the view, if the view is scrollable.                
            </javadoc>
            <method name="changeCaretPosition" type="void" line="1032">
                <params>
                    <param name="dot" type="int"/>
                    <param name="dotBias" type="Position.Bias"/>
                </params>
                <scope line="1034"/>
                <anonymous_class line="1044">
                    <method name="run" type="void" line="1045"/>
                </anonymous_class>
                <declaration name="callRepaintNewCaret" type="Runnable" line="1044"/>
            </method>
            <javadoc line="1052">
                Repaints the new caret position, with the
                  assumption that this is happening on the
                  event thread so that calling &lt;code&gt;modelToView&lt;/code&gt;
                  is safe.                
            </javadoc>
            <method name="repaintNewCaret" type="void" line="1058">
                <scope line="1059">
                    <declaration name="mapper" type="TextUI" line="1060"/>
                    <declaration name="doc" type="Document" line="1061"/>
                    <scope line="1062">
                        <declaration name="newLoc" type="Rectangle" line="1063"/>
                        <scope line="1064"/>
                        <scope line="1067"/>
                        <scope line="1070">
                            <scope line="1072"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <method name="updateSystemSelection" type="void" line="1080">
                <scope line="1081"/>
                <scope line="1084">
                    <declaration name="clip" type="Clipboard" line="1085"/>
                    <scope line="1086">
                        <declaration name="selectedText" type="String" line="1087"/>
                        <scope line="1088">
                            <declaration name="txt" type="StringBuilder" line="1089"/>
                            <declaration name="echoChar" type="char" line="1090"/>
                            <declaration name="p0" type="int" line="1091"/>
                            <declaration name="p1" type="int" line="1092"/>
                            <scope line="1093">
                                <scope line="1094"/>
                            </scope>
                        </scope>
                        <scope line="1101"/>
                        <scope line="1104"/>
                        <scope line="1108"/>
                    </scope>
                </scope>
            </method>
            <method name="getSystemSelection" type="Clipboard" line="1113">
                <scope line="1114"/>
                <scope line="1117"/>
                <scope line="1119"/>
            </method>
            <method name="getClipboardOwner" type="ClipboardOwner" line="1123"/>
            <javadoc line="1126">
                This is invoked after the document changes to verify the current
                  dot/mark is valid. We do this in case the &lt;code&gt;NavigationFilter&lt;/code&gt;
                  changed where to position the dot, that resulted in the current location
                  being bogus.                
            </javadoc>
            <method name="ensureValidPosition" type="void" line="1132">
                <declaration name="length" type="int" line="1133"/>
                <scope line="1134"/>
            </method>
            <javadoc line="1138">
                Saves the current caret position.  This is used when
                  caret up/down actions occur, moving between lines
                  that have uneven end positions.                
                <param>
                    p the position                    
                </param>
                <see>
                    #getMagicCaretPosition                    
                </see>
            </javadoc>
            <method name="setMagicCaretPosition" type="void" line="1145">
                <params>
                    <param name="p" type="Point"/>
                </params>
            </method>
            <javadoc line="1148">
                Gets the saved caret position.                
                <return>
                    the position
                      see #setMagicCaretPosition                    
                </return>
            </javadoc>
            <method name="getMagicCaretPosition" type="Point" line="1153"/>
            <javadoc line="1156">
                Compares this object to the specified object.
                  The superclass behavior of comparing rectangles
                  is not desired, so this is changed to the Object
                  behavior.                
                <param>
                    obj   the object to compare this font with                    
                </param>
                <return>
                    &lt;code&gt;true&lt;/code&gt; if the objects are equal;
                      &lt;code&gt;false&lt;/code&gt; otherwise                    
                </return>
            </javadoc>
            <method name="equals" type="boolean" line="1165">
                <params>
                    <param name="obj" type="Object"/>
                </params>
            </method>
            <method name="toString" type="String" line="1168">
                <declaration name="s" type="String" line="1169"/>
            </method>
            <method name="getFilterBypass" type="NavigationFilter.FilterBypass" line="1173">
                <scope line="1174"/>
            </method>
            <method name="_contains" type="boolean" line="1179">
                <params>
                    <param name="X" type="int"/>
                    <param name="Y" type="int"/>
                    <param name="W" type="int"/>
                    <param name="H" type="int"/>
                </params>
                <declaration name="w" type="int" line="1180"/>
                <declaration name="h" type="int" line="1181"/>
                <scope line="1182"/>
                <declaration name="x" type="int" line="1185"/>
                <declaration name="y" type="int" line="1186"/>
                <scope line="1187"/>
                <scope line="1190">
                    <scope line="1193"/>
                    <scope line="1196"/>
                </scope>
                <scope line="1200"/>
                <scope line="1203">
                    <scope line="1206"/>
                    <scope line="1209"/>
                </scope>
                <scope line="1213"/>
            </method>
            <method name="getCaretWidth" type="int" line="1218">
                <params>
                    <param name="height" type="int"/>
                </params>
                <scope line="1219"/>
                <scope line="1222"/>
            </method>
            <method name="readObject" type="void" line="1227">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1230"/>
                <scope line="1233"/>
                <scope line="1236"/>
                <scope line="1239"/>
            </method>
            <method name="writeObject" type="void" line="1243">
                <params>
                    <param name="s" type="ObjectOutputStream"/>
                </params>
            </method>
            <declaration name="listenerList" type="EventListenerList" line="1248"/>
            <javadoc line="1248">
                The event listener list.                
            </javadoc>
            <declaration name="changeEvent" type="ChangeEvent" line="1252"/>
            <javadoc line="1252">
                The change event for the model.
                  Only one ChangeEvent is needed per model instance since the
                  event&apos;s only (read-only) state is the source property.  The source
                  of events generated here is always &quot;this&quot;.                
            </javadoc>
            <declaration name="component" type="JTextComponent" line="1259"/>
            <declaration name="updatePolicy" type="int" line="1260"/>
            <declaration name="visible" type="boolean" line="1261"/>
            <declaration name="active" type="boolean" line="1262"/>
            <declaration name="dot" type="int" line="1263"/>
            <declaration name="mark" type="int" line="1264"/>
            <declaration name="selectionTag" type="Object" line="1265"/>
            <declaration name="selectionVisible" type="boolean" line="1266"/>
            <declaration name="flasher" type="Timer" line="1267"/>
            <declaration name="magicCaretPosition" type="Point" line="1268"/>
            <declaration name="dotBias" type="Position.Bias" line="1269"/>
            <declaration name="markBias" type="Position.Bias" line="1270"/>
            <declaration name="dotLTR" type="boolean" line="1271"/>
            <declaration name="markLTR" type="boolean" line="1272"/>
            <declaration name="handler" type="Handler" line="1273"/>
            <declaration name="flagXPoints" type="int[]" line="1274"/>
            <declaration name="flagYPoints" type="int[]" line="1275"/>
            <declaration name="filterBypass" type="NavigationFilter.FilterBypass" line="1276"/>
            <declaration name="selectWord" type="Action" line="1277"/>
            <declaration name="selectLine" type="Action" line="1278"/>
            <declaration name="ownsSelection" type="boolean" line="1279"/>
            <javadoc line="1279">
                This is used to indicate if the caret currently owns the selection.
                  This is always false if the system does not support the system
                  clipboard.                
            </javadoc>
            <declaration name="forceCaretPositionChange" type="boolean" line="1285"/>
            <javadoc line="1285">
                If this is true, the location of the dot is updated regardless of
                  the current location. This is set in the DocumentListener
                  such that even if the model location of dot hasn&apos;t changed (perhaps do
                  to a forward delete) the visual location is updated.                
            </javadoc>
            <declaration name="shouldHandleRelease" type="boolean" line="1292"/>
            <javadoc line="1292">
                Whether or not mouseReleased should adjust the caret and focus.
                  This flag is set by mousePressed if it wanted to adjust the caret
                  and focus but couldn&apos;t because of a possible DnD operation.                
            </javadoc>
            <declaration name="selectedWordEvent" type="MouseEvent" line="1298"/>
            <javadoc line="1298">
                holds last MouseEvent which caused the word selection                
            </javadoc>
            <declaration name="caretWidth" type="int" line="1302"/>
            <javadoc line="1302">
                The width of the caret in pixels.                
            </javadoc>
            <declaration name="aspectRatio" type="float" line="1306"/>
            <class name="SafeScroller" line="1307">
                <implements interface="Runnable"/>
                <method name="SafeScroller" type="constructor" line="1308">
                    <params>
                        <param name="r" type="Rectangle"/>
                    </params>
                </method>
                <method name="run" type="void" line="1311">
                    <scope line="1312"/>
                </method>
                <declaration name="r" type="Rectangle" line="1316"/>
            </class>
            <class name="Handler" line="1318">
                <implements interface="PropertyChangeListener"/>
                <implements interface="DocumentListener"/>
                <implements interface="ActionListener"/>
                <implements interface="ClipboardOwner"/>
                <javadoc line="1319">
                    Invoked when the blink timer fires.  This is called
                      asynchronously.  The simply changes the visibility
                      and repaints the rectangle that last bounded the caret.                    
                    <param>
                        e the action event                        
                    </param>
                </javadoc>
                <method name="actionPerformed" type="void" line="1325">
                    <params>
                        <param name="e" type="ActionEvent"/>
                    </params>
                    <scope line="1326">
                        <scope line="1327">
                            <declaration name="mapper" type="TextUI" line="1328"/>
                            <scope line="1329">
                                <declaration name="r" type="Rectangle" line="1330"/>
                                <scope line="1331"/>
                            </scope>
                            <scope line="1335"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1342">
                    Updates the dot and mark if they were changed by
                      the insertion.                    
                    <param>
                        e the document event                        
                    </param>
                    <see>
                        DocumentListener#insertUpdate                        
                    </see>
                </javadoc>
                <method name="insertUpdate" type="void" line="1348">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="1349">
                        <scope line="1350">
                            <scope line="1351"/>
                            <scope line="1354"/>
                        </scope>
                    </scope>
                    <declaration name="offset" type="int" line="1360"/>
                    <declaration name="length" type="int" line="1361"/>
                    <declaration name="newDot" type="int" line="1362"/>
                    <declaration name="changed" type="short" line="1363"/>
                    <scope line="1364"/>
                    <scope line="1368"/>
                    <declaration name="newMark" type="int" line="1372"/>
                    <scope line="1373"/>
                    <scope line="1377">
                        <declaration name="dotBias" type="Position.Bias" line="1378"/>
                        <scope line="1379">
                            <declaration name="doc" type="Document" line="1380"/>
                            <declaration name="isNewline" type="boolean" line="1381"/>
                            <scope line="1382">
                                <declaration name="s" type="Segment" line="1383"/>
                            </scope>
                            <scope line="1387"/>
                            <scope line="1390"/>
                            <scope line="1393"/>
                        </scope>
                        <scope line="1397"/>
                        <scope line="1401">
                            <scope line="1403"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1410">
                    Updates the dot and mark if they were changed
                      by the removal.                    
                    <param>
                        e the document event                        
                    </param>
                    <see>
                        DocumentListener#removeUpdate                        
                    </see>
                </javadoc>
                <method name="removeUpdate" type="void" line="1416">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="1417">
                        <declaration name="length" type="int" line="1418"/>
                        <scope line="1421">
                            <scope line="1422"/>
                            <scope line="1425"/>
                        </scope>
                    </scope>
                    <declaration name="offs0" type="int" line="1431"/>
                    <declaration name="offs1" type="int" line="1432"/>
                    <declaration name="newDot" type="int" line="1433"/>
                    <declaration name="adjustDotBias" type="boolean" line="1434"/>
                    <declaration name="newMark" type="int" line="1435"/>
                    <declaration name="adjustMarkBias" type="boolean" line="1436"/>
                    <scope line="1437"/>
                    <scope line="1441">
                        <scope line="1443"/>
                    </scope>
                    <scope line="1447"/>
                    <scope line="1451">
                        <scope line="1453"/>
                    </scope>
                    <scope line="1457"/>
                    <scope line="1461">
                        <scope line="1463"/>
                        <scope line="1466"/>
                    </scope>
                    <scope line="1471">
                        <declaration name="dotBias" type="Position.Bias" line="1472"/>
                        <declaration name="markBias" type="Position.Bias" line="1473"/>
                        <scope line="1474"/>
                        <scope line="1477"/>
                        <scope line="1481"/>
                    </scope>
                </method>
                <javadoc line="1487">
                    Gives notification that an attribute or set of attributes changed.                    
                    <param>
                        e the document event                        
                    </param>
                    <see>
                        DocumentListener#changedUpdate                        
                    </see>
                </javadoc>
                <method name="changedUpdate" type="void" line="1492">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                    </params>
                    <scope line="1493"/>
                    <scope line="1496"/>
                </method>
                <javadoc line="1500">
                    This method gets called when a bound property is changed.
                      We are looking for document changes on the editor.                    
                </javadoc>
                <method name="propertyChange" type="void" line="1504">
                    <params>
                        <param name="evt" type="PropertyChangeEvent"/>
                    </params>
                    <declaration name="oldValue" type="Object" line="1505"/>
                    <declaration name="newValue" type="Object" line="1506"/>
                    <scope line="1507">
                        <scope line="1509"/>
                        <scope line="1512"/>
                    </scope>
                    <scope line="1516">
                        <declaration name="enabled" type="Boolean" line="1517"/>
                        <scope line="1518">
                            <scope line="1519">
                                <scope line="1520"/>
                            </scope>
                            <scope line="1525"/>
                        </scope>
                    </scope>
                    <scope line="1531">
                        <declaration name="newWidth" type="Integer" line="1532"/>
                        <scope line="1533"/>
                        <scope line="1536"/>
                    </scope>
                    <scope line="1541">
                        <declaration name="newRatio" type="Number" line="1542"/>
                        <scope line="1543"/>
                        <scope line="1546"/>
                    </scope>
                </method>
                <javadoc line="1552">
                    Toggles the visibility of the selection when ownership is lost.                    
                </javadoc>
                <method name="lostOwnership" type="void" line="1555">
                    <params>
                        <param name="clipboard" type="Clipboard"/>
                        <param name="contents" type="Transferable"/>
                    </params>
                    <scope line="1556">
                        <scope line="1558"/>
                    </scope>
                </method>
            </class>
            <class name="DefaultFilterBypass" line="1564">
                <extends class="NavigationFilter.FilterBypass"/>
                <method name="getCaret" type="Caret" line="1565"/>
                <method name="setDot" type="void" line="1568">
                    <params>
                        <param name="dot" type="int"/>
                        <param name="bias" type="Position.Bias"/>
                    </params>
                </method>
                <method name="moveDot" type="void" line="1571">
                    <params>
                        <param name="dot" type="int"/>
                        <param name="bias" type="Position.Bias"/>
                    </params>
                </method>
            </class>
        </class>
    </source>