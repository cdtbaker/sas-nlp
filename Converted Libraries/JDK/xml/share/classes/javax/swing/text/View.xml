<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="javax.swing.SwingConstants"/>
        <import package="javax.swing.event"/>
        <class name="View" line="31">
            <comment line="1341">
                static argument available for viewToModel calls since only
                 one thread at a time may call this method.                
            </comment>
            <implements interface="SwingConstants"/>
            <javadoc line="31">
                &lt;p&gt;
                  A very important part of the text package is the &lt;code&gt;View&lt;/code&gt; class.
                  As the name suggests it represents a view of the text model,
                  or a piece of the text model.
                  It is this class that is responsible for the look of the text component.
                  The view is not intended to be some completely new thing that one must
                  learn, but rather is much like a lightweight component.
                  &lt;p&gt;
                  By default, a view is very light.  It contains a reference to the parent
                  view from which it can fetch many things without holding state, and it
                  contains a reference to a portion of the model (&lt;code&gt;Element&lt;/code&gt;).
                  A view does not
                  have to exactly represent an element in the model, that is simply a typical
                  and therefore convenient mapping.  A view can alternatively maintain a couple
                  of Position objects to maintain its location in the model (i.e. represent
                  a fragment of an element).  This is typically the result of formatting where
                  views have been broken down into pieces.  The convenience of a substantial
                  relationship to the element makes it easier to build factories to produce the
                  views, and makes it easier  to keep track of the view pieces as the model is
                  changed and the view must be changed to reflect the model.  Simple views
                  therefore represent an Element directly and complex views do not.
                  &lt;p&gt;
                  A view has the following responsibilities:
                  &lt;dl&gt;
                  &lt;dt&gt;&lt;b&gt;Participate in layout.&lt;/b&gt;
                  &lt;dd&gt;
                  &lt;p&gt;The view has a &lt;code&gt;setSize&lt;/code&gt; method which is like
                  &lt;code&gt;doLayout&lt;/code&gt; and &lt;code&gt;setSize&lt;/code&gt; in &lt;code&gt;Component&lt;/code&gt; combined.
                  The view has a &lt;code&gt;preferenceChanged&lt;/code&gt; method which is
                  like &lt;code&gt;invalidate&lt;/code&gt; in &lt;code&gt;Component&lt;/code&gt; except that one can
                  invalidate just one axis
                  and the child requesting the change is identified.
                  &lt;p&gt;A View expresses the size that it would like to be in terms of three
                  values, a minimum, a preferred, and a maximum span.  Layout in a view is
                  can be done independently upon each axis.  For a properly functioning View
                  implementation, the minimum span will be &amp;lt;= the preferred span which in turn
                  will be &amp;lt;= the maximum span.
                  &lt;/p&gt;
                  &lt;p align=center&gt;&lt;img src=&quot;doc-files/View-flexibility.jpg&quot;
                  alt=&quot;The above text describes this graphic.&quot;&gt;
                  &lt;p&gt;The minimum set of methods for layout are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#getMinimumSpan(int)&quot;&gt;getMinimumSpan&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getPreferredSpan(int)&quot;&gt;getPreferredSpan&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getMaximumSpan(int)&quot;&gt;getMaximumSpan&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getAlignment(int)&quot;&gt;getAlignment&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#preferenceChanged(javax.swing.text.View, boolean, boolean)&quot;&gt;preferenceChanged&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#setSize(float, float)&quot;&gt;setSize&lt;/a&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;The &lt;code&gt;setSize&lt;/code&gt; method should be prepared to be called a number of times
                  (i.e. It may be called even if the size didn&apos;t change).
                  The &lt;code&gt;setSize&lt;/code&gt; method
                  is generally called to make sure the View layout is complete prior to trying
                  to perform an operation on it that requires an up-to-date layout.  A view&apos;s
                  size should &lt;em&gt;always&lt;/em&gt; be set to a value within the minimum and maximum
                  span specified by that view.  Additionally, the view must always call the
                  &lt;code&gt;preferenceChanged&lt;/code&gt; method on the parent if it has changed the
                  values for the
                  layout it would like, and expects the parent to honor.  The parent View is
                  not required to recognize a change until the &lt;code&gt;preferenceChanged&lt;/code&gt;
                  has been sent.
                  This allows parent View implementations to cache the child requirements if
                  desired.  The calling sequence looks something like the following:
                  &lt;/p&gt;
                  &lt;p align=center&gt;
                  &lt;img src=&quot;doc-files/View-layout.jpg&quot;
                  alt=&quot;Sample calling sequence between parent view and child view:
                  setSize, getMinimum, getPreferred, getMaximum, getAlignment, setSize&quot;&gt;
                  &lt;p&gt;The exact calling sequence is up to the layout functionality of
                  the parent view (if the view has any children).  The view may collect
                  the preferences of the children prior to determining what it will give
                  each child, or it might iteratively update the children one at a time.
                  &lt;/p&gt;
                  &lt;dt&gt;&lt;b&gt;Render a portion of the model.&lt;/b&gt;
                  &lt;dd&gt;
                  &lt;p&gt;This is done in the paint method, which is pretty much like a component
                  paint method.  Views are expected to potentially populate a fairly large
                  tree.  A &lt;code&gt;View&lt;/code&gt; has the following semantics for rendering:
                  &lt;/p&gt;
                  &lt;ul&gt;
                  &lt;li&gt;The view gets its allocation from the parent at paint time, so it
                  must be prepared to redo layout if the allocated area is different from
                  what it is prepared to deal with.
                  &lt;li&gt;The coordinate system is the same as the hosting &lt;code&gt;Component&lt;/code&gt;
                  (i.e. the &lt;code&gt;Component&lt;/code&gt; returned by the{@link #getContainer getContainer} method).
                  This means a child view lives in the same coordinate system as the parent
                  view unless the parent has explicitly changed the coordinate system.
                  To schedule itself to be repainted a view can call repaint on the hosting
                  &lt;code&gt;Component&lt;/code&gt;.
                  &lt;li&gt;The default is to &lt;em&gt;not clip&lt;/em&gt; the children.  It is more efficient
                  to allow a view to clip only if it really feels it needs clipping.
                  &lt;li&gt;The &lt;code&gt;Graphics&lt;/code&gt; object given is not initialized in any way.
                  A view should set any settings needed.
                  &lt;li&gt;A &lt;code&gt;View&lt;/code&gt; is inherently transparent.  While a view may render into its
                  entire allocation, typically a view does not.  Rendering is performed by
                  tranversing down the tree of &lt;code&gt;View&lt;/code&gt; implementations.
                  Each &lt;code&gt;View&lt;/code&gt; is responsible
                  for rendering its children.  This behavior is depended upon for thread
                  safety.  While view implementations do not necessarily have to be implemented
                  with thread safety in mind, other view implementations that do make use of
                  concurrency can depend upon a tree traversal to guarantee thread safety.
                  &lt;li&gt;The order of views relative to the model is up to the implementation.
                  Although child views will typically be arranged in the same order that they
                  occur in the model, they may be visually arranged in an entirely different
                  order.  View implementations may have Z-Order associated with them if the
                  children are overlapping.
                  &lt;/ul&gt;
                  &lt;p&gt;The methods for rendering are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#paint(java.awt.Graphics, java.awt.Shape)&quot;&gt;paint&lt;/a&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;
                  &lt;dt&gt;&lt;b&gt;Translate between the model and view coordinate systems.&lt;/b&gt;
                  &lt;dd&gt;
                  &lt;p&gt;Because the view objects are produced from a factory and therefore cannot
                  necessarily be counted upon to be in a particular pattern, one must be able
                  to perform translation to properly locate spatial representation of the model.
                  The methods for doing this are:
                  &lt;ul&gt;
                  &lt;li&gt;&lt;a href=&quot;#modelToView(int, javax.swing.text.Position.Bias, int, javax.swing.text.Position.Bias, java.awt.Shape)&quot;&gt;modelToView&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#viewToModel(float, float, java.awt.Shape, javax.swing.text.Position.Bias[])&quot;&gt;viewToModel&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getDocument()&quot;&gt;getDocument&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getElement()&quot;&gt;getElement&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getStartOffset()&quot;&gt;getStartOffset&lt;/a&gt;
                  &lt;li&gt;&lt;a href=&quot;#getEndOffset()&quot;&gt;getEndOffset&lt;/a&gt;
                  &lt;/ul&gt;
                  &lt;p&gt;The layout must be valid prior to attempting to make the translation.
                  The translation is not valid, and must not be attempted while changes
                  are being broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt;.
                  &lt;/p&gt;
                  &lt;dt&gt;&lt;b&gt;Respond to changes from the model.&lt;/b&gt;
                  &lt;dd&gt;
                  &lt;p&gt;If the overall view is represented by many pieces (which is the best situation
                  if one want to be able to change the view and write the least amount of new code),
                  it would be impractical to have a huge number of &lt;code&gt;DocumentListener&lt;/code&gt;s.
                  If each
                  view listened to the model, only a few would actually be interested in the
                  changes broadcasted at any given time.   Since the model has no knowledge of
                  views, it has no way to filter the broadcast of change information.  The view
                  hierarchy itself is instead responsible for propagating the change information.
                  At any level in the view hierarchy, that view knows enough about its children to
                  best distribute the change information further.   Changes are therefore broadcasted
                  starting from the root of the view hierarchy.
                  The methods for doing this are:
                  &lt;ul&gt;
                  &lt;li&gt;{@link #insertUpdate insertUpdate}&lt;li&gt;{@link #removeUpdate removeUpdate}&lt;li&gt;{@link #changedUpdate changedUpdate}&lt;/ul&gt;
                  &lt;p&gt;
                  &lt;/dl&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="194">
                Creates a new &lt;code&gt;View&lt;/code&gt; object.                
                <param>
                    elem the <code>Element</code> to represent                    
                </param>
            </javadoc>
            <method name="View" type="constructor" line="199">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="203">
                Returns the parent of the view.                
                <return>
                    the parent, or <code>null</code> if none exists                    
                </return>
            </javadoc>
            <method name="getParent" type="View" line="208"/>
            <javadoc line="212">
                Returns a boolean that indicates whether
                  the view is visible or not.  By default
                  all views are visible.                
                <return>
                    always returns true                    
                </return>
            </javadoc>
            <method name="isVisible" type="boolean" line="219"/>
            <method name="getPreferredSpan" type="float" line="224"/>
            <javadoc line="224">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view                    
                </return>
                <see>
                    View#getPreferredSpan                    
                </see>
            </javadoc>
            <javadoc line="238">
                Determines the minimum span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the minimum span the view can be rendered into                    
                </return>
                <see>
                    View#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="247">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <comment line="251">
                    can&apos;t resize                    
                </comment>
                <declaration name="w" type="int" line="248"/>
                <scope line="249"/>
            </method>
            <javadoc line="256">
                Determines the maximum span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the maximum span the view can be rendered into                    
                </return>
                <see>
                    View#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="265">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <comment line="269">
                    can&apos;t resize                    
                </comment>
                <declaration name="w" type="int" line="266"/>
                <scope line="267"/>
            </method>
            <javadoc line="274">
                Child views can call this on the parent to indicate that
                  the preference has changed and should be reconsidered
                  for layout.  By default this just propagates upward to
                  the next parent.  The root view will call
                  &lt;code&gt;revalidate&lt;/code&gt; on the associated text component.                
                <param>
                    child the child view                    
                </param>
                <param>
                    width true if the width preference has changed                    
                </param>
                <param>
                    height true if the height preference has changed                    
                </param>
                <see>
                    javax.swing.JComponent#revalidate                    
                </see>
            </javadoc>
            <method name="preferenceChanged" type="void" line="286">
                <params>
                    <param name="child" type="View"/>
                    <param name="width" type="boolean"/>
                    <param name="height" type="boolean"/>
                </params>
                <declaration name="parent" type="View" line="287"/>
                <scope line="288"/>
            </method>
            <javadoc line="293">
                Determines the desired alignment for this view along an
                  axis.  The desired alignment is returned.  This should be
                  a value &gt;= 0.0 and &lt;= 1.0, where 0 indicates alignment at
                  the origin and 1.0 indicates alignment to the full span
                  away from the origin.  An alignment of 0.5 would be the
                  center of the view.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the value 0.5                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="305">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <method name="paint" type="void" line="309"/>
            <javadoc line="309">
                Renders using the given rendering surface and area on that
                  surface.  The view may need to do layout and create child
                  views to enable itself to render into the given allocation.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    allocation the allocated region to render into                    
                </param>
            </javadoc>
            <javadoc line="319">
                Establishes the parent view for this view.  This is
                  guaranteed to be called before any other methods if the
                  parent view is functioning properly.  This is also
                  the last method called, since it is called to indicate
                  the view has been removed from the hierarchy as
                  well. When this method is called to set the parent to
                  null, this method does the same for each of its children,
                  propogating the notification that they have been
                  disconnected from the view tree. If this is
                  reimplemented, &lt;code&gt;super.setParent()&lt;/code&gt; should
                  be called.                
                <param>
                    parent the new parent, or <code>null</code> if the view is
                      being removed from a parent                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="335">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <comment line="337">
                    if the parent is null then propogate down the view tree                    
                </comment>
                <comment line="341">
                    in FlowView.java view might be referenced
                     from two super-views as a child. see logicalView                    
                </comment>
                <scope line="337">
                    <scope line="338">
                        <scope line="339"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="349">
                Returns the number of views in this view.  Since
                  the default is to not be a composite view this
                  returns 0.                
                <return>
                    the number of views >= 0                    
                </return>
                <see>
                    View#getViewCount                    
                </see>
            </javadoc>
            <method name="getViewCount" type="int" line="357"/>
            <javadoc line="361">
                Gets the &lt;i&gt;n&lt;/i&gt;th child view.  Since there are no
                  children by default, this returns &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    n the number of the view to get, >= 0 && < getViewCount()                    
                </param>
                <return>
                    the view                    
                </return>
            </javadoc>
            <method name="getView" type="View" line="368">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="373">
                Removes all of the children.  This is a convenience
                  call to &lt;code&gt;replace&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="removeAll" type="void" line="379"/>
            <javadoc line="383">
                Removes one of the children at the given position.
                  This is a convenience call to &lt;code&gt;replace&lt;/code&gt;.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="remove" type="void" line="388">
                <params>
                    <param name="i" type="int"/>
                </params>
            </method>
            <javadoc line="392">
                Inserts a single child view.  This is a convenience
                  call to &lt;code&gt;replace&lt;/code&gt;.                
                <param>
                    offs the offset of the view to insert before >= 0                    
                </param>
                <param>
                    v the view                    
                </param>
                <see>
                    #replace                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="insert" type="void" line="401">
                <params>
                    <param name="offs" type="int"/>
                    <param name="v" type="View"/>
                </params>
                <declaration name="one" type="View[]" line="402"/>
            </method>
            <javadoc line="407">
                Appends a single child view.  This is a convenience
                  call to &lt;code&gt;replace&lt;/code&gt;.                
                <param>
                    v the view                    
                </param>
                <see>
                    #replace                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="append" type="void" line="415">
                <params>
                    <param name="v" type="View"/>
                </params>
                <declaration name="one" type="View[]" line="416"/>
            </method>
            <javadoc line="421">
                Replaces child views.  If there are no views to remove
                  this acts as an insert.  If there are no views to
                  add this acts as a remove.  Views being removed will
                  have the parent set to &lt;code&gt;null&lt;/code&gt;, and the internal reference
                  to them removed so that they can be garbage collected.
                  This is implemented to do nothing, because by default
                  a view has no children.                
                <param>
                    offset the starting index into the child views to insert
                      the new views.  This should be a value >= 0 and <= getViewCount                    
                </param>
                <param>
                    length the number of existing child views to remove
                      This should be a value >= 0 and <= (getViewCount() - offset).                    
                </param>
                <param>
                    views the child views to add.  This value can be
                      <code>null</code> to indicate no children are being added
                      (useful to remove).                    
                </param>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="replace" type="void" line="439">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="views" type="View[]"/>
                </params>
            </method>
            <javadoc line="442">
                Returns the child view index representing the given position in
                  the model.  By default a view has no children so this is implemented
                  to return -1 to indicate there is no valid child index for any
                  position.                
                <param>
                    pos the position >= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getViewIndex" type="int" line="453">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="457">
                Fetches the allocation for the given child view.
                  This enables finding out where various views
                  are located, without assuming how the views store
                  their location.  This returns &lt;code&gt;null&lt;/code&gt; since the
                  default is to not have any child views.                
                <param>
                    index the index of the child, >= 0 && <
                      <code>getViewCount()</code>                    
                </param>
                <param>
                    a  the allocation to this view                    
                </param>
                <return>
                    the allocation to the child                    
                </return>
            </javadoc>
            <method name="getChildAllocation" type="Shape" line="469">
                <params>
                    <param name="index" type="int"/>
                    <param name="a" type="Shape"/>
                </params>
            </method>
            <javadoc line="473">
                Provides a way to determine the next visually represented model
                  location at which one might place a caret.
                  Some views may not be visible,
                  they might not be in the same order found in the model, or they just
                  might not allow access to some of the locations in the model.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region in which to render                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard.
                      This will be one of the following values:
                      <ul>
                      <li>SwingConstants.WEST
                      <li>SwingConstants.EAST
                      <li>SwingConstants.NORTH
                      <li>SwingConstants.SOUTH
                      </ul>                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>direction</code>
                      doesn't have one of the legal values above                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="499">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
                <comment line="502">
                    -1 is a reserved value, see the code below                    
                </comment>
                <comment line="518">
                    YECK! Ideally, the x location from the magic caret position
                     would be passed in.                    
                </comment>
                <scope line="500"/>
                <scope line="509">
                    <scope line="510"/>
                    <declaration name="target" type="JTextComponent" line="515"/>
                    <declaration name="c" type="Caret" line="516"/>
                    <declaration name="mcp" type="Point" line="519"/>
                    <scope line="520"/>
                    <scope line="523"/>
                    <declaration name="x" type="int" line="526"/>
                    <scope line="527">
                        <declaration name="loc" type="Rectangle" line="528"/>
                    </scope>
                    <scope line="531"/>
                    <scope line="534"/>
                    <scope line="537"/>
                </scope>
                <scope line="543"/>
                <scope line="546"/>
                <scope line="551"/>
                <scope line="554"/>
            </method>
            <method name="modelToView" type="Shape" line="564"/>
            <javadoc line="564">
                Provides a mapping, for a given character,
                  from the document model coordinate space
                  to the view coordinate space.                
                <param>
                    pos the position of the desired character (>=0)                    
                </param>
                <param>
                    a the area of the view, which encompasses the requested character                    
                </param>
                <param>
                    b the bias toward the previous character or the
                      next character represented by the offset, in case the
                      position is a boundary of two views; <code>b</code> will have one
                      of these values:
                      <ul>
                      <li> <code>Position.Bias.Forward</code>
                      <li> <code>Position.Bias.Backward</code>
                      </ul>                    
                </param>
                <return>
                    the bounding box, in view coordinate space,
                      of the character at the specified position                    
                </return>
                <exception>
                    BadLocationException  if the specified position does
                      not represent a valid location in the associated document                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>b</code> is not one of the
                      legal <code>Position.Bias</code> values listed above                    
                </exception>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <javadoc line="589">
                Provides a mapping, for a given region,
                  from the document model coordinate space
                  to the view coordinate space. The specified region is
                  created as a union of the first and last character positions.                
                <param>
                    p0 the position of the first character (>=0)                    
                </param>
                <param>
                    b0 the bias of the first character position,
                      toward the previous character or the
                      next character represented by the offset, in case the
                      position is a boundary of two views; <code>b0</code> will have one
                      of these values:
                      <ul>
                      <li> <code>Position.Bias.Forward</code>
                      <li> <code>Position.Bias.Backward</code>
                      </ul>                    
                </param>
                <param>
                    p1 the position of the last character (>=0)                    
                </param>
                <param>
                    b1 the bias for the second character position, defined
                      one of the legal values shown above                    
                </param>
                <param>
                    a the area of the view, which encompasses the requested region                    
                </param>
                <return>
                    the bounding box which is a union of the region specified
                      by the first and last character positions                    
                </return>
                <exception>
                    BadLocationException  if the given position does
                      not represent a valid location in the associated document                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>b0</code> or
                      <code>b1</code> are not one of the
                      legal <code>Position.Bias</code> values listed above                    
                </exception>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="618">
                <params>
                    <param name="p0" type="int"/>
                    <param name="b0" type="Position.Bias"/>
                    <param name="p1" type="int"/>
                    <param name="b1" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="629">
                    Assume extends left to right.                    
                </comment>
                <comment line="643">
                    If it spans lines, force it to be the width of the view.                    
                </comment>
                <declaration name="s0" type="Shape" line="619"/>
                <declaration name="s1" type="Shape" line="620"/>
                <scope line="621">
                    <scope line="622"/>
                    <scope line="624"/>
                    <scope line="627">
                        <declaration name="alloc" type="Rectangle" line="629"/>
                    </scope>
                </scope>
                <scope line="635"/>
                <declaration name="r0" type="Rectangle" line="638"/>
                <declaration name="r1" type="Rectangle" line="639"/>
                <scope line="641">
                    <declaration name="alloc" type="Rectangle" line="643"/>
                </scope>
            </method>
            <method name="viewToModel" type="int" line="652"/>
            <javadoc line="652">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.  The &lt;code&gt;biasReturn&lt;/code&gt;
                  argument will be filled in to indicate that the point given is
                  closer to the next character in the model or the previous
                  character in the model.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    a the allocated region in which to render                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view >= 0.  The <code>biasReturn</code>
                      argument will be
                      filled in to indicate that the point given is closer to the next
                      character in the model or the previous character in the model.                    
                </return>
            </javadoc>
            <javadoc line="670">
                Gives notification that something was inserted into
                  the document in a location that this view is responsible for.
                  To reduce the burden to subclasses, this functionality is
                  spread out into the following calls that subclasses can
                  reimplement:
                  &lt;ol&gt;
                  &lt;li&gt;{@link #updateChildren updateChildren} is called
                  if there were any changes to the element this view is
                  responsible for.  If this view has child views that are
                  represent the child elements, then this method should do
                  whatever is necessary to make sure the child views correctly
                  represent the model.
                  &lt;li&gt;{@link #forwardUpdate forwardUpdate} is called
                  to forward the DocumentEvent to the appropriate child views.
                  &lt;li&gt;{@link #updateLayout updateLayout} is called to
                  give the view a chance to either repair its layout, to reschedule
                  layout, or do nothing.
                  &lt;/ol&gt;                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="695">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="702">
                    don&apos;t consider the element changes they
                     are for a view further down.                    
                </comment>
                <scope line="696">
                    <declaration name="elem" type="Element" line="697"/>
                    <declaration name="ec" type="DocumentEvent.ElementChange" line="698"/>
                    <scope line="699">
                        <scope line="700"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="711">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.
                  To reduce the burden to subclasses, this functionality is
                  spread out into the following calls that subclasses can
                  reimplement:
                  &lt;ol&gt;
                  &lt;li&gt;{@link #updateChildren updateChildren} is called
                  if there were any changes to the element this view is
                  responsible for.  If this view has child views that are
                  represent the child elements, then this method should do
                  whatever is necessary to make sure the child views correctly
                  represent the model.
                  &lt;li&gt;{@link #forwardUpdate forwardUpdate} is called
                  to forward the DocumentEvent to the appropriate child views.
                  &lt;li&gt;{@link #updateLayout updateLayout} is called to
                  give the view a chance to either repair its layout, to reschedule
                  layout, or do nothing.
                  &lt;/ol&gt;                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="736">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="743">
                    don&apos;t consider the element changes they
                     are for a view further down.                    
                </comment>
                <scope line="737">
                    <declaration name="elem" type="Element" line="738"/>
                    <declaration name="ec" type="DocumentEvent.ElementChange" line="739"/>
                    <scope line="740">
                        <scope line="741"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="752">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.
                  To reduce the burden to subclasses, this functionality is
                  spread out into the following calls that subclasses can
                  reimplement:
                  &lt;ol&gt;
                  &lt;li&gt;{@link #updateChildren updateChildren} is called
                  if there were any changes to the element this view is
                  responsible for.  If this view has child views that are
                  represent the child elements, then this method should do
                  whatever is necessary to make sure the child views correctly
                  represent the model.
                  &lt;li&gt;{@link #forwardUpdate forwardUpdate} is called
                  to forward the DocumentEvent to the appropriate child views.
                  &lt;li&gt;{@link #updateLayout updateLayout} is called to
                  give the view a chance to either repair its layout, to reschedule
                  layout, or do nothing.
                  &lt;/ol&gt;                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="777">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="784">
                    don&apos;t consider the element changes they
                     are for a view further down.                    
                </comment>
                <scope line="778">
                    <declaration name="elem" type="Element" line="779"/>
                    <declaration name="ec" type="DocumentEvent.ElementChange" line="780"/>
                    <scope line="781">
                        <scope line="782"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="793">
                Fetches the model associated with the view.                
                <return>
                    the view model, <code>null</code> if none                    
                </return>
                <see>
                    View#getDocument                    
                </see>
            </javadoc>
            <method name="getDocument" type="Document" line="799"/>
            <javadoc line="803">
                Fetches the portion of the model for which this view is
                  responsible.                
                <return>
                    the starting offset into the model >= 0                    
                </return>
                <see>
                    View#getStartOffset                    
                </see>
            </javadoc>
            <method name="getStartOffset" type="int" line="810"/>
            <javadoc line="814">
                Fetches the portion of the model for which this view is
                  responsible.                
                <return>
                    the ending offset into the model >= 0                    
                </return>
                <see>
                    View#getEndOffset                    
                </see>
            </javadoc>
            <method name="getEndOffset" type="int" line="821"/>
            <javadoc line="825">
                Fetches the structural portion of the subject that this
                  view is mapped to.  The view may not be responsible for the
                  entire portion of the element.                
                <return>
                    the subject                    
                </return>
                <see>
                    View#getElement                    
                </see>
            </javadoc>
            <method name="getElement" type="Element" line="833"/>
            <javadoc line="837">
                Fetch a &lt;code&gt;Graphics&lt;/code&gt; for rendering.
                  This can be used to determine
                  font characteristics, and will be different for a print view
                  than a component view.                
                <return>
                    a <code>Graphics</code> object for rendering                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getGraphics" type="Graphics" line="846">
                <comment line="848">
                    PENDING(prinz) this is a temporary implementation                    
                </comment>
                <declaration name="c" type="Component" line="848"/>
            </method>
            <javadoc line="852">
                Fetches the attributes to use when rendering.  By default
                  this simply returns the attributes of the associated element.
                  This method should be used rather than using the element
                  directly to obtain access to the attributes to allow
                  view-specific attributes to be mixed in or to allow the
                  view to have view-specific conversion of attributes by
                  subclasses.
                  Each view should document what attributes it recognizes
                  for the purpose of rendering or layout, and should always
                  access them through the &lt;code&gt;AttributeSet&lt;/code&gt; returned
                  by this method.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="865"/>
            <javadoc line="869">
                Tries to break this view on the given axis.  This is
                  called by views that try to do formatting of their
                  children.  For example, a view of a paragraph will
                  typically try to place its children into row and
                  views representing chunks of text can sometimes be
                  broken down into smaller pieces.
                  &lt;p&gt;
                  This is implemented to return the view itself, which
                  represents the default behavior on not being
                  breakable.  If the view does support breaking, the
                  starting offset of the view returned should be the
                  given offset, and the end offset should be less than
                  or equal to the end offset of the view being broken.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <param>
                    offset the location in the document model
                      that a broken fragment would occupy >= 0.  This
                      would be the starting offset of the fragment
                      returned                    
                </param>
                <param>
                    pos the position along the axis that the
                      broken view would occupy >= 0.  This may be useful for
                      things like tab calculations                    
                </param>
                <param>
                    len specifies the distance along the axis
                      where a potential break is desired >= 0                    
                </param>
                <return>
                    the fragment of the view that represents the
                      given span, if the view can be broken.  If the view
                      doesn't support breaking behavior, the view itself is
                      returned.                    
                </return>
                <see>
                    ParagraphView                    
                </see>
            </javadoc>
            <method name="breakView" type="View" line="901">
                <params>
                    <param name="axis" type="int"/>
                    <param name="offset" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
            </method>
            <javadoc line="905">
                Creates a view that represents a portion of the element.
                  This is potentially useful during formatting operations
                  for taking measurements of fragments of the view.  If
                  the view doesn&apos;t support fragmenting (the default), it
                  should return itself.                
                <param>
                    p0 the starting offset >= 0.  This should be a value
                      greater or equal to the element starting offset and
                      less than the element ending offset.                    
                </param>
                <param>
                    p1 the ending offset > p0.  This should be a value
                      less than or equal to the elements end offset and
                      greater than the elements starting offset.                    
                </param>
                <return>
                    the view fragment, or itself if the view doesn't
                      support breaking into fragments                    
                </return>
                <see>
                    LabelView                    
                </see>
            </javadoc>
            <method name="createFragment" type="View" line="922">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
            </method>
            <javadoc line="926">
                Determines how attractive a break opportunity in
                  this view is.  This can be used for determining which
                  view is the most attractive to call &lt;code&gt;breakView&lt;/code&gt;
                  on in the process of formatting.  A view that represents
                  text that has whitespace in it might be more attractive
                  than a view that has no whitespace, for example.  The
                  higher the weight, the more attractive the break.  A
                  value equal to or lower than &lt;code&gt;BadBreakWeight&lt;/code&gt;
                  should not be considered for a break.  A value greater
                  than or equal to &lt;code&gt;ForcedBreakWeight&lt;/code&gt; should
                  be broken.
                  &lt;p&gt;
                  This is implemented to provide the default behavior
                  of returning &lt;code&gt;BadBreakWeight&lt;/code&gt; unless the length
                  is greater than the length of the view in which case the
                  entire view represents the fragment.  Unless a view has
                  been written to support breaking behavior, it is not
                  attractive to try and break the view.  An example of
                  a view that does support breaking is &lt;code&gt;LabelView&lt;/code&gt;.
                  An example of a view that uses break weight is
                  &lt;code&gt;ParagraphView&lt;/code&gt;.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <param>
                    pos the potential location of the start of the
                      broken view >= 0.  This may be useful for calculating tab
                      positions                    
                </param>
                <param>
                    len specifies the relative length from <em>pos</em>
                      where a potential break is desired >= 0                    
                </param>
                <return>
                    the weight, which should be a value between
                      ForcedBreakWeight and BadBreakWeight                    
                </return>
                <see>
                    LabelView                    
                </see>
                <see>
                    ParagraphView                    
                </see>
                <see>
                    #BadBreakWeight                    
                </see>
                <see>
                    #GoodBreakWeight                    
                </see>
                <see>
                    #ExcellentBreakWeight                    
                </see>
                <see>
                    #ForcedBreakWeight                    
                </see>
            </javadoc>
            <method name="getBreakWeight" type="int" line="965">
                <params>
                    <param name="axis" type="int"/>
                    <param name="pos" type="float"/>
                    <param name="len" type="float"/>
                </params>
                <scope line="966"/>
            </method>
            <javadoc line="972">
                Determines the resizability of the view along the
                  given axis.  A value of 0 or less is not resizable.                
                <param>
                    axis may be either <code>View.X_AXIS</code> or
                      <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the weight                    
                </return>
            </javadoc>
            <method name="getResizeWeight" type="int" line="980">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="984">
                Sets the size of the view.  This should cause
                  layout of the view along the given axis, if it
                  has any layout duties.                
                <param>
                    width the width >= 0                    
                </param>
                <param>
                    height the height >= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="992">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
            </method>
            <javadoc line="995">
                Fetches the container hosting the view.  This is useful for
                  things like scheduling a repaint, finding out the host
                  components font, etc.  The default implementation
                  of this is to forward the query to the parent view.                
                <return>
                    the container, <code>null</code> if none                    
                </return>
            </javadoc>
            <method name="getContainer" type="Container" line="1003">
                <declaration name="v" type="View" line="1004"/>
            </method>
            <javadoc line="1008">
                Fetches the &lt;code&gt;ViewFactory&lt;/code&gt; implementation that is feeding
                  the view hierarchy.  Normally the views are given this
                  as an argument to updates from the model when they
                  are most likely to need the factory, but this
                  method serves to provide it at other times.                
                <return>
                    the factory, <code>null</code> if none                    
                </return>
            </javadoc>
            <method name="getViewFactory" type="ViewFactory" line="1017">
                <declaration name="v" type="View" line="1018"/>
            </method>
            <javadoc line="1022">
                Returns the tooltip text at the specified location. The default
                  implementation returns the value from the child View identified by
                  the passed in location.                
                <since>
                    1.4                    
                </since>
                <see>
                    JTextComponent#getToolTipText                    
                </see>
            </javadoc>
            <method name="getToolTipText" type="String" line="1030">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="allocation" type="Shape"/>
                </params>
                <declaration name="viewIndex" type="int" line="1031"/>
                <scope line="1032">
                    <declaration name="rect" type="Rectangle" line="1034"/>
                    <scope line="1036"/>
                </scope>
            </method>
            <javadoc line="1043">
                Returns the child view index representing the given position in
                  the view. This iterates over all the children returning the
                  first with a bounds that contains &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;.                
                <param>
                    x the x coordinate                    
                </param>
                <param>
                    y the y coordinate                    
                </param>
                <param>
                    allocation current allocation of the View.                    
                </param>
                <return>
                    index of the view representing the given location, or
                      -1 if no view represents that position                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getViewIndex" type="int" line="1055">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="allocation" type="Shape"/>
                </params>
                <scope line="1056">
                    <declaration name="childAllocation" type="Shape" line="1057"/>
                    <scope line="1059">
                        <declaration name="rect" type="Rectangle" line="1060"/>
                        <scope line="1063"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1071">
                Updates the child views in response to receiving notification
                  that the model changed, and there is change record for the
                  element this view is responsible for.  This is implemented
                  to assume the child views are directly responsible for the
                  child elements of the element this view represents.  The
                  &lt;code&gt;ViewFactory&lt;/code&gt; is used to create child views for each element
                  specified as added in the &lt;code&gt;ElementChange&lt;/code&gt;, starting at the
                  index specified in the given &lt;code&gt;ElementChange&lt;/code&gt;.  The number of
                  child views representing the removed elements specified are
                  removed.                
                <param>
                    ec the change information for the element this view
                      is responsible for.  This should not be <code>null</code> if
                      this method gets called                    
                </param>
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    f the factory to use to build child views                    
                </param>
                <return>
                    whether or not the child views represent the
                      child elements of the element this view is responsible
                      for.  Some views create children that represent a portion
                      of the element they are responsible for, and should return
                      false.  This information is used to determine if views
                      in the range of the added elements should be forwarded to
                      or not                    
                </return>
                <see>
                    #insertUpdate                    
                </see>
                <see>
                    #removeUpdate                    
                </see>
                <see>
                    #changedUpdate                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="updateChildren" type="boolean" line="1101">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="removedElems" type="Element[]" line="1102"/>
                <declaration name="addedElems" type="Element[]" line="1103"/>
                <declaration name="added" type="View[]" line="1104"/>
                <scope line="1105">
                    <scope line="1107"/>
                </scope>
                <declaration name="nremoved" type="int" line="1111"/>
                <declaration name="index" type="int" line="1112"/>
                <scope line="1113"/>
            </method>
            <javadoc line="1120">
                Forwards the given &lt;code&gt;DocumentEvent&lt;/code&gt; to the child views
                  that need to be notified of the change to the model.
                  If there were changes to the element this view is
                  responsible for, that should be considered when
                  forwarding (i.e. new child views should not get
                  notified).                
                <param>
                    ec changes to the element this view is responsible
                      for (may be <code>null</code> if there were no changes).                    
                </param>
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    #insertUpdate                    
                </see>
                <see>
                    #removeUpdate                    
                </see>
                <see>
                    #changedUpdate                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="forwardUpdate" type="void" line="1139">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="1146">
                    Event beyond our offsets. We may have represented this, that is
                     the remove may have removed one of our child Elements that
                     represented this, so, we should foward to last element.                    
                </comment>
                <comment line="1155">
                    If v is at a boundary, forward the event to the previous
                     view too.                    
                </comment>
                <comment line="1174">
                    forward to any view not in the forwarding hole
                     formed by added elements (i.e. they will be updated
                     by initialization.                    
                </comment>
                <declaration name="elem" type="Element" line="1140"/>
                <declaration name="pos" type="int" line="1141"/>
                <declaration name="index0" type="int" line="1142"/>
                <scope line="1144"/>
                <declaration name="index1" type="int" line="1150"/>
                <declaration name="v" type="View" line="1151"/>
                <scope line="1152">
                    <scope line="1153"/>
                </scope>
                <scope line="1159">
                    <scope line="1161"/>
                </scope>
                <declaration name="hole0" type="int" line="1165"/>
                <declaration name="hole1" type="int" line="1166"/>
                <declaration name="addedElems" type="Element[]" line="1167"/>
                <scope line="1168"/>
                <scope line="1177">
                    <scope line="1178">
                        <scope line="1180">
                            <declaration name="childAlloc" type="Shape" line="1181"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="1188">
                Forwards the &lt;code&gt;DocumentEvent&lt;/code&gt; to the give child view.  This
                  simply messages the view with a call to &lt;code&gt;insertUpdate&lt;/code&gt;,
                  &lt;code&gt;removeUpdate&lt;/code&gt;, or &lt;code&gt;changedUpdate&lt;/code&gt; depending
                  upon the type of the event.  This is called by{@link #forwardUpdate forwardUpdate} to forward
                  the event to children that need it.                
                <param>
                    v the child view to forward the event to                    
                </param>
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    #forwardUpdate                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="forwardUpdateToView" type="void" line="1204">
                <params>
                    <param name="v" type="View"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="type" type="DocumentEvent.EventType" line="1205"/>
                <scope line="1206"/>
                <scope line="1208"/>
                <scope line="1210"/>
            </method>
            <javadoc line="1215">
                Updates the layout in response to receiving notification of
                  change from the model.  This is implemented to call
                  &lt;code&gt;preferenceChanged&lt;/code&gt; to reschedule a new layout
                  if the &lt;code&gt;ElementChange&lt;/code&gt; record is not &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    ec changes to the element this view is responsible
                      for (may be <code>null</code> if there were no changes)                    
                </param>
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <see>
                    #insertUpdate                    
                </see>
                <see>
                    #removeUpdate                    
                </see>
                <see>
                    #changedUpdate                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="updateLayout" type="void" line="1231">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="1234">
                    should damage more intelligently                    
                </comment>
                <scope line="1232">
                    <declaration name="host" type="Container" line="1235"/>
                    <scope line="1236"/>
                </scope>
            </method>
            <declaration name="BadBreakWeight" type="int" line="1242"/>
            <javadoc line="1242">
                The weight to indicate a view is a bad break
                  opportunity for the purpose of formatting.  This
                  value indicates that no attempt should be made to
                  break the view into fragments as the view has
                  not been written to support fragmenting.                
                <see>
                    #getBreakWeight                    
                </see>
                <see>
                    #GoodBreakWeight                    
                </see>
                <see>
                    #ExcellentBreakWeight                    
                </see>
                <see>
                    #ForcedBreakWeight                    
                </see>
            </javadoc>
            <declaration name="GoodBreakWeight" type="int" line="1256"/>
            <javadoc line="1256">
                The weight to indicate a view supports breaking,
                  but better opportunities probably exist.                
                <see>
                    #getBreakWeight                    
                </see>
                <see>
                    #BadBreakWeight                    
                </see>
                <see>
                    #ExcellentBreakWeight                    
                </see>
                <see>
                    #ForcedBreakWeight                    
                </see>
            </javadoc>
            <declaration name="ExcellentBreakWeight" type="int" line="1267"/>
            <javadoc line="1267">
                The weight to indicate a view supports breaking,
                  and this represents a very attractive place to
                  break.                
                <see>
                    #getBreakWeight                    
                </see>
                <see>
                    #BadBreakWeight                    
                </see>
                <see>
                    #GoodBreakWeight                    
                </see>
                <see>
                    #ForcedBreakWeight                    
                </see>
            </javadoc>
            <declaration name="ForcedBreakWeight" type="int" line="1279"/>
            <javadoc line="1279">
                The weight to indicate a view supports breaking,
                  and must be broken to be represented properly
                  when placed in a view that formats its children
                  by breaking them.                
                <see>
                    #getBreakWeight                    
                </see>
                <see>
                    #BadBreakWeight                    
                </see>
                <see>
                    #GoodBreakWeight                    
                </see>
                <see>
                    #ExcellentBreakWeight                    
                </see>
            </javadoc>
            <declaration name="X_AXIS" type="int" line="1292"/>
            <javadoc line="1292">
                Axis for format/break operations.                
            </javadoc>
            <declaration name="Y_AXIS" type="int" line="1297"/>
            <javadoc line="1297">
                Axis for format/break operations.                
            </javadoc>
            <javadoc line="1302">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it. This is
                  implemented to default the bias to &lt;code&gt;Position.Bias.Forward&lt;/code&gt;
                  which was previously implied.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region in which to render                    
                </param>
                <return>
                    the bounding box of the given position is returned                    
                </return>
                <exception>
                    BadLocationException  if the given position does
                      not represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="modelToView" type="Shape" line="1317">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                </params>
            </method>
            <javadoc line="1322">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    a the allocated region in which to render                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view >= 0                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
                <deprecated>
                                        
                </deprecated>
            </javadoc>
            <method name="viewToModel" type="int" line="1335">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                </params>
            </method>
            <declaration name="sharedBiasReturn" type="Position.Bias[]" line="1342"/>
            <declaration name="parent" type="View" line="1344"/>
            <declaration name="elem" type="Element" line="1345"/>
        </class>
    </source>