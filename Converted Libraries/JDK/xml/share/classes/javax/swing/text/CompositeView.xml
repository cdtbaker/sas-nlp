<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <import package="java.awt"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.SwingConstants"/>
        <class name="CompositeView" line="32">
            <extends class="View"/>
            <comment line="119">
                --- View methods ---------------------------------------------                
            </comment>
            <comment line="503">
                --- local methods ----------------------------------------------------                
            </comment>
            <comment line="783">
                ---- member variables ---------------------------------------------                
            </comment>
            <javadoc line="32">
                &lt;code&gt;CompositeView&lt;/code&gt; is an abstract &lt;code&gt;View&lt;/code&gt;
                  implementation which manages one or more child views.
                  (Note that &lt;code&gt;CompositeView&lt;/code&gt; is intended
                  for managing relatively small numbers of child views.)
                  &lt;code&gt;CompositeView&lt;/code&gt; is intended to be used as
                  a starting point for &lt;code&gt;View&lt;/code&gt; implementations,
                  such as &lt;code&gt;BoxView&lt;/code&gt;, that will contain child
                  &lt;code&gt;View&lt;/code&gt;s. Subclasses that wish to manage the
                  collection of child &lt;code&gt;View&lt;/code&gt;s should use the{@link #replace} method.  As &lt;code&gt;View&lt;/code&gt; invokes
                  &lt;code&gt;replace&lt;/code&gt; during &lt;code&gt;DocumentListener&lt;/code&gt;
                  notification, you normally won&apos;t need to directly
                  invoke &lt;code&gt;replace&lt;/code&gt;.
                  &lt;p&gt;While &lt;code&gt;CompositeView&lt;/code&gt;
                  does not impose a layout policy on its child &lt;code&gt;View&lt;/code&gt;s,
                  it does allow for inseting the child &lt;code&gt;View&lt;/code&gt;s
                  it will contain.  The insets can be set by either{@link #setInsets} or {@link #setParagraphInsets}.
                  &lt;p&gt;In addition to the abstract methods of{@link javax.swing.text.View},
                  subclasses of &lt;code&gt;CompositeView&lt;/code&gt; will need to
                  override:
                  &lt;ul&gt;
                  &lt;li&gt;{@link #isBefore} - Used to test if a given
                  &lt;code&gt;View&lt;/code&gt; location is before the visual space
                  of the &lt;code&gt;CompositeView&lt;/code&gt;.
                  &lt;li&gt;{@link #isAfter} - Used to test if a given
                  &lt;code&gt;View&lt;/code&gt; location is after the visual space
                  of the &lt;code&gt;CompositeView&lt;/code&gt;.
                  &lt;li&gt;{@link #getViewAtPoint} - Returns the view at
                  a given visual location.
                  &lt;li&gt;{@link #childAllocation} - Returns the bounds of
                  a particular child &lt;code&gt;View&lt;/code&gt;.
                  &lt;code&gt;getChildAllocation&lt;/code&gt; will invoke
                  &lt;code&gt;childAllocation&lt;/code&gt; after offseting
                  the bounds by the &lt;code&gt;Inset&lt;/code&gt;s of the
                  &lt;code&gt;CompositeView&lt;/code&gt;.
                  &lt;/ul&gt;                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="78">
                Constructs a &lt;code&gt;CompositeView&lt;/code&gt; for the given element.                
                <param>
                    elem  the element this view is responsible for                    
                </param>
            </javadoc>
            <method name="CompositeView" type="constructor" line="83">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="90">
                Loads all of the children to initialize the view.
                  This is called by the {@link #setParent}method.  Subclasses can reimplement this to initialize
                  their child views in a different manner.  The default
                  implementation creates a child view for each
                  child element.                
                <param>
                    f the view factory                    
                </param>
                <see>
                    #setParent                    
                </see>
            </javadoc>
            <method name="loadChildren" type="void" line="101">
                <params>
                    <param name="f" type="ViewFactory"/>
                </params>
                <comment line="104">
                    No factory. This most likely indicates the parent view
                     has changed out from under us, bail!                    
                </comment>
                <scope line="102"/>
                <declaration name="e" type="Element" line="107"/>
                <declaration name="n" type="int" line="108"/>
                <scope line="109">
                    <declaration name="added" type="View[]" line="110"/>
                    <scope line="111"/>
                </scope>
            </method>
            <javadoc line="120">
                Sets the parent of the view.
                  This is reimplemented to provide the superclass
                  behavior as well as calling the &lt;code&gt;loadChildren&lt;/code&gt;
                  method if this view does not already have children.
                  The children should not be loaded in the
                  constructor because the act of setting the parent
                  may cause them to try to search up the hierarchy
                  (to get the hosting &lt;code&gt;Container&lt;/code&gt; for example).
                  If this view has children (the view is being moved
                  from one place in the view hierarchy to another),
                  the &lt;code&gt;loadChildren&lt;/code&gt; method will not be called.                
                <param>
                    parent the parent of the view, <code>null</code> if none                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="135">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <scope line="137">
                    <declaration name="f" type="ViewFactory" line="138"/>
                </scope>
            </method>
            <javadoc line="143">
                Returns the number of child views of this view.                
                <return>
                    the number of views >= 0                    
                </return>
                <see>
                    #getView                    
                </see>
            </javadoc>
            <method name="getViewCount" type="int" line="149"/>
            <javadoc line="153">
                Returns the n-th view in this container.                
                <param>
                    n the number of the desired view, >= 0 && < getViewCount()                    
                </param>
                <return>
                    the view at index <code>n</code>                    
                </return>
            </javadoc>
            <method name="getView" type="View" line="159">
                <params>
                    <param name="n" type="int"/>
                </params>
            </method>
            <javadoc line="163">
                Replaces child views.  If there are no views to remove
                  this acts as an insert.  If there are no views to
                  add this acts as a remove.  Views being removed will
                  have the parent set to &lt;code&gt;null&lt;/code&gt;,
                  and the internal reference to them removed so that they
                  may be garbage collected.                
                <param>
                    offset the starting index into the child views to insert
                      the new views; >= 0 and <= getViewCount                    
                </param>
                <param>
                    length the number of existing child views to remove;
                      this should be a value >= 0 and <= (getViewCount() - offset)                    
                </param>
                <param>
                    views the child views to add; this value can be
                      <code>null</code>
                      to indicate no children are being added (useful to remove)                    
                </param>
            </javadoc>
            <method name="replace" type="void" line="179">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="views" type="View[]"/>
                </params>
                <comment line="181">
                    make sure an array exists                    
                </comment>
                <comment line="186">
                    update parent reference on removed views                    
                </comment>
                <comment line="189">
                    in FlowView.java view might be referenced
                     from two super-views as a child. see logicalView                    
                </comment>
                <comment line="196">
                    update the array                    
                </comment>
                <comment line="202">
                    need to grow the array                    
                </comment>
                <comment line="210">
                    patch the existing array                    
                </comment>
                <comment line="216">
                    update parent reference on added views                    
                </comment>
                <scope line="181"/>
                <scope line="186">
                    <scope line="187"/>
                </scope>
                <declaration name="delta" type="int" line="196"/>
                <declaration name="src" type="int" line="197"/>
                <declaration name="nmove" type="int" line="198"/>
                <declaration name="dest" type="int" line="199"/>
                <scope line="200">
                    <declaration name="newLength" type="int" line="202"/>
                    <declaration name="newChildren" type="View[]" line="203"/>
                </scope>
                <scope line="208"/>
                <scope line="216"/>
            </method>
            <javadoc line="221">
                Fetches the allocation for the given child view to
                  render into. This enables finding out where various views
                  are located.                
                <param>
                    index the index of the child, >= 0 && < getViewCount()                    
                </param>
                <param>
                    a  the allocation to this view                    
                </param>
                <return>
                    the allocation to the child                    
                </return>
            </javadoc>
            <method name="getChildAllocation" type="Shape" line="230">
                <params>
                    <param name="index" type="int"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="231"/>
            </method>
            <javadoc line="236">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    b a bias value of either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code>                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does
                      not represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="249">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <comment line="263">
                    We are likely invalid, fail.                    
                </comment>
                <declaration name="isBackward" type="boolean" line="250"/>
                <declaration name="testPos" type="int" line="251"/>
                <scope line="252"/>
                <declaration name="vIndex" type="int" line="255"/>
                <scope line="256">
                    <declaration name="v" type="View" line="257"/>
                    <scope line="259">
                        <declaration name="childShape" type="Shape" line="260"/>
                        <scope line="261"/>
                        <declaration name="retShape" type="Shape" line="265"/>
                        <scope line="266">
                            <scope line="267"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="279">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    p0 the position to convert >= 0                    
                </param>
                <param>
                    b0 the bias toward the previous character or the
                      next character represented by p0, in case the
                      position is a boundary of two views; either
                      <code>Position.Bias.Forward</code> or
                      <code>Position.Bias.Backward</code>                    
                </param>
                <param>
                    p1 the position to convert >= 0                    
                </param>
                <param>
                    b1 the bias toward the previous character or the
                      next character represented by p1, in case the
                      position is a boundary of two views                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position is returned                    
                </return>
                <exception>
                    BadLocationException  if the given position does
                      not represent a valid location in the associated document                    
                </exception>
                <exception>
                    IllegalArgumentException for an invalid bias argument                    
                </exception>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="300">
                <params>
                    <param name="p0" type="int"/>
                    <param name="b0" type="Position.Bias"/>
                    <param name="p1" type="int"/>
                    <param name="b1" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="316">
                    Range contained in one view                    
                </comment>
                <comment line="319">
                    Straddles some views.                    
                </comment>
                <comment line="324">
                    Views may not be in same order as model.
                     v0 or v1 may be null if there is a gap in the range this
                     view contains.                    
                </comment>
                <comment line="344">
                    Views entirely covered by range.                    
                </comment>
                <comment line="352">
                    End view.                    
                </comment>
                <scope line="301"/>
                <declaration name="alloc" type="Rectangle" line="304"/>
                <declaration name="r0" type="Rectangle" line="305"/>
                <declaration name="v0" type="View" line="306"/>
                <declaration name="r1" type="Rectangle" line="308"/>
                <declaration name="v1" type="View" line="309"/>
                <scope line="311">
                    <scope line="312"/>
                </scope>
                <declaration name="viewCount" type="int" line="319"/>
                <declaration name="counter" type="int" line="320"/>
                <scope line="321">
                    <declaration name="v" type="View" line="322"/>
                    <scope line="326">
                        <declaration name="endView" type="View" line="327"/>
                        <declaration name="retRect" type="Rectangle" line="328"/>
                        <declaration name="tempRect" type="Rectangle" line="329"/>
                        <scope line="330"/>
                        <scope line="336"/>
                        <scope line="345"/>
                        <scope line="352">
                            <declaration name="endShape" type="Shape" line="353"/>
                            <scope line="354"/>
                            <scope line="359"/>
                            <scope line="363"/>
                            <scope line="366"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="377">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x   x coordinate of the view location to convert >= 0                    
                </param>
                <param>
                    y   y coordinate of the view location to convert >= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    bias either <code>Position.Bias.Forward</code> or
                      <code>Position.Bias.Backward</code>                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point in the view >= 0                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="390">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <comment line="394">
                    point is before the range represented                    
                </comment>
                <comment line="408">
                    point is after the range represented.                    
                </comment>
                <comment line="417">
                    NOTE: this could actually use end offset with backward.                    
                </comment>
                <comment line="423">
                    locate the child and pass along the request                    
                </comment>
                <declaration name="alloc" type="Rectangle" line="391"/>
                <scope line="392">
                    <declaration name="retValue" type="int" line="394"/>
                    <scope line="396"/>
                    <scope line="399"/>
                    <scope line="400"/>
                    <scope line="401"/>
                </scope>
                <scope line="406">
                    <declaration name="retValue" type="int" line="408"/>
                    <scope line="409"/>
                    <scope line="412"/>
                    <scope line="413"/>
                    <scope line="415"/>
                </scope>
                <scope line="421">
                    <declaration name="v" type="View" line="423"/>
                    <scope line="424"/>
                </scope>
            </method>
            <javadoc line="431">
                Provides a way to determine the next visually represented model
                  location that one might place a caret.  Some views may not be visible,
                  they might not be in the same order found in the model, or they just
                  might not allow access to some of the locations in the model.
                  This is a convenience method for {@link #getNextNorthSouthVisualPositionFrom}and {@link #getNextEastWestVisualPositionFrom}.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    b a bias value of either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code>                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard;
                      this may be one of the following:
                      <ul>
                      <li><code>SwingConstants.WEST</code>
                      <li><code>SwingConstants.EAST</code>
                      <li><code>SwingConstants.NORTH</code>
                      <li><code>SwingConstants.SOUTH</code>
                      </ul>                    
                </param>
                <param>
                    biasRet an array containing the bias that was checked                    
                </param>
                <return>
                    the location within the model that best represents the next
                      location visual position                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>direction</code> is invalid                    
                </exception>
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="460">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="461"/>
            </method>
            <javadoc line="481">
                Returns the child view index representing the given
                  position in the model.  This is implemented to call the
                  &lt;code&gt;getViewIndexByPosition&lt;/code&gt;
                  method for backward compatibility.                
                <param>
                    pos the position >= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getViewIndex" type="int" line="492">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <scope line="493"/>
                <scope line="496"/>
            </method>
            <method name="isBefore" type="boolean" line="505"/>
            <javadoc line="505">
                Tests whether a point lies before the rectangle range.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    alloc the rectangle                    
                </param>
                <return>
                    true if the point is before the specified range                    
                </return>
            </javadoc>
            <method name="isAfter" type="boolean" line="515"/>
            <javadoc line="515">
                Tests whether a point lies after the rectangle range.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    alloc the rectangle                    
                </param>
                <return>
                    true if the point is after the specified range                    
                </return>
            </javadoc>
            <method name="getViewAtPoint" type="View" line="525"/>
            <javadoc line="525">
                Fetches the child view at the given coordinates.                
                <param>
                    x the X coordinate >= 0                    
                </param>
                <param>
                    y the Y coordinate >= 0                    
                </param>
                <param>
                    alloc the parent's allocation on entry, which should
                      be changed to the child's allocation on exit                    
                </param>
                <return>
                    the child view                    
                </return>
            </javadoc>
            <method name="childAllocation" type="void" line="536"/>
            <javadoc line="536">
                Returns the allocation for a given child.                
                <param>
                    index the index of the child, >= 0 && < getViewCount()                    
                </param>
                <param>
                    a  the allocation to the interior of the box on entry,
                      and the allocation of the child view at the index on exit.                    
                </param>
            </javadoc>
            <javadoc line="545">
                Fetches the child view that represents the given position in
                  the model.  This is implemented to fetch the view in the case
                  where there is a child view for each child element.                
                <param>
                    pos the position >= 0                    
                </param>
                <param>
                    a  the allocation to the interior of the box on entry,
                      and the allocation of the view containing the position on exit                    
                </param>
                <return>
                    the view representing the given position, or
                      <code>null</code> if there isn't one                    
                </return>
            </javadoc>
            <method name="getViewAtPosition" type="View" line="556">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Rectangle"/>
                </params>
                <declaration name="index" type="int" line="557"/>
                <scope line="558">
                    <declaration name="v" type="View" line="559"/>
                    <scope line="560"/>
                </scope>
            </method>
            <javadoc line="568">
                Fetches the child view index representing the given position in
                  the model.  This is implemented to fetch the view in the case
                  where there is a child view for each child element.                
                <param>
                    pos the position >= 0                    
                </param>
                <return>
                    index of the view representing the given position, or
                      -1 if no view represents that position                    
                </return>
            </javadoc>
            <method name="getViewIndexAtPosition" type="int" line="577">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="elem" type="Element" line="578"/>
            </method>
            <javadoc line="582">
                Translates the immutable allocation given to the view
                  to a mutable allocation that represents the interior
                  allocation (i.e. the bounds of the given allocation
                  with the top, left, bottom, and right insets removed.
                  It is expected that the returned value would be further
                  mutated to represent an allocation to a child view.
                  This is implemented to reuse an instance variable so
                  it avoids creating excessive Rectangles.  Typically
                  the result of calling this method would be fed to
                  the &lt;code&gt;childAllocation&lt;/code&gt; method.                
                <param>
                    a the allocation given to the view                    
                </param>
                <return>
                    the allocation that represents the inside of the
                      view after the margins have all been removed; if the
                      given allocation was <code>null</code>,
                      the return value is <code>null</code>                    
                </return>
            </javadoc>
            <method name="getInsideAllocation" type="Rectangle" line="600">
                <params>
                    <param name="a" type="Shape"/>
                </params>
                <comment line="603">
                    get the bounds, hopefully without allocating
                     a new rectangle.  The Shape argument should
                     not be modified... we copy it into the
                     child allocation.                    
                </comment>
                <scope line="601">
                    <declaration name="alloc" type="Rectangle" line="606"/>
                    <scope line="607"/>
                    <scope line="609"/>
                </scope>
            </method>
            <javadoc line="623">
                Sets the insets from the paragraph attributes specified in
                  the given attributes.                
                <param>
                    attr the attributes                    
                </param>
            </javadoc>
            <method name="setParagraphInsets" type="void" line="629">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="631">
                    Since version 1.1 doesn&apos;t have scaling and assumes
                     a pixel is equal to a point, we just cast the point
                     sizes to integers.                    
                </comment>
            </method>
            <javadoc line="639">
                Sets the insets for the view.                
                <param>
                    top the top inset >= 0                    
                </param>
                <param>
                    left the left inset >= 0                    
                </param>
                <param>
                    bottom the bottom inset >= 0                    
                </param>
                <param>
                    right the right inset >= 0                    
                </param>
            </javadoc>
            <method name="setInsets" type="void" line="647">
                <params>
                    <param name="top" type="short"/>
                    <param name="left" type="short"/>
                    <param name="bottom" type="short"/>
                    <param name="right" type="short"/>
                </params>
            </method>
            <javadoc line="654">
                Gets the left inset.                
                <return>
                    the inset >= 0                    
                </return>
            </javadoc>
            <method name="getLeftInset" type="short" line="659"/>
            <javadoc line="663">
                Gets the right inset.                
                <return>
                    the inset >= 0                    
                </return>
            </javadoc>
            <method name="getRightInset" type="short" line="668"/>
            <javadoc line="672">
                Gets the top inset.                
                <return>
                    the inset >= 0                    
                </return>
            </javadoc>
            <method name="getTopInset" type="short" line="677"/>
            <javadoc line="681">
                Gets the bottom inset.                
                <return>
                    the inset >= 0                    
                </return>
            </javadoc>
            <method name="getBottomInset" type="short" line="686"/>
            <javadoc line="690">
                Returns the next visual position for the cursor, in either the
                  north or south direction.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    b a bias value of either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code>                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard;
                      this may be one of the following:
                      <ul>
                      <li><code>SwingConstants.NORTH</code>
                      <li><code>SwingConstants.SOUTH</code>
                      </ul>                    
                </param>
                <param>
                    biasRet an array containing the bias that was checked                    
                </param>
                <return>
                    the location within the model that best represents the next
                      north or south location                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>direction</code> is invalid                    
                </exception>
                <see>
                    #getNextVisualPositionFrom                    
                </see>
                <return>
                    the next position west of the passed in position                    
                </return>
            </javadoc>
            <method name="getNextNorthSouthVisualPositionFrom" type="int" line="717">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
            </method>
            <javadoc line="722">
                Returns the next visual position for the cursor, in either the
                  east or west direction.                
                <param>
                    pos the position to convert >= 0                    
                </param>
                <param>
                    b a bias value of either <code>Position.Bias.Forward</code>
                      or <code>Position.Bias.Backward</code>                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction the direction from the current position that can
                      be thought of as the arrow keys typically found on a keyboard;
                      this may be one of the following:
                      <ul>
                      <li><code>SwingConstants.WEST</code>
                      <li><code>SwingConstants.EAST</code>
                      </ul>                    
                </param>
                <param>
                    biasRet an array containing the bias that was checked                    
                </param>
                <return>
                    the location within the model that best represents the next
                      west or east location                    
                </return>
                <exception>
                    BadLocationException                    
                </exception>
                <exception>
                    IllegalArgumentException if <code>direction</code> is invalid                    
                </exception>
                <see>
                    #getNextVisualPositionFrom                    
                </see>
            </javadoc>
            <method name="getNextEastWestVisualPositionFrom" type="int" line="748">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
            </method>
            <javadoc line="753">
                Determines in which direction the next view lays.
                  Consider the &lt;code&gt;View&lt;/code&gt; at index n. Typically the
                  &lt;code&gt;View&lt;/code&gt;s are layed out from left to right,
                  so that the &lt;code&gt;View&lt;/code&gt; to the EAST will be
                  at index n + 1, and the &lt;code&gt;View&lt;/code&gt; to the WEST
                  will be at index n - 1. In certain situations,
                  such as with bidirectional text, it is possible
                  that the &lt;code&gt;View&lt;/code&gt; to EAST is not at index n + 1,
                  but rather at index n - 1, or that the &lt;code&gt;View&lt;/code&gt;
                  to the WEST is not at index n - 1, but index n + 1.
                  In this case this method would return true, indicating the
                  &lt;code&gt;View&lt;/code&gt;s are layed out in descending order.
                  &lt;p&gt;
                  This unconditionally returns false, subclasses should override this
                  method if there is the possibility for laying &lt;code&gt;View&lt;/code&gt;s in
                  descending order.                
                <param>
                    position position into the model                    
                </param>
                <param>
                    bias either <code>Position.Bias.Forward</code> or
                      <code>Position.Bias.Backward</code>                    
                </param>
                <return>
                    false                    
                </return>
            </javadoc>
            <method name="flipEastAndWestAtEnds" type="boolean" line="777">
                <params>
                    <param name="position" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
            </method>
            <declaration name="ZERO" type="View[]" line="785"/>
            <declaration name="children" type="View[]" line="787"/>
            <declaration name="nchildren" type="int" line="788"/>
            <declaration name="left" type="short" line="789"/>
            <declaration name="right" type="short" line="790"/>
            <declaration name="top" type="short" line="791"/>
            <declaration name="bottom" type="short" line="792"/>
            <declaration name="childAlloc" type="Rectangle" line="793"/>
        </class>
    </source>