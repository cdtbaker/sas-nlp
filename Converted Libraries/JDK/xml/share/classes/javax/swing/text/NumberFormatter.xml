<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.lang.reflect"/>
        <import package="java.text"/>
        <import package="java.util"/>
        <class name="NumberFormatter" line="5">
            <extends class="InternationalFormatter"/>
            <javadoc line="5">
                &lt;code&gt;NumberFormatter&lt;/code&gt; subclasses &lt;code&gt;InternationalFormatter&lt;/code&gt;
                  adding special behavior for numbers. Among the specializations are
                  (these are only used if the &lt;code&gt;NumberFormatter&lt;/code&gt; does not display
                  invalid nubers, eg &lt;code&gt;setAllowsInvalid(false)&lt;/code&gt;):
                  &lt;ul&gt;
                  &lt;li&gt;Pressing +/- (- is determined from the
                  &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; associated with the
                  &lt;code&gt;DecimalFormat&lt;/code&gt;) in any field but the exponent
                  field will attempt to change the sign of the number to
                  positive/negative.
                  &lt;li&gt;Pressing +/- (- is determined from the
                  &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; associated with the
                  &lt;code&gt;DecimalFormat&lt;/code&gt;) in the exponent field will
                  attemp to change the sign of the exponent to positive/negative.
                  &lt;/ul&gt;
                  &lt;p&gt;
                  If you are displaying scientific numbers, you may wish to turn on
                  overwrite mode, &lt;code&gt;setOverwriteMode(true)&lt;/code&gt;. For example:
                  &lt;pre&gt;
                  DecimalFormat decimalFormat = new DecimalFormat(&quot;0.000E0&quot;);
                  NumberFormatter textFormatter = new NumberFormatter(decimalFormat);
                  textFormatter.setOverwriteMode(true);
                  textFormatter.setAllowsInvalid(false);
                  &lt;/pre&gt;
                  &lt;p&gt;
                  If you are going to allow the user to enter decimal
                  values, you should either force the DecimalFormat to contain at least
                  one decimal (&lt;code&gt;#.0###&lt;/code&gt;), or allow the value to be invalid
                  &lt;code&gt;setAllowsInvalid(true)&lt;/code&gt;. Otherwise users may not be able to
                  input decimal values.
                  &lt;p&gt;
                  &lt;code&gt;NumberFormatter&lt;/code&gt; provides slightly different behavior to
                  &lt;code&gt;stringToValue&lt;/code&gt; than that of its superclass. If you have
                  specified a Class for values, {@link #setValueClass}, that is one of
                  of &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;,
                  &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Byte&lt;/code&gt; or &lt;code&gt;Short&lt;/code&gt; and
                  the Format&apos;s &lt;code&gt;parseObject&lt;/code&gt; returns an instance of
                  &lt;code&gt;Number&lt;/code&gt;, the corresponding instance of the value class
                  will be created using the constructor appropriate for the primitive
                  type the value class represents. For example:
                  &lt;code&gt;setValueClass(Integer.class)&lt;/code&gt; will cause the resulting
                  value to be created via
                  &lt;code&gt;new Integer(((Number)formatter.parseObject(string)).intValue())&lt;/code&gt;.
                  This is typically useful if you
                  wish to set a min/max value as the various &lt;code&gt;Number&lt;/code&gt;
                  implementations are generally not comparable to each other. This is also
                  useful if for some reason you need a specific &lt;code&gt;Number&lt;/code&gt;
                  implementation for your values.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="specialChars" type="String" line="66"/>
            <javadoc line="66">
                The special characters from the Format instance.                
            </javadoc>
            <javadoc line="70">
                Creates a &lt;code&gt;NumberFormatter&lt;/code&gt; with the a default
                  &lt;code&gt;NumberFormat&lt;/code&gt; instance obtained from
                  &lt;code&gt;NumberFormat.getNumberInstance()&lt;/code&gt;.                
            </javadoc>
            <method name="NumberFormatter" type="constructor" line="75"/>
            <javadoc line="78">
                Creates a NumberFormatter with the specified Format instance.                
                <param>
                    format Format used to dictate legal values                    
                </param>
            </javadoc>
            <method name="NumberFormatter" type="constructor" line="82">
                <params>
                    <param name="format" type="NumberFormat"/>
                </params>
            </method>
            <javadoc line="89">
                Sets the format that dictates the legal values that can be edited
                  and displayed.
                  &lt;p&gt;
                  If you have used the nullary constructor the value of this property
                  will be determined for the current locale by way of the
                  &lt;code&gt;NumberFormat.getNumberInstance()&lt;/code&gt; method.                
                <param>
                    format NumberFormat instance used to dictate legal values                    
                </param>
            </javadoc>
            <method name="setFormat" type="void" line="98">
                <params>
                    <param name="format" type="Format"/>
                </params>
                <declaration name="dfs" type="DecimalFormatSymbols" line="100"/>
                <scope line="101">
                    <declaration name="sb" type="StringBuilder" line="102"/>
                </scope>
                <scope line="115"/>
            </method>
            <javadoc line="119">
                Invokes &lt;code&gt;parseObject&lt;/code&gt; on &lt;code&gt;f&lt;/code&gt;, returning
                  its value.                
            </javadoc>
            <method name="stringToValue" type="Object" line="123">
                <params>
                    <param name="text" type="String"/>
                    <param name="f" type="Format"/>
                </params>
                <scope line="124"/>
                <declaration name="value" type="Object" line="127"/>
            </method>
            <javadoc line="130">
                Converts the passed in value to the passed in class. This only
                  works if &lt;code&gt;valueClass&lt;/code&gt; is one of &lt;code&gt;Integer&lt;/code&gt;,
                  &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;,
                  &lt;code&gt;Byte&lt;/code&gt; or &lt;code&gt;Short&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;
                  is an instanceof &lt;code&gt;Number&lt;/code&gt;.                
            </javadoc>
            <method name="convertValueToValueClass" type="Object" line="137">
                <params>
                    <param name="value" type="Object"/>
                    <param name="valueClass" type="Class"/>
                </params>
                <scope line="138">
                    <declaration name="numberValue" type="Number" line="139"/>
                    <scope line="140"/>
                    <scope line="143"/>
                    <scope line="146"/>
                    <scope line="149"/>
                    <scope line="152"/>
                    <scope line="155"/>
                </scope>
            </method>
            <javadoc line="161">
                Returns the character that is used to toggle to positive values.                
            </javadoc>
            <method name="getPositiveSign" type="char" line="164"/>
            <javadoc line="167">
                Returns the character that is used to toggle to negative values.                
            </javadoc>
            <method name="getMinusSign" type="char" line="170">
                <declaration name="dfs" type="DecimalFormatSymbols" line="171"/>
                <scope line="172"/>
            </method>
            <javadoc line="177">
                Returns the character that is used to toggle to negative values.                
            </javadoc>
            <method name="getDecimalSeparator" type="char" line="180">
                <declaration name="dfs" type="DecimalFormatSymbols" line="181"/>
                <scope line="182"/>
            </method>
            <javadoc line="187">
                Returns the DecimalFormatSymbols from the Format instance.                
            </javadoc>
            <method name="getDecimalFormatSymbols" type="DecimalFormatSymbols" line="190">
                <declaration name="f" type="Format" line="191"/>
                <scope line="192"/>
            </method>
            <javadoc line="197">
                Subclassed to return false if &lt;code&gt;text&lt;/code&gt; contains in an invalid
                  character to insert, that is, it is not a digit
                  (&lt;code&gt;Character.isDigit()&lt;/code&gt;) and
                  not one of the characters defined by the DecimalFormatSymbols.                
            </javadoc>
            <method name="isLegalInsertText" type="boolean" line="203">
                <params>
                    <param name="text" type="String"/>
                </params>
                <scope line="204"/>
                <scope line="207">
                    <declaration name="aChar" type="char" line="208"/>
                    <scope line="209"/>
                </scope>
            </method>
            <javadoc line="215">
                Subclassed to treat the decimal separator, grouping separator,
                  exponent symbol, percent, permille, currency and sign as literals.                
            </javadoc>
            <method name="isLiteral" type="boolean" line="219">
                <params>
                    <param name="attrs" type="Map"/>
                </params>
                <scope line="220">
                    <scope line="221"/>
                    <declaration name="size" type="int" line="224"/>
                    <scope line="225">
                        <scope line="227"/>
                    </scope>
                    <scope line="231"/>
                    <scope line="234"/>
                    <scope line="237"/>
                    <scope line="240"/>
                    <scope line="243"/>
                </scope>
            </method>
            <javadoc line="250">
                Subclassed to make the decimal separator navigatable, as well
                  as making the character between the integer field and the next
                  field navigatable.                
            </javadoc>
            <method name="isNavigatable" type="boolean" line="255">
                <params>
                    <param name="index" type="int"/>
                </params>
                <scope line="256"/>
            </method>
            <javadoc line="261">
                Returns the first &lt;code&gt;NumberFormat.Field&lt;/code&gt; starting
                  &lt;code&gt;index&lt;/code&gt; incrementing by &lt;code&gt;direction&lt;/code&gt;.                
            </javadoc>
            <method name="getFieldFrom" type="NumberFormat.Field" line="265">
                <params>
                    <param name="index" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <scope line="266">
                    <declaration name="max" type="int" line="267"/>
                    <declaration name="iterator" type="AttributedCharacterIterator" line="268"/>
                    <scope line="269"/>
                    <scope line="272">
                        <declaration name="attrs" type="Map" line="274"/>
                        <scope line="275">
                            <scope line="276">
                                <scope line="277"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="287">
                Overriden to toggle the value if the positive/minus sign
                  is inserted.                
            </javadoc>
            <method name="replace" type="void" line="291">
                <params>
                    <param name="fb" type="DocumentFilter.FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="string" type="String"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="292"/>
            </method>
            <javadoc line="297">
                Will change the sign of the integer or exponent field if
                  &lt;code&gt;aChar&lt;/code&gt; is the positive or minus sign. Returns
                  true if a sign change was attempted.                
            </javadoc>
            <method name="toggleSignIfNecessary" type="boolean" line="302">
                <params>
                    <param name="fb" type="DocumentFilter.FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="aChar" type="char"/>
                </params>
                <scope line="303">
                    <declaration name="field" type="NumberFormat.Field" line="304"/>
                    <declaration name="newValue" type="Object" line="305"/>
                    <scope line="306">
                        <scope line="307"/>
                        <scope line="310"/>
                        <scope line="313">
                            <declaration name="lc" type="int" line="314"/>
                            <declaration name="string" type="String" line="315"/>
                        </scope>
                    </scope>
                    <scope line="323"/>
                </scope>
            </method>
            <javadoc line="329">
                Invoked to toggle the sign. For this to work the value class
                  must have a single arg constructor that takes a String.                
            </javadoc>
            <method name="toggleSign" type="Object" line="333">
                <params>
                    <param name="positive" type="boolean"/>
                </params>
                <declaration name="value" type="Object" line="334"/>
                <scope line="335">
                    <declaration name="string" type="String" line="336"/>
                    <scope line="337">
                        <scope line="338">
                            <scope line="339"/>
                        </scope>
                        <scope line="343">
                            <scope line="344"/>
                            <scope line="347"/>
                        </scope>
                        <scope line="351">
                            <declaration name="valueClass" type="Class&amp;lt;?&amp;gt;" line="352"/>
                            <scope line="353"/>
                            <scope line="356">
                                <declaration name="cons" type="Constructor" line="357"/>
                                <scope line="358"/>
                            </scope>
                            <scope line="362"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="369">
                Invoked to toggle the sign of the exponent (for scientific
                  numbers).                
            </javadoc>
            <method name="toggleExponentSign" type="Object" line="373">
                <params>
                    <param name="offset" type="int"/>
                    <param name="aChar" type="char"/>
                </params>
                <declaration name="string" type="String" line="374"/>
                <declaration name="replaceLength" type="int" line="375"/>
                <declaration name="loc" type="int" line="376"/>
                <scope line="377"/>
                <scope line="381"/>
                <scope line="384"/>
            </method>
        </class>
    </source>