<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Arrays"/>
        <import package="java.awt"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.SizeRequirements"/>
        <class name="ParagraphView" line="7">
            <extends class="FlowView"/>
            <implements interface="TabExpander"/>
            <javadoc line="7">
                View of a simple line-wrapping paragraph that supports
                  multiple fonts, colors, components, icons, etc.  It is
                  basically a vertical box with a margin around it.  The
                  contents of the box are a bunch of rows which are special
                  horizontal boxes.  This view creates a collection of
                  views that represent the child elements of the paragraph
                  element.  Each of these views are placed into a row
                  directly if they will fit, otherwise the &lt;code&gt;breakView&lt;/code&gt;
                  method is called to try and carve the view into pieces
                  that fit.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Scott Violet                    
                </author>
                <author>
                    Igor Kushnirskiy                    
                </author>
                <see>
                    View                    
                </see>
            </javadoc>
            <javadoc line="24">
                Constructs a &lt;code&gt;ParagraphView&lt;/code&gt; for the given element.                
                <param>
                    elem the element that this view is responsible for                    
                </param>
            </javadoc>
            <method name="ParagraphView" type="constructor" line="28">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="doc" type="Document" line="31"/>
                <declaration name="i18nFlag" type="Object" line="32"/>
                <scope line="33">
                    <scope line="34">
                        <scope line="35">
                            <declaration name="classname" type="String" line="36"/>
                            <declaration name="loader" type="ClassLoader" line="37"/>
                            <scope line="38"/>
                            <scope line="41"/>
                        </scope>
                        <declaration name="o" type="Object" line="45"/>
                        <scope line="46"/>
                    </scope>
                    <scope line="50"/>
                </scope>
            </method>
            <javadoc line="55">
                Sets the type of justification.                
                <param>
                    j one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;StyleConstants.ALIGN_LEFT&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;StyleConstants.ALIGN_CENTER&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;StyleConstants.ALIGN_RIGHT&lt;/code&gt;
                      &lt;/ul&gt;                    
                </param>
            </javadoc>
            <method name="setJustification" type="void" line="64">
                <params>
                    <param name="j" type="int"/>
                </params>
            </method>
            <javadoc line="67">
                Sets the line spacing.                
                <param>
                    ls the value is a factor of the line hight                    
                </param>
            </javadoc>
            <method name="setLineSpacing" type="void" line="71">
                <params>
                    <param name="ls" type="float"/>
                </params>
            </method>
            <javadoc line="74">
                Sets the indent on the first line.                
                <param>
                    fi the value in points                    
                </param>
            </javadoc>
            <method name="setFirstLineIndent" type="void" line="78">
                <params>
                    <param name="fi" type="float"/>
                </params>
            </method>
            <javadoc line="81">
                Set the cached properties from the attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="84">
                <declaration name="attr" type="AttributeSet" line="85"/>
                <scope line="86">
                    <declaration name="a" type="Integer" line="88"/>
                    <declaration name="alignment" type="int" line="89"/>
                    <scope line="90">
                        <declaration name="doc" type="Document" line="91"/>
                        <declaration name="o" type="Object" line="92"/>
                        <scope line="93"/>
                        <scope line="96"/>
                    </scope>
                    <scope line="100"/>
                </scope>
            </method>
            <javadoc line="108">
                Returns the number of views that this view is
                  responsible for.
                  The child views of the paragraph are rows which
                  have been used to arrange pieces of the &lt;code&gt;View&lt;/code&gt;s
                  that represent the child elements.  This is the number
                  of views that have been tiled in two dimensions,
                  and should be equivalent to the number of child elements
                  to the element this view is responsible for.                
                <return>
                    the number of views that this &lt;code&gt;ParagraphView&lt;/code&gt;
                      is responsible for                    
                </return>
            </javadoc>
            <method name="getLayoutViewCount" type="int" line="120"/>
            <javadoc line="123">
                Returns the view at a given &lt;code&gt;index&lt;/code&gt;.
                  The child views of the paragraph are rows which
                  have been used to arrange pieces of the &lt;code&gt;Views&lt;/code&gt;
                  that represent the child elements.  This methods returns
                  the view responsible for the child element index
                  (prior to breaking).  These are the Views that were
                  produced from a factory (to represent the child
                  elements) and used for layout.                
                <param>
                    index the &lt;code&gt;index&lt;/code&gt; of the desired view                    
                </param>
                <return>
                    the view at &lt;code&gt;index&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getLayoutView" type="View" line="135">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <javadoc line="138">
                Returns the next visual position for the cursor, in
                  either the east or west direction.
                  Overridden from &lt;code&gt;CompositeView&lt;/code&gt;.                
                <param>
                    pos position into the model                    
                </param>
                <param>
                    b either &lt;code&gt;Position.Bias.Forward&lt;/code&gt; or
                      &lt;code&gt;Position.Bias.Backward&lt;/code&gt;                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction either &lt;code&gt;SwingConstants.NORTH&lt;/code&gt;
                      or &lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;                    
                </param>
                <param>
                    biasRet an array containing the bias that were checked
                      in this method                    
                </param>
                <return>
                    the location in the model that represents the
                      next location visual position                    
                </return>
            </javadoc>
            <method name="getNextNorthSouthVisualPositionFrom" type="int" line="153">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
                <declaration name="vIndex" type="int" line="154"/>
                <scope line="155"/>
                <scope line="158">
                    <scope line="159"/>
                    <scope line="162"/>
                    <scope line="165">
                        <scope line="166"/>
                    </scope>
                    <scope line="171"/>
                </scope>
                <declaration name="text" type="JTextComponent" line="175"/>
                <declaration name="c" type="Caret" line="176"/>
                <declaration name="magicPoint" type="Point" line="177"/>
                <declaration name="x" type="int" line="179"/>
                <scope line="180">
                    <declaration name="posBounds" type="Shape" line="181"/>
                    <scope line="182"/>
                    <scope line="185"/>
                    <scope line="188"/>
                    <scope line="191"/>
                </scope>
                <scope line="195"/>
            </method>
            <javadoc line="200">
                Returns the closest model position to &lt;code&gt;x&lt;/code&gt;.
                  &lt;code&gt;rowIndex&lt;/code&gt; gives the index of the view that corresponds
                  that should be looked in.                
                <param>
                    pos  position into the model                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <param>
                    direction one of the following values:
                      &lt;ul&gt;
                      &lt;li&gt;&lt;code&gt;SwingConstants.NORTH&lt;/code&gt;
                      &lt;li&gt;&lt;code&gt;SwingConstants.SOUTH&lt;/code&gt;
                      &lt;/ul&gt;                    
                </param>
                <param>
                    biasRet an array containing the bias that were checked
                      in this method                    
                </param>
                <param>
                    rowIndex the index of the view                    
                </param>
                <param>
                    x the x coordinate of interest                    
                </param>
                <return>
                    the closest model position to &lt;code&gt;x&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getClosestPositionTo" type="int" line="217">
                <params>
                    <param name="pos" type="int"/>
                    <param name="b" type="Position.Bias"/>
                    <param name="a" type="Shape"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                    <param name="rowIndex" type="int"/>
                    <param name="x" type="int"/>
                </params>
                <declaration name="text" type="JTextComponent" line="218"/>
                <declaration name="doc" type="Document" line="219"/>
                <declaration name="aDoc" type="AbstractDocument" line="220"/>
                <declaration name="row" type="View" line="221"/>
                <declaration name="lastPos" type="int" line="222"/>
                <scope line="224">
                    <declaration name="v" type="View" line="225"/>
                    <declaration name="start" type="int" line="226"/>
                    <declaration name="ltr" type="boolean" line="227"/>
                    <scope line="228">
                        <scope line="230">
                            <declaration name="xx" type="float" line="231"/>
                            <scope line="232">
                                <scope line="233"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="240">
                        <scope line="241">
                            <declaration name="xx" type="float" line="242"/>
                            <scope line="243">
                                <scope line="244"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="252"/>
            </method>
            <javadoc line="257">
                Determines in which direction the next view lays.
                  Consider the &lt;code&gt;View&lt;/code&gt; at index n.
                  Typically the &lt;code&gt;View&lt;/code&gt;s are layed out
                  from left to right, so that the &lt;code&gt;View&lt;/code&gt;
                  to the EAST will be at index n + 1, and the
                  &lt;code&gt;View&lt;/code&gt; to the WEST will be at index n - 1.
                  In certain situations, such as with bidirectional text,
                  it is possible that the &lt;code&gt;View&lt;/code&gt; to EAST is not
                  at index n + 1, but rather at index n - 1,
                  or that the &lt;code&gt;View&lt;/code&gt; to the WEST is not at
                  index n - 1, but index n + 1.  In this case this method
                  would return true, indicating the &lt;code&gt;View&lt;/code&gt;s are
                  layed out in descending order.
                  &lt;p&gt;
                  This will return true if the text is layed out right
                  to left at position, otherwise false.                
                <param>
                    position position into the model                    
                </param>
                <param>
                    bias either &lt;code&gt;Position.Bias.Forward&lt;/code&gt; or
                      &lt;code&gt;Position.Bias.Backward&lt;/code&gt;                    
                </param>
                <return>
                    true if the text is layed out right to left at
                      position, otherwise false.                    
                </return>
            </javadoc>
            <method name="flipEastAndWestAtEnds" type="boolean" line="280">
                <params>
                    <param name="position" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
                <declaration name="doc" type="Document" line="281"/>
                <scope line="282"/>
            </method>
            <javadoc line="287">
                Fetches the constraining span to flow against for
                  the given child index.                
                <param>
                    index the index of the view being queried                    
                </param>
                <return>
                    the constraining span for the given view at
                      &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getFlowSpan" type="int" line="295">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="child" type="View" line="296"/>
                <declaration name="adjust" type="int" line="297"/>
                <scope line="298">
                    <declaration name="row" type="Row" line="299"/>
                </scope>
            </method>
            <javadoc line="304">
                Fetches the location along the flow axis that the
                  flow span will start at.                
                <param>
                    index the index of the view being queried                    
                </param>
                <return>
                    the location for the given view at
                      &lt;code&gt;index&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getFlowStart" type="int" line="312">
                <params>
                    <param name="index" type="int"/>
                </params>
                <declaration name="child" type="View" line="313"/>
                <declaration name="adjust" type="int" line="314"/>
                <scope line="315">
                    <declaration name="row" type="Row" line="316"/>
                </scope>
            </method>
            <javadoc line="321">
                Create a &lt;code&gt;View&lt;/code&gt; that should be used to hold a
                  a row&apos;s worth of children in a flow.                
                <return>
                    the new &lt;code&gt;View&lt;/code&gt;                    
                </return>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="createRow" type="View" line="327"/>
            <javadoc line="330">
                Returns the next tab stop position given a reference position.
                  This view implements the tab coordinate system, and calls
                  &lt;code&gt;getTabbedSpan&lt;/code&gt; on the logical children in the process
                  of layout to determine the desired span of the children.  The
                  logical children can delegate their tab expansion upward to
                  the paragraph which knows how to expand tabs.
                  &lt;code&gt;LabelView&lt;/code&gt; is an example of a view that delegates
                  its tab expansion needs upward to the paragraph.
                  &lt;p&gt;
                  This is implemented to try and locate a &lt;code&gt;TabSet&lt;/code&gt;
                  in the paragraph element&apos;s attribute set.  If one can be
                  found, its settings will be used, otherwise a default expansion
                  will be provided.  The base location for for tab expansion
                  is the left inset from the paragraphs most recent allocation
                  (which is what the layout of the children is based upon).                
                <param>
                    x the X reference position                    
                </param>
                <param>
                    tabOffset the position within the text stream
                      that the tab occurred at &gt;= 0                    
                </param>
                <return>
                    the trailing end of the tab expansion &gt;= 0                    
                </return>
                <see>
                    TabSet                    
                </see>
                <see>
                    TabStop                    
                </see>
                <see>
                    LabelView                    
                </see>
            </javadoc>
            <method name="nextTabStop" type="float" line="354">
                <params>
                    <param name="x" type="float"/>
                    <param name="tabOffset" type="int"/>
                </params>
                <declaration name="tabs" type="TabSet" line="357"/>
                <scope line="358"/>
                <declaration name="tab" type="TabStop" line="361"/>
                <scope line="362"/>
                <declaration name="alignment" type="int" line="365"/>
                <declaration name="offset" type="int" line="366"/>
                <scope line="381"/>
                <declaration name="charsSize" type="float" line="384"/>
            </method>
            <javadoc line="394">
                Gets the &lt;code&gt;Tabset&lt;/code&gt; to be used in calculating tabs.                
                <return>
                    the &lt;code&gt;TabSet&lt;/code&gt;                    
                </return>
            </javadoc>
            <method name="getTabSet" type="TabSet" line="398"/>
            <javadoc line="401">
                Returns the size used by the views between
                  &lt;code&gt;startOffset&lt;/code&gt; and &lt;code&gt;endOffset&lt;/code&gt;.
                  This uses &lt;code&gt;getPartialView&lt;/code&gt; to calculate the
                  size if the child view implements the
                  &lt;code&gt;TabableView&lt;/code&gt; interface. If a
                  size is needed and a &lt;code&gt;View&lt;/code&gt; does not implement
                  the &lt;code&gt;TabableView&lt;/code&gt; interface,
                  the &lt;code&gt;preferredSpan&lt;/code&gt; will be used.                
                <param>
                    startOffset the starting document offset &gt;= 0                    
                </param>
                <param>
                    endOffset the ending document offset &gt;= startOffset                    
                </param>
                <return>
                    the size &gt;= 0                    
                </return>
            </javadoc>
            <method name="getPartialSize" type="float" line="414">
                <params>
                    <param name="startOffset" type="int"/>
                    <param name="endOffset" type="int"/>
                </params>
                <declaration name="size" type="float" line="415"/>
                <declaration name="viewIndex" type="int" line="416"/>
                <declaration name="numViews" type="int" line="417"/>
                <declaration name="view" type="View" line="418"/>
                <declaration name="viewEnd" type="int" line="419"/>
                <declaration name="tempEnd" type="int" line="420"/>
                <scope line="423"/>
            </method>
            <javadoc line="434">
                Finds the next character in the document with a character in
                  &lt;code&gt;string&lt;/code&gt;, starting at offset &lt;code&gt;start&lt;/code&gt;. If
                  there are no characters found, -1 will be returned.                
                <param>
                    string the string of characters                    
                </param>
                <param>
                    start where to start in the model &gt;= 0                    
                </param>
                <return>
                    the document offset, or -1 if no characters found                    
                </return>
            </javadoc>
            <method name="findOffsetToCharactersInString" type="int" line="442">
                <params>
                    <param name="string" type="char[]"/>
                    <param name="start" type="int"/>
                </params>
                <declaration name="stringLength" type="int" line="443"/>
                <declaration name="end" type="int" line="444"/>
                <declaration name="seg" type="Segment" line="445"/>
                <scope line="446"/>
                <scope line="449"/>
                <scope line="452">
                    <declaration name="currentChar" type="char" line="453"/>
                    <scope line="454"/>
                </scope>
            </method>
            <javadoc line="460">
                Returns where the tabs are calculated from.                
                <return>
                    where tabs are calculated from                    
                </return>
            </javadoc>
            <method name="getTabBase" type="float" line="464"/>
            <javadoc line="467">
                Renders using the given rendering surface and area on that
                  surface.  This is implemented to delgate to the superclass
                  after stashing the base coordinate for tab calculations.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="475">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="476"/>
                <scope line="479">
                    <declaration name="sh" type="Shape" line="480"/>
                    <scope line="481">
                        <declaration name="x" type="int" line="482"/>
                        <declaration name="y" type="int" line="483"/>
                        <declaration name="clip" type="Rectangle" line="484"/>
                        <scope line="489"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="496">
                Determines the desired alignment for this view along an
                  axis.  This is implemented to give the alignment to the
                  center of the first row along the y axis, and the default
                  along the x axis.                
                <param>
                    axis may be either &lt;code&gt;View.X_AXIS&lt;/code&gt; or
                      &lt;code&gt;View.Y_AXIS&lt;/code&gt;                    
                </param>
                <return>
                    the desired alignment.  This should be a value
                      between 0.0 and 1.0 inclusive, where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin.  An alignment of 0.5 would be the
                      center of the view.                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="509">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="a" type="float" line="512"/>
                <scope line="513">
                    <declaration name="paragraphSpan" type="int" line="514"/>
                    <declaration name="v" type="View" line="515"/>
                    <declaration name="rowSpan" type="int" line="516"/>
                </scope>
            </method>
            <javadoc line="526">
                Breaks this view on the given axis at the given length.
                  &lt;p&gt;
                  &lt;code&gt;ParagraphView&lt;/code&gt; instances are breakable
                  along the &lt;code&gt;Y_AXIS&lt;/code&gt; only, and only if
                  &lt;code&gt;len&lt;/code&gt; is after the first line.                
                <param>
                    axis may be either &lt;code&gt;View.X_AXIS&lt;/code&gt;
                      or &lt;code&gt;View.Y_AXIS&lt;/code&gt;                    
                </param>
                <param>
                    len specifies where a potential break is desired
                      along the given axis &gt;= 0                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <return>
                    the fragment of the view that represents the
                      given span, if the view can be broken; if the view
                      doesn&apos;t support breaking behavior, the view itself is
                      returned                    
                </return>
                <see>
                    View#breakView                    
                </see>
            </javadoc>
            <method name="breakView" type="View" line="543">
                <params>
                    <param name="axis" type="int"/>
                    <param name="len" type="float"/>
                    <param name="a" type="Shape"/>
                </params>
                <scope line="544">
                    <scope line="545">
                        <declaration name="alloc" type="Rectangle" line="546"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="553">
                Gets the break weight for a given location.
                  &lt;p&gt;
                  &lt;code&gt;ParagraphView&lt;/code&gt; instances are breakable
                  along the &lt;code&gt;Y_AXIS&lt;/code&gt; only, and only if
                  &lt;code&gt;len&lt;/code&gt; is after the first row.  If the length
                  is less than one row, a value of &lt;code&gt;BadBreakWeight&lt;/code&gt;
                  is returned.                
                <param>
                    axis may be either &lt;code&gt;View.X_AXIS&lt;/code&gt;
                      or &lt;code&gt;View.Y_AXIS&lt;/code&gt;                    
                </param>
                <param>
                    len specifies where a potential break is desired &gt;= 0                    
                </param>
                <return>
                    a value indicating the attractiveness of breaking here;
                      either &lt;code&gt;GoodBreakWeight&lt;/code&gt; or &lt;code&gt;BadBreakWeight&lt;/code&gt;                    
                </return>
                <see>
                    View#getBreakWeight                    
                </see>
            </javadoc>
            <method name="getBreakWeight" type="int" line="568">
                <params>
                    <param name="axis" type="int"/>
                    <param name="len" type="float"/>
                </params>
                <scope line="569"/>
            </method>
            <javadoc line="574">
                Calculate the needs for the paragraph along the minor axis.
                  &lt;p&gt;This uses size requirements of the superclass, modified to take into
                  account the non-breakable areas at the adjacent views edges.  The minimal
                  size requirements for such views should be no less than the sum of all
                  adjacent fragments.&lt;/p&gt;
                  &lt;p&gt;If the {@code axis} parameter is neither {@code View.X_AXIS} nor{@code View.Y_AXIS}, {@link IllegalArgumentException} is thrown.  If the{@code r} parameter is {@code null,} a new {@code SizeRequirements}object is created, otherwise the supplied {@code SizeRequirements}object is returned.&lt;/p&gt;                
                <param>
                    axis  the minor axis                    
                </param>
                <param>
                    r     the input {@code SizeRequirements} object                    
                </param>
                <return>
                    the new or adjusted {@code SizeRequirements} object                    
                </return>
                <throws>
                    IllegalArgumentException  if the {@code axis} parameter is invalid                    
                </throws>
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="586">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <declaration name="min" type="float" line="588"/>
                <declaration name="glue" type="float" line="589"/>
                <declaration name="n" type="int" line="590"/>
                <scope line="591">
                    <declaration name="v" type="View" line="592"/>
                    <declaration name="span" type="float" line="593"/>
                    <scope line="594">
                        <declaration name="p0" type="int" line="595"/>
                        <declaration name="p1" type="int" line="596"/>
                        <declaration name="start" type="float" line="597"/>
                        <declaration name="end" type="float" line="598"/>
                    </scope>
                    <scope line="603"/>
                </scope>
            </method>
            <javadoc line="613">
                Binary search for the longest non-breakable fragment at the view edge.                
            </javadoc>
            <method name="findEdgeSpan" type="float" line="616">
                <params>
                    <param name="v" type="View"/>
                    <param name="axis" type="int"/>
                    <param name="fp" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="len" type="int" line="617"/>
                <scope line="618"/>
                <scope line="621">
                    <declaration name="mid" type="int" line="622"/>
                    <declaration name="startEdge" type="boolean" line="623"/>
                    <declaration name="f" type="View" line="624"/>
                    <declaration name="breakable" type="boolean" line="625"/>
                    <scope line="626"/>
                    <scope line="629"/>
                </scope>
            </method>
            <javadoc line="635">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.                
                <param>
                    changes the change information from the
                      associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="644">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <declaration name="justification" type="int" line="650"/>
            <declaration name="lineSpacing" type="float" line="651"/>
            <declaration name="firstLineIndent" type="int" line="652"/>
            <javadoc line="652">
                Indentation for the first line, from the left inset.                
            </javadoc>
            <declaration name="tabBase" type="int" line="656"/>
            <javadoc line="656">
                Used by the TabExpander functionality to determine
                  where to base the tab calculations.  This is basically
                  the location of the left side of the paragraph.                
            </javadoc>
            <declaration name="i18nStrategy" type="Class" line="662"/>
            <javadoc line="662">
                Used to create an i18n-based layout strategy                
            </javadoc>
            <declaration name="tabChars" type="char[]" line="666"/>
            <javadoc line="666">
                Used for searching for a tab.                
            </javadoc>
            <declaration name="tabDecimalChars" type="char[]" line="670"/>
            <javadoc line="670">
                Used for searching for a tab or decimal character.                
            </javadoc>
            <scope line="674"/>
            <class name="Row" line="681">
                <extends class="BoxView"/>
                <javadoc line="681">
                    Internally created view that has the purpose of holding
                      the views that represent the children of the paragraph
                      that have been arranged in rows.                    
                </javadoc>
                <method name="Row" type="constructor" line="687">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <javadoc line="690">
                    This is reimplemented to do nothing since the
                      paragraph fills in the row with its needed
                      children.                    
                </javadoc>
                <method name="loadChildren" type="void" line="695">
                    <params>
                        <param name="f" type="ViewFactory"/>
                    </params>
                </method>
                <javadoc line="697">
                    Fetches the attributes to use when rendering.  This view
                      isn&apos;t directly responsible for an element so it returns
                      the outer classes attributes.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="702">
                    <declaration name="p" type="View" line="703"/>
                </method>
                <method name="getAlignment" type="float" line="706">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <scope line="707">
                        <declaration name="rv" type="float" line="716"/>
                        <scope line="717"/>
                    </scope>
                </method>
                <javadoc line="725">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.  This is
                      implemented to let the superclass find the position along
                      the major axis and the allocation of the row is used
                      along the minor axis, so that even though the children
                      are different heights they all get the same caret height.                    
                    <param>
                        pos the position to convert                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does not represent a
                          valid location in the associated document                        
                    </exception>
                    <see>
                        View#modelToView                        
                    </see>
                </javadoc>
                <method name="modelToView" type="Shape" line="739">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Shape"/>
                        <param name="b" type="Position.Bias"/>
                    </params>
                    <declaration name="r" type="Rectangle" line="740"/>
                    <declaration name="v" type="View" line="741"/>
                    <scope line="742"/>
                    <declaration name="height" type="int" line="746"/>
                    <declaration name="y" type="int" line="747"/>
                    <declaration name="loc" type="Shape" line="748"/>
                </method>
                <javadoc line="754">
                    Range represented by a row in the paragraph is only
                      a subset of the total range of the paragraph element.                    
                    <see>
                        View#getRange                        
                    </see>
                </javadoc>
                <method name="getStartOffset" type="int" line="759">
                    <declaration name="offs" type="int" line="760"/>
                    <declaration name="n" type="int" line="761"/>
                    <scope line="762">
                        <declaration name="v" type="View" line="763"/>
                    </scope>
                </method>
                <method name="getEndOffset" type="int" line="768">
                    <declaration name="offs" type="int" line="769"/>
                    <declaration name="n" type="int" line="770"/>
                    <scope line="771">
                        <declaration name="v" type="View" line="772"/>
                    </scope>
                </method>
                <javadoc line="777">
                    Perform layout for the minor axis of the box (i.e. the
                      axis orthoginal to the axis that it represents).  The results
                      of the layout should be placed in the given arrays which represent
                      the allocations to the children along the minor axis.
                      &lt;p&gt;
                      This is implemented to do a baseline layout of the children
                      by calling BoxView.baselineLayout.                    
                    <param>
                        targetSpan the total span given to the view, which
                          whould be used to layout the children.                        
                    </param>
                    <param>
                        axis the axis being layed out.                        
                    </param>
                    <param>
                        offsets the offsets from the origin of the view for
                          each of the child views.  This is a return value and is
                          filled in by the implementation of this method.                        
                    </param>
                    <param>
                        spans the span of each child view.  This is a return
                          value and is filled in by the implementation of this method.                        
                    </param>
                    <return>
                        the offset and span for each child view in the
                          offsets and spans parameters                        
                    </return>
                </javadoc>
                <method name="layoutMinorAxis" type="void" line="796">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                </method>
                <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="799">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                </method>
                <method name="isLastRow" type="boolean" line="802">
                    <declaration name="parent" type="View" line="803"/>
                </method>
                <method name="isBrokenRow" type="boolean" line="806">
                    <declaration name="rv" type="boolean" line="807"/>
                    <declaration name="viewsCount" type="int" line="808"/>
                    <scope line="809">
                        <declaration name="lastView" type="View" line="810"/>
                        <scope line="811"/>
                    </scope>
                </method>
                <method name="isJustifiableDocument" type="boolean" line="817"/>
                <javadoc line="820">
                    Whether we need to justify this {@code Row}.
                      At this time (jdk1.6) we support justification on for non
                      18n text.                    
                    <return>
                        {@code true} if this {@code Row} should be justified.                        
                    </return>
                </javadoc>
                <method name="isJustifyEnabled" type="boolean" line="826">
                    <declaration name="ret" type="boolean" line="827"/>
                </method>
                <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="833">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                    <declaration name="oldJustficationData" type="int" line="834"/>
                    <declaration name="ret" type="SizeRequirements" line="836"/>
                    <scope line="837"/>
                </method>
                <method name="layoutMajorAxis" type="void" line="842">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                    <declaration name="oldJustficationData" type="int" line="843"/>
                    <scope line="846"/>
                    <declaration name="currentSpan" type="int" line="849"/>
                    <scope line="850"/>
                    <scope line="853"/>
                    <declaration name="extendableSpaces" type="int" line="856"/>
                    <declaration name="startJustifiableContent" type="int" line="857"/>
                    <declaration name="endJustifiableContent" type="int" line="858"/>
                    <declaration name="lastLeadingSpaces" type="int" line="859"/>
                    <declaration name="rowStartOffset" type="int" line="860"/>
                    <declaration name="rowEndOffset" type="int" line="861"/>
                    <declaration name="spaceMap" type="int" line="862"/>
                    <scope line="864">
                        <declaration name="view" type="View" line="865"/>
                        <scope line="866">
                            <declaration name="justificationInfo" type="GlyphView.JustificationInfo" line="867"/>
                            <declaration name="viewStartOffset" type="int" line="868"/>
                            <declaration name="offset" type="int" line="869"/>
                            <scope line="870">
                                <scope line="871"/>
                            </scope>
                            <scope line="875">
                                <scope line="876"/>
                                <scope line="879"/>
                            </scope>
                            <scope line="883"/>
                            <scope line="887"/>
                            <scope line="892"/>
                        </scope>
                    </scope>
                    <scope line="897"/>
                    <declaration name="adjustment" type="int" line="900"/>
                    <declaration name="spaceAddon" type="int" line="901"/>
                    <declaration name="spaceAddonLeftoverEnd" type="int" line="902"/>
                    <scope line="903"/>
                    <scope line="906"/>
                </method>
                <method name="getMaximumSpan" type="float" line="915">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="ret" type="float" line="916"/>
                    <scope line="917"/>
                    <scope line="920"/>
                </method>
                <javadoc line="925">
                    Fetches the child view index representing the given position in
                      the model.                    
                    <param>
                        pos the position &gt;= 0                        
                    </param>
                    <return>
                        index of the view representing the given position, or
                          -1 if no view represents that position                        
                    </return>
                </javadoc>
                <method name="getViewIndexAtPosition" type="int" line="932">
                    <params>
                        <param name="pos" type="int"/>
                    </params>
                    <scope line="934">
                        <declaration name="v" type="View" line="935"/>
                        <scope line="936"/>
                    </scope>
                </method>
                <javadoc line="942">
                    Gets the left inset.                    
                    <return>
                        the inset                        
                    </return>
                </javadoc>
                <method name="getLeftInset" type="short" line="946">
                    <declaration name="parentView" type="View" line="947"/>
                    <declaration name="adjustment" type="int" line="948"/>
                    <scope line="949">
                        <scope line="950"/>
                    </scope>
                </method>
                <method name="getBottomInset" type="short" line="956"/>
                <declaration name="SPACE_ADDON" type="int" line="959"/>
                <declaration name="SPACE_ADDON_LEFTOVER_END" type="int" line="960"/>
                <declaration name="START_JUSTIFIABLE" type="int" line="961"/>
                <declaration name="END_JUSTIFIABLE" type="int" line="962"/>
                <declaration name="justificationData" type="int" line="963"/>
            </class>
        </class>
    </source>