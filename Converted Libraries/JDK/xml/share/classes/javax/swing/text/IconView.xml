<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="javax.swing.Icon"/>
        <import package="javax.swing.event"/>
        <class name="IconView" line="31">
            <extends class="View"/>
            <comment line="56">
                --- View methods ---------------------------------------------                
            </comment>
            <comment line="166">
                --- member variables ------------------------------------------------                
            </comment>
            <javadoc line="31">
                Icon decorator that implements the view interface.  The
                  entire element is used to represent the icon.  This acts
                  as a gateway from the display-only View implementations to
                  interactive lightweight icons (that is, it allows icons
                  to be embedded into the View hierarchy.  The parent of the icon
                  is the container that is handed out by the associated view
                  factory.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="44">
                Creates a new icon view that represents an element.                
                <param>
                    elem the element to create a view for                    
                </param>
            </javadoc>
            <method name="IconView" type="constructor" line="49">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="51"/>
            </method>
            <javadoc line="57">
                Paints the icon.
                  The real paint behavior occurs naturally from the association
                  that the icon has with its parent container (the same
                  container hosting this view), so this simply allows us to
                  position the icon properly relative to the view.  Since
                  the coordinate system for the view is simply the parent
                  containers, positioning the child icon is easy.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="70">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="71"/>
            </method>
            <javadoc line="75">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="86">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="97">
                Determines the desired alignment for this view along an
                  axis.  This is implemented to give the alignment to the
                  bottom of the icon along the y axis, and the default
                  along the x axis.                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the desired alignment &gt;= 0.0f &amp;&amp; &lt;= 1.0f.  This should be
                      a value between 0.0 and 1.0 where 0 indicates alignment at the
                      origin and 1.0 indicates alignment to the full span
                      away from the origin.  An alignment of 0.5 would be the
                      center of the view.                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="110">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="119">
                Provides a mapping from the document model coordinate space
                  to the coordinate space of the view mapped to it.                
                <param>
                    pos the position to convert &gt;= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the bounding box of the given position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    View#modelToView                    
                </see>
            </javadoc>
            <method name="modelToView" type="Shape" line="130">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Shape"/>
                    <param name="b" type="Position.Bias"/>
                </params>
                <declaration name="p0" type="int" line="131"/>
                <declaration name="p1" type="int" line="132"/>
                <scope line="133">
                    <declaration name="r" type="Rectangle" line="134"/>
                    <scope line="135"/>
                </scope>
            </method>
            <javadoc line="144">
                Provides a mapping from the view coordinate space to the logical
                  coordinate space of the model.                
                <param>
                    x the X coordinate &gt;= 0                    
                </param>
                <param>
                    y the Y coordinate &gt;= 0                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <return>
                    the location within the model that best represents the
                      given point of view &gt;= 0                    
                </return>
                <see>
                    View#viewToModel                    
                </see>
            </javadoc>
            <method name="viewToModel" type="int" line="155">
                <params>
                    <param name="x" type="float"/>
                    <param name="y" type="float"/>
                    <param name="a" type="Shape"/>
                    <param name="bias" type="Position.Bias[]"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="156"/>
                <scope line="157"/>
            </method>
            <declaration name="c" type="Icon" line="167"/>
        </class>
    </source>