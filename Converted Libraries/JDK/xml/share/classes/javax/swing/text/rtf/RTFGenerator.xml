<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.rtf">
        <import package="java.lang"/>
        <import package="java.util"/>
        <import package="java.awt.Color"/>
        <import package="java.awt.Font"/>
        <import package="java.io.OutputStream"/>
        <import package="java.io.IOException"/>
        <import package="javax.swing.text"/>
        <class name="RTFGenerator" line="36">
            <extends class="Object"/>
            <comment line="54">
                These dictionaries map Colors, font names, or Style objects                
            </comment>
            <comment line="63">
                                
            </comment>
            <comment line="70">
                                
            </comment>
            <comment line="73">
                                
            </comment>
            <comment line="86">
                                
            </comment>
            <comment line="89">
                An array of character-keyword pairs. This could be done
                as a dictionary (and lookup would be quicker), but that
                would require allocating an object for every character                
            </comment>
            <comment line="295">
                                
            </comment>
            <comment line="663">
                debugging. TODO: remove.
                private static String tabdump(Object tso)
                {
                String buf;
                int i;
                
                if (tso == null)
                return &quot;[none]&quot;;
                
                TabStop[] ts = (TabStop[])tso;
                
                buf = &quot;[&quot;;
                for(i = 0; i &lt; ts.length; i++) {
                buf = buf + ts[i].toString();
                if ((i+1) &lt; ts.length)
                buf = buf + &quot;,&quot;;
                }
                return buf + &quot;]&quot;;
                }                
            </comment>
            <javadoc line="36">
                Generates an RTF output stream (java.io.OutputStream) from rich text
                  (handed off through a series of LTTextAcceptor calls).  Can be used to
                  generate RTF from any object which knows how to write to a text acceptor
                  (e.g., LTAttributedText and LTRTFFilter).
                  &lt;p&gt;Note that this is a lossy conversion since RTF&apos;s model of
                  text does not exactly correspond with LightText&apos;s.                
                <see>
                    LTAttributedText                    
                </see>
                <see>
                    LTRTFFilter                    
                </see>
                <see>
                    LTTextAcceptor                    
                </see>
                <see>
                    java.io.OutputStream                    
                </see>
            </javadoc>
            <declaration name="colorTable" type="Dictionary&lt;Object,Integer&gt;" line="55"/>
            <declaration name="colorCount" type="int" line="56"/>
            <declaration name="fontTable" type="Dictionary&lt;String,Integer&gt;" line="57"/>
            <declaration name="fontCount" type="int" line="58"/>
            <declaration name="styleTable" type="Dictionary&lt;AttributeSet,Integer&gt;" line="59"/>
            <declaration name="styleCount" type="int" line="60"/>
            <declaration name="outputStream" type="OutputStream" line="63"/>
            <declaration name="afterKeyword" type="boolean" line="65"/>
            <declaration name="outputAttributes" type="MutableAttributeSet" line="67"/>
            <declaration name="unicodeCount" type="int" line="70"/>
            <declaration name="workingSegment" type="Segment" line="73"/>
            <declaration name="outputConversion" type="int[]" line="75"/>
            <declaration name="defaultRTFColor" type="Color" line="77"/>
            <javadoc line="77">
                The default color, used for text without an explicit color
                  attribute.                
            </javadoc>
            <declaration name="defaultFontSize" type="float" line="81"/>
            <declaration name="defaultFontFamily" type="String" line="83"/>
            <declaration name="MagicToken" type="Object" line="86"/>
            <class name="CharacterKeywordPair" line="92">
                <comment line="960">
                    Not very efficient at all. Could be changed to sort the table
                    for binary search. TODO. (Even though this is inefficient however,                    
                </comment>
                <comment line="989">
                                        
                </comment>
                <declaration name="character" type="char" line="93"/>
                <declaration name="keyword" type="String" line="93"/>
            </class>
            <declaration name="textKeywords" type="CharacterKeywordPair[]" line="94"/>
            <scope line="96">
                <declaration name="textKeywordDictionary" type="Dictionary" line="99"/>
                <declaration name="keys" type="Enumeration" line="100"/>
                <declaration name="tempPairs" type="Vector&lt;CharacterKeywordPair&gt;" line="101"/>
                <scope line="102">
                    <declaration name="pair" type="CharacterKeywordPair" line="103"/>
                </scope>
            </scope>
            <declaration name="hexdigits" type="char[]" line="112"/>
            <method name="writeDocument" type="void" line="117">
                <params>
                    <param name="d" type="Document"/>
                    <param name="to" type="OutputStream"/>
                </params>
                <comment line="126">
                    TODO this assumes a particular element structure; is there                    
                </comment>
                <declaration name="gen" type="RTFGenerator" line="118"/>
                <declaration name="root" type="Element" line="119"/>
                <declaration name="max" type="int" line="127"/>
            </method>
            <method name="RTFGenerator" type="constructor" line="135">
                <params>
                    <param name="to" type="OutputStream"/>
                </params>
                <comment line="145">
                                        
                </comment>
            </method>
            <method name="examineElement" type="void" line="155">
                <params>
                    <param name="el" type="Element"/>
                </params>
                <comment line="164">
                                        
                </comment>
                <declaration name="a" type="AttributeSet" line="156"/>
                <declaration name="fontName" type="String" line="157"/>
                <declaration name="foregroundColor" type="Object" line="158"/>
                <scope line="162">
                    <scope line="167"/>
                    <scope line="174"/>
                    <scope line="185"/>
                </scope>
                <declaration name="el_count" type="int" line="191"/>
                <scope line="192"/>
            </method>
            <method name="tallyStyles" type="void" line="197">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
                <scope line="198">
                    <scope line="199">
                        <declaration name="aNum" type="Integer" line="200"/>
                        <scope line="201"/>
                    </scope>
                </scope>
            </method>
            <method name="findStyle" type="Style" line="212">
                <params>
                    <param name="a" type="AttributeSet"/>
                </params>
                <scope line="213">
                    <scope line="214">
                        <declaration name="aNum" type="Object" line="215"/>
                    </scope>
                </scope>
            </method>
            <method name="findStyleNumber" type="Integer" line="225">
                <params>
                    <param name="a" type="AttributeSet"/>
                    <param name="domain" type="String"/>
                </params>
                <scope line="226">
                    <scope line="227">
                        <declaration name="aNum" type="Integer" line="228"/>
                        <scope line="229"/>
                    </scope>
                </scope>
            </method>
            <method name="attrDiff" type="Object" line="245">
                <params>
                    <param name="oldAttrs" type="MutableAttributeSet"/>
                    <param name="newAttrs" type="AttributeSet"/>
                    <param name="key" type="Object"/>
                    <param name="dfl" type="Object"/>
                </params>
                <declaration name="oldValue" type="Object" line="246"/>
                <scope line="253"/>
                <scope line="261"/>
            </method>
            <method name="equalArraysOK" type="boolean" line="269">
                <params>
                    <param name="a" type="Object"/>
                    <param name="b" type="Object"/>
                </params>
                <declaration name="aa" type="Object[]" line="270"/>
                <declaration name="i" type="int" line="284"/>
                <declaration name="l" type="int" line="285"/>
                <scope line="286"/>
            </method>
            <method name="writeLineBreak" type="void" line="297"/>
            <method name="writeRTFHeader" type="void" line="305">
                <comment line="309">
                    TODO: Should the writer attempt to examine the text it&apos;s writing
                    and pick a character set which will most compactly represent the
                    document? (currently the writer always uses the ansi character
                    set, which is roughly ISO-8859 Latin-1, and uses Unicode escapes
                    for all other characters. However Unicode is a relatively                    
                </comment>
                <comment line="321">
                                        
                </comment>
                <comment line="334">
                                        
                </comment>
                <comment line="341">
                                        
                </comment>
                <comment line="366">
                                        
                </comment>
                <declaration name="index" type="int" line="306"/>
                <declaration name="sortedFontTable" type="String[]" line="321"/>
                <declaration name="fonts" type="Enumeration&lt;String&gt;" line="322"/>
                <declaration name="font" type="String" line="323"/>
                <scope line="324">
                    <declaration name="num" type="Integer" line="326"/>
                </scope>
                <scope line="331"/>
                <scope line="341">
                    <declaration name="sortedColorTable" type="Color[]" line="342"/>
                    <declaration name="colors" type="Enumeration" line="343"/>
                    <declaration name="color" type="Color" line="344"/>
                    <scope line="345">
                        <declaration name="num" type="Integer" line="347"/>
                    </scope>
                    <scope line="352">
                        <scope line="354"/>
                    </scope>
                </scope>
                <scope line="366">
                    <declaration name="styles" type="Enumeration&lt;AttributeSet&gt;" line="369"/>
                    <scope line="370">
                        <declaration name="style" type="Style" line="371"/>
                        <declaration name="styleNumber" type="int" line="372"/>
                        <declaration name="styleType" type="String" line="374"/>
                        <scope line="377"/>
                        <scope line="380"/>
                        <scope line="383"/>
                        <declaration name="basis" type="AttributeSet" line="387"/>
                        <declaration name="goat" type="MutableAttributeSet" line="388"/>
                        <scope line="389"/>
                        <scope line="391"/>
                        <scope line="400">
                            <declaration name="basedOn" type="Integer" line="401"/>
                            <scope line="402"/>
                        </scope>
                        <declaration name="nextStyle" type="Style" line="407"/>
                        <scope line="408">
                            <declaration name="nextNum" type="Integer" line="409"/>
                            <scope line="410"/>
                        </scope>
                        <declaration name="hidden" type="Boolean" line="415"/>
                        <declaration name="additive" type="Boolean" line="419"/>
                    </scope>
                </scope>
            </method>
            <method name="writeDocumentProperties" type="void" line="437">
                <params>
                    <param name="doc" type="Document"/>
                </params>
                <comment line="439">
                                        
                </comment>
                <declaration name="i" type="int" line="439"/>
                <declaration name="wroteSomething" type="boolean" line="440"/>
                <scope line="442">
                    <declaration name="attr" type="RTFAttribute" line="443"/>
                    <declaration name="prop" type="Object" line="446"/>
                    <declaration name="ok" type="boolean" line="447"/>
                </scope>
            </method>
            <method name="writeRTFTrailer" type="void" line="458"/>
            <method name="checkNumericControlWord" type="void" line="469">
                <params>
                    <param name="currentAttributes" type="MutableAttributeSet"/>
                    <param name="newAttributes" type="AttributeSet"/>
                    <param name="attrName" type="Object"/>
                    <param name="controlWord" type="String"/>
                    <param name="dflt" type="float"/>
                    <param name="scale" type="float"/>
                </params>
                <declaration name="parm" type="Object" line="470"/>
                <scope line="473">
                    <declaration name="targ" type="float" line="474"/>
                </scope>
            </method>
            <method name="checkControlWord" type="void" line="487">
                <params>
                    <param name="currentAttributes" type="MutableAttributeSet"/>
                    <param name="newAttributes" type="AttributeSet"/>
                    <param name="word" type="RTFAttribute"/>
                </params>
                <declaration name="parm" type="Object" line="488"/>
                <scope line="491"/>
            </method>
            <method name="checkControlWords" type="void" line="503">
                <params>
                    <param name="currentAttributes" type="MutableAttributeSet"/>
                    <param name="newAttributes" type="AttributeSet"/>
                    <param name="words" type="RTFAttribute"/>
                    <param name="domain" type="int"/>
                </params>
                <declaration name="wordIndex" type="int" line="504"/>
                <declaration name="wordCount" type="int" line="505"/>
                <scope line="506">
                    <declaration name="attr" type="RTFAttribute" line="507"/>
                </scope>
            </method>
            <method name="updateSectionAttributes" type="void" line="517">
                <params>
                    <param name="current" type="MutableAttributeSet"/>
                    <param name="newAttributes" type="AttributeSet"/>
                    <param name="emitStyleChanges" type="boolean"/>
                </params>
                <scope line="518">
                    <declaration name="oldStyle" type="Object" line="519"/>
                    <declaration name="newStyle" type="Object" line="520"/>
                    <scope line="521">
                        <scope line="522"/>
                        <scope line="525"/>
                        <scope line="528"/>
                    </scope>
                </scope>
            </method>
            <method name="resetSectionAttributes" type="void" line="540">
                <params>
                    <param name="currentAttributes" type="MutableAttributeSet"/>
                </params>
                <declaration name="wordIndex" type="int" line="543"/>
                <declaration name="wordCount" type="int" line="544"/>
                <scope line="545">
                    <declaration name="attr" type="RTFAttribute" line="546"/>
                </scope>
            </method>
            <method name="updateParagraphAttributes" type="void" line="558">
                <params>
                    <param name="current" type="MutableAttributeSet"/>
                    <param name="newAttributes" type="AttributeSet"/>
                    <param name="emitStyleChanges" type="boolean"/>
                </params>
                <comment line="563">
                    The only way to get rid of tabs or styles is with the \pard keyword,
                    emitted by resetParagraphAttributes(). Ideally we should avoid
                    emitting \pard if the new paragraph&apos;s tabs are a superset of the old                    
                </comment>
                <declaration name="parm" type="Object" line="559"/>
                <declaration name="oldStyle" type="Object" line="560"/>
                <scope line="567">
                    <scope line="570">
                        <scope line="571"/>
                    </scope>
                </scope>
                <scope line="576"/>
                <declaration name="oldTabs" type="Object" line="581"/>
                <declaration name="newTabs" type="Object" line="582"/>
                <scope line="583">
                    <scope line="584"/>
                </scope>
                <scope line="591"/>
                <scope line="599">
                    <declaration name="tabs" type="TabStop" line="600"/>
                    <declaration name="index" type="int" line="601"/>
                    <scope line="602">
                        <declaration name="tab" type="TabStop" line="603"/>
                        <declaration name="twips" type="int" line="637"/>
                        <scope line="638"/>
                        <scope line="640"/>
                    </scope>
                </scope>
            </method>
            <method name="writeParagraphElement" type="void" line="650">
                <params>
                    <param name="el" type="Element"/>
                </params>
                <comment line="660">
                                        
                </comment>
                <declaration name="sub_count" type="int" line="653"/>
                <scope line="654"/>
            </method>
            <method name="resetParagraphAttributes" type="void" line="685">
                <params>
                    <param name="currentAttributes" type="MutableAttributeSet"/>
                </params>
                <declaration name="wordIndex" type="int" line="690"/>
                <declaration name="wordCount" type="int" line="691"/>
                <scope line="692">
                    <declaration name="attr" type="RTFAttribute" line="693"/>
                </scope>
            </method>
            <method name="updateCharacterAttributes" type="void" line="706">
                <params>
                    <param name="current" type="MutableAttributeSet"/>
                    <param name="newAttributes" type="AttributeSet"/>
                    <param name="updateStyleChanges" type="boolean"/>
                </params>
                <comment line="742">
                                        
                </comment>
                <declaration name="parm" type="Object" line="707"/>
                <scope line="709">
                    <declaration name="oldStyle" type="Object" line="710"/>
                    <declaration name="newStyle" type="Object" line="711"/>
                    <scope line="713">
                        <scope line="714"/>
                        <scope line="717"/>
                        <scope line="720"/>
                    </scope>
                </scope>
                <scope line="727">
                    <declaration name="fontNum" type="Integer" line="728"/>
                </scope>
                <scope line="744">
                    <declaration name="colorNum" type="int" line="745"/>
                </scope>
                <scope line="754">
                    <declaration name="colorNum" type="int" line="755"/>
                </scope>
            </method>
            <method name="resetCharacterAttributes" type="void" line="766">
                <params>
                    <param name="currentAttributes" type="MutableAttributeSet"/>
                </params>
                <comment line="779">
                                        
                </comment>
                <declaration name="wordIndex" type="int" line="769"/>
                <declaration name="wordCount" type="int" line="770"/>
                <scope line="771">
                    <declaration name="attr" type="RTFAttribute" line="772"/>
                </scope>
            </method>
            <method name="writeTextElement" type="void" line="787">
                <params>
                    <param name="el" type="Element"/>
                </params>
                <comment line="797">
                                        
                </comment>
                <scope line="790">
                    <scope line="791"/>
                    <scope line="795"/>
                </scope>
                <scope line="801">
                    <declaration name="sub_count" type="int" line="802"/>
                </scope>
            </method>
            <method name="writeText" type="void" line="810">
                <params>
                    <param name="s" type="Segment"/>
                </params>
                <declaration name="pos" type="int" line="811"/>
                <declaration name="array" type="char[]" line="812"/>
            </method>
            <method name="writeText" type="void" line="823">
                <params>
                    <param name="s" type="String"/>
                </params>
                <declaration name="pos" type="int" line="824"/>
            </method>
            <method name="writeRawString" type="void" line="834">
                <params>
                    <param name="str" type="String"/>
                </params>
                <declaration name="strlen" type="int" line="835"/>
            </method>
            <method name="writeControlWord" type="void" line="842">
                <params>
                    <param name="keyword" type="String"/>
                </params>
            </method>
            <method name="writeControlWord" type="void" line="850">
                <params>
                    <param name="keyword" type="String"/>
                    <param name="arg" type="int"/>
                </params>
                <comment line="854">
                                        
                </comment>
            </method>
            <method name="writeBegingroup" type="void" line="859"/>
            <method name="writeEndgroup" type="void" line="866"/>
            <method name="writeCharacter" type="void" line="873">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <comment line="875">
                    Nonbreaking space is in most RTF encodings, but the keyword is                    
                </comment>
                <comment line="877">
                                        
                </comment>
                <comment line="878">
                                        
                </comment>
                <comment line="879">
                                        
                </comment>
                <comment line="880">
                                        
                </comment>
                <comment line="884">
                                        
                </comment>
                <comment line="889">
                                        
                </comment>
                <comment line="890">
                                        
                </comment>
                <comment line="896">
                                        
                </comment>
                <comment line="904">
                    In some cases it would be reasonable to check to see if the
                    glyph being written out is in the Symbol encoding, and if so,                    
                </comment>
                <comment line="907">
                    Currently all unrepresentable characters are written as                    
                </comment>
                <comment line="937">
                                        
                </comment>
                <comment line="938">
                                        
                </comment>
                <comment line="939">
                                        
                </comment>
                <comment line="942">
                                        
                </comment>
                <scope line="876"/>
                <scope line="883"/>
                <scope line="888"/>
                <declaration name="b" type="int" line="893"/>
                <scope line="894">
                    <declaration name="i" type="int" line="896"/>
                    <scope line="897">
                        <scope line="898"/>
                    </scope>
                    <declaration name="approximation" type="String" line="908"/>
                    <scope line="909"/>
                </scope>
                <scope line="920">
                    <declaration name="nybble" type="int" line="921"/>
                </scope>
                <scope line="940"/>
            </method>
            <method name="approximationForUnicode" type="String" line="950">
                <params>
                    <param name="ch" type="char"/>
                </params>
                <comment line="952">
                    TODO: Find reasonable approximations for all Unicode characters                    
                </comment>
            </method>
            <javadoc line="956">
                Takes a translation table (a 256-element array of characters)
                  and creates an output conversion table for use by
                  convertCharacter().                
            </javadoc>
            <method name="outputConversionFromTranslationTable" type="int[]" line="963">
                <params>
                    <param name="table" type="char[]"/>
                </params>
                <comment line="960">
                    Not very efficient at all. Could be changed to sort the table
                    for binary search. TODO. (Even though this is inefficient however,                    
                </comment>
                <declaration name="conversion" type="int[]" line="964"/>
                <declaration name="index" type="int" line="966"/>
                <scope line="968"/>
            </method>
            <method name="outputConversionForName" type="int[]" line="978">
                <params>
                    <param name="name" type="String"/>
                </params>
                <declaration name="table" type="char[]" line="979"/>
            </method>
            <javadoc line="983">
                Takes a char and a conversion table (an int[] in the current
                  implementation, but conversion tables should be treated as an opaque
                  type) and returns the
                  corresponding byte value (as an int, since bytes are signed).                
            </javadoc>
            <method name="convertCharacter" type="int" line="990">
                <params>
                    <param name="conversion" type="int[]"/>
                    <param name="ch" type="char"/>
                </params>
                <comment line="989">
                                        
                </comment>
                <comment line="999">
                                        
                </comment>
                <declaration name="index" type="int" line="991"/>
                <scope line="993"/>
            </method>
        </class>
    </source>