<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util.Vector"/>
        <import package="java.io.Serializable"/>
        <import package="javax.swing.undo.UndoableEdit"/>
        <class name="GapVector" line="5">
            <implements interface="Serializable"/>
            <javadoc line="5">
                An implementation of a gapped buffer similar to that used by
                  emacs.  The underlying storage is a java array of some type,
                  which is known only by the subclass of this class.  The array
                  has a gap somewhere.  The gap is moved to the location of changes
                  to take advantage of common behavior where most changes occur
                  in the same location.  Changes that occur at a gap boundary are
                  generally cheap and moving the gap is generally cheaper than
                  moving the array contents directly to accomodate the change.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    GapContent                    
                </see>
            </javadoc>
            <javadoc line="18">
                Creates a new GapVector object.  Initial size defaults to 10.                
            </javadoc>
            <method name="GapVector" type="constructor" line="21"/>
            <javadoc line="24">
                Creates a new GapVector object, with the initial
                  size specified.                
                <param>
                    initialLength the initial size                    
                </param>
            </javadoc>
            <method name="GapVector" type="constructor" line="29">
                <params>
                    <param name="initialLength" type="int"/>
                </params>
            </method>
            <method name="allocateArray" type="Object" line="34"/>
            <javadoc line="34">
                Allocate an array to store items of the type
                  appropriate (which is determined by the subclass).                
            </javadoc>
            <method name="getArrayLength" type="int" line="39"/>
            <javadoc line="39">
                Get the length of the allocated array                
            </javadoc>
            <javadoc line="43">
                Access to the array.  The actual type
                  of the array is known only by the subclass.                
            </javadoc>
            <method name="getArray" type="Object" line="47"/>
            <javadoc line="50">
                Access to the start of the gap.                
            </javadoc>
            <method name="getGapStart" type="int" line="53"/>
            <javadoc line="56">
                Access to the end of the gap.                
            </javadoc>
            <method name="getGapEnd" type="int" line="59"/>
            <declaration name="array" type="Object" line="62"/>
            <javadoc line="62">
                The array of items.  The type is determined by the subclass.                
            </javadoc>
            <declaration name="g0" type="int" line="66"/>
            <javadoc line="66">
                start of gap in the array                
            </javadoc>
            <declaration name="g1" type="int" line="70"/>
            <javadoc line="70">
                end of gap in the array                
            </javadoc>
            <javadoc line="74">
                Replace the given logical position in the storage with
                  the given new items.  This will move the gap to the area
                  being changed if the gap is not currently located at the
                  change location.                
                <param>
                    position the location to make the replacement.  This
                      is not the location in the underlying storage array, but
                      the location in the contiguous space being modeled.                    
                </param>
                <param>
                    rmSize the number of items to remove                    
                </param>
                <param>
                    addItems the new items to place in storage.                    
                </param>
            </javadoc>
            <method name="replace" type="void" line="85">
                <params>
                    <param name="position" type="int"/>
                    <param name="rmSize" type="int"/>
                    <param name="addItems" type="Object"/>
                    <param name="addSize" type="int"/>
                </params>
                <declaration name="addOffset" type="int" line="86"/>
                <scope line="87"/>
                <scope line="91"/>
                <scope line="94">
                    <declaration name="endSize" type="int" line="95"/>
                    <declaration name="end" type="int" line="96"/>
                </scope>
            </method>
            <javadoc line="102">
                Delete nItems at position.  Squeezes any marks
                  within the deleted area to position.  This moves
                  the gap to the best place by minimizing it&apos;s
                  overall movement.  The gap must intersect the
                  target block.                
            </javadoc>
            <method name="close" type="void" line="109">
                <params>
                    <param name="position" type="int"/>
                    <param name="nItems" type="int"/>
                </params>
                <declaration name="end" type="int" line="111"/>
                <declaration name="new_gs" type="int" line="112"/>
                <scope line="113">
                    <scope line="114"/>
                </scope>
                <scope line="119">
                    <scope line="120"/>
                </scope>
                <scope line="125"/>
            </method>
            <javadoc line="130">
                Make space for the given number of items at the given
                  location.                
                <return>
                    the location that the caller should fill in                    
                </return>
            </javadoc>
            <method name="open" type="int" line="135">
                <params>
                    <param name="position" type="int"/>
                    <param name="nItems" type="int"/>
                </params>
                <declaration name="gapSize" type="int" line="136"/>
                <scope line="137"/>
                <scope line="142"/>
            </method>
            <javadoc line="149">
                resize the underlying storage array to the
                  given new size                
            </javadoc>
            <method name="resize" type="void" line="153">
                <params>
                    <param name="nsize" type="int"/>
                </params>
                <declaration name="narray" type="Object" line="154"/>
            </method>
            <javadoc line="158">
                Make the gap bigger, moving any necessary data and updating
                  the appropriate marks                
            </javadoc>
            <method name="shiftEnd" type="void" line="162">
                <params>
                    <param name="newSize" type="int"/>
                </params>
                <declaration name="oldSize" type="int" line="163"/>
                <declaration name="oldGapEnd" type="int" line="164"/>
                <declaration name="upperSize" type="int" line="165"/>
                <declaration name="arrayLength" type="int" line="166"/>
                <declaration name="newGapEnd" type="int" line="167"/>
                <scope line="170"/>
            </method>
            <javadoc line="174">
                Calculates a new size of the storage array depending on required
                  capacity.                
                <param>
                    reqSize the size which is necessary for new content                    
                </param>
                <return>
                    the new size of the storage array                    
                </return>
            </javadoc>
            <method name="getNewArraySize" type="int" line="180">
                <params>
                    <param name="reqSize" type="int"/>
                </params>
            </method>
            <javadoc line="183">
                Move the start of the gap to a new location,
                  without changing the size of the gap.  This
                  moves the data in the array and updates the
                  marks accordingly.                
            </javadoc>
            <method name="shiftGap" type="void" line="189">
                <params>
                    <param name="newGapStart" type="int"/>
                </params>
                <scope line="190"/>
                <declaration name="oldGapStart" type="int" line="193"/>
                <declaration name="dg" type="int" line="194"/>
                <declaration name="oldGapEnd" type="int" line="195"/>
                <declaration name="newGapEnd" type="int" line="196"/>
                <declaration name="gapSize" type="int" line="197"/>
                <scope line="200"/>
                <scope line="203"/>
            </method>
            <javadoc line="207">
                Adjust the gap end downward.  This doesn&apos;t move
                  any data, but it does update any marks affected
                  by the boundary change.  All marks from the old
                  gap start down to the new gap start are squeezed
                  to the end of the gap (their location has been
                  removed).                
            </javadoc>
            <method name="shiftGapStartDown" type="void" line="215">
                <params>
                    <param name="newGapStart" type="int"/>
                </params>
            </method>
            <javadoc line="218">
                Adjust the gap end upward.  This doesn&apos;t move
                  any data, but it does update any marks affected
                  by the boundary change. All marks from the old
                  gap end up to the new gap end are squeezed
                  to the end of the gap (their location has been
                  removed).                
            </javadoc>
            <method name="shiftGapEndUp" type="void" line="226">
                <params>
                    <param name="newGapEnd" type="int"/>
                </params>
            </method>
        </class>
    </source>