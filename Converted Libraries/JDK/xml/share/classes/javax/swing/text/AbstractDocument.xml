<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.util"/>
        <import package="java.io"/>
        <import package="java.awt.font.TextAttribute"/>
        <import package="java.text.Bidi"/>
        <import package="javax.swing.UIManager"/>
        <import package="javax.swing.undo"/>
        <import package="javax.swing.event.ChangeListener"/>
        <import package="javax.swing.event"/>
        <import package="javax.swing.tree.TreeNode"/>
        <import package="sun.font.BidiUtils"/>
        <import package="sun.swing.SwingUtilities2"/>
        <class name="AbstractDocument" line="13">
            <implements interface="Document"/>
            <implements interface="Serializable"/>
            <javadoc line="13">
                An implementation of the document interface to serve as a
                  basis for implementing various kinds of documents.  At this
                  level there is very little policy, so there is a corresponding
                  increase in difficulty of use.
                  &lt;p&gt;
                  This class implements a locking mechanism for the document.  It
                  allows multiple readers or one writer, and writers must wait until
                  all observers of the document have been notified of a previous
                  change before beginning another mutation to the document.  The
                  read lock is acquired and released using the &lt;code&gt;render&lt;/code&gt;
                  method.  A write lock is aquired by the methods that mutate the
                  document, and are held for the duration of the method call.
                  Notification is done on the thread that produced the mutation,
                  and the thread has full read access to the document for the
                  duration of the notification, but other readers are kept out
                  until the notification has finished.  The notification is a
                  beans event notification which does not allow any further
                  mutations until all listeners have been notified.
                  &lt;p&gt;
                  Any models subclassed from this class and used in conjunction
                  with a text component that has a look and feel implementation
                  that is derived from BasicTextUI may be safely updated
                  asynchronously, because all access to the View hierarchy
                  is serialized by BasicTextUI if the document is of type
                  &lt;code&gt;AbstractDocument&lt;/code&gt;.  The locking assumes that an
                  independent thread will access the View hierarchy only from
                  the DocumentListener methods, and that there will be only
                  one event thread active at a time.
                  &lt;p&gt;
                  If concurrency support is desired, there are the following
                  additional implications.  The code path for any DocumentListener
                  implementation and any UndoListener implementation must be threadsafe,
                  and not access the component lock if trying to be safe from deadlocks.
                  The &lt;code&gt;repaint&lt;/code&gt; and &lt;code&gt;revalidate&lt;/code&gt; methods
                  on JComponent are safe.
                  &lt;p&gt;
                  AbstractDocument models an implied break at the end of the document.
                  Among other things this allows you to position the caret after the last
                  character. As a result of this, &lt;code&gt;getLength&lt;/code&gt; returns one less
                  than the length of the Content. If you create your own Content, be
                  sure and initialize it to have an additional character. Refer to
                  StringContent and GapContent for examples of this. Another implication
                  of this is that Elements that model the implied end character will have
                  an endOffset == (getLength() + 1). For example, in DefaultStyledDocument
                  &lt;code&gt;getParagraphElement(getLength()).getEndOffset() == getLength() + 1
                  &lt;/code&gt;.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="72">
                Constructs a new &lt;code&gt;AbstractDocument&lt;/code&gt;, wrapped around some
                  specified content storage mechanism.                
                <param>
                    data the content                    
                </param>
            </javadoc>
            <method name="AbstractDocument" type="constructor" line="77">
                <params>
                    <param name="data" type="Content"/>
                </params>
            </method>
            <javadoc line="80">
                Constructs a new &lt;code&gt;AbstractDocument&lt;/code&gt;, wrapped around some
                  specified content storage mechanism.                
                <param>
                    data the content                    
                </param>
                <param>
                    context the attribute context                    
                </param>
            </javadoc>
            <method name="AbstractDocument" type="constructor" line="86">
                <params>
                    <param name="data" type="Content"/>
                    <param name="context" type="AttributeContext"/>
                </params>
                <scope line="90">
                    <anonymous_class line="91">
                        <method name="run" type="String" line="92"/>
                    </anonymous_class>
                    <declaration name="o" type="String" line="91"/>
                    <scope line="97"/>
                    <scope line="100"/>
                </scope>
                <scope line="106">
                    <declaration name="p" type="Element[]" line="107"/>
                </scope>
                <scope line="111"/>
            </method>
            <javadoc line="115">
                Supports managing a set of properties. Callers
                  can use the &lt;code&gt;documentProperties&lt;/code&gt; dictionary
                  to annotate the document with document-wide properties.                
                <return>
                    a non-&lt;code&gt;null&lt;/code&gt; &lt;code&gt;Dictionary&lt;/code&gt;                    
                </return>
                <see>
                    #setDocumentProperties                    
                </see>
            </javadoc>
            <method name="getDocumentProperties" type="Dictionary&lt;Object,Object&gt;" line="122">
                <scope line="123"/>
            </method>
            <javadoc line="128">
                Replaces the document properties dictionary for this document.                
                <param>
                    x the new dictionary                    
                </param>
                <see>
                    #getDocumentProperties                    
                </see>
            </javadoc>
            <method name="setDocumentProperties" type="void" line="133">
                <params>
                    <param name="x" type="Dictionary&lt;Object,Object&gt;"/>
                </params>
            </method>
            <javadoc line="136">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireInsertUpdate" type="void" line="144">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
                <scope line="146">
                    <declaration name="listeners" type="Object[]" line="147"/>
                    <scope line="148">
                        <scope line="149"/>
                    </scope>
                </scope>
                <scope line="154"/>
            </method>
            <javadoc line="158">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireChangedUpdate" type="void" line="166">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
                <scope line="168">
                    <declaration name="listeners" type="Object[]" line="169"/>
                    <scope line="170">
                        <scope line="171"/>
                    </scope>
                </scope>
                <scope line="176"/>
            </method>
            <javadoc line="180">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireRemoveUpdate" type="void" line="188">
                <params>
                    <param name="e" type="DocumentEvent"/>
                </params>
                <scope line="190">
                    <declaration name="listeners" type="Object[]" line="191"/>
                    <scope line="192">
                        <scope line="193"/>
                    </scope>
                </scope>
                <scope line="198"/>
            </method>
            <javadoc line="202">
                Notifies all listeners that have registered interest for
                  notification on this event type.  The event instance
                  is lazily created using the parameters passed into
                  the fire method.                
                <param>
                    e the event                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireUndoableEditUpdate" type="void" line="210">
                <params>
                    <param name="e" type="UndoableEditEvent"/>
                </params>
                <declaration name="listeners" type="Object[]" line="211"/>
                <scope line="212">
                    <scope line="213"/>
                </scope>
            </method>
            <javadoc line="218">
                Returns an array of all the objects currently registered
                  as &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s
                  upon this document.
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s are registered using the
                  &lt;code&gt;add&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt; method.
                  &lt;p&gt;
                  You can specify the &lt;code&gt;listenerType&lt;/code&gt; argument
                  with a class literal, such as
                  &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener.class&lt;/code&gt;.
                  For example, you can query a
                  document &lt;code&gt;d&lt;/code&gt;
                  for its document listeners with the following code:
                  &lt;pre&gt;DocumentListener[] mls = (DocumentListener[])(d.getListeners(DocumentListener.class));&lt;/pre&gt;
                  If no such listeners exist, this method returns an empty array.                
                <param>
                    listenerType the type of listeners requested; this parameter
                      should specify an interface that descends from
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </param>
                <return>
                    an array of all objects registered as
                      &lt;code&gt;&lt;em&gt;Foo&lt;/em&gt;Listener&lt;/code&gt;s on this component,
                      or an empty array if no such
                      listeners have been added                    
                </return>
                <exception>
                    ClassCastException if &lt;code&gt;listenerType&lt;/code&gt;
                      doesn&apos;t specify a class or interface that implements
                      &lt;code&gt;java.util.EventListener&lt;/code&gt;                    
                </exception>
                <see>
                    #getDocumentListeners                    
                </see>
                <see>
                    #getUndoableEditListeners                    
                </see>
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="getListeners" type="T[]" line="247">
                <params>
                    <param name="listenerType" type="Class&lt;T&gt;"/>
                </params>
            </method>
            <javadoc line="250">
                Gets the asynchronous loading priority.  If less than zero,
                  the document should not be loaded asynchronously.                
                <return>
                    the asynchronous loading priority, or &lt;code&gt;-1&lt;/code&gt;
                      if the document should not be loaded asynchronously                    
                </return>
            </javadoc>
            <method name="getAsynchronousLoadPriority" type="int" line="256">
                <declaration name="loadPriority" type="Integer" line="257"/>
                <scope line="258"/>
            </method>
            <javadoc line="263">
                Sets the asynchronous loading priority.                
                <param>
                    p the new asynchronous loading priority; a value
                      less than zero indicates that the document should not be
                      loaded asynchronously                    
                </param>
            </javadoc>
            <method name="setAsynchronousLoadPriority" type="void" line="269">
                <params>
                    <param name="p" type="int"/>
                </params>
                <declaration name="loadPriority" type="Integer" line="270"/>
            </method>
            <javadoc line="273">
                Sets the &lt;code&gt;DocumentFilter&lt;/code&gt;. The &lt;code&gt;DocumentFilter&lt;/code&gt;
                  is passed &lt;code&gt;insert&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; to conditionally
                  allow inserting/deleting of the text.  A &lt;code&gt;null&lt;/code&gt; value
                  indicates that no filtering will occur.                
                <param>
                    filter the &lt;code&gt;DocumentFilter&lt;/code&gt; used to constrain text                    
                </param>
                <see>
                    #getDocumentFilter                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="setDocumentFilter" type="void" line="282">
                <params>
                    <param name="filter" type="DocumentFilter"/>
                </params>
            </method>
            <javadoc line="285">
                Returns the &lt;code&gt;DocumentFilter&lt;/code&gt; that is responsible for
                  filtering of insertion/removal. A &lt;code&gt;null&lt;/code&gt; return value
                  implies no filtering is to occur.                
                <since>
                    1.4                    
                </since>
                <see>
                    #setDocumentFilter                    
                </see>
                <return>
                    the DocumentFilter                    
                </return>
            </javadoc>
            <method name="getDocumentFilter" type="DocumentFilter" line="293"/>
            <javadoc line="296">
                This allows the model to be safely rendered in the presence
                  of currency, if the model supports being updated asynchronously.
                  The given runnable will be executed in a way that allows it
                  to safely read the model with no changes while the runnable
                  is being executed.  The runnable itself may &lt;em&gt;not&lt;/em&gt;
                  make any mutations.
                  &lt;p&gt;
                  This is implemented to aquire a read lock for the duration
                  of the runnables execution.  There may be multiple runnables
                  executing at the same time, and all writers will be blocked
                  while there are active rendering runnables.  If the runnable
                  throws an exception, its lock will be safely released.
                  There is no protection against a runnable that never exits,
                  which will effectively leave the document locked for it&apos;s
                  lifetime.
                  &lt;p&gt;
                  If the given runnable attempts to make any mutations in
                  this implementation, a deadlock will occur.  There is
                  no tracking of individual rendering threads to enable
                  detecting this situation, but a subclass could incur
                  the overhead of tracking them and throwing an error.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    r the renderer to execute                    
                </param>
            </javadoc>
            <method name="render" type="void" line="325">
                <params>
                    <param name="r" type="Runnable"/>
                </params>
                <scope line="327"/>
                <scope line="330"/>
            </method>
            <javadoc line="334">
                Returns the length of the data.  This is the number of
                  characters of content that represents the users data.                
                <return>
                    the length &gt;= 0                    
                </return>
                <see>
                    Document#getLength                    
                </see>
            </javadoc>
            <method name="getLength" type="int" line="340"/>
            <javadoc line="343">
                Adds a document listener for notification of any changes.                
                <param>
                    listener the &lt;code&gt;DocumentListener&lt;/code&gt; to add                    
                </param>
                <see>
                    Document#addDocumentListener                    
                </see>
            </javadoc>
            <method name="addDocumentListener" type="void" line="348">
                <params>
                    <param name="listener" type="DocumentListener"/>
                </params>
            </method>
            <javadoc line="351">
                Removes a document listener.                
                <param>
                    listener the &lt;code&gt;DocumentListener&lt;/code&gt; to remove                    
                </param>
                <see>
                    Document#removeDocumentListener                    
                </see>
            </javadoc>
            <method name="removeDocumentListener" type="void" line="356">
                <params>
                    <param name="listener" type="DocumentListener"/>
                </params>
            </method>
            <javadoc line="359">
                Returns an array of all the document listeners
                  registered on this document.                
                <return>
                    all of this document&apos;s &lt;code&gt;DocumentListener&lt;/code&gt;s
                      or an empty array if no document listeners are
                      currently registered                    
                </return>
                <see>
                    #addDocumentListener                    
                </see>
                <see>
                    #removeDocumentListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getDocumentListeners" type="DocumentListener[]" line="369"/>
            <javadoc line="372">
                Adds an undo listener for notification of any changes.
                  Undo/Redo operations performed on the &lt;code&gt;UndoableEdit&lt;/code&gt;
                  will cause the appropriate DocumentEvent to be fired to keep
                  the view(s) in sync with the model.                
                <param>
                    listener the &lt;code&gt;UndoableEditListener&lt;/code&gt; to add                    
                </param>
                <see>
                    Document#addUndoableEditListener                    
                </see>
            </javadoc>
            <method name="addUndoableEditListener" type="void" line="380">
                <params>
                    <param name="listener" type="UndoableEditListener"/>
                </params>
            </method>
            <javadoc line="383">
                Removes an undo listener.                
                <param>
                    listener the &lt;code&gt;UndoableEditListener&lt;/code&gt; to remove                    
                </param>
                <see>
                    Document#removeDocumentListener                    
                </see>
            </javadoc>
            <method name="removeUndoableEditListener" type="void" line="388">
                <params>
                    <param name="listener" type="UndoableEditListener"/>
                </params>
            </method>
            <javadoc line="391">
                Returns an array of all the undoable edit listeners
                  registered on this document.                
                <return>
                    all of this document&apos;s &lt;code&gt;UndoableEditListener&lt;/code&gt;s
                      or an empty array if no undoable edit listeners are
                      currently registered                    
                </return>
                <see>
                    #addUndoableEditListener                    
                </see>
                <see>
                    #removeUndoableEditListener                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getUndoableEditListeners" type="UndoableEditListener[]" line="401"/>
            <javadoc line="404">
                A convenience method for looking up a property value. It is
                  equivalent to:
                  &lt;pre&gt;
                  getDocumentProperties().get(key);
                  &lt;/pre&gt;                
                <param>
                    key the non-&lt;code&gt;null&lt;/code&gt; property key                    
                </param>
                <return>
                    the value of this property or &lt;code&gt;null&lt;/code&gt;                    
                </return>
                <see>
                    #getDocumentProperties                    
                </see>
            </javadoc>
            <method name="getProperty" type="Object" line="414">
                <params>
                    <param name="key" type="Object"/>
                </params>
            </method>
            <javadoc line="417">
                A convenience method for storing up a property value.  It is
                  equivalent to:
                  &lt;pre&gt;
                  getDocumentProperties().put(key, value);
                  &lt;/pre&gt;
                  If &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; this method will
                  remove the property.                
                <param>
                    key the non-&lt;code&gt;null&lt;/code&gt; key                    
                </param>
                <param>
                    value the property value                    
                </param>
                <see>
                    #getDocumentProperties                    
                </see>
            </javadoc>
            <method name="putProperty" type="void" line="429">
                <params>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <scope line="430"/>
                <scope line="433"/>
                <scope line="436">
                    <scope line="438">
                        <declaration name="e" type="DefaultDocumentEvent" line="439"/>
                    </scope>
                    <scope line="442"/>
                </scope>
            </method>
            <javadoc line="447">
                Removes some content from the document.
                  Removing content causes a write lock to be held while the
                  actual changes are taking place.  Observers are notified
                  of the change on the thread that called this method.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offs the starting offset &gt;= 0                    
                </param>
                <param>
                    len the number of characters to remove &gt;= 0                    
                </param>
                <exception>
                    BadLocationException  the given remove position is not a valid
                      position within the document                    
                </exception>
                <see>
                    Document#remove                    
                </see>
            </javadoc>
            <method name="remove" type="void" line="463">
                <params>
                    <param name="offs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <declaration name="filter" type="DocumentFilter" line="464"/>
                <scope line="466">
                    <scope line="467"/>
                    <scope line="470"/>
                </scope>
                <scope line="474"/>
            </method>
            <javadoc line="478">
                Performs the actual work of the remove. It is assumed the caller
                  will have obtained a &lt;code&gt;writeLock&lt;/code&gt; before invoking this.                
            </javadoc>
            <method name="handleRemove" type="void" line="482">
                <params>
                    <param name="offs" type="int"/>
                    <param name="len" type="int"/>
                </params>
                <scope line="483">
                    <scope line="484"/>
                    <declaration name="chng" type="DefaultDocumentEvent" line="487"/>
                    <declaration name="isComposedTextElement" type="boolean" line="488"/>
                    <declaration name="u" type="UndoableEdit" line="491"/>
                    <scope line="492"/>
                    <scope line="498"/>
                </scope>
            </method>
            <javadoc line="503">
                Deletes the region of text from &lt;code&gt;offset&lt;/code&gt; to
                  &lt;code&gt;offset + length&lt;/code&gt;, and replaces it with &lt;code&gt;text&lt;/code&gt;.
                  It is up to the implementation as to how this is implemented, some
                  implementations may treat this as two distinct operations: a remove
                  followed by an insert, others may treat the replace as one atomic
                  operation.                
                <param>
                    offset index of child element                    
                </param>
                <param>
                    length length of text to delete, may be 0 indicating don&apos;t
                      delete anything                    
                </param>
                <param>
                    text text to insert, &lt;code&gt;null&lt;/code&gt; indicates no text to insert                    
                </param>
                <param>
                    attrs AttributeSet indicating attributes of inserted text,
                      &lt;code&gt;null&lt;/code&gt;
                      is legal, and typically treated as an empty attributeset,
                      but exact interpretation is left to the subclass                    
                </param>
                <exception>
                    BadLocationException the given position is not a valid
                      position within the document                    
                </exception>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="replace" type="void" line="522">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="text" type="String"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <scope line="523"/>
                <declaration name="filter" type="DocumentFilter" line="526"/>
                <scope line="528">
                    <scope line="529"/>
                    <scope line="532">
                        <scope line="533"/>
                        <scope line="536"/>
                    </scope>
                </scope>
                <scope line="541"/>
            </method>
            <javadoc line="545">
                Inserts some content into the document.
                  Inserting content causes a write lock to be held while the
                  actual changes are taking place, followed by notification
                  to the observers on the thread that grabbed the write lock.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offs the starting offset &gt;= 0                    
                </param>
                <param>
                    str the string to insert; does nothing with null/empty strings                    
                </param>
                <param>
                    a the attributes for the inserted content                    
                </param>
                <exception>
                    BadLocationException  the given insert position is not a valid
                      position within the document                    
                </exception>
                <see>
                    Document#insertString                    
                </see>
            </javadoc>
            <method name="insertString" type="void" line="562">
                <params>
                    <param name="offs" type="int"/>
                    <param name="str" type="String"/>
                    <param name="a" type="AttributeSet"/>
                </params>
                <scope line="563"/>
                <declaration name="filter" type="DocumentFilter" line="566"/>
                <scope line="568">
                    <scope line="569"/>
                    <scope line="572"/>
                </scope>
                <scope line="576"/>
            </method>
            <javadoc line="580">
                Performs the actual work of inserting the text; it is assumed the
                  caller has obtained a write lock before invoking this.                
            </javadoc>
            <method name="handleInsertString" type="void" line="584">
                <params>
                    <param name="offs" type="int"/>
                    <param name="str" type="String"/>
                    <param name="a" type="AttributeSet"/>
                </params>
                <scope line="585"/>
                <declaration name="u" type="UndoableEdit" line="588"/>
                <declaration name="e" type="DefaultDocumentEvent" line="589"/>
                <scope line="590"/>
                <scope line="593">
                    <declaration name="d" type="Object" line="594"/>
                    <scope line="595"/>
                    <scope line="598">
                        <declaration name="chars" type="char[]" line="599"/>
                        <scope line="600"/>
                    </scope>
                </scope>
                <scope line="608"/>
            </method>
            <javadoc line="612">
                Gets a sequence of text from the document.                
                <param>
                    offset the starting offset &gt;= 0                    
                </param>
                <param>
                    length the number of characters to retrieve &gt;= 0                    
                </param>
                <return>
                    the text                    
                </return>
                <exception>
                    BadLocationException  the range given includes a position
                      that is not a valid position within the document                    
                </exception>
                <see>
                    Document#getText                    
                </see>
            </javadoc>
            <method name="getText" type="String" line="621">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <scope line="622"/>
                <declaration name="str" type="String" line="625"/>
            </method>
            <javadoc line="628">
                Fetches the text contained within the given portion
                  of the document.
                  &lt;p&gt;
                  If the partialReturn property on the txt parameter is false, the
                  data returned in the Segment will be the entire length requested and
                  may or may not be a copy depending upon how the data was stored.
                  If the partialReturn property is true, only the amount of text that
                  can be returned without creating a copy is returned.  Using partial
                  returns will give better performance for situations where large
                  parts of the document are being scanned.  The following is an example
                  of using the partial return to access the entire document:
                  &lt;p&gt;
                  &lt;pre&gt;
                  &amp;nbsp; int nleft = doc.getDocumentLength();
                  &amp;nbsp; Segment text = new Segment();
                  &amp;nbsp; int offs = 0;
                  &amp;nbsp; text.setPartialReturn(true);
                  &amp;nbsp; while (nleft &gt; 0) {
                  &amp;nbsp;     doc.getText(offs, nleft, text);
                  &amp;nbsp;     // do something with text
                  &amp;nbsp;     nleft -= text.count;
                  &amp;nbsp;     offs += text.count;
                  &amp;nbsp; }
                  &lt;/pre&gt;                
                <param>
                    offset the starting offset &gt;= 0                    
                </param>
                <param>
                    length the number of characters to retrieve &gt;= 0                    
                </param>
                <param>
                    txt the Segment object to retrieve the text into                    
                </param>
                <exception>
                    BadLocationException  the range given includes a position
                      that is not a valid position within the document                    
                </exception>
            </javadoc>
            <method name="getText" type="void" line="659">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="txt" type="Segment"/>
                </params>
                <scope line="660"/>
            </method>
            <javadoc line="665">
                Returns a position that will track change as the document
                  is altered.
                  &lt;p&gt;
                  This method is thread safe, although most Swing methods
                  are not. Please see
                  &lt;A HREF=&quot;http://java.sun.com/docs/books/tutorial/uiswing/misc/threads.html&quot;&gt;How
                  to Use Threads&lt;/A&gt; for more information.                
                <param>
                    offs the position in the model &gt;= 0                    
                </param>
                <return>
                    the position                    
                </return>
                <exception>
                    BadLocationException  if the given position does not
                      represent a valid location in the associated document                    
                </exception>
                <see>
                    Document#createPosition                    
                </see>
            </javadoc>
            <method name="createPosition" type="Position" line="679">
                <params>
                    <param name="offs" type="int"/>
                </params>
            </method>
            <javadoc line="682">
                Returns a position that represents the start of the document.  The
                  position returned can be counted on to track change and stay
                  located at the beginning of the document.                
                <return>
                    the position                    
                </return>
            </javadoc>
            <method name="getStartPosition" type="Position" line="688">
                <declaration name="p" type="Position" line="689"/>
                <scope line="690"/>
                <scope line="693"/>
            </method>
            <javadoc line="698">
                Returns a position that represents the end of the document.  The
                  position returned can be counted on to track change and stay
                  located at the end of the document.                
                <return>
                    the position                    
                </return>
            </javadoc>
            <method name="getEndPosition" type="Position" line="704">
                <declaration name="p" type="Position" line="705"/>
                <scope line="706"/>
                <scope line="709"/>
            </method>
            <javadoc line="714">
                Gets all root elements defined.  Typically, there
                  will only be one so the default implementation
                  is to return the default root element.                
                <return>
                    the root element                    
                </return>
            </javadoc>
            <method name="getRootElements" type="Element[]" line="720">
                <declaration name="elems" type="Element[]" line="721"/>
            </method>
            <method name="getDefaultRootElement" type="Element" line="726"/>
            <javadoc line="726">
                Returns the root element that views should be based upon
                  unless some other mechanism for assigning views to element
                  structures is provided.                
                <return>
                    the root element                    
                </return>
                <see>
                    Document#getDefaultRootElement                    
                </see>
            </javadoc>
            <javadoc line="734">
                Returns the &lt;code&gt;FilterBypass&lt;/code&gt;. This will create one if one
                  does not yet exist.                
            </javadoc>
            <method name="getFilterBypass" type="DocumentFilter.FilterBypass" line="738">
                <scope line="739"/>
            </method>
            <javadoc line="744">
                Returns the root element of the bidirectional structure for this
                  document.  Its children represent character runs with a given
                  Unicode bidi level.                
            </javadoc>
            <method name="getBidiRootElement" type="Element" line="749"/>
            <javadoc line="752">
                Returns true if the text in the range &lt;code&gt;p0&lt;/code&gt; to
                  &lt;code&gt;p1&lt;/code&gt; is left to right.                
            </javadoc>
            <method name="isLeftToRight" type="boolean" line="756">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <scope line="757"/>
                <declaration name="bidiRoot" type="Element" line="760"/>
                <declaration name="index" type="int" line="761"/>
                <declaration name="bidiElem" type="Element" line="762"/>
                <scope line="763">
                    <declaration name="bidiAttrs" type="AttributeSet" line="764"/>
                </scope>
            </method>
            <method name="getParagraphElement" type="Element" line="769"/>
            <javadoc line="769">
                Get the paragraph element containing the given position.  Sub-classes
                  must define for themselves what exactly constitutes a paragraph.  They
                  should keep in mind however that a paragraph should at least be the
                  unit of text over which to run the Unicode bidirectional algorithm.                
                <param>
                    pos the starting offset &gt;= 0                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <javadoc line="778">
                Fetches the context for managing attributes.  This
                  method effectively establishes the strategy used
                  for compressing AttributeSet information.                
                <return>
                    the context                    
                </return>
            </javadoc>
            <method name="getAttributeContext" type="AttributeContext" line="784"/>
            <javadoc line="787">
                Updates document structure as a result of text insertion.  This
                  will happen within a write lock.  If a subclass of
                  this class reimplements this method, it should delegate to the
                  superclass as well.                
                <param>
                    chng a description of the change                    
                </param>
                <param>
                    attr the attributes for the change                    
                </param>
            </javadoc>
            <method name="insertUpdate" type="void" line="795">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <scope line="797">
                    <declaration name="segment" type="Segment" line="798"/>
                    <scope line="799">
                        <scope line="802">
                            <scope line="803"/>
                        </scope>
                    </scope>
                    <scope line="810"/>
                </scope>
            </method>
            <javadoc line="815">
                Updates any document structure as a result of text removal.  This
                  method is called before the text is actually removed from the Content.
                  This will happen within a write lock. If a subclass
                  of this class reimplements this method, it should delegate to the
                  superclass as well.                
                <param>
                    chng a description of the change                    
                </param>
            </javadoc>
            <method name="removeUpdate" type="void" line="823">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                </params>
            </method>
            <javadoc line="825">
                Updates any document structure as a result of text removal.  This
                  method is called after the text has been removed from the Content.
                  This will happen within a write lock. If a subclass
                  of this class reimplements this method, it should delegate to the
                  superclass as well.                
                <param>
                    chng a description of the change                    
                </param>
            </javadoc>
            <method name="postRemoveUpdate" type="void" line="833">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                </params>
            </method>
            <javadoc line="836">
                Update the bidi element structure as a result of the given change
                  to the document.  The given change will be updated to reflect the
                  changes made to the bidi structure.
                  This method assumes that every offset in the model is contained in
                  exactly one paragraph.  This method also assumes that it is called
                  after the change is made to the default element structure.                
            </javadoc>
            <method name="updateBidi" type="void" line="844">
                <params>
                    <param name="chng" type="DefaultDocumentEvent"/>
                </params>
                <declaration name="firstPStart" type="int" line="845"/>
                <declaration name="lastPEnd" type="int" line="846"/>
                <scope line="847">
                    <declaration name="chngStart" type="int" line="848"/>
                    <declaration name="chngEnd" type="int" line="849"/>
                </scope>
                <scope line="853">
                    <declaration name="paragraph" type="Element" line="854"/>
                </scope>
                <scope line="858"/>
                <declaration name="levels" type="byte" line="861"/>
                <declaration name="newElements" type="Vector&amp;lt;Element&amp;gt;" line="862"/>
                <declaration name="firstSpanStart" type="int" line="863"/>
                <declaration name="removeFromIndex" type="int" line="864"/>
                <scope line="865">
                    <declaration name="prevElemIndex" type="int" line="866"/>
                    <declaration name="prevElem" type="Element" line="868"/>
                    <declaration name="prevLevel" type="int" line="869"/>
                    <scope line="870"/>
                    <scope line="873"/>
                    <scope line="876"/>
                </scope>
                <declaration name="firstSpanEnd" type="int" line="880"/>
                <declaration name="lastSpanEnd" type="int" line="882"/>
                <declaration name="newNextElem" type="Element" line="883"/>
                <declaration name="removeToIndex" type="int" line="884"/>
                <scope line="885">
                    <declaration name="nextElemIndex" type="int" line="886"/>
                    <declaration name="nextElem" type="Element" line="888"/>
                    <declaration name="nextLevel" type="int" line="889"/>
                    <scope line="890"/>
                    <scope line="893"/>
                    <scope line="896"/>
                </scope>
                <declaration name="lastSpanStart" type="int" line="900"/>
                <scope line="902"/>
                <scope line="905">
                    <scope line="907">
                        <declaration name="j" type="int" line="908"/>
                    </scope>
                </scope>
                <declaration name="removedElemCount" type="int" line="916"/>
                <scope line="917"/>
                <declaration name="removedElems" type="Element[]" line="920"/>
                <scope line="921"/>
                <declaration name="addedElems" type="Element[]" line="924"/>
                <declaration name="ee" type="ElementEdit" line="926"/>
            </method>
            <javadoc line="930">
                Calculate the levels array for a range of paragraphs.                
            </javadoc>
            <method name="calculateBidiLevels" type="byte[]" line="933">
                <params>
                    <param name="firstPStart" type="int"/>
                    <param name="lastPEnd" type="int"/>
                </params>
                <declaration name="levels" type="byte" line="934"/>
                <declaration name="levelsEnd" type="int" line="935"/>
                <declaration name="defaultDirection" type="Boolean" line="936"/>
                <declaration name="d" type="Object" line="937"/>
                <scope line="938"/>
                <scope line="941">
                    <declaration name="p" type="Element" line="942"/>
                    <declaration name="pStart" type="int" line="943"/>
                    <declaration name="pEnd" type="int" line="944"/>
                    <declaration name="direction" type="Boolean" line="945"/>
                    <scope line="947"/>
                    <declaration name="seg" type="Segment" line="950"/>
                    <scope line="951"/>
                    <scope line="954"/>
                    <declaration name="bidiAnalyzer" type="Bidi" line="957"/>
                    <declaration name="bidiflag" type="int" line="958"/>
                    <scope line="959">
                        <scope line="960"/>
                        <scope line="963"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="976">
                Gives a diagnostic dump.                
                <param>
                    out the output stream                    
                </param>
            </javadoc>
            <method name="dump" type="void" line="980">
                <params>
                    <param name="out" type="PrintStream"/>
                </params>
                <declaration name="root" type="Element" line="981"/>
                <scope line="982"/>
            </method>
            <javadoc line="987">
                Gets the content for the document.                
                <return>
                    the content                    
                </return>
            </javadoc>
            <method name="getContent" type="Content" line="991"/>
            <javadoc line="994">
                Creates a document leaf element.
                  Hook through which elements are created to represent the
                  document structure.  Because this implementation keeps
                  structure and content separate, elements grow automatically
                  when content is extended so splits of existing elements
                  follow.  The document itself gets to decide how to generate
                  elements to give flexibility in the type of elements used.                
                <param>
                    parent the parent element                    
                </param>
                <param>
                    a the attributes for the element                    
                </param>
                <param>
                    p0 the beginning of the range &gt;= 0                    
                </param>
                <param>
                    p1 the end of the range &gt;= p0                    
                </param>
                <return>
                    the new element                    
                </return>
            </javadoc>
            <method name="createLeafElement" type="Element" line="1008">
                <params>
                    <param name="parent" type="Element"/>
                    <param name="a" type="AttributeSet"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
            </method>
            <javadoc line="1011">
                Creates a document branch element, that can contain other elements.                
                <param>
                    parent the parent element                    
                </param>
                <param>
                    a the attributes                    
                </param>
                <return>
                    the element                    
                </return>
            </javadoc>
            <method name="createBranchElement" type="Element" line="1017">
                <params>
                    <param name="parent" type="Element"/>
                    <param name="a" type="AttributeSet"/>
                </params>
            </method>
            <javadoc line="1020">
                Fetches the current writing thread if there is one.
                  This can be used to distinguish whether a method is
                  being called as part of an existing modification or
                  if a lock needs to be acquired and a new transaction
                  started.                
                <return>
                    the thread actively modifying the document
                      or &lt;code&gt;null&lt;/code&gt; if there are no modifications in progress                    
                </return>
            </javadoc>
            <method name="getCurrentWriter" type="Thread" line="1029"/>
            <javadoc line="1032">
                Acquires a lock to begin mutating the document this lock
                  protects.  There can be no writing, notification of changes, or
                  reading going on in order to gain the lock.  Additionally a thread is
                  allowed to gain more than one &lt;code&gt;writeLock&lt;/code&gt;,
                  as long as it doesn&apos;t attempt to gain additional &lt;code&gt;writeLock&lt;/code&gt;s
                  from within document notification.  Attempting to gain a
                  &lt;code&gt;writeLock&lt;/code&gt; from within a DocumentListener notification will
                  result in an &lt;code&gt;IllegalStateException&lt;/code&gt;.  The ability
                  to obtain more than one &lt;code&gt;writeLock&lt;/code&gt; per thread allows
                  subclasses to gain a writeLock, perform a number of operations, then
                  release the lock.
                  &lt;p&gt;
                  Calls to &lt;code&gt;writeLock&lt;/code&gt;
                  must be balanced with calls to &lt;code&gt;writeUnlock&lt;/code&gt;, else the
                  &lt;code&gt;Document&lt;/code&gt; will be left in a locked state so that no
                  reading or writing can be done.                
                <exception>
                    IllegalStateException thrown on illegal lock
                      attempt.  If the document is implemented properly, this can
                      only happen if a document listener attempts to mutate the
                      document.  This situation violates the bean event model
                      where order of delivery is not guaranteed and all listeners
                      should be notified before further mutations are allowed.                    
                </exception>
            </javadoc>
            <method name="writeLock" type="void" line="1056">
                <scope line="1057">
                    <scope line="1058">
                        <scope line="1059">
                            <scope line="1060"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="1071"/>
            </method>
            <javadoc line="1075">
                Releases a write lock previously obtained via &lt;code&gt;writeLock&lt;/code&gt;.
                  After decrementing the lock count if there are no oustanding locks
                  this will allow a new writer, or readers.                
                <see>
                    #writeLock                    
                </see>
            </javadoc>
            <method name="writeUnlock" type="void" line="1081">
                <scope line="1082"/>
            </method>
            <javadoc line="1088">
                Acquires a lock to begin reading some state from the
                  document.  There can be multiple readers at the same time.
                  Writing blocks the readers until notification of the change
                  to the listeners has been completed.  This method should
                  be used very carefully to avoid unintended compromise
                  of the document.  It should always be balanced with a
                  &lt;code&gt;readUnlock&lt;/code&gt;.                
                <see>
                    #readUnlock                    
                </see>
            </javadoc>
            <method name="readLock" type="void" line="1098">
                <scope line="1099">
                    <scope line="1100">
                        <scope line="1101"/>
                    </scope>
                </scope>
                <scope line="1108"/>
            </method>
            <javadoc line="1112">
                Does a read unlock.  This signals that one
                  of the readers is done.  If there are no more readers
                  then writing can begin again.  This should be balanced
                  with a readLock, and should occur in a finally statement
                  so that the balance is guaranteed.  The following is an
                  example.
                  &lt;pre&gt;&lt;code&gt;
                  &amp;nbsp;   readLock();
                  &amp;nbsp;   try {
                  &amp;nbsp;       // do something
                  &amp;nbsp;   } finally {
                  &amp;nbsp;       readUnlock();
                  &amp;nbsp;   }
                  &lt;/code&gt;&lt;/pre&gt;                
                <see>
                    #readLock                    
                </see>
            </javadoc>
            <method name="readUnlock" type="void" line="1129">
                <scope line="1130"/>
                <scope line="1133"/>
            </method>
            <method name="readObject" type="void" line="1139">
                <params>
                    <param name="s" type="ObjectInputStream"/>
                </params>
                <scope line="1143">
                    <declaration name="p" type="Element[]" line="1145"/>
                </scope>
                <scope line="1149"/>
                <anonymous_class line="1152">
                    <method name="validateObject" type="void" line="1153">
                        <scope line="1154">
                            <declaration name="e" type="DefaultDocumentEvent" line="1156"/>
                        </scope>
                        <scope line="1159"/>
                    </method>
                </anonymous_class>
            </method>
            <declaration name="numReaders" type="int" line="1166"/>
            <declaration name="currWriter" type="Thread" line="1167"/>
            <declaration name="numWriters" type="int" line="1168"/>
            <javadoc line="1168">
                The number of writers, all obtained from &lt;code&gt;currWriter&lt;/code&gt;.                
            </javadoc>
            <declaration name="notifyingListeners" type="boolean" line="1172"/>
            <javadoc line="1172">
                True will notifying listeners.                
            </javadoc>
            <declaration name="defaultI18NProperty" type="Boolean" line="1176"/>
            <declaration name="documentProperties" type="Dictionary&amp;lt;Object,Object&amp;gt;" line="1177"/>
            <javadoc line="1177">
                Storage for document-wide properties.                
            </javadoc>
            <declaration name="listenerList" type="EventListenerList" line="1181"/>
            <javadoc line="1181">
                The event listener list for the document.                
            </javadoc>
            <declaration name="data" type="Content" line="1185"/>
            <javadoc line="1185">
                Where the text is actually stored, and a set of marks
                  that track change as the document is edited are managed.                
            </javadoc>
            <declaration name="context" type="AttributeContext" line="1190"/>
            <javadoc line="1190">
                Factory for the attributes.  This is the strategy for
                  attribute compression and control of the lifetime of
                  a set of attributes as a collection.  This may be shared
                  with other documents.                
            </javadoc>
            <declaration name="bidiRoot" type="BranchElement" line="1197"/>
            <javadoc line="1197">
                The root of the bidirectional structure for this document.  Its children
                  represent character runs with the same Unicode bidi level.                
            </javadoc>
            <declaration name="documentFilter" type="DocumentFilter" line="1202"/>
            <javadoc line="1202">
                Filter for inserting/removing of text.                
            </javadoc>
            <declaration name="filterBypass" type="DocumentFilter.FilterBypass" line="1206"/>
            <javadoc line="1206">
                Used by DocumentFilter to do actual insert/remove.                
            </javadoc>
            <declaration name="BAD_LOCK_STATE" type="String" line="1210"/>
            <declaration name="BAD_LOCATION" type="String" line="1211"/>
            <javadoc line="1211">
                Error message to indicate a bad location.                
            </javadoc>
            <declaration name="ParagraphElementName" type="String" line="1215"/>
            <javadoc line="1215">
                Name of elements used to represent paragraphs                
            </javadoc>
            <declaration name="ContentElementName" type="String" line="1219"/>
            <javadoc line="1219">
                Name of elements used to represent content                
            </javadoc>
            <declaration name="SectionElementName" type="String" line="1223"/>
            <javadoc line="1223">
                Name of elements used to hold sections (lines/paragraphs).                
            </javadoc>
            <declaration name="BidiElementName" type="String" line="1227"/>
            <javadoc line="1227">
                Name of elements used to hold a unidirectional run                
            </javadoc>
            <declaration name="ElementNameAttribute" type="String" line="1231"/>
            <javadoc line="1231">
                Name of the attribute used to specify element
                  names.                
            </javadoc>
            <declaration name="I18NProperty" type="String" line="1236"/>
            <javadoc line="1236">
                Document property that indicates whether internationalization
                  functions such as text reordering or reshaping should be
                  performed. This property should not be publicly exposed,
                  since it is used for implementation convenience only.  As a
                  side effect, copies of this property may be in its subclasses
                  that live in different packages (e.g. HTMLDocument as of now),
                  so those copies should also be taken care of when this property
                  needs to be modified.                
            </javadoc>
            <declaration name="MultiByteProperty" type="Object" line="1247"/>
            <javadoc line="1247">
                Document property that indicates if a character has been inserted
                  into the document that is more than one byte long.  GlyphView uses
                  this to determine if it should use BreakIterator.                
            </javadoc>
            <declaration name="AsyncLoadPriority" type="String" line="1253"/>
            <javadoc line="1253">
                Document property that indicates asynchronous loading is
                  desired, with the thread priority given as the value.                
            </javadoc>
            <interface name="Content">
                <javadoc line="1258">
                    Interface to describe a sequence of character content that
                      can be edited.  Implementations may or may not support a
                      history mechanism which will be reflected by whether or not
                      mutations return an UndoableEdit implementation.                    
                    <see>
                        AbstractDocument                        
                    </see>
                </javadoc>
                <method name="createPosition" type="Position" line="1266"/>
                <javadoc line="1266">
                    Creates a position within the content that will
                      track change as the content is mutated.                    
                    <param>
                        offset the offset in the content &gt;= 0                        
                    </param>
                    <return>
                        a Position                        
                    </return>
                    <exception>
                        BadLocationException for an invalid offset                        
                    </exception>
                </javadoc>
                <method name="length" type="int" line="1274"/>
                <javadoc line="1274">
                    Current length of the sequence of character content.                    
                    <return>
                        the length &gt;= 0                        
                    </return>
                </javadoc>
                <method name="insertString" type="UndoableEdit" line="1279"/>
                <javadoc line="1279">
                    Inserts a string of characters into the sequence.                    
                    <param>
                        where   offset into the sequence to make the insertion &gt;= 0                        
                    </param>
                    <param>
                        str     string to insert                        
                    </param>
                    <return>
                        if the implementation supports a history mechanism,
                          a reference to an &lt;code&gt;Edit&lt;/code&gt; implementation will be returned,
                          otherwise returns &lt;code&gt;null&lt;/code&gt;                        
                    </return>
                    <exception>
                        BadLocationException  thrown if the area covered by
                          the arguments is not contained in the character sequence                        
                    </exception>
                </javadoc>
                <method name="remove" type="UndoableEdit" line="1290"/>
                <javadoc line="1290">
                    Removes some portion of the sequence.                    
                    <param>
                        where   The offset into the sequence to make the
                          insertion &gt;= 0.                        
                    </param>
                    <param>
                        nitems  The number of items in the sequence to remove &gt;= 0.                        
                    </param>
                    <return>
                        If the implementation supports a history mechansim,
                          a reference to an Edit implementation will be returned,
                          otherwise null.                        
                    </return>
                    <exception>
                        BadLocationException  Thrown if the area covered by
                          the arguments is not contained in the character sequence.                        
                    </exception>
                </javadoc>
                <method name="getString" type="String" line="1302"/>
                <javadoc line="1302">
                    Fetches a string of characters contained in the sequence.                    
                    <param>
                        where   Offset into the sequence to fetch &gt;= 0.                        
                    </param>
                    <param>
                        len     number of characters to copy &gt;= 0.                        
                    </param>
                    <return>
                        the string                        
                    </return>
                    <exception>
                        BadLocationException  Thrown if the area covered by
                          the arguments is not contained in the character sequence.                        
                    </exception>
                </javadoc>
                <method name="getChars" type="void" line="1311"/>
                <javadoc line="1311">
                    Gets a sequence of characters and copies them into a Segment.                    
                    <param>
                        where the starting offset &gt;= 0                        
                    </param>
                    <param>
                        len the number of characters &gt;= 0                        
                    </param>
                    <param>
                        txt the target location to copy into                        
                    </param>
                    <exception>
                        BadLocationException  Thrown if the area covered by
                          the arguments is not contained in the character sequence.                        
                    </exception>
                </javadoc>
            </interface>
            <interface name="AttributeContext">
                <javadoc line="1321">
                    An interface that can be used to allow MutableAttributeSet
                      implementations to use pluggable attribute compression
                      techniques.  Each mutation of the attribute set can be
                      used to exchange a previous AttributeSet instance with
                      another, preserving the possibility of the AttributeSet
                      remaining immutable.  An implementation is provided by
                      the StyleContext class.
                      The Element implementations provided by this class use
                      this interface to provide their MutableAttributeSet
                      implementations, so that different AttributeSet compression
                      techniques can be employed.  The method
                      &lt;code&gt;getAttributeContext&lt;/code&gt; should be implemented to
                      return the object responsible for implementing the desired
                      compression technique.                    
                    <see>
                        StyleContext                        
                    </see>
                </javadoc>
                <method name="addAttribute" type="AttributeSet" line="1339"/>
                <javadoc line="1339">
                    Adds an attribute to the given set, and returns
                      the new representative set.                    
                    <param>
                        old the old attribute set                        
                    </param>
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <param>
                        value the attribute value                        
                    </param>
                    <return>
                        the updated attribute set                        
                    </return>
                    <see>
                        MutableAttributeSet#addAttribute                        
                    </see>
                </javadoc>
                <method name="addAttributes" type="AttributeSet" line="1349"/>
                <javadoc line="1349">
                    Adds a set of attributes to the element.                    
                    <param>
                        old the old attribute set                        
                    </param>
                    <param>
                        attr the attributes to add                        
                    </param>
                    <return>
                        the updated attribute set                        
                    </return>
                    <see>
                        MutableAttributeSet#addAttribute                        
                    </see>
                </javadoc>
                <method name="removeAttribute" type="AttributeSet" line="1357"/>
                <javadoc line="1357">
                    Removes an attribute from the set.                    
                    <param>
                        old the old attribute set                        
                    </param>
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <return>
                        the updated attribute set                        
                    </return>
                    <see>
                        MutableAttributeSet#removeAttribute                        
                    </see>
                </javadoc>
                <method name="removeAttributes" type="AttributeSet" line="1365"/>
                <javadoc line="1365">
                    Removes a set of attributes for the element.                    
                    <param>
                        old the old attribute set                        
                    </param>
                    <param>
                        names the attribute names                        
                    </param>
                    <return>
                        the updated attribute set                        
                    </return>
                    <see>
                        MutableAttributeSet#removeAttributes                        
                    </see>
                </javadoc>
                <method name="removeAttributes" type="AttributeSet" line="1373"/>
                <javadoc line="1373">
                    Removes a set of attributes for the element.                    
                    <param>
                        old the old attribute set                        
                    </param>
                    <param>
                        attrs the attributes                        
                    </param>
                    <return>
                        the updated attribute set                        
                    </return>
                    <see>
                        MutableAttributeSet#removeAttributes                        
                    </see>
                </javadoc>
                <method name="getEmptySet" type="AttributeSet" line="1381"/>
                <javadoc line="1381">
                    Fetches an empty AttributeSet.                    
                    <return>
                        the attribute set                        
                    </return>
                </javadoc>
                <method name="reclaim" type="void" line="1386"/>
                <javadoc line="1386">
                    Reclaims an attribute set.
                      This is a way for a MutableAttributeSet to mark that it no
                      longer need a particular immutable set.  This is only necessary
                      in 1.1 where there are no weak references.  A 1.1 implementation
                      would call this in its finalize method.                    
                    <param>
                        a the attribute set to reclaim                        
                    </param>
                </javadoc>
            </interface>
            <class name="AbstractElement" line="1396">
                <implements interface="Element"/>
                <implements interface="MutableAttributeSet"/>
                <implements interface="Serializable"/>
                <implements interface="TreeNode"/>
                <javadoc line="1396">
                    Implements the abstract part of an element.  By default elements
                      support attributes by having a field that represents the immutable
                      part of the current attribute set for the element.  The element itself
                      implements MutableAttributeSet which can be used to modify the set
                      by fetching a new immutable set.  The immutable sets are provided
                      by the AttributeContext associated with the document.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1414">
                    Creates a new AbstractElement.                    
                    <param>
                        parent the parent element                        
                    </param>
                    <param>
                        a the attributes for the element                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="AbstractElement" type="constructor" line="1420">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="a" type="AttributeSet"/>
                    </params>
                    <scope line="1423"/>
                </method>
                <method name="indent" type="void" line="1427">
                    <params>
                        <param name="out" type="PrintWriter"/>
                        <param name="n" type="int"/>
                    </params>
                    <scope line="1428"/>
                </method>
                <javadoc line="1432">
                    Dumps a debugging representation of the element hierarchy.                    
                    <param>
                        psOut the output stream                        
                    </param>
                    <param>
                        indentAmount the indentation level &gt;= 0                        
                    </param>
                </javadoc>
                <method name="dump" type="void" line="1437">
                    <params>
                        <param name="psOut" type="PrintStream"/>
                        <param name="indentAmount" type="int"/>
                    </params>
                    <declaration name="out" type="PrintWriter" line="1438"/>
                    <scope line="1439"/>
                    <scope line="1442"/>
                    <scope line="1446"/>
                    <scope line="1449"/>
                    <scope line="1452">
                        <declaration name="names" type="Enumeration" line="1454"/>
                        <scope line="1455">
                            <declaration name="name" type="Object" line="1456"/>
                        </scope>
                    </scope>
                    <scope line="1463">
                        <declaration name="c" type="Content" line="1466"/>
                        <scope line="1467">
                            <declaration name="contentStr" type="String" line="1468"/>
                            <scope line="1469"/>
                        </scope>
                        <scope line="1474"/>
                    </scope>
                    <scope line="1477">
                        <declaration name="n" type="int" line="1478"/>
                        <scope line="1479">
                            <declaration name="e" type="AbstractElement" line="1480"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1485">
                    Gets the number of attributes that are defined.                    
                    <return>
                        the number of attributes &gt;= 0                        
                    </return>
                    <see>
                        AttributeSet#getAttributeCount                        
                    </see>
                </javadoc>
                <method name="getAttributeCount" type="int" line="1490"/>
                <javadoc line="1493">
                    Checks whether a given attribute is defined.                    
                    <param>
                        attrName the non-null attribute name                        
                    </param>
                    <return>
                        true if the attribute is defined                        
                    </return>
                    <see>
                        AttributeSet#isDefined                        
                    </see>
                </javadoc>
                <method name="isDefined" type="boolean" line="1499">
                    <params>
                        <param name="attrName" type="Object"/>
                    </params>
                </method>
                <javadoc line="1502">
                    Checks whether two attribute sets are equal.                    
                    <param>
                        attr the attribute set to check against                        
                    </param>
                    <return>
                        true if the same                        
                    </return>
                    <see>
                        AttributeSet#isEqual                        
                    </see>
                </javadoc>
                <method name="isEqual" type="boolean" line="1508">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="1511">
                    Copies a set of attributes.                    
                    <return>
                        the copy                        
                    </return>
                    <see>
                        AttributeSet#copyAttributes                        
                    </see>
                </javadoc>
                <method name="copyAttributes" type="AttributeSet" line="1516"/>
                <javadoc line="1519">
                    Gets the value of an attribute.                    
                    <param>
                        attrName the non-null attribute name                        
                    </param>
                    <return>
                        the attribute value                        
                    </return>
                    <see>
                        AttributeSet#getAttribute                        
                    </see>
                </javadoc>
                <method name="getAttribute" type="Object" line="1525">
                    <params>
                        <param name="attrName" type="Object"/>
                    </params>
                    <declaration name="value" type="Object" line="1526"/>
                    <scope line="1527">
                        <declaration name="a" type="AttributeSet" line="1528"/>
                        <scope line="1529"/>
                    </scope>
                </method>
                <javadoc line="1535">
                    Gets the names of all attributes.                    
                    <return>
                        the attribute names as an enumeration                        
                    </return>
                    <see>
                        AttributeSet#getAttributeNames                        
                    </see>
                </javadoc>
                <method name="getAttributeNames" type="Enumeration&lt;?&gt;" line="1540"/>
                <javadoc line="1543">
                    Checks whether a given attribute name/value is defined.                    
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <param>
                        value the attribute value                        
                    </param>
                    <return>
                        true if the name/value is defined                        
                    </return>
                    <see>
                        AttributeSet#containsAttribute                        
                    </see>
                </javadoc>
                <method name="containsAttribute" type="boolean" line="1550">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                </method>
                <javadoc line="1553">
                    Checks whether the element contains all the attributes.                    
                    <param>
                        attrs the attributes to check                        
                    </param>
                    <return>
                        true if the element contains all the attributes                        
                    </return>
                    <see>
                        AttributeSet#containsAttributes                        
                    </see>
                </javadoc>
                <method name="containsAttributes" type="boolean" line="1559">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="1562">
                    Gets the resolving parent.
                      If not overridden, the resolving parent defaults to
                      the parent element.                    
                    <return>
                        the attributes from the parent, &lt;code&gt;null&lt;/code&gt; if none                        
                    </return>
                    <see>
                        AttributeSet#getResolveParent                        
                    </see>
                </javadoc>
                <method name="getResolveParent" type="AttributeSet" line="1569">
                    <declaration name="a" type="AttributeSet" line="1570"/>
                    <scope line="1571"/>
                </method>
                <javadoc line="1576">
                    Adds an attribute to the element.                    
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <param>
                        value the attribute value                        
                    </param>
                    <see>
                        MutableAttributeSet#addAttribute                        
                    </see>
                </javadoc>
                <method name="addAttribute" type="void" line="1582">
                    <params>
                        <param name="name" type="Object"/>
                        <param name="value" type="Object"/>
                    </params>
                    <declaration name="context" type="AttributeContext" line="1584"/>
                </method>
                <javadoc line="1587">
                    Adds a set of attributes to the element.                    
                    <param>
                        attr the attributes to add                        
                    </param>
                    <see>
                        MutableAttributeSet#addAttribute                        
                    </see>
                </javadoc>
                <method name="addAttributes" type="void" line="1592">
                    <params>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <declaration name="context" type="AttributeContext" line="1594"/>
                </method>
                <javadoc line="1597">
                    Removes an attribute from the set.                    
                    <param>
                        name the non-null attribute name                        
                    </param>
                    <see>
                        MutableAttributeSet#removeAttribute                        
                    </see>
                </javadoc>
                <method name="removeAttribute" type="void" line="1602">
                    <params>
                        <param name="name" type="Object"/>
                    </params>
                    <declaration name="context" type="AttributeContext" line="1604"/>
                </method>
                <javadoc line="1607">
                    Removes a set of attributes for the element.                    
                    <param>
                        names the attribute names                        
                    </param>
                    <see>
                        MutableAttributeSet#removeAttributes                        
                    </see>
                </javadoc>
                <method name="removeAttributes" type="void" line="1612">
                    <params>
                        <param name="names" type="Enumeration&lt;?&gt;"/>
                    </params>
                    <declaration name="context" type="AttributeContext" line="1614"/>
                </method>
                <javadoc line="1617">
                    Removes a set of attributes for the element.                    
                    <param>
                        attrs the attributes                        
                    </param>
                    <see>
                        MutableAttributeSet#removeAttributes                        
                    </see>
                </javadoc>
                <method name="removeAttributes" type="void" line="1622">
                    <params>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                    <declaration name="context" type="AttributeContext" line="1624"/>
                    <scope line="1625"/>
                    <scope line="1628"/>
                </method>
                <javadoc line="1632">
                    Sets the resolving parent.                    
                    <param>
                        parent the parent, null if none                        
                    </param>
                    <see>
                        MutableAttributeSet#setResolveParent                        
                    </see>
                </javadoc>
                <method name="setResolveParent" type="void" line="1637">
                    <params>
                        <param name="parent" type="AttributeSet"/>
                    </params>
                    <declaration name="context" type="AttributeContext" line="1639"/>
                    <scope line="1640"/>
                    <scope line="1643"/>
                </method>
                <method name="checkForIllegalCast" type="void" line="1647">
                    <declaration name="t" type="Thread" line="1648"/>
                    <scope line="1649"/>
                </method>
                <javadoc line="1653">
                    Retrieves the underlying model.                    
                    <return>
                        the model                        
                    </return>
                </javadoc>
                <method name="getDocument" type="Document" line="1657"/>
                <javadoc line="1660">
                    Gets the parent of the element.                    
                    <return>
                        the parent                        
                    </return>
                </javadoc>
                <method name="getParentElement" type="Element" line="1664"/>
                <javadoc line="1667">
                    Gets the attributes for the element.                    
                    <return>
                        the attribute set                        
                    </return>
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="1671"/>
                <javadoc line="1674">
                    Gets the name of the element.                    
                    <return>
                        the name, null if none                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="1678">
                    <scope line="1679"/>
                </method>
                <method name="getStartOffset" type="int" line="1684"/>
                <javadoc line="1684">
                    Gets the starting offset in the model for the element.                    
                    <return>
                        the offset &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getEndOffset" type="int" line="1689"/>
                <javadoc line="1689">
                    Gets the ending offset in the model for the element.                    
                    <return>
                        the offset &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getElement" type="Element" line="1694"/>
                <javadoc line="1694">
                    Gets a child element.                    
                    <param>
                        index the child index, &gt;= 0 &amp;&amp; &lt; getElementCount()                        
                    </param>
                    <return>
                        the child element                        
                    </return>
                </javadoc>
                <method name="getElementCount" type="int" line="1700"/>
                <javadoc line="1700">
                    Gets the number of children for the element.                    
                    <return>
                        the number of children &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getElementIndex" type="int" line="1705"/>
                <javadoc line="1705">
                    Gets the child element index closest to the given model offset.                    
                    <param>
                        offset the offset &gt;= 0                        
                    </param>
                    <return>
                        the element index &gt;= 0                        
                    </return>
                </javadoc>
                <method name="isLeaf" type="boolean" line="1711"/>
                <javadoc line="1711">
                    Checks whether the element is a leaf.                    
                    <return>
                        true if a leaf                        
                    </return>
                </javadoc>
                <javadoc line="1716">
                    Returns the child &lt;code&gt;TreeNode&lt;/code&gt; at index
                      &lt;code&gt;childIndex&lt;/code&gt;.                    
                </javadoc>
                <method name="getChildAt" type="TreeNode" line="1720">
                    <params>
                        <param name="childIndex" type="int"/>
                    </params>
                </method>
                <javadoc line="1723">
                    Returns the number of children &lt;code&gt;TreeNode&lt;/code&gt;&apos;s
                      receiver contains.                    
                    <return>
                        the number of children &lt;code&gt;TreeNodews&lt;/code&gt;&apos;s
                          receiver contains                        
                    </return>
                </javadoc>
                <method name="getChildCount" type="int" line="1729"/>
                <javadoc line="1732">
                    Returns the parent &lt;code&gt;TreeNode&lt;/code&gt; of the receiver.                    
                    <return>
                        the parent &lt;code&gt;TreeNode&lt;/code&gt; of the receiver                        
                    </return>
                </javadoc>
                <method name="getParent" type="TreeNode" line="1736"/>
                <javadoc line="1739">
                    Returns the index of &lt;code&gt;node&lt;/code&gt; in the receivers children.
                      If the receiver does not contain &lt;code&gt;node&lt;/code&gt;, -1 will be
                      returned.                    
                    <param>
                        node the location of interest                        
                    </param>
                    <return>
                        the index of &lt;code&gt;node&lt;/code&gt; in the receiver&apos;s
                          children, or -1 if absent                        
                    </return>
                </javadoc>
                <method name="getIndex" type="int" line="1747">
                    <params>
                        <param name="node" type="TreeNode"/>
                    </params>
                </method>
                <method name="getAllowsChildren" type="boolean" line="1751"/>
                <javadoc line="1751">
                    Returns true if the receiver allows children.                    
                    <return>
                        true if the receiver allows children, otherwise false                        
                    </return>
                </javadoc>
                <method name="children" type="Enumeration" line="1756"/>
                <javadoc line="1756">
                    Returns the children of the receiver as an
                      &lt;code&gt;Enumeration&lt;/code&gt;.                    
                    <return>
                        the children of the receiver as an &lt;code&gt;Enumeration&lt;/code&gt;                        
                    </return>
                </javadoc>
                <method name="writeObject" type="void" line="1762">
                    <params>
                        <param name="s" type="ObjectOutputStream"/>
                    </params>
                </method>
                <method name="readObject" type="void" line="1766">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                    <declaration name="attr" type="MutableAttributeSet" line="1768"/>
                    <declaration name="context" type="AttributeContext" line="1770"/>
                </method>
                <declaration name="parent" type="Element" line="1773"/>
                <declaration name="attributes" type="AttributeSet" line="1774"/>
            </class>
            <class name="BranchElement" line="1776">
                <extends class="AbstractElement"/>
                <javadoc line="1776">
                    Implements a composite element that contains other elements.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                </javadoc>
                <javadoc line="1789">
                    Constructs a composite element that initially contains
                      no children.                    
                    <param>
                        parent  The parent element                        
                    </param>
                    <param>
                        a the attributes for the element                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="BranchElement" type="constructor" line="1796">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="a" type="AttributeSet"/>
                    </params>
                </method>
                <javadoc line="1802">
                    Gets the child element that contains
                      the given model position.                    
                    <param>
                        pos the position &gt;= 0                        
                    </param>
                    <return>
                        the element, null if none                        
                    </return>
                </javadoc>
                <method name="positionToElement" type="Element" line="1808">
                    <params>
                        <param name="pos" type="int"/>
                    </params>
                    <declaration name="index" type="int" line="1809"/>
                    <declaration name="child" type="Element" line="1810"/>
                    <declaration name="p0" type="int" line="1811"/>
                    <declaration name="p1" type="int" line="1812"/>
                    <scope line="1813"/>
                </method>
                <javadoc line="1818">
                    Replaces content with a new set of elements.                    
                    <param>
                        offset the starting offset &gt;= 0                        
                    </param>
                    <param>
                        length the length to replace &gt;= 0                        
                    </param>
                    <param>
                        elems the new elements                        
                    </param>
                </javadoc>
                <method name="replace" type="void" line="1824">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="elems" type="Element[]"/>
                    </params>
                    <declaration name="delta" type="int" line="1825"/>
                    <declaration name="src" type="int" line="1826"/>
                    <declaration name="nmove" type="int" line="1827"/>
                    <declaration name="dest" type="int" line="1828"/>
                    <scope line="1829">
                        <declaration name="newLength" type="int" line="1830"/>
                        <declaration name="newChildren" type="AbstractElement[]" line="1831"/>
                    </scope>
                    <scope line="1837"/>
                </method>
                <javadoc line="1843">
                    Converts the element to a string.                    
                    <return>
                        the string                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="1847"/>
                <javadoc line="1850">
                    Gets the element name.                    
                    <return>
                        the element name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="1854">
                    <declaration name="nm" type="String" line="1855"/>
                    <scope line="1856"/>
                </method>
                <javadoc line="1861">
                    Gets the starting offset in the model for the element.                    
                    <return>
                        the offset &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getStartOffset" type="int" line="1865"/>
                <javadoc line="1868">
                    Gets the ending offset in the model for the element.                    
                    <throws>
                        NullPointerException if this element has no children                        
                    </throws>
                    <return>
                        the offset &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getEndOffset" type="int" line="1873">
                    <declaration name="child" type="Element" line="1874"/>
                </method>
                <javadoc line="1877">
                    Gets a child element.                    
                    <param>
                        index the child index, &gt;= 0 &amp;&amp; &lt; getElementCount()                        
                    </param>
                    <return>
                        the child element, null if none                        
                    </return>
                </javadoc>
                <method name="getElement" type="Element" line="1882">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                    <scope line="1883"/>
                </method>
                <javadoc line="1888">
                    Gets the number of children for the element.                    
                    <return>
                        the number of children &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getElementCount" type="int" line="1892"/>
                <javadoc line="1895">
                    Gets the child element index closest to the given model offset.                    
                    <param>
                        offset the offset &gt;= 0                        
                    </param>
                    <return>
                        the element index &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getElementIndex" type="int" line="1900">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="index" type="int" line="1901"/>
                    <declaration name="lower" type="int" line="1902"/>
                    <declaration name="upper" type="int" line="1903"/>
                    <declaration name="mid" type="int" line="1904"/>
                    <declaration name="p0" type="int" line="1905"/>
                    <declaration name="p1" type="int" line="1906"/>
                    <scope line="1907"/>
                    <scope line="1910"/>
                    <scope line="1913">
                        <declaration name="lastHit" type="Element" line="1914"/>
                        <scope line="1917"/>
                        <scope line="1920"/>
                        <scope line="1923"/>
                    </scope>
                    <scope line="1927">
                        <declaration name="elem" type="Element" line="1929"/>
                        <scope line="1932"/>
                        <scope line="1937"/>
                        <scope line="1940"/>
                    </scope>
                    <scope line="1944"/>
                    <scope line="1947"/>
                </method>
                <javadoc line="1953">
                    Checks whether the element is a leaf.                    
                    <return>
                        true if a leaf                        
                    </return>
                </javadoc>
                <method name="isLeaf" type="boolean" line="1957"/>
                <javadoc line="1960">
                    Returns true if the receiver allows children.                    
                    <return>
                        true if the receiver allows children, otherwise false                        
                    </return>
                </javadoc>
                <method name="getAllowsChildren" type="boolean" line="1964"/>
                <javadoc line="1967">
                    Returns the children of the receiver as an
                      &lt;code&gt;Enumeration&lt;/code&gt;.                    
                    <return>
                        the children of the receiver                        
                    </return>
                </javadoc>
                <method name="children" type="Enumeration" line="1972">
                    <declaration name="tempVector" type="Vector&amp;lt;AbstractElement&amp;gt;" line="1974"/>
                </method>
                <declaration name="children" type="AbstractElement[]" line="1978"/>
                <declaration name="nchildren" type="int" line="1979"/>
                <declaration name="lastIndex" type="int" line="1980"/>
            </class>
            <class name="LeafElement" line="1982">
                <extends class="AbstractElement"/>
                <javadoc line="1982">
                    Implements an element that directly represents content of
                      some kind.
                      &lt;p&gt;
                      &lt;strong&gt;Warning:&lt;/strong&gt;
                      Serialized objects of this class will not be compatible with
                      future Swing releases. The current serialization support is
                      appropriate for short term storage or RMI between applications running
                      the same version of Swing.  As of 1.4, support for long term storage
                      of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                      has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                      Please see {@link java.beans.XMLEncoder}.                    
                    <see>
                        Element                        
                    </see>
                </javadoc>
                <javadoc line="1997">
                    Constructs an element that represents content within the
                      document (has no children).                    
                    <param>
                        parent  The parent element                        
                    </param>
                    <param>
                        a       The element attributes                        
                    </param>
                    <param>
                        offs0   The start offset &gt;= 0                        
                    </param>
                    <param>
                        offs1   The end offset &gt;= offs0                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="LeafElement" type="constructor" line="2006">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="a" type="AttributeSet"/>
                        <param name="offs0" type="int"/>
                        <param name="offs1" type="int"/>
                    </params>
                    <scope line="2008"/>
                    <scope line="2012"/>
                </method>
                <javadoc line="2018">
                    Converts the element to a string.                    
                    <return>
                        the string                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="2022"/>
                <javadoc line="2025">
                    Gets the starting offset in the model for the element.                    
                    <return>
                        the offset &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getStartOffset" type="int" line="2029"/>
                <javadoc line="2032">
                    Gets the ending offset in the model for the element.                    
                    <return>
                        the offset &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getEndOffset" type="int" line="2036"/>
                <javadoc line="2039">
                    Gets the element name.                    
                    <return>
                        the name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="2043">
                    <declaration name="nm" type="String" line="2044"/>
                    <scope line="2045"/>
                </method>
                <javadoc line="2050">
                    Gets the child element index closest to the given model offset.                    
                    <param>
                        pos the offset &gt;= 0                        
                    </param>
                    <return>
                        the element index &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getElementIndex" type="int" line="2055">
                    <params>
                        <param name="pos" type="int"/>
                    </params>
                </method>
                <javadoc line="2058">
                    Gets a child element.                    
                    <param>
                        index the child index, &gt;= 0 &amp;&amp; &lt; getElementCount()                        
                    </param>
                    <return>
                        the child element                        
                    </return>
                </javadoc>
                <method name="getElement" type="Element" line="2063">
                    <params>
                        <param name="index" type="int"/>
                    </params>
                </method>
                <javadoc line="2066">
                    Returns the number of child elements.                    
                    <return>
                        the number of children &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getElementCount" type="int" line="2070"/>
                <javadoc line="2073">
                    Checks whether the element is a leaf.                    
                    <return>
                        true if a leaf                        
                    </return>
                </javadoc>
                <method name="isLeaf" type="boolean" line="2077"/>
                <javadoc line="2080">
                    Returns true if the receiver allows children.                    
                    <return>
                        true if the receiver allows children, otherwise false                        
                    </return>
                </javadoc>
                <method name="getAllowsChildren" type="boolean" line="2084"/>
                <javadoc line="2087">
                    Returns the children of the receiver as an
                      &lt;code&gt;Enumeration&lt;/code&gt;.                    
                    <return>
                        the children of the receiver                        
                    </return>
                </javadoc>
                <method name="children" type="Enumeration" line="2092"/>
                <method name="writeObject" type="void" line="2095">
                    <params>
                        <param name="s" type="ObjectOutputStream"/>
                    </params>
                </method>
                <method name="readObject" type="void" line="2100">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                    <declaration name="off0" type="int" line="2102"/>
                    <declaration name="off1" type="int" line="2103"/>
                    <scope line="2104"/>
                    <scope line="2108"/>
                </method>
                <declaration name="p0" type="Position" line="2114"/>
                <declaration name="p1" type="Position" line="2115"/>
            </class>
            <class name="BidiRootElement" line="2117">
                <extends class="BranchElement"/>
                <javadoc line="2117">
                    Represents the root element of the bidirectional element structure.
                      The root element is the only element in the bidi element structure
                      which contains children.                    
                </javadoc>
                <method name="BidiRootElement" type="constructor" line="2123"/>
                <javadoc line="2126">
                    Gets the name of the element.                    
                    <return>
                        the name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="2130"/>
            </class>
            <class name="BidiElement" line="2134">
                <extends class="LeafElement"/>
                <javadoc line="2134">
                    Represents an element of the bidirectional element structure.                    
                </javadoc>
                <javadoc line="2138">
                    Creates a new BidiElement.                    
                </javadoc>
                <method name="BidiElement" type="constructor" line="2141">
                    <params>
                        <param name="parent" type="Element"/>
                        <param name="start" type="int"/>
                        <param name="end" type="int"/>
                        <param name="level" type="int"/>
                    </params>
                </method>
                <javadoc line="2145">
                    Gets the name of the element.                    
                    <return>
                        the name                        
                    </return>
                </javadoc>
                <method name="getName" type="String" line="2149"/>
                <method name="getLevel" type="int" line="2152">
                    <declaration name="o" type="Integer" line="2153"/>
                    <scope line="2154"/>
                </method>
                <method name="isLeftToRight" type="boolean" line="2159"/>
            </class>
            <class name="DefaultDocumentEvent" line="2163">
                <extends class="CompoundEdit"/>
                <implements interface="DocumentEvent"/>
                <javadoc line="2163">
                    Stores document changes as the document is being
                      modified.  Can subsequently be used for change notification
                      when done with the document modification transaction.
                      This is used by the AbstractDocument class and its extensions
                      for broadcasting change information to the document listeners.                    
                </javadoc>
                <javadoc line="2171">
                    Constructs a change record.                    
                    <param>
                        offs the offset into the document of the change &gt;= 0                        
                    </param>
                    <param>
                        len  the length of the change &gt;= 0                        
                    </param>
                    <param>
                        type the type of event (DocumentEvent.EventType)                        
                    </param>
                    <since>
                        1.4                        
                    </since>
                </javadoc>
                <method name="DefaultDocumentEvent" type="constructor" line="2178">
                    <params>
                        <param name="offs" type="int"/>
                        <param name="len" type="int"/>
                        <param name="type" type="DocumentEvent.EventType"/>
                    </params>
                </method>
                <javadoc line="2184">
                    Returns a string description of the change event.                    
                    <return>
                        a string                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="2188"/>
                <javadoc line="2191">
                    Adds a document edit.  If the number of edits crosses
                      a threshold, this switches on a hashtable lookup for
                      ElementChange implementations since access of these
                      needs to be relatively quick.                    
                    <param>
                        anEdit a document edit record                        
                    </param>
                    <return>
                        true if the edit was added                        
                    </return>
                </javadoc>
                <method name="addEdit" type="boolean" line="2199">
                    <params>
                        <param name="anEdit" type="UndoableEdit"/>
                    </params>
                    <scope line="2200">
                        <declaration name="n" type="int" line="2202"/>
                        <scope line="2203">
                            <declaration name="o" type="Object" line="2204"/>
                            <scope line="2205">
                                <declaration name="ec" type="DocumentEvent.ElementChange" line="2206"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="2211">
                        <declaration name="ec" type="DocumentEvent.ElementChange" line="2212"/>
                    </scope>
                </method>
                <javadoc line="2217">
                    Redoes a change.                    
                    <exception>
                        CannotRedoException if the change cannot be redone                        
                    </exception>
                </javadoc>
                <method name="redo" type="void" line="2221">
                    <scope line="2223">
                        <declaration name="ev" type="UndoRedoDocumentEvent" line="2225"/>
                        <scope line="2226"/>
                        <scope line="2229"/>
                        <scope line="2232"/>
                    </scope>
                    <scope line="2236"/>
                </method>
                <javadoc line="2240">
                    Undoes a change.                    
                    <exception>
                        CannotUndoException if the change cannot be undone                        
                    </exception>
                </javadoc>
                <method name="undo" type="void" line="2244">
                    <scope line="2246">
                        <declaration name="ev" type="UndoRedoDocumentEvent" line="2248"/>
                        <scope line="2249"/>
                        <scope line="2252"/>
                        <scope line="2255"/>
                    </scope>
                    <scope line="2259"/>
                </method>
                <javadoc line="2263">
                    DefaultDocument events are significant.  If you wish to aggregate
                      DefaultDocumentEvents to present them as a single edit to the user
                      place them into a CompoundEdit.                    
                    <return>
                        whether the event is significant for edit undo purposes                        
                    </return>
                </javadoc>
                <method name="isSignificant" type="boolean" line="2269"/>
                <javadoc line="2272">
                    Provides a localized, human readable description of this edit
                      suitable for use in, say, a change log.                    
                    <return>
                        the description                        
                    </return>
                </javadoc>
                <method name="getPresentationName" type="String" line="2277">
                    <declaration name="type" type="DocumentEvent.EventType" line="2278"/>
                </method>
                <javadoc line="2283">
                    Provides a localized, human readable description of the undoable
                      form of this edit, e.g. for use as an Undo menu item. Typically
                      derived from getDescription();                    
                    <return>
                        the description                        
                    </return>
                </javadoc>
                <method name="getUndoPresentationName" type="String" line="2289"/>
                <javadoc line="2292">
                    Provides a localized, human readable description of the redoable
                      form of this edit, e.g. for use as a Redo menu item. Typically
                      derived from getPresentationName();                    
                    <return>
                        the description                        
                    </return>
                </javadoc>
                <method name="getRedoPresentationName" type="String" line="2298"/>
                <javadoc line="2301">
                    Returns the type of event.                    
                    <return>
                        the event type as a DocumentEvent.EventType                        
                    </return>
                    <see>
                        DocumentEvent#getType                        
                    </see>
                </javadoc>
                <method name="getType" type="DocumentEvent.EventType" line="2306"/>
                <javadoc line="2309">
                    Returns the offset within the document of the start of the change.                    
                    <return>
                        the offset &gt;= 0                        
                    </return>
                    <see>
                        DocumentEvent#getOffset                        
                    </see>
                </javadoc>
                <method name="getOffset" type="int" line="2314"/>
                <javadoc line="2317">
                    Returns the length of the change.                    
                    <return>
                        the length &gt;= 0                        
                    </return>
                    <see>
                        DocumentEvent#getLength                        
                    </see>
                </javadoc>
                <method name="getLength" type="int" line="2322"/>
                <javadoc line="2325">
                    Gets the document that sourced the change event.                    
                    <return>
                        the document                        
                    </return>
                    <see>
                        DocumentEvent#getDocument                        
                    </see>
                </javadoc>
                <method name="getDocument" type="Document" line="2330"/>
                <javadoc line="2333">
                    Gets the changes for an element.                    
                    <param>
                        elem the element                        
                    </param>
                    <return>
                        the changes                        
                    </return>
                </javadoc>
                <method name="getChange" type="DocumentEvent.ElementChange" line="2338">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                    <scope line="2339"/>
                    <declaration name="n" type="int" line="2342"/>
                    <scope line="2343">
                        <declaration name="o" type="Object" line="2344"/>
                        <scope line="2345">
                            <declaration name="c" type="DocumentEvent.ElementChange" line="2346"/>
                            <scope line="2347"/>
                        </scope>
                    </scope>
                </method>
                <declaration name="offset" type="int" line="2354"/>
                <declaration name="length" type="int" line="2355"/>
                <declaration name="changeLookup" type="Hashtable&amp;lt;Element,ElementChange&amp;gt;" line="2356"/>
                <declaration name="type" type="DocumentEvent.EventType" line="2357"/>
            </class>
            <class name="UndoRedoDocumentEvent" line="2359">
                <implements interface="DocumentEvent"/>
                <javadoc line="2359">
                    This event used when firing document changes while Undo/Redo
                      operations. It just wraps DefaultDocumentEvent and delegates
                      all calls to it except getType() which depends on operation
                      (Undo or Redo).                    
                </javadoc>
                <declaration name="src" type="DefaultDocumentEvent" line="2366"/>
                <declaration name="isUndo" type="boolean" line="2367"/>
                <declaration name="type" type="EventType" line="2368"/>
                <method name="UndoRedoDocumentEvent" type="constructor" line="2369">
                    <params>
                        <param name="src" type="DefaultDocumentEvent"/>
                        <param name="isUndo" type="boolean"/>
                    </params>
                    <scope line="2372">
                        <scope line="2373"/>
                        <scope line="2376"/>
                        <scope line="2379"/>
                    </scope>
                    <scope line="2383"/>
                </method>
                <method name="getSource" type="DefaultDocumentEvent" line="2387"/>
                <method name="getOffset" type="int" line="2390"/>
                <method name="getLength" type="int" line="2393"/>
                <method name="getDocument" type="Document" line="2396"/>
                <method name="getType" type="DocumentEvent.EventType" line="2399"/>
                <method name="getChange" type="DocumentEvent.ElementChange" line="2402">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
            </class>
            <class name="ElementEdit" line="2406">
                <extends class="AbstractUndoableEdit"/>
                <implements interface="DocumentEvent.ElementChange"/>
                <javadoc line="2406">
                    An implementation of ElementChange that can be added to the document
                      event.                    
                </javadoc>
                <javadoc line="2411">
                    Constructs an edit record.  This does not modify the element
                      so it can safely be used to &lt;em&gt;catch up&lt;/em&gt; a view to the
                      current model state for views that just attached to a model.                    
                    <param>
                        e the element                        
                    </param>
                    <param>
                        index the index into the model &gt;= 0                        
                    </param>
                    <param>
                        removed a set of elements that were removed                        
                    </param>
                    <param>
                        added a set of elements that were added                        
                    </param>
                </javadoc>
                <method name="ElementEdit" type="constructor" line="2420">
                    <params>
                        <param name="e" type="Element"/>
                        <param name="index" type="int"/>
                        <param name="removed" type="Element[]"/>
                        <param name="added" type="Element[]"/>
                    </params>
                </method>
                <javadoc line="2427">
                    Returns the underlying element.                    
                    <return>
                        the element                        
                    </return>
                </javadoc>
                <method name="getElement" type="Element" line="2431"/>
                <javadoc line="2434">
                    Returns the index into the list of elements.                    
                    <return>
                        the index &gt;= 0                        
                    </return>
                </javadoc>
                <method name="getIndex" type="int" line="2438"/>
                <javadoc line="2441">
                    Gets a list of children that were removed.                    
                    <return>
                        the list                        
                    </return>
                </javadoc>
                <method name="getChildrenRemoved" type="Element[]" line="2445"/>
                <javadoc line="2448">
                    Gets a list of children that were added.                    
                    <return>
                        the list                        
                    </return>
                </javadoc>
                <method name="getChildrenAdded" type="Element[]" line="2452"/>
                <javadoc line="2455">
                    Redoes a change.                    
                    <exception>
                        CannotRedoException if the change cannot be redone                        
                    </exception>
                </javadoc>
                <method name="redo" type="void" line="2459">
                    <declaration name="tmp" type="Element[]" line="2461"/>
                </method>
                <javadoc line="2466">
                    Undoes a change.                    
                    <exception>
                        CannotUndoException if the change cannot be undone                        
                    </exception>
                </javadoc>
                <method name="undo" type="void" line="2470">
                    <declaration name="tmp" type="Element[]" line="2473"/>
                </method>
                <declaration name="e" type="Element" line="2477"/>
                <declaration name="index" type="int" line="2478"/>
                <declaration name="removed" type="Element[]" line="2479"/>
                <declaration name="added" type="Element[]" line="2480"/>
            </class>
            <class name="DefaultFilterBypass" line="2482">
                <extends class="DocumentFilter.FilterBypass"/>
                <method name="getDocument" type="Document" line="2483"/>
                <method name="remove" type="void" line="2486">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                </method>
                <method name="insertString" type="void" line="2489">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="string" type="String"/>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                </method>
                <method name="replace" type="void" line="2492">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="text" type="String"/>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                </method>
            </class>
        </class>
    </source>