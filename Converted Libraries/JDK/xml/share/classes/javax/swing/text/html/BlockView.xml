<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.util.Enumeration"/>
        <import package="java.awt"/>
        <import package="javax.swing.SizeRequirements"/>
        <import package="javax.swing.border"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text"/>
        <class name="BlockView" line="8">
            <extends class="BoxView"/>
            <javadoc line="8">
                A view implementation to display a block (as a box)
                  with CSS specifications.                
                <author>
                    Timothy Prinzing                    
                </author>
            </javadoc>
            <javadoc line="14">
                Creates a new view that represents an
                  html box.  This can be used for a number
                  of elements.                
                <param>
                    elem the element to create a view for                    
                </param>
                <param>
                    axis either View.X_AXIS or View.Y_AXIS                    
                </param>
            </javadoc>
            <method name="BlockView" type="constructor" line="21">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="24">
                Establishes the parent view for this view.  This is
                  guaranteed to be called before any other methods if the
                  parent view is functioning properly.
                  &lt;p&gt;
                  This is implemented
                  to forward to the superclass as well as call the{@link #setPropertiesFromAttributes()}method to set the paragraph properties from the css
                  attributes.  The call is made at this time to ensure
                  the ability to resolve upward through the parents
                  view attributes.                
                <param>
                    parent the new parent, or null if the view is
                      being removed from a parent it was previously added
                      to                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="38">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <scope line="40"/>
            </method>
            <javadoc line="44">
                Calculate the requirements of the block along the major
                  axis (i.e. the axis along with it tiles).  This is implemented
                  to provide the superclass behavior and then adjust it if the
                  CSS width or height attribute is specified and applicable to
                  the axis.                
            </javadoc>
            <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="51">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <scope line="52"/>
                <scope line="55"/>
                <scope line="58">
                    <declaration name="parentR" type="SizeRequirements" line="59"/>
                    <declaration name="margin" type="int" line="60"/>
                </scope>
            </method>
            <javadoc line="68">
                Calculate the requirements of the block along the minor
                  axis (i.e. the axis orthoginal to the axis along with it tiles).
                  This is implemented
                  to provide the superclass behavior and then adjust it if the
                  CSS width or height attribute is specified and applicable to
                  the axis.                
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="76">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <scope line="77"/>
                <scope line="80"/>
                <scope line="83">
                    <declaration name="parentR" type="SizeRequirements" line="84"/>
                    <declaration name="margin" type="int" line="85"/>
                </scope>
                <scope line="91">
                    <declaration name="o" type="Object" line="92"/>
                    <scope line="93">
                        <declaration name="align" type="String" line="94"/>
                        <scope line="95"/>
                        <scope line="98"/>
                        <scope line="101"/>
                    </scope>
                </scope>
            </method>
            <method name="isPercentage" type="boolean" line="108">
                <params>
                    <param name="axis" type="int"/>
                    <param name="a" type="AttributeSet"/>
                </params>
                <scope line="109">
                    <scope line="110"/>
                </scope>
                <scope line="114">
                    <scope line="115"/>
                </scope>
            </method>
            <javadoc line="121">
                Adjust the given requirements to the CSS width or height if
                  it is specified along the applicable axis.  Return true if the
                  size is exactly specified, false if the span is not specified
                  in an attribute or the size specified is a percentage.                
            </javadoc>
            <method name="spanSetFromAttributes" type="boolean" line="127">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                    <param name="cssWidth" type="CSS.LengthValue"/>
                    <param name="cssHeight" type="CSS.LengthValue"/>
                </params>
                <scope line="128">
                    <scope line="129"/>
                </scope>
                <scope line="134">
                    <scope line="135"/>
                </scope>
            </method>
            <javadoc line="142">
                Performs layout for the minor axis of the box (i.e. the
                  axis orthoginal to the axis that it represents). The results
                  of the layout (the offset and span for each children) are
                  placed in the given arrays which represent the allocations to
                  the children along the minor axis.                
                <param>
                    targetSpan the total span given to the view, which
                      whould be used to layout the childre.                    
                </param>
                <param>
                    axis the axis being layed out                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views; this is a return value and is
                      filled in by the implementation of this method                    
                </param>
                <param>
                    spans the span of each child view; this is a return
                      value and is filled in by the implementation of this method                    
                </param>
            </javadoc>
            <method name="layoutMinorAxis" type="void" line="157">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <declaration name="n" type="int" line="158"/>
                <declaration name="key" type="Object" line="159"/>
                <scope line="160">
                    <declaration name="v" type="View" line="161"/>
                    <declaration name="min" type="int" line="162"/>
                    <declaration name="max" type="int" line="163"/>
                    <declaration name="a" type="AttributeSet" line="164"/>
                    <declaration name="lv" type="CSS.LengthValue" line="165"/>
                    <scope line="166"/>
                    <scope line="170"/>
                    <scope line="173">
                        <declaration name="align" type="float" line="174"/>
                    </scope>
                    <scope line="178"/>
                </scope>
            </method>
            <javadoc line="184">
                Renders using the given rendering surface and area on that
                  surface.  This is implemented to delegate to the css box
                  painter to paint the border and background prior to the
                  interior.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    allocation the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="193">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="allocation" type="Shape"/>
                </params>
                <declaration name="a" type="Rectangle" line="194"/>
            </method>
            <javadoc line="198">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="203">
                <scope line="204">
                    <declaration name="sheet" type="StyleSheet" line="205"/>
                </scope>
            </method>
            <javadoc line="210">
                Gets the resize weight.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the weight                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis                    
                </exception>
            </javadoc>
            <method name="getResizeWeight" type="int" line="216">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="226">
                Gets the alignment.                
                <param>
                    axis may be either X_AXIS or Y_AXIS                    
                </param>
                <return>
                    the alignment                    
                </return>
            </javadoc>
            <method name="getAlignment" type="float" line="231">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="236"/>
                <declaration name="span" type="float" line="239"/>
                <declaration name="v" type="View" line="240"/>
                <declaration name="above" type="float" line="241"/>
                <declaration name="a" type="float" line="242"/>
            </method>
            <method name="changedUpdate" type="void" line="248">
                <params>
                    <param name="changes" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="pos" type="int" line="250"/>
                <scope line="251"/>
            </method>
            <javadoc line="255">
                Determines the preferred span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="266">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="269">
                Determines the minimum span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="280">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="283">
                Determines the maximum span for this view along an
                  axis.                
                <param>
                    axis may be either <code>View.X_AXIS</code>
                      or <code>View.Y_AXIS</code>                    
                </param>
                <return>
                    the span the view would like to be rendered into >= 0;
                      typically the view is told to render into the span
                      that is returned, although there is no guarantee;
                      the parent may choose to resize or break the view                    
                </return>
                <exception>
                    IllegalArgumentException for an invalid axis type                    
                </exception>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="294">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="297">
                Update any cached values that come from attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="300">
                <declaration name="sheet" type="StyleSheet" line="301"/>
                <scope line="304"/>
            </method>
            <method name="getStyleSheet" type="StyleSheet" line="310">
                <declaration name="doc" type="HTMLDocument" line="311"/>
            </method>
            <javadoc line="314">
                Constrains &lt;code&gt;want&lt;/code&gt; to fit in the minimum size specified
                  by &lt;code&gt;min&lt;/code&gt;.                
            </javadoc>
            <method name="constrainSize" type="void" line="318">
                <params>
                    <param name="axis" type="int"/>
                    <param name="want" type="SizeRequirements"/>
                    <param name="min" type="SizeRequirements"/>
                </params>
                <scope line="319"/>
            </method>
            <declaration name="attr" type="AttributeSet" line="324"/>
            <declaration name="painter" type="StyleSheet.BoxPainter" line="325"/>
            <declaration name="cssWidth" type="CSS.LengthValue" line="326"/>
            <declaration name="cssHeight" type="CSS.LengthValue" line="327"/>
        </class>
    </source>