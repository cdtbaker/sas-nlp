<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="java.util.BitSet"/>
        <import package="java.util.Vector"/>
        <import package="java.io"/>
        <class name="TagStack" line="33">
            <implements interface="DTDConstants"/>
            <javadoc line="33">
                A stack of tags. Used while parsing an HTML document.
                  It, together with the ContentModelStates, defines the
                  complete state of the parser while reading a document.
                  When a start tag is encountered an element is pushed onto
                  the stack, when an end tag is enountered an element is popped
                  of the stack.                
                <see>
                    Parser                    
                </see>
                <see>
                    DTD                    
                </see>
                <see>
                    ContentModelState                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="tag" type="TagElement" line="48"/>
            <declaration name="elem" type="Element" line="49"/>
            <declaration name="state" type="ContentModelState" line="50"/>
            <declaration name="next" type="TagStack" line="51"/>
            <declaration name="inclusions" type="BitSet" line="52"/>
            <declaration name="exclusions" type="BitSet" line="53"/>
            <declaration name="net" type="boolean" line="54"/>
            <declaration name="pre" type="boolean" line="55"/>
            <javadoc line="57">
                Construct a stack element.                
            </javadoc>
            <method name="TagStack" type="constructor" line="60">
                <params>
                    <param name="tag" type="TagElement"/>
                    <param name="next" type="TagStack"/>
                </params>
                <declaration name="elem" type="Element" line="65"/>
                <scope line="66"/>
                <scope line="70"/>
                <scope line="75"/>
                <scope line="79">
                    <scope line="80"/>
                    <scope line="83"/>
                </scope>
                <scope line="87">
                    <scope line="88"/>
                    <scope line="91"/>
                </scope>
            </method>
            <javadoc line="97">
                Return the element that must come next in the
                  input stream.                
            </javadoc>
            <method name="first" type="Element" line="101"/>
            <javadoc line="105">
                Return the ContentModel that must be satisfied by
                  what comes next in the input stream.                
            </javadoc>
            <method name="contentModel" type="ContentModel" line="109">
                <scope line="110"/>
                <scope line="112"/>
            </method>
            <javadoc line="117">
                Return true if the element that is contained at
                  the index specified by the parameter is part of
                  the exclusions specified in the DTD for the element
                  currently on the TagStack.                
            </javadoc>
            <method name="excluded" type="boolean" line="123">
                <params>
                    <param name="elemIndex" type="int"/>
                </params>
            </method>
            <javadoc line="128">
                Advance the state by reducing the given element.
                  Returns false if the element is not legal and the
                  state is not advanced.                
            </javadoc>
            <method name="advance" type="boolean" line="133">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="134"/>
                <scope line="137">
                    <declaration name="newState" type="ContentModelState" line="138"/>
                    <scope line="139"/>
                </scope>
                <scope line="143"/>
            </method>
            <javadoc line="149">
                Return true if the current state can be terminated.                
            </javadoc>
            <method name="terminate" type="boolean" line="152"/>
            <javadoc line="156">
                Convert to a string.                
            </javadoc>
            <method name="toString" type="String" line="159"/>
        </class>
        <class name="NPrintWriter" line="166">
            <extends class="PrintWriter"/>
            <declaration name="numLines" type="int" line="168"/>
            <declaration name="numPrinted" type="int" line="169"/>
            <method name="NPrintWriter" type="constructor" line="171">
                <params>
                    <param name="numberOfLines" type="int"/>
                </params>
            </method>
            <method name="println" type="void" line="176">
                <params>
                    <param name="array" type="char[]"/>
                </params>
                <scope line="177"/>
                <declaration name="partialArray" type="char[]" line="181"/>
                <scope line="183">
                    <scope line="184"/>
                    <scope line="188"/>
                </scope>
                <scope line="193"/>
                <scope line="197"/>
            </method>
        </class>
    </source>