<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.io.Serializable"/>
        <import package="java.lang.reflect"/>
        <import package="java.text.ParseException"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <class name="DefaultFormatter" line="33">
            <extends class="JFormattedTextField.AbstractFormatter"/>
            <comment line="396">
                Returns true if the operation described by &lt;code&gt;rh&lt;code&gt; will
                 result in a legal edit.  This may set the &lt;code&gt;value&lt;code&gt;
                 field of &lt;code&gt;rh&lt;code&gt;.                
            </comment>
            <implements interface="Cloneable"/>
            <implements interface="Serializable"/>
            <javadoc line="33">
                &lt;code&gt;DefaultFormatter&lt;/code&gt; formats aribtrary objects. Formatting is done
                  by invoking the &lt;code&gt;toString&lt;/code&gt; method. In order to convert the
                  value back to a String, your class must provide a constructor that
                  takes a String argument. If no single argument constructor that takes a
                  String is found, the returned value will be the String passed into
                  &lt;code&gt;stringToValue&lt;/code&gt;.
                  &lt;p&gt;
                  Instances of &lt;code&gt;DefaultFormatter&lt;/code&gt; can not be used in multiple
                  instances of &lt;code&gt;JFormattedTextField&lt;/code&gt;. To obtain a copy of
                  an already configured &lt;code&gt;DefaultFormatter&lt;/code&gt;, use the
                  &lt;code&gt;clone&lt;/code&gt; method.
                  &lt;p&gt;
                  &lt;strong&gt;Warning:&lt;/strong&gt;
                  Serialized objects of this class will not be compatible with
                  future Swing releases. The current serialization support is
                  appropriate for short term storage or RMI between applications running
                  the same version of Swing.  As of 1.4, support for long term storage
                  of all JavaBeans&lt;sup&gt;&lt;font size=&quot;-2&quot;&gt;TM&lt;/font&gt;&lt;/sup&gt;
                  has been added to the &lt;code&gt;java.beans&lt;/code&gt; package.
                  Please see {@link java.beans.XMLEncoder}.                
                <see>
                    javax.swing.JFormattedTextField.AbstractFormatter                    
                </see>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <declaration name="allowsInvalid" type="boolean" line="61"/>
            <javadoc line="61">
                Indicates if the value being edited must match the mask.                
            </javadoc>
            <declaration name="overwriteMode" type="boolean" line="64"/>
            <javadoc line="64">
                If true, editing mode is in overwrite (or strikethough).                
            </javadoc>
            <declaration name="commitOnEdit" type="boolean" line="67"/>
            <javadoc line="67">
                If true, any time a valid edit happens commitEdit is invoked.                
            </javadoc>
            <declaration name="valueClass" type="Class&lt;?&gt;" line="70"/>
            <javadoc line="70">
                Class used to create new instances.                
            </javadoc>
            <declaration name="navigationFilter" type="NavigationFilter" line="73"/>
            <javadoc line="73">
                NavigationFilter that forwards calls back to DefaultFormatter.                
            </javadoc>
            <declaration name="documentFilter" type="DocumentFilter" line="76"/>
            <javadoc line="76">
                DocumentFilter that forwards calls back to DefaultFormatter.                
            </javadoc>
            <declaration name="replaceHolder" type="ReplaceHolder" line="79"/>
            <javadoc line="79">
                Used during replace to track the region to replace.                
            </javadoc>
            <javadoc line="83">
                Creates a DefaultFormatter.                
            </javadoc>
            <method name="DefaultFormatter" type="constructor" line="86"/>
            <javadoc line="91">
                Installs the &lt;code&gt;DefaultFormatter&lt;/code&gt; onto a particular
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  This will invoke &lt;code&gt;valueToString&lt;/code&gt; to convert the
                  current value from the &lt;code&gt;JFormattedTextField&lt;/code&gt; to
                  a String. This will then install the &lt;code&gt;Action&lt;/code&gt;s from
                  &lt;code&gt;getActions&lt;/code&gt;, the &lt;code&gt;DocumentFilter&lt;/code&gt;
                  returned from &lt;code&gt;getDocumentFilter&lt;/code&gt; and the
                  &lt;code&gt;NavigationFilter&lt;/code&gt; returned from
                  &lt;code&gt;getNavigationFilter&lt;/code&gt; onto the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  Subclasses will typically only need to override this if they
                  wish to install additional listeners on the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;p&gt;
                  If there is a &lt;code&gt;ParseException&lt;/code&gt; in converting the
                  current value to a String, this will set the text to an empty
                  String, and mark the &lt;code&gt;JFormattedTextField&lt;/code&gt; as being
                  in an invalid state.
                  &lt;p&gt;
                  While this is a public method, this is typically only useful
                  for subclassers of &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; will invoke this method at
                  the appropriate times when the value changes, or its internal
                  state changes.                
                <param>
                    ftf JFormattedTextField to format for, may be null indicating
                      uninstall from current JFormattedTextField.                    
                </param>
            </javadoc>
            <method name="install" type="void" line="121">
                <params>
                    <param name="ftf" type="JFormattedTextField"/>
                </params>
            </method>
            <javadoc line="126">
                Sets when edits are published back to the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;. If true, &lt;code&gt;commitEdit&lt;/code&gt;
                  is invoked after every valid edit (any time the text is edited). On
                  the other hand, if this is false than the &lt;code&gt;DefaultFormatter&lt;/code&gt;
                  does not publish edits back to the &lt;code&gt;JFormattedTextField&lt;/code&gt;.
                  As such, the only time the value of the &lt;code&gt;JFormattedTextField&lt;/code&gt;
                  will change is when &lt;code&gt;commitEdit&lt;/code&gt; is invoked on
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;, typically when enter is pressed
                  or focus leaves the &lt;code&gt;JFormattedTextField&lt;/code&gt;.                
                <param>
                    commit Used to indicate when edits are commited back to the
                      JTextComponent                    
                </param>
            </javadoc>
            <method name="setCommitsOnValidEdit" type="void" line="140">
                <params>
                    <param name="commit" type="boolean"/>
                </params>
            </method>
            <javadoc line="144">
                Returns when edits are published back to the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt;.                
                <return>
                    true if edits are commited after evey valid edit                    
                </return>
            </javadoc>
            <method name="getCommitsOnValidEdit" type="boolean" line="150"/>
            <javadoc line="154">
                Configures the behavior when inserting characters. If
                  &lt;code&gt;overwriteMode&lt;/code&gt; is true (the default), new characters
                  overwrite existing characters in the model.                
                <param>
                    overwriteMode Indicates if overwrite or overstrike mode is used                    
                </param>
            </javadoc>
            <method name="setOverwriteMode" type="void" line="161">
                <params>
                    <param name="overwriteMode" type="boolean"/>
                </params>
            </method>
            <javadoc line="165">
                Returns the behavior when inserting characters.                
                <return>
                    true if newly inserted characters overwrite existing characters                    
                </return>
            </javadoc>
            <method name="getOverwriteMode" type="boolean" line="170"/>
            <javadoc line="174">
                Sets whether or not the value being edited is allowed to be invalid
                  for a length of time (that is, &lt;code&gt;stringToValue&lt;/code&gt; throws
                  a &lt;code&gt;ParseException&lt;/code&gt;).
                  It is often convenient to allow the user to temporarily input an
                  invalid value.                
                <param>
                    allowsInvalid Used to indicate if the edited value must always
                      be valid                    
                </param>
            </javadoc>
            <method name="setAllowsInvalid" type="void" line="184">
                <params>
                    <param name="allowsInvalid" type="boolean"/>
                </params>
            </method>
            <javadoc line="188">
                Returns whether or not the value being edited is allowed to be invalid
                  for a length of time.                
                <return>
                    false if the edited value must always be valid                    
                </return>
            </javadoc>
            <method name="getAllowsInvalid" type="boolean" line="194"/>
            <javadoc line="198">
                Sets that class that is used to create new Objects. If the
                  passed in class does not have a single argument constructor that
                  takes a String, String values will be used.                
                <param>
                    valueClass Class used to construct return value from
                      stringToValue                    
                </param>
            </javadoc>
            <method name="setValueClass" type="void" line="206">
                <params>
                    <param name="valueClass" type="Class<?>"/>
                </params>
            </method>
            <javadoc line="210">
                Returns that class that is used to create new Objects.                
                <return>
                    Class used to constuct return value from stringToValue                    
                </return>
            </javadoc>
            <method name="getValueClass" type="Class<?>" line="215"/>
            <javadoc line="219">
                Converts the passed in String into an instance of
                  &lt;code&gt;getValueClass&lt;/code&gt; by way of the constructor that
                  takes a String argument. If &lt;code&gt;getValueClass&lt;/code&gt;
                  returns null, the Class of the current value in the
                  &lt;code&gt;JFormattedTextField&lt;/code&gt; will be used. If this is null, a
                  String will be returned. If the constructor thows an exception, a
                  &lt;code&gt;ParseException&lt;/code&gt; will be thrown. If there is no single
                  argument String constructor, &lt;code&gt;string&lt;/code&gt; will be returned.                
                <throws>
                    ParseException if there is an error in the conversion                    
                </throws>
                <param>
                    string String to convert                    
                </param>
                <return>
                    Object representation of text                    
                </return>
            </javadoc>
            <method name="stringToValue" type="Object" line="233">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="vc" type="Class&lt;?&gt;" line="234"/>
                <declaration name="ftf" type="JFormattedTextField" line="235"/>
                <scope line="237">
                    <declaration name="value" type="Object" line="238"/>
                    <scope line="240"/>
                </scope>
                <scope line="244">
                    <declaration name="cons" type="Constructor" line="245"/>
                    <scope line="247"/>
                    <scope line="250"/>
                    <scope line="254">
                        <scope line="255"/>
                        <scope line="257"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="265">
                Converts the passed in Object into a String by way of the
                  &lt;code&gt;toString&lt;/code&gt; method.                
                <throws>
                    ParseException if there is an error in the conversion                    
                </throws>
                <param>
                    value Value to convert                    
                </param>
                <return>
                    String representation of value                    
                </return>
            </javadoc>
            <method name="valueToString" type="String" line="273">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="274"/>
            </method>
            <javadoc line="280">
                Returns the &lt;code&gt;DocumentFilter&lt;/code&gt; used to restrict the characters
                  that can be input into the &lt;code&gt;JFormattedTextField&lt;/code&gt;.                
                <return>
                    DocumentFilter to restrict edits                    
                </return>
            </javadoc>
            <method name="getDocumentFilter" type="DocumentFilter" line="286">
                <scope line="287"/>
            </method>
            <javadoc line="293">
                Returns the &lt;code&gt;NavigationFilter&lt;/code&gt; used to restrict where the
                  cursor can be placed.                
                <return>
                    NavigationFilter to restrict navigation                    
                </return>
            </javadoc>
            <method name="getNavigationFilter" type="NavigationFilter" line="299">
                <scope line="300"/>
            </method>
            <javadoc line="306">
                Creates a copy of the DefaultFormatter.                
                <return>
                    copy of the DefaultFormatter                    
                </return>
            </javadoc>
            <method name="clone" type="Object" line="311">
                <declaration name="formatter" type="DefaultFormatter" line="312"/>
            </method>
            <javadoc line="321">
                Positions the cursor at the initial location.                
            </javadoc>
            <method name="positionCursorAtInitialLocation" type="void" line="324">
                <declaration name="ftf" type="JFormattedTextField" line="325"/>
                <scope line="326"/>
            </method>
            <javadoc line="331">
                Returns the initial location to position the cursor at. This forwards
                  the call to &lt;code&gt;getNextNavigatableChar&lt;/code&gt;.                
            </javadoc>
            <method name="getInitialVisualPosition" type="int" line="335"/>
            <javadoc line="339">
                Subclasses should override this if they want cursor navigation
                  to skip certain characters. A return value of false indicates
                  the character at &lt;code&gt;offset&lt;/code&gt; should be skipped when
                  navigating throught the field.                
            </javadoc>
            <method name="isNavigatable" type="boolean" line="345">
                <params>
                    <param name="offset" type="int"/>
                </params>
            </method>
            <javadoc line="349">
                Returns true if the text in &lt;code&gt;text&lt;/code&gt; can be inserted.  This
                  does not mean the text will ultimately be inserted, it is used if
                  text can trivially reject certain characters.                
            </javadoc>
            <method name="isLegalInsertText" type="boolean" line="354">
                <params>
                    <param name="text" type="String"/>
                </params>
            </method>
            <javadoc line="358">
                Returns the next editable character starting at offset incrementing
                  the offset by &lt;code&gt;direction&lt;/code&gt;.                
            </javadoc>
            <method name="getNextNavigatableChar" type="int" line="362">
                <params>
                    <param name="offset" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <declaration name="max" type="int" line="363"/>
                <scope line="365">
                    <scope line="366"/>
                </scope>
            </method>
            <javadoc line="374">
                A convenience methods to return the result of deleting
                  &lt;code&gt;deleteLength&lt;/code&gt; characters at &lt;code&gt;offset&lt;/code&gt;
                  and inserting &lt;code&gt;replaceString&lt;/code&gt; at &lt;code&gt;offset&lt;/code&gt;
                  in the current text field.                
            </javadoc>
            <method name="getReplaceString" type="String" line="381">
                <params>
                    <param name="offset" type="int"/>
                    <param name="deleteLength" type="int"/>
                    <param name="replaceString" type="String"/>
                </params>
                <declaration name="string" type="String" line="382"/>
                <declaration name="result" type="String" line="383"/>
                <scope line="386"/>
                <scope line="389"/>
            </method>
            <method name="isValidEdit" type="boolean" line="400">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
                <scope line="401">
                    <declaration name="newString" type="String" line="402"/>
                    <scope line="404"/>
                    <scope line="408"/>
                </scope>
            </method>
            <javadoc line="415">
                Invokes &lt;code&gt;commitEdit&lt;/code&gt; on the JFormattedTextField.                
            </javadoc>
            <method name="commitEdit" type="void" line="418">
                <declaration name="ftf" type="JFormattedTextField" line="419"/>
                <scope line="421"/>
            </method>
            <javadoc line="426">
                Pushes the value to the JFormattedTextField if the current value
                  is valid and invokes &lt;code&gt;setEditValid&lt;/code&gt; based on the
                  validity of the value.                
            </javadoc>
            <method name="updateValue" type="void" line="431"/>
            <javadoc line="435">
                Pushes the &lt;code&gt;value&lt;/code&gt; to the editor if we are to
                  commit on edits. If &lt;code&gt;value&lt;/code&gt; is null, the current value
                  will be obtained from the text component.                
            </javadoc>
            <method name="updateValue" type="void" line="440">
                <params>
                    <param name="value" type="Object"/>
                </params>
                <scope line="441">
                    <scope line="442">
                        <declaration name="string" type="String" line="443"/>
                    </scope>
                    <scope line="448"/>
                </scope>
                <scope line="452"/>
            </method>
            <javadoc line="457">
                Returns the next cursor position from offset by incrementing
                  &lt;code&gt;direction&lt;/code&gt;. This uses
                  &lt;code&gt;getNextNavigatableChar&lt;/code&gt;
                  as well as constraining the location to the max position.                
            </javadoc>
            <method name="getNextCursorPosition" type="int" line="463">
                <params>
                    <param name="offset" type="int"/>
                    <param name="direction" type="int"/>
                </params>
                <comment line="470">
                    Case where hit backspace and only characters before
                     offset are fixed.                    
                </comment>
                <comment line="478">
                    Don&apos;t go beyond last editable character.                    
                </comment>
                <declaration name="newOffset" type="int" line="464"/>
                <declaration name="max" type="int" line="465"/>
                <scope line="467">
                    <scope line="468">
                        <scope line="472"/>
                    </scope>
                    <scope line="476">
                        <scope line="479"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="487">
                Resets the cursor by using getNextCursorPosition.                
            </javadoc>
            <method name="repositionCursor" type="void" line="490">
                <params>
                    <param name="offset" type="int"/>
                    <param name="direction" type="int"/>
                </params>
            </method>
            <javadoc line="496">
                Finds the next navigatable character.                
            </javadoc>
            <method name="getNextVisualPositionFrom" type="int" line="502">
                <params>
                    <param name="text" type="JTextComponent"/>
                    <param name="pos" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                    <param name="direction" type="int"/>
                    <param name="biasRet" type="Position.Bias[]"/>
                </params>
                <comment line="526">
                    Pending: should not assume forward!                    
                </comment>
                <declaration name="value" type="int" line="503"/>
                <scope line="506"/>
                <scope line="510">
                    <declaration name="last" type="int" line="511"/>
                    <scope line="513"/>
                    <declaration name="max" type="int" line="518"/>
                    <scope line="519">
                        <scope line="520"/>
                        <scope line="524"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="534">
                Returns true if the edit described by &lt;code&gt;rh&lt;/code&gt; will result
                  in a legal value.                
            </javadoc>
            <method name="canReplace" type="boolean" line="538">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
            </method>
            <javadoc line="542">
                DocumentFilter method, funnels into &lt;code&gt;replace&lt;/code&gt;.                
            </javadoc>
            <method name="replace" type="void" line="547">
                <params>
                    <param name="fb" type="DocumentFilter.FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="text" type="String"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <declaration name="rh" type="ReplaceHolder" line="548"/>
            </method>
            <javadoc line="553">
                If the edit described by &lt;code&gt;rh&lt;/code&gt; is legal, this will
                  return true, commit the edit (if necessary) and update the cursor
                  position.  This forwards to &lt;code&gt;canReplace&lt;/code&gt; and
                  &lt;code&gt;isLegalInsertText&lt;/code&gt; as necessary to determine if
                  the edit is in fact legal.
                  &lt;p&gt;
                  All of the DocumentFilter methods funnel into here, you should
                  generally only have to override this.                
            </javadoc>
            <method name="replace" type="boolean" line="563">
                <params>
                    <param name="rh" type="ReplaceHolder"/>
                </params>
                <declaration name="valid" type="boolean" line="564"/>
                <declaration name="direction" type="int" line="565"/>
                <scope line="569"/>
                <scope line="575"/>
                <scope line="581"/>
                <scope line="584">
                    <declaration name="cursor" type="int" line="585"/>
                    <scope line="588">
                        <scope line="590"/>
                    </scope>
                </scope>
                <scope line="598"/>
            </method>
            <javadoc line="604">
                NavigationFilter method, subclasses that wish finer control should
                  override this.                
            </javadoc>
            <method name="setDot" type="void" line="608">
                <params>
                    <param name="fb" type="NavigationFilter.FilterBypass"/>
                    <param name="dot" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="612">
                NavigationFilter method, subclasses that wish finer control should
                  override this.                
            </javadoc>
            <method name="moveDot" type="void" line="617">
                <params>
                    <param name="fb" type="NavigationFilter.FilterBypass"/>
                    <param name="dot" type="int"/>
                    <param name="bias" type="Position.Bias"/>
                </params>
            </method>
            <javadoc line="622">
                Returns the ReplaceHolder to track the replace of the specified
                  text.                
            </javadoc>
            <method name="getReplaceHolder" type="ReplaceHolder" line="628">
                <params>
                    <param name="fb" type="DocumentFilter.FilterBypass"/>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="text" type="String"/>
                    <param name="attrs" type="AttributeSet"/>
                </params>
                <scope line="629"/>
            </method>
            <class name="ReplaceHolder" line="637">
                <javadoc line="637">
                    ReplaceHolder is used to track where insert/remove/replace is
                      going to happen.                    
                </javadoc>
                <declaration name="fb" type="DocumentFilter.FilterBypass" line="642"/>
                <javadoc line="642">
                    The FilterBypass that was passed to the DocumentFilter method.                    
                </javadoc>
                <declaration name="offset" type="int" line="644"/>
                <javadoc line="644">
                    Offset where the remove/insert is going to occur.                    
                </javadoc>
                <declaration name="length" type="int" line="646"/>
                <javadoc line="646">
                    Length of text to remove.                    
                </javadoc>
                <declaration name="text" type="String" line="648"/>
                <javadoc line="648">
                    The text to insert, may be null.                    
                </javadoc>
                <declaration name="attrs" type="AttributeSet" line="650"/>
                <javadoc line="650">
                    AttributeSet to attach to text, may be null.                    
                </javadoc>
                <declaration name="value" type="Object" line="652"/>
                <javadoc line="652">
                    The resulting value, this may never be set.                    
                </javadoc>
                <declaration name="cursorPosition" type="int" line="654"/>
                <javadoc line="654">
                    Position the cursor should be adjusted from.  If this is -1
                      the cursor position will be adjusted based on the direction of
                      the replace (-1: offset, 1: offset + text.length()), otherwise
                      the cursor position is adusted from this position.                    
                </javadoc>
                <method name="reset" type="void" line="662">
                    <params>
                        <param name="fb" type="DocumentFilter.FilterBypass"/>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="text" type="String"/>
                        <param name="attrs" type="AttributeSet"/>
                    </params>
                </method>
            </class>
            <class name="DefaultNavigationFilter" line="674">
                <extends class="NavigationFilter"/>
                <implements interface="Serializable"/>
                <javadoc line="674">
                    NavigationFilter implementation that calls back to methods with
                      same name in DefaultFormatter.                    
                </javadoc>
                <method name="setDot" type="void" line="680">
                    <params>
                        <param name="fb" type="FilterBypass"/>
                        <param name="dot" type="int"/>
                        <param name="bias" type="Position.Bias"/>
                    </params>
                    <comment line="684">
                        bypass the filter                        
                    </comment>
                    <declaration name="tc" type="JTextComponent" line="681"/>
                    <scope line="682"/>
                    <scope line="685"/>
                </method>
                <method name="moveDot" type="void" line="690">
                    <params>
                        <param name="fb" type="FilterBypass"/>
                        <param name="dot" type="int"/>
                        <param name="bias" type="Position.Bias"/>
                    </params>
                    <comment line="694">
                        bypass the filter                        
                    </comment>
                    <declaration name="tc" type="JTextComponent" line="691"/>
                    <scope line="692"/>
                    <scope line="695"/>
                </method>
                <method name="getNextVisualPositionFrom" type="int" line="704">
                    <params>
                        <param name="text" type="JTextComponent"/>
                        <param name="pos" type="int"/>
                        <param name="bias" type="Position.Bias"/>
                        <param name="direction" type="int"/>
                        <param name="biasRet" type="Position.Bias[]"/>
                    </params>
                    <comment line="707">
                        forward the call to the UI directly                        
                    </comment>
                    <scope line="705"/>
                    <scope line="709"/>
                </method>
            </class>
            <class name="DefaultDocumentFilter" line="717">
                <extends class="DocumentFilter"/>
                <implements interface="Serializable"/>
                <javadoc line="717">
                    DocumentFilter implementation that calls back to the replace
                      method of DefaultFormatter.                    
                </javadoc>
                <method name="remove" type="void" line="724">
                    <params>
                        <param name="fb" type="FilterBypass"/>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                    </params>
                    <comment line="728">
                        bypass the filter                        
                    </comment>
                    <declaration name="tc" type="JTextComponent" line="725"/>
                    <scope line="726"/>
                    <scope line="729"/>
                </method>
                <method name="insertString" type="void" line="736">
                    <params>
                        <param name="fb" type="FilterBypass"/>
                        <param name="offset" type="int"/>
                        <param name="string" type="String"/>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <comment line="741">
                        bypass the filter                        
                    </comment>
                    <declaration name="tc" type="JTextComponent" line="737"/>
                    <scope line="739"/>
                    <scope line="742"/>
                </method>
                <method name="replace" type="void" line="749">
                    <params>
                        <param name="fb" type="FilterBypass"/>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="text" type="String"/>
                        <param name="attr" type="AttributeSet"/>
                    </params>
                    <comment line="754">
                        bypass the filter                        
                    </comment>
                    <declaration name="tc" type="JTextComponent" line="750"/>
                    <scope line="752"/>
                    <scope line="755"/>
                </method>
            </class>
        </class>
    </source>