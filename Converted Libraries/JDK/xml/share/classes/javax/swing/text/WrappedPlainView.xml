<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text">
        <import package="java.awt"/>
        <import package="java.lang.ref.SoftReference"/>
        <import package="javax.swing.event"/>
        <class name="WrappedPlainView" line="5">
            <extends class="BoxView"/>
            <implements interface="TabExpander"/>
            <javadoc line="5">
                View of plain text (text with only one font and color)
                  that does line-wrapping.  This view expects that its
                  associated element has child elements that represent
                  the lines it should be wrapping.  It is implemented
                  as a vertical box that contains logical line views.
                  The logical line views are nested classes that render
                  the logical line as multiple physical line if the logical
                  line is too wide to fit within the allocation.  The
                  line views draw upon the outer class for its state
                  to reduce their memory requirements.
                  &lt;p&gt;
                  The line views do all of their rendering through the
                  &lt;code&gt;drawLine&lt;/code&gt; method which in turn does all of
                  its rendering through the &lt;code&gt;drawSelectedText&lt;/code&gt;
                  and &lt;code&gt;drawUnselectedText&lt;/code&gt; methods.  This
                  enables subclasses to easily specialize the rendering
                  without concern for the layout aspects.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
            </javadoc>
            <javadoc line="27">
                Creates a new WrappedPlainView.  Lines will be wrapped
                  on character boundaries.                
                <param>
                    elem the element underlying the view                    
                </param>
            </javadoc>
            <method name="WrappedPlainView" type="constructor" line="32">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="35">
                Creates a new WrappedPlainView.  Lines can be wrapped on
                  either character or word boundaries depending upon the
                  setting of the wordWrap parameter.                
                <param>
                    elem the element underlying the view                    
                </param>
                <param>
                    wordWrap should lines be wrapped on word boundaries?                    
                </param>
            </javadoc>
            <method name="WrappedPlainView" type="constructor" line="42">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="wordWrap" type="boolean"/>
                </params>
            </method>
            <javadoc line="46">
                Returns the tab size set for the document, defaulting to 8.                
                <return>
                    the tab size                    
                </return>
            </javadoc>
            <method name="getTabSize" type="int" line="50">
                <declaration name="i" type="Integer" line="51"/>
                <declaration name="size" type="int" line="52"/>
            </method>
            <javadoc line="55">
                Renders a line of text, suppressing whitespace at the end
                  and expanding any tabs.  This is implemented to make calls
                  to the methods &lt;code&gt;drawUnselectedText&lt;/code&gt; and
                  &lt;code&gt;drawSelectedText&lt;/code&gt; so that the way selected and
                  unselected text are rendered can be customized.                
                <param>
                    p0 the starting document location to use >= 0                    
                </param>
                <param>
                    p1 the ending document location to use >= p1                    
                </param>
                <param>
                    g the graphics context                    
                </param>
                <param>
                    x the starting X position >= 0                    
                </param>
                <param>
                    y the starting Y position >= 0                    
                </param>
                <see>
                    #drawUnselectedText                    
                </see>
                <see>
                    #drawSelectedText                    
                </see>
            </javadoc>
            <method name="drawLine" type="void" line="69">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="lineMap" type="Element" line="70"/>
                <declaration name="line" type="Element" line="71"/>
                <declaration name="elem" type="Element" line="72"/>
                <scope line="73">
                    <scope line="74"/>
                    <scope line="77">
                        <declaration name="idx" type="int" line="78"/>
                        <declaration name="lastIdx" type="int" line="79"/>
                        <scope line="80">
                            <declaration name="start" type="int" line="82"/>
                            <declaration name="end" type="int" line="83"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="88"/>
            </method>
            <method name="drawText" type="int" line="92">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                </params>
                <declaration name="attr" type="AttributeSet" line="94"/>
                <scope line="95"/>
                <scope line="99">
                    <scope line="100"/>
                    <scope line="103"/>
                    <scope line="106">
                        <scope line="107"/>
                        <scope line="112"/>
                    </scope>
                    <scope line="117"/>
                    <scope line="121"/>
                </scope>
            </method>
            <javadoc line="127">
                Renders the given range in the model as normal unselected
                  text.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    x the starting X coordinate >= 0                    
                </param>
                <param>
                    y the starting Y coordinate >= 0                    
                </param>
                <param>
                    p0 the beginning position in the model >= 0                    
                </param>
                <param>
                    p1 the ending position in the model >= p0                    
                </param>
                <return>
                    the X location of the end of the range >= 0                    
                </return>
                <exception>
                    BadLocationException if the range is invalid                    
                </exception>
            </javadoc>
            <method name="drawUnselectedText" type="int" line="138">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="140"/>
                <declaration name="segment" type="Segment" line="141"/>
                <declaration name="ret" type="int" line="143"/>
            </method>
            <javadoc line="147">
                Renders the given range in the model as selected text.  This
                  is implemented to render the text in the color specified in
                  the hosting component.  It assumes the highlighter will render
                  the selected background.                
                <param>
                    g the graphics context                    
                </param>
                <param>
                    x the starting X coordinate >= 0                    
                </param>
                <param>
                    y the starting Y coordinate >= 0                    
                </param>
                <param>
                    p0 the beginning position in the model >= 0                    
                </param>
                <param>
                    p1 the ending position in the model >= p0                    
                </param>
                <return>
                    the location of the end of the range.                    
                </return>
                <exception>
                    BadLocationException if the range is invalid                    
                </exception>
            </javadoc>
            <method name="drawSelectedText" type="int" line="160">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="doc" type="Document" line="162"/>
                <declaration name="segment" type="Segment" line="163"/>
                <declaration name="ret" type="int" line="165"/>
            </method>
            <javadoc line="169">
                Gives access to a buffer that can be used to fetch
                  text from the associated document.                
                <return>
                    the buffer                    
                </return>
            </javadoc>
            <method name="getLineBuffer" type="Segment" line="174">
                <scope line="175"/>
            </method>
            <javadoc line="180">
                This is called by the nested wrapped line
                  views to determine the break location.  This can
                  be reimplemented to alter the breaking behavior.
                  It will either break at word or character boundaries
                  depending upon the break argument given at
                  construction.                
            </javadoc>
            <method name="calculateBreakPosition" type="int" line="188">
                <params>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <declaration name="p" type="int" line="189"/>
                <declaration name="segment" type="Segment" line="190"/>
                <declaration name="currentWidth" type="int" line="192"/>
                <scope line="193"/>
                <scope line="196"/>
            </method>
            <javadoc line="202">
                Loads all of the children to initialize the view.
                  This is called by the &lt;code&gt;setParent&lt;/code&gt; method.
                  Subclasses can reimplement this to initialize their
                  child views in a different manner.  The default
                  implementation creates a child view for each
                  child element.                
                <param>
                    f the view factory                    
                </param>
            </javadoc>
            <method name="loadChildren" type="void" line="211">
                <params>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="e" type="Element" line="212"/>
                <declaration name="n" type="int" line="213"/>
                <scope line="214">
                    <declaration name="added" type="View[]" line="215"/>
                    <scope line="216"/>
                </scope>
            </method>
            <javadoc line="222">
                Update the child views in response to a
                  document event.                
            </javadoc>
            <method name="updateChildren" type="void" line="226">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="elem" type="Element" line="227"/>
                <declaration name="ec" type="DocumentEvent.ElementChange" line="228"/>
                <scope line="229">
                    <declaration name="removedElems" type="Element[]" line="230"/>
                    <declaration name="addedElems" type="Element[]" line="231"/>
                    <declaration name="added" type="View[]" line="232"/>
                    <scope line="233"/>
                    <scope line="237"/>
                </scope>
            </method>
            <javadoc line="244">
                Load the text buffer with the given range
                  of text.  This is used by the fragments
                  broken off of this view as well as this
                  view itself.                
            </javadoc>
            <method name="loadText" type="void" line="250">
                <params>
                    <param name="segment" type="Segment"/>
                    <param name="p0" type="int"/>
                    <param name="p1" type="int"/>
                </params>
                <scope line="251">
                    <declaration name="doc" type="Document" line="252"/>
                </scope>
                <scope line="255"/>
            </method>
            <method name="updateMetrics" type="void" line="259">
                <declaration name="host" type="Component" line="260"/>
                <declaration name="f" type="Font" line="261"/>
            </method>
            <javadoc line="265">
                Returns the next tab stop position after a given reference position.
                  This implementation does not support things like centering so it
                  ignores the tabOffset argument.                
                <param>
                    x the current position >= 0                    
                </param>
                <param>
                    tabOffset the position within the text stream
                      that the tab occurred at >= 0.                    
                </param>
                <return>
                    the tab stop, measured in points >= 0                    
                </return>
            </javadoc>
            <method name="nextTabStop" type="float" line="274">
                <params>
                    <param name="x" type="float"/>
                    <param name="tabOffset" type="int"/>
                </params>
                <declaration name="ntabs" type="int" line="276"/>
            </method>
            <javadoc line="279">
                Renders using the given rendering surface and area
                  on that surface.  This is implemented to stash the
                  selection positions, selection colors, and font
                  metrics for the nested lines to use.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    a the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="288">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="a" type="Shape"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="289"/>
                <declaration name="host" type="JTextComponent" line="291"/>
                <declaration name="c" type="Caret" line="295"/>
            </method>
            <javadoc line="300">
                Sets the size of the view.  This should cause
                  layout of the view along the given axis, if it
                  has any layout duties.                
                <param>
                    width the width >= 0                    
                </param>
                <param>
                    height the height >= 0                    
                </param>
            </javadoc>
            <method name="setSize" type="void" line="307">
                <params>
                    <param name="width" type="float"/>
                    <param name="height" type="float"/>
                </params>
                <scope line="309"/>
            </method>
            <javadoc line="316">
                Determines the preferred span for this view along an
                  axis.  This is implemented to provide the superclass
                  behavior after first making sure that the current font
                  metrics are cached (for the nested lines which use
                  the metrics to determine the height of the potentially
                  wrapped lines).                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <see>
                    View#getPreferredSpan                    
                </see>
            </javadoc>
            <method name="getPreferredSpan" type="float" line="330">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="334">
                Determines the minimum span for this view along an
                  axis.  This is implemented to provide the superclass
                  behavior after first making sure that the current font
                  metrics are cached (for the nested lines which use
                  the metrics to determine the height of the potentially
                  wrapped lines).                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <see>
                    View#getMinimumSpan                    
                </see>
            </javadoc>
            <method name="getMinimumSpan" type="float" line="348">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="352">
                Determines the maximum span for this view along an
                  axis.  This is implemented to provide the superclass
                  behavior after first making sure that the current font
                  metrics are cached (for the nested lines which use
                  the metrics to determine the height of the potentially
                  wrapped lines).                
                <param>
                    axis may be either View.X_AXIS or View.Y_AXIS                    
                </param>
                <return>
                    the span the view would like to be rendered into.
                      Typically the view is told to render into the span
                      that is returned, although there is no guarantee.
                      The parent may choose to resize or break the view.                    
                </return>
                <see>
                    View#getMaximumSpan                    
                </see>
            </javadoc>
            <method name="getMaximumSpan" type="float" line="366">
                <params>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="370">
                Gives notification that something was inserted into the
                  document in a location that this view is responsible for.
                  This is implemented to simply update the children.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="379">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="381"/>
                <declaration name="pos" type="int" line="382"/>
                <declaration name="v" type="View" line="383"/>
                <scope line="384"/>
            </method>
            <javadoc line="388">
                Gives notification that something was removed from the
                  document in a location that this view is responsible for.
                  This is implemented to simply update the children.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="397">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <declaration name="alloc" type="Rectangle" line="399"/>
                <declaration name="pos" type="int" line="400"/>
                <declaration name="v" type="View" line="401"/>
                <scope line="402"/>
            </method>
            <javadoc line="406">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="414">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <declaration name="metrics" type="FontMetrics" line="417"/>
            <declaration name="lineBuffer" type="Segment" line="418"/>
            <declaration name="widthChanging" type="boolean" line="419"/>
            <declaration name="tabBase" type="int" line="420"/>
            <declaration name="tabSize" type="int" line="421"/>
            <declaration name="wordWrap" type="boolean" line="422"/>
            <declaration name="sel0" type="int" line="423"/>
            <declaration name="sel1" type="int" line="424"/>
            <declaration name="unselected" type="Color" line="425"/>
            <declaration name="selected" type="Color" line="426"/>
            <class name="WrappedLine" line="427">
                <extends class="View"/>
                <javadoc line="427">
                    Simple view of a line that wraps if it doesn&apos;t
                      fit withing the horizontal space allocated.
                      This class tries to be lightweight by carrying little
                      state of it&apos;s own and sharing the state of the outer class
                      with it&apos;s sibblings.                    
                </javadoc>
                <method name="WrappedLine" type="constructor" line="435">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <javadoc line="439">
                    Determines the preferred span for this view along an
                      axis.                    
                    <param>
                        axis may be either X_AXIS or Y_AXIS                        
                    </param>
                    <return>
                        the span the view would like to be rendered into.
                          Typically the view is told to render into the span
                          that is returned, although there is no guarantee.
                          The parent may choose to resize or break the view.                        
                    </return>
                    <see>
                        View#getPreferredSpan                        
                    </see>
                </javadoc>
                <method name="getPreferredSpan" type="float" line="449">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="width" type="float" line="452"/>
                    <scope line="453"/>
                    <scope line="458"/>
                </method>
                <javadoc line="466">
                    Renders using the given rendering surface and area on that
                      surface.  The view may need to do layout and create child
                      views to enable itself to render into the given allocation.                    
                    <param>
                        g the rendering surface to use                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <see>
                        View#paint                        
                    </see>
                </javadoc>
                <method name="paint" type="void" line="474">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <declaration name="alloc" type="Rectangle" line="475"/>
                    <declaration name="y" type="int" line="476"/>
                    <declaration name="x" type="int" line="477"/>
                    <declaration name="host" type="JTextComponent" line="478"/>
                    <declaration name="h" type="Highlighter" line="479"/>
                    <declaration name="dh" type="LayeredHighlighter" line="480"/>
                    <declaration name="start" type="int" line="481"/>
                    <declaration name="end" type="int" line="482"/>
                    <declaration name="p0" type="int" line="483"/>
                    <declaration name="lineEnds" type="int[]" line="484"/>
                    <scope line="485">
                        <declaration name="p1" type="int" line="486"/>
                        <scope line="487">
                            <declaration name="hOffset" type="int" line="488"/>
                        </scope>
                    </scope>
                </method>
                <javadoc line="496">
                    Provides a mapping from the document model coordinate space
                      to the coordinate space of the view mapped to it.                    
                    <param>
                        pos the position to convert                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the bounding box of the given position is returned                        
                    </return>
                    <exception>
                        BadLocationException  if the given position does not represent a
                          valid location in the associated document                        
                    </exception>
                    <see>
                        View#modelToView                        
                    </see>
                </javadoc>
                <method name="modelToView" type="Shape" line="506">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Shape"/>
                        <param name="b" type="Position.Bias"/>
                    </params>
                    <declaration name="alloc" type="Rectangle" line="507"/>
                    <declaration name="p0" type="int" line="510"/>
                    <scope line="511"/>
                    <declaration name="testP" type="int" line="514"/>
                    <declaration name="line" type="int" line="515"/>
                    <declaration name="lineEnds" type="int[]" line="516"/>
                    <scope line="517">
                        <scope line="519"/>
                    </scope>
                    <scope line="524">
                        <declaration name="segment" type="Segment" line="525"/>
                    </scope>
                </method>
                <javadoc line="532">
                    Provides a mapping from the view coordinate space to the logical
                      coordinate space of the model.                    
                    <param>
                        fx the X coordinate                        
                    </param>
                    <param>
                        fy the Y coordinate                        
                    </param>
                    <param>
                        a the allocated region to render into                        
                    </param>
                    <return>
                        the location within the model that best represents the
                          given point in the view                        
                    </return>
                    <see>
                        View#viewToModel                        
                    </see>
                </javadoc>
                <method name="viewToModel" type="int" line="542">
                    <params>
                        <param name="fx" type="float"/>
                        <param name="fy" type="float"/>
                        <param name="a" type="Shape"/>
                        <param name="bias" type="Position.Bias[]"/>
                    </params>
                    <declaration name="alloc" type="Rectangle" line="544"/>
                    <declaration name="x" type="int" line="545"/>
                    <declaration name="y" type="int" line="546"/>
                    <scope line="547"/>
                    <scope line="550"/>
                    <scope line="553">
                        <declaration name="line" type="int" line="555"/>
                        <scope line="556"/>
                        <scope line="559">
                            <declaration name="p0" type="int" line="560"/>
                            <declaration name="p1" type="int" line="561"/>
                            <scope line="562"/>
                            <scope line="565">
                                <declaration name="lineEnds" type="int[]" line="566"/>
                                <scope line="568"/>
                            </scope>
                            <scope line="572"/>
                            <scope line="575"/>
                            <scope line="578">
                                <declaration name="segment" type="Segment" line="579"/>
                                <declaration name="n" type="int" line="581"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <method name="insertUpdate" type="void" line="588">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                </method>
                <method name="removeUpdate" type="void" line="591">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                </method>
                <method name="update" type="void" line="594">
                    <params>
                        <param name="ev" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                    </params>
                    <declaration name="oldCount" type="int" line="595"/>
                    <scope line="597"/>
                    <scope line="601">
                        <declaration name="c" type="Component" line="602"/>
                        <declaration name="alloc" type="Rectangle" line="603"/>
                    </scope>
                </method>
                <javadoc line="607">
                    Returns line cache. If the cache was GC&apos;ed, recreates it.
                      If there&apos;s no cache, returns null                    
                </javadoc>
                <method name="getLineEnds" type="int[]" line="611">
                    <scope line="612"/>
                    <scope line="615">
                        <declaration name="lineEnds" type="int[]" line="616"/>
                        <scope line="617"/>
                        <scope line="620"/>
                    </scope>
                </method>
                <javadoc line="625">
                    Creates line cache if text breaks into more than one physical line.                    
                    <param>
                        startPos position to start breaking from                        
                    </param>
                    <return>
                        the cache created, ot null if text breaks into one line                        
                    </return>
                </javadoc>
                <method name="breakLines" type="int[]" line="630">
                    <params>
                        <param name="startPos" type="int"/>
                    </params>
                    <declaration name="lineEnds" type="int[]" line="631"/>
                    <declaration name="oldLineEnds" type="int[]" line="632"/>
                    <declaration name="start" type="int" line="633"/>
                    <declaration name="lineIndex" type="int" line="634"/>
                    <scope line="635">
                        <scope line="637"/>
                    </scope>
                    <declaration name="p0" type="int" line="641"/>
                    <declaration name="p1" type="int" line="642"/>
                    <scope line="643">
                        <declaration name="p" type="int" line="644"/>
                        <scope line="646"/>
                        <scope line="652">
                            <declaration name="growFactor" type="double" line="653"/>
                            <declaration name="newSize" type="int" line="654"/>
                            <declaration name="tmp" type="int[]" line="656"/>
                            <scope line="657"/>
                        </scope>
                    </scope>
                    <scope line="665">
                        <declaration name="maxCapacity" type="int" line="666"/>
                        <scope line="667">
                            <declaration name="tmp" type="int[]" line="668"/>
                        </scope>
                    </scope>
                    <scope line="673"/>
                </method>
                <javadoc line="678">
                    Binary search in the cache for line containing specified offset
                      (which is relative to the beginning of the view). This method
                      assumes that cache exists.                    
                </javadoc>
                <method name="findLine" type="int" line="683">
                    <params>
                        <param name="offset" type="int"/>
                    </params>
                    <declaration name="lineEnds" type="int[]" line="684"/>
                    <scope line="685"/>
                    <scope line="688"/>
                    <scope line="691"/>
                </method>
                <method name="findLine" type="int" line="695">
                    <params>
                        <param name="array" type="int[]"/>
                        <param name="offset" type="int"/>
                        <param name="min" type="int"/>
                        <param name="max" type="int"/>
                    </params>
                    <scope line="696"/>
                    <scope line="699">
                        <declaration name="mid" type="int" line="700"/>
                    </scope>
                </method>
                <declaration name="lineCount" type="int" line="704"/>
                <declaration name="lineCache" type="SoftReference&lt;int[]&gt;" line="705"/>
            </class>
        </class>
    </source>