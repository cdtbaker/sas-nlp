<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="javax.swing.text"/>
        <import package="java.io.Writer"/>
        <import package="java.util.Stack"/>
        <import package="java.util.Enumeration"/>
        <import package="java.util.Vector"/>
        <import package="java.io.IOException"/>
        <import package="java.util.StringTokenizer"/>
        <import package="java.util.NoSuchElementException"/>
        <import package="java.net.URL"/>
        <class name="HTMLWriter" line="37">
            <extends class="AbstractWriter"/>
            <comment line="46">
                Stores all elements for which end tags have to
                 be emitted.                
            </comment>
            <comment line="60">
                Stores all embedded tags. Embedded tags are tags that are
                 stored as attributes in other tags. Generally they&apos;re
                 character level attributes.  Examples include
                 &amp;lt;b&amp;gt;, &amp;lt;i&amp;gt;, &amp;lt;font&amp;gt;, and &amp;lt;a&amp;gt;.                
            </comment>
            <comment line="78">
                This is used in closeOutUnwantedEmbeddedTags.                
            </comment>
            <comment line="984">
                --- conversion support ---------------------------                
            </comment>
            <comment line="1158">
                Overrides the writing methods to only break a string when
                 canBreakString is true.
                 In a future release it is likely AbstractWriter will get this
                 functionality.                
            </comment>
            <javadoc line="37">
                This is a writer for HTMLDocuments.                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="blockElementStack" type="Stack&lt;Element&gt;" line="49"/>
            <declaration name="inContent" type="boolean" line="50"/>
            <declaration name="inPre" type="boolean" line="51"/>
            <declaration name="preEndOffset" type="int" line="52"/>
            <javadoc line="52">
                When inPre is true, this will indicate the end offset of the pre
                  element.                
            </javadoc>
            <declaration name="inTextArea" type="boolean" line="55"/>
            <declaration name="newlineOutputed" type="boolean" line="56"/>
            <declaration name="completeDoc" type="boolean" line="57"/>
            <declaration name="tags" type="Vector&lt;HTML.Tag&gt;" line="65"/>
            <declaration name="tagValues" type="Vector&lt;Object&gt;" line="67"/>
            <javadoc line="67">
                Values for the tags.                
            </javadoc>
            <declaration name="segment" type="Segment" line="72"/>
            <javadoc line="72">
                Used when writing out content.                
            </javadoc>
            <declaration name="tagsToRemove" type="Vector&lt;HTML.Tag&gt;" line="80"/>
            <declaration name="wroteHead" type="boolean" line="82"/>
            <javadoc line="82">
                Set to true after the head has been output.                
            </javadoc>
            <declaration name="replaceEntities" type="boolean" line="87"/>
            <javadoc line="87">
                Set to true when entities (such as &amp;lt;) should be replaced.                
            </javadoc>
            <declaration name="tempChars" type="char[]" line="92"/>
            <javadoc line="92">
                Temporary buffer.                
            </javadoc>
            <javadoc line="98">
                Creates a new HTMLWriter.                
                <param>
                    w   a Writer                    
                </param>
                <param>
                    doc  an HTMLDocument                    
                </param>
            </javadoc>
            <method name="HTMLWriter" type="constructor" line="105">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="HTMLDocument"/>
                </params>
            </method>
            <javadoc line="109">
                Creates a new HTMLWriter.                
                <param>
                    w  a Writer                    
                </param>
                <param>
                    doc an HTMLDocument                    
                </param>
                <param>
                    pos the document location from which to fetch the content                    
                </param>
                <param>
                    len the amount to write out                    
                </param>
            </javadoc>
            <method name="HTMLWriter" type="constructor" line="117">
                <params>
                    <param name="w" type="Writer"/>
                    <param name="doc" type="HTMLDocument"/>
                    <param name="pos" type="int"/>
                    <param name="len" type="int"/>
                </params>
            </method>
            <javadoc line="123">
                Iterates over the
                  Element tree and controls the writing out of
                  all the tags and its attributes.                
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="write" type="void" line="133">
                <comment line="160">
                    if next is child of current increment indent                    
                </comment>
                <comment line="167">
                    next and current are not siblings
                    so emit end tags for items on the stack until the
                    item on top of the stack, is the parent of the
                    next.                    
                </comment>
                <comment line="175">
                    pop() will return top.                    
                </comment>
                <comment line="190">
                    if next and current are siblings the indent level
                    is correct.  But, we need to make sure that if current is
                    on the stack, we pop it off, and put out its end tag.                    
                </comment>
                <comment line="210">
                                        
                </comment>
                <comment line="212">
                    A null parameter ensures that all embedded tags
                    currently in the tags vector have their
                    corresponding end tags written out.                    
                </comment>
                <declaration name="it" type="ElementIterator" line="134"/>
                <declaration name="current" type="Element" line="135"/>
                <declaration name="next" type="Element" line="136"/>
                <scope line="142"/>
                <declaration name="forcedBody" type="boolean" line="146"/>
                <scope line="147">
                    <scope line="148">
                        <scope line="150"/>
                        <scope line="153"/>
                    </scope>
                    <scope line="157">
                        <scope line="163"/>
                        <scope line="165">
                            <declaration name="top" type="Element" line="172"/>
                            <scope line="173">
                                <scope line="178">
                                    <declaration name="attrs" type="AttributeSet" line="179"/>
                                    <scope line="181"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="188">
                            <declaration name="top" type="Element" line="194"/>
                            <scope line="195"/>
                        </scope>
                    </scope>
                    <scope line="201"/>
                    <scope line="204"/>
                </scope>
                <scope line="217"/>
                <scope line="221">
                    <scope line="223">
                        <declaration name="attrs" type="AttributeSet" line="224"/>
                        <scope line="226"/>
                    </scope>
                </scope>
                <scope line="233"/>
            </method>
            <javadoc line="241">
                Writes out the attribute set.  Ignores all
                  attributes with a key of type HTML.Tag,
                  attributes with a key of type StyleConstants,
                  and attributes with a key of type
                  HTML.Attribute.ENDTAG.                
                <param>
                    attr   an AttributeSet                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeAttributes" type="void" line="252">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="254">
                    translate css attributes to html                    
                </comment>
                <declaration name="names" type="Enumeration" line="257"/>
                <scope line="258">
                    <declaration name="name" type="Object" line="259"/>
                    <scope line="262"/>
                </scope>
            </method>
            <javadoc line="269">
                Writes out all empty elements (all tags that have no
                  corresponding end tag).                
                <param>
                    elem   an Element                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="emptyTag" type="void" line="278">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="307">
                    If an instance of an UNKNOWN Tag, or an instance of a
                     tag that is only visible during editing                    
                </comment>
                <comment line="318">
                    Write out any styles.                    
                </comment>
                <scope line="280"/>
                <declaration name="attr" type="AttributeSet" line="284"/>
                <scope line="288"/>
                <scope line="291"/>
                <scope line="293">
                    <declaration name="isBlock" type="boolean" line="294"/>
                    <scope line="295"/>
                    <declaration name="nameTag" type="Object" line="300"/>
                    <declaration name="endTag" type="Object" line="302"/>
                    <declaration name="outputEndTag" type="boolean" line="305"/>
                    <scope line="311"/>
                    <scope line="315">
                        <scope line="316"/>
                    </scope>
                    <scope line="324"/>
                    <scope line="330">
                        <declaration name="doc" type="Document" line="331"/>
                        <declaration name="title" type="String" line="332"/>
                    </scope>
                    <scope line="334">
                        <scope line="336"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="343">
                Determines if the HTML.Tag associated with the
                  element is a block tag.                
                <param>
                    attr  an AttributeSet                    
                </param>
                <return>
                    true if tag is block tag, false otherwise.                    
                </return>
            </javadoc>
            <method name="isBlockTag" type="boolean" line="350">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="o" type="Object" line="351"/>
                <scope line="352">
                    <declaration name="name" type="HTML.Tag" line="353"/>
                </scope>
            </method>
            <javadoc line="360">
                Writes out a start tag for the element.
                  Ignores all synthesized elements.                
                <param>
                    elem   an Element                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="startTag" type="void" line="367">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="374">
                    Determine the name, as an HTML.Tag.                    
                </comment>
                <comment line="390">
                    write out end tags for item on stack                    
                </comment>
                <comment line="400">
                    If the head has not been output, output it and the styles.                    
                </comment>
                <comment line="428">
                    Write out the maps, which is not stored as Elements in
                     the Document.                    
                </comment>
                <scope line="369"/>
                <declaration name="attr" type="AttributeSet" line="374"/>
                <declaration name="nameAttribute" type="Object" line="375"/>
                <declaration name="name" type="HTML.Tag" line="376"/>
                <scope line="377"/>
                <scope line="380"/>
                <scope line="384"/>
                <scope line="392"/>
                <scope line="398"/>
                <scope line="418"/>
                <scope line="422"/>
                <scope line="424"/>
                <scope line="426"/>
                <scope line="431">
                    <declaration name="document" type="HTMLDocument" line="432"/>
                    <scope line="436"/>
                </scope>
            </method>
            <javadoc line="447">
                Writes out text that is contained in a TEXTAREA form
                  element.                
                <param>
                    attr  an AttributeSet                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="textAreaContent" type="void" line="456">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="doc" type="Document" line="457"/>
                <scope line="458">
                    <scope line="459"/>
                    <scope line="463"/>
                </scope>
            </method>
            <javadoc line="480">
                Writes out text.  If a range is specified when the constructor
                  is invoked, then only the appropriate range of text is written
                  out.                
                <param>
                    elem   an Element                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="text" type="void" line="490">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="start" type="int" line="491"/>
                <declaration name="end" type="int" line="492"/>
                <scope line="493">
                    <scope line="494"/>
                    <scope line="499">
                        <scope line="500"/>
                        <scope line="503">
                            <scope line="504"/>
                            <scope line="507"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="520">
                Writes out the content of the SELECT form element.                
                <param>
                    attr the AttributeSet associated with the form element                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="selectContent" type="void" line="526">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <declaration name="model" type="Object" line="527"/>
                <scope line="529">
                    <declaration name="listModel" type="OptionListModel" line="530"/>
                    <declaration name="size" type="int" line="531"/>
                    <scope line="532">
                        <declaration name="option" type="Option" line="533"/>
                    </scope>
                </scope>
                <scope line="536">
                    <declaration name="comboBoxModel" type="OptionComboBoxModel" line="537"/>
                    <declaration name="size" type="int" line="538"/>
                    <scope line="539">
                        <declaration name="option" type="Option" line="540"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="548">
                Writes out the content of the Option form element.                
                <param>
                    option  an Option                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeOption" type="void" line="554">
                <params>
                    <param name="option" type="Option"/>
                </params>
                <comment line="560">
                    PENDING: should this be changed to check for null first?                    
                </comment>
                <declaration name="value" type="Object" line="560"/>
                <scope line="562"/>
                <scope line="565"/>
                <scope line="569"/>
            </method>
            <javadoc line="575">
                Writes out an end tag for the element.                
                <param>
                    elem    an Element                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="endTag" type="void" line="581">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="587">
                    write out end tags for item on stack                    
                </comment>
                <scope line="582"/>
                <scope line="588">
                    <scope line="589"/>
                </scope>
                <scope line="595"/>
                <scope line="598"/>
            </method>
            <javadoc line="610">
                Writes out comments.                
                <param>
                    elem    an Element                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="comment" type="void" line="618">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="as" type="AttributeSet" line="619"/>
                <scope line="620">
                    <declaration name="comment" type="Object" line="621"/>
                    <scope line="622"/>
                    <scope line="625"/>
                </scope>
            </method>
            <javadoc line="632">
                Writes out comment string.                
                <param>
                    string   the comment                    
                </param>
                <exception>
                    IOException on any I/O error                    
                </exception>
                <exception>
                    BadLocationException if pos represents an invalid
                      location within the document.                    
                </exception>
            </javadoc>
            <method name="writeComment" type="void" line="640">
                <params>
                    <param name="string" type="String"/>
                </params>
                <scope line="642"/>
            </method>
            <javadoc line="651">
                Writes out any additional comments (comments outside of the body)
                  stored under the property HTMLDocument.AdditionalComments.                
            </javadoc>
            <method name="writeAdditionalComments" type="void" line="655">
                <declaration name="comments" type="Object" line="656"/>
                <scope line="659">
                    <declaration name="v" type="Vector" line="660"/>
                    <scope line="662"/>
                </scope>
            </method>
            <javadoc line="669">
                Returns true if the element is a
                  synthesized element.  Currently we are only testing
                  for the p-implied tag.                
            </javadoc>
            <method name="synthesizedElement" type="boolean" line="674">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="675"/>
            </method>
            <javadoc line="682">
                Returns true if the StyleConstants.NameAttribute is
                  equal to the tag that is passed in as a parameter.                
            </javadoc>
            <method name="matchNameAttribute" type="boolean" line="686">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="tag" type="HTML.Tag"/>
                </params>
                <declaration name="o" type="Object" line="687"/>
                <scope line="688">
                    <declaration name="name" type="HTML.Tag" line="689"/>
                    <scope line="690"/>
                </scope>
            </method>
            <javadoc line="697">
                Searches for embedded tags in the AttributeSet
                  and writes them out.  It also stores these tags in a vector
                  so that when appropriate the corresponding end tags can be
                  written out.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="writeEmbeddedTags" type="void" line="705">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="708">
                    translate css attributes to html                    
                </comment>
                <declaration name="names" type="Enumeration" line="710"/>
                <scope line="711">
                    <declaration name="name" type="Object" line="712"/>
                    <scope line="713">
                        <declaration name="tag" type="HTML.Tag" line="714"/>
                        <scope line="715"/>
                        <declaration name="o" type="Object" line="720"/>
                        <scope line="721"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="732">
                Searches the attribute set for a tag, both of which
                  are passed in as a parameter.  Returns true if no match is found
                  and false otherwise.                
            </javadoc>
            <method name="noMatchForTagInAttributes" type="boolean" line="738">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="t" type="HTML.Tag"/>
                    <param name="tagValue" type="Object"/>
                </params>
                <scope line="739">
                    <declaration name="newValue" type="Object" line="740"/>
                    <scope line="743"/>
                </scope>
            </method>
            <javadoc line="751">
                Searches the attribute set and for each tag
                  that is stored in the tag vector.  If the tag isnt found,
                  then the tag is removed from the vector and a corresponding
                  end tag is written out.                
                <exception>
                    IOException on any I/O error                    
                </exception>
            </javadoc>
            <method name="closeOutUnwantedEmbeddedTags" type="void" line="759">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
                <comment line="764">
                    translate css attributes to html                    
                </comment>
                <comment line="771">
                    First, find all the tags that need to be removed.                    
                </comment>
                <comment line="781">
                    Then close them out.                    
                </comment>
                <comment line="794">
                    Have to output any tags after firstIndex that still remaing,
                     as we closed them out, but they should remain open.                    
                </comment>
                <declaration name="t" type="HTML.Tag" line="766"/>
                <declaration name="tValue" type="Object" line="767"/>
                <declaration name="firstIndex" type="int" line="768"/>
                <declaration name="size" type="int" line="769"/>
                <scope line="771">
                    <scope line="774"/>
                </scope>
                <scope line="779">
                    <declaration name="removeAll" type="boolean" line="781"/>
                    <scope line="782">
                        <scope line="784"/>
                    </scope>
                    <scope line="796">
                        <declaration name="o" type="Object" line="800"/>
                        <scope line="801"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="810">
                Determines if the element associated with the attributeset
                  is a TEXTAREA or SELECT.  If true, returns true else
                  false                
            </javadoc>
            <method name="isFormElementWithContent" type="boolean" line="815">
                <params>
                    <param name="attr" type="AttributeSet"/>
                </params>
            </method>
            <declaration name="indentNext" type="boolean" line="821"/>
            <javadoc line="821">
                Determines whether a the indentation needs to be
                  incremented.  Basically, if next is a child of current, and
                  next is NOT a synthesized element, the indent level will be
                  incremented.  If there is a parent-child relationship and &quot;next&quot;
                  is a synthesized element, then its children must be indented.
                  This state is maintained by the indentNext boolean.                
                <return>
                    boolean that&apos;s true if indent level
                      needs incrementing.                    
                </return>
            </javadoc>
            <method name="indentNeedsIncrementing" type="boolean" line="833">
                <params>
                    <param name="current" type="Element"/>
                    <param name="next" type="Element"/>
                </params>
                <scope line="834">
                    <scope line="835"/>
                    <scope line="838"/>
                    <scope line="840"/>
                </scope>
            </method>
            <javadoc line="847">
                Outputs the maps as elements. Maps are not stored as elements in
                  the document, and as such this is used to output them.                
            </javadoc>
            <method name="writeMaps" type="void" line="851">
                <params>
                    <param name="maps" type="Enumeration"/>
                </params>
                <comment line="872">
                    Output the areas                    
                </comment>
                <scope line="852">
                    <scope line="853">
                        <declaration name="map" type="Map" line="854"/>
                        <declaration name="name" type="String" line="855"/>
                        <scope line="860"/>
                        <scope line="865"/>
                        <declaration name="areas" type="AttributeSet[]" line="872"/>
                        <scope line="873">
                            <scope line="875"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="892">
                Outputs the styles as a single element. Styles are not stored as
                  elements, but part of the document. For the time being styles are
                  written out as a comment, inside a style tag.                
            </javadoc>
            <method name="writeStyles" type="void" line="897">
                <params>
                    <param name="sheet" type="StyleSheet"/>
                </params>
                <comment line="905">
                    Don&apos;t write out the default style.                    
                </comment>
                <scope line="898">
                    <declaration name="styles" type="Enumeration" line="899"/>
                    <scope line="900">
                        <declaration name="outputStyle" type="boolean" line="901"/>
                        <scope line="902">
                            <declaration name="name" type="String" line="903"/>
                            <scope line="906"/>
                        </scope>
                        <scope line="910"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="917">
                Outputs the named style. &lt;code&gt;outputStyle&lt;/code&gt; indicates
                  whether or not a style has been output yet. This will return
                  true if a style is written.                
            </javadoc>
            <method name="writeStyle" type="boolean" line="923">
                <params>
                    <param name="name" type="String"/>
                    <param name="style" type="Style"/>
                    <param name="outputStyle" type="boolean"/>
                </params>
                <declaration name="didOutputStyle" type="boolean" line="924"/>
                <declaration name="attributes" type="Enumeration" line="925"/>
                <scope line="926">
                    <scope line="927">
                        <declaration name="attribute" type="Object" line="928"/>
                        <scope line="929">
                            <declaration name="value" type="String" line="930"/>
                            <scope line="931">
                                <scope line="932"/>
                                <scope line="936"/>
                                <scope line="942"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="953"/>
            </method>
            <method name="writeStyleStartTag" type="void" line="960"/>
            <method name="writeStyleEndTag" type="void" line="971"/>
            <javadoc line="985">
                Convert the give set of attributes to be html for
                  the purpose of writing them out.  Any keys that
                  have been converted will not appear in the resultant
                  set.  Any keys not converted will appear in the
                  resultant set the same as the received set.&lt;p&gt;
                  This will put the converted values into &lt;code&gt;to&lt;/code&gt;, unless
                  it is null in which case a temporary AttributeSet will be returned.                
            </javadoc>
            <method name="convertToHTML" type="AttributeSet" line="994">
                <params>
                    <param name="from" type="AttributeSet"/>
                    <param name="to" type="MutableAttributeSet"/>
                </params>
                <scope line="995"/>
                <scope line="999"/>
                <scope line="1001"/>
            </method>
            <declaration name="writeCSS" type="boolean" line="1007"/>
            <javadoc line="1007">
                If true, the writer will emit CSS attributes in preference
                  to HTML tags/attributes (i.e. It will emit an HTML 4.0
                  style).                
            </javadoc>
            <declaration name="convAttr" type="MutableAttributeSet" line="1014"/>
            <javadoc line="1014">
                Buffer for the purpose of attribute conversion                
            </javadoc>
            <declaration name="oConvAttr" type="MutableAttributeSet" line="1019"/>
            <javadoc line="1019">
                Buffer for the purpose of attribute conversion. This can be
                  used if convAttr is being used.                
            </javadoc>
            <javadoc line="1025">
                Create an older style of HTML attributes.  This will
                  convert character level attributes that have a StyleConstants
                  mapping over to an HTML tag/attribute.  Other CSS attributes
                  will be placed in an HTML style attribute.                
            </javadoc>
            <method name="convertToHTML32" type="void" line="1031">
                <params>
                    <param name="from" type="AttributeSet"/>
                    <param name="to" type="MutableAttributeSet"/>
                </params>
                <comment line="1047">
                    add a bold tag is weight is bold                    
                </comment>
                <comment line="1078">
                    default is to store in a HTML style attribute                    
                </comment>
                <scope line="1032"/>
                <declaration name="keys" type="Enumeration" line="1035"/>
                <declaration name="value" type="String" line="1036"/>
                <scope line="1037">
                    <declaration name="key" type="Object" line="1038"/>
                    <scope line="1039">
                        <scope line="1042"/>
                        <scope line="1045">
                            <declaration name="weightValue" type="CSS.FontWeight" line="1047"/>
                            <scope line="1049"/>
                        </scope>
                        <scope line="1052">
                            <declaration name="s" type="String" line="1053"/>
                            <scope line="1054"/>
                        </scope>
                        <scope line="1057">
                            <declaration name="decor" type="String" line="1058"/>
                            <scope line="1059"/>
                            <scope line="1062"/>
                        </scope>
                        <scope line="1065">
                            <declaration name="vAlign" type="String" line="1066"/>
                            <scope line="1067"/>
                            <scope line="1070"/>
                        </scope>
                        <scope line="1073"/>
                        <scope line="1076">
                            <scope line="1078"/>
                        </scope>
                    </scope>
                    <scope line="1083">
                        <declaration name="attr" type="Object" line="1084"/>
                        <scope line="1085"/>
                    </scope>
                </scope>
                <scope line="1091"/>
            </method>
            <javadoc line="1096">
                Add an attribute only if it doesn&apos;t exist so that we don&apos;t
                  loose information replacing it with SimpleAttributeSet.EMPTY                
            </javadoc>
            <method name="addAttribute" type="void" line="1100">
                <params>
                    <param name="to" type="MutableAttributeSet"/>
                    <param name="key" type="Object"/>
                    <param name="value" type="Object"/>
                </params>
                <declaration name="attr" type="Object" line="1101"/>
                <scope line="1102"/>
                <scope line="1104">
                    <scope line="1106"/>
                </scope>
            </method>
            <javadoc line="1112">
                Create/update an HTML &amp;lt;font&amp;gt; tag attribute.  The
                  value of the attribute should be a MutableAttributeSet so
                  that the attributes can be updated as they are discovered.                
            </javadoc>
            <method name="createFontAttribute" type="void" line="1118">
                <params>
                    <param name="a" type="CSS.Attribute"/>
                    <param name="from" type="AttributeSet"/>
                    <param name="to" type="MutableAttributeSet"/>
                </params>
                <comment line="1126">
                    edit the parameters to the font tag                    
                </comment>
                <declaration name="fontAttr" type="MutableAttributeSet" line="1119"/>
                <scope line="1121"/>
                <declaration name="htmlValue" type="String" line="1126"/>
                <scope line="1127"/>
                <scope line="1129"/>
                <scope line="1131"/>
            </method>
            <javadoc line="1136">
                Copies the given AttributeSet to a new set, converting
                  any CSS attributes found to arguments of an HTML style
                  attribute.                
            </javadoc>
            <method name="convertToHTML40" type="void" line="1141">
                <params>
                    <param name="from" type="AttributeSet"/>
                    <param name="to" type="MutableAttributeSet"/>
                </params>
                <declaration name="keys" type="Enumeration" line="1142"/>
                <declaration name="value" type="String" line="1143"/>
                <scope line="1144">
                    <declaration name="key" type="Object" line="1145"/>
                    <scope line="1146"/>
                    <scope line="1148"/>
                </scope>
                <scope line="1152"/>
            </method>
            <javadoc line="1164">
                Writes the line separator. This is overriden to make sure we don&apos;t
                  replace the newline content in case it is outside normal ascii.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="writeLineSeparator" type="void" line="1169">
                <declaration name="oldReplace" type="boolean" line="1170"/>
            </method>
            <javadoc line="1177">
                This method is overriden to map any character entities, such as
                  &amp;lt; to &amp;amp;lt;. &lt;code&gt;super.output&lt;/code&gt; will be invoked to
                  write the content.                
                <since>
                    1.3                    
                </since>
            </javadoc>
            <method name="output" type="void" line="1184">
                <params>
                    <param name="chars" type="char[]"/>
                    <param name="start" type="int"/>
                    <param name="length" type="int"/>
                </params>
                <comment line="1193">
                    This will change, we need better support character level
                     entities.                    
                </comment>
                <comment line="1196">
                    Character level entities.                    
                </comment>
                <comment line="1225">
                    Special characters                    
                </comment>
                <comment line="1236">
                    If the character is outside of ascii, write the
                     numeric value.                    
                </comment>
                <scope line="1185"/>
                <declaration name="last" type="int" line="1189"/>
                <scope line="1191">
                    <scope line="1197"/>
                    <scope line="1204"/>
                    <scope line="1211"/>
                    <scope line="1218"/>
                    <scope line="1230">
                        <scope line="1231"/>
                    </scope>
                </scope>
                <scope line="1244"/>
            </method>
            <javadoc line="1249">
                This directly invokes super&apos;s &lt;code&gt;output&lt;/code&gt; after converting
                  &lt;code&gt;string&lt;/code&gt; to a char[].                
            </javadoc>
            <method name="output" type="void" line="1253">
                <params>
                    <param name="string" type="String"/>
                </params>
                <declaration name="length" type="int" line="1254"/>
                <scope line="1255"/>
            </method>
            <declaration name="indented" type="boolean" line="1262"/>
            <javadoc line="1264">
                Writes indent only once per line.                
            </javadoc>
            <method name="indentSmart" type="void" line="1267">
                <scope line="1268"/>
            </method>
        </class>
    </source>