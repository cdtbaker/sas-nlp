<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="javax.swing.text.SimpleAttributeSet"/>
        <import package="javax.swing.text.html.HTML"/>
        <import package="javax.swing.text.ChangedCharSetException"/>
        <import package="java.io"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.net.URL"/>
        <import package="sun.misc.MessageUtils"/>
        <class name="Parser" line="40">
            <comment line="104">
                State for &lt;html&gt;, &lt;head&gt; and &lt;body&gt;.  Since people like to slap
                 together HTML documents without thinking, occasionally they
                 have multiple instances of these tags.  These booleans track
                 the first sightings of these tags so they can be safely ignored
                 by the parser if repeated.                
            </comment>
            <comment line="152">
                To correctly identify the start of a tag/comment/text we need two
                 ivars. Two are needed as handleText isn&apos;t invoked until the tag
                 after the text has been parsed, that is the parser parses the text,
                 then a tag, then invokes handleText followed by handleStart.                
            </comment>
            <comment line="2266">
                Input cache.  This is much faster than calling down to a synchronized
                 method of BufferedReader for each byte.  Measurements done 53097
                 show that there&apos;s no point in having a bigger buffer:  Increasing
                 the buffer to 8192 had no measurable impact for a program discarding
                 one character at a time (reading from an http URL to a local machine).
                 NOTE: If the current encoding is bogus, and we read too much
                 (past the content-type) we may suffer a MalformedInputException. For
                 this reason the initial size is 1 and when the body is encountered the
                 size is adjusted to 256.                
            </comment>
            <comment line="2280">
                tracks position relative to the beginning of the
                document.                
            </comment>
            <implements interface="DTDConstants"/>
            <javadoc line="40">
                A simple DTD-driven HTML parser. The parser reads an
                  HTML file from an InputStream and calls various methods
                  (which should be overridden in a subclass) when tags and
                  data are encountered.
                  &lt;p&gt;
                  Unfortunately there are many badly implemented HTML parsers
                  out there, and as a result there are many badly formatted
                  HTML files. This parser attempts to parse most HTML files.
                  This means that the implementation sometimes deviates from
                  the SGML specification in favor of HTML.
                  &lt;p&gt;
                  The parser treats \r and \r\n as \n. Newlines after starttags
                  and before end tags are ignored just as specified in the SGML/HTML
                  specification.
                  &lt;p&gt;
                  The html spec does not specify how spaces are to be coalesced very well.
                  Specifically, the following scenarios are not discussed (note that a
                  space should be used here, but I am using &amp;amp;nbsp to force the space to
                  be displayed):
                  &lt;p&gt;
                  &apos;&amp;lt;b&gt;blah&amp;nbsp;&amp;lt;i&gt;&amp;nbsp;&amp;lt;strike&gt;&amp;nbsp;foo&apos; which can be treated as:
                  &apos;&amp;lt;b&gt;blah&amp;nbsp;&amp;lt;i&gt;&amp;lt;strike&gt;foo&apos;
                  &lt;p&gt;as well as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt;&amp;nbsp;&amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  which appears to be treated as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt;&amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  &lt;p&gt;
                  If &lt;code&gt;strict&lt;/code&gt; is false, when a tag that breaks flow,
                  (&lt;code&gt;TagElement.breaksFlows&lt;/code&gt;) or trailing whitespace is
                  encountered, all whitespace will be ignored until a non whitespace
                  character is encountered. This appears to give behavior closer to
                  the popular browsers.                
                <see>
                    DTD                    
                </see>
                <see>
                    TagElement                    
                </see>
                <see>
                    SimpleAttributeSet                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="text" type="char" line="83"/>
            <declaration name="textpos" type="int" line="84"/>
            <declaration name="last" type="TagElement" line="85"/>
            <declaration name="space" type="boolean" line="86"/>
            <declaration name="str" type="char" line="88"/>
            <declaration name="strpos" type="int" line="89"/>
            <declaration name="dtd" type="DTD" line="91"/>
            <declaration name="ch" type="int" line="93"/>
            <declaration name="ln" type="int" line="94"/>
            <declaration name="in" type="Reader" line="95"/>
            <declaration name="recent" type="Element" line="97"/>
            <declaration name="stack" type="TagStack" line="98"/>
            <declaration name="skipTag" type="boolean" line="99"/>
            <declaration name="lastFormSent" type="TagElement" line="100"/>
            <declaration name="attributes" type="SimpleAttributeSet" line="101"/>
            <declaration name="seenHtml" type="boolean" line="108"/>
            <declaration name="seenHead" type="boolean" line="109"/>
            <declaration name="seenBody" type="boolean" line="110"/>
            <declaration name="ignoreSpace" type="boolean" line="112"/>
            <javadoc line="112">
                The html spec does not specify how spaces are coalesced very well.
                  If strict == false, ignoreSpace is used to try and mimic the behavior
                  of the popular browsers.
                  &lt;p&gt;
                  The problematic scenarios are:
                  &apos;&amp;lt;b&gt;blah &amp;lt;i&gt; &amp;lt;strike&gt; foo&apos; which can be treated as:
                  &apos;&amp;lt;b&gt;blah &amp;lt;i&gt;&amp;lt;strike&gt;foo&apos;
                  as well as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt; &amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  which appears to be treated as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt;&amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  &lt;p&gt;
                  When a tag that breaks flow, or trailing whitespace is encountered
                  ignoreSpace is set to true. From then on, all whitespace will be
                  ignored.
                  ignoreSpace will be set back to false the first time a
                  non whitespace character is encountered. This appears to give
                  behavior closer to the popular browsers.                
            </javadoc>
            <declaration name="strict" type="boolean" line="134"/>
            <javadoc line="134">
                This flag determines whether or not the Parser will be strict
                  in enforcing SGML compatibility.  If false, it will be lenient
                  with certain common classes of erroneous HTML constructs.
                  Strict or not, in either case an error will be recorded.                
            </javadoc>
            <declaration name="crlfCount" type="int" line="144"/>
            <javadoc line="144">
                Number of \r\n&apos;s encountered.                
            </javadoc>
            <declaration name="crCount" type="int" line="146"/>
            <javadoc line="146">
                Number of \r&apos;s encountered. A \r\n will not increment this.                
            </javadoc>
            <declaration name="lfCount" type="int" line="148"/>
            <javadoc line="148">
                Number of \n&apos;s encountered. A \r\n will not increment this.                
            </javadoc>
            <declaration name="currentBlockStartPos" type="int" line="157"/>
            <javadoc line="157">
                The start position of the current block. Block is overloaded here,
                  it really means the current start position for the current comment,
                  tag, text. Use getBlockStartPosition to access this.                
            </javadoc>
            <declaration name="lastBlockStartPos" type="int" line="161"/>
            <javadoc line="161">
                Start position of the last block.                
            </javadoc>
            <declaration name="cp1252Map" type="char[]" line="164"/>
            <javadoc line="164">
                array for mapping numeric references in range
                  130-159 to displayable Unicode characters.                
            </javadoc>
            <method name="Parser" type="constructor" line="201">
                <params>
                    <param name="dtd" type="DTD"/>
                </params>
            </method>
            <javadoc line="206">
                @return the line number of the line currently being parsed                
            </javadoc>
            <method name="getCurrentLine" type="int" line="209"/>
            <javadoc line="213">
                Returns the start position of the current block. Block is
                  overloaded here, it really means the current start position for
                  the current comment tag, text, block.... This is provided for
                  subclassers that wish to know the start of the current block when
                  called with one of the handleXXX methods.                
            </javadoc>
            <method name="getBlockStartPosition" type="int" line="220"/>
            <javadoc line="224">
                Makes a TagElement.                
            </javadoc>
            <method name="makeTag" type="TagElement" line="227">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="fictional" type="boolean"/>
                </params>
            </method>
            <method name="makeTag" type="TagElement" line="231">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <method name="getAttributes" type="SimpleAttributeSet" line="235"/>
            <method name="flushAttributes" type="void" line="239"/>
            <javadoc line="243">
                Called when PCDATA is encountered.                
            </javadoc>
            <method name="handleText" type="void" line="246">
                <params>
                    <param name="text" type="char"/>
                </params>
            </method>
            <javadoc line="249">
                Called when an HTML title tag is encountered.                
            </javadoc>
            <method name="handleTitle" type="void" line="252">
                <params>
                    <param name="text" type="char"/>
                </params>
                <comment line="254">
                    default behavior is to call handleText. Subclasses
                     can override if necessary.                    
                </comment>
            </method>
            <javadoc line="258">
                Called when an HTML comment is encountered.                
            </javadoc>
            <method name="handleComment" type="void" line="261">
                <params>
                    <param name="text" type="char"/>
                </params>
            </method>
            <method name="handleEOFInComment" type="void" line="264">
                <comment line="266">
                    We&apos;ve reached EOF.  Our recovery strategy is to
                     see if we have more than one line in the comment;
                     if so, we pretend that the comment was an unterminated
                     single line comment, and reparse the lines after the
                     first line as normal HTML content.                    
                </comment>
                <comment line="285">
                    no newline, so signal an error                    
                </comment>
                <declaration name="commentEndPos" type="int" line="271"/>
                <scope line="272">
                    <scope line="274"/>
                    <scope line="278"/>
                </scope>
                <scope line="283"/>
            </method>
            <javadoc line="289">
                Called when an empty tag is encountered.                
            </javadoc>
            <method name="handleEmptyTag" type="void" line="292">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
            </method>
            <javadoc line="295">
                Called when a start tag is encountered.                
            </javadoc>
            <method name="handleStartTag" type="void" line="298">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
            </method>
            <javadoc line="301">
                Called when an end tag is encountered.                
            </javadoc>
            <method name="handleEndTag" type="void" line="304">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
            </method>
            <javadoc line="307">
                An error has occurred.                
            </javadoc>
            <method name="handleError" type="void" line="310">
                <params>
                    <param name="ln" type="int"/>
                    <param name="msg" type="String"/>
                </params>
                <comment line="312">
                    Thread.dumpStack();
                    System.out.println(&quot; &quot; + stack);
                    System.out.println(&quot;line &quot; + ln + &quot;: error: &quot; + msg);
                    System.out.println();                    
                </comment>
            </method>
            <javadoc line="319">
                Output text.                
            </javadoc>
            <method name="handleText" type="void" line="322">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <comment line="341">
                    enlarge buffer if needed                    
                </comment>
                <comment line="348">
                    output pending space                    
                </comment>
                <comment line="358">
                    Handles cases of bad html where the title tag
                     was getting lost when we did error recovery.                    
                </comment>
                <scope line="323">
                    <scope line="325"/>
                </scope>
                <scope line="329">
                    <scope line="331"/>
                </scope>
                <scope line="338">
                    <scope line="339">
                        <scope line="341">
                            <declaration name="newtext" type="char" line="342"/>
                        </scope>
                        <scope line="349"/>
                    </scope>
                </scope>
                <declaration name="newtext" type="char" line="355"/>
                <scope line="359"/>
                <scope line="361"/>
            </method>
            <javadoc line="370">
                Invoke the error handler.                
            </javadoc>
            <method name="error" type="void" line="374">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                    <param name="arg3" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="378">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="381">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="384">
                <params>
                    <param name="err" type="String"/>
                </params>
            </method>
            <javadoc line="389">
                Handle a start tag. The new tag is pushed
                  onto the tag stack. The attribute list is
                  checked for required attributes.                
            </javadoc>
            <method name="startTag" type="void" line="394">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <comment line="398">
                    If the tag is an empty tag and texpos != 0
                     this implies that there is text before the
                     start tag that needs to be processed before
                     handling the tag.                    
                </comment>
                <comment line="408">
                    this variable gets updated in handleText().
                     Since in this case we do not call handleText()
                     we need to update it here.                    
                </comment>
                <comment line="413">
                    Note that we should really check last.breakFlows before
                     assuming this should be false.                    
                </comment>
                <comment line="419">
                    check required attributes                    
                </comment>
                <comment line="431">
                    } else if (elem.getName().equals(&quot;form&quot;)) {
                    handleStartTag(tag);                    
                </comment>
                <declaration name="elem" type="Element" line="395"/>
                <scope line="404"/>
                <scope line="406"/>
                <scope line="419">
                    <scope line="423"/>
                </scope>
                <scope line="428"/>
                <scope line="434"/>
            </method>
            <javadoc line="441">
                Handle an end tag. The end tag is popped
                  from the tag stack.                
            </javadoc>
            <method name="endTag" type="void" line="445">
                <params>
                    <param name="omitted" type="boolean"/>
                </params>
                <comment line="455">
                    handle the tag                    
                </comment>
                <scope line="448"/>
                <scope line="450"/>
            </method>
            <method name="ignoreElement" type="boolean" line="461">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="466">
                    We ignore all elements that are not valid in the context of
                    a table except &lt;td&gt;, &lt;th&gt; (these we handle in
                    legalElementContext()) and #pcdata.  We also ignore the
                    &lt;font&gt; tag in the context of &lt;ul&gt; and &lt;ol&gt; We additonally
                    ignore the &lt;meta&gt; and the &lt;style&gt; tag if the body tag has                    
                </comment>
                <declaration name="stackElement" type="String" line="463"/>
                <declaration name="elemName" type="String" line="464"/>
                <scope line="473"/>
                <scope line="476">
                    <declaration name="s" type="TagStack" line="477"/>
                    <scope line="478"/>
                    <scope line="481"/>
                </scope>
                <scope line="492"/>
            </method>
            <javadoc line="499">
                Marks the first time a tag has been seen in a document                
            </javadoc>
            <method name="markFirstTime" type="void" line="503">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="512">
                    Refer to note in definition of buf for details on this.                    
                </comment>
                <declaration name="elemName" type="String" line="504"/>
                <scope line="505"/>
                <scope line="507"/>
                <scope line="509">
                    <scope line="510">
                        <declaration name="newBuf" type="char[]" line="512"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="521">
                Create a legal content for an element.                
            </javadoc>
            <method name="legalElementContext" type="boolean" line="524">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="527">
                    System.out.println(&quot;-- legalContext -- &quot; + elem);                    
                </comment>
                <comment line="529">
                    Deal with the empty stack                    
                </comment>
                <comment line="531">
                    System.out.println(&quot;-- stack is empty&quot;);                    
                </comment>
                <comment line="533">
                    System.out.println(&quot;-- pushing html&quot;);                    
                </comment>
                <comment line="540">
                    Is it allowed in the current context                    
                </comment>
                <comment line="542">
                    System.out.println(&quot;-- legal context&quot;);                    
                </comment>
                <comment line="548">
                    The use of all error recovery strategies are contingent
                     on the value of the strict property.
                    
                     These are commonly occuring errors.  if insertTag is true,
                     then we want to adopt an error recovery strategy that
                     involves attempting to insert an additional tag to
                     legalize the context.  The two errors addressed here
                     are:
                     1) when a &lt;td&gt; or &lt;th&gt; is seen soon after a &lt;table&gt; tag.
                        In this case we insert a &lt;tr&gt;.
                     2) when any other tag apart from a &lt;tr&gt; is seen
                        in the context of a &lt;tr&gt;.  In this case we would
                        like to add a &lt;td&gt;.  If a &lt;tr&gt; is seen within a
                        &lt;tr&gt; context, then we will close out the current
                        &lt;tr&gt;.
                    
                     This insertion strategy is handled later in the method.
                     The reason for checking this now, is that in other cases
                     we would like to apply other error recovery strategies for example
                     ignoring tags.
                    
                     In certain cases it is better to ignore a tag than try to
                     fix the situation.  So the first test is to see if this
                     is what we need to do.                    
                </comment>
                <comment line="593">
                    Check for anything after the start of the table besides tr, td, th
                     or caption, and if those aren&apos;t there, insert the &lt;tr&gt; and call
                     legalElementContext again.                    
                </comment>
                <comment line="607">
                    They try to find a legal context by checking if the current
                     tag is valid in an enclosing context.  If so
                     close out the tags by outputing end tags and then
                     insert the curent tag.  If the tags that are
                     being closed out do not have an optional end tag
                     specification in the DTD then an html error is
                     reported.                    
                </comment>
                <comment line="629">
                    Check if we know what tag is expected next.
                     If so insert the tag.  Report an error if the
                     tag does not have its start tag spec in the DTD as optional.                    
                </comment>
                <comment line="636">
                    System.out.println(&quot;-- omitting start tag: &quot; + next);                    
                </comment>
                <comment line="647">
                    Traverse the list of expected elements and determine if adding
                     any of these elements would make for a legal context.                    
                </comment>
                <comment line="657">
                    Ensure that this element has not been included as
                     part of the exclusions in the DTD.                    
                </comment>
                <comment line="672">
                    Ensure that no tag that has required attributes
                     gets inserted.                    
                </comment>
                <comment line="681">
                    System.out.println(&quot;-- adding a legal tag: &quot; + e);                    
                </comment>
                <comment line="692">
                    Check if the stack can be terminated.  If so add the appropriate
                     end tag.  Report an error if the tag being ended does not have its
                     end tag spec in the DTD as optional.                    
                </comment>
                <comment line="697">
                    System.out.println(&quot;-- omitting end tag: &quot; + stack.elem);                    
                </comment>
                <comment line="706">
                    At this point we know that something is screwed up.                    
                </comment>
                <scope line="529">
                    <scope line="531"/>
                </scope>
                <scope line="540"/>
                <declaration name="insertTag" type="boolean" line="545"/>
                <declaration name="stackElemName" type="String" line="572"/>
                <declaration name="elemName" type="String" line="573"/>
                <scope line="579"/>
                <scope line="585">
                    <scope line="586"/>
                </scope>
                <scope line="597">
                    <declaration name="e" type="Element" line="598"/>
                    <declaration name="t" type="TagElement" line="599"/>
                </scope>
                <scope line="614">
                    <scope line="615">
                        <scope line="616">
                            <scope line="617"/>
                        </scope>
                        <scope line="622"/>
                    </scope>
                </scope>
                <declaration name="next" type="Element" line="632"/>
                <scope line="634">
                    <declaration name="t" type="TagElement" line="636"/>
                    <scope line="639"/>
                </scope>
                <scope line="650">
                    <declaration name="content" type="ContentModel" line="651"/>
                    <declaration name="elemVec" type="Vector&lt;Element&gt;" line="652"/>
                    <scope line="653">
                        <scope line="655">
                            <scope line="659"/>
                            <declaration name="reqAtts" type="boolean" line="663"/>
                            <scope line="665">
                                <scope line="666"/>
                            </scope>
                            <scope line="674"/>
                            <declaration name="m" type="ContentModel" line="678"/>
                            <scope line="679">
                                <declaration name="t" type="TagElement" line="681"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="695">
                    <scope line="697"/>
                </scope>
            </method>
            <javadoc line="709">
                Create a legal context for a tag.                
            </javadoc>
            <method name="legalTagContext" type="void" line="712">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <comment line="719">
                    Avoid putting a block tag in a flow tag.                    
                </comment>
                <comment line="726">
                    Avoid putting something wierd in the head of the document.                    
                </comment>
                <comment line="738">
                    Everything failed                    
                </comment>
                <scope line="713"/>
                <scope line="719"/>
                <scope line="726">
                    <scope line="727">
                        <scope line="728"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="741">
                Error context. Something went wrong, make sure we are in
                  the document&apos;s body context                
            </javadoc>
            <method name="errorContext" type="void" line="745">
                <scope line="746"/>
                <scope line="749"/>
            </method>
            <javadoc line="755">
                Add a char to the string buffer.                
            </javadoc>
            <method name="addString" type="void" line="758">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="759">
                    <declaration name="newstr" type="char" line="760"/>
                </scope>
            </method>
            <javadoc line="767">
                Get the string that&apos;s been accumulated.                
            </javadoc>
            <method name="getString" type="String" line="770">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="newStr" type="char" line="771"/>
            </method>
            <method name="getChars" type="char[]" line="777">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="newStr" type="char" line="778"/>
            </method>
            <method name="getChars" type="char[]" line="784">
                <params>
                    <param name="pos" type="int"/>
                    <param name="endPos" type="int"/>
                </params>
                <comment line="788">
                    REMIND: it&apos;s not clear whether this version should set strpos or not
                     strpos = pos;                    
                </comment>
                <declaration name="newStr" type="char" line="785"/>
            </method>
            <method name="resetStrBuffer" type="void" line="792"/>
            <method name="strIndexOf" type="int" line="796">
                <params>
                    <param name="target" type="char"/>
                </params>
                <scope line="797">
                    <scope line="798"/>
                </scope>
            </method>
            <javadoc line="806">
                Skip space.
                  [5] 297:5                
            </javadoc>
            <method name="skipSpace" type="void" line="810">
                <scope line="811">
                    <scope line="821"/>
                    <scope line="825"/>
                </scope>
            </method>
            <javadoc line="840">
                Parse identifier. Uppercase characters are folded
                  to lowercase when lower is true. Returns falsed if
                  no identifier is found. [55] 346:17                
            </javadoc>
            <method name="parseIdentifier" type="boolean" line="845">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
                <comment line="892">
                    not officially allowed                    
                </comment>
                <scope line="852"/>
                <scope line="867">
                    <scope line="876"/>
                </scope>
            </method>
            <javadoc line="900">
                Parse an entity reference. [59] 350:17                
            </javadoc>
            <method name="parseEntityReference" type="char[]" line="903">
                <comment line="914">
                    parse decimal reference                    
                </comment>
                <comment line="920">
                    parse hexadecimal reference                    
                </comment>
                <comment line="1001">
                    entities are case sensitive - however if strict
                     is false then we will try to make a match by
                     converting the string to all lowercase.                    
                </comment>
                <comment line="1014">
                                        
                </comment>
                <declaration name="pos" type="int" line="904"/>
                <scope line="906">
                    <declaration name="n" type="int" line="907"/>
                    <scope line="910">
                        <scope line="912">
                            <scope line="914"/>
                        </scope>
                        <scope line="918">
                            <declaration name="lch" type="char" line="921"/>
                            <scope line="923">
                                <scope line="924"/>
                                <scope line="926"/>
                            </scope>
                        </scope>
                        <scope line="942"/>
                        <scope line="946"/>
                        <declaration name="data" type="char" line="955"/>
                    </scope>
                    <scope line="959">
                        <declaration name="data" type="char" line="962"/>
                    </scope>
                </scope>
                <scope line="965">
                    <declaration name="data" type="char" line="966"/>
                </scope>
                <declaration name="semicolon" type="boolean" line="970"/>
                <scope line="981"/>
                <scope line="985"/>
                <declaration name="nm" type="String" line="997"/>
                <declaration name="ent" type="Entity" line="998"/>
                <scope line="1004"/>
                <scope line="1007">
                    <scope line="1009"/>
                    <declaration name="str" type="String" line="1014"/>
                    <declaration name="b" type="char" line="1016"/>
                </scope>
            </method>
            <javadoc line="1023">
                Converts numeric character reference to Unicode character.
                  Normally the code in a reference should be always converted
                  to the Unicode character with the same code, but due to
                  wide usage of Cp1252 charset most browsers map numeric references
                  in the range 130-159 (which are control chars in Unicode set)
                  to displayable characters with other codes.                
                <param>
                    c the code of numeric character reference.                    
                </param>
                <return>
                    the character corresponding to the reference code.                    
                </return>
            </javadoc>
            <method name="mapNumericReference" type="char" line="1035">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="1036"/>
            </method>
            <javadoc line="1042">
                Parse a comment. [92] 391:7                
            </javadoc>
            <method name="parseComment" type="void" line="1045">
                <comment line="1052">
                    Presuming that the start string of a comment &quot;&lt;!--&quot; has
                    already been parsed, the &apos;-&apos; character is valid only as
                    part of a comment termination and further more it must
                    be present in even numbers. Hence if strict is true, we
                    presume the comment has been terminated and return.
                    However if strict is false, then there is no even number
                    requirement and this character can appear anywhere in the
                    comment.  The parser reads on until it sees the following
                    pattern: &quot;--&gt;&quot; or &quot;--!&gt;&quot;.                    
                </comment>
                <comment line="1070">
                                        
                </comment>
                <comment line="1088">
                                        
                </comment>
                <comment line="1094">
                                        
                </comment>
                <scope line="1047">
                    <declaration name="c" type="int" line="1048"/>
                    <scope line="1061">
                        <scope line="1062"/>
                        <scope line="1065">
                            <scope line="1066"/>
                            <scope line="1068"/>
                        </scope>
                    </scope>
                    <scope line="1078">
                        <scope line="1080"/>
                        <scope line="1083">
                            <scope line="1084"/>
                            <scope line="1086"/>
                        </scope>
                    </scope>
                    <scope line="1114"/>
                    <scope line="1118"/>
                </scope>
            </method>
            <javadoc line="1132">
                Parse literal content. [46] 343:1 and [47] 344:1                
            </javadoc>
            <method name="parseLiteral" type="void" line="1135">
                <params>
                    <param name="replace" type="boolean"/>
                </params>
                <comment line="1149">
                    match end tag                    
                </comment>
                <comment line="1197">
                    output character                    
                </comment>
                <scope line="1136">
                    <declaration name="c" type="int" line="1137"/>
                    <declaration name="i" type="int" line="1146"/>
                    <scope line="1149">
                        <scope line="1152">
                            <scope line="1154"/>
                        </scope>
                    </scope>
                    <declaration name="data" type="char" line="1164"/>
                    <scope line="1165">
                        <declaration name="newtext" type="char" line="1166"/>
                    </scope>
                    <scope line="1182"/>
                    <scope line="1186"/>
                    <scope line="1197">
                        <declaration name="newtext" type="char" line="1198"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1206">
                Parse attribute value. [33] 331:1                
            </javadoc>
            <method name="parseAttributeValue" type="String" line="1209">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
                <comment line="1213">
                    Check for a delimiter                    
                </comment>
                <comment line="1222">
                    Parse the rest of the value                    
                </comment>
                <comment line="1286">
                    In SGML a construct like &lt;img src=cgi-binfoo?x=1&gt;
                    is considered invalid since an = sign can only be contained
                    in an attributes value if the string is quoted.                    
                </comment>
                <comment line="1291">
                    If strict is true then we return with the string we have thus far.
                    Otherwise we accept the = sign as part of the attribute&apos;s value and                    
                </comment>
                <declaration name="delim" type="int" line="1210"/>
                <scope line="1222">
                    <declaration name="c" type="int" line="1223"/>
                    <scope line="1230"/>
                    <scope line="1238"/>
                    <scope line="1242"/>
                    <scope line="1245"/>
                    <scope line="1255"/>
                    <scope line="1262"/>
                    <scope line="1271"/>
                    <scope line="1273">
                        <scope line="1275"/>
                        <scope line="1277"/>
                    </scope>
                    <scope line="1284">
                        <scope line="1293"/>
                    </scope>
                    <scope line="1301"/>
                    <declaration name="data" type="char" line="1306"/>
                    <scope line="1307"/>
                    <scope line="1317"/>
                </scope>
            </method>
            <javadoc line="1328">
                Parse attribute specification List. [31] 327:17                
            </javadoc>
            <method name="parseAttributeSpecificationList" type="void" line="1331">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <comment line="1367">
                    Bug ID 4102750
                      Load the NAME of an Attribute Case Sensitive
                      The case of the NAME  must be intact
                      MG 021898                    
                </comment>
                <comment line="1372">
                    attvalue = parseAttributeValue((att != null) &amp;&amp; (att.type != CDATA) &amp;&amp; (att.type != NOTATION));                    
                </comment>
                <comment line="1382">
                    Make it null so that NULL_ATTRIBUTE_VALUE is
                     used                    
                </comment>
                <comment line="1388">
                    allows for comma separated attribute-value pairs                    
                </comment>
                <comment line="1391">
                    allows for quoted attributes                    
                </comment>
                <comment line="1454">
                    Check out the value                    
                </comment>
                <scope line="1333">
                    <scope line="1344"/>
                    <scope line="1348"/>
                    <declaration name="att" type="AttributeList" line="1355"/>
                    <declaration name="attname" type="String" line="1356"/>
                    <declaration name="attvalue" type="String" line="1357"/>
                    <scope line="1359">
                        <scope line="1362"/>
                        <scope line="1372">
                            <scope line="1375">
                                <scope line="1377"/>
                                <scope line="1380"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1387"/>
                    <scope line="1390">
                        <scope line="1393">
                            <scope line="1395"/>
                            <scope line="1399"/>
                            <scope line="1406">
                                <scope line="1409">
                                    <scope line="1411"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1416">
                            <declaration name="str" type="char" line="1417"/>
                        </scope>
                    </scope>
                    <scope line="1422"/>
                    <scope line="1430"/>
                    <scope line="1436">
                        <declaration name="str" type="char" line="1437"/>
                        <scope line="1439"/>
                        <scope line="1442"/>
                    </scope>
                    <scope line="1447"/>
                    <scope line="1449"/>
                    <scope line="1454"/>
                    <scope line="1457"/>
                    <scope line="1460"/>
                    <declaration name="attkey" type="HTML.Attribute" line="1463"/>
                    <scope line="1464"/>
                    <scope line="1466"/>
                </scope>
            </method>
            <javadoc line="1472">
                Parses th Document Declaration Type markup declaration.
                  Currently ignores it.                
            </javadoc>
            <method name="parseDTDMarkup" type="String" line="1476">
                <declaration name="strBuff" type="StringBuilder" line="1478"/>
                <scope line="1480">
                    <scope line="1498"/>
                    <scope line="1502"/>
                </scope>
            </method>
            <javadoc line="1514">
                Parse markup declarations.
                  Currently only handles the Document Type Declaration markup.
                  Returns true if it is a markup declaration false otherwise.                
            </javadoc>
            <method name="parseMarkupDeclarations" type="boolean" line="1519">
                <params>
                    <param name="strBuff" type="StringBuffer"/>
                </params>
                <comment line="1522">
                                        
                </comment>
                <scope line="1523"/>
            </method>
            <javadoc line="1530">
                Parse an invalid tag.                
            </javadoc>
            <method name="parseInvalidTag" type="void" line="1533">
                <comment line="1535">
                    ignore all data upto the close bracket &apos;&gt;&apos;                    
                </comment>
                <scope line="1535"/>
            </method>
            <javadoc line="1551">
                Parse a start or end tag.                
            </javadoc>
            <method name="parseTag" type="void" line="1554">
                <comment line="1565">
                    Parse comment. [92] 391:7                    
                </comment>
                <comment line="1573">
                    send over any text you might see
                     before parsing and sending the
                     comment                    
                </comment>
                <comment line="1612">
                    deal with marked sections                    
                </comment>
                <comment line="1649">
                    parse end tag [19] 317:4                    
                </comment>
                <comment line="1654">
                    empty end tag. either &lt;/&gt; or &lt;/&lt;                    
                </comment>
                <comment line="1687">
                    Ignore RE before end tag                    
                </comment>
                <comment line="1701">
                    If the stack is null, we&apos;re seeing end tags without any begin
                     tags.  Ignore them.                    
                </comment>
                <comment line="1709">
                    Ignore RE before end tag                    
                </comment>
                <comment line="1711">
                    In a pre tag, if there are blank lines
                     we do not want to remove the newline
                     before the end tag.  Hence this code.                    
                </comment>
                <comment line="1724">
                    If the end tag is a form, since we did not put it
                     on the tag stack, there is no corresponding start
                     start tag to find. Hence do not touch the tag stack.                    
                </comment>
                <comment line="1729">
                    if (!strict &amp;&amp; elem.getName().equals(&quot;form&quot;)) {
                    if (lastFormSent != null) {
                    handleEndTag(lastFormSent);
                    return;
                    } else {
                     do nothing.
                    return;
                    }
                    }                    
                </comment>
                <comment line="1742">
                    we will not see a corresponding start tag
                     on the the stack.  If we are seeing an
                     end tag, lets send this on as an empty
                     tag with the end tag attribute set to
                     true.                    
                </comment>
                <comment line="1755">
                    find the corresponding start tag                    
                </comment>
                <comment line="1757">
                    A commonly occuring error appears to be the insertion
                     of extra end tags in a table.  The intent here is ignore
                     such extra end tags.                    
                </comment>
                <comment line="1765">
                    If it isnt a valid end tag ignore it and return                    
                </comment>
                <comment line="1794">
                    People put font ending tags in the darndest places.
                     Don&apos;t close other contexts based on them being between
                     a font tag and the corresponding end tag.  Instead,
                     ignore the end tag like it doesn&apos;t exist and allow the end
                     of the document to close us out.                    
                </comment>
                <comment line="1804">
                    Since closing out a center tag can have real wierd
                     effects on the formatting,  make sure that tags
                     for which omitting an end tag is legimitate
                     get closed out.                    
                </comment>
                <comment line="1819">
                    People do the same thing with center tags.  In this
                     case we would like to close off the center tag but
                     not necessarily all enclosing tags.                    
                </comment>
                <comment line="1825">
                    end tags                    
                </comment>
                <comment line="1838">
                    start tag [14] 314:1                    
                </comment>
                <comment line="1852">
                                        
                </comment>
                <comment line="1855">
                    parseInvalidTag();                    
                </comment>
                <comment line="1865">
                    Parse attributes                    
                </comment>
                <comment line="1890">
                    ignore RE after start tag                    
                </comment>
                <comment line="1909">
                    ensure a legal context for the tag                    
                </comment>
                <comment line="1913">
                    In dealing with forms, we have decided to treat
                    them as legal in any context.  Also, even though
                    they do have a start and an end tag, we will
                    not put this tag on the stack.  This is to deal
                    several pages in the web oasis that choose to                    
                </comment>
                <comment line="1920">
                    if (!strict &amp;&amp; elem.getName().equals(&quot;form&quot;)) {
                    if (lastFormSent == null) {
                    lastFormSent = tag;
                    } else {
                    handleEndTag(lastFormSent);
                    lastFormSent = tag;
                    }
                    } else {                    
                </comment>
                <comment line="1930">
                    Smlly, if a tag is unknown, we will apply
                     no legalTagContext logic to it.                    
                </comment>
                <comment line="1936">
                    If skip tag is true,  this implies that
                     the tag was illegal and that the error
                     recovery strategy adopted is to ignore
                     the tag.                    
                </comment>
                <comment line="1945">
                    }                    
                </comment>
                <declaration name="elem" type="Element" line="1555"/>
                <declaration name="net" type="boolean" line="1556"/>
                <declaration name="warned" type="boolean" line="1557"/>
                <declaration name="unknown" type="boolean" line="1558"/>
                <scope line="1565">
                    <scope line="1566">
                        <scope line="1567">
                            <scope line="1569"/>
                            <scope line="1575">
                                <declaration name="newtext" type="char" line="1576"/>
                            </scope>
                        </scope>
                        <scope line="1586"/>
                    </scope>
                    <scope line="1601"/>
                </scope>
                <declaration name="strBuff" type="StringBuffer" line="1612"/>
                <scope line="1613">
                    <scope line="1615"/>
                    <scope line="1631"/>
                    <scope line="1635"/>
                </scope>
                <scope line="1654"/>
                <scope line="1662"/>
                <scope line="1675"/>
                <scope line="1678"/>
                <declaration name="elemStr" type="String" line="1683"/>
                <scope line="1684">
                    <scope line="1687"/>
                </scope>
                <scope line="1693"/>
                <scope line="1703"/>
                <scope line="1709">
                    <scope line="1714">
                        <scope line="1715"/>
                    </scope>
                    <scope line="1718"/>
                </scope>
                <scope line="1740">
                    <declaration name="t" type="TagElement" line="1746"/>
                </scope>
                <scope line="1760">
                    <declaration name="stackElem" type="String" line="1761"/>
                    <scope line="1763">
                        <scope line="1766"/>
                    </scope>
                    <scope line="1775">
                        <scope line="1777"/>
                    </scope>
                </scope>
                <declaration name="sp" type="TagStack" line="1783"/>
                <scope line="1785"/>
                <scope line="1788"/>
                <declaration name="elemName" type="String" line="1798"/>
                <scope line="1801">
                    <scope line="1808">
                        <scope line="1809"/>
                        <scope line="1812"/>
                    </scope>
                </scope>
                <scope line="1825"/>
                <scope line="1838">
                    <scope line="1840"/>
                </scope>
                <scope line="1844">
                    <declaration name="elemStr" type="String" line="1845"/>
                    <scope line="1847"/>
                    <scope line="1853"/>
                    <scope line="1859"/>
                </scope>
                <scope line="1872"/>
                <scope line="1883">
                    <scope line="1884"/>
                </scope>
                <scope line="1891">
                    <scope line="1892"/>
                    <scope line="1896">
                        <scope line="1898"/>
                        <scope line="1902"/>
                    </scope>
                </scope>
                <declaration name="tag" type="TagElement" line="1909"/>
                <scope line="1932">
                    <scope line="1939"/>
                </scope>
                <scope line="1950">
                    <scope line="1959"/>
                </scope>
            </method>
            <declaration name="START_COMMENT" type="String" line="1967"/>
            <declaration name="END_COMMENT" type="String" line="1968"/>
            <declaration name="SCRIPT_END_TAG" type="char[]" line="1969"/>
            <declaration name="SCRIPT_END_TAG_UPPER_CASE" type="char[]" line="1970"/>
            <method name="parseScript" type="void" line="1973">
                <comment line="1977">
                                        
                </comment>
                <comment line="1989">
                                        
                </comment>
                <comment line="1990">
                                        
                </comment>
                <comment line="1992">
                                        
                </comment>
                <comment line="1996">
                                        
                </comment>
                <comment line="2025">
                    switch                    
                </comment>
                <comment line="2027">
                    while                    
                </comment>
                <declaration name="charsToAdd" type="char[]" line="1974"/>
                <scope line="1977">
                    <declaration name="i" type="int" line="1978"/>
                    <scope line="1981"/>
                    <scope line="1986"/>
                    <scope line="1993">
                        <scope line="1996"/>
                        <scope line="2012"/>
                        <scope line="2015"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2029">
                Parse Content. [24] 320:1                
            </javadoc>
            <method name="parseContent" type="void" line="2032">
                <comment line="2038">
                    resignal the interrupt                    
                </comment>
                <comment line="2045">
                    means: if after starting &lt;script&gt; tag                    
                </comment>
                <comment line="2047">
                                        
                </comment>
                <comment line="2051">
                                        
                </comment>
                <comment line="2060">
                                        
                </comment>
                <comment line="2074">
                    null end tag.                    
                </comment>
                <comment line="2172">
                    enlarge buffer if needed                    
                </comment>
                <comment line="2179">
                    output pending space                    
                </comment>
                <declaration name="curThread" type="Thread" line="2033"/>
                <scope line="2035">
                    <scope line="2036"/>
                    <declaration name="c" type="int" line="2041"/>
                    <scope line="2044">
                        <declaration name="str" type="String" line="2051"/>
                        <declaration name="minLength" type="int" line="2052"/>
                        <scope line="2054"/>
                    </scope>
                    <scope line="2063">
                        <scope line="2072"/>
                        <scope line="2083">
                            <scope line="2084"/>
                            <scope line="2087"/>
                        </scope>
                        <declaration name="data" type="char" line="2091"/>
                        <scope line="2092">
                            <declaration name="newtext" type="char" line="2093"/>
                        </scope>
                        <scope line="2097"/>
                        <scope line="2110"/>
                        <scope line="2113"/>
                        <scope line="2116"/>
                        <scope line="2124"/>
                        <scope line="2128"/>
                        <scope line="2131"/>
                        <scope line="2134"/>
                        <scope line="2137"/>
                        <scope line="2146"/>
                        <scope line="2149"/>
                        <scope line="2152"/>
                        <scope line="2158">
                            <scope line="2159"/>
                            <scope line="2162"/>
                        </scope>
                    </scope>
                    <scope line="2172">
                        <declaration name="newtext" type="char" line="2173"/>
                    </scope>
                    <scope line="2179">
                        <scope line="2180"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="2191">
                Returns the end of line string. This will return the end of line
                  string that has been encountered the most, one of \r, \n or \r\n.                
            </javadoc>
            <method name="getEndOfLineString" type="String" line="2195">
                <scope line="2196">
                    <scope line="2197"/>
                    <scope line="2200"/>
                </scope>
                <scope line="2204">
                    <scope line="2205"/>
                    <scope line="2208"/>
                </scope>
            </method>
            <javadoc line="2214">
                Parse an HTML stream, given a DTD.                
            </javadoc>
            <method name="parse" type="void" line="2217">
                <params>
                    <param name="in" type="Reader"/>
                </params>
                <comment line="2235">
                    NOTE: interruption may have occurred.  Control flows out
                     of here normally.                    
                </comment>
                <scope line="2228">
                    <scope line="2236"/>
                </scope>
                <scope line="2240"/>
                <scope line="2244"/>
                <scope line="2248"/>
                <scope line="2253">
                    <scope line="2254"/>
                </scope>
            </method>
            <declaration name="buf" type="char" line="2276"/>
            <declaration name="pos" type="int" line="2277"/>
            <declaration name="len" type="int" line="2278"/>
            <declaration name="currentPosition" type="int" line="2283"/>
            <method name="readCh" type="int" line="2286">
                <comment line="2291">
                    This loop allows us to ignore interrupts if the flag
                     says so                    
                </comment>
                <comment line="2303">
                    eof                    
                </comment>
                <scope line="2288">
                    <scope line="2292">
                        <scope line="2293"/>
                        <scope line="2296"/>
                    </scope>
                    <scope line="2301"/>
                </scope>
            </method>
            <method name="getCurrentPos" type="int" line="2312"/>
        </class>
    </source>