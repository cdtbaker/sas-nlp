<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <import package="javax.swing.text.SimpleAttributeSet"/>
        <import package="javax.swing.text.html.HTML"/>
        <import package="javax.swing.text.ChangedCharSetException"/>
        <import package="java.io"/>
        <import package="java.util.Hashtable"/>
        <import package="java.util.Properties"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Enumeration"/>
        <import package="java.net.URL"/>
        <import package="sun.misc.MessageUtils"/>
        <class name="Parser" line="12">
            <implements interface="DTDConstants"/>
            <javadoc line="12">
                A simple DTD-driven HTML parser. The parser reads an
                  HTML file from an InputStream and calls various methods
                  (which should be overridden in a subclass) when tags and
                  data are encountered.
                  &lt;p&gt;
                  Unfortunately there are many badly implemented HTML parsers
                  out there, and as a result there are many badly formatted
                  HTML files. This parser attempts to parse most HTML files.
                  This means that the implementation sometimes deviates from
                  the SGML specification in favor of HTML.
                  &lt;p&gt;
                  The parser treats \r and \r\n as \n. Newlines after starttags
                  and before end tags are ignored just as specified in the SGML/HTML
                  specification.
                  &lt;p&gt;
                  The html spec does not specify how spaces are to be coalesced very well.
                  Specifically, the following scenarios are not discussed (note that a
                  space should be used here, but I am using &amp;amp;nbsp to force the space to
                  be displayed):
                  &lt;p&gt;
                  &apos;&amp;lt;b&gt;blah&amp;nbsp;&amp;lt;i&gt;&amp;nbsp;&amp;lt;strike&gt;&amp;nbsp;foo&apos; which can be treated as:
                  &apos;&amp;lt;b&gt;blah&amp;nbsp;&amp;lt;i&gt;&amp;lt;strike&gt;foo&apos;
                  &lt;p&gt;as well as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt;&amp;nbsp;&amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  which appears to be treated as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt;&amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  &lt;p&gt;
                  If &lt;code&gt;strict&lt;/code&gt; is false, when a tag that breaks flow,
                  (&lt;code&gt;TagElement.breaksFlows&lt;/code&gt;) or trailing whitespace is
                  encountered, all whitespace will be ignored until a non whitespace
                  character is encountered. This appears to give behavior closer to
                  the popular browsers.                
                <see>
                    DTD                    
                </see>
                <see>
                    TagElement                    
                </see>
                <see>
                    SimpleAttributeSet                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="text" type="char" line="52"/>
            <declaration name="textpos" type="int" line="53"/>
            <declaration name="last" type="TagElement" line="54"/>
            <declaration name="space" type="boolean" line="55"/>
            <declaration name="str" type="char" line="56"/>
            <declaration name="strpos" type="int" line="57"/>
            <declaration name="dtd" type="DTD" line="58"/>
            <declaration name="ch" type="int" line="59"/>
            <declaration name="ln" type="int" line="60"/>
            <declaration name="in" type="Reader" line="61"/>
            <declaration name="recent" type="Element" line="62"/>
            <declaration name="stack" type="TagStack" line="63"/>
            <declaration name="skipTag" type="boolean" line="64"/>
            <declaration name="lastFormSent" type="TagElement" line="65"/>
            <declaration name="attributes" type="SimpleAttributeSet" line="66"/>
            <declaration name="seenHtml" type="boolean" line="67"/>
            <declaration name="seenHead" type="boolean" line="68"/>
            <declaration name="seenBody" type="boolean" line="69"/>
            <declaration name="ignoreSpace" type="boolean" line="70"/>
            <javadoc line="70">
                The html spec does not specify how spaces are coalesced very well.
                  If strict == false, ignoreSpace is used to try and mimic the behavior
                  of the popular browsers.
                  &lt;p&gt;
                  The problematic scenarios are:
                  &apos;&amp;lt;b&gt;blah &amp;lt;i&gt; &amp;lt;strike&gt; foo&apos; which can be treated as:
                  &apos;&amp;lt;b&gt;blah &amp;lt;i&gt;&amp;lt;strike&gt;foo&apos;
                  as well as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt; &amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  which appears to be treated as:
                  &apos;&amp;lt;p&gt;&amp;lt;a href=&quot;xx&quot;&gt;&amp;lt;em&gt;Using&amp;lt;/em&gt;&amp;lt;/a&gt;&amp;lt;/p&gt;&apos;
                  &lt;p&gt;
                  When a tag that breaks flow, or trailing whitespace is encountered
                  ignoreSpace is set to true. From then on, all whitespace will be
                  ignored.
                  ignoreSpace will be set back to false the first time a
                  non whitespace character is encountered. This appears to give
                  behavior closer to the popular browsers.                
            </javadoc>
            <declaration name="strict" type="boolean" line="91"/>
            <javadoc line="91">
                This flag determines whether or not the Parser will be strict
                  in enforcing SGML compatibility.  If false, it will be lenient
                  with certain common classes of erroneous HTML constructs.
                  Strict or not, in either case an error will be recorded.                
            </javadoc>
            <declaration name="crlfCount" type="int" line="98"/>
            <javadoc line="98">
                Number of \r\n&apos;s encountered.                
            </javadoc>
            <declaration name="crCount" type="int" line="102"/>
            <javadoc line="102">
                Number of \r&apos;s encountered. A \r\n will not increment this.                
            </javadoc>
            <declaration name="lfCount" type="int" line="106"/>
            <javadoc line="106">
                Number of \n&apos;s encountered. A \r\n will not increment this.                
            </javadoc>
            <declaration name="currentBlockStartPos" type="int" line="110"/>
            <javadoc line="110">
                The start position of the current block. Block is overloaded here,
                  it really means the current start position for the current comment,
                  tag, text. Use getBlockStartPosition to access this.                
            </javadoc>
            <declaration name="lastBlockStartPos" type="int" line="116"/>
            <javadoc line="116">
                Start position of the last block.                
            </javadoc>
            <declaration name="cp1252Map" type="char[]" line="120"/>
            <javadoc line="120">
                array for mapping numeric references in range
                  130-159 to displayable Unicode characters.                
            </javadoc>
            <method name="Parser" type="constructor" line="125">
                <params>
                    <param name="dtd" type="DTD"/>
                </params>
            </method>
            <javadoc line="128">
                @return the line number of the line currently being parsed                
            </javadoc>
            <method name="getCurrentLine" type="int" line="131"/>
            <javadoc line="134">
                Returns the start position of the current block. Block is
                  overloaded here, it really means the current start position for
                  the current comment tag, text, block.... This is provided for
                  subclassers that wish to know the start of the current block when
                  called with one of the handleXXX methods.                
            </javadoc>
            <method name="getBlockStartPosition" type="int" line="141"/>
            <javadoc line="144">
                Makes a TagElement.                
            </javadoc>
            <method name="makeTag" type="TagElement" line="147">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="fictional" type="boolean"/>
                </params>
            </method>
            <method name="makeTag" type="TagElement" line="150">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <method name="getAttributes" type="SimpleAttributeSet" line="153"/>
            <method name="flushAttributes" type="void" line="156"/>
            <javadoc line="159">
                Called when PCDATA is encountered.                
            </javadoc>
            <method name="handleText" type="void" line="162">
                <params>
                    <param name="text" type="char"/>
                </params>
            </method>
            <javadoc line="164">
                Called when an HTML title tag is encountered.                
            </javadoc>
            <method name="handleTitle" type="void" line="167">
                <params>
                    <param name="text" type="char"/>
                </params>
            </method>
            <javadoc line="170">
                Called when an HTML comment is encountered.                
            </javadoc>
            <method name="handleComment" type="void" line="173">
                <params>
                    <param name="text" type="char"/>
                </params>
            </method>
            <method name="handleEOFInComment" type="void" line="175">
                <declaration name="commentEndPos" type="int" line="176"/>
                <scope line="177">
                    <scope line="179"/>
                    <scope line="184"/>
                </scope>
                <scope line="189"/>
            </method>
            <javadoc line="193">
                Called when an empty tag is encountered.                
            </javadoc>
            <method name="handleEmptyTag" type="void" line="196">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
            </method>
            <javadoc line="198">
                Called when a start tag is encountered.                
            </javadoc>
            <method name="handleStartTag" type="void" line="201">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
            </method>
            <javadoc line="203">
                Called when an end tag is encountered.                
            </javadoc>
            <method name="handleEndTag" type="void" line="206">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
            </method>
            <javadoc line="208">
                An error has occurred.                
            </javadoc>
            <method name="handleError" type="void" line="211">
                <params>
                    <param name="ln" type="int"/>
                    <param name="msg" type="String"/>
                </params>
            </method>
            <javadoc line="213">
                Output text.                
            </javadoc>
            <method name="handleText" type="void" line="216">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <scope line="217">
                    <scope line="219"/>
                </scope>
                <scope line="223">
                    <scope line="224"/>
                </scope>
                <scope line="231">
                    <scope line="232">
                        <scope line="233">
                            <declaration name="newtext" type="char" line="234"/>
                        </scope>
                        <scope line="239"/>
                    </scope>
                </scope>
                <declaration name="newtext" type="char" line="245"/>
                <scope line="247"/>
                <scope line="250"/>
            </method>
            <javadoc line="258">
                Invoke the error handler.                
            </javadoc>
            <method name="error" type="void" line="261">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                    <param name="arg3" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="264">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="String"/>
                    <param name="arg2" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="267">
                <params>
                    <param name="err" type="String"/>
                    <param name="arg1" type="String"/>
                </params>
            </method>
            <method name="error" type="void" line="270">
                <params>
                    <param name="err" type="String"/>
                </params>
            </method>
            <javadoc line="273">
                Handle a start tag. The new tag is pushed
                  onto the tag stack. The attribute list is
                  checked for required attributes.                
            </javadoc>
            <method name="startTag" type="void" line="278">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <declaration name="elem" type="Element" line="279"/>
                <scope line="280"/>
                <scope line="283"/>
                <scope line="288">
                    <scope line="289"/>
                </scope>
                <scope line="293"/>
                <scope line="296"/>
            </method>
            <javadoc line="302">
                Handle an end tag. The end tag is popped
                  from the tag stack.                
            </javadoc>
            <method name="endTag" type="void" line="306">
                <params>
                    <param name="omitted" type="boolean"/>
                </params>
                <scope line="308"/>
                <scope line="311"/>
            </method>
            <method name="ignoreElement" type="boolean" line="318">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="stackElement" type="String" line="319"/>
                <declaration name="elemName" type="String" line="320"/>
                <scope line="321"/>
                <scope line="324">
                    <declaration name="s" type="TagStack" line="325"/>
                    <scope line="326"/>
                    <scope line="329"/>
                </scope>
                <scope line="333"/>
            </method>
            <javadoc line="338">
                Marks the first time a tag has been seen in a document                
            </javadoc>
            <method name="markFirstTime" type="void" line="341">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="elemName" type="String" line="342"/>
                <scope line="343"/>
                <scope line="346"/>
                <scope line="349">
                    <scope line="350">
                        <declaration name="newBuf" type="char[]" line="351"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="358">
                Create a legal content for an element.                
            </javadoc>
            <method name="legalElementContext" type="boolean" line="361">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="362">
                    <scope line="363"/>
                </scope>
                <scope line="369"/>
                <declaration name="insertTag" type="boolean" line="373"/>
                <declaration name="stackElemName" type="String" line="374"/>
                <declaration name="elemName" type="String" line="375"/>
                <scope line="376"/>
                <scope line="379">
                    <scope line="380"/>
                </scope>
                <scope line="385">
                    <declaration name="e" type="Element" line="386"/>
                    <declaration name="t" type="TagElement" line="387"/>
                </scope>
                <scope line="393">
                    <scope line="394">
                        <scope line="395">
                            <scope line="396"/>
                        </scope>
                        <scope line="401"/>
                    </scope>
                </scope>
                <declaration name="next" type="Element" line="406"/>
                <scope line="407">
                    <declaration name="t" type="TagElement" line="408"/>
                    <scope line="411"/>
                </scope>
                <scope line="416">
                    <declaration name="content" type="ContentModel" line="417"/>
                    <declaration name="elemVec" type="Vector&lt;Element&gt;" line="418"/>
                    <scope line="419">
                        <scope line="421">
                            <scope line="422"/>
                            <declaration name="reqAtts" type="boolean" line="425"/>
                            <scope line="426">
                                <scope line="427"/>
                            </scope>
                            <scope line="432"/>
                            <declaration name="m" type="ContentModel" line="435"/>
                            <scope line="436">
                                <declaration name="t" type="TagElement" line="437"/>
                            </scope>
                        </scope>
                    </scope>
                </scope>
                <scope line="446">
                    <scope line="447"/>
                </scope>
            </method>
            <javadoc line="455">
                Create a legal context for a tag.                
            </javadoc>
            <method name="legalTagContext" type="void" line="458">
                <params>
                    <param name="tag" type="TagElement"/>
                </params>
                <scope line="459"/>
                <scope line="463"/>
                <scope line="468">
                    <scope line="469">
                        <scope line="470"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="480">
                Error context. Something went wrong, make sure we are in
                  the document&apos;s body context                
            </javadoc>
            <method name="errorContext" type="void" line="484">
                <scope line="485"/>
                <scope line="488"/>
            </method>
            <javadoc line="493">
                Add a char to the string buffer.                
            </javadoc>
            <method name="addString" type="void" line="496">
                <params>
                    <param name="c" type="int"/>
                </params>
                <scope line="497">
                    <declaration name="newstr" type="char" line="498"/>
                </scope>
            </method>
            <javadoc line="504">
                Get the string that&apos;s been accumulated.                
            </javadoc>
            <method name="getString" type="String" line="507">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="newStr" type="char" line="508"/>
            </method>
            <method name="getChars" type="char[]" line="513">
                <params>
                    <param name="pos" type="int"/>
                </params>
                <declaration name="newStr" type="char" line="514"/>
            </method>
            <method name="getChars" type="char[]" line="519">
                <params>
                    <param name="pos" type="int"/>
                    <param name="endPos" type="int"/>
                </params>
                <declaration name="newStr" type="char" line="520"/>
            </method>
            <method name="resetStrBuffer" type="void" line="524"/>
            <method name="strIndexOf" type="int" line="527">
                <params>
                    <param name="target" type="char"/>
                </params>
                <scope line="528">
                    <scope line="529"/>
                </scope>
            </method>
            <javadoc line="535">
                Skip space.
                  [5] 297:5                
            </javadoc>
            <method name="skipSpace" type="void" line="539">
                <scope line="540">
                    <scope line="549"/>
                    <scope line="553"/>
                </scope>
            </method>
            <javadoc line="566">
                Parse identifier. Uppercase characters are folded
                  to lowercase when lower is true. Returns falsed if
                  no identifier is found. [55] 346:17                
            </javadoc>
            <method name="parseIdentifier" type="boolean" line="571">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
                <scope line="599"/>
                <scope line="632">
                    <scope line="661"/>
                </scope>
            </method>
            <javadoc line="709">
                Parse an entity reference. [59] 350:17                
            </javadoc>
            <method name="parseEntityReference" type="char[]" line="712">
                <declaration name="pos" type="int" line="713"/>
                <scope line="714">
                    <declaration name="n" type="int" line="715"/>
                    <scope line="717">
                        <scope line="718">
                            <scope line="719"/>
                        </scope>
                        <scope line="724">
                            <declaration name="lch" type="char" line="726"/>
                            <scope line="727">
                                <scope line="728"/>
                                <scope line="731"/>
                            </scope>
                        </scope>
                        <scope line="746"/>
                        <scope line="750"/>
                        <declaration name="data" type="char" line="758"/>
                    </scope>
                    <scope line="762">
                        <declaration name="data" type="char" line="765"/>
                    </scope>
                </scope>
                <scope line="769">
                    <declaration name="data" type="char" line="770"/>
                </scope>
                <declaration name="semicolon" type="boolean" line="773"/>
                <scope line="782"/>
                <scope line="786"/>
                <declaration name="nm" type="String" line="795"/>
                <declaration name="ent" type="Entity" line="796"/>
                <scope line="797"/>
                <scope line="800">
                    <scope line="801"/>
                    <declaration name="str" type="String" line="805"/>
                    <declaration name="b" type="char" line="806"/>
                </scope>
            </method>
            <javadoc line="812">
                Converts numeric character reference to Unicode character.
                  Normally the code in a reference should be always converted
                  to the Unicode character with the same code, but due to
                  wide usage of Cp1252 charset most browsers map numeric references
                  in the range 130-159 (which are control chars in Unicode set)
                  to displayable characters with other codes.                
                <param>
                    c the code of numeric character reference.                    
                </param>
                <return>
                    the character corresponding to the reference code.                    
                </return>
            </javadoc>
            <method name="mapNumericReference" type="char" line="822">
                <params>
                    <param name="c" type="char"/>
                </params>
                <scope line="823"/>
            </method>
            <javadoc line="828">
                Parse a comment. [92] 391:7                
            </javadoc>
            <method name="parseComment" type="void" line="831">
                <scope line="832">
                    <declaration name="c" type="int" line="833"/>
                    <scope line="836">
                        <scope line="837"/>
                        <scope line="840">
                            <scope line="841"/>
                            <scope line="844"/>
                        </scope>
                    </scope>
                    <scope line="852">
                        <scope line="854"/>
                        <scope line="857">
                            <scope line="858"/>
                            <scope line="861"/>
                        </scope>
                    </scope>
                    <scope line="883"/>
                    <scope line="887"/>
                </scope>
            </method>
            <javadoc line="899">
                Parse literal content. [46] 343:1 and [47] 344:1                
            </javadoc>
            <method name="parseLiteral" type="void" line="902">
                <params>
                    <param name="replace" type="boolean"/>
                </params>
                <scope line="903">
                    <declaration name="c" type="int" line="904"/>
                    <declaration name="i" type="int" line="912"/>
                    <scope line="913">
                        <scope line="915">
                            <scope line="917"/>
                        </scope>
                    </scope>
                    <declaration name="data" type="char" line="926"/>
                    <scope line="927">
                        <declaration name="newtext" type="char" line="928"/>
                    </scope>
                    <scope line="942"/>
                    <scope line="946"/>
                    <scope line="955">
                        <declaration name="newtext" type="char" line="956"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="963">
                Parse attribute value. [33] 331:1                
            </javadoc>
            <method name="parseAttributeValue" type="String" line="966">
                <params>
                    <param name="lower" type="boolean"/>
                </params>
                <declaration name="delim" type="int" line="967"/>
                <scope line="975">
                    <declaration name="c" type="int" line="976"/>
                    <scope line="982"/>
                    <scope line="988"/>
                    <scope line="992"/>
                    <scope line="995"/>
                    <scope line="1003"/>
                    <scope line="1009"/>
                    <scope line="1017"/>
                    <scope line="1020">
                        <scope line="1022"/>
                        <scope line="1025"/>
                    </scope>
                    <scope line="1031">
                        <scope line="1033"/>
                    </scope>
                    <scope line="1040"/>
                    <declaration name="data" type="char" line="1044"/>
                    <scope line="1045"/>
                    <scope line="1053"/>
                </scope>
            </method>
            <javadoc line="1062">
                Parse attribute specification List. [31] 327:17                
            </javadoc>
            <method name="parseAttributeSpecificationList" type="void" line="1065">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <scope line="1066">
                    <scope line="1075"/>
                    <scope line="1080"/>
                    <declaration name="att" type="AttributeList" line="1086"/>
                    <declaration name="attname" type="String" line="1087"/>
                    <declaration name="attvalue" type="String" line="1088"/>
                    <scope line="1089">
                        <scope line="1092"/>
                        <scope line="1098">
                            <scope line="1101">
                                <scope line="1103"/>
                                <scope line="1106"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="1112"/>
                    <scope line="1116">
                        <scope line="1119">
                            <scope line="1121"/>
                            <scope line="1125"/>
                            <scope line="1131">
                                <scope line="1134">
                                    <scope line="1136"/>
                                </scope>
                            </scope>
                        </scope>
                        <scope line="1142">
                            <declaration name="str" type="char" line="1143"/>
                        </scope>
                    </scope>
                    <scope line="1149"/>
                    <scope line="1156"/>
                    <scope line="1163">
                        <declaration name="str" type="char" line="1164"/>
                        <scope line="1166"/>
                        <scope line="1170"/>
                    </scope>
                    <scope line="1174"/>
                    <scope line="1177"/>
                    <scope line="1180"/>
                    <scope line="1183"/>
                    <scope line="1186"/>
                    <declaration name="attkey" type="HTML.Attribute" line="1189"/>
                    <scope line="1190"/>
                    <scope line="1193"/>
                </scope>
            </method>
            <javadoc line="1198">
                Parses th Document Declaration Type markup declaration.
                  Currently ignores it.                
            </javadoc>
            <method name="parseDTDMarkup" type="String" line="1202">
                <declaration name="strBuff" type="StringBuilder" line="1203"/>
                <scope line="1205">
                    <scope line="1223"/>
                    <scope line="1227"/>
                </scope>
            </method>
            <javadoc line="1238">
                Parse markup declarations.
                  Currently only handles the Document Type Declaration markup.
                  Returns true if it is a markup declaration false otherwise.                
            </javadoc>
            <method name="parseMarkupDeclarations" type="boolean" line="1243">
                <params>
                    <param name="strBuff" type="StringBuffer"/>
                </params>
                <scope line="1244"/>
            </method>
            <javadoc line="1250">
                Parse an invalid tag.                
            </javadoc>
            <method name="parseInvalidTag" type="void" line="1253">
                <scope line="1254"/>
            </method>
            <javadoc line="1268">
                Parse a start or end tag.                
            </javadoc>
            <method name="parseTag" type="void" line="1271">
                <declaration name="elem" type="Element" line="1272"/>
                <declaration name="net" type="boolean" line="1273"/>
                <declaration name="warned" type="boolean" line="1274"/>
                <declaration name="unknown" type="boolean" line="1275"/>
                <scope line="1280">
                    <scope line="1281">
                        <scope line="1282">
                            <scope line="1284"/>
                            <scope line="1287">
                                <declaration name="newtext" type="char" line="1288"/>
                            </scope>
                        </scope>
                        <scope line="1299"/>
                    </scope>
                    <scope line="1314"/>
                </scope>
                <declaration name="strBuff" type="StringBuffer" line="1322"/>
                <scope line="1323">
                    <scope line="1325"/>
                    <scope line="1341"/>
                    <scope line="1345"/>
                </scope>
                <scope line="1360"/>
                <scope line="1367"/>
                <scope line="1379"/>
                <scope line="1382"/>
                <declaration name="elemStr" type="String" line="1387"/>
                <scope line="1388">
                    <scope line="1390"/>
                </scope>
                <scope line="1397"/>
                <scope line="1402"/>
                <scope line="1406">
                    <scope line="1407">
                        <scope line="1408"/>
                    </scope>
                    <scope line="1412"/>
                </scope>
                <scope line="1416">
                    <declaration name="t" type="TagElement" line="1417"/>
                </scope>
                <scope line="1424">
                    <declaration name="stackElem" type="String" line="1425"/>
                    <scope line="1426">
                        <scope line="1427"/>
                    </scope>
                    <scope line="1432">
                        <scope line="1433"/>
                    </scope>
                </scope>
                <declaration name="sp" type="TagStack" line="1439"/>
                <scope line="1440"/>
                <scope line="1443"/>
                <declaration name="elemName" type="String" line="1447"/>
                <scope line="1448">
                    <scope line="1449">
                        <scope line="1450"/>
                        <scope line="1453"/>
                    </scope>
                </scope>
                <scope line="1459"/>
                <scope line="1468">
                    <scope line="1470"/>
                </scope>
                <scope line="1475">
                    <declaration name="elemStr" type="String" line="1476"/>
                    <scope line="1477"/>
                    <scope line="1480"/>
                    <scope line="1486"/>
                </scope>
                <scope line="1496"/>
                <scope line="1505">
                    <scope line="1506"/>
                </scope>
                <scope line="1510">
                    <scope line="1511"/>
                    <scope line="1516">
                        <scope line="1518"/>
                        <scope line="1522"/>
                    </scope>
                </scope>
                <declaration name="tag" type="TagElement" line="1527"/>
                <scope line="1528">
                    <scope line="1530"/>
                </scope>
                <scope line="1536">
                    <scope line="1545"/>
                </scope>
            </method>
            <declaration name="START_COMMENT" type="String" line="1552"/>
            <declaration name="END_COMMENT" type="String" line="1553"/>
            <declaration name="SCRIPT_END_TAG" type="char[]" line="1554"/>
            <declaration name="SCRIPT_END_TAG_UPPER_CASE" type="char[]" line="1555"/>
            <method name="parseScript" type="void" line="1556">
                <declaration name="charsToAdd" type="char[]" line="1557"/>
                <scope line="1558">
                    <declaration name="i" type="int" line="1559"/>
                    <scope line="1560"/>
                    <scope line="1565"/>
                    <scope line="1569">
                        <scope line="1570"/>
                        <scope line="1585"/>
                        <scope line="1589"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1602">
                Parse Content. [24] 320:1                
            </javadoc>
            <method name="parseContent" type="void" line="1605">
                <declaration name="curThread" type="Thread" line="1606"/>
                <scope line="1607">
                    <scope line="1608"/>
                    <declaration name="c" type="int" line="1612"/>
                    <scope line="1614">
                        <declaration name="str" type="String" line="1617"/>
                        <declaration name="minLength" type="int" line="1618"/>
                        <scope line="1619"/>
                    </scope>
                    <scope line="1626">
                        <scope line="1634"/>
                        <scope line="1642">
                            <scope line="1643"/>
                            <scope line="1646"/>
                        </scope>
                        <declaration name="data" type="char" line="1650"/>
                        <scope line="1651">
                            <declaration name="newtext" type="char" line="1652"/>
                        </scope>
                        <scope line="1656"/>
                        <scope line="1668"/>
                        <scope line="1671"/>
                        <scope line="1674"/>
                        <scope line="1681"/>
                        <scope line="1685"/>
                        <scope line="1688"/>
                        <scope line="1691"/>
                        <scope line="1694"/>
                        <scope line="1701"/>
                        <scope line="1704"/>
                        <scope line="1707"/>
                        <scope line="1712">
                            <scope line="1713"/>
                            <scope line="1716"/>
                        </scope>
                    </scope>
                    <scope line="1724">
                        <declaration name="newtext" type="char" line="1725"/>
                    </scope>
                    <scope line="1729">
                        <scope line="1730"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="1740">
                Returns the end of line string. This will return the end of line
                  string that has been encountered the most, one of \r, \n or \r\n.                
            </javadoc>
            <method name="getEndOfLineString" type="String" line="1744">
                <scope line="1745">
                    <scope line="1746"/>
                    <scope line="1749"/>
                </scope>
                <scope line="1753">
                    <scope line="1754"/>
                    <scope line="1757"/>
                </scope>
            </method>
            <javadoc line="1762">
                Parse an HTML stream, given a DTD.                
            </javadoc>
            <method name="parse" type="void" line="1765">
                <params>
                    <param name="in" type="Reader"/>
                </params>
                <scope line="1772">
                    <scope line="1777"/>
                </scope>
                <scope line="1782"/>
                <scope line="1787"/>
                <scope line="1792"/>
                <scope line="1798">
                    <scope line="1799"/>
                </scope>
            </method>
            <declaration name="buf" type="char" line="1806"/>
            <declaration name="pos" type="int" line="1807"/>
            <declaration name="len" type="int" line="1808"/>
            <declaration name="currentPosition" type="int" line="1809"/>
            <method name="readCh" type="int" line="1810">
                <scope line="1811">
                    <scope line="1812">
                        <scope line="1813"/>
                        <scope line="1817"/>
                    </scope>
                    <scope line="1821"/>
                </scope>
            </method>
            <method name="getCurrentPos" type="int" line="1829"/>
        </class>
    </source>