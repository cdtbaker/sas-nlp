<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.util"/>
        <import package="javax.swing"/>
        <import package="javax.swing.text"/>
        <import package="javax.swing.event"/>
        <class name="FrameSetView" line="7">
            <extends class="javax.swing.text.BoxView"/>
            <javadoc line="7">
                Implements a FrameSetView, intended to support the HTML
                  &amp;lt;FRAMESET&amp;gt; tag.  Supports the ROWS and COLS attributes.                
                <author>
                    Sunita Mani
                      Credit also to the hotjava browser engineers that
                      worked on making the allocation of space algorithms
                      conform to the HTML 4.0 standard and also be netscape
                      compatible.                    
                </author>
            </javadoc>
            <declaration name="children" type="String[]" line="17"/>
            <declaration name="percentChildren" type="int[]" line="18"/>
            <declaration name="absoluteChildren" type="int[]" line="19"/>
            <declaration name="relativeChildren" type="int[]" line="20"/>
            <declaration name="percentTotals" type="int" line="21"/>
            <declaration name="absoluteTotals" type="int" line="22"/>
            <declaration name="relativeTotals" type="int" line="23"/>
            <javadoc line="24">
                Constructs a FrameSetView for the given element.                
                <param>
                    elem the element that this view is responsible for                    
                </param>
            </javadoc>
            <method name="FrameSetView" type="constructor" line="28">
                <params>
                    <param name="elem" type="Element"/>
                    <param name="axis" type="int"/>
                </params>
            </method>
            <javadoc line="32">
                Parses the ROW or COL attributes and returns
                  an array of strings that represent the space
                  distribution.                
            </javadoc>
            <method name="parseRowColSpec" type="String[]" line="37">
                <params>
                    <param name="key" type="HTML.Attribute"/>
                </params>
                <declaration name="attributes" type="AttributeSet" line="38"/>
                <declaration name="spec" type="String" line="39"/>
                <scope line="40">
                    <scope line="41"/>
                </scope>
                <declaration name="tokenizer" type="StringTokenizer" line="45"/>
                <declaration name="nTokens" type="int" line="46"/>
                <declaration name="n" type="int" line="47"/>
                <declaration name="items" type="String[]" line="48"/>
                <declaration name="i" type="int" line="49"/>
                <scope line="50">
                    <scope line="52"/>
                </scope>
                <scope line="56"/>
            </method>
            <javadoc line="61">
                Initializes a number of internal state variables
                  that store information about space allocation
                  for the frames contained within the frameset.                
            </javadoc>
            <method name="init" type="void" line="66">
                <scope line="67"/>
                <scope line="70"/>
                <scope line="76">
                    <scope line="80">
                        <scope line="81"/>
                        <scope line="85"/>
                    </scope>
                    <scope line="90"/>
                    <scope line="94"/>
                </scope>
                <scope line="98">
                    <scope line="99">
                        <scope line="100"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="107">
                Perform layout for the major axis of the box (i.e. the
                  axis that it represents).  The results of the layout should
                  be placed in the given arrays which represent the allocations
                  to the children along the major axis.                
                <param>
                    targetSpan the total span given to the view, which
                      whould be used to layout the children                    
                </param>
                <param>
                    axis the axis being layed out                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views; this is a return value and is
                      filled in by the implementation of this method                    
                </param>
                <param>
                    spans the span of each child view; this is a return
                      value and is filled in by the implementation of this method                    
                </param>
                <return>
                    the offset and span for each child view in the
                      offsets and spans parameters                    
                </return>
            </javadoc>
            <method name="layoutMajorAxis" type="void" line="123">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <scope line="124"/>
            </method>
            <method name="getChildRequests" type="SizeRequirements[]" line="129">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                </params>
                <declaration name="span" type="int" line="130"/>
                <declaration name="n" type="int" line="132"/>
                <declaration name="reqs" type="SizeRequirements[]" line="133"/>
                <scope line="134">
                    <declaration name="v" type="View" line="135"/>
                    <scope line="136"/>
                    <scope line="140">
                        <declaration name="min" type="int" line="141"/>
                        <declaration name="pref" type="int" line="142"/>
                        <declaration name="max" type="int" line="143"/>
                        <declaration name="a" type="float" line="144"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="150">
                This method is responsible for returning in span[] the
                  span for each child view along the major axis.  it
                  computes this based on the information that extracted
                  from the value of the ROW/COL attribute.                
            </javadoc>
            <method name="spread" type="void" line="156">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="span" type="int"/>
                </params>
                <scope line="157"/>
                <declaration name="tempSpace" type="int" line="160"/>
                <declaration name="remainingSpace" type="int" line="161"/>
                <scope line="162">
                    <scope line="163"/>
                </scope>
                <scope line="169">
                    <scope line="170"/>
                    <scope line="174"/>
                </scope>
                <scope line="179">
                    <scope line="180">
                        <scope line="181"/>
                    </scope>
                </scope>
                <scope line="186">
                    <declaration name="vTotal" type="float" line="187"/>
                    <declaration name="tempPercents" type="float[]" line="188"/>
                    <scope line="190"/>
                    <declaration name="i" type="int" line="195"/>
                    <scope line="196">
                        <scope line="197"/>
                        <scope line="201"/>
                    </scope>
                </scope>
            </method>
            <method name="parseDigits" type="int" line="209">
                <params>
                    <param name="mixedStr" type="String"/>
                </params>
                <declaration name="result" type="int" line="210"/>
                <scope line="211">
                    <declaration name="ch" type="char" line="212"/>
                    <scope line="213"/>
                </scope>
            </method>
        </class>
    </source>