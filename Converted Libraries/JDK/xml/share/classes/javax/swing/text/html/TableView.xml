<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.awt"/>
        <import package="java.util.BitSet"/>
        <import package="java.util.Vector"/>
        <import package="java.util.Arrays"/>
        <import package="javax.swing.SizeRequirements"/>
        <import package="javax.swing.event.DocumentEvent"/>
        <import package="javax.swing.text"/>
        <class name="TableView" line="9">
            <extends class="BoxView"/>
            <implements interface="ViewFactory"/>
            <javadoc line="9">
                HTML table view.                
                <author>
                    Timothy Prinzing                    
                </author>
                <see>
                    View                    
                </see>
            </javadoc>
            <javadoc line="15">
                Constructs a TableView for the given element.                
                <param>
                    elem the element that this view is responsible for                    
                </param>
            </javadoc>
            <method name="TableView" type="constructor" line="19">
                <params>
                    <param name="elem" type="Element"/>
                </params>
            </method>
            <javadoc line="26">
                Creates a new table row.                
                <param>
                    elem an element                    
                </param>
                <return>
                    the row                    
                </return>
            </javadoc>
            <method name="createTableRow" type="RowView" line="31">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="o" type="Object" line="32"/>
                <scope line="33"/>
            </method>
            <javadoc line="38">
                The number of columns in the table.                
            </javadoc>
            <method name="getColumnCount" type="int" line="41"/>
            <javadoc line="44">
                Fetches the span (width) of the given column.
                  This is used by the nested cells to query the
                  sizes of grid locations outside of themselves.                
            </javadoc>
            <method name="getColumnSpan" type="int" line="49">
                <params>
                    <param name="col" type="int"/>
                </params>
                <scope line="50"/>
            </method>
            <javadoc line="55">
                The number of rows in the table.                
            </javadoc>
            <method name="getRowCount" type="int" line="58"/>
            <javadoc line="61">
                Fetch the span of multiple rows.  This includes
                  the border area.                
            </javadoc>
            <method name="getMultiRowSpan" type="int" line="65">
                <params>
                    <param name="row0" type="int"/>
                    <param name="row1" type="int"/>
                </params>
                <declaration name="rv0" type="RowView" line="66"/>
                <declaration name="rv1" type="RowView" line="67"/>
                <scope line="68">
                    <declaration name="index0" type="int" line="69"/>
                    <declaration name="index1" type="int" line="70"/>
                    <declaration name="span" type="int" line="71"/>
                </scope>
            </method>
            <javadoc line="76">
                Fetches the span (height) of the given row.                
            </javadoc>
            <method name="getRowSpan" type="int" line="79">
                <params>
                    <param name="row" type="int"/>
                </params>
                <declaration name="rv" type="RowView" line="80"/>
                <scope line="81"/>
            </method>
            <method name="getRow" type="RowView" line="86">
                <params>
                    <param name="row" type="int"/>
                </params>
                <scope line="87"/>
            </method>
            <method name="getViewAtPoint" type="View" line="92">
                <params>
                    <param name="x" type="int"/>
                    <param name="y" type="int"/>
                    <param name="alloc" type="Rectangle"/>
                </params>
                <declaration name="n" type="int" line="93"/>
                <declaration name="v" type="View" line="94"/>
                <declaration name="allocation" type="Rectangle" line="95"/>
                <scope line="96">
                    <scope line="100">
                        <scope line="102"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="110">
                Determines the number of columns occupied by
                  the table cell represented by given element.                
            </javadoc>
            <method name="getColumnsOccupied" type="int" line="114">
                <params>
                    <param name="v" type="View"/>
                </params>
                <declaration name="a" type="AttributeSet" line="115"/>
                <scope line="116">
                    <declaration name="s" type="String" line="117"/>
                    <scope line="118">
                        <scope line="119"/>
                        <scope line="122"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="128">
                Determines the number of rows occupied by
                  the table cell represented by given element.                
            </javadoc>
            <method name="getRowsOccupied" type="int" line="132">
                <params>
                    <param name="v" type="View"/>
                </params>
                <declaration name="a" type="AttributeSet" line="133"/>
                <scope line="134">
                    <declaration name="s" type="String" line="135"/>
                    <scope line="136">
                        <scope line="137"/>
                        <scope line="140"/>
                    </scope>
                </scope>
            </method>
            <method name="invalidateGrid" type="void" line="146"/>
            <method name="getStyleSheet" type="StyleSheet" line="149">
                <declaration name="doc" type="HTMLDocument" line="150"/>
            </method>
            <javadoc line="153">
                Update the insets, which contain the caption if there
                  is a caption.                
            </javadoc>
            <method name="updateInsets" type="void" line="157">
                <declaration name="top" type="short" line="158"/>
                <declaration name="bottom" type="short" line="159"/>
                <scope line="160">
                    <declaration name="caption" type="View" line="161"/>
                    <declaration name="h" type="short" line="162"/>
                    <declaration name="a" type="AttributeSet" line="163"/>
                    <declaration name="align" type="Object" line="164"/>
                    <scope line="165"/>
                    <scope line="168"/>
                </scope>
            </method>
            <javadoc line="174">
                Update any cached values that come from attributes.                
            </javadoc>
            <method name="setPropertiesFromAttributes" type="void" line="177">
                <declaration name="sheet" type="StyleSheet" line="178"/>
                <scope line="181">
                    <declaration name="lv" type="CSS.LengthValue" line="183"/>
                    <scope line="184"/>
                    <scope line="187"/>
                    <scope line="191"/>
                    <scope line="194"/>
                </scope>
            </method>
            <javadoc line="199">
                Fill in the grid locations that are placeholders
                  for multi-column, multi-row, and missing grid
                  locations.                
            </javadoc>
            <method name="updateGrid" type="void" line="204">
                <scope line="205">
                    <declaration name="n" type="int" line="210"/>
                    <scope line="211">
                        <declaration name="v" type="View" line="212"/>
                        <scope line="213">
                            <declaration name="rv" type="RowView" line="215"/>
                        </scope>
                        <scope line="220">
                            <declaration name="o" type="Object" line="221"/>
                            <scope line="222">
                                <declaration name="kind" type="HTML.Tag" line="223"/>
                                <scope line="224"/>
                            </scope>
                        </scope>
                    </scope>
                    <declaration name="maxColumns" type="int" line="230"/>
                    <declaration name="nrows" type="int" line="231"/>
                    <scope line="232">
                        <declaration name="rv" type="RowView" line="233"/>
                        <declaration name="col" type="int" line="234"/>
                        <scope line="235">
                            <declaration name="cv" type="View" line="236"/>
                            <scope line="237">
                                <declaration name="a" type="AttributeSet" line="238"/>
                                <declaration name="lv" type="CSS.LengthValue" line="239"/>
                                <scope line="240"/>
                            </scope>
                            <declaration name="rowSpan" type="int" line="245"/>
                            <scope line="246"/>
                            <declaration name="colSpan" type="int" line="249"/>
                            <scope line="250">
                                <declaration name="rowLimit" type="int" line="251"/>
                                <declaration name="colLimit" type="int" line="252"/>
                                <scope line="253">
                                    <scope line="254">
                                        <scope line="255"/>
                                    </scope>
                                </scope>
                                <scope line="260"/>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="270"/>
                </scope>
            </method>
            <javadoc line="277">
                Mark a grid location as filled in for a cells overflow.                
            </javadoc>
            <method name="addFill" type="void" line="280">
                <params>
                    <param name="row" type="int"/>
                    <param name="col" type="int"/>
                </params>
                <declaration name="rv" type="RowView" line="281"/>
                <scope line="282"/>
            </method>
            <javadoc line="286">
                Layout the columns to fit within the given target span.                
                <param>
                    targetSpan the given span for total of all the table
                      columns                    
                </param>
                <param>
                    reqs the requirements desired for each column.  This
                      is the column maximum of the cells minimum, preferred, and
                      maximum requested span                    
                </param>
                <param>
                    spans the return value of how much to allocated to
                      each column                    
                </param>
                <param>
                    offsets the return value of the offset from the
                      origin for each column                    
                </param>
                <return>
                    the offset from the origin and the span for each column
                      in the offsets and spans parameters                    
                </return>
            </javadoc>
            <method name="layoutColumns" type="void" line="300">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                    <param name="reqs" type="SizeRequirements[]"/>
                </params>
            </method>
            <javadoc line="306">
                Calculate the requirements for each column.  The calculation
                  is done as two passes over the table.  The table cells that
                  occupy a single column are scanned first to determine the
                  maximum of minimum, preferred, and maximum spans along the
                  give axis.  Table cells that span multiple columns are excluded
                  from the first pass.  A second pass is made to determine if
                  the cells that span multiple columns are satisfied.  If the
                  column requirements are not satisified, the needs of the
                  multi-column cell is mixed into the existing column requirements.
                  The calculation of the multi-column distribution is based upon
                  the proportions of the existing column requirements and taking
                  into consideration any constraining maximums.                
            </javadoc>
            <method name="calculateColumnRequirements" type="void" line="320">
                <params>
                    <param name="axis" type="int"/>
                </params>
                <scope line="321"/>
                <declaration name="host" type="Container" line="326"/>
                <scope line="327">
                    <scope line="328"/>
                    <scope line="331"/>
                </scope>
                <declaration name="hasMultiColumn" type="boolean" line="335"/>
                <declaration name="nrows" type="int" line="336"/>
                <scope line="337">
                    <declaration name="row" type="RowView" line="338"/>
                    <declaration name="col" type="int" line="339"/>
                    <declaration name="ncells" type="int" line="340"/>
                    <scope line="341">
                        <declaration name="cv" type="View" line="342"/>
                        <scope line="343"/>
                        <declaration name="rowSpan" type="int" line="347"/>
                        <declaration name="colSpan" type="int" line="348"/>
                        <scope line="349"/>
                        <scope line="352"/>
                    </scope>
                </scope>
                <scope line="359">
                    <scope line="360">
                        <declaration name="row" type="RowView" line="361"/>
                        <declaration name="col" type="int" line="362"/>
                        <declaration name="ncells" type="int" line="363"/>
                        <scope line="364">
                            <declaration name="cv" type="View" line="365"/>
                            <scope line="366"/>
                            <declaration name="colSpan" type="int" line="370"/>
                            <scope line="371"/>
                        </scope>
                    </scope>
                </scope>
            </method>
            <javadoc line="380">
                check the requirements of a table cell that spans a single column.                
            </javadoc>
            <method name="checkSingleColumnCell" type="void" line="383">
                <params>
                    <param name="axis" type="int"/>
                    <param name="col" type="int"/>
                    <param name="v" type="View"/>
                </params>
                <declaration name="req" type="SizeRequirements" line="384"/>
            </method>
            <javadoc line="388">
                check the requirements of a table cell that spans multiple
                  columns.                
            </javadoc>
            <method name="checkMultiColumnCell" type="void" line="392">
                <params>
                    <param name="axis" type="int"/>
                    <param name="col" type="int"/>
                    <param name="ncols" type="int"/>
                    <param name="v" type="View"/>
                </params>
                <declaration name="min" type="long" line="393"/>
                <declaration name="pref" type="long" line="394"/>
                <declaration name="max" type="long" line="395"/>
                <scope line="396">
                    <declaration name="req" type="SizeRequirements" line="397"/>
                </scope>
                <declaration name="cmin" type="int" line="402"/>
                <scope line="403">
                    <declaration name="reqs" type="SizeRequirements[]" line="404"/>
                    <scope line="405"/>
                    <declaration name="spans" type="int[]" line="408"/>
                    <declaration name="offsets" type="int[]" line="409"/>
                    <scope line="411">
                        <declaration name="req" type="SizeRequirements" line="412"/>
                    </scope>
                </scope>
                <declaration name="cpref" type="int" line="418"/>
                <scope line="419">
                    <declaration name="reqs" type="SizeRequirements[]" line="420"/>
                    <scope line="421"/>
                    <declaration name="spans" type="int[]" line="424"/>
                    <declaration name="offsets" type="int[]" line="425"/>
                    <scope line="427">
                        <declaration name="req" type="SizeRequirements" line="428"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="434">
                Calculate the requirements for the minor axis.  This is called by
                  the superclass whenever the requirements need to be updated (i.e.
                  a preferenceChanged was messaged through this view).
                  &lt;p&gt;
                  This is implemented to calculate the requirements as the sum of the
                  requirements of the columns and then adjust it if the
                  CSS width or height attribute is specified and applicable to
                  the axis.                
            </javadoc>
            <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="444">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
                <scope line="447"/>
                <declaration name="min" type="long" line="450"/>
                <declaration name="pref" type="long" line="451"/>
                <declaration name="n" type="int" line="452"/>
                <scope line="453">
                    <declaration name="req" type="SizeRequirements" line="454"/>
                </scope>
                <declaration name="adjust" type="int" line="458"/>
                <declaration name="attr" type="AttributeSet" line="464"/>
                <declaration name="cssWidth" type="CSS.LengthValue" line="465"/>
                <scope line="466">
                    <scope line="467"/>
                </scope>
                <declaration name="o" type="Object" line="474"/>
                <scope line="475">
                    <declaration name="ta" type="String" line="476"/>
                    <scope line="477"/>
                    <scope line="480"/>
                    <scope line="483"/>
                    <scope line="486"/>
                </scope>
                <scope line="490"/>
            </method>
            <javadoc line="495">
                Calculate the requirements for the major axis.  This is called by
                  the superclass whenever the requirements need to be updated (i.e.
                  a preferenceChanged was messaged through this view).
                  &lt;p&gt;
                  This is implemented to provide the superclass behavior adjusted for
                  multi-row table cells.                
            </javadoc>
            <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="503">
                <params>
                    <param name="axis" type="int"/>
                    <param name="r" type="SizeRequirements"/>
                </params>
            </method>
            <javadoc line="510">
                Perform layout for the minor axis of the box (i.e. the
                  axis orthoginal to the axis that it represents).  The results
                  of the layout should be placed in the given arrays which represent
                  the allocations to the children along the minor axis.  This
                  is called by the superclass whenever the layout needs to be
                  updated along the minor axis.
                  &lt;p&gt;
                  This is implemented to call the
                  &lt;a href=&quot;#layoutColumns&quot;&gt;layoutColumns&lt;/a&gt; method, and then
                  forward to the superclass to actually carry out the layout
                  of the tables rows.                
                <param>
                    targetSpan the total span given to the view, which
                      whould be used to layout the children                    
                </param>
                <param>
                    axis the axis being layed out                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views.  This is a return value and is
                      filled in by the implementation of this method                    
                </param>
                <param>
                    spans the span of each child view;  this is a return
                      value and is filled in by the implementation of this method                    
                </param>
                <return>
                    the offset and span for each child view in the
                      offsets and spans parameters                    
                </return>
            </javadoc>
            <method name="layoutMinorAxis" type="void" line="533">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <declaration name="n" type="int" line="535"/>
                <scope line="536">
                    <declaration name="row" type="RowView" line="537"/>
                </scope>
            </method>
            <javadoc line="543">
                Perform layout for the major axis of the box (i.e. the
                  axis that it represents).  The results
                  of the layout should be placed in the given arrays which represent
                  the allocations to the children along the minor axis.  This
                  is called by the superclass whenever the layout needs to be
                  updated along the minor axis.
                  &lt;p&gt;
                  This method is where the layout of the table rows within the
                  table takes place.  This method is implemented to call the use
                  the RowIterator and the CSS collapsing tile to layout
                  with border spacing and border collapsing capabilities.                
                <param>
                    targetSpan the total span given to the view, which
                      whould be used to layout the children                    
                </param>
                <param>
                    axis the axis being layed out                    
                </param>
                <param>
                    offsets the offsets from the origin of the view for
                      each of the child views; this is a return value and is
                      filled in by the implementation of this method                    
                </param>
                <param>
                    spans the span of each child view; this is a return
                      value and is filled in by the implementation of this method                    
                </param>
                <return>
                    the offset and span for each child view in the
                      offsets and spans parameters                    
                </return>
            </javadoc>
            <method name="layoutMajorAxis" type="void" line="566">
                <params>
                    <param name="targetSpan" type="int"/>
                    <param name="axis" type="int"/>
                    <param name="offsets" type="int[]"/>
                    <param name="spans" type="int[]"/>
                </params>
                <scope line="569">
                    <declaration name="caption" type="View" line="570"/>
                    <declaration name="h" type="int" line="571"/>
                    <declaration name="boxBottom" type="short" line="573"/>
                    <scope line="574"/>
                    <scope line="577"/>
                </scope>
            </method>
            <javadoc line="582">
                Fetches the child view that represents the given position in
                  the model.  This is implemented to walk through the children
                  looking for a range that contains the given position.  In this
                  view the children do not necessarily have a one to one mapping
                  with the child elements.                
                <param>
                    pos  the search position >= 0                    
                </param>
                <param>
                    a  the allocation to the table on entry, and the
                      allocation of the view containing the position on exit                    
                </param>
                <return>
                    the view representing the given position, or
                      null if there isn't one                    
                </return>
            </javadoc>
            <method name="getViewAtPosition" type="View" line="594">
                <params>
                    <param name="pos" type="int"/>
                    <param name="a" type="Rectangle"/>
                </params>
                <declaration name="n" type="int" line="595"/>
                <scope line="596">
                    <declaration name="v" type="View" line="597"/>
                    <declaration name="p0" type="int" line="598"/>
                    <declaration name="p1" type="int" line="599"/>
                    <scope line="600">
                        <scope line="601"/>
                    </scope>
                </scope>
                <scope line="607">
                    <declaration name="v" type="View" line="608"/>
                    <scope line="609"/>
                </scope>
            </method>
            <javadoc line="616">
                Fetches the attributes to use when rendering.  This is
                  implemented to multiplex the attributes specified in the
                  model with a StyleSheet.                
            </javadoc>
            <method name="getAttributes" type="AttributeSet" line="621">
                <scope line="622">
                    <declaration name="sheet" type="StyleSheet" line="623"/>
                </scope>
            </method>
            <javadoc line="628">
                Renders using the given rendering surface and area on that
                  surface.  This is implemented to delegate to the css box
                  painter to paint the border and background prior to the
                  interior.  The superclass culls rendering the children
                  that don&apos;t directly intersect the clip and the row may
                  have cells hanging from a row above in it.  The table
                  does not use the superclass rendering behavior and instead
                  paints all of the rows and lets the rows cull those
                  cells not intersecting the clip region.                
                <param>
                    g the rendering surface to use                    
                </param>
                <param>
                    allocation the allocated region to render into                    
                </param>
                <see>
                    View#paint                    
                </see>
            </javadoc>
            <method name="paint" type="void" line="642">
                <params>
                    <param name="g" type="Graphics"/>
                    <param name="allocation" type="Shape"/>
                </params>
                <declaration name="a" type="Rectangle" line="643"/>
                <scope line="645">
                    <declaration name="top" type="short" line="646"/>
                    <declaration name="bottom" type="short" line="647"/>
                    <scope line="648">
                        <declaration name="h" type="int" line="649"/>
                    </scope>
                    <scope line="653"/>
                </scope>
                <declaration name="n" type="int" line="658"/>
                <scope line="659">
                    <declaration name="v" type="View" line="660"/>
                </scope>
            </method>
            <javadoc line="664">
                Establishes the parent view for this view.  This is
                  guaranteed to be called before any other methods if the
                  parent view is functioning properly.
                  &lt;p&gt;
                  This is implemented
                  to forward to the superclass as well as call the
                  &lt;a href=&quot;#setPropertiesFromAttributes&quot;&gt;setPropertiesFromAttributes&lt;/a&gt;
                  method to set the paragraph properties from the css
                  attributes.  The call is made at this time to ensure
                  the ability to resolve upward through the parents
                  view attributes.                
                <param>
                    parent the new parent, or null if the view is
                      being removed from a parent it was previously added
                      to                    
                </param>
            </javadoc>
            <method name="setParent" type="void" line="680">
                <params>
                    <param name="parent" type="View"/>
                </params>
                <scope line="682"/>
            </method>
            <javadoc line="686">
                Fetches the ViewFactory implementation that is feeding
                  the view hierarchy.
                  This replaces the ViewFactory with an implementation that
                  calls through to the createTableRow and createTableCell
                  methods.   If the element given to the factory isn&apos;t a
                  table row or cell, the request is delegated to the factory
                  produced by the superclass behavior.                
                <return>
                    the factory, null if none                    
                </return>
            </javadoc>
            <method name="getViewFactory" type="ViewFactory" line="696"/>
            <javadoc line="699">
                Gives notification that something was inserted into
                  the document in a location that this view is responsible for.
                  This replaces the ViewFactory with an implementation that
                  calls through to the createTableRow and createTableCell
                  methods.   If the element given to the factory isn&apos;t a
                  table row or cell, the request is delegated to the factory
                  passed as an argument.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#insertUpdate                    
                </see>
            </javadoc>
            <method name="insertUpdate" type="void" line="712">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="715">
                Gives notification that something was removed from the document
                  in a location that this view is responsible for.
                  This replaces the ViewFactory with an implementation that
                  calls through to the createTableRow and createTableCell
                  methods.   If the element given to the factory isn&apos;t a
                  table row or cell, the request is delegated to the factory
                  passed as an argument.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#removeUpdate                    
                </see>
            </javadoc>
            <method name="removeUpdate" type="void" line="728">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <javadoc line="731">
                Gives notification from the document that attributes were changed
                  in a location that this view is responsible for.
                  This replaces the ViewFactory with an implementation that
                  calls through to the createTableRow and createTableCell
                  methods.   If the element given to the factory isn&apos;t a
                  table row or cell, the request is delegated to the factory
                  passed as an argument.                
                <param>
                    e the change information from the associated document                    
                </param>
                <param>
                    a the current allocation of the view                    
                </param>
                <param>
                    f the factory to use to rebuild if the view has children                    
                </param>
                <see>
                    View#changedUpdate                    
                </see>
            </javadoc>
            <method name="changedUpdate" type="void" line="744">
                <params>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
            </method>
            <method name="forwardUpdate" type="void" line="747">
                <params>
                    <param name="ec" type="DocumentEvent.ElementChange"/>
                    <param name="e" type="DocumentEvent"/>
                    <param name="a" type="Shape"/>
                    <param name="f" type="ViewFactory"/>
                </params>
                <scope line="749">
                    <declaration name="c" type="Component" line="750"/>
                    <scope line="751">
                        <declaration name="alloc" type="Rectangle" line="752"/>
                    </scope>
                </scope>
            </method>
            <javadoc line="757">
                Change the child views.  This is implemented to
                  provide the superclass behavior and invalidate the
                  grid so that rows and columns will be recalculated.                
            </javadoc>
            <method name="replace" type="void" line="762">
                <params>
                    <param name="offset" type="int"/>
                    <param name="length" type="int"/>
                    <param name="views" type="View[]"/>
                </params>
            </method>
            <javadoc line="766">
                The table itself acts as a factory for the various
                  views that actually represent pieces of the table.
                  All other factory activity is delegated to the factory
                  returned by the parent of the table.                
            </javadoc>
            <method name="create" type="View" line="772">
                <params>
                    <param name="elem" type="Element"/>
                </params>
                <declaration name="o" type="Object" line="773"/>
                <scope line="774">
                    <declaration name="kind" type="HTML.Tag" line="775"/>
                    <scope line="776"/>
                    <scope line="779"/>
                    <scope line="782"/>
                </scope>
                <declaration name="p" type="View" line="786"/>
                <scope line="787">
                    <declaration name="f" type="ViewFactory" line="788"/>
                    <scope line="789"/>
                </scope>
            </method>
            <declaration name="attr" type="AttributeSet" line="795"/>
            <declaration name="painter" type="StyleSheet.BoxPainter" line="796"/>
            <declaration name="cellSpacing" type="int" line="797"/>
            <declaration name="borderWidth" type="int" line="798"/>
            <declaration name="captionIndex" type="int" line="799"/>
            <javadoc line="799">
                The index of the caption view if there is a caption.
                  This has a value of -1 if there is no caption.  The
                  caption lives in the inset area of the table, and is
                  updated with each time the grid is recalculated.                
            </javadoc>
            <declaration name="relativeCells" type="boolean" line="806"/>
            <javadoc line="806">
                Do any of the table cells contain a relative size
                  specification?  This is updated with each call to
                  updateGrid().  If this is true, the ColumnIterator
                  will do extra work to calculate relative cell
                  specifications.                
            </javadoc>
            <declaration name="multiRowCells" type="boolean" line="814"/>
            <javadoc line="814">
                Do any of the table cells span multiple rows?  If
                  true, the RowRequirementIterator will do additional
                  work to adjust the requirements of rows spanned by
                  a single table cell.  This is updated with each call to
                  updateGrid().                
            </javadoc>
            <declaration name="columnSpans" type="int[]" line="822"/>
            <declaration name="columnOffsets" type="int[]" line="823"/>
            <declaration name="totalColumnRequirements" type="SizeRequirements" line="824"/>
            <javadoc line="824">
                SizeRequirements for all the columns.                
            </javadoc>
            <declaration name="columnRequirements" type="SizeRequirements[]" line="828"/>
            <declaration name="rowIterator" type="RowIterator" line="829"/>
            <declaration name="colIterator" type="ColumnIterator" line="830"/>
            <declaration name="rows" type="Vector&lt;RowView&gt;" line="831"/>
            <declaration name="skipComments" type="boolean" line="832"/>
            <declaration name="gridValid" type="boolean" line="833"/>
            <declaration name="EMPTY" type="BitSet" line="834"/>
            <class name="ColumnIterator" line="835">
                <implements interface="CSS.LayoutIterator"/>
                <javadoc line="836">
                    Disable percentage adjustments which should only apply
                      when calculating layout, not requirements.                    
                </javadoc>
                <method name="disablePercentages" type="void" line="840"/>
                <javadoc line="843">
                    Update percentage adjustments if they are needed.                    
                </javadoc>
                <method name="updatePercentagesAndAdjustmentWeights" type="void" line="846">
                    <params>
                        <param name="span" type="int"/>
                    </params>
                    <scope line="848"/>
                    <scope line="851"/>
                    <scope line="854"/>
                    <declaration name="nrows" type="int" line="857"/>
                    <scope line="858">
                        <declaration name="row" type="RowView" line="859"/>
                        <declaration name="col" type="int" line="860"/>
                        <declaration name="ncells" type="int" line="861"/>
                        <scope line="862">
                            <declaration name="cv" type="View" line="863"/>
                            <declaration name="rowSpan" type="int" line="865"/>
                            <declaration name="colSpan" type="int" line="866"/>
                            <declaration name="a" type="AttributeSet" line="867"/>
                            <declaration name="lv" type="CSS.LengthValue" line="868"/>
                            <scope line="869">
                                <declaration name="len" type="int" line="870"/>
                                <scope line="871">
                                    <scope line="872"/>
                                    <scope line="876"/>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="885">
                    Set the layout arrays to use for holding layout results                    
                </javadoc>
                <method name="setLayoutArrays" type="void" line="888">
                    <params>
                        <param name="offsets" type="int"/>
                        <param name="spans" type="int"/>
                        <param name="targetSpan" type="int"/>
                    </params>
                </method>
                <method name="getCount" type="int" line="893"/>
                <method name="setIndex" type="void" line="896">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="setOffset" type="void" line="899">
                    <params>
                        <param name="offs" type="int"/>
                    </params>
                </method>
                <method name="getOffset" type="int" line="902"/>
                <method name="setSpan" type="void" line="905">
                    <params>
                        <param name="span" type="int"/>
                    </params>
                </method>
                <method name="getSpan" type="int" line="908"/>
                <method name="getMinimumSpan" type="float" line="911">
                    <params>
                        <param name="parentSpan" type="float"/>
                    </params>
                </method>
                <method name="getPreferredSpan" type="float" line="914">
                    <params>
                        <param name="parentSpan" type="float"/>
                    </params>
                    <scope line="915"/>
                </method>
                <method name="getMaximumSpan" type="float" line="920">
                    <params>
                        <param name="parentSpan" type="float"/>
                    </params>
                </method>
                <method name="getBorderWidth" type="float" line="923"/>
                <method name="getLeadingCollapseSpan" type="float" line="926"/>
                <method name="getTrailingCollapseSpan" type="float" line="929"/>
                <method name="getAdjustmentWeight" type="int" line="932"/>
                <declaration name="col" type="int" line="935"/>
                <javadoc line="935">
                    Current column index                    
                </javadoc>
                <declaration name="percentages" type="int[]" line="939"/>
                <javadoc line="939">
                    percentage values (may be null since there
                      might not be any).                    
                </javadoc>
                <declaration name="adjustmentWeights" type="int[]" line="944"/>
                <declaration name="offsets" type="int[]" line="945"/>
                <declaration name="spans" type="int[]" line="946"/>
            </class>
            <class name="RowIterator" line="948">
                <implements interface="CSS.LayoutIterator"/>
                <method name="RowIterator" type="constructor" line="949"/>
                <method name="updateAdjustments" type="void" line="951">
                    <declaration name="axis" type="int" line="952"/>
                    <scope line="953">
                        <declaration name="n" type="int" line="954"/>
                        <scope line="956">
                            <declaration name="rv" type="RowView" line="957"/>
                            <scope line="958">
                                <declaration name="ncells" type="int" line="959"/>
                                <scope line="960">
                                    <declaration name="v" type="View" line="961"/>
                                    <declaration name="nrows" type="int" line="962"/>
                                    <scope line="963">
                                        <declaration name="spanNeeded" type="int" line="964"/>
                                    </scope>
                                </scope>
                            </scope>
                        </scope>
                    </scope>
                    <scope line="971"/>
                </method>
                <javadoc line="975">
                    Fixup preferences to accomodate a multi-row table cell
                      if not already covered by existing preferences.  This is
                      a no-op if not all of the rows needed (to do this check/fixup)
                      have arrived yet.                    
                </javadoc>
                <method name="adjustMultiRowSpan" type="void" line="981">
                    <params>
                        <param name="spanNeeded" type="int"/>
                        <param name="nrows" type="int"/>
                        <param name="rowIndex" type="int"/>
                    </params>
                    <scope line="982">
                        <scope line="984"/>
                    </scope>
                    <declaration name="span" type="int" line="988"/>
                    <scope line="989">
                        <declaration name="rv" type="RowView" line="990"/>
                    </scope>
                    <scope line="993">
                        <declaration name="adjust" type="int" line="994"/>
                        <declaration name="rowAdjust" type="int" line="995"/>
                        <declaration name="firstAdjust" type="int" line="996"/>
                        <declaration name="rv" type="RowView" line="997"/>
                        <scope line="999"/>
                    </scope>
                </method>
                <method name="setLayoutArrays" type="void" line="1004">
                    <params>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                </method>
                <method name="setOffset" type="void" line="1008">
                    <params>
                        <param name="offs" type="int"/>
                    </params>
                    <declaration name="rv" type="RowView" line="1009"/>
                    <scope line="1010"/>
                </method>
                <method name="getOffset" type="int" line="1014">
                    <declaration name="rv" type="RowView" line="1015"/>
                    <scope line="1016"/>
                </method>
                <method name="setSpan" type="void" line="1021">
                    <params>
                        <param name="span" type="int"/>
                    </params>
                    <declaration name="rv" type="RowView" line="1022"/>
                    <scope line="1023"/>
                </method>
                <method name="getSpan" type="int" line="1027">
                    <declaration name="rv" type="RowView" line="1028"/>
                    <scope line="1029"/>
                </method>
                <method name="getCount" type="int" line="1034"/>
                <method name="setIndex" type="void" line="1037">
                    <params>
                        <param name="i" type="int"/>
                    </params>
                </method>
                <method name="getMinimumSpan" type="float" line="1040">
                    <params>
                        <param name="parentSpan" type="float"/>
                    </params>
                </method>
                <method name="getPreferredSpan" type="float" line="1043">
                    <params>
                        <param name="parentSpan" type="float"/>
                    </params>
                    <declaration name="rv" type="RowView" line="1044"/>
                    <scope line="1045">
                        <declaration name="adjust" type="int" line="1046"/>
                    </scope>
                </method>
                <method name="getMaximumSpan" type="float" line="1051">
                    <params>
                        <param name="parentSpan" type="float"/>
                    </params>
                </method>
                <method name="getBorderWidth" type="float" line="1054"/>
                <method name="getLeadingCollapseSpan" type="float" line="1057"/>
                <method name="getTrailingCollapseSpan" type="float" line="1060"/>
                <method name="getAdjustmentWeight" type="int" line="1063"/>
                <declaration name="row" type="int" line="1066"/>
                <javadoc line="1066">
                    Current row index                    
                </javadoc>
                <declaration name="adjustments" type="int[]" line="1070"/>
                <javadoc line="1070">
                    Adjustments to the row requirements to handle multi-row
                      table cells.                    
                </javadoc>
                <declaration name="offsets" type="int[]" line="1075"/>
                <declaration name="spans" type="int[]" line="1076"/>
            </class>
            <class name="RowView" line="1078">
                <extends class="BoxView"/>
                <javadoc line="1078">
                    View of a row in a row-centric table.                    
                </javadoc>
                <javadoc line="1082">
                    Constructs a TableView for the given element.                    
                    <param>
                        elem the element that this view is responsible for                        
                    </param>
                </javadoc>
                <method name="RowView" type="constructor" line="1086">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <method name="clearFilledColumns" type="void" line="1091"/>
                <method name="fillColumn" type="void" line="1094">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <method name="isFilled" type="boolean" line="1097">
                    <params>
                        <param name="col" type="int"/>
                    </params>
                </method>
                <javadoc line="1100">
                    The number of columns present in this row.                    
                </javadoc>
                <method name="getColumnCount" type="int" line="1103">
                    <declaration name="nfill" type="int" line="1104"/>
                    <declaration name="n" type="int" line="1105"/>
                    <scope line="1106">
                        <scope line="1107"/>
                    </scope>
                </method>
                <javadoc line="1113">
                    Fetches the attributes to use when rendering.  This is
                      implemented to multiplex the attributes specified in the
                      model with a StyleSheet.                    
                </javadoc>
                <method name="getAttributes" type="AttributeSet" line="1118"/>
                <method name="findViewAtPoint" type="View" line="1121">
                    <params>
                        <param name="x" type="int"/>
                        <param name="y" type="int"/>
                        <param name="alloc" type="Rectangle"/>
                    </params>
                    <declaration name="n" type="int" line="1122"/>
                    <scope line="1123">
                        <scope line="1124"/>
                    </scope>
                </method>
                <method name="getStyleSheet" type="StyleSheet" line="1131">
                    <declaration name="doc" type="HTMLDocument" line="1132"/>
                </method>
                <javadoc line="1135">
                    This is called by a child to indicate its
                      preferred span has changed.  This is implemented to
                      execute the superclass behavior and well as try to
                      determine if a row with a multi-row cell hangs across
                      this row.  If a multi-row cell covers this row it also
                      needs to propagate a preferenceChanged so that it will
                      recalculate the multi-row cell.                    
                    <param>
                        child the child view                        
                    </param>
                    <param>
                        width true if the width preference should change                        
                    </param>
                    <param>
                        height true if the height preference should change                        
                    </param>
                </javadoc>
                <method name="preferenceChanged" type="void" line="1147">
                    <params>
                        <param name="child" type="View"/>
                        <param name="width" type="boolean"/>
                        <param name="height" type="boolean"/>
                    </params>
                    <scope line="1149">
                        <scope line="1150">
                            <declaration name="rv" type="RowView" line="1151"/>
                            <scope line="1152"/>
                        </scope>
                    </scope>
                </method>
                <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="1159">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                    <declaration name="req" type="SizeRequirements" line="1160"/>
                </method>
                <method name="getMinimumSpan" type="float" line="1167">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="value" type="float" line="1168"/>
                    <scope line="1169"/>
                    <scope line="1172"/>
                </method>
                <method name="getMaximumSpan" type="float" line="1177">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="value" type="float" line="1178"/>
                    <scope line="1179"/>
                    <scope line="1182"/>
                </method>
                <method name="getPreferredSpan" type="float" line="1187">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                    <declaration name="value" type="float" line="1188"/>
                    <scope line="1189"/>
                    <scope line="1192"/>
                </method>
                <method name="changedUpdate" type="void" line="1197">
                    <params>
                        <param name="e" type="DocumentEvent"/>
                        <param name="a" type="Shape"/>
                        <param name="f" type="ViewFactory"/>
                    </params>
                    <declaration name="pos" type="int" line="1199"/>
                    <scope line="1200"/>
                </method>
                <javadoc line="1204">
                    Renders using the given rendering surface and area on that
                      surface.  This is implemented to delegate to the css box
                      painter to paint the border and background prior to the
                      interior.                    
                    <param>
                        g the rendering surface to use                        
                    </param>
                    <param>
                        allocation the allocated region to render into                        
                    </param>
                    <see>
                        View#paint                        
                    </see>
                </javadoc>
                <method name="paint" type="void" line="1213">
                    <params>
                        <param name="g" type="Graphics"/>
                        <param name="allocation" type="Shape"/>
                    </params>
                    <declaration name="a" type="Rectangle" line="1214"/>
                </method>
                <javadoc line="1218">
                    Change the child views.  This is implemented to
                      provide the superclass behavior and invalidate the
                      grid so that rows and columns will be recalculated.                    
                </javadoc>
                <method name="replace" type="void" line="1223">
                    <params>
                        <param name="offset" type="int"/>
                        <param name="length" type="int"/>
                        <param name="views" type="View[]"/>
                    </params>
                </method>
                <javadoc line="1227">
                    Calculate the height requirements of the table row.  The
                      requirements of multi-row cells are not considered for this
                      calculation.  The table itself will check and adjust the row
                      requirements for all the rows that have multi-row cells spanning
                      them.  This method updates the multi-row flag that indicates that
                      this row and rows below need additional consideration.                    
                </javadoc>
                <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="1235">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                    <declaration name="min" type="long" line="1236"/>
                    <declaration name="pref" type="long" line="1237"/>
                    <declaration name="max" type="long" line="1238"/>
                    <declaration name="n" type="int" line="1240"/>
                    <scope line="1241">
                        <declaration name="v" type="View" line="1242"/>
                        <scope line="1243"/>
                        <scope line="1247"/>
                    </scope>
                    <scope line="1253"/>
                </method>
                <javadoc line="1262">
                    Perform layout for the major axis of the box (i.e. the
                      axis that it represents).  The results of the layout should
                      be placed in the given arrays which represent the allocations
                      to the children along the major axis.
                      &lt;p&gt;
                      This is re-implemented to give each child the span of the column
                      width for the table, and to give cells that span multiple columns
                      the multi-column span.                    
                    <param>
                        targetSpan the total span given to the view, which
                          whould be used to layout the children                        
                    </param>
                    <param>
                        axis the axis being layed out                        
                    </param>
                    <param>
                        offsets the offsets from the origin of the view for
                          each of the child views; this is a return value and is
                          filled in by the implementation of this method                        
                    </param>
                    <param>
                        spans the span of each child view; this is a return
                          value and is filled in by the implementation of this method                        
                    </param>
                    <return>
                        the offset and span for each child view in the
                          offsets and spans parameters                        
                    </return>
                </javadoc>
                <method name="layoutMajorAxis" type="void" line="1282">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                    <declaration name="col" type="int" line="1283"/>
                    <declaration name="ncells" type="int" line="1284"/>
                    <scope line="1285">
                        <declaration name="cv" type="View" line="1286"/>
                        <scope line="1287"/>
                        <declaration name="colSpan" type="int" line="1291"/>
                        <scope line="1294">
                            <declaration name="n" type="int" line="1295"/>
                            <scope line="1296">
                                <scope line="1297"/>
                            </scope>
                        </scope>
                    </scope>
                </method>
                <javadoc line="1307">
                    Perform layout for the minor axis of the box (i.e. the
                      axis orthoginal to the axis that it represents).  The results
                      of the layout should be placed in the given arrays which represent
                      the allocations to the children along the minor axis.  This
                      is called by the superclass whenever the layout needs to be
                      updated along the minor axis.
                      &lt;p&gt;
                      This is implemented to delegate to the superclass, then adjust
                      the span for any cell that spans multiple rows.                    
                    <param>
                        targetSpan the total span given to the view, which
                          whould be used to layout the children                        
                    </param>
                    <param>
                        axis the axis being layed out                        
                    </param>
                    <param>
                        offsets the offsets from the origin of the view for
                          each of the child views; this is a return value and is
                          filled in by the implementation of this method                        
                    </param>
                    <param>
                        spans the span of each child view; this is a return
                          value and is filled in by the implementation of this method                        
                    </param>
                    <return>
                        the offset and span for each child view in the
                          offsets and spans parameters                        
                    </return>
                </javadoc>
                <method name="layoutMinorAxis" type="void" line="1328">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                    <declaration name="col" type="int" line="1330"/>
                    <declaration name="ncells" type="int" line="1331"/>
                    <scope line="1332">
                        <declaration name="cv" type="View" line="1333"/>
                        <declaration name="colSpan" type="int" line="1335"/>
                        <declaration name="rowSpan" type="int" line="1336"/>
                        <scope line="1337">
                            <declaration name="row0" type="int" line="1338"/>
                            <declaration name="row1" type="int" line="1339"/>
                        </scope>
                        <scope line="1342"/>
                    </scope>
                </method>
                <javadoc line="1347">
                    Determines the resizability of the view along the
                      given axis.  A value of 0 or less is not resizable.                    
                    <param>
                        axis may be either View.X_AXIS or View.Y_AXIS                        
                    </param>
                    <return>
                        the resize weight                        
                    </return>
                    <exception>
                        IllegalArgumentException for an invalid axis                        
                    </exception>
                </javadoc>
                <method name="getResizeWeight" type="int" line="1354">
                    <params>
                        <param name="axis" type="int"/>
                    </params>
                </method>
                <javadoc line="1357">
                    Fetches the child view that represents the given position in
                      the model.  This is implemented to walk through the children
                      looking for a range that contains the given position.  In this
                      view the children do not necessarily have a one to one mapping
                      with the child elements.                    
                    <param>
                        pos  the search position >= 0                        
                    </param>
                    <param>
                        a  the allocation to the table on entry, and the
                          allocation of the view containing the position on exit                        
                    </param>
                    <return>
                        the view representing the given position, or
                          null if there isn't one                        
                    </return>
                </javadoc>
                <method name="getViewAtPosition" type="View" line="1369">
                    <params>
                        <param name="pos" type="int"/>
                        <param name="a" type="Rectangle"/>
                    </params>
                    <declaration name="n" type="int" line="1370"/>
                    <scope line="1371">
                        <declaration name="v" type="View" line="1372"/>
                        <declaration name="p0" type="int" line="1373"/>
                        <declaration name="p1" type="int" line="1374"/>
                        <scope line="1375">
                            <scope line="1376"/>
                        </scope>
                    </scope>
                    <scope line="1382">
                        <declaration name="v" type="View" line="1383"/>
                        <scope line="1384"/>
                    </scope>
                </method>
                <javadoc line="1391">
                    Update any cached values that come from attributes.                    
                </javadoc>
                <method name="setPropertiesFromAttributes" type="void" line="1394">
                    <declaration name="sheet" type="StyleSheet" line="1395"/>
                </method>
                <declaration name="painter" type="StyleSheet.BoxPainter" line="1399"/>
                <declaration name="attr" type="AttributeSet" line="1400"/>
                <declaration name="fillColumns" type="BitSet" line="1401"/>
                <javadoc line="1401">
                    columns filled by multi-column or multi-row cells                    
                </javadoc>
                <declaration name="rowIndex" type="int" line="1405"/>
                <javadoc line="1405">
                    The row index within the overall grid                    
                </javadoc>
                <declaration name="viewIndex" type="int" line="1409"/>
                <javadoc line="1409">
                    The view index (for row index to view index conversion).
                      This is set by the updateGrid method.                    
                </javadoc>
                <declaration name="multiRowCells" type="boolean" line="1414"/>
                <javadoc line="1414">
                    Does this table row have cells that span multiple rows?                    
                </javadoc>
            </class>
            <class name="CellView" line="1419">
                <extends class="BlockView"/>
                <javadoc line="1419">
                    Default view of an html table cell.  This needs to be moved
                      somewhere else.                    
                </javadoc>
                <javadoc line="1424">
                    Constructs a TableCell for the given element.                    
                    <param>
                        elem the element that this view is responsible for                        
                    </param>
                </javadoc>
                <method name="CellView" type="constructor" line="1428">
                    <params>
                        <param name="elem" type="Element"/>
                    </params>
                </method>
                <javadoc line="1431">
                    Perform layout for the major axis of the box (i.e. the
                      axis that it represents).  The results of the layout should
                      be placed in the given arrays which represent the allocations
                      to the children along the major axis.  This is called by the
                      superclass to recalculate the positions of the child views
                      when the layout might have changed.
                      &lt;p&gt;
                      This is implemented to delegate to the superclass to
                      tile the children.  If the target span is greater than
                      was needed, the offsets are adjusted to align the children
                      (i.e. position according to the html valign attribute).                    
                    <param>
                        targetSpan the total span given to the view, which
                          whould be used to layout the children                        
                    </param>
                    <param>
                        axis the axis being layed out                        
                    </param>
                    <param>
                        offsets the offsets from the origin of the view for
                          each of the child views; this is a return value and is
                          filled in by the implementation of this method                        
                    </param>
                    <param>
                        spans the span of each child view; this is a return
                          value and is filled in by the implementation of this method                        
                    </param>
                    <return>
                        the offset and span for each child view in the
                          offsets and spans parameters                        
                    </return>
                </javadoc>
                <method name="layoutMajorAxis" type="void" line="1454">
                    <params>
                        <param name="targetSpan" type="int"/>
                        <param name="axis" type="int"/>
                        <param name="offsets" type="int[]"/>
                        <param name="spans" type="int[]"/>
                    </params>
                    <declaration name="used" type="int" line="1456"/>
                    <declaration name="n" type="int" line="1457"/>
                    <scope line="1458"/>
                    <declaration name="adjust" type="int" line="1461"/>
                    <scope line="1462">
                        <declaration name="valign" type="String" line="1463"/>
                        <scope line="1464">
                            <declaration name="rowAttr" type="AttributeSet" line="1465"/>
                        </scope>
                        <scope line="1468"/>
                        <scope line="1471"/>
                    </scope>
                    <scope line="1475">
                        <scope line="1476"/>
                    </scope>
                </method>
                <javadoc line="1481">
                    Calculate the requirements needed along the major axis.
                      This is called by the superclass whenever the requirements
                      need to be updated (i.e. a preferenceChanged was messaged
                      through this view).
                      &lt;p&gt;
                      This is implemented to delegate to the superclass, but
                      indicate the maximum size is very large (i.e. the cell
                      is willing to expend to occupy the full height of the row).                    
                    <param>
                        axis the axis being layed out.                        
                    </param>
                    <param>
                        r the requirements to fill in.  If null, a new one
                          should be allocated.                        
                    </param>
                </javadoc>
                <method name="calculateMajorAxisRequirements" type="SizeRequirements" line="1494">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                    <declaration name="req" type="SizeRequirements" line="1495"/>
                </method>
                <method name="calculateMinorAxisRequirements" type="SizeRequirements" line="1499">
                    <params>
                        <param name="axis" type="int"/>
                        <param name="r" type="SizeRequirements"/>
                    </params>
                    <declaration name="rv" type="SizeRequirements" line="1500"/>
                    <declaration name="n" type="int" line="1501"/>
                    <declaration name="min" type="int" line="1502"/>
                    <scope line="1503">
                        <declaration name="v" type="View" line="1504"/>
                    </scope>
                </method>
            </class>
        </class>
    </source>