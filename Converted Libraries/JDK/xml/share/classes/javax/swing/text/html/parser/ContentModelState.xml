<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html.parser">
        <class name="ContentModelState" line="28">
            <javadoc line="28">
                A content model state. This is basically a list of pointers to
                  the BNF expression representing the model (the ContentModel).
                  Each element in a DTD has a content model which describes the
                  elements that may occur inside, and the order in which they can
                  occur.
                  &lt;p&gt;
                  Each time a token is reduced a new state is created.
                  &lt;p&gt;
                  See Annex H on page 556 of the SGML handbook for more information.                
                <see>
                    Parser                    
                </see>
                <see>
                    DTD                    
                </see>
                <see>
                    Element                    
                </see>
                <see>
                    ContentModel                    
                </see>
                <author>
                    Arthur van Hoff                    
                </author>
            </javadoc>
            <declaration name="model" type="ContentModel" line="46"/>
            <declaration name="value" type="long" line="47"/>
            <declaration name="next" type="ContentModelState" line="48"/>
            <javadoc line="50">
                Create a content model state for a content model.                
            </javadoc>
            <method name="ContentModelState" type="constructor" line="53">
                <params>
                    <param name="model" type="ContentModel"/>
                </params>
            </method>
            <javadoc line="57">
                Create a content model state for a content model given the
                  remaining state that needs to be reduce.                
            </javadoc>
            <method name="ContentModelState" type="constructor" line="61">
                <params>
                    <param name="content" type="Object"/>
                    <param name="next" type="ContentModelState"/>
                </params>
            </method>
            <javadoc line="65">
                Create a content model state for a content model given the
                  remaining state that needs to be reduce.                
            </javadoc>
            <method name="ContentModelState" type="constructor" line="69">
                <params>
                    <param name="content" type="Object"/>
                    <param name="next" type="ContentModelState"/>
                    <param name="value" type="long"/>
                </params>
            </method>
            <javadoc line="75">
                Return the content model that is relevant to the current state.                
            </javadoc>
            <method name="getModel" type="ContentModel" line="78">
                <declaration name="m" type="ContentModel" line="79"/>
                <scope line="80">
                    <scope line="81"/>
                    <scope line="83"/>
                </scope>
            </method>
            <javadoc line="90">
                Check if the state can be terminated. That is there are no more
                  tokens required in the input stream.                
                <return>
                    true if the model can terminate without further input                    
                </return>
            </javadoc>
            <method name="terminate" type="boolean" line="95">
                <scope line="98"/>
                <scope line="106">
                    <scope line="107"/>
                </scope>
                <scope line="113">
                    <declaration name="m" type="ContentModel" line="114"/>
                    <scope line="116">
                        <scope line="117">
                            <scope line="118"/>
                        </scope>
                    </scope>
                </scope>
                <scope line="126">
                    <declaration name="m" type="ContentModel" line="127"/>
                    <scope line="131"/>
                </scope>
            </method>
            <javadoc line="142">
                Check if the state can be terminated. That is there are no more
                  tokens required in the input stream.                
                <return>
                    the only possible element that can occur next                    
                </return>
            </javadoc>
            <method name="first" type="Element" line="147">
                <scope line="158">
                    <declaration name="m" type="ContentModel" line="159"/>
                </scope>
            </method>
            <javadoc line="169">
                Advance this state to a new state. An exception is thrown if the
                  token is illegal at this point in the content model.                
                <return>
                    next state after reducing a token                    
                </return>
            </javadoc>
            <method name="advance" type="ContentModelState" line="174">
                <params>
                    <param name="token" type="Object"/>
                </params>
                <comment line="266">
                    PENDING: Currently we don&apos;t correctly deal with optional start                    
                </comment>
                <comment line="267">
                    tags. This can most notably be seen with the 4.01 spec where                    
                </comment>
                <comment line="268">
                    TBODY&apos;s start and end tags are optional.                    
                </comment>
                <comment line="269">
                    Uncommenting this and the PENDING in ContentModel will                    
                </comment>
                <comment line="270">
                    correctly skip the omit tags, but the delegate is not notified.                    
                </comment>
                <comment line="271">
                    Some additional API needs to be added to track skipped tags,                    
                </comment>
                <comment line="272">
                    and this can then be added back.                    
                </comment>
                <comment line="273">
                    if ((model.content instanceof Element)) {
                    Element e = (Element)model.content;
                    
                    if (e.omitStart() &amp;&amp; e.content != null) {
                    return new ContentModelState(e.content, next).advance(
                    token);
                    }
                    }                    
                </comment>
                <comment line="285">
                    We used to throw this exception at this point.  However, it                    
                </comment>
                <comment line="286">
                    was determined that throwing this exception was more expensive                    
                </comment>
                <comment line="287">
                    than returning null, and we could not justify to ourselves why                    
                </comment>
                <comment line="288">
                    it was necessary to throw an exception, rather than simply                    
                </comment>
                <comment line="289">
                    returning null.  I&apos;m leaving it in a commented out state so                    
                </comment>
                <comment line="290">
                    that it can be easily restored if the situation ever arises.                    
                </comment>
                <comment line="291">
                                        
                </comment>
                <comment line="292">
                    throw new IllegalArgumentException(&quot;invalid token: &quot; + token);                    
                </comment>
                <scope line="177"/>
                <scope line="181">
                    <scope line="182"/>
                    <scope line="184"/>
                </scope>
                <scope line="191"/>
                <scope line="194"/>
                <scope line="196"/>
                <scope line="201"/>
                <scope line="204"/>
                <scope line="206"/>
                <scope line="211">
                    <scope line="212"/>
                </scope>
                <scope line="218">
                    <declaration name="m" type="ContentModel" line="219"/>
                    <scope line="222">
                        <scope line="223"/>
                        <scope line="225"/>
                    </scope>
                </scope>
                <scope line="233">
                    <declaration name="m" type="ContentModel" line="234"/>
                    <declaration name="complete" type="boolean" line="235"/>
                    <scope line="237">
                        <scope line="238">
                            <scope line="239"/>
                            <scope line="243"/>
                        </scope>
                    </scope>
                    <scope line="248">
                        <scope line="249"/>
                        <scope line="251"/>
                    </scope>
                </scope>
                <scope line="259">
                    <scope line="261"/>
                </scope>
            </method>
        </class>
    </source>