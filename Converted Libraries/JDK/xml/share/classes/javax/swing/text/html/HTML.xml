<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.io"/>
        <import package="java.util.Hashtable"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.StyleContext"/>
        <class name="HTML" line="7">
            <javadoc line="7">
                Constants used in the &lt;code&gt;HTMLDocument&lt;/code&gt;.  These
                  are basically tag and attribute definitions.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <class name="Tag" line="14">
                <javadoc line="14">
                    Typesafe enumeration for an HTML tag.  Although the
                      set of HTML tags is a closed set, we have left the
                      set open so that people can add their own tag types
                      to their custom parser and still communicate to the
                      reader.                    
                </javadoc>
                <javadoc line="22">
                    @since 1.3                    
                </javadoc>
                <method name="Tag" type="constructor" line="25"/>
                <javadoc line="27">
                    Creates a new &lt;code&gt;Tag&lt;/code&gt; with the specified &lt;code&gt;id&lt;/code&gt;,
                      and with &lt;code&gt;causesBreak&lt;/code&gt; and &lt;code&gt;isBlock&lt;/code&gt;
                      set to &lt;code&gt;false&lt;/code&gt;.                    
                    <param>
                        id  the id of the new tag                        
                    </param>
                </javadoc>
                <method name="Tag" type="constructor" line="33">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <javadoc line="36">
                    Creates a new &lt;code&gt;Tag&lt;/code&gt; with the specified &lt;code&gt;id&lt;/code&gt;;
                      &lt;code&gt;causesBreak&lt;/code&gt; and &lt;code&gt;isBlock&lt;/code&gt; are defined
                      by the user.                    
                    <param>
                        id the id of the new tag                        
                    </param>
                    <param>
                        causesBreak  <code>true</code> if this tag
                          causes a break to the flow of data                        
                    </param>
                    <param>
                        isBlock <code>true</code> if the tag is used
                          to add structure to a document                        
                    </param>
                </javadoc>
                <method name="Tag" type="constructor" line="46">
                    <params>
                        <param name="id" type="String"/>
                        <param name="causesBreak" type="boolean"/>
                        <param name="isBlock" type="boolean"/>
                    </params>
                </method>
                <javadoc line="51">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag is a block
                      tag, which is a tag used to add structure to a
                      document.                    
                    <return>
                        <code>true</code> if this tag is a block
                          tag, otherwise returns <code>false</code>                        
                    </return>
                </javadoc>
                <method name="isBlock" type="boolean" line="58"/>
                <javadoc line="61">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag causes a
                      line break to the flow of data, otherwise returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                    <return>
                        <code>true</code> if this tag causes a
                          line break to the flow of data, otherwise returns
                          <code>false</code>                        
                    </return>
                </javadoc>
                <method name="breaksFlow" type="boolean" line="69"/>
                <javadoc line="72">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag is pre-formatted,
                      which is true if the tag is either &lt;code&gt;PRE&lt;/code&gt; or
                      &lt;code&gt;TEXTAREA&lt;/code&gt;.                    
                    <return>
                        <code>true</code> if this tag is pre-formatted,
                          otherwise returns <code>false</code>                        
                    </return>
                </javadoc>
                <method name="isPreformatted" type="boolean" line="79"/>
                <javadoc line="82">
                    Returns the string representation of the
                      tag.                    
                    <return>
                        the <code>String</code> representation of the tag                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="87"/>
                <javadoc line="90">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag is considered to be a paragraph
                      in the internal HTML model. &lt;code&gt;false&lt;/code&gt; - otherwise.                    
                    <return>
                        <code>true</code> if this tag is considered to be a paragraph
                          in the internal HTML model. <code>false</code> - otherwise.                        
                    </return>
                    <see>
                        HTMLDocument.HTMLReader.ParagraphAction                        
                    </see>
                </javadoc>
                <method name="isParagraph" type="boolean" line="97"/>
                <declaration name="blockTag" type="boolean" line="100"/>
                <declaration name="breakTag" type="boolean" line="101"/>
                <declaration name="name" type="String" line="102"/>
                <declaration name="unknown" type="boolean" line="103"/>
                <declaration name="A" type="Tag" line="104"/>
                <declaration name="ADDRESS" type="Tag" line="105"/>
                <declaration name="APPLET" type="Tag" line="106"/>
                <declaration name="AREA" type="Tag" line="107"/>
                <declaration name="B" type="Tag" line="108"/>
                <declaration name="BASE" type="Tag" line="109"/>
                <declaration name="BASEFONT" type="Tag" line="110"/>
                <declaration name="BIG" type="Tag" line="111"/>
                <declaration name="BLOCKQUOTE" type="Tag" line="112"/>
                <declaration name="BODY" type="Tag" line="113"/>
                <declaration name="BR" type="Tag" line="114"/>
                <declaration name="CAPTION" type="Tag" line="115"/>
                <declaration name="CENTER" type="Tag" line="116"/>
                <declaration name="CITE" type="Tag" line="117"/>
                <declaration name="CODE" type="Tag" line="118"/>
                <declaration name="DD" type="Tag" line="119"/>
                <declaration name="DFN" type="Tag" line="120"/>
                <declaration name="DIR" type="Tag" line="121"/>
                <declaration name="DIV" type="Tag" line="122"/>
                <declaration name="DL" type="Tag" line="123"/>
                <declaration name="DT" type="Tag" line="124"/>
                <declaration name="EM" type="Tag" line="125"/>
                <declaration name="FONT" type="Tag" line="126"/>
                <declaration name="FORM" type="Tag" line="127"/>
                <declaration name="FRAME" type="Tag" line="128"/>
                <declaration name="FRAMESET" type="Tag" line="129"/>
                <declaration name="H1" type="Tag" line="130"/>
                <declaration name="H2" type="Tag" line="131"/>
                <declaration name="H3" type="Tag" line="132"/>
                <declaration name="H4" type="Tag" line="133"/>
                <declaration name="H5" type="Tag" line="134"/>
                <declaration name="H6" type="Tag" line="135"/>
                <declaration name="HEAD" type="Tag" line="136"/>
                <declaration name="HR" type="Tag" line="137"/>
                <declaration name="HTML" type="Tag" line="138"/>
                <declaration name="I" type="Tag" line="139"/>
                <declaration name="IMG" type="Tag" line="140"/>
                <declaration name="INPUT" type="Tag" line="141"/>
                <declaration name="ISINDEX" type="Tag" line="142"/>
                <declaration name="KBD" type="Tag" line="143"/>
                <declaration name="LI" type="Tag" line="144"/>
                <declaration name="LINK" type="Tag" line="145"/>
                <declaration name="MAP" type="Tag" line="146"/>
                <declaration name="MENU" type="Tag" line="147"/>
                <declaration name="META" type="Tag" line="148"/>
                <declaration name="NOBR" type="Tag" line="149"/>
                <declaration name="NOFRAMES" type="Tag" line="150"/>
                <declaration name="OBJECT" type="Tag" line="151"/>
                <declaration name="OL" type="Tag" line="152"/>
                <declaration name="OPTION" type="Tag" line="153"/>
                <declaration name="P" type="Tag" line="154"/>
                <declaration name="PARAM" type="Tag" line="155"/>
                <declaration name="PRE" type="Tag" line="156"/>
                <declaration name="SAMP" type="Tag" line="157"/>
                <declaration name="SCRIPT" type="Tag" line="158"/>
                <declaration name="SELECT" type="Tag" line="159"/>
                <declaration name="SMALL" type="Tag" line="160"/>
                <declaration name="SPAN" type="Tag" line="161"/>
                <declaration name="STRIKE" type="Tag" line="162"/>
                <declaration name="S" type="Tag" line="163"/>
                <declaration name="STRONG" type="Tag" line="164"/>
                <declaration name="STYLE" type="Tag" line="165"/>
                <declaration name="SUB" type="Tag" line="166"/>
                <declaration name="SUP" type="Tag" line="167"/>
                <declaration name="TABLE" type="Tag" line="168"/>
                <declaration name="TD" type="Tag" line="169"/>
                <declaration name="TEXTAREA" type="Tag" line="170"/>
                <declaration name="TH" type="Tag" line="171"/>
                <declaration name="TITLE" type="Tag" line="172"/>
                <declaration name="TR" type="Tag" line="173"/>
                <declaration name="TT" type="Tag" line="174"/>
                <declaration name="U" type="Tag" line="175"/>
                <declaration name="UL" type="Tag" line="176"/>
                <declaration name="VAR" type="Tag" line="177"/>
                <declaration name="IMPLIED" type="Tag" line="178"/>
                <javadoc line="178">
                    All text content must be in a paragraph element.
                      If a paragraph didn&apos;t exist when content was
                      encountered, a paragraph is manufactured.
                      &lt;p&gt;
                      This is a tag synthesized by the HTML reader.
                      Since elements are identified by their tag type,
                      we create a some fake tag types to mark the elements
                      that were manufactured.                    
                </javadoc>
                <declaration name="CONTENT" type="Tag" line="189"/>
                <javadoc line="189">
                    All text content is labeled with this tag.
                      &lt;p&gt;
                      This is a tag synthesized by the HTML reader.
                      Since elements are identified by their tag type,
                      we create a some fake tag types to mark the elements
                      that were manufactured.                    
                </javadoc>
                <declaration name="COMMENT" type="Tag" line="198"/>
                <javadoc line="198">
                    All comments are labeled with this tag.
                      &lt;p&gt;
                      This is a tag synthesized by the HTML reader.
                      Since elements are identified by their tag type,
                      we create a some fake tag types to mark the elements
                      that were manufactured.                    
                </javadoc>
                <declaration name="allTags" type="Tag" line="207"/>
                <scope line="208"/>
            </class>
            <class name="UnknownTag" line="212">
                <extends class="Tag"/>
                <implements interface="Serializable"/>
                <javadoc line="213">
                    Creates a new &lt;code&gt;UnknownTag&lt;/code&gt; with the specified
                      &lt;code&gt;id&lt;/code&gt;.                    
                    <param>
                        id the id of the new tag                        
                    </param>
                </javadoc>
                <method name="UnknownTag" type="constructor" line="218">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <javadoc line="221">
                    Returns the hash code which corresponds to the string
                      for this tag.                    
                </javadoc>
                <method name="hashCode" type="int" line="225"/>
                <javadoc line="228">
                    Compares this object to the specifed object.
                      The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
                      &lt;code&gt;null&lt;/code&gt; and is an &lt;code&gt;UnknownTag&lt;/code&gt; object
                      with the same name.                    
                    <param>
                        obj   the object to compare this tag with                        
                    </param>
                    <return>
                        <code>true</code> if the objects are equal;
                          <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="237">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="238"/>
                </method>
                <method name="writeObject" type="void" line="243">
                    <params>
                        <param name="s" type="java.io.ObjectOutputStream"/>
                    </params>
                </method>
                <method name="readObject" type="void" line="250">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                </method>
            </class>
            <class name="Attribute" line="258">
                <javadoc line="258">
                    Typesafe enumeration representing an HTML
                      attribute.                    
                </javadoc>
                <javadoc line="263">
                    Creates a new &lt;code&gt;Attribute&lt;/code&gt; with the specified
                      &lt;code&gt;id&lt;/code&gt;.                    
                    <param>
                        id the id of the new <code>Attribute</code>                        
                    </param>
                </javadoc>
                <method name="Attribute" type="constructor" line="268">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <javadoc line="271">
                    Returns the string representation of this attribute.                    
                    <return>
                        the string representation of this attribute                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="275"/>
                <declaration name="name" type="String" line="278"/>
                <declaration name="SIZE" type="Attribute" line="279"/>
                <declaration name="COLOR" type="Attribute" line="280"/>
                <declaration name="CLEAR" type="Attribute" line="281"/>
                <declaration name="BACKGROUND" type="Attribute" line="282"/>
                <declaration name="BGCOLOR" type="Attribute" line="283"/>
                <declaration name="TEXT" type="Attribute" line="284"/>
                <declaration name="LINK" type="Attribute" line="285"/>
                <declaration name="VLINK" type="Attribute" line="286"/>
                <declaration name="ALINK" type="Attribute" line="287"/>
                <declaration name="WIDTH" type="Attribute" line="288"/>
                <declaration name="HEIGHT" type="Attribute" line="289"/>
                <declaration name="ALIGN" type="Attribute" line="290"/>
                <declaration name="NAME" type="Attribute" line="291"/>
                <declaration name="HREF" type="Attribute" line="292"/>
                <declaration name="REL" type="Attribute" line="293"/>
                <declaration name="REV" type="Attribute" line="294"/>
                <declaration name="TITLE" type="Attribute" line="295"/>
                <declaration name="TARGET" type="Attribute" line="296"/>
                <declaration name="SHAPE" type="Attribute" line="297"/>
                <declaration name="COORDS" type="Attribute" line="298"/>
                <declaration name="ISMAP" type="Attribute" line="299"/>
                <declaration name="NOHREF" type="Attribute" line="300"/>
                <declaration name="ALT" type="Attribute" line="301"/>
                <declaration name="ID" type="Attribute" line="302"/>
                <declaration name="SRC" type="Attribute" line="303"/>
                <declaration name="HSPACE" type="Attribute" line="304"/>
                <declaration name="VSPACE" type="Attribute" line="305"/>
                <declaration name="USEMAP" type="Attribute" line="306"/>
                <declaration name="LOWSRC" type="Attribute" line="307"/>
                <declaration name="CODEBASE" type="Attribute" line="308"/>
                <declaration name="CODE" type="Attribute" line="309"/>
                <declaration name="ARCHIVE" type="Attribute" line="310"/>
                <declaration name="VALUE" type="Attribute" line="311"/>
                <declaration name="VALUETYPE" type="Attribute" line="312"/>
                <declaration name="TYPE" type="Attribute" line="313"/>
                <declaration name="CLASS" type="Attribute" line="314"/>
                <declaration name="STYLE" type="Attribute" line="315"/>
                <declaration name="LANG" type="Attribute" line="316"/>
                <declaration name="FACE" type="Attribute" line="317"/>
                <declaration name="DIR" type="Attribute" line="318"/>
                <declaration name="DECLARE" type="Attribute" line="319"/>
                <declaration name="CLASSID" type="Attribute" line="320"/>
                <declaration name="DATA" type="Attribute" line="321"/>
                <declaration name="CODETYPE" type="Attribute" line="322"/>
                <declaration name="STANDBY" type="Attribute" line="323"/>
                <declaration name="BORDER" type="Attribute" line="324"/>
                <declaration name="SHAPES" type="Attribute" line="325"/>
                <declaration name="NOSHADE" type="Attribute" line="326"/>
                <declaration name="COMPACT" type="Attribute" line="327"/>
                <declaration name="START" type="Attribute" line="328"/>
                <declaration name="ACTION" type="Attribute" line="329"/>
                <declaration name="METHOD" type="Attribute" line="330"/>
                <declaration name="ENCTYPE" type="Attribute" line="331"/>
                <declaration name="CHECKED" type="Attribute" line="332"/>
                <declaration name="MAXLENGTH" type="Attribute" line="333"/>
                <declaration name="MULTIPLE" type="Attribute" line="334"/>
                <declaration name="SELECTED" type="Attribute" line="335"/>
                <declaration name="ROWS" type="Attribute" line="336"/>
                <declaration name="COLS" type="Attribute" line="337"/>
                <declaration name="DUMMY" type="Attribute" line="338"/>
                <declaration name="CELLSPACING" type="Attribute" line="339"/>
                <declaration name="CELLPADDING" type="Attribute" line="340"/>
                <declaration name="VALIGN" type="Attribute" line="341"/>
                <declaration name="HALIGN" type="Attribute" line="342"/>
                <declaration name="NOWRAP" type="Attribute" line="343"/>
                <declaration name="ROWSPAN" type="Attribute" line="344"/>
                <declaration name="COLSPAN" type="Attribute" line="345"/>
                <declaration name="PROMPT" type="Attribute" line="346"/>
                <declaration name="HTTPEQUIV" type="Attribute" line="347"/>
                <declaration name="CONTENT" type="Attribute" line="348"/>
                <declaration name="LANGUAGE" type="Attribute" line="349"/>
                <declaration name="VERSION" type="Attribute" line="350"/>
                <declaration name="N" type="Attribute" line="351"/>
                <declaration name="FRAMEBORDER" type="Attribute" line="352"/>
                <declaration name="MARGINWIDTH" type="Attribute" line="353"/>
                <declaration name="MARGINHEIGHT" type="Attribute" line="354"/>
                <declaration name="SCROLLING" type="Attribute" line="355"/>
                <declaration name="NORESIZE" type="Attribute" line="356"/>
                <declaration name="ENDTAG" type="Attribute" line="357"/>
                <declaration name="COMMENT" type="Attribute" line="358"/>
                <declaration name="MEDIA" type="Attribute" line="359"/>
                <declaration name="allAttributes" type="Attribute" line="360"/>
            </class>
            <declaration name="tagHashtable" type="Hashtable&lt;String,Tag&gt;" line="362"/>
            <declaration name="scMapping" type="Hashtable&lt;Object,Tag&gt;" line="363"/>
            <javadoc line="363">
                Maps from StyleConstant key to HTML.Tag.                
            </javadoc>
            <scope line="367">
                <scope line="368"/>
                <scope line="375"/>
            </scope>
            <javadoc line="388">
                Returns the set of actual HTML tags that
                  are recognized by the default HTML reader.
                  This set does not include tags that are
                  manufactured by the reader.                
            </javadoc>
            <method name="getAllTags" type="Tag[]" line="394">
                <declaration name="tags" type="Tag[]" line="395"/>
            </method>
            <javadoc line="399">
                Fetches a tag constant for a well-known tag name (i.e. one of
                  the tags in the set {A, ADDRESS, APPLET, AREA, B,
                  BASE, BASEFONT, BIG,
                  BLOCKQUOTE, BODY, BR, CAPTION, CENTER, CITE, CODE,
                  DD, DFN, DIR, DIV, DL, DT, EM, FONT, FORM, FRAME,
                  FRAMESET, H1, H2, H3, H4, H5, H6, HEAD, HR, HTML,
                  I, IMG, INPUT, ISINDEX, KBD, LI, LINK, MAP, MENU,
                  META, NOBR, NOFRAMES, OBJECT, OL, OPTION, P, PARAM,
                  PRE, SAMP, SCRIPT, SELECT, SMALL, SPAN, STRIKE, S,
                  STRONG, STYLE, SUB, SUP, TABLE, TD, TEXTAREA,
                  TH, TITLE, TR, TT, U, UL, VAR}.  If the given
                  name does not represent one of the well-known tags, then
                  &lt;code&gt;null&lt;/code&gt; will be returned.                
                <param>
                    tagName the <code>String</code> name requested                    
                </param>
                <return>
                    a tag constant corresponding to the <code>tagName</code>,
                      or <code>null</code> if not found                    
                </return>
            </javadoc>
            <method name="getTag" type="Tag" line="417">
                <params>
                    <param name="tagName" type="String"/>
                </params>
                <declaration name="t" type="Tag" line="418"/>
            </method>
            <javadoc line="421">
                Returns the HTML &lt;code&gt;Tag&lt;/code&gt; associated with the
                  &lt;code&gt;StyleConstants&lt;/code&gt; key &lt;code&gt;sc&lt;/code&gt;.
                  If no matching &lt;code&gt;Tag&lt;/code&gt; is found, returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    sc the <code>StyleConstants</code> key                    
                </param>
                <return>
                    tag which corresponds to <code>sc</code>, or
                      <code>null</code> if not found                    
                </return>
            </javadoc>
            <method name="getTagForStyleConstantsKey" type="Tag" line="430">
                <params>
                    <param name="sc" type="StyleConstants"/>
                </params>
            </method>
            <javadoc line="433">
                Fetches an integer attribute value.  Attribute values
                  are stored as a string, and this is a convenience method
                  to convert to an actual integer.                
                <param>
                    attr the set of attributes to use to try to fetch a value                    
                </param>
                <param>
                    key the key to use to fetch the value                    
                </param>
                <param>
                    def the default value to use if the attribute isn't
                      defined or there is an error converting to an integer                    
                </param>
            </javadoc>
            <method name="getIntegerAttributeValue" type="int" line="442">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="key" type="Attribute"/>
                    <param name="def" type="int"/>
                </params>
                <declaration name="value" type="int" line="443"/>
                <declaration name="istr" type="String" line="444"/>
                <scope line="445">
                    <scope line="446"/>
                    <scope line="449"/>
                </scope>
            </method>
            <declaration name="NULL_ATTRIBUTE_VALUE" type="String" line="455"/>
            <declaration name="attHashtable" type="Hashtable&lt;String,Attribute&gt;" line="456"/>
            <scope line="457">
                <scope line="458"/>
            </scope>
            <javadoc line="462">
                Returns the set of HTML attributes recognized.                
                <return>
                    the set of HTML attributes recognized                    
                </return>
            </javadoc>
            <method name="getAllAttributeKeys" type="Attribute[]" line="466">
                <declaration name="attributes" type="Attribute[]" line="467"/>
            </method>
            <javadoc line="471">
                Fetches an attribute constant for a well-known attribute name
                  (i.e. one of the attributes in the set {FACE, COMMENT, SIZE,
                  COLOR, CLEAR, BACKGROUND, BGCOLOR, TEXT, LINK, VLINK, ALINK,
                  WIDTH, HEIGHT, ALIGN, NAME, HREF, REL, REV, TITLE, TARGET,
                  SHAPE, COORDS, ISMAP, NOHREF, ALT, ID, SRC, HSPACE, VSPACE,
                  USEMAP, LOWSRC, CODEBASE, CODE, ARCHIVE, VALUE, VALUETYPE,
                  TYPE, CLASS, STYLE, LANG, DIR, DECLARE, CLASSID, DATA, CODETYPE,
                  STANDBY, BORDER, SHAPES, NOSHADE, COMPACT, START, ACTION, METHOD,
                  ENCTYPE, CHECKED, MAXLENGTH, MULTIPLE, SELECTED, ROWS, COLS,
                  DUMMY, CELLSPACING, CELLPADDING, VALIGN, HALIGN, NOWRAP, ROWSPAN,
                  COLSPAN, PROMPT, HTTPEQUIV, CONTENT, LANGUAGE, VERSION, N,
                  FRAMEBORDER, MARGINWIDTH, MARGINHEIGHT, SCROLLING, NORESIZE,
                  MEDIA, ENDTAG}).
                  If the given name does not represent one of the well-known attributes,
                  then &lt;code&gt;null&lt;/code&gt; will be returned.                
                <param>
                    attName the <code>String</code> requested                    
                </param>
                <return>
                    the <code>Attribute</code> corresponding to <code>attName</code>                    
                </return>
            </javadoc>
            <method name="getAttributeKey" type="Attribute" line="490">
                <params>
                    <param name="attName" type="String"/>
                </params>
                <declaration name="a" type="Attribute" line="491"/>
                <scope line="492"/>
            </method>
        </class>
    </source>