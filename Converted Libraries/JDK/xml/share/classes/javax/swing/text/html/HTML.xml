<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="java.io"/>
        <import package="java.util.Hashtable"/>
        <import package="javax.swing.text.AttributeSet"/>
        <import package="javax.swing.text.StyleConstants"/>
        <import package="javax.swing.text.StyleContext"/>
        <class name="HTML" line="33">
            <comment line="285">
                There is no unique instance of UnknownTag, so we allow it to be
                 Serializable.                
            </comment>
            <comment line="535">
                The secret to 73, is that, given that the Hashtable contents
                 never change once the static initialization happens, the initial size
                 that the hashtable grew to was determined, and then that very size
                 is used.                
            </comment>
            <comment line="644">
                This is used in cases where the value for the attribute has not
                  been specified.                
            </comment>
            <comment line="649">
                size determined similar to size of tagHashtable                
            </comment>
            <javadoc line="33">
                Constants used in the &lt;code&gt;HTMLDocument&lt;/code&gt;.  These
                  are basically tag and attribute definitions.                
                <author>
                    Timothy Prinzing                    
                </author>
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <class name="Tag" line="43">
                <comment line="158">
                    --- Tag Names -----------------------------------                    
                </comment>
                <comment line="205">
                                        
                </comment>
                <javadoc line="43">
                    Typesafe enumeration for an HTML tag.  Although the
                      set of HTML tags is a closed set, we have left the
                      set open so that people can add their own tag types
                      to their custom parser and still communicate to the
                      reader.                    
                </javadoc>
                <javadoc line="52">
                    @since 1.3                    
                </javadoc>
                <method name="Tag" type="constructor" line="53"/>
                <javadoc line="55">
                    Creates a new &lt;code&gt;Tag&lt;/code&gt; with the specified &lt;code&gt;id&lt;/code&gt;,
                      and with &lt;code&gt;causesBreak&lt;/code&gt; and &lt;code&gt;isBlock&lt;/code&gt;
                      set to &lt;code&gt;false&lt;/code&gt;.                    
                    <param>
                        id  the id of the new tag                        
                    </param>
                </javadoc>
                <method name="Tag" type="constructor" line="62">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <javadoc line="66">
                    Creates a new &lt;code&gt;Tag&lt;/code&gt; with the specified &lt;code&gt;id&lt;/code&gt;;
                      &lt;code&gt;causesBreak&lt;/code&gt; and &lt;code&gt;isBlock&lt;/code&gt; are defined
                      by the user.                    
                    <param>
                        id the id of the new tag                        
                    </param>
                    <param>
                        causesBreak  <code>true</code> if this tag
                          causes a break to the flow of data                        
                    </param>
                    <param>
                        isBlock <code>true</code> if the tag is used
                          to add structure to a document                        
                    </param>
                </javadoc>
                <method name="Tag" type="constructor" line="77">
                    <params>
                        <param name="id" type="String"/>
                        <param name="causesBreak" type="boolean"/>
                        <param name="isBlock" type="boolean"/>
                    </params>
                </method>
                <javadoc line="83">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag is a block
                      tag, which is a tag used to add structure to a
                      document.                    
                    <return>
                        <code>true</code> if this tag is a block
                          tag, otherwise returns <code>false</code>                        
                    </return>
                </javadoc>
                <method name="isBlock" type="boolean" line="91"/>
                <javadoc line="95">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag causes a
                      line break to the flow of data, otherwise returns
                      &lt;code&gt;false&lt;/code&gt;.                    
                    <return>
                        <code>true</code> if this tag causes a
                          line break to the flow of data, otherwise returns
                          <code>false</code>                        
                    </return>
                </javadoc>
                <method name="breaksFlow" type="boolean" line="104"/>
                <javadoc line="108">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag is pre-formatted,
                      which is true if the tag is either &lt;code&gt;PRE&lt;/code&gt; or
                      &lt;code&gt;TEXTAREA&lt;/code&gt;.                    
                    <return>
                        <code>true</code> if this tag is pre-formatted,
                          otherwise returns <code>false</code>                        
                    </return>
                </javadoc>
                <method name="isPreformatted" type="boolean" line="116"/>
                <javadoc line="120">
                    Returns the string representation of the
                      tag.                    
                    <return>
                        the <code>String</code> representation of the tag                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="126"/>
                <javadoc line="130">
                    Returns &lt;code&gt;true&lt;/code&gt; if this tag is considered to be a paragraph
                      in the internal HTML model. &lt;code&gt;false&lt;/code&gt; - otherwise.                    
                    <return>
                        <code>true</code> if this tag is considered to be a paragraph
                          in the internal HTML model. <code>false</code> - otherwise.                        
                    </return>
                    <see>
                        HTMLDocument.HTMLReader.ParagraphAction                        
                    </see>
                </javadoc>
                <method name="isParagraph" type="boolean" line="138"/>
                <declaration name="blockTag" type="boolean" line="152"/>
                <declaration name="breakTag" type="boolean" line="153"/>
                <declaration name="name" type="String" line="154"/>
                <declaration name="unknown" type="boolean" line="155"/>
                <declaration name="A" type="Tag" line="159"/>
                <declaration name="ADDRESS" type="Tag" line="160"/>
                <declaration name="APPLET" type="Tag" line="161"/>
                <declaration name="AREA" type="Tag" line="162"/>
                <declaration name="B" type="Tag" line="163"/>
                <declaration name="BASE" type="Tag" line="164"/>
                <declaration name="BASEFONT" type="Tag" line="165"/>
                <declaration name="BIG" type="Tag" line="166"/>
                <declaration name="BLOCKQUOTE" type="Tag" line="167"/>
                <declaration name="BODY" type="Tag" line="168"/>
                <declaration name="BR" type="Tag" line="169"/>
                <declaration name="CAPTION" type="Tag" line="170"/>
                <declaration name="CENTER" type="Tag" line="171"/>
                <declaration name="CITE" type="Tag" line="172"/>
                <declaration name="CODE" type="Tag" line="173"/>
                <declaration name="DD" type="Tag" line="174"/>
                <declaration name="DFN" type="Tag" line="175"/>
                <declaration name="DIR" type="Tag" line="176"/>
                <declaration name="DIV" type="Tag" line="177"/>
                <declaration name="DL" type="Tag" line="178"/>
                <declaration name="DT" type="Tag" line="179"/>
                <declaration name="EM" type="Tag" line="180"/>
                <declaration name="FONT" type="Tag" line="181"/>
                <declaration name="FORM" type="Tag" line="182"/>
                <declaration name="FRAME" type="Tag" line="183"/>
                <declaration name="FRAMESET" type="Tag" line="184"/>
                <declaration name="H1" type="Tag" line="185"/>
                <declaration name="H2" type="Tag" line="186"/>
                <declaration name="H3" type="Tag" line="187"/>
                <declaration name="H4" type="Tag" line="188"/>
                <declaration name="H5" type="Tag" line="189"/>
                <declaration name="H6" type="Tag" line="190"/>
                <declaration name="HEAD" type="Tag" line="191"/>
                <declaration name="HR" type="Tag" line="192"/>
                <declaration name="HTML" type="Tag" line="193"/>
                <declaration name="I" type="Tag" line="194"/>
                <declaration name="IMG" type="Tag" line="195"/>
                <declaration name="INPUT" type="Tag" line="196"/>
                <declaration name="ISINDEX" type="Tag" line="197"/>
                <declaration name="KBD" type="Tag" line="198"/>
                <declaration name="LI" type="Tag" line="199"/>
                <declaration name="LINK" type="Tag" line="200"/>
                <declaration name="MAP" type="Tag" line="201"/>
                <declaration name="MENU" type="Tag" line="202"/>
                <declaration name="META" type="Tag" line="203"/>
                <declaration name="NOBR" type="Tag" line="204"/>
                <declaration name="NOFRAMES" type="Tag" line="205"/>
                <declaration name="OBJECT" type="Tag" line="206"/>
                <declaration name="OL" type="Tag" line="207"/>
                <declaration name="OPTION" type="Tag" line="208"/>
                <declaration name="P" type="Tag" line="209"/>
                <declaration name="PARAM" type="Tag" line="210"/>
                <declaration name="PRE" type="Tag" line="211"/>
                <declaration name="SAMP" type="Tag" line="212"/>
                <declaration name="SCRIPT" type="Tag" line="213"/>
                <declaration name="SELECT" type="Tag" line="214"/>
                <declaration name="SMALL" type="Tag" line="215"/>
                <declaration name="SPAN" type="Tag" line="216"/>
                <declaration name="STRIKE" type="Tag" line="217"/>
                <declaration name="S" type="Tag" line="218"/>
                <declaration name="STRONG" type="Tag" line="219"/>
                <declaration name="STYLE" type="Tag" line="220"/>
                <declaration name="SUB" type="Tag" line="221"/>
                <declaration name="SUP" type="Tag" line="222"/>
                <declaration name="TABLE" type="Tag" line="223"/>
                <declaration name="TD" type="Tag" line="224"/>
                <declaration name="TEXTAREA" type="Tag" line="225"/>
                <declaration name="TH" type="Tag" line="226"/>
                <declaration name="TITLE" type="Tag" line="227"/>
                <declaration name="TR" type="Tag" line="228"/>
                <declaration name="TT" type="Tag" line="229"/>
                <declaration name="U" type="Tag" line="230"/>
                <declaration name="UL" type="Tag" line="231"/>
                <declaration name="VAR" type="Tag" line="232"/>
                <declaration name="IMPLIED" type="Tag" line="234"/>
                <javadoc line="234">
                    All text content must be in a paragraph element.
                      If a paragraph didn&apos;t exist when content was
                      encountered, a paragraph is manufactured.
                      &lt;p&gt;
                      This is a tag synthesized by the HTML reader.
                      Since elements are identified by their tag type,
                      we create a some fake tag types to mark the elements
                      that were manufactured.                    
                </javadoc>
                <declaration name="CONTENT" type="Tag" line="246"/>
                <javadoc line="246">
                    All text content is labeled with this tag.
                      &lt;p&gt;
                      This is a tag synthesized by the HTML reader.
                      Since elements are identified by their tag type,
                      we create a some fake tag types to mark the elements
                      that were manufactured.                    
                </javadoc>
                <declaration name="COMMENT" type="Tag" line="256"/>
                <javadoc line="256">
                    All comments are labeled with this tag.
                      &lt;p&gt;
                      This is a tag synthesized by the HTML reader.
                      Since elements are identified by their tag type,
                      we create a some fake tag types to mark the elements
                      that were manufactured.                    
                </javadoc>
                <declaration name="allTags" type="Tag" line="266"/>
                <scope line="278"/>
            </class>
            <class name="UnknownTag" line="286">
                <extends class="Tag"/>
                <comment line="158">
                    --- Tag Names -----------------------------------                    
                </comment>
                <comment line="205">
                                        
                </comment>
                <implements interface="Serializable"/>
                <javadoc line="288">
                    Creates a new &lt;code&gt;UnknownTag&lt;/code&gt; with the specified
                      &lt;code&gt;id&lt;/code&gt;.                    
                    <param>
                        id the id of the new tag                        
                    </param>
                </javadoc>
                <method name="UnknownTag" type="constructor" line="293">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <javadoc line="297">
                    Returns the hash code which corresponds to the string
                      for this tag.                    
                </javadoc>
                <method name="hashCode" type="int" line="301"/>
                <javadoc line="305">
                    Compares this object to the specifed object.
                      The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
                      &lt;code&gt;null&lt;/code&gt; and is an &lt;code&gt;UnknownTag&lt;/code&gt; object
                      with the same name.                    
                    <param>
                        obj   the object to compare this tag with                        
                    </param>
                    <return>
                        <code>true</code> if the objects are equal;
                          <code>false</code> otherwise                        
                    </return>
                </javadoc>
                <method name="equals" type="boolean" line="315">
                    <params>
                        <param name="obj" type="Object"/>
                    </params>
                    <scope line="316"/>
                </method>
                <method name="writeObject" type="void" line="323">
                    <params>
                        <param name="s" type="java.io.ObjectOutputStream"/>
                    </params>
                </method>
                <method name="readObject" type="void" line="332">
                    <params>
                        <param name="s" type="ObjectInputStream"/>
                    </params>
                </method>
            </class>
            <class name="Attribute" line="341">
                <comment line="158">
                    --- Tag Names -----------------------------------                    
                </comment>
                <comment line="205">
                                        
                </comment>
                <javadoc line="341">
                    Typesafe enumeration representing an HTML
                      attribute.                    
                </javadoc>
                <javadoc line="347">
                    Creates a new &lt;code&gt;Attribute&lt;/code&gt; with the specified
                      &lt;code&gt;id&lt;/code&gt;.                    
                    <param>
                        id the id of the new <code>Attribute</code>                        
                    </param>
                </javadoc>
                <method name="Attribute" type="constructor" line="353">
                    <params>
                        <param name="id" type="String"/>
                    </params>
                </method>
                <javadoc line="357">
                    Returns the string representation of this attribute.                    
                    <return>
                        the string representation of this attribute                        
                    </return>
                </javadoc>
                <method name="toString" type="String" line="361"/>
                <declaration name="name" type="String" line="365"/>
                <declaration name="SIZE" type="Attribute" line="367"/>
                <declaration name="COLOR" type="Attribute" line="368"/>
                <declaration name="CLEAR" type="Attribute" line="369"/>
                <declaration name="BACKGROUND" type="Attribute" line="370"/>
                <declaration name="BGCOLOR" type="Attribute" line="371"/>
                <declaration name="TEXT" type="Attribute" line="372"/>
                <declaration name="LINK" type="Attribute" line="373"/>
                <declaration name="VLINK" type="Attribute" line="374"/>
                <declaration name="ALINK" type="Attribute" line="375"/>
                <declaration name="WIDTH" type="Attribute" line="376"/>
                <declaration name="HEIGHT" type="Attribute" line="377"/>
                <declaration name="ALIGN" type="Attribute" line="378"/>
                <declaration name="NAME" type="Attribute" line="379"/>
                <declaration name="HREF" type="Attribute" line="380"/>
                <declaration name="REL" type="Attribute" line="381"/>
                <declaration name="REV" type="Attribute" line="382"/>
                <declaration name="TITLE" type="Attribute" line="383"/>
                <declaration name="TARGET" type="Attribute" line="384"/>
                <declaration name="SHAPE" type="Attribute" line="385"/>
                <declaration name="COORDS" type="Attribute" line="386"/>
                <declaration name="ISMAP" type="Attribute" line="387"/>
                <declaration name="NOHREF" type="Attribute" line="388"/>
                <declaration name="ALT" type="Attribute" line="389"/>
                <declaration name="ID" type="Attribute" line="390"/>
                <declaration name="SRC" type="Attribute" line="391"/>
                <declaration name="HSPACE" type="Attribute" line="392"/>
                <declaration name="VSPACE" type="Attribute" line="393"/>
                <declaration name="USEMAP" type="Attribute" line="394"/>
                <declaration name="LOWSRC" type="Attribute" line="395"/>
                <declaration name="CODEBASE" type="Attribute" line="396"/>
                <declaration name="CODE" type="Attribute" line="397"/>
                <declaration name="ARCHIVE" type="Attribute" line="398"/>
                <declaration name="VALUE" type="Attribute" line="399"/>
                <declaration name="VALUETYPE" type="Attribute" line="400"/>
                <declaration name="TYPE" type="Attribute" line="401"/>
                <declaration name="CLASS" type="Attribute" line="402"/>
                <declaration name="STYLE" type="Attribute" line="403"/>
                <declaration name="LANG" type="Attribute" line="404"/>
                <declaration name="FACE" type="Attribute" line="405"/>
                <declaration name="DIR" type="Attribute" line="406"/>
                <declaration name="DECLARE" type="Attribute" line="407"/>
                <declaration name="CLASSID" type="Attribute" line="408"/>
                <declaration name="DATA" type="Attribute" line="409"/>
                <declaration name="CODETYPE" type="Attribute" line="410"/>
                <declaration name="STANDBY" type="Attribute" line="411"/>
                <declaration name="BORDER" type="Attribute" line="412"/>
                <declaration name="SHAPES" type="Attribute" line="413"/>
                <declaration name="NOSHADE" type="Attribute" line="414"/>
                <declaration name="COMPACT" type="Attribute" line="415"/>
                <declaration name="START" type="Attribute" line="416"/>
                <declaration name="ACTION" type="Attribute" line="417"/>
                <declaration name="METHOD" type="Attribute" line="418"/>
                <declaration name="ENCTYPE" type="Attribute" line="419"/>
                <declaration name="CHECKED" type="Attribute" line="420"/>
                <declaration name="MAXLENGTH" type="Attribute" line="421"/>
                <declaration name="MULTIPLE" type="Attribute" line="422"/>
                <declaration name="SELECTED" type="Attribute" line="423"/>
                <declaration name="ROWS" type="Attribute" line="424"/>
                <declaration name="COLS" type="Attribute" line="425"/>
                <declaration name="DUMMY" type="Attribute" line="426"/>
                <declaration name="CELLSPACING" type="Attribute" line="427"/>
                <declaration name="CELLPADDING" type="Attribute" line="428"/>
                <declaration name="VALIGN" type="Attribute" line="429"/>
                <declaration name="HALIGN" type="Attribute" line="430"/>
                <declaration name="NOWRAP" type="Attribute" line="431"/>
                <declaration name="ROWSPAN" type="Attribute" line="432"/>
                <declaration name="COLSPAN" type="Attribute" line="433"/>
                <declaration name="PROMPT" type="Attribute" line="434"/>
                <declaration name="HTTPEQUIV" type="Attribute" line="435"/>
                <declaration name="CONTENT" type="Attribute" line="436"/>
                <declaration name="LANGUAGE" type="Attribute" line="437"/>
                <declaration name="VERSION" type="Attribute" line="438"/>
                <declaration name="N" type="Attribute" line="439"/>
                <declaration name="FRAMEBORDER" type="Attribute" line="440"/>
                <declaration name="MARGINWIDTH" type="Attribute" line="441"/>
                <declaration name="MARGINHEIGHT" type="Attribute" line="442"/>
                <declaration name="SCROLLING" type="Attribute" line="443"/>
                <declaration name="NORESIZE" type="Attribute" line="444"/>
                <declaration name="ENDTAG" type="Attribute" line="445"/>
                <declaration name="COMMENT" type="Attribute" line="446"/>
                <declaration name="MEDIA" type="Attribute" line="447"/>
                <declaration name="allAttributes" type="Attribute" line="449"/>
            </class>
            <declaration name="tagHashtable" type="Hashtable&lt;String,Tag&gt;" line="539"/>
            <declaration name="scMapping" type="Hashtable&lt;Object,Tag&gt;" line="541"/>
            <javadoc line="541">
                Maps from StyleConstant key to HTML.Tag.                
            </javadoc>
            <scope line="544">
                <scope line="546"/>
                <scope line="553"/>
            </scope>
            <javadoc line="568">
                Returns the set of actual HTML tags that
                  are recognized by the default HTML reader.
                  This set does not include tags that are
                  manufactured by the reader.                
            </javadoc>
            <method name="getAllTags" type="Tag[]" line="574">
                <declaration name="tags" type="Tag[]" line="575"/>
            </method>
            <javadoc line="580">
                Fetches a tag constant for a well-known tag name (i.e. one of
                  the tags in the set {A, ADDRESS, APPLET, AREA, B,
                  BASE, BASEFONT, BIG,
                  BLOCKQUOTE, BODY, BR, CAPTION, CENTER, CITE, CODE,
                  DD, DFN, DIR, DIV, DL, DT, EM, FONT, FORM, FRAME,
                  FRAMESET, H1, H2, H3, H4, H5, H6, HEAD, HR, HTML,
                  I, IMG, INPUT, ISINDEX, KBD, LI, LINK, MAP, MENU,
                  META, NOBR, NOFRAMES, OBJECT, OL, OPTION, P, PARAM,
                  PRE, SAMP, SCRIPT, SELECT, SMALL, SPAN, STRIKE, S,
                  STRONG, STYLE, SUB, SUP, TABLE, TD, TEXTAREA,
                  TH, TITLE, TR, TT, U, UL, VAR}.  If the given
                  name does not represent one of the well-known tags, then
                  &lt;code&gt;null&lt;/code&gt; will be returned.                
                <param>
                    tagName the <code>String</code> name requested                    
                </param>
                <return>
                    a tag constant corresponding to the <code>tagName</code>,
                      or <code>null</code> if not found                    
                </return>
            </javadoc>
            <method name="getTag" type="Tag" line="599">
                <params>
                    <param name="tagName" type="String"/>
                </params>
                <declaration name="t" type="Tag" line="601"/>
            </method>
            <javadoc line="605">
                Returns the HTML &lt;code&gt;Tag&lt;/code&gt; associated with the
                  &lt;code&gt;StyleConstants&lt;/code&gt; key &lt;code&gt;sc&lt;/code&gt;.
                  If no matching &lt;code&gt;Tag&lt;/code&gt; is found, returns
                  &lt;code&gt;null&lt;/code&gt;.                
                <param>
                    sc the <code>StyleConstants</code> key                    
                </param>
                <return>
                    tag which corresponds to <code>sc</code>, or
                      <code>null</code> if not found                    
                </return>
            </javadoc>
            <method name="getTagForStyleConstantsKey" type="Tag" line="615">
                <params>
                    <param name="sc" type="StyleConstants"/>
                </params>
            </method>
            <javadoc line="619">
                Fetches an integer attribute value.  Attribute values
                  are stored as a string, and this is a convenience method
                  to convert to an actual integer.                
                <param>
                    attr the set of attributes to use to try to fetch a value                    
                </param>
                <param>
                    key the key to use to fetch the value                    
                </param>
                <param>
                    def the default value to use if the attribute isn't
                      defined or there is an error converting to an integer                    
                </param>
            </javadoc>
            <method name="getIntegerAttributeValue" type="int" line="630">
                <params>
                    <param name="attr" type="AttributeSet"/>
                    <param name="key" type="Attribute"/>
                    <param name="def" type="int"/>
                </params>
                <declaration name="value" type="int" line="631"/>
                <declaration name="istr" type="String" line="632"/>
                <scope line="633">
                    <scope line="634"/>
                    <scope line="636"/>
                </scope>
            </method>
            <declaration name="NULL_ATTRIBUTE_VALUE" type="String" line="646"/>
            <declaration name="attHashtable" type="Hashtable&lt;String,Attribute&gt;" line="649"/>
            <scope line="651">
                <scope line="653"/>
            </scope>
            <javadoc line="658">
                Returns the set of HTML attributes recognized.                
                <return>
                    the set of HTML attributes recognized                    
                </return>
            </javadoc>
            <method name="getAllAttributeKeys" type="Attribute[]" line="662">
                <declaration name="attributes" type="Attribute[]" line="663"/>
            </method>
            <javadoc line="669">
                Fetches an attribute constant for a well-known attribute name
                  (i.e. one of the attributes in the set {FACE, COMMENT, SIZE,
                  COLOR, CLEAR, BACKGROUND, BGCOLOR, TEXT, LINK, VLINK, ALINK,
                  WIDTH, HEIGHT, ALIGN, NAME, HREF, REL, REV, TITLE, TARGET,
                  SHAPE, COORDS, ISMAP, NOHREF, ALT, ID, SRC, HSPACE, VSPACE,
                  USEMAP, LOWSRC, CODEBASE, CODE, ARCHIVE, VALUE, VALUETYPE,
                  TYPE, CLASS, STYLE, LANG, DIR, DECLARE, CLASSID, DATA, CODETYPE,
                  STANDBY, BORDER, SHAPES, NOSHADE, COMPACT, START, ACTION, METHOD,
                  ENCTYPE, CHECKED, MAXLENGTH, MULTIPLE, SELECTED, ROWS, COLS,
                  DUMMY, CELLSPACING, CELLPADDING, VALIGN, HALIGN, NOWRAP, ROWSPAN,
                  COLSPAN, PROMPT, HTTPEQUIV, CONTENT, LANGUAGE, VERSION, N,
                  FRAMEBORDER, MARGINWIDTH, MARGINHEIGHT, SCROLLING, NORESIZE,
                  MEDIA, ENDTAG}).
                  If the given name does not represent one of the well-known attributes,
                  then &lt;code&gt;null&lt;/code&gt; will be returned.                
                <param>
                    attName the <code>String</code> requested                    
                </param>
                <return>
                    the <code>Attribute</code> corresponding to <code>attName</code>                    
                </return>
            </javadoc>
            <method name="getAttributeKey" type="Attribute" line="689">
                <params>
                    <param name="attName" type="String"/>
                </params>
                <declaration name="a" type="Attribute" line="690"/>
                <scope line="691"/>
            </method>
        </class>
    </source>