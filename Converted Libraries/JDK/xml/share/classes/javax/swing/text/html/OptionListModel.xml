<?xml version="1.0" encoding="UTF-8"?>
    <source package="javax.swing.text.html">
        <import package="javax.swing"/>
        <import package="javax.swing.event"/>
        <import package="java.util.EventListener"/>
        <import package="java.util.BitSet"/>
        <import package="java.io.Serializable"/>
        <class name="OptionListModel" line="7">
            <extends class="DefaultListModel"/>
            <implements interface="ListSelectionModel"/>
            <implements interface="Serializable"/>
            <javadoc line="7">
                This class extends DefaultListModel, and also implements
                  the ListSelectionModel interface, allowing for it to store state
                  relevant to a SELECT form element which is implemented as a List.
                  If SELECT has a size attribute whose value is greater than 1,
                  or if allows multiple selection then a JList is used to
                  represent it and the OptionListModel is used as its model.
                  It also stores the initial state of the JList, to ensure an
                  accurate reset, if the user requests a reset of the form.                
                <author>
                    Sunita Mani                    
                </author>
            </javadoc>
            <declaration name="MIN" type="int" line="19"/>
            <declaration name="MAX" type="int" line="20"/>
            <declaration name="selectionMode" type="int" line="21"/>
            <declaration name="minIndex" type="int" line="22"/>
            <declaration name="maxIndex" type="int" line="23"/>
            <declaration name="anchorIndex" type="int" line="24"/>
            <declaration name="leadIndex" type="int" line="25"/>
            <declaration name="firstChangedIndex" type="int" line="26"/>
            <declaration name="lastChangedIndex" type="int" line="27"/>
            <declaration name="isAdjusting" type="boolean" line="28"/>
            <declaration name="value" type="BitSet" line="29"/>
            <declaration name="initialValue" type="BitSet" line="30"/>
            <declaration name="listenerList" type="EventListenerList" line="31"/>
            <declaration name="leadAnchorNotificationEnabled" type="boolean" line="32"/>
            <method name="getMinSelectionIndex" type="int" line="33"/>
            <method name="getMaxSelectionIndex" type="int" line="36"/>
            <method name="getValueIsAdjusting" type="boolean" line="39"/>
            <method name="getSelectionMode" type="int" line="42"/>
            <method name="setSelectionMode" type="void" line="45">
                <params>
                    <param name="selectionMode" type="int"/>
                </params>
            </method>
            <method name="isSelectedIndex" type="boolean" line="56">
                <params>
                    <param name="index" type="int"/>
                </params>
            </method>
            <method name="isSelectionEmpty" type="boolean" line="59"/>
            <method name="addListSelectionListener" type="void" line="62">
                <params>
                    <param name="l" type="ListSelectionListener"/>
                </params>
            </method>
            <method name="removeListSelectionListener" type="void" line="65">
                <params>
                    <param name="l" type="ListSelectionListener"/>
                </params>
            </method>
            <javadoc line="68">
                Returns an array of all the &lt;code&gt;ListSelectionListener&lt;/code&gt;s added
                  to this OptionListModel with addListSelectionListener().                
                <return>
                    all of the &lt;code&gt;ListSelectionListener&lt;/code&gt;s added or an empty
                      array if no listeners have been added                    
                </return>
                <since>
                    1.4                    
                </since>
            </javadoc>
            <method name="getListSelectionListeners" type="ListSelectionListener[]" line="75"/>
            <javadoc line="78">
                Notify listeners that we are beginning or ending a
                  series of value changes                
            </javadoc>
            <method name="fireValueChanged" type="void" line="82">
                <params>
                    <param name="isAdjusting" type="boolean"/>
                </params>
            </method>
            <javadoc line="85">
                Notify ListSelectionListeners that the value of the selection,
                  in the closed interval firstIndex,lastIndex, has changed.                
            </javadoc>
            <method name="fireValueChanged" type="void" line="89">
                <params>
                    <param name="firstIndex" type="int"/>
                    <param name="lastIndex" type="int"/>
                </params>
            </method>
            <javadoc line="92">
                @param firstIndex The first index in the interval.                
                <param>
                    lastIndex The last index in the interval.                    
                </param>
                <param>
                    isAdjusting True if this is the final change in a series of them.                    
                </param>
                <see>
                    EventListenerList                    
                </see>
            </javadoc>
            <method name="fireValueChanged" type="void" line="98">
                <params>
                    <param name="firstIndex" type="int"/>
                    <param name="lastIndex" type="int"/>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <declaration name="listeners" type="Object[]" line="99"/>
                <declaration name="e" type="ListSelectionEvent" line="100"/>
                <scope line="101">
                    <scope line="102">
                        <scope line="103"/>
                    </scope>
                </scope>
            </method>
            <method name="fireValueChanged" type="void" line="110">
                <scope line="111"/>
                <declaration name="oldFirstChangedIndex" type="int" line="114"/>
                <declaration name="oldLastChangedIndex" type="int" line="115"/>
            </method>
            <method name="markAsDirty" type="void" line="120">
                <params>
                    <param name="r" type="int"/>
                </params>
            </method>
            <method name="set" type="void" line="124">
                <params>
                    <param name="r" type="int"/>
                </params>
                <scope line="125"/>
                <declaration name="option" type="Option" line="129"/>
            </method>
            <method name="clear" type="void" line="135">
                <params>
                    <param name="r" type="int"/>
                </params>
                <scope line="136"/>
                <declaration name="option" type="Option" line="140"/>
                <scope line="143">
                    <scope line="144">
                        <scope line="145"/>
                    </scope>
                </scope>
                <scope line="150">
                    <scope line="151">
                        <scope line="152"/>
                    </scope>
                </scope>
                <scope line="157"/>
            </method>
            <javadoc line="162">
                Sets the value of the leadAnchorNotificationEnabled flag.                
                <see>
                    #isLeadAnchorNotificationEnabled()                    
                </see>
            </javadoc>
            <method name="setLeadAnchorNotificationEnabled" type="void" line="166">
                <params>
                    <param name="flag" type="boolean"/>
                </params>
            </method>
            <javadoc line="169">
                Returns the value of the leadAnchorNotificationEnabled flag.
                  When leadAnchorNotificationEnabled is true the model
                  generates notification events with bounds that cover all the changes to
                  the selection plus the changes to the lead and anchor indices.
                  Setting the flag to false causes a norrowing of the event&apos;s bounds to
                  include only the elements that have been selected or deselected since
                  the last change. Either way, the model continues to maintain the lead
                  and anchor variables internally. The default is true.                
                <return>
                    the value of the leadAnchorNotificationEnabled flag                    
                </return>
                <see>
                    #setLeadAnchorNotificationEnabled(boolean)                    
                </see>
            </javadoc>
            <method name="isLeadAnchorNotificationEnabled" type="boolean" line="181"/>
            <method name="updateLeadAnchorIndices" type="void" line="184">
                <params>
                    <param name="anchorIndex" type="int"/>
                    <param name="leadIndex" type="int"/>
                </params>
                <scope line="185">
                    <scope line="186">
                        <scope line="187"/>
                    </scope>
                    <scope line="192">
                        <scope line="193"/>
                    </scope>
                </scope>
            </method>
            <method name="contains" type="boolean" line="202">
                <params>
                    <param name="a" type="int"/>
                    <param name="b" type="int"/>
                    <param name="i" type="int"/>
                </params>
            </method>
            <method name="changeSelection" type="void" line="205">
                <params>
                    <param name="clearMin" type="int"/>
                    <param name="clearMax" type="int"/>
                    <param name="setMin" type="int"/>
                    <param name="setMax" type="int"/>
                    <param name="clearFirst" type="boolean"/>
                </params>
                <scope line="206">
                    <declaration name="shouldClear" type="boolean" line="207"/>
                    <declaration name="shouldSet" type="boolean" line="208"/>
                    <scope line="209">
                        <scope line="210"/>
                        <scope line="213"/>
                    </scope>
                    <scope line="217"/>
                    <scope line="220"/>
                </scope>
            </method>
            <method name="changeSelection" type="void" line="226">
                <params>
                    <param name="clearMin" type="int"/>
                    <param name="clearMax" type="int"/>
                    <param name="setMin" type="int"/>
                    <param name="setMax" type="int"/>
                </params>
            </method>
            <method name="clearSelection" type="void" line="229"/>
            <method name="setSelectionInterval" type="void" line="232">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <scope line="233"/>
                <scope line="236"/>
                <declaration name="clearMin" type="int" line="240"/>
                <declaration name="clearMax" type="int" line="241"/>
                <declaration name="setMin" type="int" line="242"/>
                <declaration name="setMax" type="int" line="243"/>
            </method>
            <method name="addSelectionInterval" type="void" line="246">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <scope line="247"/>
                <scope line="250"/>
                <declaration name="clearMin" type="int" line="255"/>
                <declaration name="clearMax" type="int" line="256"/>
                <declaration name="setMin" type="int" line="257"/>
                <declaration name="setMax" type="int" line="258"/>
            </method>
            <method name="removeSelectionInterval" type="void" line="261">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <scope line="262"/>
                <declaration name="clearMin" type="int" line="266"/>
                <declaration name="clearMax" type="int" line="267"/>
                <declaration name="setMin" type="int" line="268"/>
                <declaration name="setMax" type="int" line="269"/>
            </method>
            <method name="setState" type="void" line="272">
                <params>
                    <param name="index" type="int"/>
                    <param name="state" type="boolean"/>
                </params>
                <scope line="273"/>
                <scope line="276"/>
            </method>
            <javadoc line="280">
                Insert length indices beginning before/after index. If the value
                  at index is itself selected, set all of the newly inserted
                  items, otherwise leave them unselected. This method is typically
                  called to sync the selection model with a corresponding change
                  in the data model.                
            </javadoc>
            <method name="insertIndexInterval" type="void" line="287">
                <params>
                    <param name="index" type="int"/>
                    <param name="length" type="int"/>
                    <param name="before" type="boolean"/>
                </params>
                <declaration name="insMinIndex" type="int" line="288"/>
                <declaration name="insMaxIndex" type="int" line="289"/>
                <scope line="290"/>
                <declaration name="setInsertedValues" type="boolean" line="293"/>
                <scope line="294"/>
            </method>
            <javadoc line="298">
                Remove the indices in the interval index0,index1 (inclusive) from
                  the selection model.  This is typically called to sync the selection
                  model width a corresponding change in the data model.  Note
                  that (as always) index0 can be greater than index1.                
            </javadoc>
            <method name="removeIndexInterval" type="void" line="304">
                <params>
                    <param name="index0" type="int"/>
                    <param name="index1" type="int"/>
                </params>
                <declaration name="rmMinIndex" type="int" line="305"/>
                <declaration name="rmMaxIndex" type="int" line="306"/>
                <declaration name="gapLength" type="int" line="307"/>
                <scope line="308"/>
            </method>
            <method name="setValueIsAdjusting" type="void" line="312">
                <params>
                    <param name="isAdjusting" type="boolean"/>
                </params>
                <scope line="313"/>
            </method>
            <method name="toString" type="String" line="318">
                <declaration name="s" type="String" line="319"/>
            </method>
            <javadoc line="322">
                Returns a clone of the receiver with the same selection.
                  &lt;code&gt;listenerLists&lt;/code&gt; are not duplicated.                
                <return>
                    a clone of the receiver                    
                </return>
                <exception>
                    CloneNotSupportedException if the receiver does not
                      both (a) implement the &lt;code&gt;Cloneable&lt;/code&gt; interface
                      and (b) define a &lt;code&gt;clone&lt;/code&gt; method                    
                </exception>
            </javadoc>
            <method name="clone" type="Object" line="330">
                <declaration name="clone" type="OptionListModel" line="331"/>
            </method>
            <method name="getAnchorSelectionIndex" type="int" line="336"/>
            <method name="getLeadSelectionIndex" type="int" line="339"/>
            <javadoc line="342">
                Set the anchor selection index, leaving all selection values unchanged.                
                <see>
                    #getAnchorSelectionIndex                    
                </see>
                <see>
                    #setLeadSelectionIndex                    
                </see>
            </javadoc>
            <method name="setAnchorSelectionIndex" type="void" line="347">
                <params>
                    <param name="anchorIndex" type="int"/>
                </params>
            </method>
            <javadoc line="350">
                Set the lead selection index, ensuring that values between the
                  anchor and the new lead are either all selected or all deselected.
                  If the value at the anchor index is selected, first clear all the
                  values in the range [anchor, oldLeadIndex], then select all the values
                  values in the range [anchor, newLeadIndex], where oldLeadIndex is the old
                  leadIndex and newLeadIndex is the new one.
                  &lt;p&gt;
                  If the value at the anchor index is not selected, do the same thing in reverse,
                  selecting values in the old range and deslecting values in the new one.
                  &lt;p&gt;
                  Generate a single event for this change and notify all listeners.
                  For the purposes of generating minimal bounds in this event, do the
                  operation in a single pass; that way the first and last index inside the
                  ListSelectionEvent that is broadcast will refer to cells that actually
                  changed value because of this method. If, instead, this operation were
                  done in two steps the effect on the selection state would be the same
                  but two events would be generated and the bounds around the changed values
                  would be wider, including cells that had been first cleared and only
                  to later be set.
                  &lt;p&gt;
                  This method can be used in the mouseDragged() method of a UI class
                  to extend a selection.                
                <see>
                    #getLeadSelectionIndex                    
                </see>
                <see>
                    #setAnchorSelectionIndex                    
                </see>
            </javadoc>
            <method name="setLeadSelectionIndex" type="void" line="376">
                <params>
                    <param name="leadIndex" type="int"/>
                </params>
                <declaration name="anchorIndex" type="int" line="377"/>
                <scope line="378"/>
                <declaration name="oldMin" type="int" line="381"/>
                <declaration name="oldMax" type="int" line="382"/>
                <declaration name="newMin" type="int" line="383"/>
                <declaration name="newMax" type="int" line="384"/>
                <scope line="385"/>
                <scope line="388"/>
            </method>
            <javadoc line="394">
                This method is responsible for storing the state
                  of the initial selection.  If the selectionMode
                  is the default, i.e allowing only for SINGLE_SELECTION,
                  then the very last OPTION that has the selected
                  attribute set wins.                
            </javadoc>
            <method name="setInitialSelection" type="void" line="401">
                <params>
                    <param name="i" type="int"/>
                </params>
                <scope line="402"/>
                <scope line="405"/>
            </method>
            <javadoc line="410">
                Fetches the BitSet that represents the initial
                  set of selected items in the list.                
            </javadoc>
            <method name="getInitialSelection" type="BitSet" line="414"/>
        </class>
    </source>